
Stm32f446-Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005294  08005294  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800529c  0800529c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080052b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080052b0  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011079  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000224d  00000000  00000000  000310b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00033308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00034280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227d3  00000000  00000000  000350f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b513  00000000  00000000  000578c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1884  00000000  00000000  00062dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013465a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  001346d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004f44 	.word	0x08004f44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004f44 	.word	0x08004f44

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f000 fea6 	bl	800125c <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f000 fe9e 	bl	800125c <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fe96 	bl	800125c <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fe8e 	bl	800125c <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f000 fed2 	bl	8001308 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08004f5c 	.word	0x08004f5c

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <Rf96_OutPower+0x28>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	4619      	mov	r1, r3
 8000582:	2009      	movs	r0, #9
 8000584:	f000 fe6a 	bl	800125c <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000588:	2187      	movs	r1, #135	; 0x87
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f000 fe66 	bl	800125c <SPIWrite>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08004f68 	.word	0x08004f68

0800059c <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Rf96_OCP+0x20>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	200b      	movs	r0, #11
 80005b0:	f000 fe54 	bl	800125c <SPIWrite>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	08004f6c 	.word	0x08004f6c

080005c0 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <Rf96_LNA+0x20>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	4619      	mov	r1, r3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f000 fe42 	bl	800125c <SPIWrite>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08004f70 	.word	0x08004f70

080005e4 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005f6:	210e      	movs	r1, #14
 80005f8:	201d      	movs	r0, #29
 80005fa:	f000 fe2f 	bl	800125c <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // с CRC
	//SPIWrite(LR_RegDetectOptimize,0xC5); // Только для sf=6
	//SPIWrite(LR_RegDetecionThreshold,0x0C); // Только для sf=6
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xC4);  // SF=12
 8000618:	21c4      	movs	r1, #196	; 0xc4
 800061a:	201e      	movs	r0, #30
 800061c:	f000 fe1e 	bl	800125c <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	201f      	movs	r0, #31
 8000628:	f000 fe18 	bl	800125c <SPIWrite>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2020      	movs	r0, #32
 800064a:	f000 fe07 	bl	800125c <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2021      	movs	r0, #33	; 0x21
 8000656:	f000 fe01 	bl	800125c <SPIWrite>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	4604      	mov	r4, r0
 800066a:	4608      	mov	r0, r1
 800066c:	4611      	mov	r1, r2
 800066e:	461a      	mov	r2, r3
 8000670:	4623      	mov	r3, r4
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
 8000678:	460b      	mov	r3, r1
 800067a:	717b      	strb	r3, [r7, #5]
 800067c:	4613      	mov	r3, r2
 800067e:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b2da      	uxtb	r2, r3
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b2da      	uxtb	r2, r3
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f000 fdda 	bl	800125c <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006b4:	21f7      	movs	r1, #247	; 0xf7
 80006b6:	2011      	movs	r0, #17
 80006b8:	f000 fdd0 	bl	800125c <SPIWrite>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegIrqFlagsMask,0x3F); // Без CRC
	SPIWrite(LR_RegIrqFlagsMask,0x1F); //с CRC
 80006c4:	211f      	movs	r1, #31
 80006c6:	2011      	movs	r0, #17
 80006c8:	f000 fdc8 	bl	800125c <SPIWrite>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	2022      	movs	r0, #34	; 0x22
 80006e0:	f000 fdbc 	bl	800125c <SPIWrite>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4619      	mov	r1, r3
 80006fa:	200e      	movs	r0, #14
 80006fc:	f000 fdae 	bl	800125c <SPIWrite>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	200f      	movs	r0, #15
 8000718:	f000 fda0 	bl	800125c <SPIWrite>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4619      	mov	r1, r3
 8000732:	200d      	movs	r0, #13
 8000734:	f000 fd92 	bl	800125c <SPIWrite>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Rf96_RX_Single_mode>:
// Вход в режим приема ( один пакет)
void Rf96_RX_Single_mode(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
 8000744:	2186      	movs	r1, #134	; 0x86
 8000746:	2001      	movs	r0, #1
 8000748:	f000 fd88 	bl	800125c <SPIWrite>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 8000754:	2183      	movs	r1, #131	; 0x83
 8000756:	2001      	movs	r0, #1
 8000758:	f000 fd80 	bl	800125c <SPIWrite>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fdc8 	bl	8001308 <BurstWrite>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000788:	2010      	movs	r0, #16
 800078a:	f000 fd49 	bl	8001220 <SPIRead>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4619      	mov	r1, r3
 8000796:	200d      	movs	r0, #13
 8000798:	f000 fd60 	bl	800125c <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079c:	2013      	movs	r0, #19
 800079e:	f000 fd3f 	bl	8001220 <SPIRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	461a      	mov	r2, r3
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fd79 	bl	80012a4 <SPIBurstRead>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007be:	f7ff feb1 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c2:	f7ff feb7 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff febc 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fecf 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fee2 	bl	800059c <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fef1 	bl	80005c0 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	2007      	movs	r0, #7
 80007e4:	f7ff fefe 	bl	80005e4 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007ec:	2101      	movs	r1, #1
 80007ee:	2006      	movs	r0, #6
 80007f0:	f7ff ff09 	bl	8000606 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff ff1d 	bl	8000634 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 80007fa:	f7ff fe8b 	bl	8000514 <Rf96_Standby>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 8000806:	2302      	movs	r3, #2
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff ff28 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000812:	f7ff fe77 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 8000816:	f7ff ff4b 	bl	80006b0 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 800081a:	202a      	movs	r0, #42	; 0x2a
 800081c:	f7ff ff58 	bl	80006d0 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000820:	2080      	movs	r0, #128	; 0x80
 8000822:	f7ff ff63 	bl	80006ec <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	f7ff ff7c 	bl	8000724 <Rf96_FIFO_point>

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 8000834:	2100      	movs	r1, #0
 8000836:	2024      	movs	r0, #36	; 0x24
 8000838:	f000 fd10 	bl	800125c <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 800083c:	2302      	movs	r3, #2
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ff0d 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000848:	f7ff ff3a 	bl	80006c0 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800084c:	f7ff fe5a 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000850:	202a      	movs	r0, #42	; 0x2a
 8000852:	f7ff ff3d 	bl	80006d0 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff56 	bl	8000708 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ff61 	bl	8000724 <Rf96_FIFO_point>
	  // Входим в RX single мод
	  Rf96_RX_Single_mode();
 8000862:	f7ff ff6d 	bl	8000740 <Rf96_RX_Single_mode>
	  //Rf96_RX_Continuous_mode();

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	4619      	mov	r1, r3
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff6f 	bl	8000760 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000882:	f7ff ff65 	bl	8000750 <Rf96_TX_mode>

	// Ждем пока появится прерывание

	while(1)
	{
		if(Get_NIRQ_Di0())
 8000886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <Rf96_LoRaTxPacket+0x3c>)
 800088c:	f001 fe10 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f7      	beq.n	8000886 <Rf96_LoRaTxPacket+0x1a>
		{
			// Сбрасываем флаги
			Rf96_LoRaClearIrq();
 8000896:	f7ff fe35 	bl	8000504 <Rf96_LoRaClearIrq>
            // Заходим в Standby
			Rf96_Standby();
 800089a:	f7ff fe3b 	bl	8000514 <Rf96_Standby>

			break;
 800089e:	bf00      	nop
		}
	}


}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40020000 	.word	0x40020000

080008ac <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008bc:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008be:	e012      	b.n	80008e6 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008c0:	89fb      	ldrh	r3, [r7, #14]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	89fb      	ldrh	r3, [r7, #14]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	1c59      	adds	r1, r3, #1
 80008d2:	6079      	str	r1, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4043      	eors	r3, r0
 80008d8:	4909      	ldr	r1, [pc, #36]	; (8000900 <Crc16+0x54>)
 80008da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008de:	b21b      	sxth	r3, r3
 80008e0:	4053      	eors	r3, r2
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008e6:	887b      	ldrh	r3, [r7, #2]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	807a      	strh	r2, [r7, #2]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1e7      	bne.n	80008c0 <Crc16+0x14>

    return crc;
 80008f0:	89fb      	ldrh	r3, [r7, #14]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	08004f74 	.word	0x08004f74

08000904 <Crc8>:
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};
// Расчет CRC8
unsigned char Crc8(unsigned char *pcBlock, unsigned char len)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
    unsigned char crc = 0xFF;
 8000910:	23ff      	movs	r3, #255	; 0xff
 8000912:	73fb      	strb	r3, [r7, #15]

    while (len--)
 8000914:	e00a      	b.n	800092c <Crc8+0x28>
        crc = Crc8Table[crc ^ *pcBlock++];
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	4053      	eors	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <Crc8+0x40>)
 8000928:	5c9b      	ldrb	r3, [r3, r2]
 800092a:	73fb      	strb	r3, [r7, #15]
    while (len--)
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	70fa      	strb	r2, [r7, #3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1ef      	bne.n	8000916 <Crc8+0x12>

    return crc;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	08005174 	.word	0x08005174

08000948 <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 8000952:	f7ff ff56 	bl	8000802 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e006      	b.n	800096a <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <CommandToRadio+0x7c>)
 8000960:	2100      	movs	r1, #0
 8000962:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b29      	cmp	r3, #41	; 0x29
 800096e:	d9f5      	bls.n	800095c <CommandToRadio+0x14>
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <CommandToRadio+0x7c>)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000976:	2128      	movs	r1, #40	; 0x28
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <CommandToRadio+0x7c>)
 800097a:	f7ff ff97 	bl	80008ac <Crc16>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <CommandToRadio+0x80>)
 8000984:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <CommandToRadio+0x80>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <CommandToRadio+0x7c>)
 8000992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <CommandToRadio+0x80>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <CommandToRadio+0x7c>)
 800099e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 80009a2:	2080      	movs	r0, #128	; 0x80
 80009a4:	f7ff fea2 	bl	80006ec <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 80009a8:	2080      	movs	r0, #128	; 0x80
 80009aa:	f7ff febb 	bl	8000724 <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 80009ae:	f7ff fda9 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 80009b2:	212a      	movs	r1, #42	; 0x2a
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <CommandToRadio+0x7c>)
 80009b6:	f7ff ff59 	bl	800086c <Rf96_LoRaTxPacket>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000009c 	.word	0x2000009c
 80009c8:	2000002a 	.word	0x2000002a

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 feaf 	bl	8001734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f9d1 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f000 fafb 	bl	8000fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009de:	f000 fad1 	bl	8000f84 <MX_DMA_Init>
  MX_SPI1_Init();
 80009e2:	f000 fa39 	bl	8000e58 <MX_SPI1_Init>
  MX_TIM6_Init();
 80009e6:	f000 fa6d 	bl	8000ec4 <MX_TIM6_Init>
  HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f000 ff14 	bl	8001818 <HAL_Delay>
  MX_USART2_UART_Init();
 80009f0:	f000 fa9e 	bl	8000f30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Индикация включения УСИ ПРД
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	48b4      	ldr	r0, [pc, #720]	; (8000ccc <main+0x300>)
 80009fa:	f001 fd71 	bl	80024e0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80009fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a02:	f000 ff09 	bl	8001818 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	48b0      	ldr	r0, [pc, #704]	; (8000ccc <main+0x300>)
 8000a0c:	f001 fd68 	bl	80024e0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a14:	f000 ff00 	bl	8001818 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	48ab      	ldr	r0, [pc, #684]	; (8000ccc <main+0x300>)
 8000a1e:	f001 fd5f 	bl	80024e0 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a26:	f000 fef7 	bl	8001818 <HAL_Delay>
  // Инициализация lora sx1272
  Rf96_Lora_init();
 8000a2a:	f7ff fec6 	bl	80007ba <Rf96_Lora_init>
  // Вход в режим приема
  //Rf96_Lora_RX_mode();
  // Запуск приема команд с Linux
  HAL_UART_Receive_IT(&huart2, &data, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	49a7      	ldr	r1, [pc, #668]	; (8000cd0 <main+0x304>)
 8000a32:	48a8      	ldr	r0, [pc, #672]	; (8000cd4 <main+0x308>)
 8000a34:	f003 fb86 	bl	8004144 <HAL_UART_Receive_IT>
  // Запуск таймера для работы светодиода
  HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	48a7      	ldr	r0, [pc, #668]	; (8000cd8 <main+0x30c>)
 8000a3a:	f003 f818 	bl	8003a6e <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Фильтрация помех 1 разъема
	  if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000a3e:	f000 fedf 	bl	8001800 <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	4ba5      	ldr	r3, [pc, #660]	; (8000cdc <main+0x310>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2bc8      	cmp	r3, #200	; 0xc8
 8000a4c:	d911      	bls.n	8000a72 <main+0xa6>
 8000a4e:	4ba4      	ldr	r3, [pc, #656]	; (8000ce0 <main+0x314>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00d      	beq.n	8000a72 <main+0xa6>
	  {
		    ReadRdy=0;
 8000a56:	4ba2      	ldr	r3, [pc, #648]	; (8000ce0 <main+0x314>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000a5c:	489d      	ldr	r0, [pc, #628]	; (8000cd4 <main+0x308>)
 8000a5e:	f003 fbc6 	bl	80041ee <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	499a      	ldr	r1, [pc, #616]	; (8000cd0 <main+0x304>)
 8000a66:	489b      	ldr	r0, [pc, #620]	; (8000cd4 <main+0x308>)
 8000a68:	f003 fb6c 	bl	8004144 <HAL_UART_Receive_IT>
			countRx=0;
 8000a6c:	4b9d      	ldr	r3, [pc, #628]	; (8000ce4 <main+0x318>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
	  }


	  // Пришла какая-то посылка по linux
	  if(Readflag==1 && AccessRadio==0)
 8000a72:	4b9d      	ldr	r3, [pc, #628]	; (8000ce8 <main+0x31c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	f040 8080 	bne.w	8000b7c <main+0x1b0>
 8000a7c:	4b9b      	ldr	r3, [pc, #620]	; (8000cec <main+0x320>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d17b      	bne.n	8000b7c <main+0x1b0>
	  {
		  Readflag=0;
 8000a84:	4b98      	ldr	r3, [pc, #608]	; (8000ce8 <main+0x31c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

		  CRC_8c=BuffRx[MaxBuffOfCKT-1];
 8000a8a:	4b99      	ldr	r3, [pc, #612]	; (8000cf0 <main+0x324>)
 8000a8c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8000a90:	4b98      	ldr	r3, [pc, #608]	; (8000cf4 <main+0x328>)
 8000a92:	701a      	strb	r2, [r3, #0]
          if(CRC_8c==Crc8(BuffRx,MaxBuffOfCKT-1)) // если CRC совпало
 8000a94:	212a      	movs	r1, #42	; 0x2a
 8000a96:	4896      	ldr	r0, [pc, #600]	; (8000cf0 <main+0x324>)
 8000a98:	f7ff ff34 	bl	8000904 <Crc8>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b94      	ldr	r3, [pc, #592]	; (8000cf4 <main+0x328>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d15e      	bne.n	8000b66 <main+0x19a>
          {
        	  switch(BuffRx[CommIndex])
 8000aa8:	4b91      	ldr	r3, [pc, #580]	; (8000cf0 <main+0x324>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	2b05      	cmp	r3, #5
 8000ab0:	d859      	bhi.n	8000b66 <main+0x19a>
 8000ab2:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <main+0xec>)
 8000ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab8:	08000ad1 	.word	0x08000ad1
 8000abc:	08000aef 	.word	0x08000aef
 8000ac0:	08000b0d 	.word	0x08000b0d
 8000ac4:	08000b67 	.word	0x08000b67
 8000ac8:	08000b2b 	.word	0x08000b2b
 8000acc:	08000b49 	.word	0x08000b49
        	  {
        	  case 1:
        		  LedMode1=1; // Режим мигания - посылка передается
 8000ad0:	4b89      	ldr	r3, [pc, #548]	; (8000cf8 <main+0x32c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
        		  Resolve4com=0;
 8000ad6:	4b89      	ldr	r3, [pc, #548]	; (8000cfc <main+0x330>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
        		  CommandToRadio(1);  // Команда начала записи: Создаем новый файл и начинаем прием данных
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff ff33 	bl	8000948 <CommandToRadio>
  			      // Ожидаем команду
  			      Rf96_Lora_RX_mode();
 8000ae2:	f7ff fea5 	bl	8000830 <Rf96_Lora_RX_mode>
  			      // Занимаем радиоканал
  			      AccessRadio=1;
 8000ae6:	4b81      	ldr	r3, [pc, #516]	; (8000cec <main+0x320>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
        		  break;
 8000aec:	e03b      	b.n	8000b66 <main+0x19a>
        	  case 2:
        		  LedMode1=1; // Режим мигания - посылка передается
 8000aee:	4b82      	ldr	r3, [pc, #520]	; (8000cf8 <main+0x32c>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
        		  Resolve4com=0;
 8000af4:	4b81      	ldr	r3, [pc, #516]	; (8000cfc <main+0x330>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
        		  CommandToRadio(2); // Команда открытия клапана
 8000afa:	2002      	movs	r0, #2
 8000afc:	f7ff ff24 	bl	8000948 <CommandToRadio>
  			      // Ожидаем команду
  			      Rf96_Lora_RX_mode();
 8000b00:	f7ff fe96 	bl	8000830 <Rf96_Lora_RX_mode>
  			      // Занимаем радиоканал
  			      AccessRadio=1;
 8000b04:	4b79      	ldr	r3, [pc, #484]	; (8000cec <main+0x320>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b0a:	e02c      	b.n	8000b66 <main+0x19a>
        	  case 3:
        		  LedMode1=1; // Режим мигания - посылка передается
 8000b0c:	4b7a      	ldr	r3, [pc, #488]	; (8000cf8 <main+0x32c>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
        		  Resolve4com=0;
 8000b12:	4b7a      	ldr	r3, [pc, #488]	; (8000cfc <main+0x330>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
        		  CommandToRadio(3); // Команда запуска двигателя
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f7ff ff15 	bl	8000948 <CommandToRadio>
  			      // Ожидаем команду
  			      Rf96_Lora_RX_mode();
 8000b1e:	f7ff fe87 	bl	8000830 <Rf96_Lora_RX_mode>
  			      // Занимаем радиоканал
  			      AccessRadio=1;
 8000b22:	4b72      	ldr	r3, [pc, #456]	; (8000cec <main+0x320>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b28:	e01d      	b.n	8000b66 <main+0x19a>
  			      // Ожидаем команду
  			      Rf96_Lora_RX_mode();
  			      */
        		  break;
        	  case 5:
        		  LedMode1=1; // Режим мигания - посылка передается
 8000b2a:	4b73      	ldr	r3, [pc, #460]	; (8000cf8 <main+0x32c>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
        		  Resolve4com=0;
 8000b30:	4b72      	ldr	r3, [pc, #456]	; (8000cfc <main+0x330>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
        		  CommandToRadio(5); // Команда закрытия файла на SD и запрет записи на SD
 8000b36:	2005      	movs	r0, #5
 8000b38:	f7ff ff06 	bl	8000948 <CommandToRadio>
  			      // Ожидаем команду
  			      Rf96_Lora_RX_mode();
 8000b3c:	f7ff fe78 	bl	8000830 <Rf96_Lora_RX_mode>
  			      // Занимаем радиоканал
  			      AccessRadio=1;
 8000b40:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <main+0x320>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b46:	e00e      	b.n	8000b66 <main+0x19a>
        	  case 6:
        		  LedMode1=1; // Режим мигания - посылка передается
 8000b48:	4b6b      	ldr	r3, [pc, #428]	; (8000cf8 <main+0x32c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
        		  Resolve4com=0;
 8000b4e:	4b6b      	ldr	r3, [pc, #428]	; (8000cfc <main+0x330>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
        		  CommandToRadio(6); // Команда закрытия клапана
 8000b54:	2006      	movs	r0, #6
 8000b56:	f7ff fef7 	bl	8000948 <CommandToRadio>
  			      // Ожидаем команду
  			      Rf96_Lora_RX_mode();
 8000b5a:	f7ff fe69 	bl	8000830 <Rf96_Lora_RX_mode>
  			      // Занимаем радиоканал
  			      AccessRadio=1;
 8000b5e:	4b63      	ldr	r3, [pc, #396]	; (8000cec <main+0x320>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b64:	bf00      	nop

        	  }
          }
		    countRx=0;
 8000b66:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <main+0x318>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000b6c:	4859      	ldr	r0, [pc, #356]	; (8000cd4 <main+0x308>)
 8000b6e:	f003 fb3e 	bl	80041ee <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	4956      	ldr	r1, [pc, #344]	; (8000cd0 <main+0x304>)
 8000b76:	4857      	ldr	r0, [pc, #348]	; (8000cd4 <main+0x308>)
 8000b78:	f003 fae4 	bl	8004144 <HAL_UART_Receive_IT>

	  }


	  if(Get_NIRQ_Di0()) // Прерывание по приему по радиоканалу
 8000b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b80:	485f      	ldr	r0, [pc, #380]	; (8000d00 <main+0x334>)
 8000b82:	f001 fc95 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 80ca 	beq.w	8000d22 <main+0x356>
	  {

            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000b8e:	485d      	ldr	r0, [pc, #372]	; (8000d04 <main+0x338>)
 8000b90:	f7ff fdf6 	bl	8000780 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000b94:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <main+0x338>)
 8000b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b58      	ldr	r3, [pc, #352]	; (8000d04 <main+0x338>)
 8000ba2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b56      	ldr	r3, [pc, #344]	; (8000d08 <main+0x33c>)
 8000bae:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 8000bb0:	f7ff fca8 	bl	8000504 <Rf96_LoRaClearIrq>

			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2)) // Если CRC16 совпало
 8000bb4:	2128      	movs	r1, #40	; 0x28
 8000bb6:	4853      	ldr	r0, [pc, #332]	; (8000d04 <main+0x338>)
 8000bb8:	f7ff fe78 	bl	80008ac <Crc16>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b51      	ldr	r3, [pc, #324]	; (8000d08 <main+0x33c>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 80ac 	bne.w	8000d22 <main+0x356>
			{
				switch(TX_RX_Radio[CommIndex])
 8000bca:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <main+0x338>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	2b05      	cmp	r3, #5
 8000bd2:	f200 80a6 	bhi.w	8000d22 <main+0x356>
 8000bd6:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <main+0x210>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	08000bf5 	.word	0x08000bf5
 8000be0:	08000c1d 	.word	0x08000c1d
 8000be4:	08000c35 	.word	0x08000c35
 8000be8:	08000c4d 	.word	0x08000c4d
 8000bec:	08000cbb 	.word	0x08000cbb
 8000bf0:	08000d11 	.word	0x08000d11
				{
				case 1:   // Команда начала записи: Создаем файл
					LedMode1=0; // посылка принята (просто зажигаем светодиод)
 8000bf4:	4b40      	ldr	r3, [pc, #256]	; (8000cf8 <main+0x32c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4833      	ldr	r0, [pc, #204]	; (8000ccc <main+0x300>)
 8000c00:	f001 fc6e 	bl	80024e0 <HAL_GPIO_WritePin>
					// Посылка принята успешно, отправляем запрос на данные
					Resolve4com=1; // Разрешение на 4 команду
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <main+0x330>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
					LedMode1=1; // Режим мигания - посылка передается
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <main+0x32c>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000c10:	2004      	movs	r0, #4
 8000c12:	f7ff fe99 	bl	8000948 <CommandToRadio>
					 // Ожидаем команду
					Rf96_Lora_RX_mode();
 8000c16:	f7ff fe0b 	bl	8000830 <Rf96_Lora_RX_mode>
					break;
 8000c1a:	e082      	b.n	8000d22 <main+0x356>
				case 2:   // Команда открытия клапана
					LedMode1=0; // посылка принята (просто зажигаем светодиод)
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <main+0x32c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2102      	movs	r1, #2
 8000c26:	4829      	ldr	r0, [pc, #164]	; (8000ccc <main+0x300>)
 8000c28:	f001 fc5a 	bl	80024e0 <HAL_GPIO_WritePin>
	  			      // радиоканал не занят
	  			      AccessRadio=0;
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <main+0x320>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
					break;
 8000c32:	e076      	b.n	8000d22 <main+0x356>
				case 3:   // Команда запуска двигателя
					LedMode1=0; // посылка принята (просто зажигаем светодиод)
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <main+0x32c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4823      	ldr	r0, [pc, #140]	; (8000ccc <main+0x300>)
 8000c40:	f001 fc4e 	bl	80024e0 <HAL_GPIO_WritePin>
	  			      // радиоканал не занят
	  			      AccessRadio=0;
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <main+0x320>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
					break;
 8000c4a:	e06a      	b.n	8000d22 <main+0x356>
				case 4:   // Команда запроса данных
					LedMode1=0; // посылка принята (просто зажигаем светодиод)
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <main+0x32c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	481d      	ldr	r0, [pc, #116]	; (8000ccc <main+0x300>)
 8000c58:	f001 fc42 	bl	80024e0 <HAL_GPIO_WritePin>
					// Пересылаем принятый пакет на linux
					for(uint8_t i=0;i<MaxBuffOfCKT-4;i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	e009      	b.n	8000c76 <main+0x2aa>
					BuffTx[i+4]=TX_RX_Radio[i];
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	3304      	adds	r3, #4
 8000c68:	4926      	ldr	r1, [pc, #152]	; (8000d04 <main+0x338>)
 8000c6a:	5c89      	ldrb	r1, [r1, r2]
 8000c6c:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <main+0x340>)
 8000c6e:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i=0;i<MaxBuffOfCKT-4;i++)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	3301      	adds	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b26      	cmp	r3, #38	; 0x26
 8000c7a:	d9f2      	bls.n	8000c62 <main+0x296>
					BuffTx[0]=0x7C;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <main+0x340>)
 8000c7e:	227c      	movs	r2, #124	; 0x7c
 8000c80:	701a      	strb	r2, [r3, #0]
					BuffTx[1]=0x6E;
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <main+0x340>)
 8000c84:	226e      	movs	r2, #110	; 0x6e
 8000c86:	705a      	strb	r2, [r3, #1]
					BuffTx[2]=0xA1;
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <main+0x340>)
 8000c8a:	22a1      	movs	r2, #161	; 0xa1
 8000c8c:	709a      	strb	r2, [r3, #2]
					BuffTx[3]=0x2C;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <main+0x340>)
 8000c90:	222c      	movs	r2, #44	; 0x2c
 8000c92:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, BuffTx, MaxBuffOfCKT,100);
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	222b      	movs	r2, #43	; 0x2b
 8000c98:	491c      	ldr	r1, [pc, #112]	; (8000d0c <main+0x340>)
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <main+0x308>)
 8000c9c:	f003 f9b9 	bl	8004012 <HAL_UART_Transmit>
					// Посылка принята успешно, отправляем запрос на данные
					if(Resolve4com==1) // Если нет запрета на 4 команду, то отправляем ее
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <main+0x330>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d104      	bne.n	8000cb2 <main+0x2e6>
					{
					 CommandToRadio(4);
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff fe4d 	bl	8000948 <CommandToRadio>
					 // Ожидаем команду
					 Rf96_Lora_RX_mode();
 8000cae:	f7ff fdbf 	bl	8000830 <Rf96_Lora_RX_mode>
					}
	  			     // радиоканал не занят
	  			     AccessRadio=0;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <main+0x320>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]

					break;
 8000cb8:	e033      	b.n	8000d22 <main+0x356>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					LedMode1=0; // посылка принята (просто зажигаем светодиод)
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <main+0x32c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4801      	ldr	r0, [pc, #4]	; (8000ccc <main+0x300>)
 8000cc6:	f001 fc0b 	bl	80024e0 <HAL_GPIO_WritePin>
					break;
 8000cca:	e02a      	b.n	8000d22 <main+0x356>
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	2000002d 	.word	0x2000002d
 8000cd4:	20000218 	.word	0x20000218
 8000cd8:	20000154 	.word	0x20000154
 8000cdc:	20000034 	.word	0x20000034
 8000ce0:	20000031 	.word	0x20000031
 8000ce4:	2000002c 	.word	0x2000002c
 8000ce8:	2000002e 	.word	0x2000002e
 8000cec:	20000038 	.word	0x20000038
 8000cf0:	200001ec 	.word	0x200001ec
 8000cf4:	20000028 	.word	0x20000028
 8000cf8:	20000030 	.word	0x20000030
 8000cfc:	2000002f 	.word	0x2000002f
 8000d00:	40020000 	.word	0x40020000
 8000d04:	2000009c 	.word	0x2000009c
 8000d08:	2000002a 	.word	0x2000002a
 8000d0c:	20000128 	.word	0x20000128
				case 6:  // Команда закрытия клапана
					LedMode1=0; // посылка принята (просто зажигаем светодиод)
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <main+0x39c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <main+0x3a0>)
 8000d1c:	f001 fbe0 	bl	80024e0 <HAL_GPIO_WritePin>
					break;
 8000d20:	bf00      	nop
				}
			}
	  }
	  // Если Радиосигнал не был принят
	  if(Get_NIRQ_Di1()) // Прерывание по таймауту
 8000d22:	2108      	movs	r1, #8
 8000d24:	4812      	ldr	r0, [pc, #72]	; (8000d70 <main+0x3a4>)
 8000d26:	f001 fbc3 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f43f ae86 	beq.w	8000a3e <main+0x72>
	  	 	  {
				  LedMode1=0; // посылка пропущена (тушим светодиод)
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <main+0x39c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <main+0x3a0>)
 8000d3e:	f001 fbcf 	bl	80024e0 <HAL_GPIO_WritePin>
	  	 		  Rf96_LoRaClearIrq();
 8000d42:	f7ff fbdf 	bl	8000504 <Rf96_LoRaClearIrq>
	  	 		  // Отправляем еще один запрос на данные, иначе просто ожидаем команд с linux
	  	 		  if(Resolve4com==1)
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <main+0x3a8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d107      	bne.n	8000d5e <main+0x392>
	  	 		  {
	  	 			  LedMode1=1; // Режим мигания - посылка передается
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <main+0x39c>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
	        		  CommandToRadio(4); // Команда запроса данных
 8000d54:	2004      	movs	r0, #4
 8000d56:	f7ff fdf7 	bl	8000948 <CommandToRadio>
	  			      // Ожидаем команду
	  			      Rf96_Lora_RX_mode();
 8000d5a:	f7ff fd69 	bl	8000830 <Rf96_Lora_RX_mode>
	  	 		  }
  			      // радиоканал не занят
  			      AccessRadio=0;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <main+0x3ac>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	  if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000d64:	e66b      	b.n	8000a3e <main+0x72>
 8000d66:	bf00      	nop
 8000d68:	20000030 	.word	0x20000030
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020400 	.word	0x40020400
 8000d74:	2000002f 	.word	0x2000002f
 8000d78:	20000038 	.word	0x20000038

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 f8d2 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <SystemClock_Config+0xd4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <SystemClock_Config+0xd4>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <SystemClock_Config+0xd4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <SystemClock_Config+0xd8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <SystemClock_Config+0xd8>)
 8000dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <SystemClock_Config+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de4:	2310      	movs	r3, #16
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000df0:	2310      	movs	r3, #16
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000df4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000df8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fe56 	bl	8002abc <HAL_RCC_OscConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e16:	f000 f9d7 	bl	80011c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fb86 	bl	8002548 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e42:	f000 f9c1 	bl	80011c8 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3750      	adds	r7, #80	; 0x50
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e8c:	2218      	movs	r2, #24
 8000e8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000eaa:	f002 f861 	bl	8002f70 <HAL_SPI_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb4:	f000 f988 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000194 	.word	0x20000194
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ed4:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_TIM6_Init+0x68>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000eda:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ede:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ee8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000eec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ef6:	f002 fd8f 	bl	8003a18 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f00:	f000 f962 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000f12:	f002 ffa1 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f1c:	f000 f954 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000154 	.word	0x20000154
 8000f2c:	40001000 	.word	0x40001000

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_USART2_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f68:	f003 f806 	bl	8003f78 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 f929 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000218 	.word	0x20000218
 8000f80:	40004400 	.word	0x40004400

08000f84 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_DMA_Init+0x4c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <MX_DMA_Init+0x4c>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MX_DMA_Init+0x4c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2010      	movs	r0, #16
 8000fac:	f000 fd31 	bl	8001a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 fd4a 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2011      	movs	r0, #17
 8000fbc:	f000 fd29 	bl	8001a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fc0:	2011      	movs	r0, #17
 8000fc2:	f000 fd42 	bl	8001a4a <HAL_NVIC_EnableIRQ>

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <MX_GPIO_Init+0x128>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a42      	ldr	r2, [pc, #264]	; (80010fc <MX_GPIO_Init+0x128>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b40      	ldr	r3, [pc, #256]	; (80010fc <MX_GPIO_Init+0x128>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <MX_GPIO_Init+0x128>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a3b      	ldr	r2, [pc, #236]	; (80010fc <MX_GPIO_Init+0x128>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <MX_GPIO_Init+0x128>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <MX_GPIO_Init+0x128>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a34      	ldr	r2, [pc, #208]	; (80010fc <MX_GPIO_Init+0x128>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <MX_GPIO_Init+0x128>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <MX_GPIO_Init+0x128>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <MX_GPIO_Init+0x128>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <MX_GPIO_Init+0x128>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	210e      	movs	r1, #14
 800105e:	4828      	ldr	r0, [pc, #160]	; (8001100 <MX_GPIO_Init+0x12c>)
 8001060:	f001 fa3e 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	4826      	ldr	r0, [pc, #152]	; (8001104 <MX_GPIO_Init+0x130>)
 800106a:	f001 fa39 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_GPIO_Init+0x134>)
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	481f      	ldr	r0, [pc, #124]	; (8001100 <MX_GPIO_Init+0x12c>)
 8001084:	f001 f882 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001088:	230e      	movs	r3, #14
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4818      	ldr	r0, [pc, #96]	; (8001100 <MX_GPIO_Init+0x12c>)
 80010a0:	f001 f874 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 80010a4:	f240 4301 	movw	r3, #1025	; 0x401
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <MX_GPIO_Init+0x138>)
 80010ba:	f001 f867 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010be:	2338      	movs	r3, #56	; 0x38
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <MX_GPIO_Init+0x130>)
 80010d2:	f001 f85b 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d6:	2340      	movs	r3, #64	; 0x40
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_GPIO_Init+0x130>)
 80010ee:	f001 f84d 	bl	800218c <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020800 	.word	0x40020800
 8001104:	40020400 	.word	0x40020400
 8001108:	10210000 	.word	0x10210000
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Обработчик прерываний по приему usart2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	  if(huart == &huart2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_UART_RxCpltCallback+0x64>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d124      	bne.n	800116a <HAL_UART_RxCpltCallback+0x5a>
	  {
		  ReadRdy=1;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_RxCpltCallback+0x68>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
		  reciveTime=HAL_GetTick();
 8001126:	f000 fb6b 	bl	8001800 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_UART_RxCpltCallback+0x6c>)
 800112e:	601a      	str	r2, [r3, #0]
		  // Заносим пришедший байт в массив
		  BuffRx[countRx]=data;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_UART_RxCpltCallback+0x70>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_UART_RxCpltCallback+0x74>)
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_UART_RxCpltCallback+0x78>)
 800113c:	5499      	strb	r1, [r3, r2]
		  if(countRx==MaxBuffOfCKT-1)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_UART_RxCpltCallback+0x70>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b2a      	cmp	r3, #42	; 0x2a
 8001144:	d103      	bne.n	800114e <HAL_UART_RxCpltCallback+0x3e>
		  {
			  Readflag=1;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_UART_RxCpltCallback+0x7c>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e005      	b.n	800115a <HAL_UART_RxCpltCallback+0x4a>
		  }
		  else
		  {
			  countRx++;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_UART_RxCpltCallback+0x70>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_UART_RxCpltCallback+0x70>)
 8001158:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_UART_Receive_IT(&huart2, &data, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	4909      	ldr	r1, [pc, #36]	; (8001184 <HAL_UART_RxCpltCallback+0x74>)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_UART_RxCpltCallback+0x64>)
 8001160:	f002 fff0 	bl	8004144 <HAL_UART_Receive_IT>
		  // Запрещаем 4 команду
		  Resolve4com=0;
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_UART_RxCpltCallback+0x80>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	  }
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000218 	.word	0x20000218
 8001178:	20000031 	.word	0x20000031
 800117c:	20000034 	.word	0x20000034
 8001180:	2000002c 	.word	0x2000002c
 8001184:	2000002d 	.word	0x2000002d
 8001188:	200001ec 	.word	0x200001ec
 800118c:	2000002e 	.word	0x2000002e
 8001190:	2000002f 	.word	0x2000002f

08001194 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)  // мигание светодиодов
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d107      	bne.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if(LedMode1==1) // 1 светодиод
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d103      	bne.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80011ac:	2102      	movs	r1, #2
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011b0:	f001 f9af 	bl	8002512 <HAL_GPIO_TogglePin>
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000154 	.word	0x20000154
 80011c0:	20000030 	.word	0x20000030
 80011c4:	40020800 	.word	0x40020800

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 80011e2:	1df9      	adds	r1, r7, #7
 80011e4:	230a      	movs	r3, #10
 80011e6:	2201      	movs	r2, #1
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <SPICmd8bit+0x20>)
 80011ea:	f001 ff25 	bl	8003038 <HAL_SPI_Transmit>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000194 	.word	0x20000194

080011fc <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001206:	1df9      	adds	r1, r7, #7
 8001208:	230a      	movs	r3, #10
 800120a:	2201      	movs	r2, #1
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <SPIRead8bit+0x20>)
 800120e:	f002 f847 	bl	80032a0 <HAL_SPI_Receive>

  return(RdPara);
 8001212:	79fb      	ldrb	r3, [r7, #7]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000194 	.word	0x20000194

08001220 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 800122a:	2200      	movs	r2, #0
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <SPIRead+0x38>)
 8001230:	f001 f956 	bl	80024e0 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffce 	bl	80011d8 <SPICmd8bit>
  tmp = SPIRead8bit();
 800123c:	f7ff ffde 	bl	80011fc <SPIRead8bit>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001244:	2201      	movs	r2, #1
 8001246:	2140      	movs	r1, #64	; 0x40
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <SPIRead+0x38>)
 800124a:	f001 f949 	bl	80024e0 <HAL_GPIO_WritePin>
  return(tmp);
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40020400 	.word	0x40020400

0800125c <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 800126c:	2200      	movs	r2, #0
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <SPIWrite+0x44>)
 8001272:	f001 f935 	bl	80024e0 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ffaa 	bl	80011d8 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffa6 	bl	80011d8 <SPICmd8bit>
	NSS_H();
 800128c:	2201      	movs	r2, #1
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <SPIWrite+0x44>)
 8001292:	f001 f925 	bl	80024e0 <HAL_GPIO_WritePin>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020400 	.word	0x40020400

080012a4 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	4613      	mov	r3, r2
 80012b2:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d91f      	bls.n	80012fa <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 80012ba:	2200      	movs	r2, #0
 80012bc:	2140      	movs	r1, #64	; 0x40
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <SPIBurstRead+0x60>)
 80012c0:	f001 f90e 	bl	80024e0 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff86 	bl	80011d8 <SPICmd8bit>
    for(i=0;i<length;i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e009      	b.n	80012e6 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	18d4      	adds	r4, r2, r3
 80012d8:	f7ff ff90 	bl	80011fc <SPIRead8bit>
 80012dc:	4603      	mov	r3, r0
 80012de:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3f1      	bcc.n	80012d2 <SPIBurstRead+0x2e>
      NSS_H();
 80012ee:	2201      	movs	r2, #1
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <SPIBurstRead+0x60>)
 80012f4:	f001 f8f4 	bl	80024e0 <HAL_GPIO_WritePin>
 80012f8:	e000      	b.n	80012fc <SPIBurstRead+0x58>
    return;
 80012fa:	bf00      	nop
  }
}
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	40020400 	.word	0x40020400

08001308 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d922      	bls.n	8001364 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 800131e:	2200      	movs	r2, #0
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <BurstWrite+0x64>)
 8001324:	f001 f8dc 	bl	80024e0 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff51 	bl	80011d8 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e009      	b.n	8001350 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff47 	bl	80011d8 <SPICmd8bit>
    for(i=0;i<length;i++)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	3301      	adds	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	429a      	cmp	r2, r3
 8001356:	d3f1      	bcc.n	800133c <BurstWrite+0x34>
    NSS_H();
 8001358:	2201      	movs	r2, #1
 800135a:	2140      	movs	r1, #64	; 0x40
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <BurstWrite+0x64>)
 800135e:	f001 f8bf 	bl	80024e0 <HAL_GPIO_WritePin>
 8001362:	e000      	b.n	8001366 <BurstWrite+0x5e>
    return;
 8001364:	bf00      	nop
  }
}
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020400 	.word	0x40020400

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ae:	2007      	movs	r0, #7
 80013b0:	f000 fb24 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_SPI_MspInit+0x84>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12b      	bne.n	800143a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_SPI_MspInit+0x88>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_SPI_MspInit+0x88>)
 80013ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_SPI_MspInit+0x88>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_SPI_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_SPI_MspInit+0x88>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_SPI_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800141a:	23e0      	movs	r3, #224	; 0xe0
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142a:	2305      	movs	r3, #5
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_SPI_MspInit+0x8c>)
 8001436:	f000 fea9 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40013000 	.word	0x40013000
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_TIM_Base_MspInit+0x48>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d115      	bne.n	800148e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_TIM_Base_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_TIM_Base_MspInit+0x4c>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_TIM_Base_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2036      	movs	r0, #54	; 0x36
 8001484:	f000 fac5 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001488:	2036      	movs	r0, #54	; 0x36
 800148a:	f000 fade 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40001000 	.word	0x40001000
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_UART_MspInit+0x14c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	f040 8090 	bne.w	80015e4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <HAL_UART_MspInit+0x150>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a48      	ldr	r2, [pc, #288]	; (80015f0 <HAL_UART_MspInit+0x150>)
 80014ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <HAL_UART_MspInit+0x150>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_UART_MspInit+0x150>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <HAL_UART_MspInit+0x150>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_UART_MspInit+0x150>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150c:	2307      	movs	r3, #7
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4837      	ldr	r0, [pc, #220]	; (80015f4 <HAL_UART_MspInit+0x154>)
 8001518:	f000 fe38 	bl	800218c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_UART_MspInit+0x158>)
 800151e:	4a37      	ldr	r2, [pc, #220]	; (80015fc <HAL_UART_MspInit+0x15c>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001528:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_UART_MspInit+0x158>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_UART_MspInit+0x158>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800155c:	4826      	ldr	r0, [pc, #152]	; (80015f8 <HAL_UART_MspInit+0x158>)
 800155e:	f000 fa8f 	bl	8001a80 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001568:	f7ff fe2e 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
 8001572:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_UART_MspInit+0x158>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_UART_MspInit+0x160>)
 800157a:	4a22      	ldr	r2, [pc, #136]	; (8001604 <HAL_UART_MspInit+0x164>)
 800157c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_UART_MspInit+0x160>)
 8001580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001584:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_UART_MspInit+0x160>)
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_UART_MspInit+0x160>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_UART_MspInit+0x160>)
 8001594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001598:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0x160>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_UART_MspInit+0x160>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_UART_MspInit+0x160>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_UART_MspInit+0x160>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_UART_MspInit+0x160>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <HAL_UART_MspInit+0x160>)
 80015ba:	f000 fa61 	bl	8001a80 <HAL_DMA_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80015c4:	f7ff fe00 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_UART_MspInit+0x160>)
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_UART_MspInit+0x160>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2026      	movs	r0, #38	; 0x26
 80015da:	f000 fa1a 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015de:	2026      	movs	r0, #38	; 0x26
 80015e0:	f000 fa33 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	2000003c 	.word	0x2000003c
 80015fc:	40026088 	.word	0x40026088
 8001600:	200000c8 	.word	0x200000c8
 8001604:	400260a0 	.word	0x400260a0

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f8bc 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DMA1_Stream5_IRQHandler+0x10>)
 800166a:	f000 fb49 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000003c 	.word	0x2000003c

08001678 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Stream6_IRQHandler+0x10>)
 800167e:	f000 fb3f 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000c8 	.word	0x200000c8

0800168c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <USART2_IRQHandler+0x10>)
 8001692:	f002 fe2f 	bl	80042f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000218 	.word	0x20000218

080016a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM6_DAC_IRQHandler+0x10>)
 80016a6:	f002 fa06 	bl	8003ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000154 	.word	0x20000154

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <SystemInit+0x28>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <SystemInit+0x28>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SystemInit+0x28>)
 80016ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ce:	609a      	str	r2, [r3, #8]
#endif
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <Reset_Handler>:
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001718 <LoopFillZerobss+0x14>
 80016e4:	2100      	movs	r1, #0
 80016e6:	e003      	b.n	80016f0 <LoopCopyDataInit>

080016e8 <CopyDataInit>:
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <LoopFillZerobss+0x18>)
 80016ea:	585b      	ldr	r3, [r3, r1]
 80016ec:	5043      	str	r3, [r0, r1]
 80016ee:	3104      	adds	r1, #4

080016f0 <LoopCopyDataInit>:
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <LoopFillZerobss+0x1c>)
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <LoopFillZerobss+0x20>)
 80016f4:	1842      	adds	r2, r0, r1
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3f6      	bcc.n	80016e8 <CopyDataInit>
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <LoopFillZerobss+0x24>)
 80016fc:	e002      	b.n	8001704 <LoopFillZerobss>

080016fe <FillZerobss>:
 80016fe:	2300      	movs	r3, #0
 8001700:	f842 3b04 	str.w	r3, [r2], #4

08001704 <LoopFillZerobss>:
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <LoopFillZerobss+0x28>)
 8001706:	429a      	cmp	r2, r3
 8001708:	d3f9      	bcc.n	80016fe <FillZerobss>
 800170a:	f7ff ffd3 	bl	80016b4 <SystemInit>
 800170e:	f003 fbed 	bl	8004eec <__libc_init_array>
 8001712:	f7ff f95b 	bl	80009cc <main>
 8001716:	4770      	bx	lr
 8001718:	20020000 	.word	0x20020000
 800171c:	080052a4 	.word	0x080052a4
 8001720:	20000000 	.word	0x20000000
 8001724:	2000000c 	.word	0x2000000c
 8001728:	2000000c 	.word	0x2000000c
 800172c:	2000025c 	.word	0x2000025c

08001730 <ADC_IRQHandler>:
 8001730:	e7fe      	b.n	8001730 <ADC_IRQHandler>
	...

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_Init+0x40>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_Init+0x40>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_Init+0x40>)
 8001756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f94d 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fe02 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f965 	bl	8001a66 <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b4:	f000 f92d 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000258 	.word	0x20000258

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000258 	.word	0x20000258

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_Delay+0x40>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000008 	.word	0x20000008

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff feb8 	bl	8001800 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e099      	b.n	8001bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abc:	e00f      	b.n	8001ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001abe:	f7ff fe9f 	bl	8001800 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d908      	bls.n	8001ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e078      	b.n	8001bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e8      	bne.n	8001abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_DMA_Init+0x158>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d107      	bne.n	8001b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	4313      	orrs	r3, r2
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f023 0307 	bic.w	r3, r3, #7
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d117      	bne.n	8001ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00e      	beq.n	8001ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fa87 	bl	8002098 <DMA_CheckFifoParam>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e016      	b.n	8001bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fa3e 	bl	800202c <DMA_CalcBaseAndBitshift>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	223f      	movs	r2, #63	; 0x3f
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	f010803f 	.word	0xf010803f

08001bdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bea:	f7ff fe09 	bl	8001800 <HAL_GetTick>
 8001bee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d008      	beq.n	8001c0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e052      	b.n	8001cb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0216 	bic.w	r2, r2, #22
 8001c1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <HAL_DMA_Abort+0x62>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0208 	bic.w	r2, r2, #8
 8001c4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5e:	e013      	b.n	8001c88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c60:	f7ff fdce 	bl	8001800 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d90c      	bls.n	8001c88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e015      	b.n	8001cb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e4      	bne.n	8001c60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	223f      	movs	r2, #63	; 0x3f
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d004      	beq.n	8001cda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00c      	b.n	8001cf4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2205      	movs	r2, #5
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_DMA_IRQHandler+0x258>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_DMA_IRQHandler+0x25c>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2208      	movs	r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2201      	movs	r2, #1
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d012      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2201      	movs	r2, #1
 8001d90:	409a      	lsls	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2204      	movs	r2, #4
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0204 	orr.w	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2210      	movs	r2, #16
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d043      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03c      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d018      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d108      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d024      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
 8001e2e:	e01f      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e016      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0208 	bic.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2220      	movs	r2, #32
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 808e 	beq.w	8001f9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8086 	beq.w	8001f9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2220      	movs	r2, #32
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d136      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0216 	bic.w	r2, r2, #22
 8001eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <HAL_DMA_IRQHandler+0x1da>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0208 	bic.w	r2, r2, #8
 8001ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	223f      	movs	r2, #63	; 0x3f
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07d      	beq.n	800200a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
        }
        return;
 8001f16:	e078      	b.n	800200a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01c      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d030      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
 8001f44:	e02b      	b.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d027      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
 8001f56:	e022      	b.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0210 	bic.w	r2, r2, #16
 8001f7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d032      	beq.n	800200c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d022      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d307      	bcc.n	8001fe6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f2      	bne.n	8001fca <HAL_DMA_IRQHandler+0x2ca>
 8001fe4:	e000      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fe6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e000      	b.n	800200c <HAL_DMA_IRQHandler+0x30c>
        return;
 800200a:	bf00      	nop
    }
  }
}
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop

08002014 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	3b10      	subs	r3, #16
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <DMA_CalcBaseAndBitshift+0x64>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <DMA_CalcBaseAndBitshift+0x68>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d909      	bls.n	800206e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	1d1a      	adds	r2, r3, #4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	659a      	str	r2, [r3, #88]	; 0x58
 800206c:	e007      	b.n	800207e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	aaaaaaab 	.word	0xaaaaaaab
 8002094:	0800528c 	.word	0x0800528c

08002098 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11f      	bne.n	80020f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d855      	bhi.n	8002164 <DMA_CheckFifoParam+0xcc>
 80020b8:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <DMA_CheckFifoParam+0x28>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020e3 	.word	0x080020e3
 80020c8:	080020d1 	.word	0x080020d1
 80020cc:	08002165 	.word	0x08002165
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d045      	beq.n	8002168 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e0:	e042      	b.n	8002168 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ea:	d13f      	bne.n	800216c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f0:	e03c      	b.n	800216c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020fa:	d121      	bne.n	8002140 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d836      	bhi.n	8002170 <DMA_CheckFifoParam+0xd8>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <DMA_CheckFifoParam+0x70>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002119 	.word	0x08002119
 800210c:	0800211f 	.word	0x0800211f
 8002110:	08002119 	.word	0x08002119
 8002114:	08002131 	.word	0x08002131
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      break;
 800211c:	e02f      	b.n	800217e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d024      	beq.n	8002174 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212e:	e021      	b.n	8002174 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002138:	d11e      	bne.n	8002178 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800213e:	e01b      	b.n	8002178 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d902      	bls.n	800214c <DMA_CheckFifoParam+0xb4>
 8002146:	2b03      	cmp	r3, #3
 8002148:	d003      	beq.n	8002152 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800214a:	e018      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      break;
 8002150:	e015      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      break;
 8002162:	e00b      	b.n	800217c <DMA_CheckFifoParam+0xe4>
      break;
 8002164:	bf00      	nop
 8002166:	e00a      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      break;
 8002168:	bf00      	nop
 800216a:	e008      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      break;
 800216c:	bf00      	nop
 800216e:	e006      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      break;
 8002170:	bf00      	nop
 8002172:	e004      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      break;
 8002174:	bf00      	nop
 8002176:	e002      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      break;   
 8002178:	bf00      	nop
 800217a:	e000      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      break;
 800217c:	bf00      	nop
    }
  } 
  
  return status; 
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e165      	b.n	8002474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8154 	bne.w	800246e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d00b      	beq.n	80021e6 <HAL_GPIO_Init+0x5a>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021da:	2b11      	cmp	r3, #17
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d130      	bne.n	8002248 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0201 	and.w	r2, r3, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0xfc>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b12      	cmp	r3, #18
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80ae 	beq.w	800246e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a5b      	ldr	r2, [pc, #364]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b59      	ldr	r3, [pc, #356]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_GPIO_Init+0x300>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_Init+0x21a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x308>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_Init+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x30c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x212>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_GPIO_Init+0x310>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x20e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_GPIO_Init+0x314>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x20a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x318>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x206>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x31c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x202>
 800238a:	2306      	movs	r3, #6
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800238e:	2307      	movs	r3, #7
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b8:	4934      	ldr	r1, [pc, #208]	; (800248c <HAL_GPIO_Init+0x300>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_GPIO_Init+0x320>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ea:	4a30      	ldr	r2, [pc, #192]	; (80024ac <HAL_GPIO_Init+0x320>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_GPIO_Init+0x320>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002414:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_GPIO_Init+0x320>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_GPIO_Init+0x320>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <HAL_GPIO_Init+0x320>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_GPIO_Init+0x320>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002468:	4a10      	ldr	r2, [pc, #64]	; (80024ac <HAL_GPIO_Init+0x320>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae96 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	3724      	adds	r7, #36	; 0x24
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40023800 	.word	0x40023800
 800248c:	40013800 	.word	0x40013800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400
 8002498:	40020800 	.word	0x40020800
 800249c:	40020c00 	.word	0x40020c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40021400 	.word	0x40021400
 80024a8:	40021800 	.word	0x40021800
 80024ac:	40013c00 	.word	0x40013c00

080024b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	619a      	str	r2, [r3, #24]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	401a      	ands	r2, r3
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	429a      	cmp	r2, r3
 800252a:	d104      	bne.n	8002536 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	041a      	lsls	r2, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002534:	e002      	b.n	800253c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0cc      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d90c      	bls.n	8002584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b65      	ldr	r3, [pc, #404]	; (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259c:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	494d      	ldr	r1, [pc, #308]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d044      	beq.n	8002668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d119      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002602:	2b03      	cmp	r3, #3
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e067      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4934      	ldr	r1, [pc, #208]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002638:	f7ff f8e2 	bl	8001800 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7ff f8de 	bl	8001800 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e04f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d20c      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e032      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4916      	ldr	r1, [pc, #88]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	490e      	ldr	r1, [pc, #56]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ce:	f000 f855 	bl	800277c <HAL_RCC_GetSysClockFreq>
 80026d2:	4601      	mov	r1, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	fa21 f303 	lsr.w	r3, r1, r3
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f842 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023c00 	.word	0x40023c00
 8002704:	40023800 	.word	0x40023800
 8002708:	08005274 	.word	0x08005274
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCC_GetHCLKFreq+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002730:	f7ff fff0 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002734:	4601      	mov	r1, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a9b      	lsrs	r3, r3, #10
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	08005284 	.word	0x08005284

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002758:	f7ff ffdc 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 800275c:	4601      	mov	r1, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0b5b      	lsrs	r3, r3, #13
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4a03      	ldr	r2, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	08005284 	.word	0x08005284

0800277c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002796:	4bc6      	ldr	r3, [pc, #792]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	f200 817e 	bhi.w	8002aa0 <HAL_RCC_GetSysClockFreq+0x324>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <HAL_RCC_GetSysClockFreq+0x30>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027e1 	.word	0x080027e1
 80027b0:	08002aa1 	.word	0x08002aa1
 80027b4:	08002aa1 	.word	0x08002aa1
 80027b8:	08002aa1 	.word	0x08002aa1
 80027bc:	080027e7 	.word	0x080027e7
 80027c0:	08002aa1 	.word	0x08002aa1
 80027c4:	08002aa1 	.word	0x08002aa1
 80027c8:	08002aa1 	.word	0x08002aa1
 80027cc:	080027ed 	.word	0x080027ed
 80027d0:	08002aa1 	.word	0x08002aa1
 80027d4:	08002aa1 	.word	0x08002aa1
 80027d8:	08002aa1 	.word	0x08002aa1
 80027dc:	08002949 	.word	0x08002949
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4bb4      	ldr	r3, [pc, #720]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x338>)
 80027e2:	613b      	str	r3, [r7, #16]
       break;
 80027e4:	e15f      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027e6:	4bb4      	ldr	r3, [pc, #720]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80027e8:	613b      	str	r3, [r7, #16]
      break;
 80027ea:	e15c      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ec:	4bb0      	ldr	r3, [pc, #704]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027f6:	4bae      	ldr	r3, [pc, #696]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04a      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4bab      	ldr	r3, [pc, #684]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	f04f 0400 	mov.w	r4, #0
 800280c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	ea03 0501 	and.w	r5, r3, r1
 8002818:	ea04 0602 	and.w	r6, r4, r2
 800281c:	4629      	mov	r1, r5
 800281e:	4632      	mov	r2, r6
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0154      	lsls	r4, r2, #5
 800282a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800282e:	014b      	lsls	r3, r1, #5
 8002830:	4619      	mov	r1, r3
 8002832:	4622      	mov	r2, r4
 8002834:	1b49      	subs	r1, r1, r5
 8002836:	eb62 0206 	sbc.w	r2, r2, r6
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	0194      	lsls	r4, r2, #6
 8002844:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002848:	018b      	lsls	r3, r1, #6
 800284a:	1a5b      	subs	r3, r3, r1
 800284c:	eb64 0402 	sbc.w	r4, r4, r2
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	00e2      	lsls	r2, r4, #3
 800285a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800285e:	00d9      	lsls	r1, r3, #3
 8002860:	460b      	mov	r3, r1
 8002862:	4614      	mov	r4, r2
 8002864:	195b      	adds	r3, r3, r5
 8002866:	eb44 0406 	adc.w	r4, r4, r6
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	0262      	lsls	r2, r4, #9
 8002874:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002878:	0259      	lsls	r1, r3, #9
 800287a:	460b      	mov	r3, r1
 800287c:	4614      	mov	r4, r2
 800287e:	4618      	mov	r0, r3
 8002880:	4621      	mov	r1, r4
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	461a      	mov	r2, r3
 800288a:	4623      	mov	r3, r4
 800288c:	f7fd fcba 	bl	8000204 <__aeabi_uldivmod>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e049      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002898:	4b85      	ldr	r3, [pc, #532]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	f04f 0400 	mov.w	r4, #0
 80028a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	ea03 0501 	and.w	r5, r3, r1
 80028ae:	ea04 0602 	and.w	r6, r4, r2
 80028b2:	4629      	mov	r1, r5
 80028b4:	4632      	mov	r2, r6
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	f04f 0400 	mov.w	r4, #0
 80028be:	0154      	lsls	r4, r2, #5
 80028c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028c4:	014b      	lsls	r3, r1, #5
 80028c6:	4619      	mov	r1, r3
 80028c8:	4622      	mov	r2, r4
 80028ca:	1b49      	subs	r1, r1, r5
 80028cc:	eb62 0206 	sbc.w	r2, r2, r6
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f04f 0400 	mov.w	r4, #0
 80028d8:	0194      	lsls	r4, r2, #6
 80028da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028de:	018b      	lsls	r3, r1, #6
 80028e0:	1a5b      	subs	r3, r3, r1
 80028e2:	eb64 0402 	sbc.w	r4, r4, r2
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028f4:	00d9      	lsls	r1, r3, #3
 80028f6:	460b      	mov	r3, r1
 80028f8:	4614      	mov	r4, r2
 80028fa:	195b      	adds	r3, r3, r5
 80028fc:	eb44 0406 	adc.w	r4, r4, r6
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	02a2      	lsls	r2, r4, #10
 800290a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800290e:	0299      	lsls	r1, r3, #10
 8002910:	460b      	mov	r3, r1
 8002912:	4614      	mov	r4, r2
 8002914:	4618      	mov	r0, r3
 8002916:	4621      	mov	r1, r4
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f04f 0400 	mov.w	r4, #0
 800291e:	461a      	mov	r2, r3
 8002920:	4623      	mov	r3, r4
 8002922:	f7fd fc6f 	bl	8000204 <__aeabi_uldivmod>
 8002926:	4603      	mov	r3, r0
 8002928:	460c      	mov	r4, r1
 800292a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800292c:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	613b      	str	r3, [r7, #16]
      break;
 8002946:	e0ae      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002950:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002952:	4b57      	ldr	r3, [pc, #348]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04a      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	f240 11ff 	movw	r1, #511	; 0x1ff
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	ea03 0501 	and.w	r5, r3, r1
 8002974:	ea04 0602 	and.w	r6, r4, r2
 8002978:	4629      	mov	r1, r5
 800297a:	4632      	mov	r2, r6
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	0154      	lsls	r4, r2, #5
 8002986:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800298a:	014b      	lsls	r3, r1, #5
 800298c:	4619      	mov	r1, r3
 800298e:	4622      	mov	r2, r4
 8002990:	1b49      	subs	r1, r1, r5
 8002992:	eb62 0206 	sbc.w	r2, r2, r6
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f04f 0400 	mov.w	r4, #0
 800299e:	0194      	lsls	r4, r2, #6
 80029a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a4:	018b      	lsls	r3, r1, #6
 80029a6:	1a5b      	subs	r3, r3, r1
 80029a8:	eb64 0402 	sbc.w	r4, r4, r2
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	00e2      	lsls	r2, r4, #3
 80029b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029ba:	00d9      	lsls	r1, r3, #3
 80029bc:	460b      	mov	r3, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	195b      	adds	r3, r3, r5
 80029c2:	eb44 0406 	adc.w	r4, r4, r6
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	0262      	lsls	r2, r4, #9
 80029d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029d4:	0259      	lsls	r1, r3, #9
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	4621      	mov	r1, r4
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	461a      	mov	r2, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	f7fd fc0c 	bl	8000204 <__aeabi_uldivmod>
 80029ec:	4603      	mov	r3, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e049      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	ea03 0501 	and.w	r5, r3, r1
 8002a0a:	ea04 0602 	and.w	r6, r4, r2
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4632      	mov	r2, r6
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	0154      	lsls	r4, r2, #5
 8002a1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a20:	014b      	lsls	r3, r1, #5
 8002a22:	4619      	mov	r1, r3
 8002a24:	4622      	mov	r2, r4
 8002a26:	1b49      	subs	r1, r1, r5
 8002a28:	eb62 0206 	sbc.w	r2, r2, r6
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	f04f 0400 	mov.w	r4, #0
 8002a34:	0194      	lsls	r4, r2, #6
 8002a36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a3a:	018b      	lsls	r3, r1, #6
 8002a3c:	1a5b      	subs	r3, r3, r1
 8002a3e:	eb64 0402 	sbc.w	r4, r4, r2
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a50:	00d9      	lsls	r1, r3, #3
 8002a52:	460b      	mov	r3, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	195b      	adds	r3, r3, r5
 8002a58:	eb44 0406 	adc.w	r4, r4, r6
 8002a5c:	f04f 0100 	mov.w	r1, #0
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	02a2      	lsls	r2, r4, #10
 8002a66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a6a:	0299      	lsls	r1, r3, #10
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	4621      	mov	r1, r4
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	f7fd fbc1 	bl	8000204 <__aeabi_uldivmod>
 8002a82:	4603      	mov	r3, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	0f1b      	lsrs	r3, r3, #28
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	613b      	str	r3, [r7, #16]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x338>)
 8002aa2:	613b      	str	r3, [r7, #16]
      break;
 8002aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa6:	693b      	ldr	r3, [r7, #16]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8083 	beq.w	8002bdc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ad6:	4b95      	ldr	r3, [pc, #596]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ae2:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aee:	4b8f      	ldr	r3, [pc, #572]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afc:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b08:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d05b      	beq.n	8002bda <HAL_RCC_OscConfig+0x11e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d157      	bne.n	8002bda <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e216      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x8a>
 8002b38:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7b      	ldr	r2, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e01d      	b.n	8002b82 <HAL_RCC_OscConfig+0xc6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0xae>
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a75      	ldr	r2, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a72      	ldr	r2, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0xc6>
 8002b6a:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6f      	ldr	r2, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6c      	ldr	r2, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d013      	beq.n	8002bb2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fe39 	bl	8001800 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b92:	f7fe fe35 	bl	8001800 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1db      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba4:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0xd6>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fe25 	bl	8001800 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bba:	f7fe fe21 	bl	8001800 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1c7      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bcc:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0xfe>
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d06f      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c00:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0c:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d11c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c18:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_OscConfig+0x180>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e18f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4938      	ldr	r1, [pc, #224]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c50:	e03a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d020      	beq.n	8002c9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5a:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fdce 	bl	8001800 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe fdca 	bl	8001800 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e170      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4925      	ldr	r1, [pc, #148]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
 8002c9a:	e015      	b.n	8002cc8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9c:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fdad 	bl	8001800 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fda9 	bl	8001800 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e14f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d037      	beq.n	8002d44 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_RCC_OscConfig+0x278>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fd8d 	bl	8001800 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fe fd89 	bl	8001800 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e12f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x22e>
 8002d08:	e01c      	b.n	8002d44 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_RCC_OscConfig+0x278>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fd76 	bl	8001800 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d16:	e00f      	b.n	8002d38 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fd72 	bl	8001800 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d908      	bls.n	8002d38 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e118      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	42470000 	.word	0x42470000
 8002d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e9      	bne.n	8002d18 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8097 	beq.w	8002e80 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b83      	ldr	r3, [pc, #524]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a75      	ldr	r2, [pc, #468]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fd31 	bl	8001800 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da2:	f7fe fd2d 	bl	8001800 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0d3      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	4b6c      	ldr	r3, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x31a>
 8002dc8:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd4:	e01c      	b.n	8002e10 <HAL_RCC_OscConfig+0x354>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x33c>
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a60      	ldr	r2, [pc, #384]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5d      	ldr	r2, [pc, #372]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0x354>
 8002df8:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a59      	ldr	r2, [pc, #356]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e0a:	f023 0304 	bic.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fcf2 	bl	8001800 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fcee 	bl	8001800 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e092      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ee      	beq.n	8002e20 <HAL_RCC_OscConfig+0x364>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fcdc 	bl	8001800 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fcd8 	bl	8001800 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e07c      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e62:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ee      	bne.n	8002e4c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d068      	beq.n	8002f5a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e88:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d060      	beq.n	8002f56 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d145      	bne.n	8002f28 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_OscConfig+0x4b0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fcad 	bl	8001800 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fca9 	bl	8001800 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e04f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	019b      	lsls	r3, r3, #6
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	071b      	lsls	r3, r3, #28
 8002ef4:	491b      	ldr	r1, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <HAL_RCC_OscConfig+0x4b0>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fc7e 	bl	8001800 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fc7a 	bl	8001800 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e020      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x44c>
 8002f26:	e018      	b.n	8002f5a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x4b0>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fc67 	bl	8001800 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe fc63 	bl	8001800 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e009      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_OscConfig+0x4a8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x47a>
 8002f54:	e001      	b.n	8002f5a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	42470060 	.word	0x42470060

08002f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e056      	b.n	8003030 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe fa0f 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	ea42 0103 	orr.w	r1, r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	f003 0104 	and.w	r1, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_SPI_Transmit+0x22>
 8003056:	2302      	movs	r3, #2
 8003058:	e11e      	b.n	8003298 <HAL_SPI_Transmit+0x260>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003062:	f7fe fbcd 	bl	8001800 <HAL_GetTick>
 8003066:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d002      	beq.n	800307e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003078:	2302      	movs	r3, #2
 800307a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800307c:	e103      	b.n	8003286 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_SPI_Transmit+0x52>
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800308e:	e0fa      	b.n	8003286 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2203      	movs	r2, #3
 8003094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	88fa      	ldrh	r2, [r7, #6]
 80030a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d6:	d107      	bne.n	80030e8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d007      	beq.n	8003106 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310e:	d14b      	bne.n	80031a8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_SPI_Transmit+0xe6>
 8003118:	8afb      	ldrh	r3, [r7, #22]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d13e      	bne.n	800319c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	881a      	ldrh	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	1c9a      	adds	r2, r3, #2
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003142:	e02b      	b.n	800319c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d112      	bne.n	8003178 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	1c9a      	adds	r2, r3, #2
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	86da      	strh	r2, [r3, #54]	; 0x36
 8003176:	e011      	b.n	800319c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003178:	f7fe fb42 	bl	8001800 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d803      	bhi.n	8003190 <HAL_SPI_Transmit+0x158>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318e:	d102      	bne.n	8003196 <HAL_SPI_Transmit+0x15e>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	77fb      	strb	r3, [r7, #31]
          goto error;
 800319a:	e074      	b.n	8003286 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ce      	bne.n	8003144 <HAL_SPI_Transmit+0x10c>
 80031a6:	e04c      	b.n	8003242 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_SPI_Transmit+0x17e>
 80031b0:	8afb      	ldrh	r3, [r7, #22]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d140      	bne.n	8003238 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	7812      	ldrb	r2, [r2, #0]
 80031c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031dc:	e02c      	b.n	8003238 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d113      	bne.n	8003214 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	86da      	strh	r2, [r3, #54]	; 0x36
 8003212:	e011      	b.n	8003238 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003214:	f7fe faf4 	bl	8001800 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d803      	bhi.n	800322c <HAL_SPI_Transmit+0x1f4>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800322a:	d102      	bne.n	8003232 <HAL_SPI_Transmit+0x1fa>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003236:	e026      	b.n	8003286 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1cd      	bne.n	80031de <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fba4 	bl	8003994 <SPI_EndRxTxTransaction>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e000      	b.n	8003286 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003284:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003296:	7ffb      	ldrb	r3, [r7, #31]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032bc:	d112      	bne.n	80032e4 <HAL_SPI_Receive+0x44>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10e      	bne.n	80032e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2204      	movs	r2, #4
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8e9 	bl	80034b2 <HAL_SPI_TransmitReceive>
 80032e0:	4603      	mov	r3, r0
 80032e2:	e0e2      	b.n	80034aa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_SPI_Receive+0x52>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e0db      	b.n	80034aa <HAL_SPI_Receive+0x20a>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fa:	f7fe fa81 	bl	8001800 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003310:	e0c2      	b.n	8003498 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_SPI_Receive+0x7e>
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003322:	e0b9      	b.n	8003498 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2204      	movs	r2, #4
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	88fa      	ldrh	r2, [r7, #6]
 800333c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	d107      	bne.n	800337c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d007      	beq.n	800339a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d162      	bne.n	8003468 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033a2:	e02e      	b.n	8003402 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d115      	bne.n	80033de <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f103 020c 	add.w	r2, r3, #12
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033dc:	e011      	b.n	8003402 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033de:	f7fe fa0f 	bl	8001800 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d803      	bhi.n	80033f6 <HAL_SPI_Receive+0x156>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_Receive+0x15c>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003400:	e04a      	b.n	8003498 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1cb      	bne.n	80033a4 <HAL_SPI_Receive+0x104>
 800340c:	e031      	b.n	8003472 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d113      	bne.n	8003444 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	b292      	uxth	r2, r2
 8003428:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	1c9a      	adds	r2, r3, #2
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003442:	e011      	b.n	8003468 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003444:	f7fe f9dc 	bl	8001800 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d803      	bhi.n	800345c <HAL_SPI_Receive+0x1bc>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800345a:	d102      	bne.n	8003462 <HAL_SPI_Receive+0x1c2>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003466:	e017      	b.n	8003498 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1cd      	bne.n	800340e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa27 	bl	80038ca <SPI_EndRxTransaction>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
 8003494:	e000      	b.n	8003498 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b08c      	sub	sp, #48	; 0x30
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034c0:	2301      	movs	r3, #1
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x26>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e18a      	b.n	80037ee <HAL_SPI_TransmitReceive+0x33c>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e0:	f7fe f98e 	bl	8001800 <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d00f      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x70>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003508:	d107      	bne.n	800351a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_SPI_TransmitReceive+0x68>
 8003512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003516:	2b04      	cmp	r3, #4
 8003518:	d003      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003520:	e15b      	b.n	80037da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x82>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x82>
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d103      	bne.n	800353c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800353a:	e14e      	b.n	80037da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b04      	cmp	r3, #4
 8003546:	d003      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2205      	movs	r2, #5
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	887a      	ldrh	r2, [r7, #2]
 8003566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	887a      	ldrh	r2, [r7, #2]
 8003572:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d007      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ac:	d178      	bne.n	80036a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x10a>
 80035b6:	8b7b      	ldrh	r3, [r7, #26]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d166      	bne.n	800368a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e0:	e053      	b.n	800368a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d11b      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x176>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x176>
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d113      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d119      	bne.n	800366a <HAL_SPI_TransmitReceive+0x1b8>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d014      	beq.n	800366a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	b292      	uxth	r2, r2
 800364c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	1c9a      	adds	r2, r3, #2
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003666:	2301      	movs	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800366a:	f7fe f8c9 	bl	8001800 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003676:	429a      	cmp	r2, r3
 8003678:	d807      	bhi.n	800368a <HAL_SPI_TransmitReceive+0x1d8>
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003680:	d003      	beq.n	800368a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003688:	e0a7      	b.n	80037da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1a6      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x130>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1a1      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x130>
 800369e:	e07c      	b.n	800379a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_TransmitReceive+0x1fc>
 80036a8:	8b7b      	ldrh	r3, [r7, #26]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d16b      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d4:	e057      	b.n	8003786 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d11c      	bne.n	800371e <HAL_SPI_TransmitReceive+0x26c>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d017      	beq.n	800371e <HAL_SPI_TransmitReceive+0x26c>
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d114      	bne.n	800371e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d119      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x2ae>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d014      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800375c:	2301      	movs	r3, #1
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003760:	f7fe f84e 	bl	8001800 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800376c:	429a      	cmp	r2, r3
 800376e:	d803      	bhi.n	8003778 <HAL_SPI_TransmitReceive+0x2c6>
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003776:	d102      	bne.n	800377e <HAL_SPI_TransmitReceive+0x2cc>
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003784:	e029      	b.n	80037da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1a2      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x224>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d19d      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8f8 	bl	8003994 <SPI_EndRxTxTransaction>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037b6:	e010      	b.n	80037da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	e000      	b.n	80037da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3730      	adds	r7, #48	; 0x30
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003806:	e04c      	b.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380e:	d048      	beq.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003810:	f7fd fff6 	bl	8001800 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d902      	bls.n	8003826 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d13d      	bne.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800383e:	d111      	bne.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003848:	d004      	beq.n	8003854 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003852:	d107      	bne.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386c:	d10f      	bne.n	800388e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800388c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e00f      	b.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1a3      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038de:	d111      	bne.n	8003904 <SPI_EndRxTransaction+0x3a>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e8:	d004      	beq.n	80038f4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d107      	bne.n	8003904 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003902:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800390c:	d12a      	bne.n	8003964 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d012      	beq.n	800393e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff ff67 	bl	80037f6 <SPI_WaitFlagStateUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02d      	beq.n	800398a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e026      	b.n	800398c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2200      	movs	r2, #0
 8003946:	2101      	movs	r1, #1
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff ff54 	bl	80037f6 <SPI_WaitFlagStateUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01a      	beq.n	800398a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e013      	b.n	800398c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	2101      	movs	r1, #1
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff ff41 	bl	80037f6 <SPI_WaitFlagStateUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e000      	b.n	800398c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <SPI_EndRxTxTransaction+0x7c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <SPI_EndRxTxTransaction+0x80>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0d5b      	lsrs	r3, r3, #21
 80039ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039b0:	fb02 f303 	mul.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039be:	d112      	bne.n	80039e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff ff13 	bl	80037f6 <SPI_WaitFlagStateUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00f      	b.n	8003a06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d0f2      	beq.n	80039e6 <SPI_EndRxTxTransaction+0x52>
 8003a00:	e000      	b.n	8003a04 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a02:	bf00      	nop
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000
 8003a14:	165e9f81 	.word	0x165e9f81

08003a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e01d      	b.n	8003a66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd fd06 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 f95e 	bl	8003d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d007      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0202 	mvn.w	r2, #2
 8003ae2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8ee 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8e0 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8f1 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d122      	bne.n	8003b66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d11b      	bne.n	8003b66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0204 	mvn.w	r2, #4
 8003b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8c4 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003b52:	e005      	b.n	8003b60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8b6 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8c7 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d122      	bne.n	8003bba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d11b      	bne.n	8003bba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 0208 	mvn.w	r2, #8
 8003b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f89a 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003ba6:	e005      	b.n	8003bb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f88c 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f89d 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d122      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d11b      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f06f 0210 	mvn.w	r2, #16
 8003bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2208      	movs	r2, #8
 8003be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f870 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003bfa:	e005      	b.n	8003c08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f862 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f873 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10e      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f06f 0201 	mvn.w	r2, #1
 8003c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fd faad 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d10e      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	d107      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f97f 	bl	8003f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d10e      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d107      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f838 	bl	8003d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d10e      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d107      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f06f 0220 	mvn.w	r2, #32
 8003cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f949 	bl	8003f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a40      	ldr	r2, [pc, #256]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d36:	d00f      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3d      	ldr	r2, [pc, #244]	; (8003e30 <TIM_Base_SetConfig+0x118>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <TIM_Base_SetConfig+0x11c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <TIM_Base_SetConfig+0x120>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d108      	bne.n	8003d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d02b      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d027      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <TIM_Base_SetConfig+0x118>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d023      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <TIM_Base_SetConfig+0x11c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01f      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2a      	ldr	r2, [pc, #168]	; (8003e38 <TIM_Base_SetConfig+0x120>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01b      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d017      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <TIM_Base_SetConfig+0x128>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a27      	ldr	r2, [pc, #156]	; (8003e44 <TIM_Base_SetConfig+0x12c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <TIM_Base_SetConfig+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <TIM_Base_SetConfig+0x134>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <TIM_Base_SetConfig+0x138>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <TIM_Base_SetConfig+0x13c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <TIM_Base_SetConfig+0x114>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_Base_SetConfig+0xf8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <TIM_Base_SetConfig+0x124>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40010400 	.word	0x40010400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800
 8003e4c:	40001800 	.word	0x40001800
 8003e50:	40001c00 	.word	0x40001c00
 8003e54:	40002000 	.word	0x40002000

08003e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e05a      	b.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d022      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d01d      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d018      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1a      	ldr	r2, [pc, #104]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10c      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40010400 	.word	0x40010400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40001800 	.word	0x40001800

08003f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e03f      	b.n	800400a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fa7e 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fc19 	bl	80047f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af02      	add	r7, sp, #8
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	f040 8083 	bne.w	800413a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_UART_Transmit+0x2e>
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e07b      	b.n	800413c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_UART_Transmit+0x40>
 800404e:	2302      	movs	r3, #2
 8004050:	e074      	b.n	800413c <HAL_UART_Transmit+0x12a>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2221      	movs	r2, #33	; 0x21
 8004064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004068:	f7fd fbca 	bl	8001800 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004082:	e042      	b.n	800410a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409a:	d122      	bne.n	80040e2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fa38 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e042      	b.n	800413c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	3302      	adds	r3, #2
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	e017      	b.n	800410a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3301      	adds	r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	e013      	b.n	800410a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fa15 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e01f      	b.n	800413c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	60ba      	str	r2, [r7, #8]
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1b7      	bne.n	8004084 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f9fc 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e006      	b.n	800413c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	d140      	bne.n	80041e0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_UART_Receive_IT+0x26>
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e039      	b.n	80041e2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_UART_Receive_IT+0x38>
 8004178:	2302      	movs	r3, #2
 800417a:	e032      	b.n	80041e2 <HAL_UART_Receive_IT+0x9e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2222      	movs	r2, #34	; 0x22
 80041a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004204:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004220:	2b80      	cmp	r3, #128	; 0x80
 8004222:	d124      	bne.n	800426e <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004232:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d018      	beq.n	800426e <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	2200      	movs	r2, #0
 8004242:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	4618      	mov	r0, r3
 800424a:	f7fd fcc7 	bl	8001bdc <HAL_DMA_Abort>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00c      	beq.n	800426e <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd fedb 	bl	8002014 <HAL_DMA_GetError>
 800425e:	4603      	mov	r3, r0
 8004260:	2b20      	cmp	r3, #32
 8004262:	d104      	bne.n	800426e <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2210      	movs	r2, #16
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e03d      	b.n	80042ea <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d124      	bne.n	80042c6 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	d018      	beq.n	80042c6 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	2200      	movs	r2, #0
 800429a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fc9b 	bl	8001bdc <HAL_DMA_Abort>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00c      	beq.n	80042c6 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd feaf 	bl	8002014 <HAL_DMA_GetError>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d104      	bne.n	80042c6 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2210      	movs	r2, #16
 80042c0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e011      	b.n	80042ea <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_UART_IRQHandler+0x52>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9d6 	bl	80046f0 <UART_Receive_IT>
      return;
 8004344:	e0d1      	b.n	80044ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80b0 	beq.w	80044ae <HAL_UART_IRQHandler+0x1ba>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_UART_IRQHandler+0x70>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80a5 	beq.w	80044ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_UART_IRQHandler+0x90>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	f043 0201 	orr.w	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_UART_IRQHandler+0xb0>
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	f043 0202 	orr.w	r2, r3, #2
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_UART_IRQHandler+0xd0>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	f043 0204 	orr.w	r2, r3, #4
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00f      	beq.n	80043ee <HAL_UART_IRQHandler+0xfa>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_UART_IRQHandler+0xee>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	f043 0208 	orr.w	r2, r3, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d078      	beq.n	80044e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_UART_IRQHandler+0x11c>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f970 	bl	80046f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_UART_IRQHandler+0x144>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d031      	beq.n	800449c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8b9 	bl	80045b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d123      	bne.n	8004494 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	2b00      	cmp	r3, #0
 8004462:	d013      	beq.n	800448c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <HAL_UART_IRQHandler+0x1fc>)
 800446a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	4618      	mov	r0, r3
 8004472:	f7fd fc23 	bl	8001cbc <HAL_DMA_Abort_IT>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d016      	beq.n	80044aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004486:	4610      	mov	r0, r2
 8004488:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448a:	e00e      	b.n	80044aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f83b 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004492:	e00a      	b.n	80044aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f837 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449a:	e006      	b.n	80044aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f833 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80044a8:	e01e      	b.n	80044e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044aa:	bf00      	nop
    return;
 80044ac:	e01c      	b.n	80044e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_UART_IRQHandler+0x1d6>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8a6 	bl	8004614 <UART_Transmit_IT>
    return;
 80044c8:	e00f      	b.n	80044ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_UART_IRQHandler+0x1f6>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f8ee 	bl	80046c0 <UART_EndTransmit_IT>
    return;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80044e8:	bf00      	nop
  }
}
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	080045ed 	.word	0x080045ed

080044f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452c:	e02c      	b.n	8004588 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004534:	d028      	beq.n	8004588 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <UART_WaitOnFlagUntilTimeout+0x30>
 800453c:	f7fd f960 	bl	8001800 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	429a      	cmp	r2, r3
 800454a:	d21d      	bcs.n	8004588 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800455a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e00f      	b.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d0c3      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff ff7e 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b21      	cmp	r3, #33	; 0x21
 8004626:	d144      	bne.n	80046b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004630:	d11a      	bne.n	8004668 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004646:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	1c9a      	adds	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]
 800465a:	e00e      	b.n	800467a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	621a      	str	r2, [r3, #32]
 8004666:	e008      	b.n	800467a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6211      	str	r1, [r2, #32]
 8004672:	781a      	ldrb	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29b      	uxth	r3, r3
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4619      	mov	r1, r3
 8004688:	84d1      	strh	r1, [r2, #38]	; 0x26
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800469c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ff07 	bl	80044f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b22      	cmp	r3, #34	; 0x22
 8004702:	d171      	bne.n	80047e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	d123      	bne.n	8004756 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10e      	bne.n	800473a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	1c9a      	adds	r2, r3, #2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
 8004738:	e029      	b.n	800478e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	b29b      	uxth	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
 8004754:	e01b      	b.n	800478e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6858      	ldr	r0, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6291      	str	r1, [r2, #40]	; 0x28
 800476e:	b2c2      	uxtb	r2, r0
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e00c      	b.n	800478e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	1c58      	adds	r0, r3, #1
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	6288      	str	r0, [r1, #40]	; 0x28
 8004786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29b      	uxth	r3, r3
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4619      	mov	r1, r3
 800479c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d120      	bne.n	80047e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0220 	bic.w	r2, r2, #32
 80047b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc fc98 	bl	8001110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e002      	b.n	80047ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004836:	f023 030c 	bic.w	r3, r3, #12
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	430b      	orrs	r3, r1
 8004842:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004862:	f040 818b 	bne.w	8004b7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4ac1      	ldr	r2, [pc, #772]	; (8004b70 <UART_SetConfig+0x37c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d005      	beq.n	800487c <UART_SetConfig+0x88>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4abf      	ldr	r2, [pc, #764]	; (8004b74 <UART_SetConfig+0x380>)
 8004876:	4293      	cmp	r3, r2
 8004878:	f040 80bd 	bne.w	80049f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800487c:	f7fd ff6a 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8004880:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	461d      	mov	r5, r3
 8004886:	f04f 0600 	mov.w	r6, #0
 800488a:	46a8      	mov	r8, r5
 800488c:	46b1      	mov	r9, r6
 800488e:	eb18 0308 	adds.w	r3, r8, r8
 8004892:	eb49 0409 	adc.w	r4, r9, r9
 8004896:	4698      	mov	r8, r3
 8004898:	46a1      	mov	r9, r4
 800489a:	eb18 0805 	adds.w	r8, r8, r5
 800489e:	eb49 0906 	adc.w	r9, r9, r6
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048b6:	4688      	mov	r8, r1
 80048b8:	4691      	mov	r9, r2
 80048ba:	eb18 0005 	adds.w	r0, r8, r5
 80048be:	eb49 0106 	adc.w	r1, r9, r6
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	461d      	mov	r5, r3
 80048c8:	f04f 0600 	mov.w	r6, #0
 80048cc:	196b      	adds	r3, r5, r5
 80048ce:	eb46 0406 	adc.w	r4, r6, r6
 80048d2:	461a      	mov	r2, r3
 80048d4:	4623      	mov	r3, r4
 80048d6:	f7fb fc95 	bl	8000204 <__aeabi_uldivmod>
 80048da:	4603      	mov	r3, r0
 80048dc:	460c      	mov	r4, r1
 80048de:	461a      	mov	r2, r3
 80048e0:	4ba5      	ldr	r3, [pc, #660]	; (8004b78 <UART_SetConfig+0x384>)
 80048e2:	fba3 2302 	umull	r2, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	461d      	mov	r5, r3
 80048f0:	f04f 0600 	mov.w	r6, #0
 80048f4:	46a9      	mov	r9, r5
 80048f6:	46b2      	mov	sl, r6
 80048f8:	eb19 0309 	adds.w	r3, r9, r9
 80048fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004900:	4699      	mov	r9, r3
 8004902:	46a2      	mov	sl, r4
 8004904:	eb19 0905 	adds.w	r9, r9, r5
 8004908:	eb4a 0a06 	adc.w	sl, sl, r6
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800491c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004920:	4689      	mov	r9, r1
 8004922:	4692      	mov	sl, r2
 8004924:	eb19 0005 	adds.w	r0, r9, r5
 8004928:	eb4a 0106 	adc.w	r1, sl, r6
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	461d      	mov	r5, r3
 8004932:	f04f 0600 	mov.w	r6, #0
 8004936:	196b      	adds	r3, r5, r5
 8004938:	eb46 0406 	adc.w	r4, r6, r6
 800493c:	461a      	mov	r2, r3
 800493e:	4623      	mov	r3, r4
 8004940:	f7fb fc60 	bl	8000204 <__aeabi_uldivmod>
 8004944:	4603      	mov	r3, r0
 8004946:	460c      	mov	r4, r1
 8004948:	461a      	mov	r2, r3
 800494a:	4b8b      	ldr	r3, [pc, #556]	; (8004b78 <UART_SetConfig+0x384>)
 800494c:	fba3 1302 	umull	r1, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	2164      	movs	r1, #100	; 0x64
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	3332      	adds	r3, #50	; 0x32
 800495e:	4a86      	ldr	r2, [pc, #536]	; (8004b78 <UART_SetConfig+0x384>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800496c:	4498      	add	r8, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	461d      	mov	r5, r3
 8004972:	f04f 0600 	mov.w	r6, #0
 8004976:	46a9      	mov	r9, r5
 8004978:	46b2      	mov	sl, r6
 800497a:	eb19 0309 	adds.w	r3, r9, r9
 800497e:	eb4a 040a 	adc.w	r4, sl, sl
 8004982:	4699      	mov	r9, r3
 8004984:	46a2      	mov	sl, r4
 8004986:	eb19 0905 	adds.w	r9, r9, r5
 800498a:	eb4a 0a06 	adc.w	sl, sl, r6
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800499a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049a2:	4689      	mov	r9, r1
 80049a4:	4692      	mov	sl, r2
 80049a6:	eb19 0005 	adds.w	r0, r9, r5
 80049aa:	eb4a 0106 	adc.w	r1, sl, r6
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	461d      	mov	r5, r3
 80049b4:	f04f 0600 	mov.w	r6, #0
 80049b8:	196b      	adds	r3, r5, r5
 80049ba:	eb46 0406 	adc.w	r4, r6, r6
 80049be:	461a      	mov	r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	f7fb fc1f 	bl	8000204 <__aeabi_uldivmod>
 80049c6:	4603      	mov	r3, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <UART_SetConfig+0x384>)
 80049ce:	fba3 1302 	umull	r1, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2164      	movs	r1, #100	; 0x64
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	3332      	adds	r3, #50	; 0x32
 80049e0:	4a65      	ldr	r2, [pc, #404]	; (8004b78 <UART_SetConfig+0x384>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	f003 0207 	and.w	r2, r3, #7
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4442      	add	r2, r8
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	e26f      	b.n	8004ed6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049f6:	f7fd fe99 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 80049fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	461d      	mov	r5, r3
 8004a00:	f04f 0600 	mov.w	r6, #0
 8004a04:	46a8      	mov	r8, r5
 8004a06:	46b1      	mov	r9, r6
 8004a08:	eb18 0308 	adds.w	r3, r8, r8
 8004a0c:	eb49 0409 	adc.w	r4, r9, r9
 8004a10:	4698      	mov	r8, r3
 8004a12:	46a1      	mov	r9, r4
 8004a14:	eb18 0805 	adds.w	r8, r8, r5
 8004a18:	eb49 0906 	adc.w	r9, r9, r6
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a30:	4688      	mov	r8, r1
 8004a32:	4691      	mov	r9, r2
 8004a34:	eb18 0005 	adds.w	r0, r8, r5
 8004a38:	eb49 0106 	adc.w	r1, r9, r6
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	461d      	mov	r5, r3
 8004a42:	f04f 0600 	mov.w	r6, #0
 8004a46:	196b      	adds	r3, r5, r5
 8004a48:	eb46 0406 	adc.w	r4, r6, r6
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	f7fb fbd8 	bl	8000204 <__aeabi_uldivmod>
 8004a54:	4603      	mov	r3, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <UART_SetConfig+0x384>)
 8004a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	461d      	mov	r5, r3
 8004a6a:	f04f 0600 	mov.w	r6, #0
 8004a6e:	46a9      	mov	r9, r5
 8004a70:	46b2      	mov	sl, r6
 8004a72:	eb19 0309 	adds.w	r3, r9, r9
 8004a76:	eb4a 040a 	adc.w	r4, sl, sl
 8004a7a:	4699      	mov	r9, r3
 8004a7c:	46a2      	mov	sl, r4
 8004a7e:	eb19 0905 	adds.w	r9, r9, r5
 8004a82:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a9a:	4689      	mov	r9, r1
 8004a9c:	4692      	mov	sl, r2
 8004a9e:	eb19 0005 	adds.w	r0, r9, r5
 8004aa2:	eb4a 0106 	adc.w	r1, sl, r6
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	461d      	mov	r5, r3
 8004aac:	f04f 0600 	mov.w	r6, #0
 8004ab0:	196b      	adds	r3, r5, r5
 8004ab2:	eb46 0406 	adc.w	r4, r6, r6
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	4623      	mov	r3, r4
 8004aba:	f7fb fba3 	bl	8000204 <__aeabi_uldivmod>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <UART_SetConfig+0x384>)
 8004ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2164      	movs	r1, #100	; 0x64
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	3332      	adds	r3, #50	; 0x32
 8004ad8:	4a27      	ldr	r2, [pc, #156]	; (8004b78 <UART_SetConfig+0x384>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae6:	4498      	add	r8, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	461d      	mov	r5, r3
 8004aec:	f04f 0600 	mov.w	r6, #0
 8004af0:	46a9      	mov	r9, r5
 8004af2:	46b2      	mov	sl, r6
 8004af4:	eb19 0309 	adds.w	r3, r9, r9
 8004af8:	eb4a 040a 	adc.w	r4, sl, sl
 8004afc:	4699      	mov	r9, r3
 8004afe:	46a2      	mov	sl, r4
 8004b00:	eb19 0905 	adds.w	r9, r9, r5
 8004b04:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b1c:	4689      	mov	r9, r1
 8004b1e:	4692      	mov	sl, r2
 8004b20:	eb19 0005 	adds.w	r0, r9, r5
 8004b24:	eb4a 0106 	adc.w	r1, sl, r6
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	461d      	mov	r5, r3
 8004b2e:	f04f 0600 	mov.w	r6, #0
 8004b32:	196b      	adds	r3, r5, r5
 8004b34:	eb46 0406 	adc.w	r4, r6, r6
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	f7fb fb62 	bl	8000204 <__aeabi_uldivmod>
 8004b40:	4603      	mov	r3, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <UART_SetConfig+0x384>)
 8004b48:	fba3 1302 	umull	r1, r3, r3, r2
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	2164      	movs	r1, #100	; 0x64
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	3332      	adds	r3, #50	; 0x32
 8004b5a:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <UART_SetConfig+0x384>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	f003 0207 	and.w	r2, r3, #7
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4442      	add	r2, r8
 8004b6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b6e:	e1b2      	b.n	8004ed6 <UART_SetConfig+0x6e2>
 8004b70:	40011000 	.word	0x40011000
 8004b74:	40011400 	.word	0x40011400
 8004b78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4ad7      	ldr	r2, [pc, #860]	; (8004ee0 <UART_SetConfig+0x6ec>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d005      	beq.n	8004b92 <UART_SetConfig+0x39e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4ad6      	ldr	r2, [pc, #856]	; (8004ee4 <UART_SetConfig+0x6f0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	f040 80d1 	bne.w	8004d34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b92:	f7fd fddf 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8004b96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	469a      	mov	sl, r3
 8004b9c:	f04f 0b00 	mov.w	fp, #0
 8004ba0:	46d0      	mov	r8, sl
 8004ba2:	46d9      	mov	r9, fp
 8004ba4:	eb18 0308 	adds.w	r3, r8, r8
 8004ba8:	eb49 0409 	adc.w	r4, r9, r9
 8004bac:	4698      	mov	r8, r3
 8004bae:	46a1      	mov	r9, r4
 8004bb0:	eb18 080a 	adds.w	r8, r8, sl
 8004bb4:	eb49 090b 	adc.w	r9, r9, fp
 8004bb8:	f04f 0100 	mov.w	r1, #0
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bcc:	4688      	mov	r8, r1
 8004bce:	4691      	mov	r9, r2
 8004bd0:	eb1a 0508 	adds.w	r5, sl, r8
 8004bd4:	eb4b 0609 	adc.w	r6, fp, r9
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	f04f 0400 	mov.w	r4, #0
 8004bea:	0094      	lsls	r4, r2, #2
 8004bec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bf0:	008b      	lsls	r3, r1, #2
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	f7fb fb03 	bl	8000204 <__aeabi_uldivmod>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	461a      	mov	r2, r3
 8004c04:	4bb8      	ldr	r3, [pc, #736]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004c06:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	469b      	mov	fp, r3
 8004c14:	f04f 0c00 	mov.w	ip, #0
 8004c18:	46d9      	mov	r9, fp
 8004c1a:	46e2      	mov	sl, ip
 8004c1c:	eb19 0309 	adds.w	r3, r9, r9
 8004c20:	eb4a 040a 	adc.w	r4, sl, sl
 8004c24:	4699      	mov	r9, r3
 8004c26:	46a2      	mov	sl, r4
 8004c28:	eb19 090b 	adds.w	r9, r9, fp
 8004c2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c30:	f04f 0100 	mov.w	r1, #0
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c44:	4689      	mov	r9, r1
 8004c46:	4692      	mov	sl, r2
 8004c48:	eb1b 0509 	adds.w	r5, fp, r9
 8004c4c:	eb4c 060a 	adc.w	r6, ip, sl
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4619      	mov	r1, r3
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	f04f 0400 	mov.w	r4, #0
 8004c62:	0094      	lsls	r4, r2, #2
 8004c64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c68:	008b      	lsls	r3, r1, #2
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	4628      	mov	r0, r5
 8004c70:	4631      	mov	r1, r6
 8004c72:	f7fb fac7 	bl	8000204 <__aeabi_uldivmod>
 8004c76:	4603      	mov	r3, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4b9a      	ldr	r3, [pc, #616]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2164      	movs	r1, #100	; 0x64
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a95      	ldr	r2, [pc, #596]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c9c:	4498      	add	r8, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	469b      	mov	fp, r3
 8004ca2:	f04f 0c00 	mov.w	ip, #0
 8004ca6:	46d9      	mov	r9, fp
 8004ca8:	46e2      	mov	sl, ip
 8004caa:	eb19 0309 	adds.w	r3, r9, r9
 8004cae:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	46a2      	mov	sl, r4
 8004cb6:	eb19 090b 	adds.w	r9, r9, fp
 8004cba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd2:	4689      	mov	r9, r1
 8004cd4:	4692      	mov	sl, r2
 8004cd6:	eb1b 0509 	adds.w	r5, fp, r9
 8004cda:	eb4c 060a 	adc.w	r6, ip, sl
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	f04f 0400 	mov.w	r4, #0
 8004cf0:	0094      	lsls	r4, r2, #2
 8004cf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	4631      	mov	r1, r6
 8004d00:	f7fb fa80 	bl	8000204 <__aeabi_uldivmod>
 8004d04:	4603      	mov	r3, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b77      	ldr	r3, [pc, #476]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	2164      	movs	r1, #100	; 0x64
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	3332      	adds	r3, #50	; 0x32
 8004d1e:	4a72      	ldr	r2, [pc, #456]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4442      	add	r2, r8
 8004d30:	609a      	str	r2, [r3, #8]
 8004d32:	e0d0      	b.n	8004ed6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d34:	f7fd fcfa 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8004d38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	469a      	mov	sl, r3
 8004d3e:	f04f 0b00 	mov.w	fp, #0
 8004d42:	46d0      	mov	r8, sl
 8004d44:	46d9      	mov	r9, fp
 8004d46:	eb18 0308 	adds.w	r3, r8, r8
 8004d4a:	eb49 0409 	adc.w	r4, r9, r9
 8004d4e:	4698      	mov	r8, r3
 8004d50:	46a1      	mov	r9, r4
 8004d52:	eb18 080a 	adds.w	r8, r8, sl
 8004d56:	eb49 090b 	adc.w	r9, r9, fp
 8004d5a:	f04f 0100 	mov.w	r1, #0
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d6e:	4688      	mov	r8, r1
 8004d70:	4691      	mov	r9, r2
 8004d72:	eb1a 0508 	adds.w	r5, sl, r8
 8004d76:	eb4b 0609 	adc.w	r6, fp, r9
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	f04f 0400 	mov.w	r4, #0
 8004d8c:	0094      	lsls	r4, r2, #2
 8004d8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d92:	008b      	lsls	r3, r1, #2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4623      	mov	r3, r4
 8004d98:	4628      	mov	r0, r5
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	f7fb fa32 	bl	8000204 <__aeabi_uldivmod>
 8004da0:	4603      	mov	r3, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	461a      	mov	r2, r3
 8004da6:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004da8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	469b      	mov	fp, r3
 8004db6:	f04f 0c00 	mov.w	ip, #0
 8004dba:	46d9      	mov	r9, fp
 8004dbc:	46e2      	mov	sl, ip
 8004dbe:	eb19 0309 	adds.w	r3, r9, r9
 8004dc2:	eb4a 040a 	adc.w	r4, sl, sl
 8004dc6:	4699      	mov	r9, r3
 8004dc8:	46a2      	mov	sl, r4
 8004dca:	eb19 090b 	adds.w	r9, r9, fp
 8004dce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004de2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004de6:	4689      	mov	r9, r1
 8004de8:	4692      	mov	sl, r2
 8004dea:	eb1b 0509 	adds.w	r5, fp, r9
 8004dee:	eb4c 060a 	adc.w	r6, ip, sl
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4619      	mov	r1, r3
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	f04f 0400 	mov.w	r4, #0
 8004e04:	0094      	lsls	r4, r2, #2
 8004e06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e0a:	008b      	lsls	r3, r1, #2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4623      	mov	r3, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	4631      	mov	r1, r6
 8004e14:	f7fb f9f6 	bl	8000204 <__aeabi_uldivmod>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	; 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	3332      	adds	r3, #50	; 0x32
 8004e32:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e3e:	4498      	add	r8, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	469b      	mov	fp, r3
 8004e44:	f04f 0c00 	mov.w	ip, #0
 8004e48:	46d9      	mov	r9, fp
 8004e4a:	46e2      	mov	sl, ip
 8004e4c:	eb19 0309 	adds.w	r3, r9, r9
 8004e50:	eb4a 040a 	adc.w	r4, sl, sl
 8004e54:	4699      	mov	r9, r3
 8004e56:	46a2      	mov	sl, r4
 8004e58:	eb19 090b 	adds.w	r9, r9, fp
 8004e5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e74:	4689      	mov	r9, r1
 8004e76:	4692      	mov	sl, r2
 8004e78:	eb1b 0509 	adds.w	r5, fp, r9
 8004e7c:	eb4c 060a 	adc.w	r6, ip, sl
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4619      	mov	r1, r3
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	f04f 0400 	mov.w	r4, #0
 8004e92:	0094      	lsls	r4, r2, #2
 8004e94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e98:	008b      	lsls	r3, r1, #2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	f7fb f9af 	bl	8000204 <__aeabi_uldivmod>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004eae:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2164      	movs	r1, #100	; 0x64
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	3332      	adds	r3, #50	; 0x32
 8004ec0:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <UART_SetConfig+0x6f4>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	f003 020f 	and.w	r2, r3, #15
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4442      	add	r2, r8
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	e7ff      	b.n	8004ed6 <UART_SetConfig+0x6e2>
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee0:	40011000 	.word	0x40011000
 8004ee4:	40011400 	.word	0x40011400
 8004ee8:	51eb851f 	.word	0x51eb851f

08004eec <__libc_init_array>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4e0d      	ldr	r6, [pc, #52]	; (8004f24 <__libc_init_array+0x38>)
 8004ef0:	4c0d      	ldr	r4, [pc, #52]	; (8004f28 <__libc_init_array+0x3c>)
 8004ef2:	1ba4      	subs	r4, r4, r6
 8004ef4:	10a4      	asrs	r4, r4, #2
 8004ef6:	2500      	movs	r5, #0
 8004ef8:	42a5      	cmp	r5, r4
 8004efa:	d109      	bne.n	8004f10 <__libc_init_array+0x24>
 8004efc:	4e0b      	ldr	r6, [pc, #44]	; (8004f2c <__libc_init_array+0x40>)
 8004efe:	4c0c      	ldr	r4, [pc, #48]	; (8004f30 <__libc_init_array+0x44>)
 8004f00:	f000 f820 	bl	8004f44 <_init>
 8004f04:	1ba4      	subs	r4, r4, r6
 8004f06:	10a4      	asrs	r4, r4, #2
 8004f08:	2500      	movs	r5, #0
 8004f0a:	42a5      	cmp	r5, r4
 8004f0c:	d105      	bne.n	8004f1a <__libc_init_array+0x2e>
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f14:	4798      	blx	r3
 8004f16:	3501      	adds	r5, #1
 8004f18:	e7ee      	b.n	8004ef8 <__libc_init_array+0xc>
 8004f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f1e:	4798      	blx	r3
 8004f20:	3501      	adds	r5, #1
 8004f22:	e7f2      	b.n	8004f0a <__libc_init_array+0x1e>
 8004f24:	0800529c 	.word	0x0800529c
 8004f28:	0800529c 	.word	0x0800529c
 8004f2c:	0800529c 	.word	0x0800529c
 8004f30:	080052a0 	.word	0x080052a0

08004f34 <memset>:
 8004f34:	4402      	add	r2, r0
 8004f36:	4603      	mov	r3, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <_init>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	bf00      	nop
 8004f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4a:	bc08      	pop	{r3}
 8004f4c:	469e      	mov	lr, r3
 8004f4e:	4770      	bx	lr

08004f50 <_fini>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr
