
Stm32f446-Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005454  08005454  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800545c  0800545c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08005470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005470  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001109c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002265  00000000  00000000  000310d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00033340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  000342b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227d3  00000000  00000000  00035128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b558  00000000  00000000  000578fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d18a5  00000000  00000000  00062e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001346f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  00134774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005108 	.word	0x08005108

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005108 	.word	0x08005108

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f000 ff8e 	bl	800142c <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f000 ff86 	bl	800142c <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f000 ff7e 	bl	800142c <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f000 ff76 	bl	800142c <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f000 ffba 	bl	80014d8 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08005120 	.word	0x08005120

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
	SPIWrite(LR_RegPaConfig,0x0F); //14 Дб
 800057a:	210f      	movs	r1, #15
 800057c:	2009      	movs	r0, #9
 800057e:	f000 ff55 	bl	800142c <SPIWrite>
	//SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84
	SPIWrite(0x5A,0x84); // обычный режим( без макс усиления: до 14 Дб)
 8000582:	2184      	movs	r1, #132	; 0x84
 8000584:	205a      	movs	r0, #90	; 0x5a
 8000586:	f000 ff51 	bl	800142c <SPIWrite>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <Rf96_OCP+0x20>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	4619      	mov	r1, r3
 80005a6:	200b      	movs	r0, #11
 80005a8:	f000 ff40 	bl	800142c <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	0800512c 	.word	0x0800512c

080005b8 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <Rf96_LNA+0x20>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	200c      	movs	r0, #12
 80005cc:	f000 ff2e 	bl	800142c <SPIWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	08005130 	.word	0x08005130

080005dc <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
	SPIWrite(LR_RegModemConfig1,0x21); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005ee:	2121      	movs	r1, #33	; 0x21
 80005f0:	201d      	movs	r0, #29
 80005f2:	f000 ff1b 	bl	800142c <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // с CRC
	//SPIWrite(LR_RegDetectOptimize,0xC5); // Только для sf=6
	//SPIWrite(LR_RegDetecionThreshold,0x0C); // Только для sf=6
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	460b      	mov	r3, r1
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	4613      	mov	r3, r2
 800060e:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xB4);  // SF=11
 8000610:	21b4      	movs	r1, #180	; 0xb4
 8000612:	201e      	movs	r0, #30
 8000614:	f000 ff0a 	bl	800142c <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	201f      	movs	r0, #31
 8000620:	f000 ff04 	bl	800142c <SPIWrite>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	2020      	movs	r0, #32
 8000642:	f000 fef3 	bl	800142c <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	2021      	movs	r0, #33	; 0x21
 800064e:	f000 feed 	bl	800142c <SPIWrite>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4604      	mov	r4, r0
 8000662:	4608      	mov	r0, r1
 8000664:	4611      	mov	r1, r2
 8000666:	461a      	mov	r2, r3
 8000668:	4623      	mov	r3, r4
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4603      	mov	r3, r0
 800066e:	71bb      	strb	r3, [r7, #6]
 8000670:	460b      	mov	r3, r1
 8000672:	717b      	strb	r3, [r7, #5]
 8000674:	4613      	mov	r3, r2
 8000676:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	b2da      	uxtb	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4413      	add	r3, r2
 8000686:	b2da      	uxtb	r2, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	2040      	movs	r0, #64	; 0x40
 800069c:	f000 fec6 	bl	800142c <SPIWrite>
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd90      	pop	{r4, r7, pc}

080006a8 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006ac:	21f7      	movs	r1, #247	; 0xf7
 80006ae:	2011      	movs	r0, #17
 80006b0:	f000 febc 	bl	800142c <SPIWrite>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F); // Без CRC
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	2011      	movs	r0, #17
 80006c0:	f000 feb4 	bl	800142c <SPIWrite>
	//SPIWrite(LR_RegIrqFlagsMask,0x1F); //с CRC
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2022      	movs	r0, #34	; 0x22
 80006d8:	f000 fea8 	bl	800142c <SPIWrite>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	200e      	movs	r0, #14
 80006f4:	f000 fe9a 	bl	800142c <SPIWrite>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	200f      	movs	r0, #15
 8000710:	f000 fe8c 	bl	800142c <SPIWrite>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4619      	mov	r1, r3
 800072a:	200d      	movs	r0, #13
 800072c:	f000 fe7e 	bl	800142c <SPIWrite>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 800073c:	2185      	movs	r1, #133	; 0x85
 800073e:	2001      	movs	r0, #1
 8000740:	f000 fe74 	bl	800142c <SPIWrite>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fe6c 	bl	800142c <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	461a      	mov	r2, r3
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	2000      	movs	r0, #0
 800076c:	f000 feb4 	bl	80014d8 <BurstWrite>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000780:	2010      	movs	r0, #16
 8000782:	f000 fe35 	bl	80013f0 <SPIRead>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4619      	mov	r1, r3
 800078e:	200d      	movs	r0, #13
 8000790:	f000 fe4c 	bl	800142c <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 8000794:	2013      	movs	r0, #19
 8000796:	f000 fe2b 	bl	80013f0 <SPIRead>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	461a      	mov	r2, r3
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 fe65 	bl	8001474 <SPIBurstRead>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007b6:	f7ff feb5 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007ba:	f7ff febb 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fec0 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed3 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fee2 	bl	8000594 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fef1 	bl	80005b8 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff fefe 	bl	80005dc <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x0FF);
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	2101      	movs	r1, #1
 80007e4:	2006      	movs	r0, #6
 80007e6:	f7ff ff0a 	bl	80005fe <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007ea:	2008      	movs	r0, #8
 80007ec:	f7ff ff1e 	bl	800062c <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007f0:	210a      	movs	r1, #10
 80007f2:	2037      	movs	r0, #55	; 0x37
 80007f4:	f000 fe1a 	bl	800142c <SPIWrite>
	SPIWrite(0x31,0xA3);
 80007f8:	21a3      	movs	r1, #163	; 0xa3
 80007fa:	2031      	movs	r0, #49	; 0x31
 80007fc:	f000 fe16 	bl	800142c <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 8000800:	f7ff fe88 	bl	8000514 <Rf96_Standby>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800080c:	2302      	movs	r3, #2
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff21 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000818:	f7ff fe74 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800081c:	f7ff ff44 	bl	80006a8 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000820:	202a      	movs	r0, #42	; 0x2a
 8000822:	f7ff ff51 	bl	80006c8 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	f7ff ff5c 	bl	80006e4 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800082c:	2080      	movs	r0, #128	; 0x80
 800082e:	f7ff ff75 	bl	800071c <Rf96_FIFO_point>

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}

08000836 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800083a:	2100      	movs	r1, #0
 800083c:	2024      	movs	r0, #36	; 0x24
 800083e:	f000 fdf5 	bl	800142c <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000842:	2302      	movs	r3, #2
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff06 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 800084e:	f7ff ff33 	bl	80006b8 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000852:	f7ff fe57 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000856:	202a      	movs	r0, #42	; 0x2a
 8000858:	f7ff ff36 	bl	80006c8 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ff4f 	bl	8000700 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff5a 	bl	800071c <Rf96_FIFO_point>
	  // Входим в RX single мод
	  //Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 8000868:	f7ff ff66 	bl	8000738 <Rf96_RX_Continuous_mode>

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff69 	bl	8000758 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000886:	f7ff ff5f 	bl	8000748 <Rf96_TX_mode>

	// Ждем пока появится прерывание

	while(1)
	{
		if(Get_NIRQ_Di0())
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <Rf96_LoRaTxPacket+0x3c>)
 8000890:	f001 fef0 	bl	8002674 <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f7      	beq.n	800088a <Rf96_LoRaTxPacket+0x1a>
		{
			// Сбрасываем флаги
			Rf96_LoRaClearIrq();
 800089a:	f7ff fe33 	bl	8000504 <Rf96_LoRaClearIrq>
            // Заходим в Standby
			Rf96_Standby();
 800089e:	f7ff fe39 	bl	8000514 <Rf96_Standby>

			break;
 80008a2:	bf00      	nop
		}
	}


}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020000 	.word	0x40020000

080008b0 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c0:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008c2:	e012      	b.n	80008ea <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008c4:	89fb      	ldrh	r3, [r7, #14]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	89fb      	ldrh	r3, [r7, #14]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1c59      	adds	r1, r3, #1
 80008d6:	6079      	str	r1, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4043      	eors	r3, r0
 80008dc:	4909      	ldr	r1, [pc, #36]	; (8000904 <Crc16+0x54>)
 80008de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	4053      	eors	r3, r2
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	1e5a      	subs	r2, r3, #1
 80008ee:	807a      	strh	r2, [r7, #2]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e7      	bne.n	80008c4 <Crc16+0x14>

    return crc;
 80008f4:	89fb      	ldrh	r3, [r7, #14]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	08005134 	.word	0x08005134

08000908 <Crc8>:
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};
// Расчет CRC8
unsigned char Crc8(unsigned char *pcBlock, unsigned char len)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
    unsigned char crc = 0xFF;
 8000914:	23ff      	movs	r3, #255	; 0xff
 8000916:	73fb      	strb	r3, [r7, #15]

    while (len--)
 8000918:	e00a      	b.n	8000930 <Crc8+0x28>
        crc = Crc8Table[crc ^ *pcBlock++];
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	4053      	eors	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <Crc8+0x40>)
 800092c:	5c9b      	ldrb	r3, [r3, r2]
 800092e:	73fb      	strb	r3, [r7, #15]
    while (len--)
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	70fa      	strb	r2, [r7, #3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1ef      	bne.n	800091a <Crc8+0x12>

    return crc;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	08005334 	.word	0x08005334

0800094c <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 8000956:	f7ff ff57 	bl	8000808 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	e006      	b.n	800096e <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <CommandToRadio+0x88>)
 8000964:	2100      	movs	r1, #0
 8000966:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	3301      	adds	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b29      	cmp	r3, #41	; 0x29
 8000972:	d9f5      	bls.n	8000960 <CommandToRadio+0x14>
	}
	if(command==3)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d103      	bne.n	8000982 <CommandToRadio+0x36>
	{
		// Заносим задержку в секундах
		TX_RX_Radio[1]=BuffRx[1];
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <CommandToRadio+0x8c>)
 800097c:	785a      	ldrb	r2, [r3, #1]
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <CommandToRadio+0x88>)
 8000980:	705a      	strb	r2, [r3, #1]
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <CommandToRadio+0x88>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000988:	2128      	movs	r1, #40	; 0x28
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <CommandToRadio+0x88>)
 800098c:	f7ff ff90 	bl	80008b0 <Crc16>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <CommandToRadio+0x90>)
 8000996:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <CommandToRadio+0x90>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <CommandToRadio+0x88>)
 80009a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <CommandToRadio+0x90>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <CommandToRadio+0x88>)
 80009b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 80009b4:	2080      	movs	r0, #128	; 0x80
 80009b6:	f7ff fe95 	bl	80006e4 <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	f7ff feae 	bl	800071c <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 80009c0:	f7ff fda0 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 80009c4:	212a      	movs	r1, #42	; 0x2a
 80009c6:	4803      	ldr	r0, [pc, #12]	; (80009d4 <CommandToRadio+0x88>)
 80009c8:	f7ff ff52 	bl	8000870 <Rf96_LoRaTxPacket>
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000a4 	.word	0x200000a4
 80009d8:	200001f4 	.word	0x200001f4
 80009dc:	2000002a 	.word	0x2000002a

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f000 ff87 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 fa6d 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f000 fb95 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 80009f2:	f000 fb6b 	bl	80010cc <MX_DMA_Init>
  MX_SPI1_Init();
 80009f6:	f000 fad3 	bl	8000fa0 <MX_SPI1_Init>
  MX_TIM6_Init();
 80009fa:	f000 fb07 	bl	800100c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80009fe:	f000 fb3b 	bl	8001078 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Индикация включения УСИ ПРД
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	48bc      	ldr	r0, [pc, #752]	; (8000cf8 <main+0x318>)
 8000a08:	f001 fe4c 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a10:	f000 ffe4 	bl	80019dc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2104      	movs	r1, #4
 8000a18:	48b7      	ldr	r0, [pc, #732]	; (8000cf8 <main+0x318>)
 8000a1a:	f001 fe43 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a22:	f000 ffdb 	bl	80019dc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2108      	movs	r1, #8
 8000a2a:	48b3      	ldr	r0, [pc, #716]	; (8000cf8 <main+0x318>)
 8000a2c:	f001 fe3a 	bl	80026a4 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000a30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a34:	f000 ffd2 	bl	80019dc <HAL_Delay>

  // Инициализация lora sx1272
  Rf96_Lora_init();
 8000a38:	f7ff febb 	bl	80007b2 <Rf96_Lora_init>
  // Запуск приема команд с Linux
  HAL_UART_Receive_IT(&huart2, &data, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	49af      	ldr	r1, [pc, #700]	; (8000cfc <main+0x31c>)
 8000a40:	48af      	ldr	r0, [pc, #700]	; (8000d00 <main+0x320>)
 8000a42:	f003 fc61 	bl	8004308 <HAL_UART_Receive_IT>
  // Запуск таймера для работы светодиода
  HAL_TIM_Base_Start_IT(&htim6);
 8000a46:	48af      	ldr	r0, [pc, #700]	; (8000d04 <main+0x324>)
 8000a48:	f003 f8f3 	bl	8003c32 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		// Фильтрация помех 1 разъема
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000a4c:	f000 ffba 	bl	80019c4 <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	4bad      	ldr	r3, [pc, #692]	; (8000d08 <main+0x328>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	2bc8      	cmp	r3, #200	; 0xc8
 8000a5a:	d911      	bls.n	8000a80 <main+0xa0>
 8000a5c:	4bab      	ldr	r3, [pc, #684]	; (8000d0c <main+0x32c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00d      	beq.n	8000a80 <main+0xa0>
		{
			ReadRdy=0;
 8000a64:	4ba9      	ldr	r3, [pc, #676]	; (8000d0c <main+0x32c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000a6a:	48a5      	ldr	r0, [pc, #660]	; (8000d00 <main+0x320>)
 8000a6c:	f003 fca1 	bl	80043b2 <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	49a2      	ldr	r1, [pc, #648]	; (8000cfc <main+0x31c>)
 8000a74:	48a2      	ldr	r0, [pc, #648]	; (8000d00 <main+0x320>)
 8000a76:	f003 fc47 	bl	8004308 <HAL_UART_Receive_IT>
			countRx=0;
 8000a7a:	4ba5      	ldr	r3, [pc, #660]	; (8000d10 <main+0x330>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
		}


		// Пришла какая-то посылка по linux
		if(Readflag==1 && AccessRadio==0)
 8000a80:	4ba4      	ldr	r3, [pc, #656]	; (8000d14 <main+0x334>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	f040 80a5 	bne.w	8000bd4 <main+0x1f4>
 8000a8a:	4ba3      	ldr	r3, [pc, #652]	; (8000d18 <main+0x338>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 80a0 	bne.w	8000bd4 <main+0x1f4>
		{
			Readflag=0;
 8000a94:	4b9f      	ldr	r3, [pc, #636]	; (8000d14 <main+0x334>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4896      	ldr	r0, [pc, #600]	; (8000cf8 <main+0x318>)
 8000aa0:	f001 fe00 	bl	80026a4 <HAL_GPIO_WritePin>

			CRC_8c=BuffRx[MaxBuffOfCKT-1];
 8000aa4:	4b9d      	ldr	r3, [pc, #628]	; (8000d1c <main+0x33c>)
 8000aa6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8000aaa:	4b9d      	ldr	r3, [pc, #628]	; (8000d20 <main+0x340>)
 8000aac:	701a      	strb	r2, [r3, #0]
			if(CRC_8c==Crc8(BuffRx,MaxBuffOfCKT-1)) // если CRC совпало
 8000aae:	212a      	movs	r1, #42	; 0x2a
 8000ab0:	489a      	ldr	r0, [pc, #616]	; (8000d1c <main+0x33c>)
 8000ab2:	f7ff ff29 	bl	8000908 <Crc8>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b99      	ldr	r3, [pc, #612]	; (8000d20 <main+0x340>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d17d      	bne.n	8000bbe <main+0x1de>
			{
				switch(BuffRx[CommIndex])
 8000ac2:	4b96      	ldr	r3, [pc, #600]	; (8000d1c <main+0x33c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d878      	bhi.n	8000bbe <main+0x1de>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <main+0xf4>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000aed 	.word	0x08000aed
 8000ad8:	08000b17 	.word	0x08000b17
 8000adc:	08000b41 	.word	0x08000b41
 8000ae0:	08000bbf 	.word	0x08000bbf
 8000ae4:	08000b6b 	.word	0x08000b6b
 8000ae8:	08000b95 	.word	0x08000b95
				{
					case 1:
					LedMode=1; // Режим мигания - посылка передается
 8000aec:	4b8d      	ldr	r3, [pc, #564]	; (8000d24 <main+0x344>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
					Resolve4com=0;
 8000af2:	4b8d      	ldr	r3, [pc, #564]	; (8000d28 <main+0x348>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
					CommandToRadio(1);  // Команда начала записи: Создаем новый файл и начинаем прием данных
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff ff27 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000afe:	f7ff fe9a 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000b02:	4b8a      	ldr	r3, [pc, #552]	; (8000d2c <main+0x34c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000b08:	4b89      	ldr	r3, [pc, #548]	; (8000d30 <main+0x350>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000b0e:	4b82      	ldr	r3, [pc, #520]	; (8000d18 <main+0x338>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
					break;
 8000b14:	e053      	b.n	8000bbe <main+0x1de>
					case 2:
					LedMode=1; // Режим мигания - посылка передается
 8000b16:	4b83      	ldr	r3, [pc, #524]	; (8000d24 <main+0x344>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
					Resolve4com=0;
 8000b1c:	4b82      	ldr	r3, [pc, #520]	; (8000d28 <main+0x348>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
					CommandToRadio(2); // Команда открытия клапана
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff ff12 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000b28:	f7ff fe85 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000b2c:	4b7f      	ldr	r3, [pc, #508]	; (8000d2c <main+0x34c>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000b32:	4b7f      	ldr	r3, [pc, #508]	; (8000d30 <main+0x350>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000b38:	4b77      	ldr	r3, [pc, #476]	; (8000d18 <main+0x338>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
					break;
 8000b3e:	e03e      	b.n	8000bbe <main+0x1de>
					case 3:
					LedMode=1; // Режим мигания - посылка передается
 8000b40:	4b78      	ldr	r3, [pc, #480]	; (8000d24 <main+0x344>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
					Resolve4com=0;
 8000b46:	4b78      	ldr	r3, [pc, #480]	; (8000d28 <main+0x348>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
					CommandToRadio(3); // Команда запуска двигателя
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f7ff fefd 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000b52:	f7ff fe70 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000b56:	4b75      	ldr	r3, [pc, #468]	; (8000d2c <main+0x34c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000b5c:	4b74      	ldr	r3, [pc, #464]	; (8000d30 <main+0x350>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000b62:	4b6d      	ldr	r3, [pc, #436]	; (8000d18 <main+0x338>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
					break;
 8000b68:	e029      	b.n	8000bbe <main+0x1de>
					case 4:  // Внутренняя команда (запрос данных с ЦКТ)
					break;
					case 5:
					LedMode=1; // Режим мигания - посылка передается
 8000b6a:	4b6e      	ldr	r3, [pc, #440]	; (8000d24 <main+0x344>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
					Resolve4com=0;
 8000b70:	4b6d      	ldr	r3, [pc, #436]	; (8000d28 <main+0x348>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
					CommandToRadio(5); // Команда закрытия файла на SD и запрет записи на SD
 8000b76:	2005      	movs	r0, #5
 8000b78:	f7ff fee8 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000b7c:	f7ff fe5b 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000b80:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <main+0x34c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000b86:	4b6a      	ldr	r3, [pc, #424]	; (8000d30 <main+0x350>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000b8c:	4b62      	ldr	r3, [pc, #392]	; (8000d18 <main+0x338>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
					break;
 8000b92:	e014      	b.n	8000bbe <main+0x1de>
					case 6:
					LedMode=1; // Режим мигания - посылка передается
 8000b94:	4b63      	ldr	r3, [pc, #396]	; (8000d24 <main+0x344>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
					Resolve4com=0;
 8000b9a:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <main+0x348>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
					CommandToRadio(6); // Команда закрытия клапана
 8000ba0:	2006      	movs	r0, #6
 8000ba2:	f7ff fed3 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000ba6:	f7ff fe46 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000baa:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <main+0x34c>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000bb0:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <main+0x350>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000bb6:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <main+0x338>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
					break;
 8000bbc:	bf00      	nop
				}
			}
			// Продолжаем ожидать посылку с Linux
			countRx=0;
 8000bbe:	4b54      	ldr	r3, [pc, #336]	; (8000d10 <main+0x330>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000bc4:	484e      	ldr	r0, [pc, #312]	; (8000d00 <main+0x320>)
 8000bc6:	f003 fbf4 	bl	80043b2 <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	494b      	ldr	r1, [pc, #300]	; (8000cfc <main+0x31c>)
 8000bce:	484c      	ldr	r0, [pc, #304]	; (8000d00 <main+0x320>)
 8000bd0:	f003 fb9a 	bl	8004308 <HAL_UART_Receive_IT>
		}

		// Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8000bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd8:	4856      	ldr	r0, [pc, #344]	; (8000d34 <main+0x354>)
 8000bda:	f001 fd4b 	bl	8002674 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 811f 	beq.w	8000e24 <main+0x444>
		{

			// Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000be6:	4854      	ldr	r0, [pc, #336]	; (8000d38 <main+0x358>)
 8000be8:	f7ff fdc6 	bl	8000778 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000bec:	4b52      	ldr	r3, [pc, #328]	; (8000d38 <main+0x358>)
 8000bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <main+0x358>)
 8000bfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b4d      	ldr	r3, [pc, #308]	; (8000d3c <main+0x35c>)
 8000c06:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 8000c08:	f7ff fc7c 	bl	8000504 <Rf96_LoRaClearIrq>
			//Разрешаем прием по Usartу
			UsartRXflagbusy=0;
 8000c0c:	4b4c      	ldr	r3, [pc, #304]	; (8000d40 <main+0x360>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]

			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2)) // Если CRC16 совпало
 8000c12:	2128      	movs	r1, #40	; 0x28
 8000c14:	4848      	ldr	r0, [pc, #288]	; (8000d38 <main+0x358>)
 8000c16:	f7ff fe4b 	bl	80008b0 <Crc16>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b47      	ldr	r3, [pc, #284]	; (8000d3c <main+0x35c>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	f040 80fe 	bne.w	8000e24 <main+0x444>
			{
				// Останавливаем таймер
				Delay_start=0;
 8000c28:	4b40      	ldr	r3, [pc, #256]	; (8000d2c <main+0x34c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
				Ms_Delay=0;
 8000c2e:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <main+0x350>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
				switch(TX_RX_Radio[CommIndex])
 8000c34:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <main+0x358>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	f200 80f2 	bhi.w	8000e24 <main+0x444>
 8000c40:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <main+0x268>)
 8000c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c46:	bf00      	nop
 8000c48:	08000c61 	.word	0x08000c61
 8000c4c:	08000cb5 	.word	0x08000cb5
 8000c50:	08000cd7 	.word	0x08000cd7
 8000c54:	08000d45 	.word	0x08000d45
 8000c58:	08000de1 	.word	0x08000de1
 8000c5c:	08000e03 	.word	0x08000e03
				{
					case 1:   // Команда начала записи: Создаем файл
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <main+0x344>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <main+0x318>)
 8000c6c:	f001 fd1a 	bl	80026a4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2104      	movs	r1, #4
 8000c74:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <main+0x318>)
 8000c76:	f001 fd15 	bl	80026a4 <HAL_GPIO_WritePin>
					// Посылка принята успешно, отправляем запрос на данные, если нет команд с Linux
					if(Readflag!=1)
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <main+0x334>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d014      	beq.n	8000cac <main+0x2cc>
					{
					Resolve4com=1; // Разрешение на 4 команду
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <main+0x348>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
					LedMode=1; // Режим мигания - посылка передается
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <main+0x344>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f7ff fe5c 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000c94:	f7ff fdcf 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <main+0x34c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <main+0x350>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
					AccessRadio=1;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <main+0x338>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					break;
 8000caa:	e0bb      	b.n	8000e24 <main+0x444>
					} else AccessRadio=0;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <main+0x338>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
					break;
 8000cb2:	e0b7      	b.n	8000e24 <main+0x444>
					case 2:   // Команда открытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <main+0x344>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <main+0x318>)
 8000cc0:	f001 fcf0 	bl	80026a4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <main+0x318>)
 8000cca:	f001 fceb 	bl	80026a4 <HAL_GPIO_WritePin>
					// радиоканал не занят
					AccessRadio=0;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <main+0x338>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
					break;
 8000cd4:	e0a6      	b.n	8000e24 <main+0x444>
					case 3:   // Команда запуска двигателя
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <main+0x344>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <main+0x318>)
 8000ce2:	f001 fcdf 	bl	80026a4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <main+0x318>)
 8000cec:	f001 fcda 	bl	80026a4 <HAL_GPIO_WritePin>
					// радиоканал не занят
					AccessRadio=0;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <main+0x338>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
					break;
 8000cf6:	e095      	b.n	8000e24 <main+0x444>
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	2000002d 	.word	0x2000002d
 8000d00:	20000220 	.word	0x20000220
 8000d04:	2000015c 	.word	0x2000015c
 8000d08:	20000034 	.word	0x20000034
 8000d0c:	20000031 	.word	0x20000031
 8000d10:	2000002c 	.word	0x2000002c
 8000d14:	2000002e 	.word	0x2000002e
 8000d18:	20000038 	.word	0x20000038
 8000d1c:	200001f4 	.word	0x200001f4
 8000d20:	20000028 	.word	0x20000028
 8000d24:	20000030 	.word	0x20000030
 8000d28:	2000002f 	.word	0x2000002f
 8000d2c:	20000040 	.word	0x20000040
 8000d30:	2000003c 	.word	0x2000003c
 8000d34:	40020000 	.word	0x40020000
 8000d38:	200000a4 	.word	0x200000a4
 8000d3c:	2000002a 	.word	0x2000002a
 8000d40:	20000041 	.word	0x20000041
					case 4:   // Команда запроса данных с ЦКТ
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000d44:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <main+0x4bc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4854      	ldr	r0, [pc, #336]	; (8000ea0 <main+0x4c0>)
 8000d50:	f001 fca8 	bl	80026a4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2104      	movs	r1, #4
 8000d58:	4851      	ldr	r0, [pc, #324]	; (8000ea0 <main+0x4c0>)
 8000d5a:	f001 fca3 	bl	80026a4 <HAL_GPIO_WritePin>
					// Пересылаем принятый пакет на linux
					for(uint8_t i=0;i<MaxBuffOfCKT-4;i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	e00a      	b.n	8000d7a <main+0x39a>
					BuffTx[i+4]=TX_RX_Radio[i+1];
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	494d      	ldr	r1, [pc, #308]	; (8000ea4 <main+0x4c4>)
 8000d6e:	5c89      	ldrb	r1, [r1, r2]
 8000d70:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <main+0x4c8>)
 8000d72:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i=0;i<MaxBuffOfCKT-4;i++)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	3301      	adds	r3, #1
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b26      	cmp	r3, #38	; 0x26
 8000d7e:	d9f1      	bls.n	8000d64 <main+0x384>
					BuffTx[0]=0x7C;
 8000d80:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <main+0x4c8>)
 8000d82:	227c      	movs	r2, #124	; 0x7c
 8000d84:	701a      	strb	r2, [r3, #0]
					BuffTx[1]=0x6E;
 8000d86:	4b48      	ldr	r3, [pc, #288]	; (8000ea8 <main+0x4c8>)
 8000d88:	226e      	movs	r2, #110	; 0x6e
 8000d8a:	705a      	strb	r2, [r3, #1]
					BuffTx[2]=0xA1;
 8000d8c:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <main+0x4c8>)
 8000d8e:	22a1      	movs	r2, #161	; 0xa1
 8000d90:	709a      	strb	r2, [r3, #2]
					BuffTx[3]=0x2C;
 8000d92:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <main+0x4c8>)
 8000d94:	222c      	movs	r2, #44	; 0x2c
 8000d96:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, BuffTx, MaxBuffOfCKT,100);
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	222b      	movs	r2, #43	; 0x2b
 8000d9c:	4942      	ldr	r1, [pc, #264]	; (8000ea8 <main+0x4c8>)
 8000d9e:	4843      	ldr	r0, [pc, #268]	; (8000eac <main+0x4cc>)
 8000da0:	f003 fa19 	bl	80041d6 <HAL_UART_Transmit>
					// Посылка принята успешно, отправляем запрос на данные
					if(Resolve4com==1 && Readflag!=1  ) // Если нет запрета на 4 команду, то отправляем ее
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <main+0x4d0>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d115      	bne.n	8000dd8 <main+0x3f8>
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <main+0x4d4>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d011      	beq.n	8000dd8 <main+0x3f8>
					{
					LedMode=1; // Режим мигания - посылка передается
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <main+0x4bc>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f7ff fdc6 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000dc0:	f7ff fd39 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000dc4:	4b3c      	ldr	r3, [pc, #240]	; (8000eb8 <main+0x4d8>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <main+0x4dc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
					AccessRadio=1;
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <main+0x4e0>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					// радиоканал не занят
					break;
 8000dd6:	e025      	b.n	8000e24 <main+0x444>
					} else AccessRadio=0;
 8000dd8:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <main+0x4e0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
					break;
 8000dde:	e021      	b.n	8000e24 <main+0x444>
					case 5:   // Команда закрытия файла на SD и запрет записи на SD
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <main+0x4bc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	482d      	ldr	r0, [pc, #180]	; (8000ea0 <main+0x4c0>)
 8000dec:	f001 fc5a 	bl	80026a4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	482a      	ldr	r0, [pc, #168]	; (8000ea0 <main+0x4c0>)
 8000df6:	f001 fc55 	bl	80026a4 <HAL_GPIO_WritePin>
					// радиоканал не занят
					AccessRadio=0;
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <main+0x4e0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
					break;
 8000e00:	e010      	b.n	8000e24 <main+0x444>
					case 6:  // Команда закрытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <main+0x4bc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4824      	ldr	r0, [pc, #144]	; (8000ea0 <main+0x4c0>)
 8000e0e:	f001 fc49 	bl	80026a4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2104      	movs	r1, #4
 8000e16:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <main+0x4c0>)
 8000e18:	f001 fc44 	bl	80026a4 <HAL_GPIO_WritePin>
					// радиоканал не занят
					AccessRadio=0;
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <main+0x4e0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
					break;
 8000e22:	bf00      	nop
				}
			}
		}

	// Если радиосигнал не был принят
	if(RadioTimeoutRx==1)
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <main+0x4e4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	f47f ae0f 	bne.w	8000a4c <main+0x6c>
	{
		// Останавливаем таймер
		Delay_start=0;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <main+0x4d8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
		Ms_Delay=0;
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <main+0x4dc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
		RadioTimeoutRx=0;
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <main+0x4e4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
		LedMode=0; // посылка пропущена (тушим светодиод)
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <main+0x4bc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <main+0x4c0>)
 8000e4c:	f001 fc2a 	bl	80026a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2104      	movs	r1, #4
 8000e54:	4812      	ldr	r0, [pc, #72]	; (8000ea0 <main+0x4c0>)
 8000e56:	f001 fc25 	bl	80026a4 <HAL_GPIO_WritePin>
		Rf96_LoRaClearIrq();
 8000e5a:	f7ff fb53 	bl	8000504 <Rf96_LoRaClearIrq>
		// Отправляем еще один запрос на данные, иначе просто ожидаем команд с linux
		if(Resolve4com==1 && Readflag!= 1)
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <main+0x4d0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d115      	bne.n	8000e92 <main+0x4b2>
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <main+0x4d4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d011      	beq.n	8000e92 <main+0x4b2>
		{
			LedMode=1; // Режим мигания - посылка передается
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <main+0x4bc>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
			CommandToRadio(4); // Команда запроса данных
 8000e74:	2004      	movs	r0, #4
 8000e76:	f7ff fd69 	bl	800094c <CommandToRadio>
			// Ожидаем команду
			Rf96_Lora_RX_mode();
 8000e7a:	f7ff fcdc 	bl	8000836 <Rf96_Lora_RX_mode>
			// Запуск таймера для отслеживания таймаута
			Delay_start=1;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <main+0x4d8>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <main+0x4dc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
			AccessRadio=1 ;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <main+0x4e0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e002      	b.n	8000e98 <main+0x4b8>
		} else   AccessRadio=0;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <main+0x4e0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000e98:	e5d8      	b.n	8000a4c <main+0x6c>
 8000e9a:	bf00      	nop
 8000e9c:	20000030 	.word	0x20000030
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	200000a4 	.word	0x200000a4
 8000ea8:	20000130 	.word	0x20000130
 8000eac:	20000220 	.word	0x20000220
 8000eb0:	2000002f 	.word	0x2000002f
 8000eb4:	2000002e 	.word	0x2000002e
 8000eb8:	20000040 	.word	0x20000040
 8000ebc:	2000003c 	.word	0x2000003c
 8000ec0:	20000038 	.word	0x20000038
 8000ec4:	20000039 	.word	0x20000039

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2234      	movs	r2, #52	; 0x34
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 f90e 	bl	80050f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <SystemClock_Config+0xd0>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a28      	ldr	r2, [pc, #160]	; (8000f98 <SystemClock_Config+0xd0>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <SystemClock_Config+0xd0>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <SystemClock_Config+0xd4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <SystemClock_Config+0xd4>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <SystemClock_Config+0xd4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f30:	2310      	movs	r3, #16
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f40:	2354      	movs	r3, #84	; 0x54
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fe93 	bl	8002c80 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f60:	f000 fa1a 	bl	8001398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fbc3 	bl	800270c <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f8c:	f000 fa04 	bl	8001398 <Error_Handler>
  }
}
 8000f90:	bf00      	nop
 8000f92:	3750      	adds	r7, #80	; 0x50
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fa6:	4a18      	ldr	r2, [pc, #96]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fd4:	2218      	movs	r2, #24
 8000fd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_SPI1_Init+0x64>)
 8000fec:	220a      	movs	r2, #10
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_SPI1_Init+0x64>)
 8000ff2:	f002 f89f 	bl	8003134 <HAL_SPI_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ffc:	f000 f9cc 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000019c 	.word	0x2000019c
 8001008:	40013000 	.word	0x40013000

0800100c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_TIM6_Init+0x64>)
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <MX_TIM6_Init+0x68>)
 800101e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_TIM6_Init+0x64>)
 8001022:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001026:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_TIM6_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_TIM6_Init+0x64>)
 8001030:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001034:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_TIM6_Init+0x64>)
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_TIM6_Init+0x64>)
 800103e:	f002 fdcd 	bl	8003bdc <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001048:	f000 f9a6 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM6_Init+0x64>)
 800105a:	f002 ffdf 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001064:	f000 f998 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000015c 	.word	0x2000015c
 8001074:	40001000 	.word	0x40001000

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_USART2_UART_Init+0x50>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001084:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010b0:	f003 f844 	bl	800413c <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ba:	f000 f96d 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000220 	.word	0x20000220
 80010c8:	40004400 	.word	0x40004400

080010cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_DMA_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <MX_DMA_Init+0x4c>)
 80010dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_DMA_Init+0x4c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2010      	movs	r0, #16
 80010f4:	f000 fd6f 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010f8:	2010      	movs	r0, #16
 80010fa:	f000 fd88 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2011      	movs	r0, #17
 8001104:	f000 fd67 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001108:	2011      	movs	r0, #17
 800110a:	f000 fd80 	bl	8001c0e <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a4b      	ldr	r2, [pc, #300]	; (8001268 <MX_GPIO_Init+0x14c>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a44      	ldr	r2, [pc, #272]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b42      	ldr	r3, [pc, #264]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <MX_GPIO_Init+0x14c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <MX_GPIO_Init+0x14c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a36      	ldr	r2, [pc, #216]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <MX_GPIO_Init+0x14c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	210e      	movs	r1, #14
 80011a6:	4831      	ldr	r0, [pc, #196]	; (800126c <MX_GPIO_Init+0x150>)
 80011a8:	f001 fa7c 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2101      	movs	r1, #1
 80011b0:	482f      	ldr	r0, [pc, #188]	; (8001270 <MX_GPIO_Init+0x154>)
 80011b2:	f001 fa77 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	482e      	ldr	r0, [pc, #184]	; (8001274 <MX_GPIO_Init+0x158>)
 80011bc:	f001 fa72 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_GPIO_Init+0x15c>)
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4825      	ldr	r0, [pc, #148]	; (800126c <MX_GPIO_Init+0x150>)
 80011d6:	f001 f8bb 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011da:	230e      	movs	r3, #14
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	481e      	ldr	r0, [pc, #120]	; (800126c <MX_GPIO_Init+0x150>)
 80011f2:	f001 f8ad 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_GPIO_Init+0x154>)
 800120e:	f001 f89f 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_GPIO_Init+0x154>)
 8001228:	f001 f892 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800122c:	2338      	movs	r3, #56	; 0x38
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_GPIO_Init+0x158>)
 8001240:	f001 f886 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_GPIO_Init+0x158>)
 800125c:	f001 f878 	bl	8002350 <HAL_GPIO_Init>

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020800 	.word	0x40020800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	10210000 	.word	0x10210000

0800127c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Обработчик прерываний по приему usart2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <HAL_UART_RxCpltCallback+0x74>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d12c      	bne.n	80012e6 <HAL_UART_RxCpltCallback+0x6a>
	{
		ReadRdy=1;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_UART_RxCpltCallback+0x78>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
		reciveTime=HAL_GetTick();
 8001292:	f000 fb97 	bl	80019c4 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_UART_RxCpltCallback+0x7c>)
 800129a:	601a      	str	r2, [r3, #0]
        // Если предыдущая посылка не обработана
		//if(UsartRXflagbusy==0)
		//{
			// Заносим пришедший байт в массив
			BuffRx[countRx]=data;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_RxCpltCallback+0x80>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_RxCpltCallback+0x84>)
 80012a4:	7819      	ldrb	r1, [r3, #0]
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_UART_RxCpltCallback+0x88>)
 80012a8:	5499      	strb	r1, [r3, r2]
			if(countRx==MaxBuffOfCKT-1)
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_RxCpltCallback+0x80>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b2a      	cmp	r3, #42	; 0x2a
 80012b0:	d10e      	bne.n	80012d0 <HAL_UART_RxCpltCallback+0x54>
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2108      	movs	r1, #8
 80012b6:	4814      	ldr	r0, [pc, #80]	; (8001308 <HAL_UART_RxCpltCallback+0x8c>)
 80012b8:	f001 f9f4 	bl	80026a4 <HAL_GPIO_WritePin>
			  // Запрещаем 4 команду
			  Resolve4com=0;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_UART_RxCpltCallback+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
			  // Устанавливаем флаг того, что посылка принята
			  Readflag=1;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_UART_RxCpltCallback+0x94>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
			  UsartRXflagbusy=1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_UART_RxCpltCallback+0x98>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e005      	b.n	80012dc <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
			  countRx++;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_UART_RxCpltCallback+0x80>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_UART_RxCpltCallback+0x80>)
 80012da:	701a      	strb	r2, [r3, #0]
			}
		//}

		HAL_UART_Receive_IT(&huart2, &data, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <HAL_UART_RxCpltCallback+0x84>)
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <HAL_UART_RxCpltCallback+0x74>)
 80012e2:	f003 f811 	bl	8004308 <HAL_UART_Receive_IT>
	}
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000220 	.word	0x20000220
 80012f4:	20000031 	.word	0x20000031
 80012f8:	20000034 	.word	0x20000034
 80012fc:	2000002c 	.word	0x2000002c
 8001300:	2000002d 	.word	0x2000002d
 8001304:	200001f4 	.word	0x200001f4
 8001308:	40020800 	.word	0x40020800
 800130c:	2000002f 	.word	0x2000002f
 8001310:	2000002e 	.word	0x2000002e
 8001314:	20000041 	.word	0x20000041

08001318 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)  // мигание светодиодов
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d107      	bne.n	8001338 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if(LedMode==1) // 1 светодиод
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d103      	bne.n	8001338 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001330:	2102      	movs	r1, #2
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001334:	f001 f9cf 	bl	80026d6 <HAL_GPIO_TogglePin>
		}
	}
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000015c 	.word	0x2000015c
 8001344:	20000030 	.word	0x20000030
 8001348:	40020800 	.word	0x40020800

0800134c <SysTick_Handler>:

// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <SysTick_Handler+0x40>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d114      	bne.n	8001382 <SysTick_Handler+0x36>
	{
		if(Ms_Delay<5000)
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <SysTick_Handler+0x44>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001360:	4293      	cmp	r3, r2
 8001362:	d805      	bhi.n	8001370 <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <SysTick_Handler+0x44>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <SysTick_Handler+0x44>)
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e008      	b.n	8001382 <SysTick_Handler+0x36>
		}
		else
		{
			Delay_start=0;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SysTick_Handler+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SysTick_Handler+0x44>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
			RadioTimeoutRx=1; // произошло прерывание
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Handler+0x48>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001382:	f000 fb0b 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000040 	.word	0x20000040
 8001390:	2000003c 	.word	0x2000003c
 8001394:	20000039 	.word	0x20000039

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 80013b2:	1df9      	adds	r1, r7, #7
 80013b4:	230a      	movs	r3, #10
 80013b6:	2201      	movs	r2, #1
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <SPICmd8bit+0x20>)
 80013ba:	f001 ff1f 	bl	80031fc <HAL_SPI_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000019c 	.word	0x2000019c

080013cc <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 80013d6:	1df9      	adds	r1, r7, #7
 80013d8:	230a      	movs	r3, #10
 80013da:	2201      	movs	r2, #1
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <SPIRead8bit+0x20>)
 80013de:	f002 f841 	bl	8003464 <HAL_SPI_Receive>

  return(RdPara);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000019c 	.word	0x2000019c

080013f0 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 80013fa:	2200      	movs	r2, #0
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <SPIRead+0x38>)
 8001400:	f001 f950 	bl	80026a4 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ffce 	bl	80013a8 <SPICmd8bit>
  tmp = SPIRead8bit();
 800140c:	f7ff ffde 	bl	80013cc <SPIRead8bit>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001414:	2201      	movs	r2, #1
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <SPIRead+0x38>)
 800141a:	f001 f943 	bl	80026a4 <HAL_GPIO_WritePin>
  return(tmp);
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020400 	.word	0x40020400

0800142c <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	460a      	mov	r2, r1
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	4613      	mov	r3, r2
 800143a:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 800143c:	2200      	movs	r2, #0
 800143e:	2140      	movs	r1, #64	; 0x40
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <SPIWrite+0x44>)
 8001442:	f001 f92f 	bl	80026a4 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ffaa 	bl	80013a8 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffa6 	bl	80013a8 <SPICmd8bit>
	NSS_H();
 800145c:	2201      	movs	r2, #1
 800145e:	2140      	movs	r1, #64	; 0x40
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <SPIWrite+0x44>)
 8001462:	f001 f91f 	bl	80026a4 <HAL_GPIO_WritePin>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40020400 	.word	0x40020400

08001474 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	4613      	mov	r3, r2
 8001482:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d91f      	bls.n	80014ca <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 800148a:	2200      	movs	r2, #0
 800148c:	2140      	movs	r1, #64	; 0x40
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <SPIBurstRead+0x60>)
 8001490:	f001 f908 	bl	80026a4 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff86 	bl	80013a8 <SPICmd8bit>
    for(i=0;i<length;i++)
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e009      	b.n	80014b6 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	18d4      	adds	r4, r2, r3
 80014a8:	f7ff ff90 	bl	80013cc <SPIRead8bit>
 80014ac:	4603      	mov	r3, r0
 80014ae:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	3301      	adds	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3f1      	bcc.n	80014a2 <SPIBurstRead+0x2e>
      NSS_H();
 80014be:	2201      	movs	r2, #1
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <SPIBurstRead+0x60>)
 80014c4:	f001 f8ee 	bl	80026a4 <HAL_GPIO_WritePin>
 80014c8:	e000      	b.n	80014cc <SPIBurstRead+0x58>
    return;
 80014ca:	bf00      	nop
  }
}
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020400 	.word	0x40020400

080014d8 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d922      	bls.n	8001534 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 80014ee:	2200      	movs	r2, #0
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <BurstWrite+0x64>)
 80014f4:	f001 f8d6 	bl	80026a4 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff51 	bl	80013a8 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e009      	b.n	8001520 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff47 	bl	80013a8 <SPICmd8bit>
    for(i=0;i<length;i++)
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3301      	adds	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3f1      	bcc.n	800150c <BurstWrite+0x34>
    NSS_H();
 8001528:	2201      	movs	r2, #1
 800152a:	2140      	movs	r1, #64	; 0x40
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <BurstWrite+0x64>)
 800152e:	f001 f8b9 	bl	80026a4 <HAL_GPIO_WritePin>
 8001532:	e000      	b.n	8001536 <BurstWrite+0x5e>
    return;
 8001534:	bf00      	nop
  }
}
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_MspInit+0x4c>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_MspInit+0x4c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800157e:	2007      	movs	r0, #7
 8001580:	f000 fb1e 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_SPI_MspInit+0x84>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d12b      	bne.n	800160a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_SPI_MspInit+0x88>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <HAL_SPI_MspInit+0x88>)
 80015bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_SPI_MspInit+0x88>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_SPI_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_SPI_MspInit+0x88>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_SPI_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ea:	23e0      	movs	r3, #224	; 0xe0
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015fa:	2305      	movs	r3, #5
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_SPI_MspInit+0x8c>)
 8001606:	f000 fea3 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40013000 	.word	0x40013000
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d115      	bne.n	800165e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_TIM_Base_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_TIM_Base_MspInit+0x4c>)
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_TIM_Base_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2036      	movs	r0, #54	; 0x36
 8001654:	f000 fabf 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001658:	2036      	movs	r0, #54	; 0x36
 800165a:	f000 fad8 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40001000 	.word	0x40001000
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a4b      	ldr	r2, [pc, #300]	; (80017bc <HAL_UART_MspInit+0x14c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 8090 	bne.w	80017b4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_UART_MspInit+0x150>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a48      	ldr	r2, [pc, #288]	; (80017c0 <HAL_UART_MspInit+0x150>)
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_UART_MspInit+0x150>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <HAL_UART_MspInit+0x150>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a41      	ldr	r2, [pc, #260]	; (80017c0 <HAL_UART_MspInit+0x150>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_UART_MspInit+0x150>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016cc:	230c      	movs	r3, #12
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016dc:	2307      	movs	r3, #7
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4837      	ldr	r0, [pc, #220]	; (80017c4 <HAL_UART_MspInit+0x154>)
 80016e8:	f000 fe32 	bl	8002350 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_UART_MspInit+0x158>)
 80016ee:	4a37      	ldr	r2, [pc, #220]	; (80017cc <HAL_UART_MspInit+0x15c>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_UART_MspInit+0x158>)
 80016f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_UART_MspInit+0x158>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_UART_MspInit+0x158>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800172c:	4826      	ldr	r0, [pc, #152]	; (80017c8 <HAL_UART_MspInit+0x158>)
 800172e:	f000 fa89 	bl	8001c44 <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001738:	f7ff fe2e 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
 8001742:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_UART_MspInit+0x158>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_UART_MspInit+0x160>)
 800174a:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_UART_MspInit+0x164>)
 800174c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_UART_MspInit+0x160>)
 8001750:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001754:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_UART_MspInit+0x160>)
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_UART_MspInit+0x160>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_UART_MspInit+0x160>)
 8001764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001768:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_UART_MspInit+0x160>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_UART_MspInit+0x160>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_UART_MspInit+0x160>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_UART_MspInit+0x160>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_UART_MspInit+0x160>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001788:	4811      	ldr	r0, [pc, #68]	; (80017d0 <HAL_UART_MspInit+0x160>)
 800178a:	f000 fa5b 	bl	8001c44 <HAL_DMA_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001794:	f7ff fe00 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_UART_MspInit+0x160>)
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <HAL_UART_MspInit+0x160>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2026      	movs	r0, #38	; 0x26
 80017aa:	f000 fa14 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ae:	2026      	movs	r0, #38	; 0x26
 80017b0:	f000 fa2d 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40004400 	.word	0x40004400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	20000044 	.word	0x20000044
 80017cc:	40026088 	.word	0x40026088
 80017d0:	200000d0 	.word	0x200000d0
 80017d4:	400260a0 	.word	0x400260a0

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Stream5_IRQHandler+0x10>)
 800182e:	f000 fb49 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000044 	.word	0x20000044

0800183c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Stream6_IRQHandler+0x10>)
 8001842:	f000 fb3f 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000d0 	.word	0x200000d0

08001850 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <USART2_IRQHandler+0x10>)
 8001856:	f002 fe2f 	bl	80044b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000220 	.word	0x20000220

08001864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <TIM6_DAC_IRQHandler+0x10>)
 800186a:	f002 fa06 	bl	8003c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000015c 	.word	0x2000015c

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <SystemInit+0x28>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <SystemInit+0x28>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SystemInit+0x28>)
 800188e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001892:	609a      	str	r2, [r3, #8]
#endif
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <Reset_Handler>:
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0x14>
 80018a8:	2100      	movs	r1, #0
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopFillZerobss+0x18>)
 80018ae:	585b      	ldr	r3, [r3, r1]
 80018b0:	5043      	str	r3, [r0, r1]
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopFillZerobss+0x1c>)
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopFillZerobss+0x20>)
 80018b8:	1842      	adds	r2, r0, r1
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopFillZerobss+0x24>)
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
 80018c2:	2300      	movs	r3, #0
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LoopFillZerobss+0x28>)
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>
 80018ce:	f7ff ffd3 	bl	8001878 <SystemInit>
 80018d2:	f003 fbed 	bl	80050b0 <__libc_init_array>
 80018d6:	f7ff f883 	bl	80009e0 <main>
 80018da:	4770      	bx	lr
 80018dc:	20020000 	.word	0x20020000
 80018e0:	08005464 	.word	0x08005464
 80018e4:	20000000 	.word	0x20000000
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000264 	.word	0x20000264

080018f4 <ADC_IRQHandler>:
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_Init+0x40>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_Init+0x40>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x40>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f94d 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fe08 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f965 	bl	8001c2a <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	f000 f92d 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	20000008 	.word	0x20000008
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000260 	.word	0x20000260

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000260 	.word	0x20000260

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff ffee 	bl	80019c4 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_Delay+0x40>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffde 	bl	80019c4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000008 	.word	0x20000008

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff29 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff3e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff31 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff feb8 	bl	80019c4 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e099      	b.n	8001d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	e00f      	b.n	8001ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c82:	f7ff fe9f 	bl	80019c4 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d908      	bls.n	8001ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e078      	b.n	8001d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e8      	bne.n	8001c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_DMA_Init+0x158>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	4313      	orrs	r3, r2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f023 0307 	bic.w	r3, r3, #7
 8001d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d117      	bne.n	8001d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fa87 	bl	800225c <DMA_CheckFifoParam>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d62:	2301      	movs	r3, #1
 8001d64:	e016      	b.n	8001d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fa3e 	bl	80021f0 <DMA_CalcBaseAndBitshift>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f010803f 	.word	0xf010803f

08001da0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dae:	f7ff fe09 	bl	80019c4 <HAL_GetTick>
 8001db2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d008      	beq.n	8001dd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e052      	b.n	8001e78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0216 	bic.w	r2, r2, #22
 8001de0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <HAL_DMA_Abort+0x62>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0208 	bic.w	r2, r2, #8
 8001e10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e22:	e013      	b.n	8001e4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e24:	f7ff fdce 	bl	80019c4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d90c      	bls.n	8001e4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e015      	b.n	8001e78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1e4      	bne.n	8001e24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	223f      	movs	r2, #63	; 0x3f
 8001e60:	409a      	lsls	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d004      	beq.n	8001e9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00c      	b.n	8001eb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ed0:	4b92      	ldr	r3, [pc, #584]	; (800211c <HAL_DMA_IRQHandler+0x258>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a92      	ldr	r2, [pc, #584]	; (8002120 <HAL_DMA_IRQHandler+0x25c>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0a9b      	lsrs	r3, r3, #10
 8001edc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2208      	movs	r2, #8
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01a      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	2201      	movs	r2, #1
 8001f36:	409a      	lsls	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2201      	movs	r2, #1
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d012      	beq.n	8001f9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2204      	movs	r2, #4
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f043 0204 	orr.w	r2, r3, #4
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d043      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d03c      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d024      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
 8001ff2:	e01f      	b.n	8002034 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
 8002004:	e016      	b.n	8002034 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0208 	bic.w	r2, r2, #8
 8002022:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2220      	movs	r2, #32
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 808e 	beq.w	8002162 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8086 	beq.w	8002162 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2220      	movs	r2, #32
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b05      	cmp	r3, #5
 800206c:	d136      	bne.n	80020dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0216 	bic.w	r2, r2, #22
 800207c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <HAL_DMA_IRQHandler+0x1da>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	223f      	movs	r2, #63	; 0x3f
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d07d      	beq.n	80021ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
        }
        return;
 80020da:	e078      	b.n	80021ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01c      	beq.n	8002124 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d030      	beq.n	8002162 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
 8002108:	e02b      	b.n	8002162 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d027      	beq.n	8002162 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e022      	b.n	8002162 <HAL_DMA_IRQHandler+0x29e>
 800211c:	20000000 	.word	0x20000000
 8002120:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0210 	bic.w	r2, r2, #16
 8002140:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	2b00      	cmp	r3, #0
 8002168:	d032      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d022      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2205      	movs	r2, #5
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	429a      	cmp	r2, r3
 8002198:	d307      	bcc.n	80021aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f2      	bne.n	800218e <HAL_DMA_IRQHandler+0x2ca>
 80021a8:	e000      	b.n	80021ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
 80021cc:	e000      	b.n	80021d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021ce:	bf00      	nop
    }
  }
}
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop

080021d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3b10      	subs	r3, #16
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <DMA_CalcBaseAndBitshift+0x64>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800220a:	4a13      	ldr	r2, [pc, #76]	; (8002258 <DMA_CalcBaseAndBitshift+0x68>)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d909      	bls.n	8002232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	659a      	str	r2, [r3, #88]	; 0x58
 8002230:	e007      	b.n	8002242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	aaaaaaab 	.word	0xaaaaaaab
 8002258:	0800544c 	.word	0x0800544c

0800225c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11f      	bne.n	80022b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d855      	bhi.n	8002328 <DMA_CheckFifoParam+0xcc>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <DMA_CheckFifoParam+0x28>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	08002295 	.word	0x08002295
 8002288:	080022a7 	.word	0x080022a7
 800228c:	08002295 	.word	0x08002295
 8002290:	08002329 	.word	0x08002329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d045      	beq.n	800232c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a4:	e042      	b.n	800232c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ae:	d13f      	bne.n	8002330 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e03c      	b.n	8002330 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022be:	d121      	bne.n	8002304 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d836      	bhi.n	8002334 <DMA_CheckFifoParam+0xd8>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <DMA_CheckFifoParam+0x70>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022e3 	.word	0x080022e3
 80022d4:	080022dd 	.word	0x080022dd
 80022d8:	080022f5 	.word	0x080022f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      break;
 80022e0:	e02f      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d024      	beq.n	8002338 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f2:	e021      	b.n	8002338 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022fc:	d11e      	bne.n	800233c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002302:	e01b      	b.n	800233c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d902      	bls.n	8002310 <DMA_CheckFifoParam+0xb4>
 800230a:	2b03      	cmp	r3, #3
 800230c:	d003      	beq.n	8002316 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800230e:	e018      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      break;
 8002314:	e015      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00e      	beq.n	8002340 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      break;
 8002326:	e00b      	b.n	8002340 <DMA_CheckFifoParam+0xe4>
      break;
 8002328:	bf00      	nop
 800232a:	e00a      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 800232c:	bf00      	nop
 800232e:	e008      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002330:	bf00      	nop
 8002332:	e006      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002334:	bf00      	nop
 8002336:	e004      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002338:	bf00      	nop
 800233a:	e002      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;   
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <DMA_CheckFifoParam+0xe6>
      break;
 8002340:	bf00      	nop
    }
  } 
  
  return status; 
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e165      	b.n	8002638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 8154 	bne.w	8002632 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d00b      	beq.n	80023aa <HAL_GPIO_Init+0x5a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239e:	2b11      	cmp	r3, #17
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b12      	cmp	r3, #18
 80023a8:	d130      	bne.n	800240c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 0201 	and.w	r2, r3, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0xfc>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b12      	cmp	r3, #18
 800244a:	d123      	bne.n	8002494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80ae 	beq.w	8002632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_GPIO_Init+0x2fc>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a5b      	ldr	r2, [pc, #364]	; (800264c <HAL_GPIO_Init+0x2fc>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_GPIO_Init+0x2fc>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a57      	ldr	r2, [pc, #348]	; (8002650 <HAL_GPIO_Init+0x300>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_GPIO_Init+0x304>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x308>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x30c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_GPIO_Init+0x310>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_GPIO_Init+0x314>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x20a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_GPIO_Init+0x318>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x206>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_GPIO_Init+0x31c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x202>
 800254e:	2306      	movs	r3, #6
 8002550:	e00c      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002552:	2307      	movs	r3, #7
 8002554:	e00a      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002556:	2305      	movs	r3, #5
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x21c>
 800255a:	2304      	movs	r3, #4
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x21c>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x21c>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x21c>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257c:	4934      	ldr	r1, [pc, #208]	; (8002650 <HAL_GPIO_Init+0x300>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_GPIO_Init+0x320>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ae:	4a30      	ldr	r2, [pc, #192]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d8:	4a25      	ldr	r2, [pc, #148]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_GPIO_Init+0x320>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002602:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_GPIO_Init+0x320>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_GPIO_Init+0x320>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800262c:	4a10      	ldr	r2, [pc, #64]	; (8002670 <HAL_GPIO_Init+0x320>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	f67f ae96 	bls.w	800236c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002640:	bf00      	nop
 8002642:	3724      	adds	r7, #36	; 0x24
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40021400 	.word	0x40021400
 800266c:	40021800 	.word	0x40021800
 8002670:	40013c00 	.word	0x40013c00

08002674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e001      	b.n	8002696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	401a      	ands	r2, r3
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d104      	bne.n	80026fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	041a      	lsls	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80026f8:	e002      	b.n	8002700 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7ff f8e2 	bl	80019c4 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7ff f8de 	bl	80019c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f855 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8002896:	4601      	mov	r1, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	fa21 f303 	lsr.w	r3, r1, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f842 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08005434 	.word	0x08005434
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_GetHCLKFreq+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028f4:	f7ff fff0 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f8:	4601      	mov	r1, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0a9b      	lsrs	r3, r3, #10
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	08005444 	.word	0x08005444

08002918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800291c:	f7ff ffdc 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8002920:	4601      	mov	r1, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0b5b      	lsrs	r3, r3, #13
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <HAL_RCC_GetPCLK2Freq+0x24>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	08005444 	.word	0x08005444

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295a:	4bc6      	ldr	r3, [pc, #792]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b0c      	cmp	r3, #12
 8002964:	f200 817e 	bhi.w	8002c64 <HAL_RCC_GetSysClockFreq+0x324>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <HAL_RCC_GetSysClockFreq+0x30>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	080029a5 	.word	0x080029a5
 8002974:	08002c65 	.word	0x08002c65
 8002978:	08002c65 	.word	0x08002c65
 800297c:	08002c65 	.word	0x08002c65
 8002980:	080029ab 	.word	0x080029ab
 8002984:	08002c65 	.word	0x08002c65
 8002988:	08002c65 	.word	0x08002c65
 800298c:	08002c65 	.word	0x08002c65
 8002990:	080029b1 	.word	0x080029b1
 8002994:	08002c65 	.word	0x08002c65
 8002998:	08002c65 	.word	0x08002c65
 800299c:	08002c65 	.word	0x08002c65
 80029a0:	08002b0d 	.word	0x08002b0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4bb4      	ldr	r3, [pc, #720]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x338>)
 80029a6:	613b      	str	r3, [r7, #16]
       break;
 80029a8:	e15f      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029aa:	4bb4      	ldr	r3, [pc, #720]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x33c>)
 80029ac:	613b      	str	r3, [r7, #16]
      break;
 80029ae:	e15c      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b0:	4bb0      	ldr	r3, [pc, #704]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ba:	4bae      	ldr	r3, [pc, #696]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d04a      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4bab      	ldr	r3, [pc, #684]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	ea03 0501 	and.w	r5, r3, r1
 80029dc:	ea04 0602 	and.w	r6, r4, r2
 80029e0:	4629      	mov	r1, r5
 80029e2:	4632      	mov	r2, r6
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	0154      	lsls	r4, r2, #5
 80029ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	4619      	mov	r1, r3
 80029f6:	4622      	mov	r2, r4
 80029f8:	1b49      	subs	r1, r1, r5
 80029fa:	eb62 0206 	sbc.w	r2, r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0194      	lsls	r4, r2, #6
 8002a08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	eb64 0402 	sbc.w	r4, r4, r2
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	0262      	lsls	r2, r4, #9
 8002a38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a3c:	0259      	lsls	r1, r3, #9
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fd fbd8 	bl	8000204 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e049      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5c:	4b85      	ldr	r3, [pc, #532]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	f04f 0400 	mov.w	r4, #0
 8002a66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	ea03 0501 	and.w	r5, r3, r1
 8002a72:	ea04 0602 	and.w	r6, r4, r2
 8002a76:	4629      	mov	r1, r5
 8002a78:	4632      	mov	r2, r6
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	0154      	lsls	r4, r2, #5
 8002a84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a88:	014b      	lsls	r3, r1, #5
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	1b49      	subs	r1, r1, r5
 8002a90:	eb62 0206 	sbc.w	r2, r2, r6
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	0194      	lsls	r4, r2, #6
 8002a9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aa2:	018b      	lsls	r3, r1, #6
 8002aa4:	1a5b      	subs	r3, r3, r1
 8002aa6:	eb64 0402 	sbc.w	r4, r4, r2
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	00e2      	lsls	r2, r4, #3
 8002ab4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ab8:	00d9      	lsls	r1, r3, #3
 8002aba:	460b      	mov	r3, r1
 8002abc:	4614      	mov	r4, r2
 8002abe:	195b      	adds	r3, r3, r5
 8002ac0:	eb44 0406 	adc.w	r4, r4, r6
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	02a2      	lsls	r2, r4, #10
 8002ace:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ad2:	0299      	lsls	r1, r3, #10
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4614      	mov	r4, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	4621      	mov	r1, r4
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f04f 0400 	mov.w	r4, #0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	f7fd fb8d 	bl	8000204 <__aeabi_uldivmod>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002af0:	4b60      	ldr	r3, [pc, #384]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	613b      	str	r3, [r7, #16]
      break;
 8002b0a:	e0ae      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0c:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b14:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b16:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04a      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b22:	4b54      	ldr	r3, [pc, #336]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	ea03 0501 	and.w	r5, r3, r1
 8002b38:	ea04 0602 	and.w	r6, r4, r2
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	4632      	mov	r2, r6
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	f04f 0400 	mov.w	r4, #0
 8002b48:	0154      	lsls	r4, r2, #5
 8002b4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b4e:	014b      	lsls	r3, r1, #5
 8002b50:	4619      	mov	r1, r3
 8002b52:	4622      	mov	r2, r4
 8002b54:	1b49      	subs	r1, r1, r5
 8002b56:	eb62 0206 	sbc.w	r2, r2, r6
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f04f 0400 	mov.w	r4, #0
 8002b62:	0194      	lsls	r4, r2, #6
 8002b64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b68:	018b      	lsls	r3, r1, #6
 8002b6a:	1a5b      	subs	r3, r3, r1
 8002b6c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	00e2      	lsls	r2, r4, #3
 8002b7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b7e:	00d9      	lsls	r1, r3, #3
 8002b80:	460b      	mov	r3, r1
 8002b82:	4614      	mov	r4, r2
 8002b84:	195b      	adds	r3, r3, r5
 8002b86:	eb44 0406 	adc.w	r4, r4, r6
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	0262      	lsls	r2, r4, #9
 8002b94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b98:	0259      	lsls	r1, r3, #9
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f04f 0400 	mov.w	r4, #0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	f7fd fb2a 	bl	8000204 <__aeabi_uldivmod>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e049      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	f04f 0400 	mov.w	r4, #0
 8002bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	ea03 0501 	and.w	r5, r3, r1
 8002bce:	ea04 0602 	and.w	r6, r4, r2
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	4632      	mov	r2, r6
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	f04f 0400 	mov.w	r4, #0
 8002bde:	0154      	lsls	r4, r2, #5
 8002be0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002be4:	014b      	lsls	r3, r1, #5
 8002be6:	4619      	mov	r1, r3
 8002be8:	4622      	mov	r2, r4
 8002bea:	1b49      	subs	r1, r1, r5
 8002bec:	eb62 0206 	sbc.w	r2, r2, r6
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	f04f 0400 	mov.w	r4, #0
 8002bf8:	0194      	lsls	r4, r2, #6
 8002bfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bfe:	018b      	lsls	r3, r1, #6
 8002c00:	1a5b      	subs	r3, r3, r1
 8002c02:	eb64 0402 	sbc.w	r4, r4, r2
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	00e2      	lsls	r2, r4, #3
 8002c10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c14:	00d9      	lsls	r1, r3, #3
 8002c16:	460b      	mov	r3, r1
 8002c18:	4614      	mov	r4, r2
 8002c1a:	195b      	adds	r3, r3, r5
 8002c1c:	eb44 0406 	adc.w	r4, r4, r6
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	02a2      	lsls	r2, r4, #10
 8002c2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c2e:	0299      	lsls	r1, r3, #10
 8002c30:	460b      	mov	r3, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	4621      	mov	r1, r4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f04f 0400 	mov.w	r4, #0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4623      	mov	r3, r4
 8002c42:	f7fd fadf 	bl	8000204 <__aeabi_uldivmod>
 8002c46:	4603      	mov	r3, r0
 8002c48:	460c      	mov	r4, r1
 8002c4a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0f1b      	lsrs	r3, r3, #28
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	613b      	str	r3, [r7, #16]
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x338>)
 8002c66:	613b      	str	r3, [r7, #16]
      break;
 8002c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6a:	693b      	ldr	r3, [r7, #16]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8083 	beq.w	8002da0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c9a:	4b95      	ldr	r3, [pc, #596]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d019      	beq.n	8002cda <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca6:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cb2:	4b8f      	ldr	r3, [pc, #572]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cbe:	d00c      	beq.n	8002cda <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc0:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d112      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ccc:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cda:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d05b      	beq.n	8002d9e <HAL_RCC_OscConfig+0x11e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d157      	bne.n	8002d9e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e216      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x8a>
 8002cfc:	4b7c      	ldr	r3, [pc, #496]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a7b      	ldr	r2, [pc, #492]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e01d      	b.n	8002d46 <HAL_RCC_OscConfig+0xc6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0xae>
 8002d14:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a75      	ldr	r2, [pc, #468]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b73      	ldr	r3, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a72      	ldr	r2, [pc, #456]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0xc6>
 8002d2e:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6f      	ldr	r2, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6c      	ldr	r2, [pc, #432]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d013      	beq.n	8002d76 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fe39 	bl	80019c4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d56:	f7fe fe35 	bl	80019c4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1db      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d68:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0xd6>
 8002d74:	e014      	b.n	8002da0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe fe25 	bl	80019c4 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7e:	f7fe fe21 	bl	80019c4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b64      	cmp	r3, #100	; 0x64
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1c7      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d90:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0xfe>
 8002d9c:	e000      	b.n	8002da0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d06f      	beq.n	8002e8c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd0:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d11c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ddc:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x180>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e18f      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4938      	ldr	r1, [pc, #224]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e14:	e03a      	b.n	8002e8c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d020      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_RCC_OscConfig+0x274>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fdce 	bl	80019c4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fdca 	bl	80019c4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e170      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
 8002e5e:	e015      	b.n	8002e8c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x274>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fdad 	bl	80019c4 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fda9 	bl	80019c4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e14f      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d037      	beq.n	8002f08 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x278>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fd8d 	bl	80019c4 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe fd89 	bl	80019c4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e12f      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x22e>
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_OscConfig+0x278>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fd76 	bl	80019c4 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eda:	e00f      	b.n	8002efc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe fd72 	bl	80019c4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e118      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	42470000 	.word	0x42470000
 8002ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b8a      	ldr	r3, [pc, #552]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e9      	bne.n	8002edc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8097 	beq.w	8003044 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b83      	ldr	r3, [pc, #524]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b7c      	ldr	r3, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a75      	ldr	r2, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fd31 	bl	80019c4 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe fd2d 	bl	80019c4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0d3      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x31a>
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a65      	ldr	r2, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x354>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x33c>
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a60      	ldr	r2, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	4b5e      	ldr	r3, [pc, #376]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x354>
 8002fbc:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4b57      	ldr	r3, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a56      	ldr	r2, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fcf2 	bl	80019c4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fcee 	bl	80019c4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e092      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x364>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fcdc 	bl	80019c4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe fcd8 	bl	80019c4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e07c      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003026:	4b40      	ldr	r3, [pc, #256]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	4a3a      	ldr	r2, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003042:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d068      	beq.n	800311e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304c:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d060      	beq.n	800311a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d145      	bne.n	80030ec <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCC_OscConfig+0x4b0>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe fcad 	bl	80019c4 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe fca9 	bl	80019c4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e04f      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	019b      	lsls	r3, r3, #6
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	071b      	lsls	r3, r3, #28
 80030b8:	491b      	ldr	r1, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCC_OscConfig+0x4b0>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fc7e 	bl	80019c4 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fe fc7a 	bl	80019c4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e020      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x44c>
 80030ea:	e018      	b.n	800311e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ec:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_OscConfig+0x4b0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fc67 	bl	80019c4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fc63 	bl	80019c4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e009      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x4a8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x47a>
 8003118:	e001      	b.n	800311e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000
 8003130:	42470060 	.word	0x42470060

08003134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e056      	b.n	80031f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fe fa15 	bl	8001590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800317c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	ea42 0103 	orr.w	r1, r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	f003 0104 	and.w	r1, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_Transmit+0x22>
 800321a:	2302      	movs	r3, #2
 800321c:	e11e      	b.n	800345c <HAL_SPI_Transmit+0x260>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003226:	f7fe fbcd 	bl	80019c4 <HAL_GetTick>
 800322a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d002      	beq.n	8003242 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003240:	e103      	b.n	800344a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_SPI_Transmit+0x52>
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003252:	e0fa      	b.n	800344a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2203      	movs	r2, #3
 8003258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329a:	d107      	bne.n	80032ac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d007      	beq.n	80032ca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d2:	d14b      	bne.n	800336c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_SPI_Transmit+0xe6>
 80032dc:	8afb      	ldrh	r3, [r7, #22]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d13e      	bne.n	8003360 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	881a      	ldrh	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003306:	e02b      	b.n	8003360 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d112      	bne.n	800333c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	86da      	strh	r2, [r3, #54]	; 0x36
 800333a:	e011      	b.n	8003360 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800333c:	f7fe fb42 	bl	80019c4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_Transmit+0x158>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003352:	d102      	bne.n	800335a <HAL_SPI_Transmit+0x15e>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800335e:	e074      	b.n	800344a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ce      	bne.n	8003308 <HAL_SPI_Transmit+0x10c>
 800336a:	e04c      	b.n	8003406 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_SPI_Transmit+0x17e>
 8003374:	8afb      	ldrh	r3, [r7, #22]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d140      	bne.n	80033fc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033a0:	e02c      	b.n	80033fc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d113      	bne.n	80033d8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	7812      	ldrb	r2, [r2, #0]
 80033bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80033d6:	e011      	b.n	80033fc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d8:	f7fe faf4 	bl	80019c4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d803      	bhi.n	80033f0 <HAL_SPI_Transmit+0x1f4>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ee:	d102      	bne.n	80033f6 <HAL_SPI_Transmit+0x1fa>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033fa:	e026      	b.n	800344a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1cd      	bne.n	80033a2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fba4 	bl	8003b58 <SPI_EndRxTxTransaction>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e000      	b.n	800344a <HAL_SPI_Transmit+0x24e>
  }

error:
 8003448:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800345a:	7ffb      	ldrb	r3, [r7, #31]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003480:	d112      	bne.n	80034a8 <HAL_SPI_Receive+0x44>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10e      	bne.n	80034a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2204      	movs	r2, #4
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8e9 	bl	8003676 <HAL_SPI_TransmitReceive>
 80034a4:	4603      	mov	r3, r0
 80034a6:	e0e2      	b.n	800366e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_SPI_Receive+0x52>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0db      	b.n	800366e <HAL_SPI_Receive+0x20a>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034be:	f7fe fa81 	bl	80019c4 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
 80034d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034d4:	e0c2      	b.n	800365c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_SPI_Receive+0x7e>
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034e6:	e0b9      	b.n	800365c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2204      	movs	r2, #4
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352e:	d107      	bne.n	8003540 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d007      	beq.n	800355e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d162      	bne.n	800362c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003566:	e02e      	b.n	80035c6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d115      	bne.n	80035a2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f103 020c 	add.w	r2, r3, #12
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a0:	e011      	b.n	80035c6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a2:	f7fe fa0f 	bl	80019c4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d803      	bhi.n	80035ba <HAL_SPI_Receive+0x156>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b8:	d102      	bne.n	80035c0 <HAL_SPI_Receive+0x15c>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035c4:	e04a      	b.n	800365c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1cb      	bne.n	8003568 <HAL_SPI_Receive+0x104>
 80035d0:	e031      	b.n	8003636 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d113      	bne.n	8003608 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	b292      	uxth	r2, r2
 80035ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	1c9a      	adds	r2, r3, #2
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003606:	e011      	b.n	800362c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003608:	f7fe f9dc 	bl	80019c4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d803      	bhi.n	8003620 <HAL_SPI_Receive+0x1bc>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800361e:	d102      	bne.n	8003626 <HAL_SPI_Receive+0x1c2>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	75fb      	strb	r3, [r7, #23]
          goto error;
 800362a:	e017      	b.n	800365c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1cd      	bne.n	80035d2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	6839      	ldr	r1, [r7, #0]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fa27 	bl	8003a8e <SPI_EndRxTransaction>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
 8003658:	e000      	b.n	800365c <HAL_SPI_Receive+0x1f8>
  }

error :
 800365a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08c      	sub	sp, #48	; 0x30
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003684:	2301      	movs	r3, #1
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_SPI_TransmitReceive+0x26>
 8003698:	2302      	movs	r3, #2
 800369a:	e18a      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x33c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a4:	f7fe f98e 	bl	80019c4 <HAL_GetTick>
 80036a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d00f      	beq.n	80036e6 <HAL_SPI_TransmitReceive+0x70>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036cc:	d107      	bne.n	80036de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <HAL_SPI_TransmitReceive+0x68>
 80036d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d003      	beq.n	80036e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036de:	2302      	movs	r3, #2
 80036e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036e4:	e15b      	b.n	800399e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x82>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x82>
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d103      	bne.n	8003700 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036fe:	e14e      	b.n	800399e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b04      	cmp	r3, #4
 800370a:	d003      	beq.n	8003714 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2205      	movs	r2, #5
 8003710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	887a      	ldrh	r2, [r7, #2]
 800372a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d007      	beq.n	8003768 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003770:	d178      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x10a>
 800377a:	8b7b      	ldrh	r3, [r7, #26]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d166      	bne.n	800384e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	881a      	ldrh	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	1c9a      	adds	r2, r3, #2
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a4:	e053      	b.n	800384e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d11b      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x176>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x176>
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d113      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	1c9a      	adds	r2, r3, #2
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d119      	bne.n	800382e <HAL_SPI_TransmitReceive+0x1b8>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d014      	beq.n	800382e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	b292      	uxth	r2, r2
 8003810:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800382a:	2301      	movs	r3, #1
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800382e:	f7fe f8c9 	bl	80019c4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800383a:	429a      	cmp	r2, r3
 800383c:	d807      	bhi.n	800384e <HAL_SPI_TransmitReceive+0x1d8>
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003844:	d003      	beq.n	800384e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800384c:	e0a7      	b.n	800399e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1a6      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x130>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1a1      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x130>
 8003862:	e07c      	b.n	800395e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x1fc>
 800386c:	8b7b      	ldrh	r3, [r7, #26]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d16b      	bne.n	800394a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003898:	e057      	b.n	800394a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d11c      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x26c>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <HAL_SPI_TransmitReceive+0x26c>
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d114      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d119      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x2ae>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d014      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003920:	2301      	movs	r3, #1
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003924:	f7fe f84e 	bl	80019c4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003930:	429a      	cmp	r2, r3
 8003932:	d803      	bhi.n	800393c <HAL_SPI_TransmitReceive+0x2c6>
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393a:	d102      	bne.n	8003942 <HAL_SPI_TransmitReceive+0x2cc>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003948:	e029      	b.n	800399e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1a2      	bne.n	800389a <HAL_SPI_TransmitReceive+0x224>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d19d      	bne.n	800389a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f8f8 	bl	8003b58 <SPI_EndRxTxTransaction>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d006      	beq.n	800397c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800397a:	e010      	b.n	800399e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	e000      	b.n	800399e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800399c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3730      	adds	r7, #48	; 0x30
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ca:	e04c      	b.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d2:	d048      	beq.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80039d4:	f7fd fff6 	bl	80019c4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d902      	bls.n	80039ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d13d      	bne.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a02:	d111      	bne.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0c:	d004      	beq.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	d107      	bne.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a30:	d10f      	bne.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e00f      	b.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1a3      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa2:	d111      	bne.n	8003ac8 <SPI_EndRxTransaction+0x3a>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aac:	d004      	beq.n	8003ab8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	d107      	bne.n	8003ac8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad0:	d12a      	bne.n	8003b28 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d012      	beq.n	8003b02 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff ff67 	bl	80039ba <SPI_WaitFlagStateUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d02d      	beq.n	8003b4e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e026      	b.n	8003b50 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff ff54 	bl	80039ba <SPI_WaitFlagStateUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e013      	b.n	8003b50 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2101      	movs	r1, #1
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff ff41 	bl	80039ba <SPI_WaitFlagStateUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e000      	b.n	8003b50 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <SPI_EndRxTxTransaction+0x7c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <SPI_EndRxTxTransaction+0x80>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0d5b      	lsrs	r3, r3, #21
 8003b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b82:	d112      	bne.n	8003baa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff ff13 	bl	80039ba <SPI_WaitFlagStateUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e00f      	b.n	8003bca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b80      	cmp	r3, #128	; 0x80
 8003bc2:	d0f2      	beq.n	8003baa <SPI_EndRxTxTransaction+0x52>
 8003bc4:	e000      	b.n	8003bc8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bc6:	bf00      	nop
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	165e9f81 	.word	0x165e9f81

08003bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e01d      	b.n	8003c2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fd0c 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 f95e 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d007      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d122      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d11b      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f06f 0202 	mvn.w	r2, #2
 8003ca6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8ee 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003cc2:	e005      	b.n	8003cd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8e0 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8f1 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d122      	bne.n	8003d2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d11b      	bne.n	8003d2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f06f 0204 	mvn.w	r2, #4
 8003cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f8c4 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003d16:	e005      	b.n	8003d24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8b6 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8c7 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d122      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d11b      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f06f 0208 	mvn.w	r2, #8
 8003d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2204      	movs	r2, #4
 8003d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f89a 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003d6a:	e005      	b.n	8003d78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f88c 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f89d 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d122      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d11b      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0210 	mvn.w	r2, #16
 8003da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2208      	movs	r2, #8
 8003da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f870 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003dbe:	e005      	b.n	8003dcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f862 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f873 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10e      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f06f 0201 	mvn.w	r2, #1
 8003df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fd fa8d 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d10e      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f97f 	bl	8004128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d10e      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f838 	bl	8003ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d10e      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d107      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f06f 0220 	mvn.w	r2, #32
 8003e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f949 	bl	8004114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a40      	ldr	r2, [pc, #256]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d00f      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3c      	ldr	r2, [pc, #240]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d027      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d023      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a28      	ldr	r2, [pc, #160]	; (8004004 <TIM_Base_SetConfig+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a27      	ldr	r2, [pc, #156]	; (8004008 <TIM_Base_SetConfig+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a26      	ldr	r2, [pc, #152]	; (800400c <TIM_Base_SetConfig+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <TIM_Base_SetConfig+0x134>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a24      	ldr	r2, [pc, #144]	; (8004014 <TIM_Base_SetConfig+0x138>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xf8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40001800 	.word	0x40001800
 8004014:	40001c00 	.word	0x40001c00
 8004018:	40002000 	.word	0x40002000

0800401c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e05a      	b.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d022      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d01d      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d018      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1b      	ldr	r2, [pc, #108]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00e      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a17      	ldr	r2, [pc, #92]	; (800410c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10c      	bne.n	80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800
 8004104:	40000c00 	.word	0x40000c00
 8004108:	40010400 	.word	0x40010400
 800410c:	40014000 	.word	0x40014000
 8004110:	40001800 	.word	0x40001800

08004114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e03f      	b.n	80041ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fa84 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800417e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fc19 	bl	80049b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b088      	sub	sp, #32
 80041da:	af02      	add	r7, sp, #8
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	f040 8083 	bne.w	80042fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_UART_Transmit+0x2e>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e07b      	b.n	8004300 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_UART_Transmit+0x40>
 8004212:	2302      	movs	r3, #2
 8004214:	e074      	b.n	8004300 <HAL_UART_Transmit+0x12a>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2221      	movs	r2, #33	; 0x21
 8004228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800422c:	f7fd fbca 	bl	80019c4 <HAL_GetTick>
 8004230:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	88fa      	ldrh	r2, [r7, #6]
 800423c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004246:	e042      	b.n	80042ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d122      	bne.n	80042a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2200      	movs	r2, #0
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fa38 	bl	80046e0 <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e042      	b.n	8004300 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3302      	adds	r3, #2
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	e017      	b.n	80042ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	3301      	adds	r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	e013      	b.n	80042ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fa15 	bl	80046e0 <UART_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e01f      	b.n	8004300 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	60ba      	str	r2, [r7, #8]
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1b7      	bne.n	8004248 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f9fc 	bl	80046e0 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e006      	b.n	8004300 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	d140      	bne.n	80043a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_UART_Receive_IT+0x26>
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e039      	b.n	80043a6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UART_Receive_IT+0x38>
 800433c:	2302      	movs	r3, #2
 800433e:	e032      	b.n	80043a6 <HAL_UART_Receive_IT+0x9e>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2222      	movs	r2, #34	; 0x22
 8004364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0220 	orr.w	r2, r2, #32
 800439e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80043c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d124      	bne.n	8004432 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d018      	beq.n	8004432 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	2200      	movs	r2, #0
 8004406:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd fcc7 	bl	8001da0 <HAL_DMA_Abort>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00c      	beq.n	8004432 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd fedb 	bl	80021d8 <HAL_DMA_GetError>
 8004422:	4603      	mov	r3, r0
 8004424:	2b20      	cmp	r3, #32
 8004426:	d104      	bne.n	8004432 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2210      	movs	r2, #16
 800442c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e03d      	b.n	80044ae <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d124      	bne.n	800448a <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d018      	beq.n	800448a <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	2200      	movs	r2, #0
 800445e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	4618      	mov	r0, r3
 8004466:	f7fd fc9b 	bl	8001da0 <HAL_DMA_Abort>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00c      	beq.n	800448a <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	4618      	mov	r0, r3
 8004476:	f7fd feaf 	bl	80021d8 <HAL_DMA_GetError>
 800447a:	4603      	mov	r3, r0
 800447c:	2b20      	cmp	r3, #32
 800447e:	d104      	bne.n	800448a <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2210      	movs	r2, #16
 8004484:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e011      	b.n	80044ae <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_UART_IRQHandler+0x52>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9d6 	bl	80048b4 <UART_Receive_IT>
      return;
 8004508:	e0d1      	b.n	80046ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80b0 	beq.w	8004672 <HAL_UART_IRQHandler+0x1ba>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <HAL_UART_IRQHandler+0x70>
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80a5 	beq.w	8004672 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_UART_IRQHandler+0x90>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_UART_IRQHandler+0xb0>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	f043 0202 	orr.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_UART_IRQHandler+0xd0>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	f043 0204 	orr.w	r2, r3, #4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00f      	beq.n	80045b2 <HAL_UART_IRQHandler+0xfa>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_UART_IRQHandler+0xee>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	f043 0208 	orr.w	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d078      	beq.n	80046ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_UART_IRQHandler+0x11c>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f970 	bl	80048b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <HAL_UART_IRQHandler+0x144>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d031      	beq.n	8004660 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8b9 	bl	8004774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d123      	bne.n	8004658 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <HAL_UART_IRQHandler+0x1fc>)
 800462e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd fc23 	bl	8001e80 <HAL_DMA_Abort_IT>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d016      	beq.n	800466e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800464a:	4610      	mov	r0, r2
 800464c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464e:	e00e      	b.n	800466e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f83b 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004656:	e00a      	b.n	800466e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f837 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465e:	e006      	b.n	800466e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f833 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800466c:	e01e      	b.n	80046ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466e:	bf00      	nop
    return;
 8004670:	e01c      	b.n	80046ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_UART_IRQHandler+0x1d6>
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f8a6 	bl	80047d8 <UART_Transmit_IT>
    return;
 800468c:	e00f      	b.n	80046ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_UART_IRQHandler+0x1f6>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8ee 	bl	8004884 <UART_EndTransmit_IT>
    return;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80046ac:	bf00      	nop
  }
}
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	080047b1 	.word	0x080047b1

080046b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f0:	e02c      	b.n	800474c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f8:	d028      	beq.n	800474c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0x30>
 8004700:	f7fd f960 	bl	80019c4 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	429a      	cmp	r2, r3
 800470e:	d21d      	bcs.n	800474c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800471e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e00f      	b.n	800476c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	429a      	cmp	r2, r3
 8004768:	d0c3      	beq.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800478a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff7e 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b21      	cmp	r3, #33	; 0x21
 80047ea:	d144      	bne.n	8004876 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d11a      	bne.n	800482c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800480a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]
 800481e:	e00e      	b.n	800483e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]
 800482a:	e008      	b.n	800483e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6211      	str	r1, [r2, #32]
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29b      	uxth	r3, r3
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	4619      	mov	r1, r3
 800484c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004860:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004870:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff07 	bl	80046b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b22      	cmp	r3, #34	; 0x22
 80048c6:	d171      	bne.n	80049ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d0:	d123      	bne.n	800491a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10e      	bne.n	80048fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
 80048fc:	e029      	b.n	8004952 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	b29b      	uxth	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e01b      	b.n	8004952 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6858      	ldr	r0, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	1c59      	adds	r1, r3, #1
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6291      	str	r1, [r2, #40]	; 0x28
 8004932:	b2c2      	uxtb	r2, r0
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e00c      	b.n	8004952 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	1c58      	adds	r0, r3, #1
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	6288      	str	r0, [r1, #40]	; 0x28
 800494a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4619      	mov	r1, r3
 8004960:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004962:	2b00      	cmp	r3, #0
 8004964:	d120      	bne.n	80049a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0220 	bic.w	r2, r2, #32
 8004974:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fc fc6c 	bl	800127c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e002      	b.n	80049ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049fa:	f023 030c 	bic.w	r3, r3, #12
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a26:	f040 818b 	bne.w	8004d40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4ac1      	ldr	r2, [pc, #772]	; (8004d34 <UART_SetConfig+0x37c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d005      	beq.n	8004a40 <UART_SetConfig+0x88>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4abf      	ldr	r2, [pc, #764]	; (8004d38 <UART_SetConfig+0x380>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f040 80bd 	bne.w	8004bba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fd ff6a 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 8004a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	461d      	mov	r5, r3
 8004a4a:	f04f 0600 	mov.w	r6, #0
 8004a4e:	46a8      	mov	r8, r5
 8004a50:	46b1      	mov	r9, r6
 8004a52:	eb18 0308 	adds.w	r3, r8, r8
 8004a56:	eb49 0409 	adc.w	r4, r9, r9
 8004a5a:	4698      	mov	r8, r3
 8004a5c:	46a1      	mov	r9, r4
 8004a5e:	eb18 0805 	adds.w	r8, r8, r5
 8004a62:	eb49 0906 	adc.w	r9, r9, r6
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a7a:	4688      	mov	r8, r1
 8004a7c:	4691      	mov	r9, r2
 8004a7e:	eb18 0005 	adds.w	r0, r8, r5
 8004a82:	eb49 0106 	adc.w	r1, r9, r6
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	f04f 0600 	mov.w	r6, #0
 8004a90:	196b      	adds	r3, r5, r5
 8004a92:	eb46 0406 	adc.w	r4, r6, r6
 8004a96:	461a      	mov	r2, r3
 8004a98:	4623      	mov	r3, r4
 8004a9a:	f7fb fbb3 	bl	8000204 <__aeabi_uldivmod>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4ba5      	ldr	r3, [pc, #660]	; (8004d3c <UART_SetConfig+0x384>)
 8004aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	461d      	mov	r5, r3
 8004ab4:	f04f 0600 	mov.w	r6, #0
 8004ab8:	46a9      	mov	r9, r5
 8004aba:	46b2      	mov	sl, r6
 8004abc:	eb19 0309 	adds.w	r3, r9, r9
 8004ac0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ac4:	4699      	mov	r9, r3
 8004ac6:	46a2      	mov	sl, r4
 8004ac8:	eb19 0905 	adds.w	r9, r9, r5
 8004acc:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ad0:	f04f 0100 	mov.w	r1, #0
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004adc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ae4:	4689      	mov	r9, r1
 8004ae6:	4692      	mov	sl, r2
 8004ae8:	eb19 0005 	adds.w	r0, r9, r5
 8004aec:	eb4a 0106 	adc.w	r1, sl, r6
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	461d      	mov	r5, r3
 8004af6:	f04f 0600 	mov.w	r6, #0
 8004afa:	196b      	adds	r3, r5, r5
 8004afc:	eb46 0406 	adc.w	r4, r6, r6
 8004b00:	461a      	mov	r2, r3
 8004b02:	4623      	mov	r3, r4
 8004b04:	f7fb fb7e 	bl	8000204 <__aeabi_uldivmod>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4b8b      	ldr	r3, [pc, #556]	; (8004d3c <UART_SetConfig+0x384>)
 8004b10:	fba3 1302 	umull	r1, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	2164      	movs	r1, #100	; 0x64
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	3332      	adds	r3, #50	; 0x32
 8004b22:	4a86      	ldr	r2, [pc, #536]	; (8004d3c <UART_SetConfig+0x384>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b30:	4498      	add	r8, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	461d      	mov	r5, r3
 8004b36:	f04f 0600 	mov.w	r6, #0
 8004b3a:	46a9      	mov	r9, r5
 8004b3c:	46b2      	mov	sl, r6
 8004b3e:	eb19 0309 	adds.w	r3, r9, r9
 8004b42:	eb4a 040a 	adc.w	r4, sl, sl
 8004b46:	4699      	mov	r9, r3
 8004b48:	46a2      	mov	sl, r4
 8004b4a:	eb19 0905 	adds.w	r9, r9, r5
 8004b4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b66:	4689      	mov	r9, r1
 8004b68:	4692      	mov	sl, r2
 8004b6a:	eb19 0005 	adds.w	r0, r9, r5
 8004b6e:	eb4a 0106 	adc.w	r1, sl, r6
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	461d      	mov	r5, r3
 8004b78:	f04f 0600 	mov.w	r6, #0
 8004b7c:	196b      	adds	r3, r5, r5
 8004b7e:	eb46 0406 	adc.w	r4, r6, r6
 8004b82:	461a      	mov	r2, r3
 8004b84:	4623      	mov	r3, r4
 8004b86:	f7fb fb3d 	bl	8000204 <__aeabi_uldivmod>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <UART_SetConfig+0x384>)
 8004b92:	fba3 1302 	umull	r1, r3, r3, r2
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	2164      	movs	r1, #100	; 0x64
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	3332      	adds	r3, #50	; 0x32
 8004ba4:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <UART_SetConfig+0x384>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	f003 0207 	and.w	r2, r3, #7
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4442      	add	r2, r8
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	e26f      	b.n	800509a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bba:	f7fd fe99 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8004bbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	f04f 0600 	mov.w	r6, #0
 8004bc8:	46a8      	mov	r8, r5
 8004bca:	46b1      	mov	r9, r6
 8004bcc:	eb18 0308 	adds.w	r3, r8, r8
 8004bd0:	eb49 0409 	adc.w	r4, r9, r9
 8004bd4:	4698      	mov	r8, r3
 8004bd6:	46a1      	mov	r9, r4
 8004bd8:	eb18 0805 	adds.w	r8, r8, r5
 8004bdc:	eb49 0906 	adc.w	r9, r9, r6
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bf4:	4688      	mov	r8, r1
 8004bf6:	4691      	mov	r9, r2
 8004bf8:	eb18 0005 	adds.w	r0, r8, r5
 8004bfc:	eb49 0106 	adc.w	r1, r9, r6
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	461d      	mov	r5, r3
 8004c06:	f04f 0600 	mov.w	r6, #0
 8004c0a:	196b      	adds	r3, r5, r5
 8004c0c:	eb46 0406 	adc.w	r4, r6, r6
 8004c10:	461a      	mov	r2, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	f7fb faf6 	bl	8000204 <__aeabi_uldivmod>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <UART_SetConfig+0x384>)
 8004c20:	fba3 2302 	umull	r2, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	f04f 0600 	mov.w	r6, #0
 8004c32:	46a9      	mov	r9, r5
 8004c34:	46b2      	mov	sl, r6
 8004c36:	eb19 0309 	adds.w	r3, r9, r9
 8004c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c3e:	4699      	mov	r9, r3
 8004c40:	46a2      	mov	sl, r4
 8004c42:	eb19 0905 	adds.w	r9, r9, r5
 8004c46:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c5e:	4689      	mov	r9, r1
 8004c60:	4692      	mov	sl, r2
 8004c62:	eb19 0005 	adds.w	r0, r9, r5
 8004c66:	eb4a 0106 	adc.w	r1, sl, r6
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	461d      	mov	r5, r3
 8004c70:	f04f 0600 	mov.w	r6, #0
 8004c74:	196b      	adds	r3, r5, r5
 8004c76:	eb46 0406 	adc.w	r4, r6, r6
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	f7fb fac1 	bl	8000204 <__aeabi_uldivmod>
 8004c82:	4603      	mov	r3, r0
 8004c84:	460c      	mov	r4, r1
 8004c86:	461a      	mov	r2, r3
 8004c88:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <UART_SetConfig+0x384>)
 8004c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2164      	movs	r1, #100	; 0x64
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	3332      	adds	r3, #50	; 0x32
 8004c9c:	4a27      	ldr	r2, [pc, #156]	; (8004d3c <UART_SetConfig+0x384>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004caa:	4498      	add	r8, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	461d      	mov	r5, r3
 8004cb0:	f04f 0600 	mov.w	r6, #0
 8004cb4:	46a9      	mov	r9, r5
 8004cb6:	46b2      	mov	sl, r6
 8004cb8:	eb19 0309 	adds.w	r3, r9, r9
 8004cbc:	eb4a 040a 	adc.w	r4, sl, sl
 8004cc0:	4699      	mov	r9, r3
 8004cc2:	46a2      	mov	sl, r4
 8004cc4:	eb19 0905 	adds.w	r9, r9, r5
 8004cc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ccc:	f04f 0100 	mov.w	r1, #0
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ce0:	4689      	mov	r9, r1
 8004ce2:	4692      	mov	sl, r2
 8004ce4:	eb19 0005 	adds.w	r0, r9, r5
 8004ce8:	eb4a 0106 	adc.w	r1, sl, r6
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	f04f 0600 	mov.w	r6, #0
 8004cf6:	196b      	adds	r3, r5, r5
 8004cf8:	eb46 0406 	adc.w	r4, r6, r6
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4623      	mov	r3, r4
 8004d00:	f7fb fa80 	bl	8000204 <__aeabi_uldivmod>
 8004d04:	4603      	mov	r3, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <UART_SetConfig+0x384>)
 8004d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	2164      	movs	r1, #100	; 0x64
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	3332      	adds	r3, #50	; 0x32
 8004d1e:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <UART_SetConfig+0x384>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	f003 0207 	and.w	r2, r3, #7
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4442      	add	r2, r8
 8004d30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004d32:	e1b2      	b.n	800509a <UART_SetConfig+0x6e2>
 8004d34:	40011000 	.word	0x40011000
 8004d38:	40011400 	.word	0x40011400
 8004d3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4ad7      	ldr	r2, [pc, #860]	; (80050a4 <UART_SetConfig+0x6ec>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d005      	beq.n	8004d56 <UART_SetConfig+0x39e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4ad6      	ldr	r2, [pc, #856]	; (80050a8 <UART_SetConfig+0x6f0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	f040 80d1 	bne.w	8004ef8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d56:	f7fd fddf 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 8004d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	469a      	mov	sl, r3
 8004d60:	f04f 0b00 	mov.w	fp, #0
 8004d64:	46d0      	mov	r8, sl
 8004d66:	46d9      	mov	r9, fp
 8004d68:	eb18 0308 	adds.w	r3, r8, r8
 8004d6c:	eb49 0409 	adc.w	r4, r9, r9
 8004d70:	4698      	mov	r8, r3
 8004d72:	46a1      	mov	r9, r4
 8004d74:	eb18 080a 	adds.w	r8, r8, sl
 8004d78:	eb49 090b 	adc.w	r9, r9, fp
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d90:	4688      	mov	r8, r1
 8004d92:	4691      	mov	r9, r2
 8004d94:	eb1a 0508 	adds.w	r5, sl, r8
 8004d98:	eb4b 0609 	adc.w	r6, fp, r9
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	f04f 0400 	mov.w	r4, #0
 8004dae:	0094      	lsls	r4, r2, #2
 8004db0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004db4:	008b      	lsls	r3, r1, #2
 8004db6:	461a      	mov	r2, r3
 8004db8:	4623      	mov	r3, r4
 8004dba:	4628      	mov	r0, r5
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	f7fb fa21 	bl	8000204 <__aeabi_uldivmod>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4bb8      	ldr	r3, [pc, #736]	; (80050ac <UART_SetConfig+0x6f4>)
 8004dca:	fba3 2302 	umull	r2, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	469b      	mov	fp, r3
 8004dd8:	f04f 0c00 	mov.w	ip, #0
 8004ddc:	46d9      	mov	r9, fp
 8004dde:	46e2      	mov	sl, ip
 8004de0:	eb19 0309 	adds.w	r3, r9, r9
 8004de4:	eb4a 040a 	adc.w	r4, sl, sl
 8004de8:	4699      	mov	r9, r3
 8004dea:	46a2      	mov	sl, r4
 8004dec:	eb19 090b 	adds.w	r9, r9, fp
 8004df0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e08:	4689      	mov	r9, r1
 8004e0a:	4692      	mov	sl, r2
 8004e0c:	eb1b 0509 	adds.w	r5, fp, r9
 8004e10:	eb4c 060a 	adc.w	r6, ip, sl
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	f04f 0400 	mov.w	r4, #0
 8004e26:	0094      	lsls	r4, r2, #2
 8004e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e2c:	008b      	lsls	r3, r1, #2
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4623      	mov	r3, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	4631      	mov	r1, r6
 8004e36:	f7fb f9e5 	bl	8000204 <__aeabi_uldivmod>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b9a      	ldr	r3, [pc, #616]	; (80050ac <UART_SetConfig+0x6f4>)
 8004e42:	fba3 1302 	umull	r1, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2164      	movs	r1, #100	; 0x64
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	3332      	adds	r3, #50	; 0x32
 8004e54:	4a95      	ldr	r2, [pc, #596]	; (80050ac <UART_SetConfig+0x6f4>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e60:	4498      	add	r8, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	469b      	mov	fp, r3
 8004e66:	f04f 0c00 	mov.w	ip, #0
 8004e6a:	46d9      	mov	r9, fp
 8004e6c:	46e2      	mov	sl, ip
 8004e6e:	eb19 0309 	adds.w	r3, r9, r9
 8004e72:	eb4a 040a 	adc.w	r4, sl, sl
 8004e76:	4699      	mov	r9, r3
 8004e78:	46a2      	mov	sl, r4
 8004e7a:	eb19 090b 	adds.w	r9, r9, fp
 8004e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e82:	f04f 0100 	mov.w	r1, #0
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e96:	4689      	mov	r9, r1
 8004e98:	4692      	mov	sl, r2
 8004e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8004e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	0094      	lsls	r4, r2, #2
 8004eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eba:	008b      	lsls	r3, r1, #2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	f7fb f99e 	bl	8000204 <__aeabi_uldivmod>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4b77      	ldr	r3, [pc, #476]	; (80050ac <UART_SetConfig+0x6f4>)
 8004ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	2164      	movs	r1, #100	; 0x64
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	3332      	adds	r3, #50	; 0x32
 8004ee2:	4a72      	ldr	r2, [pc, #456]	; (80050ac <UART_SetConfig+0x6f4>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	f003 020f 	and.w	r2, r3, #15
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4442      	add	r2, r8
 8004ef4:	609a      	str	r2, [r3, #8]
 8004ef6:	e0d0      	b.n	800509a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fd fcfa 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8004efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	469a      	mov	sl, r3
 8004f02:	f04f 0b00 	mov.w	fp, #0
 8004f06:	46d0      	mov	r8, sl
 8004f08:	46d9      	mov	r9, fp
 8004f0a:	eb18 0308 	adds.w	r3, r8, r8
 8004f0e:	eb49 0409 	adc.w	r4, r9, r9
 8004f12:	4698      	mov	r8, r3
 8004f14:	46a1      	mov	r9, r4
 8004f16:	eb18 080a 	adds.w	r8, r8, sl
 8004f1a:	eb49 090b 	adc.w	r9, r9, fp
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f32:	4688      	mov	r8, r1
 8004f34:	4691      	mov	r9, r2
 8004f36:	eb1a 0508 	adds.w	r5, sl, r8
 8004f3a:	eb4b 0609 	adc.w	r6, fp, r9
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4619      	mov	r1, r3
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	0094      	lsls	r4, r2, #2
 8004f52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f56:	008b      	lsls	r3, r1, #2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	4631      	mov	r1, r6
 8004f60:	f7fb f950 	bl	8000204 <__aeabi_uldivmod>
 8004f64:	4603      	mov	r3, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b50      	ldr	r3, [pc, #320]	; (80050ac <UART_SetConfig+0x6f4>)
 8004f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	469b      	mov	fp, r3
 8004f7a:	f04f 0c00 	mov.w	ip, #0
 8004f7e:	46d9      	mov	r9, fp
 8004f80:	46e2      	mov	sl, ip
 8004f82:	eb19 0309 	adds.w	r3, r9, r9
 8004f86:	eb4a 040a 	adc.w	r4, sl, sl
 8004f8a:	4699      	mov	r9, r3
 8004f8c:	46a2      	mov	sl, r4
 8004f8e:	eb19 090b 	adds.w	r9, r9, fp
 8004f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f96:	f04f 0100 	mov.w	r1, #0
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004faa:	4689      	mov	r9, r1
 8004fac:	4692      	mov	sl, r2
 8004fae:	eb1b 0509 	adds.w	r5, fp, r9
 8004fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	0094      	lsls	r4, r2, #2
 8004fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fce:	008b      	lsls	r3, r1, #2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	f7fb f914 	bl	8000204 <__aeabi_uldivmod>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4b32      	ldr	r3, [pc, #200]	; (80050ac <UART_SetConfig+0x6f4>)
 8004fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	2164      	movs	r1, #100	; 0x64
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	3332      	adds	r3, #50	; 0x32
 8004ff6:	4a2d      	ldr	r2, [pc, #180]	; (80050ac <UART_SetConfig+0x6f4>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005002:	4498      	add	r8, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	469b      	mov	fp, r3
 8005008:	f04f 0c00 	mov.w	ip, #0
 800500c:	46d9      	mov	r9, fp
 800500e:	46e2      	mov	sl, ip
 8005010:	eb19 0309 	adds.w	r3, r9, r9
 8005014:	eb4a 040a 	adc.w	r4, sl, sl
 8005018:	4699      	mov	r9, r3
 800501a:	46a2      	mov	sl, r4
 800501c:	eb19 090b 	adds.w	r9, r9, fp
 8005020:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005024:	f04f 0100 	mov.w	r1, #0
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005030:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005034:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005038:	4689      	mov	r9, r1
 800503a:	4692      	mov	sl, r2
 800503c:	eb1b 0509 	adds.w	r5, fp, r9
 8005040:	eb4c 060a 	adc.w	r6, ip, sl
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4619      	mov	r1, r3
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	f04f 0400 	mov.w	r4, #0
 8005056:	0094      	lsls	r4, r2, #2
 8005058:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800505c:	008b      	lsls	r3, r1, #2
 800505e:	461a      	mov	r2, r3
 8005060:	4623      	mov	r3, r4
 8005062:	4628      	mov	r0, r5
 8005064:	4631      	mov	r1, r6
 8005066:	f7fb f8cd 	bl	8000204 <__aeabi_uldivmod>
 800506a:	4603      	mov	r3, r0
 800506c:	460c      	mov	r4, r1
 800506e:	461a      	mov	r2, r3
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <UART_SetConfig+0x6f4>)
 8005072:	fba3 1302 	umull	r1, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2164      	movs	r1, #100	; 0x64
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	3332      	adds	r3, #50	; 0x32
 8005084:	4a09      	ldr	r2, [pc, #36]	; (80050ac <UART_SetConfig+0x6f4>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4442      	add	r2, r8
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	e7ff      	b.n	800509a <UART_SetConfig+0x6e2>
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a4:	40011000 	.word	0x40011000
 80050a8:	40011400 	.word	0x40011400
 80050ac:	51eb851f 	.word	0x51eb851f

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4e0d      	ldr	r6, [pc, #52]	; (80050e8 <__libc_init_array+0x38>)
 80050b4:	4c0d      	ldr	r4, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b6:	1ba4      	subs	r4, r4, r6
 80050b8:	10a4      	asrs	r4, r4, #2
 80050ba:	2500      	movs	r5, #0
 80050bc:	42a5      	cmp	r5, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	4e0b      	ldr	r6, [pc, #44]	; (80050f0 <__libc_init_array+0x40>)
 80050c2:	4c0c      	ldr	r4, [pc, #48]	; (80050f4 <__libc_init_array+0x44>)
 80050c4:	f000 f820 	bl	8005108 <_init>
 80050c8:	1ba4      	subs	r4, r4, r6
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	2500      	movs	r5, #0
 80050ce:	42a5      	cmp	r5, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050d8:	4798      	blx	r3
 80050da:	3501      	adds	r5, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050e2:	4798      	blx	r3
 80050e4:	3501      	adds	r5, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	0800545c 	.word	0x0800545c
 80050ec:	0800545c 	.word	0x0800545c
 80050f0:	0800545c 	.word	0x0800545c
 80050f4:	08005460 	.word	0x08005460

080050f8 <memset>:
 80050f8:	4402      	add	r2, r0
 80050fa:	4603      	mov	r3, r0
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d100      	bne.n	8005102 <memset+0xa>
 8005100:	4770      	bx	lr
 8005102:	f803 1b01 	strb.w	r1, [r3], #1
 8005106:	e7f9      	b.n	80050fc <memset+0x4>

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
