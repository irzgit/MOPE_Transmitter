
Stm32f446-Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005018  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005510  08005510  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005518  08005518  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  0800552c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800552c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000226c  00000000  00000000  00031111  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00033380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00034308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227d9  00000000  00000000  00035188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b59d  00000000  00000000  00057961  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d18c5  00000000  00000000  00062efe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001347c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004104  00000000  00000000  00134840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080051c4 	.word	0x080051c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080051c4 	.word	0x080051c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f000 ffec 	bl	80014e8 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f000 ffe4 	bl	80014e8 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f000 ffdc 	bl	80014e8 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f000 ffd4 	bl	80014e8 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 f818 	bl	8001594 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	080051dc 	.word	0x080051dc

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
	SPIWrite(LR_RegPaConfig,0x0F); //14 Дб
 800057a:	210f      	movs	r1, #15
 800057c:	2009      	movs	r0, #9
 800057e:	f000 ffb3 	bl	80014e8 <SPIWrite>
	//SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84
	SPIWrite(0x5A,0x84); // обычный режим( без макс усиления: до 14 Дб)
 8000582:	2184      	movs	r1, #132	; 0x84
 8000584:	205a      	movs	r0, #90	; 0x5a
 8000586:	f000 ffaf 	bl	80014e8 <SPIWrite>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <Rf96_OCP+0x20>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	4619      	mov	r1, r3
 80005a6:	200b      	movs	r0, #11
 80005a8:	f000 ff9e 	bl	80014e8 <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	080051e8 	.word	0x080051e8

080005b8 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <Rf96_LNA+0x20>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	200c      	movs	r0, #12
 80005cc:	f000 ff8c 	bl	80014e8 <SPIWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	080051ec 	.word	0x080051ec

080005dc <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
	SPIWrite(LR_RegModemConfig1,0x25); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005ee:	2125      	movs	r1, #37	; 0x25
 80005f0:	201d      	movs	r0, #29
 80005f2:	f000 ff79 	bl	80014e8 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // с CRC
	//SPIWrite(LR_RegDetectOptimize,0xC5); // Только для sf=6
	//SPIWrite(LR_RegDetecionThreshold,0x0C); // Только для sf=6
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	460b      	mov	r3, r1
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	4613      	mov	r3, r2
 800060e:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xB4);  // SF=11
 8000610:	21b4      	movs	r1, #180	; 0xb4
 8000612:	201e      	movs	r0, #30
 8000614:	f000 ff68 	bl	80014e8 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	201f      	movs	r0, #31
 8000620:	f000 ff62 	bl	80014e8 <SPIWrite>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	2020      	movs	r0, #32
 8000642:	f000 ff51 	bl	80014e8 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	2021      	movs	r0, #33	; 0x21
 800064e:	f000 ff4b 	bl	80014e8 <SPIWrite>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4604      	mov	r4, r0
 8000662:	4608      	mov	r0, r1
 8000664:	4611      	mov	r1, r2
 8000666:	461a      	mov	r2, r3
 8000668:	4623      	mov	r3, r4
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4603      	mov	r3, r0
 800066e:	71bb      	strb	r3, [r7, #6]
 8000670:	460b      	mov	r3, r1
 8000672:	717b      	strb	r3, [r7, #5]
 8000674:	4613      	mov	r3, r2
 8000676:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	b2da      	uxtb	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4413      	add	r3, r2
 8000686:	b2da      	uxtb	r2, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	2040      	movs	r0, #64	; 0x40
 800069c:	f000 ff24 	bl	80014e8 <SPIWrite>
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd90      	pop	{r4, r7, pc}

080006a8 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006ac:	21f7      	movs	r1, #247	; 0xf7
 80006ae:	2011      	movs	r0, #17
 80006b0:	f000 ff1a 	bl	80014e8 <SPIWrite>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F); // Без CRC
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	2011      	movs	r0, #17
 80006c0:	f000 ff12 	bl	80014e8 <SPIWrite>
	//SPIWrite(LR_RegIrqFlagsMask,0x1F); //с CRC
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2022      	movs	r0, #34	; 0x22
 80006d8:	f000 ff06 	bl	80014e8 <SPIWrite>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	200e      	movs	r0, #14
 80006f4:	f000 fef8 	bl	80014e8 <SPIWrite>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	200f      	movs	r0, #15
 8000710:	f000 feea 	bl	80014e8 <SPIWrite>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4619      	mov	r1, r3
 800072a:	200d      	movs	r0, #13
 800072c:	f000 fedc 	bl	80014e8 <SPIWrite>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 800073c:	2185      	movs	r1, #133	; 0x85
 800073e:	2001      	movs	r0, #1
 8000740:	f000 fed2 	bl	80014e8 <SPIWrite>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	2001      	movs	r0, #1
 8000750:	f000 feca 	bl	80014e8 <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	461a      	mov	r2, r3
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	2000      	movs	r0, #0
 800076c:	f000 ff12 	bl	8001594 <BurstWrite>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000780:	2010      	movs	r0, #16
 8000782:	f000 fe93 	bl	80014ac <SPIRead>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4619      	mov	r1, r3
 800078e:	200d      	movs	r0, #13
 8000790:	f000 feaa 	bl	80014e8 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 8000794:	2013      	movs	r0, #19
 8000796:	f000 fe89 	bl	80014ac <SPIRead>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	461a      	mov	r2, r3
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 fec3 	bl	8001530 <SPIBurstRead>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007b6:	f7ff feb5 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007ba:	f7ff febb 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fec0 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed3 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fee2 	bl	8000594 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fef1 	bl	80005b8 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff fefe 	bl	80005dc <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x0FF);
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	2101      	movs	r1, #1
 80007e4:	2006      	movs	r0, #6
 80007e6:	f7ff ff0a 	bl	80005fe <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007ea:	2008      	movs	r0, #8
 80007ec:	f7ff ff1e 	bl	800062c <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007f0:	210a      	movs	r1, #10
 80007f2:	2037      	movs	r0, #55	; 0x37
 80007f4:	f000 fe78 	bl	80014e8 <SPIWrite>
	SPIWrite(0x31,0xA3);
 80007f8:	21a3      	movs	r1, #163	; 0xa3
 80007fa:	2031      	movs	r0, #49	; 0x31
 80007fc:	f000 fe74 	bl	80014e8 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 8000800:	f7ff fe88 	bl	8000514 <Rf96_Standby>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800080c:	2302      	movs	r3, #2
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff21 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000818:	f7ff fe74 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800081c:	f7ff ff44 	bl	80006a8 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000820:	202a      	movs	r0, #42	; 0x2a
 8000822:	f7ff ff51 	bl	80006c8 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	f7ff ff5c 	bl	80006e4 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800082c:	2080      	movs	r0, #128	; 0x80
 800082e:	f7ff ff75 	bl	800071c <Rf96_FIFO_point>

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}

08000836 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800083a:	2100      	movs	r1, #0
 800083c:	2024      	movs	r0, #36	; 0x24
 800083e:	f000 fe53 	bl	80014e8 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000842:	2302      	movs	r3, #2
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff06 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 800084e:	f7ff ff33 	bl	80006b8 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000852:	f7ff fe57 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000856:	202a      	movs	r0, #42	; 0x2a
 8000858:	f7ff ff36 	bl	80006c8 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ff4f 	bl	8000700 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff5a 	bl	800071c <Rf96_FIFO_point>
	  // Входим в RX single мод
	  //Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 8000868:	f7ff ff66 	bl	8000738 <Rf96_RX_Continuous_mode>

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff69 	bl	8000758 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000886:	f7ff ff5f 	bl	8000748 <Rf96_TX_mode>

	// Ждем пока появится прерывание

	while(1)
	{
		if(Get_NIRQ_Di0())
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <Rf96_LoRaTxPacket+0x3c>)
 8000890:	f001 ff4e 	bl	8002730 <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f7      	beq.n	800088a <Rf96_LoRaTxPacket+0x1a>
		{
			// Сбрасываем флаги
			Rf96_LoRaClearIrq();
 800089a:	f7ff fe33 	bl	8000504 <Rf96_LoRaClearIrq>
            // Заходим в Standby
			Rf96_Standby();
 800089e:	f7ff fe39 	bl	8000514 <Rf96_Standby>

			break;
 80008a2:	bf00      	nop
		}
	}


}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020000 	.word	0x40020000

080008b0 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c0:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008c2:	e012      	b.n	80008ea <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008c4:	89fb      	ldrh	r3, [r7, #14]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	89fb      	ldrh	r3, [r7, #14]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1c59      	adds	r1, r3, #1
 80008d6:	6079      	str	r1, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4043      	eors	r3, r0
 80008dc:	4909      	ldr	r1, [pc, #36]	; (8000904 <Crc16+0x54>)
 80008de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	4053      	eors	r3, r2
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	1e5a      	subs	r2, r3, #1
 80008ee:	807a      	strh	r2, [r7, #2]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e7      	bne.n	80008c4 <Crc16+0x14>

    return crc;
 80008f4:	89fb      	ldrh	r3, [r7, #14]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	080051f0 	.word	0x080051f0

08000908 <Crc8>:
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};
// Расчет CRC8
unsigned char Crc8(unsigned char *pcBlock, unsigned char len)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
    unsigned char crc = 0xFF;
 8000914:	23ff      	movs	r3, #255	; 0xff
 8000916:	73fb      	strb	r3, [r7, #15]

    while (len--)
 8000918:	e00a      	b.n	8000930 <Crc8+0x28>
        crc = Crc8Table[crc ^ *pcBlock++];
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	4053      	eors	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <Crc8+0x40>)
 800092c:	5c9b      	ldrb	r3, [r3, r2]
 800092e:	73fb      	strb	r3, [r7, #15]
    while (len--)
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	70fa      	strb	r2, [r7, #3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1ef      	bne.n	800091a <Crc8+0x12>

    return crc;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	080053f0 	.word	0x080053f0

0800094c <CommandToRadio>:
// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 8000956:	f7ff ff57 	bl	8000808 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	e006      	b.n	800096e <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <CommandToRadio+0x8c>)
 8000964:	2100      	movs	r1, #0
 8000966:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	3301      	adds	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b29      	cmp	r3, #41	; 0x29
 8000972:	d9f5      	bls.n	8000960 <CommandToRadio+0x14>
	}
	if(command==3)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d104      	bne.n	8000984 <CommandToRadio+0x38>
	{
		// Заносим задержку в секундах
		TX_RX_Radio[1]=BuffRx[43];
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <CommandToRadio+0x90>)
 800097c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <CommandToRadio+0x8c>)
 8000982:	705a      	strb	r2, [r3, #1]
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <CommandToRadio+0x8c>)
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 800098a:	2128      	movs	r1, #40	; 0x28
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <CommandToRadio+0x8c>)
 800098e:	f7ff ff8f 	bl	80008b0 <Crc16>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <CommandToRadio+0x94>)
 8000998:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <CommandToRadio+0x94>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <CommandToRadio+0x8c>)
 80009a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <CommandToRadio+0x94>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <CommandToRadio+0x8c>)
 80009b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 80009b6:	2080      	movs	r0, #128	; 0x80
 80009b8:	f7ff fe94 	bl	80006e4 <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	f7ff fead 	bl	800071c <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 80009c2:	f7ff fd9f 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 80009c6:	212a      	movs	r1, #42	; 0x2a
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <CommandToRadio+0x8c>)
 80009ca:	f7ff ff51 	bl	8000870 <Rf96_LoRaTxPacket>
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000a4 	.word	0x200000a4
 80009dc:	200001f8 	.word	0x200001f8
 80009e0:	2000002a 	.word	0x2000002a

080009e4 <Command_to_Linux>:
// Отправка команды на Linux
void Command_to_Linux(uint8_t cmd)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e006      	b.n	8000a02 <Command_to_Linux+0x1e>
		BuffTx[i]=0;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <Command_to_Linux+0x8c>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	3301      	adds	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b2c      	cmp	r3, #44	; 0x2c
 8000a06:	d9f5      	bls.n	80009f4 <Command_to_Linux+0x10>
	for(uint8_t i=0;i<MaxBuffOfCKT-6;i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	e00a      	b.n	8000a24 <Command_to_Linux+0x40>
		BuffTx[i+4]=TX_RX_Radio[i+1];
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	3304      	adds	r3, #4
 8000a16:	4917      	ldr	r1, [pc, #92]	; (8000a74 <Command_to_Linux+0x90>)
 8000a18:	5c89      	ldrb	r1, [r1, r2]
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a1c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT-6;i++)
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	3301      	adds	r3, #1
 8000a22:	73bb      	strb	r3, [r7, #14]
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	2b26      	cmp	r3, #38	; 0x26
 8000a28:	d9f1      	bls.n	8000a0e <Command_to_Linux+0x2a>
	BuffTx[0]=0x7C;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a2c:	227c      	movs	r2, #124	; 0x7c
 8000a2e:	701a      	strb	r2, [r3, #0]
	BuffTx[1]=0x6E;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a32:	226e      	movs	r2, #110	; 0x6e
 8000a34:	705a      	strb	r2, [r3, #1]
	BuffTx[2]=0xA1;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a38:	22a1      	movs	r2, #161	; 0xa1
 8000a3a:	709a      	strb	r2, [r3, #2]
	BuffTx[3]=0x2C;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a3e:	222c      	movs	r2, #44	; 0x2c
 8000a40:	70da      	strb	r2, [r3, #3]
	BuffTx[42]=cmd;
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	BuffTx[44]=Crc8(BuffTx,MaxBuffOfCKT-1);
 8000a4a:	212c      	movs	r1, #44	; 0x2c
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a4e:	f7ff ff5b 	bl	8000908 <Crc8>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, BuffTx, MaxBuffOfCKT,100);
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	222d      	movs	r2, #45	; 0x2d
 8000a60:	4903      	ldr	r1, [pc, #12]	; (8000a70 <Command_to_Linux+0x8c>)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <Command_to_Linux+0x94>)
 8000a64:	f003 fc15 	bl	8004292 <HAL_UART_Transmit>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000130 	.word	0x20000130
 8000a74:	200000a4 	.word	0x200000a4
 8000a78:	20000228 	.word	0x20000228

08000a7c <Command4_send>:
// Отправка 4 команды по радио
void Command4_send(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if(Com4Active==1) // Если разрешена 4 команда
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <Command4_send+0x4c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d119      	bne.n	8000abc <Command4_send+0x40>
	{
		// Посылка принята успешно, отправляем запрос на данные, если нет команд с Linux
		if(Readflag!=1)
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <Command4_send+0x50>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d011      	beq.n	8000ab4 <Command4_send+0x38>
		{
			LedMode=1; // Режим мигания - посылка передается
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <Command4_send+0x54>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
			CommandToRadio(4);
 8000a96:	2004      	movs	r0, #4
 8000a98:	f7ff ff58 	bl	800094c <CommandToRadio>
			// Ожидаем команду
			Rf96_Lora_RX_mode();
 8000a9c:	f7ff fecb 	bl	8000836 <Rf96_Lora_RX_mode>
			// Запуск таймера для отслеживания таймаута
			Delay_start=1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <Command4_send+0x58>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <Command4_send+0x5c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
			AccessRadio=1;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <Command4_send+0x60>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
		} else AccessRadio=0;
	} else   AccessRadio=0;
}
 8000ab2:	e006      	b.n	8000ac2 <Command4_send+0x46>
		} else AccessRadio=0;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <Command4_send+0x60>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	e002      	b.n	8000ac2 <Command4_send+0x46>
	} else   AccessRadio=0;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <Command4_send+0x60>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000041 	.word	0x20000041
 8000acc:	2000002e 	.word	0x2000002e
 8000ad0:	2000002f 	.word	0x2000002f
 8000ad4:	20000040 	.word	0x20000040
 8000ad8:	2000003c 	.word	0x2000003c
 8000adc:	20000038 	.word	0x20000038

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 ff66 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 fa56 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 fb7e 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 fb54 	bl	800119c <MX_DMA_Init>
  MX_SPI1_Init();
 8000af4:	f000 fabc 	bl	8001070 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000af8:	f000 faf0 	bl	80010dc <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000afc:	f000 fb24 	bl	8001148 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Индикация включения УСИ ПРД
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2102      	movs	r1, #2
 8000b04:	48c0      	ldr	r0, [pc, #768]	; (8000e08 <main+0x328>)
 8000b06:	f001 fe2b 	bl	8002760 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000b0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b0e:	f000 ffc3 	bl	8001a98 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2104      	movs	r1, #4
 8000b16:	48bc      	ldr	r0, [pc, #752]	; (8000e08 <main+0x328>)
 8000b18:	f001 fe22 	bl	8002760 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000b1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b20:	f000 ffba 	bl	8001a98 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2108      	movs	r1, #8
 8000b28:	48b7      	ldr	r0, [pc, #732]	; (8000e08 <main+0x328>)
 8000b2a:	f001 fe19 	bl	8002760 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000b2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b32:	f000 ffb1 	bl	8001a98 <HAL_Delay>

  // Инициализация lora sx1272
  Rf96_Lora_init();
 8000b36:	f7ff fe3c 	bl	80007b2 <Rf96_Lora_init>
  // Запуск приема команд с Linux
  HAL_UART_Receive_IT(&huart2, &data, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	49b3      	ldr	r1, [pc, #716]	; (8000e0c <main+0x32c>)
 8000b3e:	48b4      	ldr	r0, [pc, #720]	; (8000e10 <main+0x330>)
 8000b40:	f003 fc40 	bl	80043c4 <HAL_UART_Receive_IT>
  // Запуск таймера для работы светодиода
  HAL_TIM_Base_Start_IT(&htim6);
 8000b44:	48b3      	ldr	r0, [pc, #716]	; (8000e14 <main+0x334>)
 8000b46:	f003 f8d2 	bl	8003cee <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Фильтрация помех 1 разъема
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000b4a:	f000 ff99 	bl	8001a80 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	4bb1      	ldr	r3, [pc, #708]	; (8000e18 <main+0x338>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2bc8      	cmp	r3, #200	; 0xc8
 8000b58:	d911      	bls.n	8000b7e <main+0x9e>
 8000b5a:	4bb0      	ldr	r3, [pc, #704]	; (8000e1c <main+0x33c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00d      	beq.n	8000b7e <main+0x9e>
		{
			ReadRdy=0;
 8000b62:	4bae      	ldr	r3, [pc, #696]	; (8000e1c <main+0x33c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000b68:	48a9      	ldr	r0, [pc, #676]	; (8000e10 <main+0x330>)
 8000b6a:	f003 fc80 	bl	800446e <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	49a6      	ldr	r1, [pc, #664]	; (8000e0c <main+0x32c>)
 8000b72:	48a7      	ldr	r0, [pc, #668]	; (8000e10 <main+0x330>)
 8000b74:	f003 fc26 	bl	80043c4 <HAL_UART_Receive_IT>
			countRx=0;
 8000b78:	4ba9      	ldr	r3, [pc, #676]	; (8000e20 <main+0x340>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
		}
		// Пришла какая-то посылка по linux
		if(Readflag==1 && AccessRadio==0)
 8000b7e:	4ba9      	ldr	r3, [pc, #676]	; (8000e24 <main+0x344>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	f040 80ad 	bne.w	8000ce2 <main+0x202>
 8000b88:	4ba7      	ldr	r3, [pc, #668]	; (8000e28 <main+0x348>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 80a8 	bne.w	8000ce2 <main+0x202>
		{
			Readflag=0;
 8000b92:	4ba4      	ldr	r3, [pc, #656]	; (8000e24 <main+0x344>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	489a      	ldr	r0, [pc, #616]	; (8000e08 <main+0x328>)
 8000b9e:	f001 fddf 	bl	8002760 <HAL_GPIO_WritePin>

			CRC_8c=BuffRx[MaxBuffOfCKT-1];
 8000ba2:	4ba2      	ldr	r3, [pc, #648]	; (8000e2c <main+0x34c>)
 8000ba4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000ba8:	4ba1      	ldr	r3, [pc, #644]	; (8000e30 <main+0x350>)
 8000baa:	701a      	strb	r2, [r3, #0]
			if(CRC_8c==Crc8(BuffRx,MaxBuffOfCKT-1)) // если CRC совпало
 8000bac:	212c      	movs	r1, #44	; 0x2c
 8000bae:	489f      	ldr	r0, [pc, #636]	; (8000e2c <main+0x34c>)
 8000bb0:	f7ff feaa 	bl	8000908 <Crc8>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b9d      	ldr	r3, [pc, #628]	; (8000e30 <main+0x350>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d170      	bne.n	8000ca2 <main+0x1c2>
			{
				switch(BuffRx[CommIndexLinux])
 8000bc0:	4b9a      	ldr	r3, [pc, #616]	; (8000e2c <main+0x34c>)
 8000bc2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d87f      	bhi.n	8000ccc <main+0x1ec>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <main+0xf4>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000c11 	.word	0x08000c11
 8000bdc:	08000c35 	.word	0x08000c35
 8000be0:	08000ccd 	.word	0x08000ccd
 8000be4:	08000c59 	.word	0x08000c59
 8000be8:	08000c7d 	.word	0x08000c7d
				{
					case 1:
					LedMode=1; // Режим мигания - посылка передается
 8000bec:	4b91      	ldr	r3, [pc, #580]	; (8000e34 <main+0x354>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
					CommandToRadio(1);  // Команда начала записи: Создаем новый файл и начинаем прием данных
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff feaa 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000bf8:	f7ff fe1d 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000bfc:	4b8e      	ldr	r3, [pc, #568]	; (8000e38 <main+0x358>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c02:	4b8e      	ldr	r3, [pc, #568]	; (8000e3c <main+0x35c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000c08:	4b87      	ldr	r3, [pc, #540]	; (8000e28 <main+0x348>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
					break;
 8000c0e:	e05d      	b.n	8000ccc <main+0x1ec>
					case 2:
					LedMode=1; // Режим мигания - посылка передается
 8000c10:	4b88      	ldr	r3, [pc, #544]	; (8000e34 <main+0x354>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
					CommandToRadio(2); // Команда открытия клапана
 8000c16:	2002      	movs	r0, #2
 8000c18:	f7ff fe98 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000c1c:	f7ff fe0b 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c20:	4b85      	ldr	r3, [pc, #532]	; (8000e38 <main+0x358>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c26:	4b85      	ldr	r3, [pc, #532]	; (8000e3c <main+0x35c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000c2c:	4b7e      	ldr	r3, [pc, #504]	; (8000e28 <main+0x348>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
					break;
 8000c32:	e04b      	b.n	8000ccc <main+0x1ec>
					case 3:
					LedMode=1; // Режим мигания - посылка передается
 8000c34:	4b7f      	ldr	r3, [pc, #508]	; (8000e34 <main+0x354>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
					CommandToRadio(3); // Команда запуска двигателя
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f7ff fe86 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000c40:	f7ff fdf9 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c44:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <main+0x358>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c4a:	4b7c      	ldr	r3, [pc, #496]	; (8000e3c <main+0x35c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000c50:	4b75      	ldr	r3, [pc, #468]	; (8000e28 <main+0x348>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
					break;
 8000c56:	e039      	b.n	8000ccc <main+0x1ec>
					case 4:  // Внутренняя команда (запрос данных с ЦКТ)
					break;
					case 5:
					LedMode=1; // Режим мигания - посылка передается
 8000c58:	4b76      	ldr	r3, [pc, #472]	; (8000e34 <main+0x354>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
					CommandToRadio(5); // Команда закрытия файла на SD и запрет записи на SD
 8000c5e:	2005      	movs	r0, #5
 8000c60:	f7ff fe74 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000c64:	f7ff fde7 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c68:	4b73      	ldr	r3, [pc, #460]	; (8000e38 <main+0x358>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c6e:	4b73      	ldr	r3, [pc, #460]	; (8000e3c <main+0x35c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000c74:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <main+0x348>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
					break;
 8000c7a:	e027      	b.n	8000ccc <main+0x1ec>
					case 6:
					LedMode=1; // Режим мигания - посылка передается
 8000c7c:	4b6d      	ldr	r3, [pc, #436]	; (8000e34 <main+0x354>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
					CommandToRadio(6); // Команда закрытия клапана
 8000c82:	2006      	movs	r0, #6
 8000c84:	f7ff fe62 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000c88:	f7ff fdd5 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c8c:	4b6a      	ldr	r3, [pc, #424]	; (8000e38 <main+0x358>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c92:	4b6a      	ldr	r3, [pc, #424]	; (8000e3c <main+0x35c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000c98:	4b63      	ldr	r3, [pc, #396]	; (8000e28 <main+0x348>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
					break;
 8000c9e:	bf00      	nop
 8000ca0:	e014      	b.n	8000ccc <main+0x1ec>
				}
			} else // Если CRC8 не совпало продолжаем отправлять 4 команду, если она отправлялась до этого
			{
				if(Com4Active==1) // Если мы попадаем сюда во время приема данных
 8000ca2:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <main+0x360>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d110      	bne.n	8000ccc <main+0x1ec>
				{
					LedMode=1; // Режим мигания - посылка передается
 8000caa:	4b62      	ldr	r3, [pc, #392]	; (8000e34 <main+0x354>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000cb0:	2004      	movs	r0, #4
 8000cb2:	f7ff fe4b 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000cb6:	f7ff fdbe 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000cba:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <main+0x358>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <main+0x35c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000cc6:	4b58      	ldr	r3, [pc, #352]	; (8000e28 <main+0x348>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
				}
			}
			// Продолжаем ожидать посылку с Linux
			countRx=0;
 8000ccc:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <main+0x340>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000cd2:	484f      	ldr	r0, [pc, #316]	; (8000e10 <main+0x330>)
 8000cd4:	f003 fbcb 	bl	800446e <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	494c      	ldr	r1, [pc, #304]	; (8000e0c <main+0x32c>)
 8000cdc:	484c      	ldr	r0, [pc, #304]	; (8000e10 <main+0x330>)
 8000cde:	f003 fb71 	bl	80043c4 <HAL_UART_Receive_IT>
		}

		// Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8000ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce6:	4857      	ldr	r0, [pc, #348]	; (8000e44 <main+0x364>)
 8000ce8:	f001 fd22 	bl	8002730 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8106 	beq.w	8000f00 <main+0x420>
		{
			// Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000cf4:	4854      	ldr	r0, [pc, #336]	; (8000e48 <main+0x368>)
 8000cf6:	f7ff fd3f 	bl	8000778 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000cfa:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <main+0x368>)
 8000cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <main+0x368>)
 8000d08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <main+0x36c>)
 8000d14:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 8000d16:	f7ff fbf5 	bl	8000504 <Rf96_LoRaClearIrq>

			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2)) // Если CRC16 совпало
 8000d1a:	2128      	movs	r1, #40	; 0x28
 8000d1c:	484a      	ldr	r0, [pc, #296]	; (8000e48 <main+0x368>)
 8000d1e:	f7ff fdc7 	bl	80008b0 <Crc16>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <main+0x36c>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	f040 80e8 	bne.w	8000f00 <main+0x420>
			{
				// Останавливаем таймер
				Delay_start=0;
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <main+0x358>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
				Ms_Delay=0;
 8000d36:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <main+0x35c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
				switch(TX_RX_Radio[CommIndex])
 8000d3c:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <main+0x368>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	2b05      	cmp	r3, #5
 8000d44:	f200 80dc 	bhi.w	8000f00 <main+0x420>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <main+0x270>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000d69 	.word	0x08000d69
 8000d54:	08000dbd 	.word	0x08000dbd
 8000d58:	08000de3 	.word	0x08000de3
 8000d5c:	08000e51 	.word	0x08000e51
 8000d60:	08000ead 	.word	0x08000ead
 8000d64:	08000edb 	.word	0x08000edb
				{
					case 1:   // Команда начала записи: Создаем файл
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <main+0x354>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	4825      	ldr	r0, [pc, #148]	; (8000e08 <main+0x328>)
 8000d74:	f001 fcf4 	bl	8002760 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4822      	ldr	r0, [pc, #136]	; (8000e08 <main+0x328>)
 8000d7e:	f001 fcef 	bl	8002760 <HAL_GPIO_WritePin>
					// Посылка принята успешно, отправляем запрос на данные, если нет команд с Linux
					if(Readflag!=1)
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <main+0x344>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d014      	beq.n	8000db4 <main+0x2d4>
					{
					LedMode=1; // Режим мигания - посылка передается
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <main+0x354>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
					Com4Active=1; // 4 команда будет посылаться всегда
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <main+0x360>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000d96:	2004      	movs	r0, #4
 8000d98:	f7ff fdd8 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000d9c:	f7ff fd4b 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <main+0x358>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000da6:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <main+0x35c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
					AccessRadio=1;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <main+0x348>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					break;
 8000db2:	e0a5      	b.n	8000f00 <main+0x420>
					} else AccessRadio=0;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <main+0x348>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
					break;
 8000dba:	e0a1      	b.n	8000f00 <main+0x420>
					case 2:   // Команда открытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <main+0x354>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <main+0x328>)
 8000dc8:	f001 fcca 	bl	8002760 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2104      	movs	r1, #4
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <main+0x328>)
 8000dd2:	f001 fcc5 	bl	8002760 <HAL_GPIO_WritePin>
					Command_to_Linux(2);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fe04 	bl	80009e4 <Command_to_Linux>
					Command4_send();
 8000ddc:	f7ff fe4e 	bl	8000a7c <Command4_send>
					break;
 8000de0:	e08e      	b.n	8000f00 <main+0x420>
					case 3:   // Команда запуска двигателя
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <main+0x354>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2102      	movs	r1, #2
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <main+0x328>)
 8000dee:	f001 fcb7 	bl	8002760 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <main+0x328>)
 8000df8:	f001 fcb2 	bl	8002760 <HAL_GPIO_WritePin>
					Command_to_Linux(3);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f7ff fdf1 	bl	80009e4 <Command_to_Linux>
					Command4_send();
 8000e02:	f7ff fe3b 	bl	8000a7c <Command4_send>
					break;
 8000e06:	e07b      	b.n	8000f00 <main+0x420>
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	2000002d 	.word	0x2000002d
 8000e10:	20000228 	.word	0x20000228
 8000e14:	20000160 	.word	0x20000160
 8000e18:	20000034 	.word	0x20000034
 8000e1c:	20000030 	.word	0x20000030
 8000e20:	2000002c 	.word	0x2000002c
 8000e24:	2000002e 	.word	0x2000002e
 8000e28:	20000038 	.word	0x20000038
 8000e2c:	200001f8 	.word	0x200001f8
 8000e30:	20000028 	.word	0x20000028
 8000e34:	2000002f 	.word	0x2000002f
 8000e38:	20000040 	.word	0x20000040
 8000e3c:	2000003c 	.word	0x2000003c
 8000e40:	20000041 	.word	0x20000041
 8000e44:	40020000 	.word	0x40020000
 8000e48:	200000a4 	.word	0x200000a4
 8000e4c:	2000002a 	.word	0x2000002a
					case 4:   // Команда запроса данных с ЦКТ
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <main+0x498>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4848      	ldr	r0, [pc, #288]	; (8000f7c <main+0x49c>)
 8000e5c:	f001 fc80 	bl	8002760 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2104      	movs	r1, #4
 8000e64:	4845      	ldr	r0, [pc, #276]	; (8000f7c <main+0x49c>)
 8000e66:	f001 fc7b 	bl	8002760 <HAL_GPIO_WritePin>
					// Пересылаем принятый пакет на linux
					Command_to_Linux(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fdba 	bl	80009e4 <Command_to_Linux>
					// Посылка принята успешно, отправляем запрос на данные
					if(Com4Active==1 && Readflag!=1  ) // Если нет запрета на 4 команду, то отправляем ее
 8000e70:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <main+0x4a0>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d115      	bne.n	8000ea4 <main+0x3c4>
 8000e78:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <main+0x4a4>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d011      	beq.n	8000ea4 <main+0x3c4>
					{
					LedMode=1; // Режим мигания - посылка передается
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <main+0x498>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000e86:	2004      	movs	r0, #4
 8000e88:	f7ff fd60 	bl	800094c <CommandToRadio>
					// Ожидаем команду
					Rf96_Lora_RX_mode();
 8000e8c:	f7ff fcd3 	bl	8000836 <Rf96_Lora_RX_mode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000e90:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <main+0x4a8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <main+0x4ac>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
					AccessRadio=1;
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <main+0x4b0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					// радиоканал не занят
					break;
 8000ea2:	e02d      	b.n	8000f00 <main+0x420>
					} else AccessRadio=0;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <main+0x4b0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
					break;
 8000eaa:	e029      	b.n	8000f00 <main+0x420>
					case 5:   // Команда закрытия файла на SD и запрет записи на SD
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <main+0x498>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4831      	ldr	r0, [pc, #196]	; (8000f7c <main+0x49c>)
 8000eb8:	f001 fc52 	bl	8002760 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	482e      	ldr	r0, [pc, #184]	; (8000f7c <main+0x49c>)
 8000ec2:	f001 fc4d 	bl	8002760 <HAL_GPIO_WritePin>
					Com4Active=0; // запрещаем отправку 4 команды
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <main+0x4a0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
					Command_to_Linux(5);
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f7ff fd89 	bl	80009e4 <Command_to_Linux>
					// радиоканал не занят
					AccessRadio=0;
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <main+0x4b0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
					break;
 8000ed8:	e012      	b.n	8000f00 <main+0x420>
					case 6:  // Команда закрытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <main+0x498>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4825      	ldr	r0, [pc, #148]	; (8000f7c <main+0x49c>)
 8000ee6:	f001 fc3b 	bl	8002760 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2104      	movs	r1, #4
 8000eee:	4823      	ldr	r0, [pc, #140]	; (8000f7c <main+0x49c>)
 8000ef0:	f001 fc36 	bl	8002760 <HAL_GPIO_WritePin>
					Command_to_Linux(6);
 8000ef4:	2006      	movs	r0, #6
 8000ef6:	f7ff fd75 	bl	80009e4 <Command_to_Linux>
					Command4_send();
 8000efa:	f7ff fdbf 	bl	8000a7c <Command4_send>
					break;
 8000efe:	bf00      	nop
				}
			}
		}
	// Если радиосигнал не был принят (таймаут)
	if(RadioTimeoutRx==1)
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <main+0x4b4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	f47f ae20 	bne.w	8000b4a <main+0x6a>
	{
		// Останавливаем таймер
		Delay_start=0;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <main+0x4a8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
		Ms_Delay=0;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <main+0x4ac>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
		RadioTimeoutRx=0;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <main+0x4b4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		LedMode=0; // посылка пропущена (тушим светодиод)
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <main+0x498>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2102      	movs	r1, #2
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <main+0x49c>)
 8000f28:	f001 fc1a 	bl	8002760 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <main+0x49c>)
 8000f32:	f001 fc15 	bl	8002760 <HAL_GPIO_WritePin>
		Rf96_LoRaClearIrq();
 8000f36:	f7ff fae5 	bl	8000504 <Rf96_LoRaClearIrq>
		// Отправляем еще один запрос на данные, иначе просто ожидаем команд с linux
		if(Com4Active==1 && Readflag!= 1)
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <main+0x4a0>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d115      	bne.n	8000f6e <main+0x48e>
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <main+0x4a4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d011      	beq.n	8000f6e <main+0x48e>
		{
			LedMode=1; // Режим мигания - посылка передается
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <main+0x498>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
			CommandToRadio(4); // Команда запроса данных
 8000f50:	2004      	movs	r0, #4
 8000f52:	f7ff fcfb 	bl	800094c <CommandToRadio>
			// Ожидаем команду
			Rf96_Lora_RX_mode();
 8000f56:	f7ff fc6e 	bl	8000836 <Rf96_Lora_RX_mode>
			// Запуск таймера для отслеживания таймаута
			Delay_start=1;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <main+0x4a8>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <main+0x4ac>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
			AccessRadio=1 ;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <main+0x4b0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e002      	b.n	8000f74 <main+0x494>
		} else   AccessRadio=0;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <main+0x4b0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000f74:	e5e9      	b.n	8000b4a <main+0x6a>
 8000f76:	bf00      	nop
 8000f78:	2000002f 	.word	0x2000002f
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	20000041 	.word	0x20000041
 8000f84:	2000002e 	.word	0x2000002e
 8000f88:	20000040 	.word	0x20000040
 8000f8c:	2000003c 	.word	0x2000003c
 8000f90:	20000038 	.word	0x20000038
 8000f94:	20000039 	.word	0x20000039

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2234      	movs	r2, #52	; 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 f904 	bl	80051b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SystemClock_Config+0xd4>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800100c:	2308      	movs	r3, #8
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001010:	2354      	movs	r3, #84	; 0x54
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fe89 	bl	8002d3c <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001030:	f000 fa10 	bl	8001454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2102      	movs	r1, #2
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fbb9 	bl	80027c8 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800105c:	f000 f9fa 	bl	8001454 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	; 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <MX_SPI1_Init+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_SPI1_Init+0x64>)
 800107c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_SPI1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010a4:	2218      	movs	r2, #24
 80010a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010bc:	220a      	movs	r2, #10
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010c2:	f002 f895 	bl	80031f0 <HAL_SPI_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010cc:	f000 f9c2 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001a0 	.word	0x200001a0
 80010d8:	40013000 	.word	0x40013000

080010dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM6_Init+0x64>)
 80010ec:	4a15      	ldr	r2, [pc, #84]	; (8001144 <MX_TIM6_Init+0x68>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_TIM6_Init+0x64>)
 80010f2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_TIM6_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_TIM6_Init+0x64>)
 8001100:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001104:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_TIM6_Init+0x64>)
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM6_Init+0x64>)
 800110e:	f002 fdc3 	bl	8003c98 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001118:	f000 f99c 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM6_Init+0x64>)
 800112a:	f002 ffd5 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001134:	f000 f98e 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000160 	.word	0x20000160
 8001144:	40001000 	.word	0x40001000

08001148 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MX_USART2_UART_Init+0x50>)
 8001150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001154:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001158:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001180:	f003 f83a 	bl	80041f8 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800118a:	f000 f963 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000228 	.word	0x20000228
 8001198:	40004400 	.word	0x40004400

0800119c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_DMA_Init+0x4c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <MX_DMA_Init+0x4c>)
 80011ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_DMA_Init+0x4c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 fd65 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011c8:	2010      	movs	r0, #16
 80011ca:	f000 fd7e 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2011      	movs	r0, #17
 80011d4:	f000 fd5d 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011d8:	2011      	movs	r0, #17
 80011da:	f000 fd76 	bl	8001cca <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <MX_GPIO_Init+0x14c>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a44      	ldr	r2, [pc, #272]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_GPIO_Init+0x14c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <MX_GPIO_Init+0x14c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	210e      	movs	r1, #14
 8001276:	4831      	ldr	r0, [pc, #196]	; (800133c <MX_GPIO_Init+0x150>)
 8001278:	f001 fa72 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2101      	movs	r1, #1
 8001280:	482f      	ldr	r0, [pc, #188]	; (8001340 <MX_GPIO_Init+0x154>)
 8001282:	f001 fa6d 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2140      	movs	r1, #64	; 0x40
 800128a:	482e      	ldr	r0, [pc, #184]	; (8001344 <MX_GPIO_Init+0x158>)
 800128c:	f001 fa68 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_GPIO_Init+0x15c>)
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4825      	ldr	r0, [pc, #148]	; (800133c <MX_GPIO_Init+0x150>)
 80012a6:	f001 f8b1 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012aa:	230e      	movs	r3, #14
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	481e      	ldr	r0, [pc, #120]	; (800133c <MX_GPIO_Init+0x150>)
 80012c2:	f001 f8a3 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c6:	2301      	movs	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4818      	ldr	r0, [pc, #96]	; (8001340 <MX_GPIO_Init+0x154>)
 80012de:	f001 f895 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_GPIO_Init+0x154>)
 80012f8:	f001 f888 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012fc:	2338      	movs	r3, #56	; 0x38
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_GPIO_Init+0x158>)
 8001310:	f001 f87c 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_GPIO_Init+0x158>)
 800132c:	f001 f86e 	bl	800240c <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40020800 	.word	0x40020800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	10210000 	.word	0x10210000

0800134c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Обработчик прерываний по приему usart2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_UART_RxCpltCallback+0x68>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d126      	bne.n	80013aa <HAL_UART_RxCpltCallback+0x5e>
	{
		ReadRdy=1;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_UART_RxCpltCallback+0x6c>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
		reciveTime=HAL_GetTick();
 8001362:	f000 fb8d 	bl	8001a80 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_UART_RxCpltCallback+0x70>)
 800136a:	601a      	str	r2, [r3, #0]
		// Заносим пришедший байт в массив
		BuffRx[countRx]=data;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_UART_RxCpltCallback+0x74>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_UART_RxCpltCallback+0x78>)
 8001374:	7819      	ldrb	r1, [r3, #0]
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_UART_RxCpltCallback+0x7c>)
 8001378:	5499      	strb	r1, [r3, r2]
		if(countRx==MaxBuffOfCKT-1)
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_UART_RxCpltCallback+0x74>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b2c      	cmp	r3, #44	; 0x2c
 8001380:	d108      	bne.n	8001394 <HAL_UART_RxCpltCallback+0x48>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	2108      	movs	r1, #8
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <HAL_UART_RxCpltCallback+0x80>)
 8001388:	f001 f9ea 	bl	8002760 <HAL_GPIO_WritePin>
			// Устанавливаем флаг того, что посылка принята
			Readflag=1;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_UART_RxCpltCallback+0x84>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e005      	b.n	80013a0 <HAL_UART_RxCpltCallback+0x54>
		}
		else countRx++;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_UART_RxCpltCallback+0x74>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_UART_RxCpltCallback+0x74>)
 800139e:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart2, &data, 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <HAL_UART_RxCpltCallback+0x78>)
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <HAL_UART_RxCpltCallback+0x68>)
 80013a6:	f003 f80d 	bl	80043c4 <HAL_UART_Receive_IT>
	}
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000228 	.word	0x20000228
 80013b8:	20000030 	.word	0x20000030
 80013bc:	20000034 	.word	0x20000034
 80013c0:	2000002c 	.word	0x2000002c
 80013c4:	2000002d 	.word	0x2000002d
 80013c8:	200001f8 	.word	0x200001f8
 80013cc:	40020800 	.word	0x40020800
 80013d0:	2000002e 	.word	0x2000002e

080013d4 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)  // мигание светодиодов
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d107      	bne.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if(LedMode==1) // 1 светодиод
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d103      	bne.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80013ec:	2102      	movs	r1, #2
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013f0:	f001 f9cf 	bl	8002792 <HAL_GPIO_TogglePin>
		}
	}
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000160 	.word	0x20000160
 8001400:	2000002f 	.word	0x2000002f
 8001404:	40020800 	.word	0x40020800

08001408 <SysTick_Handler>:
// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <SysTick_Handler+0x40>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d114      	bne.n	800143e <SysTick_Handler+0x36>
	{
		if(Ms_Delay<5000)
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <SysTick_Handler+0x44>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f241 3287 	movw	r2, #4999	; 0x1387
 800141c:	4293      	cmp	r3, r2
 800141e:	d805      	bhi.n	800142c <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <SysTick_Handler+0x44>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <SysTick_Handler+0x44>)
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e008      	b.n	800143e <SysTick_Handler+0x36>
		}
		else
		{
			Delay_start=0;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SysTick_Handler+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <SysTick_Handler+0x44>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
			RadioTimeoutRx=1; // произошло прерывание
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Handler+0x48>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800143e:	f000 fb0b 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000040 	.word	0x20000040
 800144c:	2000003c 	.word	0x2000003c
 8001450:	20000039 	.word	0x20000039

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800146e:	1df9      	adds	r1, r7, #7
 8001470:	230a      	movs	r3, #10
 8001472:	2201      	movs	r2, #1
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <SPICmd8bit+0x20>)
 8001476:	f001 ff1f 	bl	80032b8 <HAL_SPI_Transmit>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001a0 	.word	0x200001a0

08001488 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001492:	1df9      	adds	r1, r7, #7
 8001494:	230a      	movs	r3, #10
 8001496:	2201      	movs	r2, #1
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <SPIRead8bit+0x20>)
 800149a:	f002 f841 	bl	8003520 <HAL_SPI_Receive>

  return(RdPara);
 800149e:	79fb      	ldrb	r3, [r7, #7]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200001a0 	.word	0x200001a0

080014ac <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 80014b6:	2200      	movs	r2, #0
 80014b8:	2140      	movs	r1, #64	; 0x40
 80014ba:	480a      	ldr	r0, [pc, #40]	; (80014e4 <SPIRead+0x38>)
 80014bc:	f001 f950 	bl	8002760 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ffce 	bl	8001464 <SPICmd8bit>
  tmp = SPIRead8bit();
 80014c8:	f7ff ffde 	bl	8001488 <SPIRead8bit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 80014d0:	2201      	movs	r2, #1
 80014d2:	2140      	movs	r1, #64	; 0x40
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <SPIRead+0x38>)
 80014d6:	f001 f943 	bl	8002760 <HAL_GPIO_WritePin>
  return(tmp);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020400 	.word	0x40020400

080014e8 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <SPIWrite+0x44>)
 80014fe:	f001 f92f 	bl	8002760 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ffaa 	bl	8001464 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ffa6 	bl	8001464 <SPICmd8bit>
	NSS_H();
 8001518:	2201      	movs	r2, #1
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <SPIWrite+0x44>)
 800151e:	f001 f91f 	bl	8002760 <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020400 	.word	0x40020400

08001530 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d91f      	bls.n	8001586 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001546:	2200      	movs	r2, #0
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	4811      	ldr	r0, [pc, #68]	; (8001590 <SPIBurstRead+0x60>)
 800154c:	f001 f908 	bl	8002760 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff86 	bl	8001464 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e009      	b.n	8001572 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	18d4      	adds	r4, r2, r3
 8001564:	f7ff ff90 	bl	8001488 <SPIRead8bit>
 8001568:	4603      	mov	r3, r0
 800156a:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3f1      	bcc.n	800155e <SPIBurstRead+0x2e>
      NSS_H();
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	4804      	ldr	r0, [pc, #16]	; (8001590 <SPIBurstRead+0x60>)
 8001580:	f001 f8ee 	bl	8002760 <HAL_GPIO_WritePin>
 8001584:	e000      	b.n	8001588 <SPIBurstRead+0x58>
    return;
 8001586:	bf00      	nop
  }
}
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	40020400 	.word	0x40020400

08001594 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d922      	bls.n	80015f0 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 80015aa:	2200      	movs	r2, #0
 80015ac:	2140      	movs	r1, #64	; 0x40
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <BurstWrite+0x64>)
 80015b0:	f001 f8d6 	bl	8002760 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff51 	bl	8001464 <SPICmd8bit>
    for(i=0;i<length;i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e009      	b.n	80015dc <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff47 	bl	8001464 <SPICmd8bit>
    for(i=0;i<length;i++)
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	3301      	adds	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f1      	bcc.n	80015c8 <BurstWrite+0x34>
    NSS_H();
 80015e4:	2201      	movs	r2, #1
 80015e6:	2140      	movs	r1, #64	; 0x40
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <BurstWrite+0x64>)
 80015ea:	f001 f8b9 	bl	8002760 <HAL_GPIO_WritePin>
 80015ee:	e000      	b.n	80015f2 <BurstWrite+0x5e>
    return;
 80015f0:	bf00      	nop
  }
}
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40020400 	.word	0x40020400

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x4c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800163a:	2007      	movs	r0, #7
 800163c:	f000 fb1e 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_SPI_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_SPI_MspInit+0x88>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_SPI_MspInit+0x88>)
 8001678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_SPI_MspInit+0x88>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_SPI_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_SPI_MspInit+0x88>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_SPI_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016a6:	23e0      	movs	r3, #224	; 0xe0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b6:	2305      	movs	r3, #5
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_SPI_MspInit+0x8c>)
 80016c2:	f000 fea3 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40013000 	.word	0x40013000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_TIM_Base_MspInit+0x48>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d115      	bne.n	800171a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_TIM_Base_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_TIM_Base_MspInit+0x4c>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_TIM_Base_MspInit+0x4c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2036      	movs	r0, #54	; 0x36
 8001710:	f000 fabf 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001714:	2036      	movs	r0, #54	; 0x36
 8001716:	f000 fad8 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40001000 	.word	0x40001000
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <HAL_UART_MspInit+0x14c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f040 8090 	bne.w	8001870 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	4b49      	ldr	r3, [pc, #292]	; (800187c <HAL_UART_MspInit+0x150>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_UART_MspInit+0x150>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <HAL_UART_MspInit+0x150>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4b42      	ldr	r3, [pc, #264]	; (800187c <HAL_UART_MspInit+0x150>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a41      	ldr	r2, [pc, #260]	; (800187c <HAL_UART_MspInit+0x150>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_UART_MspInit+0x150>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001788:	230c      	movs	r3, #12
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001798:	2307      	movs	r3, #7
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4837      	ldr	r0, [pc, #220]	; (8001880 <HAL_UART_MspInit+0x154>)
 80017a4:	f000 fe32 	bl	800240c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017aa:	4a37      	ldr	r2, [pc, #220]	; (8001888 <HAL_UART_MspInit+0x15c>)
 80017ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b6:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017e8:	4826      	ldr	r0, [pc, #152]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017ea:	f000 fa89 	bl	8001d00 <HAL_DMA_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80017f4:	f7ff fe2e 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a22      	ldr	r2, [pc, #136]	; (8001884 <HAL_UART_MspInit+0x158>)
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
 80017fe:	4a21      	ldr	r2, [pc, #132]	; (8001884 <HAL_UART_MspInit+0x158>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_UART_MspInit+0x160>)
 8001806:	4a22      	ldr	r2, [pc, #136]	; (8001890 <HAL_UART_MspInit+0x164>)
 8001808:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_UART_MspInit+0x160>)
 800180c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001810:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_UART_MspInit+0x160>)
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_UART_MspInit+0x160>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_UART_MspInit+0x160>)
 8001820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001824:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_UART_MspInit+0x160>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_UART_MspInit+0x160>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_UART_MspInit+0x160>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_UART_MspInit+0x160>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_UART_MspInit+0x160>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001844:	4811      	ldr	r0, [pc, #68]	; (800188c <HAL_UART_MspInit+0x160>)
 8001846:	f000 fa5b 	bl	8001d00 <HAL_DMA_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001850:	f7ff fe00 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_UART_MspInit+0x160>)
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_UART_MspInit+0x160>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2026      	movs	r0, #38	; 0x26
 8001866:	f000 fa14 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800186a:	2026      	movs	r0, #38	; 0x26
 800186c:	f000 fa2d 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40004400 	.word	0x40004400
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	20000044 	.word	0x20000044
 8001888:	40026088 	.word	0x40026088
 800188c:	200000d0 	.word	0x200000d0
 8001890:	400260a0 	.word	0x400260a0

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA1_Stream5_IRQHandler+0x10>)
 80018ea:	f000 fb49 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000044 	.word	0x20000044

080018f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <DMA1_Stream6_IRQHandler+0x10>)
 80018fe:	f000 fb3f 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200000d0 	.word	0x200000d0

0800190c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <USART2_IRQHandler+0x10>)
 8001912:	f002 fe2f 	bl	8004574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000228 	.word	0x20000228

08001920 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM6_DAC_IRQHandler+0x10>)
 8001926:	f002 fa06 	bl	8003d36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000160 	.word	0x20000160

08001934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <SystemInit+0x28>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <SystemInit+0x28>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <SystemInit+0x28>)
 800194a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800194e:	609a      	str	r2, [r3, #8]
#endif
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <Reset_Handler>:
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopFillZerobss+0x14>
 8001964:	2100      	movs	r1, #0
 8001966:	e003      	b.n	8001970 <LoopCopyDataInit>

08001968 <CopyDataInit>:
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <LoopFillZerobss+0x18>)
 800196a:	585b      	ldr	r3, [r3, r1]
 800196c:	5043      	str	r3, [r0, r1]
 800196e:	3104      	adds	r1, #4

08001970 <LoopCopyDataInit>:
 8001970:	480b      	ldr	r0, [pc, #44]	; (80019a0 <LoopFillZerobss+0x1c>)
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <LoopFillZerobss+0x20>)
 8001974:	1842      	adds	r2, r0, r1
 8001976:	429a      	cmp	r2, r3
 8001978:	d3f6      	bcc.n	8001968 <CopyDataInit>
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <LoopFillZerobss+0x24>)
 800197c:	e002      	b.n	8001984 <LoopFillZerobss>

0800197e <FillZerobss>:
 800197e:	2300      	movs	r3, #0
 8001980:	f842 3b04 	str.w	r3, [r2], #4

08001984 <LoopFillZerobss>:
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <LoopFillZerobss+0x28>)
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f9      	bcc.n	800197e <FillZerobss>
 800198a:	f7ff ffd3 	bl	8001934 <SystemInit>
 800198e:	f003 fbed 	bl	800516c <__libc_init_array>
 8001992:	f7ff f8a5 	bl	8000ae0 <main>
 8001996:	4770      	bx	lr
 8001998:	20020000 	.word	0x20020000
 800199c:	08005520 	.word	0x08005520
 80019a0:	20000000 	.word	0x20000000
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	2000000c 	.word	0x2000000c
 80019ac:	2000026c 	.word	0x2000026c

080019b0 <ADC_IRQHandler>:
 80019b0:	e7fe      	b.n	80019b0 <ADC_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <HAL_Init+0x40>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_Init+0x40>)
 80019ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x40>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f94d 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff fe08 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f965 	bl	8001ce6 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a34:	f000 f92d 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000268 	.word	0x20000268

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000268 	.word	0x20000268

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_Delay+0x40>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000008 	.word	0x20000008

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff3e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff31 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa2 	bl	8001c38 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff feb8 	bl	8001a80 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e099      	b.n	8001e50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3c:	e00f      	b.n	8001d5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3e:	f7ff fe9f 	bl	8001a80 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d908      	bls.n	8001d5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e078      	b.n	8001e50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e8      	bne.n	8001d3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_DMA_Init+0x158>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d107      	bne.n	8001dc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f023 0307 	bic.w	r3, r3, #7
 8001dde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d117      	bne.n	8001e22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fa87 	bl	8002318 <DMA_CheckFifoParam>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e016      	b.n	8001e50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fa3e 	bl	80022ac <DMA_CalcBaseAndBitshift>
 8001e30:	4603      	mov	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	223f      	movs	r2, #63	; 0x3f
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	f010803f 	.word	0xf010803f

08001e5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e6a:	f7ff fe09 	bl	8001a80 <HAL_GetTick>
 8001e6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e052      	b.n	8001f34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0216 	bic.w	r2, r2, #22
 8001e9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <HAL_DMA_Abort+0x62>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0208 	bic.w	r2, r2, #8
 8001ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ede:	e013      	b.n	8001f08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee0:	f7ff fdce 	bl	8001a80 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d90c      	bls.n	8001f08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2203      	movs	r2, #3
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e015      	b.n	8001f34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1e4      	bne.n	8001ee0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	223f      	movs	r2, #63	; 0x3f
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00c      	b.n	8001f74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_DMA_IRQHandler+0x258>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a92      	ldr	r2, [pc, #584]	; (80021dc <HAL_DMA_IRQHandler+0x25c>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2208      	movs	r2, #8
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01a      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0204 	bic.w	r2, r2, #4
 8001fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2208      	movs	r2, #8
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2204      	movs	r2, #4
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2204      	movs	r2, #4
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0204 	orr.w	r2, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2210      	movs	r2, #16
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d043      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03c      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2210      	movs	r2, #16
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
 80020ae:	e01f      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
 80020c0:	e016      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0208 	bic.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2220      	movs	r2, #32
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 808e 	beq.w	800221e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8086 	beq.w	800221e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2220      	movs	r2, #32
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b05      	cmp	r3, #5
 8002128:	d136      	bne.n	8002198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0216 	bic.w	r2, r2, #22
 8002138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_DMA_IRQHandler+0x1da>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	223f      	movs	r2, #63	; 0x3f
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218a:	2b00      	cmp	r3, #0
 800218c:	d07d      	beq.n	800228a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
        }
        return;
 8002196:	e078      	b.n	800228a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01c      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d030      	beq.n	800221e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	e02b      	b.n	800221e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d027      	beq.n	800221e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
 80021d6:	e022      	b.n	800221e <HAL_DMA_IRQHandler+0x29e>
 80021d8:	20000000 	.word	0x20000000
 80021dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0210 	bic.w	r2, r2, #16
 80021fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	2b00      	cmp	r3, #0
 8002224:	d032      	beq.n	800228c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d022      	beq.n	8002278 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2205      	movs	r2, #5
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3301      	adds	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	429a      	cmp	r2, r3
 8002254:	d307      	bcc.n	8002266 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f2      	bne.n	800224a <HAL_DMA_IRQHandler+0x2ca>
 8002264:	e000      	b.n	8002268 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002266:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
 8002288:	e000      	b.n	800228c <HAL_DMA_IRQHandler+0x30c>
        return;
 800228a:	bf00      	nop
    }
  }
}
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop

08002294 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b10      	subs	r3, #16
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <DMA_CalcBaseAndBitshift+0x64>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <DMA_CalcBaseAndBitshift+0x68>)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d909      	bls.n	80022ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	1d1a      	adds	r2, r3, #4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	659a      	str	r2, [r3, #88]	; 0x58
 80022ec:	e007      	b.n	80022fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	aaaaaaab 	.word	0xaaaaaaab
 8002314:	08005508 	.word	0x08005508

08002318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11f      	bne.n	8002372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d855      	bhi.n	80023e4 <DMA_CheckFifoParam+0xcc>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <DMA_CheckFifoParam+0x28>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002351 	.word	0x08002351
 8002344:	08002363 	.word	0x08002363
 8002348:	08002351 	.word	0x08002351
 800234c:	080023e5 	.word	0x080023e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d045      	beq.n	80023e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002360:	e042      	b.n	80023e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800236a:	d13f      	bne.n	80023ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002370:	e03c      	b.n	80023ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	d121      	bne.n	80023c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d836      	bhi.n	80023f0 <DMA_CheckFifoParam+0xd8>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <DMA_CheckFifoParam+0x70>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002399 	.word	0x08002399
 800238c:	0800239f 	.word	0x0800239f
 8002390:	08002399 	.word	0x08002399
 8002394:	080023b1 	.word	0x080023b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      break;
 800239c:	e02f      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d024      	beq.n	80023f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ae:	e021      	b.n	80023f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b8:	d11e      	bne.n	80023f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023be:	e01b      	b.n	80023f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d902      	bls.n	80023cc <DMA_CheckFifoParam+0xb4>
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d003      	beq.n	80023d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ca:	e018      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      break;
 80023d0:	e015      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00e      	beq.n	80023fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
      break;
 80023e2:	e00b      	b.n	80023fc <DMA_CheckFifoParam+0xe4>
      break;
 80023e4:	bf00      	nop
 80023e6:	e00a      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023e8:	bf00      	nop
 80023ea:	e008      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023ec:	bf00      	nop
 80023ee:	e006      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023f0:	bf00      	nop
 80023f2:	e004      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023f4:	bf00      	nop
 80023f6:	e002      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;   
 80023f8:	bf00      	nop
 80023fa:	e000      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023fc:	bf00      	nop
    }
  } 
  
  return status; 
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e165      	b.n	80026f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	f040 8154 	bne.w	80026ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d00b      	beq.n	8002466 <HAL_GPIO_Init+0x5a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d007      	beq.n	8002466 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800245a:	2b11      	cmp	r3, #17
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b12      	cmp	r3, #18
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0xfc>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b12      	cmp	r3, #18
 8002506:	d123      	bne.n	8002550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80ae 	beq.w	80026ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <HAL_GPIO_Init+0x2fc>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a5b      	ldr	r2, [pc, #364]	; (8002708 <HAL_GPIO_Init+0x2fc>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_GPIO_Init+0x2fc>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_GPIO_Init+0x300>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	; (8002710 <HAL_GPIO_Init+0x304>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d025      	beq.n	8002626 <HAL_GPIO_Init+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4d      	ldr	r2, [pc, #308]	; (8002714 <HAL_GPIO_Init+0x308>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_GPIO_Init+0x216>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	; (8002718 <HAL_GPIO_Init+0x30c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x212>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	; (800271c <HAL_GPIO_Init+0x310>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4a      	ldr	r2, [pc, #296]	; (8002720 <HAL_GPIO_Init+0x314>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x20a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a49      	ldr	r2, [pc, #292]	; (8002724 <HAL_GPIO_Init+0x318>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x206>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_GPIO_Init+0x31c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x202>
 800260a:	2306      	movs	r3, #6
 800260c:	e00c      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 800260e:	2307      	movs	r3, #7
 8002610:	e00a      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002612:	2305      	movs	r3, #5
 8002614:	e008      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002616:	2304      	movs	r3, #4
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 800261a:	2303      	movs	r3, #3
 800261c:	e004      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 800261e:	2302      	movs	r3, #2
 8002620:	e002      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x21c>
 8002626:	2300      	movs	r3, #0
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f002 0203 	and.w	r2, r2, #3
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	4093      	lsls	r3, r2
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002638:	4934      	ldr	r1, [pc, #208]	; (800270c <HAL_GPIO_Init+0x300>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_GPIO_Init+0x320>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800266a:	4a30      	ldr	r2, [pc, #192]	; (800272c <HAL_GPIO_Init+0x320>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002670:	4b2e      	ldr	r3, [pc, #184]	; (800272c <HAL_GPIO_Init+0x320>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <HAL_GPIO_Init+0x320>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_GPIO_Init+0x320>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_GPIO_Init+0x320>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_GPIO_Init+0x320>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e8:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_GPIO_Init+0x320>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	f67f ae96 	bls.w	8002428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	e001      	b.n	8002752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	401a      	ands	r2, r3
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d104      	bne.n	80027b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	041a      	lsls	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0cc      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d90c      	bls.n	8002804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d044      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d119      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d003      	beq.n	8002886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e067      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4934      	ldr	r1, [pc, #208]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff f8e2 	bl	8001a80 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff f8de 	bl	8001a80 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d20c      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f855 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8002952:	4601      	mov	r1, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	fa21 f303 	lsr.w	r3, r1, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f842 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	080054f0 	.word	0x080054f0
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000

080029ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029b0:	f7ff fff0 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b4:	4601      	mov	r1, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0a9b      	lsrs	r3, r3, #10
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	08005500 	.word	0x08005500

080029d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029d8:	f7ff ffdc 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029dc:	4601      	mov	r1, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0b5b      	lsrs	r3, r3, #13
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ea:	5cd3      	ldrb	r3, [r2, r3]
 80029ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08005500 	.word	0x08005500

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a16:	4bc6      	ldr	r3, [pc, #792]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	f200 817e 	bhi.w	8002d20 <HAL_RCC_GetSysClockFreq+0x324>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_RCC_GetSysClockFreq+0x30>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002d21 	.word	0x08002d21
 8002a34:	08002d21 	.word	0x08002d21
 8002a38:	08002d21 	.word	0x08002d21
 8002a3c:	08002a67 	.word	0x08002a67
 8002a40:	08002d21 	.word	0x08002d21
 8002a44:	08002d21 	.word	0x08002d21
 8002a48:	08002d21 	.word	0x08002d21
 8002a4c:	08002a6d 	.word	0x08002a6d
 8002a50:	08002d21 	.word	0x08002d21
 8002a54:	08002d21 	.word	0x08002d21
 8002a58:	08002d21 	.word	0x08002d21
 8002a5c:	08002bc9 	.word	0x08002bc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4bb4      	ldr	r3, [pc, #720]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8002a62:	613b      	str	r3, [r7, #16]
       break;
 8002a64:	e15f      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a66:	4bb4      	ldr	r3, [pc, #720]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002a68:	613b      	str	r3, [r7, #16]
      break;
 8002a6a:	e15c      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a6c:	4bb0      	ldr	r3, [pc, #704]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a74:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a76:	4bae      	ldr	r3, [pc, #696]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d04a      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a82:	4bab      	ldr	r3, [pc, #684]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	ea03 0501 	and.w	r5, r3, r1
 8002a98:	ea04 0602 	and.w	r6, r4, r2
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	f04f 0400 	mov.w	r4, #0
 8002aa8:	0154      	lsls	r4, r2, #5
 8002aaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aae:	014b      	lsls	r3, r1, #5
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	1b49      	subs	r1, r1, r5
 8002ab6:	eb62 0206 	sbc.w	r2, r2, r6
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	f04f 0400 	mov.w	r4, #0
 8002ac2:	0194      	lsls	r4, r2, #6
 8002ac4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ac8:	018b      	lsls	r3, r1, #6
 8002aca:	1a5b      	subs	r3, r3, r1
 8002acc:	eb64 0402 	sbc.w	r4, r4, r2
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	00e2      	lsls	r2, r4, #3
 8002ada:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ade:	00d9      	lsls	r1, r3, #3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	195b      	adds	r3, r3, r5
 8002ae6:	eb44 0406 	adc.w	r4, r4, r6
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	0262      	lsls	r2, r4, #9
 8002af4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002af8:	0259      	lsls	r1, r3, #9
 8002afa:	460b      	mov	r3, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	4621      	mov	r1, r4
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	f7fd fb7a 	bl	8000204 <__aeabi_uldivmod>
 8002b10:	4603      	mov	r3, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e049      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	f04f 0400 	mov.w	r4, #0
 8002b22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	ea03 0501 	and.w	r5, r3, r1
 8002b2e:	ea04 0602 	and.w	r6, r4, r2
 8002b32:	4629      	mov	r1, r5
 8002b34:	4632      	mov	r2, r6
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	f04f 0400 	mov.w	r4, #0
 8002b3e:	0154      	lsls	r4, r2, #5
 8002b40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b44:	014b      	lsls	r3, r1, #5
 8002b46:	4619      	mov	r1, r3
 8002b48:	4622      	mov	r2, r4
 8002b4a:	1b49      	subs	r1, r1, r5
 8002b4c:	eb62 0206 	sbc.w	r2, r2, r6
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	0194      	lsls	r4, r2, #6
 8002b5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b5e:	018b      	lsls	r3, r1, #6
 8002b60:	1a5b      	subs	r3, r3, r1
 8002b62:	eb64 0402 	sbc.w	r4, r4, r2
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	00e2      	lsls	r2, r4, #3
 8002b70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b74:	00d9      	lsls	r1, r3, #3
 8002b76:	460b      	mov	r3, r1
 8002b78:	4614      	mov	r4, r2
 8002b7a:	195b      	adds	r3, r3, r5
 8002b7c:	eb44 0406 	adc.w	r4, r4, r6
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	02a2      	lsls	r2, r4, #10
 8002b8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b8e:	0299      	lsls	r1, r3, #10
 8002b90:	460b      	mov	r3, r1
 8002b92:	4614      	mov	r4, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	4621      	mov	r1, r4
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f04f 0400 	mov.w	r4, #0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4623      	mov	r3, r4
 8002ba2:	f7fd fb2f 	bl	8000204 <__aeabi_uldivmod>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bac:	4b60      	ldr	r3, [pc, #384]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	613b      	str	r3, [r7, #16]
      break;
 8002bc6:	e0ae      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd2:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04a      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	ea03 0501 	and.w	r5, r3, r1
 8002bf4:	ea04 0602 	and.w	r6, r4, r2
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4632      	mov	r2, r6
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	0154      	lsls	r4, r2, #5
 8002c06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c0a:	014b      	lsls	r3, r1, #5
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4622      	mov	r2, r4
 8002c10:	1b49      	subs	r1, r1, r5
 8002c12:	eb62 0206 	sbc.w	r2, r2, r6
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	f04f 0400 	mov.w	r4, #0
 8002c1e:	0194      	lsls	r4, r2, #6
 8002c20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c24:	018b      	lsls	r3, r1, #6
 8002c26:	1a5b      	subs	r3, r3, r1
 8002c28:	eb64 0402 	sbc.w	r4, r4, r2
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	00e2      	lsls	r2, r4, #3
 8002c36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c3a:	00d9      	lsls	r1, r3, #3
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4614      	mov	r4, r2
 8002c40:	195b      	adds	r3, r3, r5
 8002c42:	eb44 0406 	adc.w	r4, r4, r6
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	0262      	lsls	r2, r4, #9
 8002c50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c54:	0259      	lsls	r1, r3, #9
 8002c56:	460b      	mov	r3, r1
 8002c58:	4614      	mov	r4, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	f7fd facc 	bl	8000204 <__aeabi_uldivmod>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e049      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	ea03 0501 	and.w	r5, r3, r1
 8002c8a:	ea04 0602 	and.w	r6, r4, r2
 8002c8e:	4629      	mov	r1, r5
 8002c90:	4632      	mov	r2, r6
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	f04f 0400 	mov.w	r4, #0
 8002c9a:	0154      	lsls	r4, r2, #5
 8002c9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ca0:	014b      	lsls	r3, r1, #5
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	1b49      	subs	r1, r1, r5
 8002ca8:	eb62 0206 	sbc.w	r2, r2, r6
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f04f 0400 	mov.w	r4, #0
 8002cb4:	0194      	lsls	r4, r2, #6
 8002cb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cba:	018b      	lsls	r3, r1, #6
 8002cbc:	1a5b      	subs	r3, r3, r1
 8002cbe:	eb64 0402 	sbc.w	r4, r4, r2
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cd0:	00d9      	lsls	r1, r3, #3
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	195b      	adds	r3, r3, r5
 8002cd8:	eb44 0406 	adc.w	r4, r4, r6
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	02a2      	lsls	r2, r4, #10
 8002ce6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cea:	0299      	lsls	r1, r3, #10
 8002cec:	460b      	mov	r3, r1
 8002cee:	4614      	mov	r4, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f04f 0400 	mov.w	r4, #0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	f7fd fa81 	bl	8000204 <__aeabi_uldivmod>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	0f1b      	lsrs	r3, r3, #28
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	613b      	str	r3, [r7, #16]
      break;
 8002d1e:	e002      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8002d22:	613b      	str	r3, [r7, #16]
      break;
 8002d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d26:	693b      	ldr	r3, [r7, #16]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8083 	beq.w	8002e5c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d56:	4b95      	ldr	r3, [pc, #596]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d019      	beq.n	8002d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d62:	4b92      	ldr	r3, [pc, #584]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d6e:	4b8f      	ldr	r3, [pc, #572]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7c:	4b8b      	ldr	r3, [pc, #556]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d84:	2b0c      	cmp	r3, #12
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d88:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d05b      	beq.n	8002e5a <HAL_RCC_OscConfig+0x11e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d157      	bne.n	8002e5a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e216      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x8a>
 8002db8:	4b7c      	ldr	r3, [pc, #496]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7b      	ldr	r2, [pc, #492]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e01d      	b.n	8002e02 <HAL_RCC_OscConfig+0xc6>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dce:	d10c      	bne.n	8002dea <HAL_RCC_OscConfig+0xae>
 8002dd0:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a72      	ldr	r2, [pc, #456]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0xc6>
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6f      	ldr	r2, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fe39 	bl	8001a80 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e12:	f7fe fe35 	bl	8001a80 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1db      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0xd6>
 8002e30:	e014      	b.n	8002e5c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fe25 	bl	8001a80 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fe21 	bl	8001a80 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1c7      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4c:	4b57      	ldr	r3, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0xfe>
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d06f      	beq.n	8002f48 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d017      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8c:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	d11c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e98:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea4:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x180>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e18f      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4938      	ldr	r1, [pc, #224]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed0:	e03a      	b.n	8002f48 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d020      	beq.n	8002f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eda:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <HAL_RCC_OscConfig+0x274>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fdce 	bl	8001a80 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fdca 	bl	8001a80 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e170      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4925      	ldr	r1, [pc, #148]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
 8002f1a:	e015      	b.n	8002f48 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x274>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fdad 	bl	8001a80 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fda9 	bl	8001a80 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e14f      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d037      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d016      	beq.n	8002f8a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCC_OscConfig+0x278>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe fd8d 	bl	8001a80 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fd89 	bl	8001a80 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e12f      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x22e>
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_OscConfig+0x278>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fd76 	bl	8001a80 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f98:	f7fe fd72 	bl	8001a80 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d908      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e118      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
 8002fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b8a      	ldr	r3, [pc, #552]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e9      	bne.n	8002f98 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8097 	beq.w	8003100 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b7f      	ldr	r3, [pc, #508]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a7e      	ldr	r2, [pc, #504]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b79      	ldr	r3, [pc, #484]	; (80031e8 <HAL_RCC_OscConfig+0x4ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCC_OscConfig+0x4ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a75      	ldr	r2, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x4ac>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fd31 	bl	8001a80 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fd2d 	bl	8001a80 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0d3      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <HAL_RCC_OscConfig+0x4ac>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x31a>
 8003048:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e01c      	b.n	8003090 <HAL_RCC_OscConfig+0x354>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x33c>
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a60      	ldr	r2, [pc, #384]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a5d      	ldr	r2, [pc, #372]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x354>
 8003078:	4b5a      	ldr	r3, [pc, #360]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a59      	ldr	r2, [pc, #356]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a56      	ldr	r2, [pc, #344]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe fcf2 	bl	8001a80 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe fcee 	bl	8001a80 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e092      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ee      	beq.n	80030a0 <HAL_RCC_OscConfig+0x364>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe fcdc 	bl	8001a80 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe fcd8 	bl	8001a80 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e07c      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ee      	bne.n	80030cc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d068      	beq.n	80031da <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d060      	beq.n	80031d6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d145      	bne.n	80031a8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_RCC_OscConfig+0x4b0>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe fcad 	bl	8001a80 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312a:	f7fe fca9 	bl	8001a80 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e04f      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313c:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	019b      	lsls	r3, r3, #6
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	491b      	ldr	r1, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317a:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <HAL_RCC_OscConfig+0x4b0>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fc7e 	bl	8001a80 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe fc7a 	bl	8001a80 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e020      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x44c>
 80031a6:	e018      	b.n	80031da <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_OscConfig+0x4b0>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe fc67 	bl	8001a80 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fc63 	bl	8001a80 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e009      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_OscConfig+0x4a8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x47a>
 80031d4:	e001      	b.n	80031da <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42470060 	.word	0x42470060

080031f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e056      	b.n	80032b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fe fa15 	bl	800164c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003238:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	ea42 0103 	orr.w	r1, r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	f003 0104 	and.w	r1, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_SPI_Transmit+0x22>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e11e      	b.n	8003518 <HAL_SPI_Transmit+0x260>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e2:	f7fe fbcd 	bl	8001a80 <HAL_GetTick>
 80032e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
 80032fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fc:	e103      	b.n	8003506 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_SPI_Transmit+0x52>
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330e:	e0fa      	b.n	8003506 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2203      	movs	r2, #3
 8003314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003356:	d107      	bne.n	8003368 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003366:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d007      	beq.n	8003386 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d14b      	bne.n	8003428 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_SPI_Transmit+0xe6>
 8003398:	8afb      	ldrh	r3, [r7, #22]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d13e      	bne.n	800341c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	881a      	ldrh	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	1c9a      	adds	r2, r3, #2
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033c2:	e02b      	b.n	800341c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d112      	bne.n	80033f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	881a      	ldrh	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	1c9a      	adds	r2, r3, #2
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80033f6:	e011      	b.n	800341c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f8:	f7fe fb42 	bl	8001a80 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d803      	bhi.n	8003410 <HAL_SPI_Transmit+0x158>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800340e:	d102      	bne.n	8003416 <HAL_SPI_Transmit+0x15e>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	77fb      	strb	r3, [r7, #31]
          goto error;
 800341a:	e074      	b.n	8003506 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ce      	bne.n	80033c4 <HAL_SPI_Transmit+0x10c>
 8003426:	e04c      	b.n	80034c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_Transmit+0x17e>
 8003430:	8afb      	ldrh	r3, [r7, #22]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d140      	bne.n	80034b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	7812      	ldrb	r2, [r2, #0]
 8003442:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800345c:	e02c      	b.n	80034b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b02      	cmp	r3, #2
 800346a:	d113      	bne.n	8003494 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	7812      	ldrb	r2, [r2, #0]
 8003478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	86da      	strh	r2, [r3, #54]	; 0x36
 8003492:	e011      	b.n	80034b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003494:	f7fe faf4 	bl	8001a80 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d803      	bhi.n	80034ac <HAL_SPI_Transmit+0x1f4>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034aa:	d102      	bne.n	80034b2 <HAL_SPI_Transmit+0x1fa>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034b6:	e026      	b.n	8003506 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1cd      	bne.n	800345e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fba4 	bl	8003c14 <SPI_EndRxTxTransaction>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e000      	b.n	8003506 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003504:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003516:	7ffb      	ldrb	r3, [r7, #31]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353c:	d112      	bne.n	8003564 <HAL_SPI_Receive+0x44>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2204      	movs	r2, #4
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f8e9 	bl	8003732 <HAL_SPI_TransmitReceive>
 8003560:	4603      	mov	r3, r0
 8003562:	e0e2      	b.n	800372a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_SPI_Receive+0x52>
 800356e:	2302      	movs	r3, #2
 8003570:	e0db      	b.n	800372a <HAL_SPI_Receive+0x20a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357a:	f7fe fa81 	bl	8001a80 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d002      	beq.n	8003592 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003590:	e0c2      	b.n	8003718 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_SPI_Receive+0x7e>
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a2:	e0b9      	b.n	8003718 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2204      	movs	r2, #4
 80035a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	d107      	bne.n	80035fc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d007      	beq.n	800361a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d162      	bne.n	80036e8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003622:	e02e      	b.n	8003682 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d115      	bne.n	800365e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f103 020c 	add.w	r2, r3, #12
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800365c:	e011      	b.n	8003682 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800365e:	f7fe fa0f 	bl	8001a80 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d803      	bhi.n	8003676 <HAL_SPI_Receive+0x156>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003674:	d102      	bne.n	800367c <HAL_SPI_Receive+0x15c>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003680:	e04a      	b.n	8003718 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1cb      	bne.n	8003624 <HAL_SPI_Receive+0x104>
 800368c:	e031      	b.n	80036f2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d113      	bne.n	80036c4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	b292      	uxth	r2, r2
 80036a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	1c9a      	adds	r2, r3, #2
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036c2:	e011      	b.n	80036e8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c4:	f7fe f9dc 	bl	8001a80 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d803      	bhi.n	80036dc <HAL_SPI_Receive+0x1bc>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036da:	d102      	bne.n	80036e2 <HAL_SPI_Receive+0x1c2>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036e6:	e017      	b.n	8003718 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1cd      	bne.n	800368e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fa27 	bl	8003b4a <SPI_EndRxTransaction>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
 8003714:	e000      	b.n	8003718 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08c      	sub	sp, #48	; 0x30
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003740:	2301      	movs	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x26>
 8003754:	2302      	movs	r3, #2
 8003756:	e18a      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x33c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003760:	f7fe f98e 	bl	8001a80 <HAL_GetTick>
 8003764:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800376c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800377a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00f      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x70>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003788:	d107      	bne.n	800379a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_SPI_TransmitReceive+0x68>
 8003792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003796:	2b04      	cmp	r3, #4
 8003798:	d003      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037a0:	e15b      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x82>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x82>
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ba:	e14e      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d003      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2205      	movs	r2, #5
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d007      	beq.n	8003824 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d178      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_TransmitReceive+0x10a>
 8003836:	8b7b      	ldrh	r3, [r7, #26]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d166      	bne.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	e053      	b.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11b      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d113      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d119      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x1b8>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d014      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	b292      	uxth	r2, r2
 80038cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038ea:	f7fe f8c9 	bl	8001a80 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d807      	bhi.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003900:	d003      	beq.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003908:	e0a7      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1a6      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x130>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1a1      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x130>
 800391e:	e07c      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_SPI_TransmitReceive+0x1fc>
 8003928:	8b7b      	ldrh	r3, [r7, #26]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d16b      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003954:	e057      	b.n	8003a06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d11c      	bne.n	800399e <HAL_SPI_TransmitReceive+0x26c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d017      	beq.n	800399e <HAL_SPI_TransmitReceive+0x26c>
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d114      	bne.n	800399e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	7812      	ldrb	r2, [r2, #0]
 8003980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d119      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x2ae>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d014      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039dc:	2301      	movs	r3, #1
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039e0:	f7fe f84e 	bl	8001a80 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d803      	bhi.n	80039f8 <HAL_SPI_TransmitReceive+0x2c6>
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f6:	d102      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x2cc>
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a04:	e029      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1a2      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x224>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d19d      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8f8 	bl	8003c14 <SPI_EndRxTxTransaction>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a36:	e010      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	e000      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3730      	adds	r7, #48	; 0x30
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a86:	e04c      	b.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8e:	d048      	beq.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003a90:	f7fd fff6 	bl	8001a80 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d902      	bls.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d13d      	bne.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003abe:	d111      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac8:	d004      	beq.n	8003ad4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	d107      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d10f      	bne.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e00f      	b.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	bf0c      	ite	eq
 8003b32:	2301      	moveq	r3, #1
 8003b34:	2300      	movne	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1a3      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b5e:	d111      	bne.n	8003b84 <SPI_EndRxTransaction+0x3a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	d004      	beq.n	8003b74 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d107      	bne.n	8003b84 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8c:	d12a      	bne.n	8003be4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d012      	beq.n	8003bbe <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2180      	movs	r1, #128	; 0x80
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff ff67 	bl	8003a76 <SPI_WaitFlagStateUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02d      	beq.n	8003c0a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e026      	b.n	8003c0c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff ff54 	bl	8003a76 <SPI_WaitFlagStateUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e013      	b.n	8003c0c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2101      	movs	r1, #1
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ff41 	bl	8003a76 <SPI_WaitFlagStateUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e000      	b.n	8003c0c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <SPI_EndRxTxTransaction+0x7c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <SPI_EndRxTxTransaction+0x80>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	0d5b      	lsrs	r3, r3, #21
 8003c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3e:	d112      	bne.n	8003c66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff ff13 	bl	8003a76 <SPI_WaitFlagStateUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00f      	b.n	8003c86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d0f2      	beq.n	8003c66 <SPI_EndRxTxTransaction+0x52>
 8003c80:	e000      	b.n	8003c84 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c82:	bf00      	nop
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000000 	.word	0x20000000
 8003c94:	165e9f81 	.word	0x165e9f81

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e01d      	b.n	8003ce6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fd0c 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 f95e 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d007      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d122      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d11b      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f06f 0202 	mvn.w	r2, #2
 8003d62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8ee 	bl	8003f5a <HAL_TIM_IC_CaptureCallback>
 8003d7e:	e005      	b.n	8003d8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8e0 	bl	8003f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8f1 	bl	8003f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d122      	bne.n	8003de6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d11b      	bne.n	8003de6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0204 	mvn.w	r2, #4
 8003db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8c4 	bl	8003f5a <HAL_TIM_IC_CaptureCallback>
 8003dd2:	e005      	b.n	8003de0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8b6 	bl	8003f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8c7 	bl	8003f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d122      	bne.n	8003e3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d11b      	bne.n	8003e3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f06f 0208 	mvn.w	r2, #8
 8003e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f89a 	bl	8003f5a <HAL_TIM_IC_CaptureCallback>
 8003e26:	e005      	b.n	8003e34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f88c 	bl	8003f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f89d 	bl	8003f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d122      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d11b      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f06f 0210 	mvn.w	r2, #16
 8003e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2208      	movs	r2, #8
 8003e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f870 	bl	8003f5a <HAL_TIM_IC_CaptureCallback>
 8003e7a:	e005      	b.n	8003e88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f862 	bl	8003f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f873 	bl	8003f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10e      	bne.n	8003eba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0201 	mvn.w	r2, #1
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7fd fa8d 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f97f 	bl	80041e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f838 	bl	8003f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0220 	mvn.w	r2, #32
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f949 	bl	80041d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a40      	ldr	r2, [pc, #256]	; (80040ac <TIM_Base_SetConfig+0x114>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d00f      	beq.n	8003fd8 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <TIM_Base_SetConfig+0x118>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <TIM_Base_SetConfig+0x11c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <TIM_Base_SetConfig+0x120>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3a      	ldr	r2, [pc, #232]	; (80040bc <TIM_Base_SetConfig+0x124>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d108      	bne.n	8003fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2f      	ldr	r2, [pc, #188]	; (80040ac <TIM_Base_SetConfig+0x114>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d02b      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d027      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <TIM_Base_SetConfig+0x118>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d023      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <TIM_Base_SetConfig+0x11c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01f      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <TIM_Base_SetConfig+0x120>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01b      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a29      	ldr	r2, [pc, #164]	; (80040bc <TIM_Base_SetConfig+0x124>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d017      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <TIM_Base_SetConfig+0x128>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a27      	ldr	r2, [pc, #156]	; (80040c4 <TIM_Base_SetConfig+0x12c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00f      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a26      	ldr	r2, [pc, #152]	; (80040c8 <TIM_Base_SetConfig+0x130>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00b      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a25      	ldr	r2, [pc, #148]	; (80040cc <TIM_Base_SetConfig+0x134>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <TIM_Base_SetConfig+0x138>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <TIM_Base_SetConfig+0x13c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d108      	bne.n	800405c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <TIM_Base_SetConfig+0x114>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0xf8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <TIM_Base_SetConfig+0x124>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d103      	bne.n	8004098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	615a      	str	r2, [r3, #20]
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40010400 	.word	0x40010400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800
 80040cc:	40001800 	.word	0x40001800
 80040d0:	40001c00 	.word	0x40001c00
 80040d4:	40002000 	.word	0x40002000

080040d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e05a      	b.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d01d      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10c      	bne.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40000c00 	.word	0x40000c00
 80041c4:	40010400 	.word	0x40010400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40001800 	.word	0x40001800

080041d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e03f      	b.n	800428a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fa84 	bl	800172c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	; 0x24
 8004228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fc19 	bl	8004a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af02      	add	r7, sp, #8
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	f040 8083 	bne.w	80043ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_UART_Transmit+0x2e>
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e07b      	b.n	80043bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Transmit+0x40>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e074      	b.n	80043bc <HAL_UART_Transmit+0x12a>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2221      	movs	r2, #33	; 0x21
 80042e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042e8:	f7fd fbca 	bl	8001a80 <HAL_GetTick>
 80042ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004302:	e042      	b.n	800438a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	d122      	bne.n	8004362 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	2180      	movs	r1, #128	; 0x80
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa38 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e042      	b.n	80043bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004348:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d103      	bne.n	800435a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3302      	adds	r3, #2
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	e017      	b.n	800438a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3301      	adds	r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	e013      	b.n	800438a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	; 0x80
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa15 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e01f      	b.n	80043bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	60ba      	str	r2, [r7, #8]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1b7      	bne.n	8004304 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2200      	movs	r2, #0
 800439c:	2140      	movs	r1, #64	; 0x40
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f9fc 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e006      	b.n	80043bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d140      	bne.n	8004460 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_UART_Receive_IT+0x26>
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e039      	b.n	8004462 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_UART_Receive_IT+0x38>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e032      	b.n	8004462 <HAL_UART_Receive_IT+0x9e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2222      	movs	r2, #34	; 0x22
 8004420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0220 	orr.w	r2, r2, #32
 800445a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004484:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d124      	bne.n	80044ee <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d018      	beq.n	80044ee <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	2200      	movs	r2, #0
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd fcc7 	bl	8001e5c <HAL_DMA_Abort>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd fedb 	bl	8002294 <HAL_DMA_GetError>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d104      	bne.n	80044ee <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2210      	movs	r2, #16
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e03d      	b.n	800456a <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d124      	bne.n	8004546 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004510:	2b00      	cmp	r3, #0
 8004512:	d018      	beq.n	8004546 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	2200      	movs	r2, #0
 800451a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	4618      	mov	r0, r3
 8004522:	f7fd fc9b 	bl	8001e5c <HAL_DMA_Abort>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd feaf 	bl	8002294 <HAL_DMA_GetError>
 8004536:	4603      	mov	r3, r0
 8004538:	2b20      	cmp	r3, #32
 800453a:	d104      	bne.n	8004546 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2210      	movs	r2, #16
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e011      	b.n	800456a <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_UART_IRQHandler+0x52>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9d6 	bl	8004970 <UART_Receive_IT>
      return;
 80045c4:	e0d1      	b.n	800476a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80b0 	beq.w	800472e <HAL_UART_IRQHandler+0x1ba>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <HAL_UART_IRQHandler+0x70>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80a5 	beq.w	800472e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_UART_IRQHandler+0x90>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	f043 0201 	orr.w	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_UART_IRQHandler+0xb0>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461c:	f043 0202 	orr.w	r2, r3, #2
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_UART_IRQHandler+0xd0>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	f043 0204 	orr.w	r2, r3, #4
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00f      	beq.n	800466e <HAL_UART_IRQHandler+0xfa>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <HAL_UART_IRQHandler+0xee>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	f043 0208 	orr.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d078      	beq.n	8004768 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <HAL_UART_IRQHandler+0x11c>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f970 	bl	8004970 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HAL_UART_IRQHandler+0x144>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d031      	beq.n	800471c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f8b9 	bl	8004830 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d123      	bne.n	8004714 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e8:	4a21      	ldr	r2, [pc, #132]	; (8004770 <HAL_UART_IRQHandler+0x1fc>)
 80046ea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fd fc23 	bl	8001f3c <HAL_DMA_Abort_IT>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d016      	beq.n	800472a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004706:	4610      	mov	r0, r2
 8004708:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470a:	e00e      	b.n	800472a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f83b 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004712:	e00a      	b.n	800472a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f837 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471a:	e006      	b.n	800472a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f833 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004728:	e01e      	b.n	8004768 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472a:	bf00      	nop
    return;
 800472c:	e01c      	b.n	8004768 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_UART_IRQHandler+0x1d6>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8a6 	bl	8004894 <UART_Transmit_IT>
    return;
 8004748:	e00f      	b.n	800476a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_UART_IRQHandler+0x1f6>
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8ee 	bl	8004940 <UART_EndTransmit_IT>
    return;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004768:	bf00      	nop
  }
}
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	0800486d 	.word	0x0800486d

08004774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e02c      	b.n	8004808 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b4:	d028      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047bc:	f7fd f960 	bl	8001a80 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d21d      	bcs.n	8004808 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e00f      	b.n	8004828 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4013      	ands	r3, r2
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	429a      	cmp	r2, r3
 8004824:	d0c3      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004846:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7ff ff7e 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b21      	cmp	r3, #33	; 0x21
 80048a6:	d144      	bne.n	8004932 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b0:	d11a      	bne.n	80048e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	621a      	str	r2, [r3, #32]
 80048da:	e00e      	b.n	80048fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]
 80048e6:	e008      	b.n	80048fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	1c59      	adds	r1, r3, #1
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6211      	str	r1, [r2, #32]
 80048f2:	781a      	ldrb	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4619      	mov	r1, r3
 8004908:	84d1      	strh	r1, [r2, #38]	; 0x26
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800491c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800492c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004956:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff ff07 	bl	8004774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b22      	cmp	r3, #34	; 0x22
 8004982:	d171      	bne.n	8004a68 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498c:	d123      	bne.n	80049d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10e      	bne.n	80049ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	1c9a      	adds	r2, r3, #2
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
 80049b8:	e029      	b.n	8004a0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
 80049d4:	e01b      	b.n	8004a0e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6858      	ldr	r0, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	1c59      	adds	r1, r3, #1
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6291      	str	r1, [r2, #40]	; 0x28
 80049ee:	b2c2      	uxtb	r2, r0
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e00c      	b.n	8004a0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	1c58      	adds	r0, r3, #1
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	6288      	str	r0, [r1, #40]	; 0x28
 8004a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d120      	bne.n	8004a64 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0220 	bic.w	r2, r2, #32
 8004a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fc76 	bl	800134c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e002      	b.n	8004a6a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ab6:	f023 030c 	bic.w	r3, r3, #12
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae2:	f040 818b 	bne.w	8004dfc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4ac1      	ldr	r2, [pc, #772]	; (8004df0 <UART_SetConfig+0x37c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d005      	beq.n	8004afc <UART_SetConfig+0x88>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4abf      	ldr	r2, [pc, #764]	; (8004df4 <UART_SetConfig+0x380>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	f040 80bd 	bne.w	8004c76 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004afc:	f7fd ff6a 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004b00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	461d      	mov	r5, r3
 8004b06:	f04f 0600 	mov.w	r6, #0
 8004b0a:	46a8      	mov	r8, r5
 8004b0c:	46b1      	mov	r9, r6
 8004b0e:	eb18 0308 	adds.w	r3, r8, r8
 8004b12:	eb49 0409 	adc.w	r4, r9, r9
 8004b16:	4698      	mov	r8, r3
 8004b18:	46a1      	mov	r9, r4
 8004b1a:	eb18 0805 	adds.w	r8, r8, r5
 8004b1e:	eb49 0906 	adc.w	r9, r9, r6
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b36:	4688      	mov	r8, r1
 8004b38:	4691      	mov	r9, r2
 8004b3a:	eb18 0005 	adds.w	r0, r8, r5
 8004b3e:	eb49 0106 	adc.w	r1, r9, r6
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	461d      	mov	r5, r3
 8004b48:	f04f 0600 	mov.w	r6, #0
 8004b4c:	196b      	adds	r3, r5, r5
 8004b4e:	eb46 0406 	adc.w	r4, r6, r6
 8004b52:	461a      	mov	r2, r3
 8004b54:	4623      	mov	r3, r4
 8004b56:	f7fb fb55 	bl	8000204 <__aeabi_uldivmod>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4ba5      	ldr	r3, [pc, #660]	; (8004df8 <UART_SetConfig+0x384>)
 8004b62:	fba3 2302 	umull	r2, r3, r3, r2
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	461d      	mov	r5, r3
 8004b70:	f04f 0600 	mov.w	r6, #0
 8004b74:	46a9      	mov	r9, r5
 8004b76:	46b2      	mov	sl, r6
 8004b78:	eb19 0309 	adds.w	r3, r9, r9
 8004b7c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b80:	4699      	mov	r9, r3
 8004b82:	46a2      	mov	sl, r4
 8004b84:	eb19 0905 	adds.w	r9, r9, r5
 8004b88:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ba0:	4689      	mov	r9, r1
 8004ba2:	4692      	mov	sl, r2
 8004ba4:	eb19 0005 	adds.w	r0, r9, r5
 8004ba8:	eb4a 0106 	adc.w	r1, sl, r6
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	461d      	mov	r5, r3
 8004bb2:	f04f 0600 	mov.w	r6, #0
 8004bb6:	196b      	adds	r3, r5, r5
 8004bb8:	eb46 0406 	adc.w	r4, r6, r6
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	f7fb fb20 	bl	8000204 <__aeabi_uldivmod>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b8b      	ldr	r3, [pc, #556]	; (8004df8 <UART_SetConfig+0x384>)
 8004bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	2164      	movs	r1, #100	; 0x64
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	3332      	adds	r3, #50	; 0x32
 8004bde:	4a86      	ldr	r2, [pc, #536]	; (8004df8 <UART_SetConfig+0x384>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bec:	4498      	add	r8, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	461d      	mov	r5, r3
 8004bf2:	f04f 0600 	mov.w	r6, #0
 8004bf6:	46a9      	mov	r9, r5
 8004bf8:	46b2      	mov	sl, r6
 8004bfa:	eb19 0309 	adds.w	r3, r9, r9
 8004bfe:	eb4a 040a 	adc.w	r4, sl, sl
 8004c02:	4699      	mov	r9, r3
 8004c04:	46a2      	mov	sl, r4
 8004c06:	eb19 0905 	adds.w	r9, r9, r5
 8004c0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c22:	4689      	mov	r9, r1
 8004c24:	4692      	mov	sl, r2
 8004c26:	eb19 0005 	adds.w	r0, r9, r5
 8004c2a:	eb4a 0106 	adc.w	r1, sl, r6
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	461d      	mov	r5, r3
 8004c34:	f04f 0600 	mov.w	r6, #0
 8004c38:	196b      	adds	r3, r5, r5
 8004c3a:	eb46 0406 	adc.w	r4, r6, r6
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4623      	mov	r3, r4
 8004c42:	f7fb fadf 	bl	8000204 <__aeabi_uldivmod>
 8004c46:	4603      	mov	r3, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4b6a      	ldr	r3, [pc, #424]	; (8004df8 <UART_SetConfig+0x384>)
 8004c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2164      	movs	r1, #100	; 0x64
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	3332      	adds	r3, #50	; 0x32
 8004c60:	4a65      	ldr	r2, [pc, #404]	; (8004df8 <UART_SetConfig+0x384>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	f003 0207 	and.w	r2, r3, #7
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4442      	add	r2, r8
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	e26f      	b.n	8005156 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c76:	f7fd fe99 	bl	80029ac <HAL_RCC_GetPCLK1Freq>
 8004c7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	461d      	mov	r5, r3
 8004c80:	f04f 0600 	mov.w	r6, #0
 8004c84:	46a8      	mov	r8, r5
 8004c86:	46b1      	mov	r9, r6
 8004c88:	eb18 0308 	adds.w	r3, r8, r8
 8004c8c:	eb49 0409 	adc.w	r4, r9, r9
 8004c90:	4698      	mov	r8, r3
 8004c92:	46a1      	mov	r9, r4
 8004c94:	eb18 0805 	adds.w	r8, r8, r5
 8004c98:	eb49 0906 	adc.w	r9, r9, r6
 8004c9c:	f04f 0100 	mov.w	r1, #0
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ca8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cb0:	4688      	mov	r8, r1
 8004cb2:	4691      	mov	r9, r2
 8004cb4:	eb18 0005 	adds.w	r0, r8, r5
 8004cb8:	eb49 0106 	adc.w	r1, r9, r6
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	461d      	mov	r5, r3
 8004cc2:	f04f 0600 	mov.w	r6, #0
 8004cc6:	196b      	adds	r3, r5, r5
 8004cc8:	eb46 0406 	adc.w	r4, r6, r6
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4623      	mov	r3, r4
 8004cd0:	f7fb fa98 	bl	8000204 <__aeabi_uldivmod>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <UART_SetConfig+0x384>)
 8004cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	461d      	mov	r5, r3
 8004cea:	f04f 0600 	mov.w	r6, #0
 8004cee:	46a9      	mov	r9, r5
 8004cf0:	46b2      	mov	sl, r6
 8004cf2:	eb19 0309 	adds.w	r3, r9, r9
 8004cf6:	eb4a 040a 	adc.w	r4, sl, sl
 8004cfa:	4699      	mov	r9, r3
 8004cfc:	46a2      	mov	sl, r4
 8004cfe:	eb19 0905 	adds.w	r9, r9, r5
 8004d02:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d1a:	4689      	mov	r9, r1
 8004d1c:	4692      	mov	sl, r2
 8004d1e:	eb19 0005 	adds.w	r0, r9, r5
 8004d22:	eb4a 0106 	adc.w	r1, sl, r6
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	f04f 0600 	mov.w	r6, #0
 8004d30:	196b      	adds	r3, r5, r5
 8004d32:	eb46 0406 	adc.w	r4, r6, r6
 8004d36:	461a      	mov	r2, r3
 8004d38:	4623      	mov	r3, r4
 8004d3a:	f7fb fa63 	bl	8000204 <__aeabi_uldivmod>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	460c      	mov	r4, r1
 8004d42:	461a      	mov	r2, r3
 8004d44:	4b2c      	ldr	r3, [pc, #176]	; (8004df8 <UART_SetConfig+0x384>)
 8004d46:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2164      	movs	r1, #100	; 0x64
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	3332      	adds	r3, #50	; 0x32
 8004d58:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <UART_SetConfig+0x384>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d66:	4498      	add	r8, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	461d      	mov	r5, r3
 8004d6c:	f04f 0600 	mov.w	r6, #0
 8004d70:	46a9      	mov	r9, r5
 8004d72:	46b2      	mov	sl, r6
 8004d74:	eb19 0309 	adds.w	r3, r9, r9
 8004d78:	eb4a 040a 	adc.w	r4, sl, sl
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	46a2      	mov	sl, r4
 8004d80:	eb19 0905 	adds.w	r9, r9, r5
 8004d84:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d88:	f04f 0100 	mov.w	r1, #0
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d9c:	4689      	mov	r9, r1
 8004d9e:	4692      	mov	sl, r2
 8004da0:	eb19 0005 	adds.w	r0, r9, r5
 8004da4:	eb4a 0106 	adc.w	r1, sl, r6
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	461d      	mov	r5, r3
 8004dae:	f04f 0600 	mov.w	r6, #0
 8004db2:	196b      	adds	r3, r5, r5
 8004db4:	eb46 0406 	adc.w	r4, r6, r6
 8004db8:	461a      	mov	r2, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	f7fb fa22 	bl	8000204 <__aeabi_uldivmod>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <UART_SetConfig+0x384>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	; 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	3332      	adds	r3, #50	; 0x32
 8004dda:	4a07      	ldr	r2, [pc, #28]	; (8004df8 <UART_SetConfig+0x384>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f003 0207 	and.w	r2, r3, #7
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4442      	add	r2, r8
 8004dec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004dee:	e1b2      	b.n	8005156 <UART_SetConfig+0x6e2>
 8004df0:	40011000 	.word	0x40011000
 8004df4:	40011400 	.word	0x40011400
 8004df8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4ad7      	ldr	r2, [pc, #860]	; (8005160 <UART_SetConfig+0x6ec>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d005      	beq.n	8004e12 <UART_SetConfig+0x39e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4ad6      	ldr	r2, [pc, #856]	; (8005164 <UART_SetConfig+0x6f0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f040 80d1 	bne.w	8004fb4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e12:	f7fd fddf 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004e16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	469a      	mov	sl, r3
 8004e1c:	f04f 0b00 	mov.w	fp, #0
 8004e20:	46d0      	mov	r8, sl
 8004e22:	46d9      	mov	r9, fp
 8004e24:	eb18 0308 	adds.w	r3, r8, r8
 8004e28:	eb49 0409 	adc.w	r4, r9, r9
 8004e2c:	4698      	mov	r8, r3
 8004e2e:	46a1      	mov	r9, r4
 8004e30:	eb18 080a 	adds.w	r8, r8, sl
 8004e34:	eb49 090b 	adc.w	r9, r9, fp
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e4c:	4688      	mov	r8, r1
 8004e4e:	4691      	mov	r9, r2
 8004e50:	eb1a 0508 	adds.w	r5, sl, r8
 8004e54:	eb4b 0609 	adc.w	r6, fp, r9
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	f04f 0400 	mov.w	r4, #0
 8004e6a:	0094      	lsls	r4, r2, #2
 8004e6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e70:	008b      	lsls	r3, r1, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	4623      	mov	r3, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	4631      	mov	r1, r6
 8004e7a:	f7fb f9c3 	bl	8000204 <__aeabi_uldivmod>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	460c      	mov	r4, r1
 8004e82:	461a      	mov	r2, r3
 8004e84:	4bb8      	ldr	r3, [pc, #736]	; (8005168 <UART_SetConfig+0x6f4>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	469b      	mov	fp, r3
 8004e94:	f04f 0c00 	mov.w	ip, #0
 8004e98:	46d9      	mov	r9, fp
 8004e9a:	46e2      	mov	sl, ip
 8004e9c:	eb19 0309 	adds.w	r3, r9, r9
 8004ea0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ea4:	4699      	mov	r9, r3
 8004ea6:	46a2      	mov	sl, r4
 8004ea8:	eb19 090b 	adds.w	r9, r9, fp
 8004eac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ebc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ec0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ec4:	4689      	mov	r9, r1
 8004ec6:	4692      	mov	sl, r2
 8004ec8:	eb1b 0509 	adds.w	r5, fp, r9
 8004ecc:	eb4c 060a 	adc.w	r6, ip, sl
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	f04f 0400 	mov.w	r4, #0
 8004ee2:	0094      	lsls	r4, r2, #2
 8004ee4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ee8:	008b      	lsls	r3, r1, #2
 8004eea:	461a      	mov	r2, r3
 8004eec:	4623      	mov	r3, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	f7fb f987 	bl	8000204 <__aeabi_uldivmod>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b9a      	ldr	r3, [pc, #616]	; (8005168 <UART_SetConfig+0x6f4>)
 8004efe:	fba3 1302 	umull	r1, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2164      	movs	r1, #100	; 0x64
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	3332      	adds	r3, #50	; 0x32
 8004f10:	4a95      	ldr	r2, [pc, #596]	; (8005168 <UART_SetConfig+0x6f4>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f1c:	4498      	add	r8, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	469b      	mov	fp, r3
 8004f22:	f04f 0c00 	mov.w	ip, #0
 8004f26:	46d9      	mov	r9, fp
 8004f28:	46e2      	mov	sl, ip
 8004f2a:	eb19 0309 	adds.w	r3, r9, r9
 8004f2e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f32:	4699      	mov	r9, r3
 8004f34:	46a2      	mov	sl, r4
 8004f36:	eb19 090b 	adds.w	r9, r9, fp
 8004f3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f52:	4689      	mov	r9, r1
 8004f54:	4692      	mov	sl, r2
 8004f56:	eb1b 0509 	adds.w	r5, fp, r9
 8004f5a:	eb4c 060a 	adc.w	r6, ip, sl
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4619      	mov	r1, r3
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	f04f 0400 	mov.w	r4, #0
 8004f70:	0094      	lsls	r4, r2, #2
 8004f72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f76:	008b      	lsls	r3, r1, #2
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	4631      	mov	r1, r6
 8004f80:	f7fb f940 	bl	8000204 <__aeabi_uldivmod>
 8004f84:	4603      	mov	r3, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b77      	ldr	r3, [pc, #476]	; (8005168 <UART_SetConfig+0x6f4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a72      	ldr	r2, [pc, #456]	; (8005168 <UART_SetConfig+0x6f4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4442      	add	r2, r8
 8004fb0:	609a      	str	r2, [r3, #8]
 8004fb2:	e0d0      	b.n	8005156 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fb4:	f7fd fcfa 	bl	80029ac <HAL_RCC_GetPCLK1Freq>
 8004fb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	469a      	mov	sl, r3
 8004fbe:	f04f 0b00 	mov.w	fp, #0
 8004fc2:	46d0      	mov	r8, sl
 8004fc4:	46d9      	mov	r9, fp
 8004fc6:	eb18 0308 	adds.w	r3, r8, r8
 8004fca:	eb49 0409 	adc.w	r4, r9, r9
 8004fce:	4698      	mov	r8, r3
 8004fd0:	46a1      	mov	r9, r4
 8004fd2:	eb18 080a 	adds.w	r8, r8, sl
 8004fd6:	eb49 090b 	adc.w	r9, r9, fp
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fe6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fee:	4688      	mov	r8, r1
 8004ff0:	4691      	mov	r9, r2
 8004ff2:	eb1a 0508 	adds.w	r5, sl, r8
 8004ff6:	eb4b 0609 	adc.w	r6, fp, r9
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4619      	mov	r1, r3
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	f04f 0400 	mov.w	r4, #0
 800500c:	0094      	lsls	r4, r2, #2
 800500e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005012:	008b      	lsls	r3, r1, #2
 8005014:	461a      	mov	r2, r3
 8005016:	4623      	mov	r3, r4
 8005018:	4628      	mov	r0, r5
 800501a:	4631      	mov	r1, r6
 800501c:	f7fb f8f2 	bl	8000204 <__aeabi_uldivmod>
 8005020:	4603      	mov	r3, r0
 8005022:	460c      	mov	r4, r1
 8005024:	461a      	mov	r2, r3
 8005026:	4b50      	ldr	r3, [pc, #320]	; (8005168 <UART_SetConfig+0x6f4>)
 8005028:	fba3 2302 	umull	r2, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	469b      	mov	fp, r3
 8005036:	f04f 0c00 	mov.w	ip, #0
 800503a:	46d9      	mov	r9, fp
 800503c:	46e2      	mov	sl, ip
 800503e:	eb19 0309 	adds.w	r3, r9, r9
 8005042:	eb4a 040a 	adc.w	r4, sl, sl
 8005046:	4699      	mov	r9, r3
 8005048:	46a2      	mov	sl, r4
 800504a:	eb19 090b 	adds.w	r9, r9, fp
 800504e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005052:	f04f 0100 	mov.w	r1, #0
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800505e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005062:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005066:	4689      	mov	r9, r1
 8005068:	4692      	mov	sl, r2
 800506a:	eb1b 0509 	adds.w	r5, fp, r9
 800506e:	eb4c 060a 	adc.w	r6, ip, sl
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4619      	mov	r1, r3
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f04f 0400 	mov.w	r4, #0
 8005084:	0094      	lsls	r4, r2, #2
 8005086:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800508a:	008b      	lsls	r3, r1, #2
 800508c:	461a      	mov	r2, r3
 800508e:	4623      	mov	r3, r4
 8005090:	4628      	mov	r0, r5
 8005092:	4631      	mov	r1, r6
 8005094:	f7fb f8b6 	bl	8000204 <__aeabi_uldivmod>
 8005098:	4603      	mov	r3, r0
 800509a:	460c      	mov	r4, r1
 800509c:	461a      	mov	r2, r3
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <UART_SetConfig+0x6f4>)
 80050a0:	fba3 1302 	umull	r1, r3, r3, r2
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	2164      	movs	r1, #100	; 0x64
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	3332      	adds	r3, #50	; 0x32
 80050b2:	4a2d      	ldr	r2, [pc, #180]	; (8005168 <UART_SetConfig+0x6f4>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050be:	4498      	add	r8, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	469b      	mov	fp, r3
 80050c4:	f04f 0c00 	mov.w	ip, #0
 80050c8:	46d9      	mov	r9, fp
 80050ca:	46e2      	mov	sl, ip
 80050cc:	eb19 0309 	adds.w	r3, r9, r9
 80050d0:	eb4a 040a 	adc.w	r4, sl, sl
 80050d4:	4699      	mov	r9, r3
 80050d6:	46a2      	mov	sl, r4
 80050d8:	eb19 090b 	adds.w	r9, r9, fp
 80050dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050f4:	4689      	mov	r9, r1
 80050f6:	4692      	mov	sl, r2
 80050f8:	eb1b 0509 	adds.w	r5, fp, r9
 80050fc:	eb4c 060a 	adc.w	r6, ip, sl
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4619      	mov	r1, r3
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	0094      	lsls	r4, r2, #2
 8005114:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005118:	008b      	lsls	r3, r1, #2
 800511a:	461a      	mov	r2, r3
 800511c:	4623      	mov	r3, r4
 800511e:	4628      	mov	r0, r5
 8005120:	4631      	mov	r1, r6
 8005122:	f7fb f86f 	bl	8000204 <__aeabi_uldivmod>
 8005126:	4603      	mov	r3, r0
 8005128:	460c      	mov	r4, r1
 800512a:	461a      	mov	r2, r3
 800512c:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <UART_SetConfig+0x6f4>)
 800512e:	fba3 1302 	umull	r1, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2164      	movs	r1, #100	; 0x64
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	3332      	adds	r3, #50	; 0x32
 8005140:	4a09      	ldr	r2, [pc, #36]	; (8005168 <UART_SetConfig+0x6f4>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 020f 	and.w	r2, r3, #15
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4442      	add	r2, r8
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	e7ff      	b.n	8005156 <UART_SetConfig+0x6e2>
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005160:	40011000 	.word	0x40011000
 8005164:	40011400 	.word	0x40011400
 8005168:	51eb851f 	.word	0x51eb851f

0800516c <__libc_init_array>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	4e0d      	ldr	r6, [pc, #52]	; (80051a4 <__libc_init_array+0x38>)
 8005170:	4c0d      	ldr	r4, [pc, #52]	; (80051a8 <__libc_init_array+0x3c>)
 8005172:	1ba4      	subs	r4, r4, r6
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	2500      	movs	r5, #0
 8005178:	42a5      	cmp	r5, r4
 800517a:	d109      	bne.n	8005190 <__libc_init_array+0x24>
 800517c:	4e0b      	ldr	r6, [pc, #44]	; (80051ac <__libc_init_array+0x40>)
 800517e:	4c0c      	ldr	r4, [pc, #48]	; (80051b0 <__libc_init_array+0x44>)
 8005180:	f000 f820 	bl	80051c4 <_init>
 8005184:	1ba4      	subs	r4, r4, r6
 8005186:	10a4      	asrs	r4, r4, #2
 8005188:	2500      	movs	r5, #0
 800518a:	42a5      	cmp	r5, r4
 800518c:	d105      	bne.n	800519a <__libc_init_array+0x2e>
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005194:	4798      	blx	r3
 8005196:	3501      	adds	r5, #1
 8005198:	e7ee      	b.n	8005178 <__libc_init_array+0xc>
 800519a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800519e:	4798      	blx	r3
 80051a0:	3501      	adds	r5, #1
 80051a2:	e7f2      	b.n	800518a <__libc_init_array+0x1e>
 80051a4:	08005518 	.word	0x08005518
 80051a8:	08005518 	.word	0x08005518
 80051ac:	08005518 	.word	0x08005518
 80051b0:	0800551c 	.word	0x0800551c

080051b4 <memset>:
 80051b4:	4402      	add	r2, r0
 80051b6:	4603      	mov	r3, r0
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d100      	bne.n	80051be <memset+0xa>
 80051bc:	4770      	bx	lr
 80051be:	f803 1b01 	strb.w	r1, [r3], #1
 80051c2:	e7f9      	b.n	80051b8 <memset+0x4>

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
