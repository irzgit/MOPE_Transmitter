
Stm32f446-Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004708  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b5c  08004b5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b64  08004b64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08004bdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004bdc  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d998  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f19  00000000  00000000  0002da38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  000303a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e04  00000000  00000000  00030d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000904d  00000000  00000000  00052b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca463  00000000  00000000  0005bb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  00126030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048c0 	.word	0x080048c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080048c0 	.word	0x080048c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
 80005b8:	f000 fe3e 	bl	8001238 <SPIWrite>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 fe36 	bl	8001238 <SPIWrite>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 fe2e 	bl	8001238 <SPIWrite>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fe26 	bl	8001238 <SPIWrite>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
 800060c:	f000 fe6a 	bl	80012e4 <BurstWrite>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080048f8 	.word	0x080048f8

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f000 fe02 	bl	8001238 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f000 fdfe 	bl	8001238 <SPIWrite>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08004904 	.word	0x08004904

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
 800065c:	f000 fdec 	bl	8001238 <SPIWrite>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08004908 	.word	0x08004908

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
 8000680:	f000 fdda 	bl	8001238 <SPIWrite>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	0800490c 	.word	0x0800490c

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x8C); // БЕЗ CRC
 80006a2:	218c      	movs	r1, #140	; 0x8c
 80006a4:	201d      	movs	r0, #29
 80006a6:	f000 fdc7 	bl	8001238 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // с CRC
	//SPIWrite(LR_RegDetectOptimize,0xC5); // Только для sf=6
	//SPIWrite(LR_RegDetecionThreshold,0x0C); // Только для sf=6
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77); //67
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
 80006c8:	f000 fdb6 	bl	8001238 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
 80006d4:	f000 fdb0 	bl	8001238 <SPIWrite>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f000 fd9f 	bl	8001238 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f000 fd99 	bl	8001238 <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800070e:	b590      	push	{r4, r7, lr}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	4604      	mov	r4, r0
 8000716:	4608      	mov	r0, r1
 8000718:	4611      	mov	r1, r2
 800071a:	461a      	mov	r2, r3
 800071c:	4623      	mov	r3, r4
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4603      	mov	r3, r0
 8000722:	71bb      	strb	r3, [r7, #6]
 8000724:	460b      	mov	r3, r1
 8000726:	717b      	strb	r3, [r7, #5]
 8000728:	4613      	mov	r3, r2
 800072a:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	019b      	lsls	r3, r3, #6
 8000730:	b2da      	uxtb	r2, r3
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4413      	add	r3, r2
 800073a:	b2da      	uxtb	r2, r3
 800073c:	797b      	ldrb	r3, [r7, #5]
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4413      	add	r3, r2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	793b      	ldrb	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	2040      	movs	r0, #64	; 0x40
 8000750:	f000 fd72 	bl	8001238 <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <Rf96_irqMaskRX>:
{
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
}
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegIrqFlagsMask,0x3F); // Без CRC
	SPIWrite(LR_RegIrqFlagsMask,0x1F); //с CRC
 8000760:	211f      	movs	r1, #31
 8000762:	2011      	movs	r0, #17
 8000764:	f000 fd68 	bl	8001238 <SPIWrite>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4619      	mov	r1, r3
 800077a:	2022      	movs	r0, #34	; 0x22
 800077c:	f000 fd5c 	bl	8001238 <SPIWrite>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Rf96_RX_FifoAdr>:
{
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
}
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4619      	mov	r1, r3
 8000796:	200f      	movs	r0, #15
 8000798:	f000 fd4e 	bl	8001238 <SPIWrite>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4619      	mov	r1, r3
 80007b2:	200d      	movs	r0, #13
 80007b4:	f000 fd40 	bl	8001238 <SPIWrite>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 80007c4:	2185      	movs	r1, #133	; 0x85
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 fd36 	bl	8001238 <SPIWrite>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <Rf96_DataRX_From_FiFO>:
{
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
}
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 80007d8:	2010      	movs	r0, #16
 80007da:	f000 fd0f 	bl	80011fc <SPIRead>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4619      	mov	r1, r3
 80007e6:	200d      	movs	r0, #13
 80007e8:	f000 fd26 	bl	8001238 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 80007ec:	2013      	movs	r0, #19
 80007ee:	f000 fd05 	bl	80011fc <SPIRead>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	461a      	mov	r2, r3
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fd3f 	bl	8001280 <SPIBurstRead>
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 800080e:	f7ff fedf 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 8000812:	f7ff fee5 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff feea 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fefd 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff10 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff ff1f 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 800082e:	2200      	movs	r2, #0
 8000830:	2104      	movs	r1, #4
 8000832:	2007      	movs	r0, #7
 8000834:	f7ff ff2c 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000838:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800083c:	2101      	movs	r1, #1
 800083e:	2006      	movs	r0, #6
 8000840:	f7ff ff37 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 8000844:	2008      	movs	r0, #8
 8000846:	f7ff ff4b 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 800084a:	f7ff feb9 	bl	80005c0 <Rf96_Standby>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}

08000852 <Rf96_Lora_RX_mode>:
	  Rf96_FIFO_point(0x80);

}
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	  SPIWrite(REG_LR_PADAC,0x84);                            //Normal and Rx
 8000856:	2184      	movs	r1, #132	; 0x84
 8000858:	204d      	movs	r0, #77	; 0x4d
 800085a:	f000 fced 	bl	8001238 <SPIWrite>
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800085e:	2100      	movs	r1, #0
 8000860:	2024      	movs	r0, #36	; 0x24
 8000862:	f000 fce9 	bl	8001238 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000866:	2302      	movs	r3, #2
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff4e 	bl	800070e <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000872:	f7ff ff73 	bl	800075c <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000876:	f7ff fe9b 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(29);
 800087a:	201d      	movs	r0, #29
 800087c:	f7ff ff76 	bl	800076c <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff81 	bl	8000788 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ff8c 	bl	80007a4 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 800088c:	f7ff ff98 	bl	80007c0 <Rf96_RX_Continuous_mode>

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <transmit>:
/* USER CODE BEGIN 0 */



void transmit(uint8_t str[27])
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af08      	add	r7, sp, #32
 800089a:	6078      	str	r0, [r7, #4]

				// первый акселерометр
				// Ось Х
				xIntSumFirst = (str[0] & 0x0F) * 10 + (str[1] >> 4); // целочисленная сумма X
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f003 020f 	and.w	r2, r3, #15
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	461a      	mov	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	091b      	lsrs	r3, r3, #4
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	4aa3      	ldr	r2, [pc, #652]	; (8000b48 <transmit+0x2b4>)
 80008bc:	6013      	str	r3, [r2, #0]
				x5First = str[1] & 0x0F; //перевод правого бита 5го байта
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	4aa0      	ldr	r2, [pc, #640]	; (8000b4c <transmit+0x2b8>)
 80008ca:	6013      	str	r3, [r2, #0]
				x60First = str[2] >> 4; //перевод левого бита 6го байта
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3302      	adds	r3, #2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b9d      	ldr	r3, [pc, #628]	; (8000b50 <transmit+0x2bc>)
 80008da:	601a      	str	r2, [r3, #0]
				x65First = str[2] & 0x0F; //перевод правого бита 6го байта
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3302      	adds	r3, #2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	4a9b      	ldr	r2, [pc, #620]	; (8000b54 <transmit+0x2c0>)
 80008e8:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d ",xIntSumFirst, x5First, x60First);
 80008ea:	4b97      	ldr	r3, [pc, #604]	; (8000b48 <transmit+0x2b4>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b97      	ldr	r3, [pc, #604]	; (8000b4c <transmit+0x2b8>)
 80008f0:	6819      	ldr	r1, [r3, #0]
 80008f2:	4b97      	ldr	r3, [pc, #604]	; (8000b50 <transmit+0x2bc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	460b      	mov	r3, r1
 80008fa:	4997      	ldr	r1, [pc, #604]	; (8000b58 <transmit+0x2c4>)
 80008fc:	4897      	ldr	r0, [pc, #604]	; (8000b5c <transmit+0x2c8>)
 80008fe:	f003 fbd9 	bl	80040b4 <siprintf>
				if((str[0] >> 4) == 0x01)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b01      	cmp	r3, #1
 800090c:	d102      	bne.n	8000914 <transmit+0x80>
					xvalFirst[0] = '-';
 800090e:	4b93      	ldr	r3, [pc, #588]	; (8000b5c <transmit+0x2c8>)
 8000910:	222d      	movs	r2, #45	; 0x2d
 8000912:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[3] & 0x0F) * 10 + (str[4] >> 4);	// целочисленная сумма Y
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3303      	adds	r3, #3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	f003 020f 	and.w	r2, r3, #15
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3304      	adds	r3, #4
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4413      	add	r3, r2
 8000934:	4a8a      	ldr	r2, [pc, #552]	; (8000b60 <transmit+0x2cc>)
 8000936:	6013      	str	r3, [r2, #0]
				y8First = str[4] & 0x0F; //перевод правого бита 8го байта
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3304      	adds	r3, #4
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	4a88      	ldr	r2, [pc, #544]	; (8000b64 <transmit+0x2d0>)
 8000944:	6013      	str	r3, [r2, #0]
				y90First = str[5] >> 4; //перевод левого бита 9го байта
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3305      	adds	r3, #5
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461a      	mov	r2, r3
 8000952:	4b85      	ldr	r3, [pc, #532]	; (8000b68 <transmit+0x2d4>)
 8000954:	601a      	str	r2, [r3, #0]
				y95First = str[5] & 0x0F; //перевод правого бита 9го байта
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3305      	adds	r3, #5
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f003 030f 	and.w	r3, r3, #15
 8000960:	4a82      	ldr	r2, [pc, #520]	; (8000b6c <transmit+0x2d8>)
 8000962:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d ", yIntSumFirst, y8First, y90First);
 8000964:	4b7e      	ldr	r3, [pc, #504]	; (8000b60 <transmit+0x2cc>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b7e      	ldr	r3, [pc, #504]	; (8000b64 <transmit+0x2d0>)
 800096a:	6819      	ldr	r1, [r3, #0]
 800096c:	4b7e      	ldr	r3, [pc, #504]	; (8000b68 <transmit+0x2d4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	460b      	mov	r3, r1
 8000974:	4978      	ldr	r1, [pc, #480]	; (8000b58 <transmit+0x2c4>)
 8000976:	487e      	ldr	r0, [pc, #504]	; (8000b70 <transmit+0x2dc>)
 8000978:	f003 fb9c 	bl	80040b4 <siprintf>
				if((str[3] >> 4) == 0x01)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3303      	adds	r3, #3
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	091b      	lsrs	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b01      	cmp	r3, #1
 8000988:	d102      	bne.n	8000990 <transmit+0xfc>
					yvalFirst[0] = '-';
 800098a:	4b79      	ldr	r3, [pc, #484]	; (8000b70 <transmit+0x2dc>)
 800098c:	222d      	movs	r2, #45	; 0x2d
 800098e:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[6] & 0x0F) * 10 + (str[7] >> 4); //целочисленная сумма Z
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3306      	adds	r3, #6
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f003 020f 	and.w	r2, r3, #15
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	461a      	mov	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3307      	adds	r3, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	4a70      	ldr	r2, [pc, #448]	; (8000b74 <transmit+0x2e0>)
 80009b2:	6013      	str	r3, [r2, #0]
				z11First = str[7] & 0x0F; //перевод правого бита 11го байта
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3307      	adds	r3, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	4a6e      	ldr	r2, [pc, #440]	; (8000b78 <transmit+0x2e4>)
 80009c0:	6013      	str	r3, [r2, #0]
				z120First = str[8] >> 4; //перевод левого бита 12го байта
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3308      	adds	r3, #8
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b6b      	ldr	r3, [pc, #428]	; (8000b7c <transmit+0x2e8>)
 80009d0:	601a      	str	r2, [r3, #0]
				z125First = str[8] & 0x0F; //перевод правого бита 12го байта
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3308      	adds	r3, #8
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f003 030f 	and.w	r3, r3, #15
 80009dc:	4a68      	ldr	r2, [pc, #416]	; (8000b80 <transmit+0x2ec>)
 80009de:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d ", zIntSumFirst, z11First, z120First);
 80009e0:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <transmit+0x2e0>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b64      	ldr	r3, [pc, #400]	; (8000b78 <transmit+0x2e4>)
 80009e6:	6819      	ldr	r1, [r3, #0]
 80009e8:	4b64      	ldr	r3, [pc, #400]	; (8000b7c <transmit+0x2e8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	460b      	mov	r3, r1
 80009f0:	4959      	ldr	r1, [pc, #356]	; (8000b58 <transmit+0x2c4>)
 80009f2:	4864      	ldr	r0, [pc, #400]	; (8000b84 <transmit+0x2f0>)
 80009f4:	f003 fb5e 	bl	80040b4 <siprintf>
				if((str[6] >> 4) == 0x01)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3306      	adds	r3, #6
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d102      	bne.n	8000a0c <transmit+0x178>
					zvalFirst[0] = '-';
 8000a06:	4b5f      	ldr	r3, [pc, #380]	; (8000b84 <transmit+0x2f0>)
 8000a08:	222d      	movs	r2, #45	; 0x2d
 8000a0a:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[9] & 0x0F) * 10 + (str[10] >> 4); // целочисленная сумма X
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3309      	adds	r3, #9
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f003 020f 	and.w	r2, r3, #15
 8000a16:	4613      	mov	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	461a      	mov	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	330a      	adds	r3, #10
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a56      	ldr	r2, [pc, #344]	; (8000b88 <transmit+0x2f4>)
 8000a2e:	6013      	str	r3, [r2, #0]
				x5Second = str[10] & 0x0F; //перевод правого бита 5го байта
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	330a      	adds	r3, #10
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	4a54      	ldr	r2, [pc, #336]	; (8000b8c <transmit+0x2f8>)
 8000a3c:	6013      	str	r3, [r2, #0]
				x60Second = str[11] >> 4; //перевод левого бита 6го байта
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	330b      	adds	r3, #11
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b51      	ldr	r3, [pc, #324]	; (8000b90 <transmit+0x2fc>)
 8000a4c:	601a      	str	r2, [r3, #0]
				x65Second = str[11] & 0x0F; //перевод правого бита 6го байта
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	330b      	adds	r3, #11
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <transmit+0x300>)
 8000a5a:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d ",xIntSumSecond, x5Second, x60Second);
 8000a5c:	4b4a      	ldr	r3, [pc, #296]	; (8000b88 <transmit+0x2f4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <transmit+0x2f8>)
 8000a62:	6819      	ldr	r1, [r3, #0]
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <transmit+0x2fc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	493a      	ldr	r1, [pc, #232]	; (8000b58 <transmit+0x2c4>)
 8000a6e:	484a      	ldr	r0, [pc, #296]	; (8000b98 <transmit+0x304>)
 8000a70:	f003 fb20 	bl	80040b4 <siprintf>
				if((str[9] >> 4) == 0x01)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3309      	adds	r3, #9
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d102      	bne.n	8000a88 <transmit+0x1f4>
					xvalSecond[0] = '-';
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <transmit+0x304>)
 8000a84:	222d      	movs	r2, #45	; 0x2d
 8000a86:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[12] & 0x0F) * 10 + (str[13] >> 4);	// целочисленная сумма Y
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	330c      	adds	r3, #12
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	f003 020f 	and.w	r2, r3, #15
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	330d      	adds	r3, #13
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	091b      	lsrs	r3, r3, #4
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a3c      	ldr	r2, [pc, #240]	; (8000b9c <transmit+0x308>)
 8000aaa:	6013      	str	r3, [r2, #0]
				y8Second = str[13] & 0x0F; //перевод правого бита 8го байта
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	330d      	adds	r3, #13
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <transmit+0x30c>)
 8000ab8:	6013      	str	r3, [r2, #0]
				y90Second = str[14] >> 4; //перевод левого бита 9го байта
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	330e      	adds	r3, #14
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	091b      	lsrs	r3, r3, #4
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <transmit+0x310>)
 8000ac8:	601a      	str	r2, [r3, #0]
				y95Second = str[14] & 0x0F; //перевод правого бита 9го байта
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	330e      	adds	r3, #14
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	4a34      	ldr	r2, [pc, #208]	; (8000ba8 <transmit+0x314>)
 8000ad6:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d ", yIntSumSecond, y8Second, y90Second);
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <transmit+0x308>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <transmit+0x30c>)
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <transmit+0x310>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	491b      	ldr	r1, [pc, #108]	; (8000b58 <transmit+0x2c4>)
 8000aea:	4830      	ldr	r0, [pc, #192]	; (8000bac <transmit+0x318>)
 8000aec:	f003 fae2 	bl	80040b4 <siprintf>
				if((str[12] >> 4) == 0x01)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	330c      	adds	r3, #12
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	091b      	lsrs	r3, r3, #4
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d102      	bne.n	8000b04 <transmit+0x270>
					yvalSecond[0] = '-';
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <transmit+0x318>)
 8000b00:	222d      	movs	r2, #45	; 0x2d
 8000b02:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[15] & 0x0F) * 10 + (str[16] >> 4); //целочисленная сумма Z
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	330f      	adds	r3, #15
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	f003 020f 	and.w	r2, r3, #15
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3310      	adds	r3, #16
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <transmit+0x31c>)
 8000b26:	6013      	str	r3, [r2, #0]
				z11Second = str[16] & 0x0F; //перевод правого бита 11го байта
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3310      	adds	r3, #16
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <transmit+0x320>)
 8000b34:	6013      	str	r3, [r2, #0]
				z120Second = str[17] >> 4; //перевод левого бита 12го байта
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3311      	adds	r3, #17
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	091b      	lsrs	r3, r3, #4
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <transmit+0x324>)
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e039      	b.n	8000bbc <transmit+0x328>
 8000b48:	20000280 	.word	0x20000280
 8000b4c:	200001ac 	.word	0x200001ac
 8000b50:	20000274 	.word	0x20000274
 8000b54:	200001b8 	.word	0x200001b8
 8000b58:	080048d8 	.word	0x080048d8
 8000b5c:	200000c0 	.word	0x200000c0
 8000b60:	2000014c 	.word	0x2000014c
 8000b64:	20000150 	.word	0x20000150
 8000b68:	200000d4 	.word	0x200000d4
 8000b6c:	2000013c 	.word	0x2000013c
 8000b70:	200000d8 	.word	0x200000d8
 8000b74:	200001c0 	.word	0x200001c0
 8000b78:	20000124 	.word	0x20000124
 8000b7c:	200000e4 	.word	0x200000e4
 8000b80:	200001b4 	.word	0x200001b4
 8000b84:	200001c4 	.word	0x200001c4
 8000b88:	20000148 	.word	0x20000148
 8000b8c:	20000278 	.word	0x20000278
 8000b90:	200000e0 	.word	0x200000e0
 8000b94:	20000144 	.word	0x20000144
 8000b98:	200000a4 	.word	0x200000a4
 8000b9c:	20000138 	.word	0x20000138
 8000ba0:	200001b0 	.word	0x200001b0
 8000ba4:	20000228 	.word	0x20000228
 8000ba8:	200000a0 	.word	0x200000a0
 8000bac:	20000154 	.word	0x20000154
 8000bb0:	2000009c 	.word	0x2000009c
 8000bb4:	20000288 	.word	0x20000288
 8000bb8:	20000128 	.word	0x20000128
				z125Second = str[17] & 0x0F; //перевод правого бита 12го байта
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3311      	adds	r3, #17
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	4a79      	ldr	r2, [pc, #484]	; (8000dac <transmit+0x518>)
 8000bc8:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d ", zIntSumSecond, z11Second, z120Second);
 8000bca:	4b79      	ldr	r3, [pc, #484]	; (8000db0 <transmit+0x51c>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b79      	ldr	r3, [pc, #484]	; (8000db4 <transmit+0x520>)
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	4b79      	ldr	r3, [pc, #484]	; (8000db8 <transmit+0x524>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	4978      	ldr	r1, [pc, #480]	; (8000dbc <transmit+0x528>)
 8000bdc:	4878      	ldr	r0, [pc, #480]	; (8000dc0 <transmit+0x52c>)
 8000bde:	f003 fa69 	bl	80040b4 <siprintf>
				if((str[15] >> 4) == 0x01)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	330f      	adds	r3, #15
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d102      	bne.n	8000bf6 <transmit+0x362>
					zvalSecond[0] = '-';
 8000bf0:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <transmit+0x52c>)
 8000bf2:	222d      	movs	r2, #45	; 0x2d
 8000bf4:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[18] & 0x0F) * 10 + (str[19] >> 4); // целочисленная сумма X
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3312      	adds	r3, #18
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f003 020f 	and.w	r2, r3, #15
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3313      	adds	r3, #19
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	4a6b      	ldr	r2, [pc, #428]	; (8000dc4 <transmit+0x530>)
 8000c18:	6013      	str	r3, [r2, #0]
				x5Third = str[19] & 0x0F; //перевод правого бита 5го байта
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3313      	adds	r3, #19
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	4a68      	ldr	r2, [pc, #416]	; (8000dc8 <transmit+0x534>)
 8000c26:	6013      	str	r3, [r2, #0]
				x60Third = str[20] >> 4; //перевод левого бита 6го байта
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3314      	adds	r3, #20
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b65      	ldr	r3, [pc, #404]	; (8000dcc <transmit+0x538>)
 8000c36:	601a      	str	r2, [r3, #0]
				x65Third = str[20] & 0x0F; //перевод правого бита 6го байта
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3314      	adds	r3, #20
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	4a63      	ldr	r2, [pc, #396]	; (8000dd0 <transmit+0x53c>)
 8000c44:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d ",xIntSumThird, x5Third, x60Third);
 8000c46:	4b5f      	ldr	r3, [pc, #380]	; (8000dc4 <transmit+0x530>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <transmit+0x534>)
 8000c4c:	6819      	ldr	r1, [r3, #0]
 8000c4e:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <transmit+0x538>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	460b      	mov	r3, r1
 8000c56:	4959      	ldr	r1, [pc, #356]	; (8000dbc <transmit+0x528>)
 8000c58:	485e      	ldr	r0, [pc, #376]	; (8000dd4 <transmit+0x540>)
 8000c5a:	f003 fa2b 	bl	80040b4 <siprintf>
				if((str[18] >> 4) == 0x01)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3312      	adds	r3, #18
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	091b      	lsrs	r3, r3, #4
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d102      	bne.n	8000c72 <transmit+0x3de>
					xvalThird[0] = '-';
 8000c6c:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <transmit+0x540>)
 8000c6e:	222d      	movs	r2, #45	; 0x2d
 8000c70:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[21] & 0x0F) * 10 + (str[22] >> 4);	// целочисленная сумма Y
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3315      	adds	r3, #21
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	f003 020f 	and.w	r2, r3, #15
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3316      	adds	r3, #22
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	4a51      	ldr	r2, [pc, #324]	; (8000dd8 <transmit+0x544>)
 8000c94:	6013      	str	r3, [r2, #0]
				y8Third = str[22] & 0x0F; //перевод правого бита 8го байта
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3316      	adds	r3, #22
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	f003 030f 	and.w	r3, r3, #15
 8000ca0:	4a4e      	ldr	r2, [pc, #312]	; (8000ddc <transmit+0x548>)
 8000ca2:	6013      	str	r3, [r2, #0]
				y90Third = str[23] >> 4; //перевод левого бита 9го байта
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3317      	adds	r3, #23
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <transmit+0x54c>)
 8000cb2:	601a      	str	r2, [r3, #0]
				y95Third = str[23] & 0x0F; //перевод правого бита 9го байта
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3317      	adds	r3, #23
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <transmit+0x550>)
 8000cc0:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d ", yIntSumThird, y8Third, y90Third);
 8000cc2:	4b45      	ldr	r3, [pc, #276]	; (8000dd8 <transmit+0x544>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <transmit+0x548>)
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <transmit+0x54c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	493a      	ldr	r1, [pc, #232]	; (8000dbc <transmit+0x528>)
 8000cd4:	4844      	ldr	r0, [pc, #272]	; (8000de8 <transmit+0x554>)
 8000cd6:	f003 f9ed 	bl	80040b4 <siprintf>
				if((str[21] >> 4) == 0x01)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3315      	adds	r3, #21
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d102      	bne.n	8000cee <transmit+0x45a>
					yvalThird[0] = '-';
 8000ce8:	4b3f      	ldr	r3, [pc, #252]	; (8000de8 <transmit+0x554>)
 8000cea:	222d      	movs	r2, #45	; 0x2d
 8000cec:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[24] & 0x0F) * 10 + (str[25] >> 4); //целочисленная сумма Z
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f003 020f 	and.w	r2, r3, #15
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3319      	adds	r3, #25
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a37      	ldr	r2, [pc, #220]	; (8000dec <transmit+0x558>)
 8000d10:	6013      	str	r3, [r2, #0]
				z11Third = str[25] & 0x0F; //перевод правого бита 11го байта
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3319      	adds	r3, #25
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	4a34      	ldr	r2, [pc, #208]	; (8000df0 <transmit+0x55c>)
 8000d1e:	6013      	str	r3, [r2, #0]
				z120Third = str[26] >> 4; //перевод левого бита 12го байта
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	331a      	adds	r3, #26
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <transmit+0x560>)
 8000d2e:	601a      	str	r2, [r3, #0]
				z125Third = str[26] & 0x0F; //перевод правого бита 12го байта
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	331a      	adds	r3, #26
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <transmit+0x564>)
 8000d3c:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d ", zIntSumThird, z11Third, z120Third);
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <transmit+0x558>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <transmit+0x55c>)
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <transmit+0x560>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	491b      	ldr	r1, [pc, #108]	; (8000dbc <transmit+0x528>)
 8000d50:	482a      	ldr	r0, [pc, #168]	; (8000dfc <transmit+0x568>)
 8000d52:	f003 f9af 	bl	80040b4 <siprintf>
				if((str[24] >> 4) == 0x01)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3318      	adds	r3, #24
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d102      	bne.n	8000d6a <transmit+0x4d6>
					zvalThird[0] = '-';
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <transmit+0x568>)
 8000d66:	222d      	movs	r2, #45	; 0x2d
 8000d68:	701a      	strb	r2, [r3, #0]

			sprintf(str1, "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <transmit+0x568>)
 8000d6c:	9306      	str	r3, [sp, #24]
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <transmit+0x554>)
 8000d70:	9305      	str	r3, [sp, #20]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <transmit+0x540>)
 8000d74:	9304      	str	r3, [sp, #16]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <transmit+0x52c>)
 8000d78:	9303      	str	r3, [sp, #12]
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <transmit+0x56c>)
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <transmit+0x570>)
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <transmit+0x574>)
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <transmit+0x578>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <transmit+0x57c>)
 8000d8a:	4922      	ldr	r1, [pc, #136]	; (8000e14 <transmit+0x580>)
 8000d8c:	4822      	ldr	r0, [pc, #136]	; (8000e18 <transmit+0x584>)
 8000d8e:	f003 f991 	bl	80040b4 <siprintf>
	HAL_UART_Abort(&huart2);
 8000d92:	4822      	ldr	r0, [pc, #136]	; (8000e1c <transmit+0x588>)
 8000d94:	f002 fb1e 	bl	80033d4 <HAL_UART_Abort>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, 64);
 8000d98:	2240      	movs	r2, #64	; 0x40
 8000d9a:	491f      	ldr	r1, [pc, #124]	; (8000e18 <transmit+0x584>)
 8000d9c:	481f      	ldr	r0, [pc, #124]	; (8000e1c <transmit+0x588>)
 8000d9e:	f002 fad4 	bl	800334a <HAL_UART_Transmit_IT>



}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000ac 	.word	0x200000ac
 8000db0:	2000009c 	.word	0x2000009c
 8000db4:	20000288 	.word	0x20000288
 8000db8:	20000128 	.word	0x20000128
 8000dbc:	080048d8 	.word	0x080048d8
 8000dc0:	2000012c 	.word	0x2000012c
 8000dc4:	20000284 	.word	0x20000284
 8000dc8:	20000140 	.word	0x20000140
 8000dcc:	200000cc 	.word	0x200000cc
 8000dd0:	2000015c 	.word	0x2000015c
 8000dd4:	2000022c 	.word	0x2000022c
 8000dd8:	200001bc 	.word	0x200001bc
 8000ddc:	20000134 	.word	0x20000134
 8000de0:	200000b8 	.word	0x200000b8
 8000de4:	200000c8 	.word	0x200000c8
 8000de8:	200000b0 	.word	0x200000b0
 8000dec:	2000027c 	.word	0x2000027c
 8000df0:	200000bc 	.word	0x200000bc
 8000df4:	200001cc 	.word	0x200001cc
 8000df8:	200000d0 	.word	0x200000d0
 8000dfc:	200001a4 	.word	0x200001a4
 8000e00:	20000154 	.word	0x20000154
 8000e04:	200000a4 	.word	0x200000a4
 8000e08:	200001c4 	.word	0x200001c4
 8000e0c:	200000d8 	.word	0x200000d8
 8000e10:	200000c0 	.word	0x200000c0
 8000e14:	080048e4 	.word	0x080048e4
 8000e18:	20000160 	.word	0x20000160
 8000e1c:	20000234 	.word	0x20000234

08000e20 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e30:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8000e32:	e012      	b.n	8000e5a <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 8000e34:	89fb      	ldrh	r3, [r7, #14]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	89fb      	ldrh	r3, [r7, #14]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	1c59      	adds	r1, r3, #1
 8000e46:	6079      	str	r1, [r7, #4]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4043      	eors	r3, r0
 8000e4c:	4909      	ldr	r1, [pc, #36]	; (8000e74 <Crc16+0x54>)
 8000e4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4053      	eors	r3, r2
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	807a      	strh	r2, [r7, #2]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e7      	bne.n	8000e34 <Crc16+0x14>

    return crc;
 8000e64:	89fb      	ldrh	r3, [r7, #14]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	08004910 	.word	0x08004910

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 fbca 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f838 	bl	8000ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 f904 	bl	8001090 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e88:	f000 f8a2 	bl	8000fd0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e8c:	f000 f8d6 	bl	800103c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Rf96_Lora_init();
 8000e90:	f7ff fcbb 	bl	800080a <Rf96_Lora_init>
  Rf96_Lora_RX_mode();
 8000e94:	f7ff fcdd 	bl	8000852 <Rf96_Lora_RX_mode>





	  if(Get_NIRQ_Di0()) // Прерывание по приему по радиоканалу
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <main+0x70>)
 8000e9e:	f000 ff6d 	bl	8001d7c <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f7      	beq.n	8000e98 <main+0x20>
	  	 	 {
	  	 	    //  Rf96_LoRaRxPacket((char*)TX_RX_Radio);
	  	 	   Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000ea8:	4810      	ldr	r0, [pc, #64]	; (8000eec <main+0x74>)
 8000eaa:	f7ff fc91 	bl	80007d0 <Rf96_DataRX_From_FiFO>

	  	 	CRC_c=(TX_RX_Radio[27]<<8)+TX_RX_Radio[28];
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <main+0x74>)
 8000eb0:	7edb      	ldrb	r3, [r3, #27]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <main+0x74>)
 8000eba:	7f1b      	ldrb	r3, [r3, #28]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <main+0x78>)
 8000ec4:	801a      	strh	r2, [r3, #0]


              if(CRC_c==Crc16(TX_RX_Radio, 27))
 8000ec6:	211b      	movs	r1, #27
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <main+0x74>)
 8000eca:	f7ff ffa9 	bl	8000e20 <Crc16>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <main+0x78>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d102      	bne.n	8000ee0 <main+0x68>
              {
            	  transmit(TX_RX_Radio);
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <main+0x74>)
 8000edc:	f7ff fcda 	bl	8000894 <transmit>
	  	 	  else              // CRC совпало
	  	 	  {
	  	 		transmit(TX_RX_Radio);
	  	 	  }
*/
	  	 	  Rf96_LoRaClearIrq();
 8000ee0:	f7ff fb66 	bl	80005b0 <Rf96_LoRaClearIrq>
	  if(Get_NIRQ_Di0()) // Прерывание по приему по радиоканалу
 8000ee4:	e7d8      	b.n	8000e98 <main+0x20>
 8000ee6:	bf00      	nop
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	200000e8 	.word	0x200000e8
 8000ef0:	2000008c 	.word	0x2000008c

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	; 0x50
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2234      	movs	r2, #52	; 0x34
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 f8ce 	bl	80040a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <SystemClock_Config+0xd4>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <SystemClock_Config+0xd4>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <SystemClock_Config+0xd4>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <SystemClock_Config+0xd8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f40:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <SystemClock_Config+0xd8>)
 8000f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <SystemClock_Config+0xd8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f72:	2304      	movs	r3, #4
 8000f74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 f9e6 	bl	8002354 <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f8e:	f000 f909 	bl	80011a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 ff16 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fba:	f000 f8f3 	bl	80011a4 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3750      	adds	r7, #80	; 0x50
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_SPI1_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <MX_SPI1_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_SPI1_Init+0x64>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_SPI1_Init+0x64>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_SPI1_Init+0x64>)
 8001004:	2218      	movs	r2, #24
 8001006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_SPI1_Init+0x64>)
 800101c:	220a      	movs	r2, #10
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_SPI1_Init+0x64>)
 8001022:	f001 fbf1 	bl	8002808 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800102c:	f000 f8ba 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001d0 	.word	0x200001d0
 8001038:	40013000 	.word	0x40013000

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_USART2_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001048:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001074:	f002 f91c 	bl	80032b0 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f000 f891 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000234 	.word	0x20000234
 800108c:	40004400 	.word	0x40004400

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <MX_GPIO_Init+0x100>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a38      	ldr	r2, [pc, #224]	; (8001190 <MX_GPIO_Init+0x100>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <MX_GPIO_Init+0x100>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <MX_GPIO_Init+0x100>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a31      	ldr	r2, [pc, #196]	; (8001190 <MX_GPIO_Init+0x100>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_GPIO_Init+0x100>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_GPIO_Init+0x100>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <MX_GPIO_Init+0x100>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_GPIO_Init+0x100>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_GPIO_Init+0x100>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <MX_GPIO_Init+0x100>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_GPIO_Init+0x100>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	481e      	ldr	r0, [pc, #120]	; (8001194 <MX_GPIO_Init+0x104>)
 800111c:	f000 fe46 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_GPIO_Init+0x108>)
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <MX_GPIO_Init+0x10c>)
 8001136:	f000 fc8f 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800113a:	f240 4301 	movw	r3, #1025	; 0x401
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_GPIO_Init+0x110>)
 8001150:	f000 fc82 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001154:	2338      	movs	r3, #56	; 0x38
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <MX_GPIO_Init+0x104>)
 8001168:	f000 fc76 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_GPIO_Init+0x104>)
 8001184:	f000 fc68 	bl	8001a58 <HAL_GPIO_Init>

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	10210000 	.word	0x10210000
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 80011be:	1df9      	adds	r1, r7, #7
 80011c0:	230a      	movs	r3, #10
 80011c2:	2201      	movs	r2, #1
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <SPICmd8bit+0x20>)
 80011c6:	f001 fb83 	bl	80028d0 <HAL_SPI_Transmit>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001d0 	.word	0x200001d0

080011d8 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 80011e2:	1df9      	adds	r1, r7, #7
 80011e4:	230a      	movs	r3, #10
 80011e6:	2201      	movs	r2, #1
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <SPIRead8bit+0x20>)
 80011ea:	f001 fca5 	bl	8002b38 <HAL_SPI_Receive>

  return(RdPara);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200001d0 	.word	0x200001d0

080011fc <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001206:	2200      	movs	r2, #0
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	480a      	ldr	r0, [pc, #40]	; (8001234 <SPIRead+0x38>)
 800120c:	f000 fdce 	bl	8001dac <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffce 	bl	80011b4 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001218:	f7ff ffde 	bl	80011d8 <SPIRead8bit>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001220:	2201      	movs	r2, #1
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <SPIRead+0x38>)
 8001226:	f000 fdc1 	bl	8001dac <HAL_GPIO_WritePin>
  return(tmp);
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020400 	.word	0x40020400

08001238 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	460a      	mov	r2, r1
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	4613      	mov	r3, r2
 8001246:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001248:	2200      	movs	r2, #0
 800124a:	2140      	movs	r1, #64	; 0x40
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <SPIWrite+0x44>)
 800124e:	f000 fdad 	bl	8001dac <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffaa 	bl	80011b4 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffa6 	bl	80011b4 <SPICmd8bit>
	NSS_H();
 8001268:	2201      	movs	r2, #1
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <SPIWrite+0x44>)
 800126e:	f000 fd9d 	bl	8001dac <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020400 	.word	0x40020400

08001280 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d91f      	bls.n	80012d6 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001296:	2200      	movs	r2, #0
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <SPIBurstRead+0x60>)
 800129c:	f000 fd86 	bl	8001dac <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff86 	bl	80011b4 <SPICmd8bit>
    for(i=0;i<length;i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e009      	b.n	80012c2 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	18d4      	adds	r4, r2, r3
 80012b4:	f7ff ff90 	bl	80011d8 <SPIRead8bit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3f1      	bcc.n	80012ae <SPIBurstRead+0x2e>
      NSS_H();
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <SPIBurstRead+0x60>)
 80012d0:	f000 fd6c 	bl	8001dac <HAL_GPIO_WritePin>
 80012d4:	e000      	b.n	80012d8 <SPIBurstRead+0x58>
    return;
 80012d6:	bf00      	nop
  }
}
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020400 	.word	0x40020400

080012e4 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d922      	bls.n	8001340 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 80012fa:	2200      	movs	r2, #0
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	4812      	ldr	r0, [pc, #72]	; (8001348 <BurstWrite+0x64>)
 8001300:	f000 fd54 	bl	8001dac <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff51 	bl	80011b4 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e009      	b.n	800132c <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff47 	bl	80011b4 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	3301      	adds	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	429a      	cmp	r2, r3
 8001332:	d3f1      	bcc.n	8001318 <BurstWrite+0x34>
    NSS_H();
 8001334:	2201      	movs	r2, #1
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <BurstWrite+0x64>)
 800133a:	f000 fd37 	bl	8001dac <HAL_GPIO_WritePin>
 800133e:	e000      	b.n	8001342 <BurstWrite+0x5e>
    return;
 8001340:	bf00      	nop
  }
}
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800138a:	2007      	movs	r0, #7
 800138c:	f000 fa84 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_SPI_MspInit+0x84>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12b      	bne.n	8001416 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23e0      	movs	r3, #224	; 0xe0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001406:	2305      	movs	r3, #5
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_SPI_MspInit+0x8c>)
 8001412:	f000 fb21 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40013000 	.word	0x40013000
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_UART_MspInit+0x94>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d133      	bne.n	80014b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_UART_MspInit+0x98>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001486:	230c      	movs	r3, #12
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001496:	2307      	movs	r3, #7
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <HAL_UART_MspInit+0x9c>)
 80014a2:	f000 fad9 	bl	8001a58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2026      	movs	r0, #38	; 0x26
 80014ac:	f000 f9ff 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014b0:	2026      	movs	r0, #38	; 0x26
 80014b2:	f000 fa18 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40004400 	.word	0x40004400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f8ca 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <USART2_IRQHandler+0x10>)
 800152e:	f001 ffd3 	bl	80034d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000234 	.word	0x20000234

0800153c <_sbrk>:
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x50>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x16>
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <_sbrk+0x50>)
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <_sbrk+0x54>)
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <_sbrk+0x50>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <_sbrk+0x50>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	466a      	mov	r2, sp
 8001562:	4293      	cmp	r3, r2
 8001564:	d907      	bls.n	8001576 <_sbrk+0x3a>
 8001566:	f002 fd73 	bl	8004050 <__errno>
 800156a:	4602      	mov	r2, r0
 800156c:	230c      	movs	r3, #12
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001574:	e006      	b.n	8001584 <_sbrk+0x48>
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <_sbrk+0x50>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a03      	ldr	r2, [pc, #12]	; (800158c <_sbrk+0x50>)
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000090 	.word	0x20000090
 8001590:	20000298 	.word	0x20000298

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <SystemInit+0x28>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <SystemInit+0x28>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SystemInit+0x28>)
 80015aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ae:	609a      	str	r2, [r3, #8]
#endif
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopFillZerobss+0x14>
 80015c4:	2100      	movs	r1, #0
 80015c6:	e003      	b.n	80015d0 <LoopCopyDataInit>

080015c8 <CopyDataInit>:
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LoopFillZerobss+0x18>)
 80015ca:	585b      	ldr	r3, [r3, r1]
 80015cc:	5043      	str	r3, [r0, r1]
 80015ce:	3104      	adds	r1, #4

080015d0 <LoopCopyDataInit>:
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <LoopFillZerobss+0x1c>)
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <LoopFillZerobss+0x20>)
 80015d4:	1842      	adds	r2, r0, r1
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3f6      	bcc.n	80015c8 <CopyDataInit>
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopFillZerobss+0x24>)
 80015dc:	e002      	b.n	80015e4 <LoopFillZerobss>

080015de <FillZerobss>:
 80015de:	2300      	movs	r3, #0
 80015e0:	f842 3b04 	str.w	r3, [r2], #4

080015e4 <LoopFillZerobss>:
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <LoopFillZerobss+0x28>)
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3f9      	bcc.n	80015de <FillZerobss>
 80015ea:	f7ff ffd3 	bl	8001594 <SystemInit>
 80015ee:	f002 fd35 	bl	800405c <__libc_init_array>
 80015f2:	f7ff fc41 	bl	8000e78 <main>
 80015f6:	4770      	bx	lr
 80015f8:	20020000 	.word	0x20020000
 80015fc:	08004b6c 	.word	0x08004b6c
 8001600:	20000000 	.word	0x20000000
 8001604:	20000070 	.word	0x20000070
 8001608:	20000070 	.word	0x20000070
 800160c:	20000294 	.word	0x20000294

08001610 <ADC_IRQHandler>:
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f92b 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fe80 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f943 	bl	8001902 <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001694:	f000 f90b 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008
 80016dc:	2000028c 	.word	0x2000028c

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000028c 	.word	0x2000028c

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4907      	ldr	r1, [pc, #28]	; (8001794 <__NVIC_EnableIRQ+0x38>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	; 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001878:	f7ff ff8e 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff29 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff3e 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff8e 	bl	80017ec <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff31 	bl	800175c <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff feda 	bl	80016e0 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d008      	beq.n	800194c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e052      	b.n	80019f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0216 	bic.w	r2, r2, #22
 800195a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800196a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <HAL_DMA_Abort+0x62>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0208 	bic.w	r2, r2, #8
 800198a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199c:	e013      	b.n	80019c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199e:	f7ff fe9f 	bl	80016e0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d90c      	bls.n	80019c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e015      	b.n	80019f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e4      	bne.n	800199e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	223f      	movs	r2, #63	; 0x3f
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d004      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e00c      	b.n	8001a32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e165      	b.n	8001d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8154 	bne.w	8001d3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d00b      	beq.n	8001ab2 <HAL_GPIO_Init+0x5a>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa6:	2b11      	cmp	r3, #17
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d130      	bne.n	8001b14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0xfc>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b12      	cmp	r3, #18
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80ae 	beq.w	8001d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_GPIO_Init+0x2fc>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a5b      	ldr	r2, [pc, #364]	; (8001d54 <HAL_GPIO_Init+0x2fc>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_GPIO_Init+0x2fc>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfa:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4e      	ldr	r2, [pc, #312]	; (8001d5c <HAL_GPIO_Init+0x304>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4d      	ldr	r2, [pc, #308]	; (8001d60 <HAL_GPIO_Init+0x308>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x216>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x212>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <HAL_GPIO_Init+0x310>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_GPIO_Init+0x314>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x20a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_GPIO_Init+0x318>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x206>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x202>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e00c      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e00a      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	4934      	ldr	r1, [pc, #208]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb6:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f ae96 	bls.w	8001a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3724      	adds	r7, #36	; 0x24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40021800 	.word	0x40021800
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0cc      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d90c      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0b8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	494d      	ldr	r1, [pc, #308]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d044      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d119      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e067      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4934      	ldr	r1, [pc, #208]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff fc06 	bl	80016e0 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7ff fc02 	bl	80016e0 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e04f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d20c      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e032      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4916      	ldr	r1, [pc, #88]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f66:	f000 f855 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fb66 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08004b10 	.word	0x08004b10
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001fcc:	4601      	mov	r1, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0a9b      	lsrs	r3, r3, #10
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08004b20 	.word	0x08004b20

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff0:	f7ff ffdc 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0b5b      	lsrs	r3, r3, #13
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	08004b20 	.word	0x08004b20

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202e:	4bc6      	ldr	r3, [pc, #792]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b0c      	cmp	r3, #12
 8002038:	f200 817e 	bhi.w	8002338 <HAL_RCC_GetSysClockFreq+0x324>
 800203c:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <HAL_RCC_GetSysClockFreq+0x30>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002079 	.word	0x08002079
 8002048:	08002339 	.word	0x08002339
 800204c:	08002339 	.word	0x08002339
 8002050:	08002339 	.word	0x08002339
 8002054:	0800207f 	.word	0x0800207f
 8002058:	08002339 	.word	0x08002339
 800205c:	08002339 	.word	0x08002339
 8002060:	08002339 	.word	0x08002339
 8002064:	08002085 	.word	0x08002085
 8002068:	08002339 	.word	0x08002339
 800206c:	08002339 	.word	0x08002339
 8002070:	08002339 	.word	0x08002339
 8002074:	080021e1 	.word	0x080021e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4bb4      	ldr	r3, [pc, #720]	; (800234c <HAL_RCC_GetSysClockFreq+0x338>)
 800207a:	613b      	str	r3, [r7, #16]
       break;
 800207c:	e15f      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207e:	4bb4      	ldr	r3, [pc, #720]	; (8002350 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002080:	613b      	str	r3, [r7, #16]
      break;
 8002082:	e15c      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4bb0      	ldr	r3, [pc, #704]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800208c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208e:	4bae      	ldr	r3, [pc, #696]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d04a      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209a:	4bab      	ldr	r3, [pc, #684]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	f04f 0400 	mov.w	r4, #0
 80020a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	ea03 0501 	and.w	r5, r3, r1
 80020b0:	ea04 0602 	and.w	r6, r4, r2
 80020b4:	4629      	mov	r1, r5
 80020b6:	4632      	mov	r2, r6
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	f04f 0400 	mov.w	r4, #0
 80020c0:	0154      	lsls	r4, r2, #5
 80020c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020c6:	014b      	lsls	r3, r1, #5
 80020c8:	4619      	mov	r1, r3
 80020ca:	4622      	mov	r2, r4
 80020cc:	1b49      	subs	r1, r1, r5
 80020ce:	eb62 0206 	sbc.w	r2, r2, r6
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	f04f 0400 	mov.w	r4, #0
 80020da:	0194      	lsls	r4, r2, #6
 80020dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020e0:	018b      	lsls	r3, r1, #6
 80020e2:	1a5b      	subs	r3, r3, r1
 80020e4:	eb64 0402 	sbc.w	r4, r4, r2
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	00e2      	lsls	r2, r4, #3
 80020f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020f6:	00d9      	lsls	r1, r3, #3
 80020f8:	460b      	mov	r3, r1
 80020fa:	4614      	mov	r4, r2
 80020fc:	195b      	adds	r3, r3, r5
 80020fe:	eb44 0406 	adc.w	r4, r4, r6
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	0262      	lsls	r2, r4, #9
 800210c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002110:	0259      	lsls	r1, r3, #9
 8002112:	460b      	mov	r3, r1
 8002114:	4614      	mov	r4, r2
 8002116:	4618      	mov	r0, r3
 8002118:	4621      	mov	r1, r4
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f04f 0400 	mov.w	r4, #0
 8002120:	461a      	mov	r2, r3
 8002122:	4623      	mov	r3, r4
 8002124:	f7fe f8c4 	bl	80002b0 <__aeabi_uldivmod>
 8002128:	4603      	mov	r3, r0
 800212a:	460c      	mov	r4, r1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e049      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002130:	4b85      	ldr	r3, [pc, #532]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	f04f 0400 	mov.w	r4, #0
 800213a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	ea03 0501 	and.w	r5, r3, r1
 8002146:	ea04 0602 	and.w	r6, r4, r2
 800214a:	4629      	mov	r1, r5
 800214c:	4632      	mov	r2, r6
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	f04f 0400 	mov.w	r4, #0
 8002156:	0154      	lsls	r4, r2, #5
 8002158:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800215c:	014b      	lsls	r3, r1, #5
 800215e:	4619      	mov	r1, r3
 8002160:	4622      	mov	r2, r4
 8002162:	1b49      	subs	r1, r1, r5
 8002164:	eb62 0206 	sbc.w	r2, r2, r6
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	f04f 0400 	mov.w	r4, #0
 8002170:	0194      	lsls	r4, r2, #6
 8002172:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002176:	018b      	lsls	r3, r1, #6
 8002178:	1a5b      	subs	r3, r3, r1
 800217a:	eb64 0402 	sbc.w	r4, r4, r2
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	00e2      	lsls	r2, r4, #3
 8002188:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800218c:	00d9      	lsls	r1, r3, #3
 800218e:	460b      	mov	r3, r1
 8002190:	4614      	mov	r4, r2
 8002192:	195b      	adds	r3, r3, r5
 8002194:	eb44 0406 	adc.w	r4, r4, r6
 8002198:	f04f 0100 	mov.w	r1, #0
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	02a2      	lsls	r2, r4, #10
 80021a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021a6:	0299      	lsls	r1, r3, #10
 80021a8:	460b      	mov	r3, r1
 80021aa:	4614      	mov	r4, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	4621      	mov	r1, r4
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f04f 0400 	mov.w	r4, #0
 80021b6:	461a      	mov	r2, r3
 80021b8:	4623      	mov	r3, r4
 80021ba:	f7fe f879 	bl	80002b0 <__aeabi_uldivmod>
 80021be:	4603      	mov	r3, r0
 80021c0:	460c      	mov	r4, r1
 80021c2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c4:	4b60      	ldr	r3, [pc, #384]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	3301      	adds	r3, #1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	613b      	str	r3, [r7, #16]
      break;
 80021de:	e0ae      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04a      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b54      	ldr	r3, [pc, #336]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	f04f 0400 	mov.w	r4, #0
 8002200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	ea03 0501 	and.w	r5, r3, r1
 800220c:	ea04 0602 	and.w	r6, r4, r2
 8002210:	4629      	mov	r1, r5
 8002212:	4632      	mov	r2, r6
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	0154      	lsls	r4, r2, #5
 800221e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002222:	014b      	lsls	r3, r1, #5
 8002224:	4619      	mov	r1, r3
 8002226:	4622      	mov	r2, r4
 8002228:	1b49      	subs	r1, r1, r5
 800222a:	eb62 0206 	sbc.w	r2, r2, r6
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f04f 0400 	mov.w	r4, #0
 8002236:	0194      	lsls	r4, r2, #6
 8002238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800223c:	018b      	lsls	r3, r1, #6
 800223e:	1a5b      	subs	r3, r3, r1
 8002240:	eb64 0402 	sbc.w	r4, r4, r2
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	00e2      	lsls	r2, r4, #3
 800224e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002252:	00d9      	lsls	r1, r3, #3
 8002254:	460b      	mov	r3, r1
 8002256:	4614      	mov	r4, r2
 8002258:	195b      	adds	r3, r3, r5
 800225a:	eb44 0406 	adc.w	r4, r4, r6
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	0262      	lsls	r2, r4, #9
 8002268:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800226c:	0259      	lsls	r1, r3, #9
 800226e:	460b      	mov	r3, r1
 8002270:	4614      	mov	r4, r2
 8002272:	4618      	mov	r0, r3
 8002274:	4621      	mov	r1, r4
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	f7fe f816 	bl	80002b0 <__aeabi_uldivmod>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e049      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	f240 11ff 	movw	r1, #511	; 0x1ff
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	ea03 0501 	and.w	r5, r3, r1
 80022a2:	ea04 0602 	and.w	r6, r4, r2
 80022a6:	4629      	mov	r1, r5
 80022a8:	4632      	mov	r2, r6
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	0154      	lsls	r4, r2, #5
 80022b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022b8:	014b      	lsls	r3, r1, #5
 80022ba:	4619      	mov	r1, r3
 80022bc:	4622      	mov	r2, r4
 80022be:	1b49      	subs	r1, r1, r5
 80022c0:	eb62 0206 	sbc.w	r2, r2, r6
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	f04f 0400 	mov.w	r4, #0
 80022cc:	0194      	lsls	r4, r2, #6
 80022ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	1a5b      	subs	r3, r3, r1
 80022d6:	eb64 0402 	sbc.w	r4, r4, r2
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022e8:	00d9      	lsls	r1, r3, #3
 80022ea:	460b      	mov	r3, r1
 80022ec:	4614      	mov	r4, r2
 80022ee:	195b      	adds	r3, r3, r5
 80022f0:	eb44 0406 	adc.w	r4, r4, r6
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	02a2      	lsls	r2, r4, #10
 80022fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002302:	0299      	lsls	r1, r3, #10
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	4618      	mov	r0, r3
 800230a:	4621      	mov	r1, r4
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	461a      	mov	r2, r3
 8002314:	4623      	mov	r3, r4
 8002316:	f7fd ffcb 	bl	80002b0 <__aeabi_uldivmod>
 800231a:	4603      	mov	r3, r0
 800231c:	460c      	mov	r4, r1
 800231e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_GetSysClockFreq+0x334>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0f1b      	lsrs	r3, r3, #28
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	613b      	str	r3, [r7, #16]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <HAL_RCC_GetSysClockFreq+0x338>)
 800233a:	613b      	str	r3, [r7, #16]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	693b      	ldr	r3, [r7, #16]
}
 8002340:	4618      	mov	r0, r3
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	00f42400 	.word	0x00f42400
 8002350:	007a1200 	.word	0x007a1200

08002354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8083 	beq.w	8002474 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800236e:	4b95      	ldr	r3, [pc, #596]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d019      	beq.n	80023ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800237a:	4b92      	ldr	r3, [pc, #584]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002382:	2b08      	cmp	r3, #8
 8002384:	d106      	bne.n	8002394 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002386:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002392:	d00c      	beq.n	80023ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002394:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d112      	bne.n	80023c6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a0:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ac:	d10b      	bne.n	80023c6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ae:	4b85      	ldr	r3, [pc, #532]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d05b      	beq.n	8002472 <HAL_RCC_OscConfig+0x11e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d157      	bne.n	8002472 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e216      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x8a>
 80023d0:	4b7c      	ldr	r3, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a7b      	ldr	r2, [pc, #492]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e01d      	b.n	800241a <HAL_RCC_OscConfig+0xc6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0xae>
 80023e8:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a72      	ldr	r2, [pc, #456]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0xc6>
 8002402:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6f      	ldr	r2, [pc, #444]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d013      	beq.n	800244a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff f95d 	bl	80016e0 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242a:	f7ff f959 	bl	80016e0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1db      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0xd6>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff f949 	bl	80016e0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002452:	f7ff f945 	bl	80016e0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1c7      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002464:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0xfe>
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002472:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d06f      	beq.n	8002560 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002480:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b00      	cmp	r3, #0
 800248a:	d017      	beq.n	80024bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800248c:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002494:	2b08      	cmp	r3, #8
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002498:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a4:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d11c      	bne.n	80024ea <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b0:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024bc:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x180>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e18f      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4938      	ldr	r1, [pc, #224]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e8:	e03a      	b.n	8002560 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d020      	beq.n	8002534 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff f8f2 	bl	80016e0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff f8ee 	bl	80016e0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e170      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4925      	ldr	r1, [pc, #148]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
 8002532:	e015      	b.n	8002560 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7ff f8d1 	bl	80016e0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff f8cd 	bl	80016e0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e14f      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d037      	beq.n	80025dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_RCC_OscConfig+0x278>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff f8b1 	bl	80016e0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7ff f8ad 	bl	80016e0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e12f      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x22e>
 80025a0:	e01c      	b.n	80025dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_RCC_OscConfig+0x278>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7ff f89a 	bl	80016e0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ae:	e00f      	b.n	80025d0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b0:	f7ff f896 	bl	80016e0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d908      	bls.n	80025d0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e118      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	42470000 	.word	0x42470000
 80025cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	4b8a      	ldr	r3, [pc, #552]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 80025d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e9      	bne.n	80025b0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8097 	beq.w	8002718 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b83      	ldr	r3, [pc, #524]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b7f      	ldr	r3, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a7e      	ldr	r2, [pc, #504]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b7c      	ldr	r3, [pc, #496]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b79      	ldr	r3, [pc, #484]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b76      	ldr	r3, [pc, #472]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a75      	ldr	r2, [pc, #468]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7ff f855 	bl	80016e0 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7ff f851 	bl	80016e0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0d3      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b6c      	ldr	r3, [pc, #432]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x31a>
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a65      	ldr	r2, [pc, #404]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x354>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x33c>
 8002676:	4b61      	ldr	r3, [pc, #388]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a60      	ldr	r2, [pc, #384]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a5d      	ldr	r2, [pc, #372]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0x354>
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a59      	ldr	r2, [pc, #356]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a56      	ldr	r2, [pc, #344]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 80026a2:	f023 0304 	bic.w	r3, r3, #4
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff f816 	bl	80016e0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7ff f812 	bl	80016e0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e092      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ee      	beq.n	80026b8 <HAL_RCC_OscConfig+0x364>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff f800 	bl	80016e0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe fffc 	bl	80016e0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e07c      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	4b40      	ldr	r3, [pc, #256]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ee      	bne.n	80026e4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002716:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d068      	beq.n	80027f2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002720:	4b36      	ldr	r3, [pc, #216]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b08      	cmp	r3, #8
 800272a:	d060      	beq.n	80027ee <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d145      	bne.n	80027c0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_OscConfig+0x4b0>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe ffd1 	bl	80016e0 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe ffcd 	bl	80016e0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e04f      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	019b      	lsls	r3, r3, #6
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	3b01      	subs	r3, #1
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	061b      	lsls	r3, r3, #24
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	071b      	lsls	r3, r3, #28
 800278c:	491b      	ldr	r1, [pc, #108]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_RCC_OscConfig+0x4b0>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe ffa2 	bl	80016e0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe ff9e 	bl	80016e0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e020      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x44c>
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_RCC_OscConfig+0x4b0>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe ff8b 	bl	80016e0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe ff87 	bl	80016e0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e009      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_OscConfig+0x4a8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x47a>
 80027ec:	e001      	b.n	80027f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000
 8002804:	42470060 	.word	0x42470060

08002808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e056      	b.n	80028c8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d106      	bne.n	800283a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe fdb1 	bl	800139c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002850:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	ea42 0103 	orr.w	r1, r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f003 0104 	and.w	r1, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_SPI_Transmit+0x22>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e11e      	b.n	8002b30 <HAL_SPI_Transmit+0x260>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028fa:	f7fe fef1 	bl	80016e0 <HAL_GetTick>
 80028fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d002      	beq.n	8002916 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002910:	2302      	movs	r3, #2
 8002912:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002914:	e103      	b.n	8002b1e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_SPI_Transmit+0x52>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002926:	e0fa      	b.n	8002b1e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2203      	movs	r2, #3
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296e:	d107      	bne.n	8002980 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800297e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d007      	beq.n	800299e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a6:	d14b      	bne.n	8002a40 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_Transmit+0xe6>
 80029b0:	8afb      	ldrh	r3, [r7, #22]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d13e      	bne.n	8002a34 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029da:	e02b      	b.n	8002a34 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d112      	bne.n	8002a10 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	1c9a      	adds	r2, r3, #2
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a0e:	e011      	b.n	8002a34 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a10:	f7fe fe66 	bl	80016e0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d803      	bhi.n	8002a28 <HAL_SPI_Transmit+0x158>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a26:	d102      	bne.n	8002a2e <HAL_SPI_Transmit+0x15e>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a32:	e074      	b.n	8002b1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ce      	bne.n	80029dc <HAL_SPI_Transmit+0x10c>
 8002a3e:	e04c      	b.n	8002ada <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_SPI_Transmit+0x17e>
 8002a48:	8afb      	ldrh	r3, [r7, #22]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d140      	bne.n	8002ad0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a74:	e02c      	b.n	8002ad0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d113      	bne.n	8002aac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aaa:	e011      	b.n	8002ad0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aac:	f7fe fe18 	bl	80016e0 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d803      	bhi.n	8002ac4 <HAL_SPI_Transmit+0x1f4>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac2:	d102      	bne.n	8002aca <HAL_SPI_Transmit+0x1fa>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ace:	e026      	b.n	8002b1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1cd      	bne.n	8002a76 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	6839      	ldr	r1, [r7, #0]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fba4 	bl	800322c <SPI_EndRxTxTransaction>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	e000      	b.n	8002b1e <HAL_SPI_Transmit+0x24e>
  }

error:
 8002b1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b54:	d112      	bne.n	8002b7c <HAL_SPI_Receive+0x44>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2204      	movs	r2, #4
 8002b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f8e9 	bl	8002d4a <HAL_SPI_TransmitReceive>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	e0e2      	b.n	8002d42 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_SPI_Receive+0x52>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0db      	b.n	8002d42 <HAL_SPI_Receive+0x20a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b92:	f7fe fda5 	bl	80016e0 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ba8:	e0c2      	b.n	8002d30 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_SPI_Receive+0x7e>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bba:	e0b9      	b.n	8002d30 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c02:	d107      	bne.n	8002c14 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d007      	beq.n	8002c32 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d162      	bne.n	8002d00 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c3a:	e02e      	b.n	8002c9a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d115      	bne.n	8002c76 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f103 020c 	add.w	r2, r3, #12
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c74:	e011      	b.n	8002c9a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c76:	f7fe fd33 	bl	80016e0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d803      	bhi.n	8002c8e <HAL_SPI_Receive+0x156>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c8c:	d102      	bne.n	8002c94 <HAL_SPI_Receive+0x15c>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c98:	e04a      	b.n	8002d30 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1cb      	bne.n	8002c3c <HAL_SPI_Receive+0x104>
 8002ca4:	e031      	b.n	8002d0a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d113      	bne.n	8002cdc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cda:	e011      	b.n	8002d00 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cdc:	f7fe fd00 	bl	80016e0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d803      	bhi.n	8002cf4 <HAL_SPI_Receive+0x1bc>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf2:	d102      	bne.n	8002cfa <HAL_SPI_Receive+0x1c2>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cfe:	e017      	b.n	8002d30 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1cd      	bne.n	8002ca6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa27 	bl	8003162 <SPI_EndRxTransaction>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	75fb      	strb	r3, [r7, #23]
 8002d2c:	e000      	b.n	8002d30 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002d2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08c      	sub	sp, #48	; 0x30
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x26>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e18a      	b.n	8003086 <HAL_SPI_TransmitReceive+0x33c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d78:	f7fe fcb2 	bl	80016e0 <HAL_GetTick>
 8002d7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d00f      	beq.n	8002dba <HAL_SPI_TransmitReceive+0x70>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da0:	d107      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x68>
 8002daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d003      	beq.n	8002dba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002db8:	e15b      	b.n	8003072 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x82>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x82>
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dd2:	e14e      	b.n	8003072 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d003      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2205      	movs	r2, #5
 8002de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	887a      	ldrh	r2, [r7, #2]
 8002dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d007      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e44:	d178      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x10a>
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d166      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	1c9a      	adds	r2, r3, #2
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e78:	e053      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11b      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x176>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x176>
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d113      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d119      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x1b8>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d014      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	1c9a      	adds	r2, r3, #2
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f02:	f7fe fbed 	bl	80016e0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d807      	bhi.n	8002f22 <HAL_SPI_TransmitReceive+0x1d8>
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f18:	d003      	beq.n	8002f22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f20:	e0a7      	b.n	8003072 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1a6      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x130>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1a1      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x130>
 8002f36:	e07c      	b.n	8003032 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_TransmitReceive+0x1fc>
 8002f40:	8b7b      	ldrh	r3, [r7, #26]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d16b      	bne.n	800301e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f6c:	e057      	b.n	800301e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d11c      	bne.n	8002fb6 <HAL_SPI_TransmitReceive+0x26c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d017      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x26c>
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d114      	bne.n	8002fb6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	7812      	ldrb	r2, [r2, #0]
 8002f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d119      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x2ae>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d014      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ff8:	f7fe fb72 	bl	80016e0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003004:	429a      	cmp	r2, r3
 8003006:	d803      	bhi.n	8003010 <HAL_SPI_TransmitReceive+0x2c6>
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800300e:	d102      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x2cc>
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800301c:	e029      	b.n	8003072 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1a2      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x224>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d19d      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f8f8 	bl	800322c <SPI_EndRxTxTransaction>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800304e:	e010      	b.n	8003072 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	e000      	b.n	8003072 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003086:	4618      	mov	r0, r3
 8003088:	3730      	adds	r7, #48	; 0x30
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800309e:	e04c      	b.n	800313a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a6:	d048      	beq.n	800313a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80030a8:	f7fe fb1a 	bl	80016e0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d902      	bls.n	80030be <SPI_WaitFlagStateUntilTimeout+0x30>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d13d      	bne.n	800313a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d6:	d111      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e0:	d004      	beq.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d107      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d10f      	bne.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e00f      	b.n	800315a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	429a      	cmp	r2, r3
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	429a      	cmp	r2, r3
 8003156:	d1a3      	bne.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af02      	add	r7, sp, #8
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003176:	d111      	bne.n	800319c <SPI_EndRxTransaction+0x3a>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d004      	beq.n	800318c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318a:	d107      	bne.n	800319c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a4:	d12a      	bne.n	80031fc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d012      	beq.n	80031d6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff ff67 	bl	800308e <SPI_WaitFlagStateUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02d      	beq.n	8003222 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e026      	b.n	8003224 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	2101      	movs	r1, #1
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff ff54 	bl	800308e <SPI_WaitFlagStateUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01a      	beq.n	8003222 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e013      	b.n	8003224 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2200      	movs	r2, #0
 8003204:	2101      	movs	r1, #1
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff ff41 	bl	800308e <SPI_WaitFlagStateUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e000      	b.n	8003224 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <SPI_EndRxTxTransaction+0x7c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <SPI_EndRxTxTransaction+0x80>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0d5b      	lsrs	r3, r3, #21
 8003244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003256:	d112      	bne.n	800327e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7ff ff13 	bl	800308e <SPI_WaitFlagStateUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00f      	b.n	800329e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3b01      	subs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d0f2      	beq.n	800327e <SPI_EndRxTxTransaction+0x52>
 8003298:	e000      	b.n	800329c <SPI_EndRxTxTransaction+0x70>
        break;
 800329a:	bf00      	nop
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000
 80032ac:	165e9f81 	.word	0x165e9f81

080032b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e03f      	b.n	8003342 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f8a8 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fb2f 	bl	8003958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b20      	cmp	r3, #32
 8003362:	d130      	bne.n	80033c6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_UART_Transmit_IT+0x26>
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e029      	b.n	80033c8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_UART_Transmit_IT+0x38>
 800337e:	2302      	movs	r3, #2
 8003380:	e022      	b.n	80033c8 <HAL_UART_Transmit_IT+0x7e>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	88fa      	ldrh	r2, [r7, #6]
 800339a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2221      	movs	r2, #33	; 0x21
 80033a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e000      	b.n	80033c8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80033ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b80      	cmp	r3, #128	; 0x80
 8003408:	d124      	bne.n	8003454 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003418:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	2200      	movs	r2, #0
 8003428:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fa73 	bl	800191a <HAL_DMA_Abort>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fafd 	bl	8001a3e <HAL_DMA_GetError>
 8003444:	4603      	mov	r3, r0
 8003446:	2b20      	cmp	r3, #32
 8003448:	d104      	bne.n	8003454 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2210      	movs	r2, #16
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e03d      	b.n	80034d0 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d124      	bne.n	80034ac <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003470:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	2200      	movs	r2, #0
 8003480:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fa47 	bl	800191a <HAL_DMA_Abort>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fad1 	bl	8001a3e <HAL_DMA_GetError>
 800349c:	4603      	mov	r3, r0
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d104      	bne.n	80034ac <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2210      	movs	r2, #16
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e011      	b.n	80034d0 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_UART_IRQHandler+0x52>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f996 	bl	8003854 <UART_Receive_IT>
      return;
 8003528:	e0d1      	b.n	80036ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80b0 	beq.w	8003692 <HAL_UART_IRQHandler+0x1ba>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_UART_IRQHandler+0x70>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80a5 	beq.w	8003692 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_UART_IRQHandler+0x90>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_UART_IRQHandler+0xb0>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	f043 0202 	orr.w	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_UART_IRQHandler+0xd0>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00f      	beq.n	80035d2 <HAL_UART_IRQHandler+0xfa>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_UART_IRQHandler+0xee>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	f043 0208 	orr.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d078      	beq.n	80036cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_UART_IRQHandler+0x11c>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f930 	bl	8003854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_UART_IRQHandler+0x144>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d031      	beq.n	8003680 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f879 	bl	8003714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d123      	bne.n	8003678 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <HAL_UART_IRQHandler+0x1fc>)
 800364e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe f9d0 	bl	80019fa <HAL_DMA_Abort_IT>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800366a:	4610      	mov	r0, r2
 800366c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366e:	e00e      	b.n	800368e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f845 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003676:	e00a      	b.n	800368e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f841 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367e:	e006      	b.n	800368e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f83d 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800368c:	e01e      	b.n	80036cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368e:	bf00      	nop
    return;
 8003690:	e01c      	b.n	80036cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_UART_IRQHandler+0x1d6>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f866 	bl	8003778 <UART_Transmit_IT>
    return;
 80036ac:	e00f      	b.n	80036ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_UART_IRQHandler+0x1f6>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8ae 	bl	8003824 <UART_EndTransmit_IT>
    return;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_UART_IRQHandler+0x1f6>
    return;
 80036cc:	bf00      	nop
  }
}
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	08003751 	.word	0x08003751

080036d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800372a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ffc8 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b21      	cmp	r3, #33	; 0x21
 800378a:	d144      	bne.n	8003816 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	d11a      	bne.n	80037cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]
 80037be:	e00e      	b.n	80037de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	621a      	str	r2, [r3, #32]
 80037ca:	e008      	b.n	80037de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6211      	str	r1, [r2, #32]
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4619      	mov	r1, r3
 80037ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003800:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003810:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff47 	bl	80036d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b22      	cmp	r3, #34	; 0x22
 8003866:	d171      	bne.n	800394c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003870:	d123      	bne.n	80038ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
 800389c:	e029      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e01b      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6858      	ldr	r0, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6291      	str	r1, [r2, #40]	; 0x28
 80038d2:	b2c2      	uxtb	r2, r0
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e00c      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	1c58      	adds	r0, r3, #1
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	6288      	str	r0, [r1, #40]	; 0x28
 80038ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003902:	2b00      	cmp	r3, #0
 8003904:	d120      	bne.n	8003948 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0220 	bic.w	r2, r2, #32
 8003914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fed4 	bl	80036ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e002      	b.n	800394e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800399a:	f023 030c 	bic.w	r3, r3, #12
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c6:	f040 818b 	bne.w	8003ce0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4ac1      	ldr	r2, [pc, #772]	; (8003cd4 <UART_SetConfig+0x37c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d005      	beq.n	80039e0 <UART_SetConfig+0x88>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4abf      	ldr	r2, [pc, #764]	; (8003cd8 <UART_SetConfig+0x380>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 80bd 	bne.w	8003b5a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe fb04 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 80039e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	461d      	mov	r5, r3
 80039ea:	f04f 0600 	mov.w	r6, #0
 80039ee:	46a8      	mov	r8, r5
 80039f0:	46b1      	mov	r9, r6
 80039f2:	eb18 0308 	adds.w	r3, r8, r8
 80039f6:	eb49 0409 	adc.w	r4, r9, r9
 80039fa:	4698      	mov	r8, r3
 80039fc:	46a1      	mov	r9, r4
 80039fe:	eb18 0805 	adds.w	r8, r8, r5
 8003a02:	eb49 0906 	adc.w	r9, r9, r6
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a1a:	4688      	mov	r8, r1
 8003a1c:	4691      	mov	r9, r2
 8003a1e:	eb18 0005 	adds.w	r0, r8, r5
 8003a22:	eb49 0106 	adc.w	r1, r9, r6
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	f04f 0600 	mov.w	r6, #0
 8003a30:	196b      	adds	r3, r5, r5
 8003a32:	eb46 0406 	adc.w	r4, r6, r6
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	f7fc fc39 	bl	80002b0 <__aeabi_uldivmod>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4ba5      	ldr	r3, [pc, #660]	; (8003cdc <UART_SetConfig+0x384>)
 8003a46:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	461d      	mov	r5, r3
 8003a54:	f04f 0600 	mov.w	r6, #0
 8003a58:	46a9      	mov	r9, r5
 8003a5a:	46b2      	mov	sl, r6
 8003a5c:	eb19 0309 	adds.w	r3, r9, r9
 8003a60:	eb4a 040a 	adc.w	r4, sl, sl
 8003a64:	4699      	mov	r9, r3
 8003a66:	46a2      	mov	sl, r4
 8003a68:	eb19 0905 	adds.w	r9, r9, r5
 8003a6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a84:	4689      	mov	r9, r1
 8003a86:	4692      	mov	sl, r2
 8003a88:	eb19 0005 	adds.w	r0, r9, r5
 8003a8c:	eb4a 0106 	adc.w	r1, sl, r6
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	461d      	mov	r5, r3
 8003a96:	f04f 0600 	mov.w	r6, #0
 8003a9a:	196b      	adds	r3, r5, r5
 8003a9c:	eb46 0406 	adc.w	r4, r6, r6
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	f7fc fc04 	bl	80002b0 <__aeabi_uldivmod>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	460c      	mov	r4, r1
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b8b      	ldr	r3, [pc, #556]	; (8003cdc <UART_SetConfig+0x384>)
 8003ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	2164      	movs	r1, #100	; 0x64
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	3332      	adds	r3, #50	; 0x32
 8003ac2:	4a86      	ldr	r2, [pc, #536]	; (8003cdc <UART_SetConfig+0x384>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad0:	4498      	add	r8, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	f04f 0600 	mov.w	r6, #0
 8003ada:	46a9      	mov	r9, r5
 8003adc:	46b2      	mov	sl, r6
 8003ade:	eb19 0309 	adds.w	r3, r9, r9
 8003ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	46a2      	mov	sl, r4
 8003aea:	eb19 0905 	adds.w	r9, r9, r5
 8003aee:	eb4a 0a06 	adc.w	sl, sl, r6
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b06:	4689      	mov	r9, r1
 8003b08:	4692      	mov	sl, r2
 8003b0a:	eb19 0005 	adds.w	r0, r9, r5
 8003b0e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	461d      	mov	r5, r3
 8003b18:	f04f 0600 	mov.w	r6, #0
 8003b1c:	196b      	adds	r3, r5, r5
 8003b1e:	eb46 0406 	adc.w	r4, r6, r6
 8003b22:	461a      	mov	r2, r3
 8003b24:	4623      	mov	r3, r4
 8003b26:	f7fc fbc3 	bl	80002b0 <__aeabi_uldivmod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <UART_SetConfig+0x384>)
 8003b32:	fba3 1302 	umull	r1, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a65      	ldr	r2, [pc, #404]	; (8003cdc <UART_SetConfig+0x384>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 0207 	and.w	r2, r3, #7
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4442      	add	r2, r8
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	e26f      	b.n	800403a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b5a:	f7fe fa33 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003b5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	461d      	mov	r5, r3
 8003b64:	f04f 0600 	mov.w	r6, #0
 8003b68:	46a8      	mov	r8, r5
 8003b6a:	46b1      	mov	r9, r6
 8003b6c:	eb18 0308 	adds.w	r3, r8, r8
 8003b70:	eb49 0409 	adc.w	r4, r9, r9
 8003b74:	4698      	mov	r8, r3
 8003b76:	46a1      	mov	r9, r4
 8003b78:	eb18 0805 	adds.w	r8, r8, r5
 8003b7c:	eb49 0906 	adc.w	r9, r9, r6
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b94:	4688      	mov	r8, r1
 8003b96:	4691      	mov	r9, r2
 8003b98:	eb18 0005 	adds.w	r0, r8, r5
 8003b9c:	eb49 0106 	adc.w	r1, r9, r6
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	f04f 0600 	mov.w	r6, #0
 8003baa:	196b      	adds	r3, r5, r5
 8003bac:	eb46 0406 	adc.w	r4, r6, r6
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	f7fc fb7c 	bl	80002b0 <__aeabi_uldivmod>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <UART_SetConfig+0x384>)
 8003bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	461d      	mov	r5, r3
 8003bce:	f04f 0600 	mov.w	r6, #0
 8003bd2:	46a9      	mov	r9, r5
 8003bd4:	46b2      	mov	sl, r6
 8003bd6:	eb19 0309 	adds.w	r3, r9, r9
 8003bda:	eb4a 040a 	adc.w	r4, sl, sl
 8003bde:	4699      	mov	r9, r3
 8003be0:	46a2      	mov	sl, r4
 8003be2:	eb19 0905 	adds.w	r9, r9, r5
 8003be6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bfe:	4689      	mov	r9, r1
 8003c00:	4692      	mov	sl, r2
 8003c02:	eb19 0005 	adds.w	r0, r9, r5
 8003c06:	eb4a 0106 	adc.w	r1, sl, r6
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	461d      	mov	r5, r3
 8003c10:	f04f 0600 	mov.w	r6, #0
 8003c14:	196b      	adds	r3, r5, r5
 8003c16:	eb46 0406 	adc.w	r4, r6, r6
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	f7fc fb47 	bl	80002b0 <__aeabi_uldivmod>
 8003c22:	4603      	mov	r3, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <UART_SetConfig+0x384>)
 8003c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2164      	movs	r1, #100	; 0x64
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	3332      	adds	r3, #50	; 0x32
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <UART_SetConfig+0x384>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c4a:	4498      	add	r8, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	461d      	mov	r5, r3
 8003c50:	f04f 0600 	mov.w	r6, #0
 8003c54:	46a9      	mov	r9, r5
 8003c56:	46b2      	mov	sl, r6
 8003c58:	eb19 0309 	adds.w	r3, r9, r9
 8003c5c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c60:	4699      	mov	r9, r3
 8003c62:	46a2      	mov	sl, r4
 8003c64:	eb19 0905 	adds.w	r9, r9, r5
 8003c68:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c80:	4689      	mov	r9, r1
 8003c82:	4692      	mov	sl, r2
 8003c84:	eb19 0005 	adds.w	r0, r9, r5
 8003c88:	eb4a 0106 	adc.w	r1, sl, r6
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	461d      	mov	r5, r3
 8003c92:	f04f 0600 	mov.w	r6, #0
 8003c96:	196b      	adds	r3, r5, r5
 8003c98:	eb46 0406 	adc.w	r4, r6, r6
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	f7fc fb06 	bl	80002b0 <__aeabi_uldivmod>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <UART_SetConfig+0x384>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	3332      	adds	r3, #50	; 0x32
 8003cbe:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <UART_SetConfig+0x384>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	f003 0207 	and.w	r2, r3, #7
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4442      	add	r2, r8
 8003cd0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cd2:	e1b2      	b.n	800403a <UART_SetConfig+0x6e2>
 8003cd4:	40011000 	.word	0x40011000
 8003cd8:	40011400 	.word	0x40011400
 8003cdc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4ad7      	ldr	r2, [pc, #860]	; (8004044 <UART_SetConfig+0x6ec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d005      	beq.n	8003cf6 <UART_SetConfig+0x39e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4ad6      	ldr	r2, [pc, #856]	; (8004048 <UART_SetConfig+0x6f0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	f040 80d1 	bne.w	8003e98 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf6:	f7fe f979 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 8003cfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	469a      	mov	sl, r3
 8003d00:	f04f 0b00 	mov.w	fp, #0
 8003d04:	46d0      	mov	r8, sl
 8003d06:	46d9      	mov	r9, fp
 8003d08:	eb18 0308 	adds.w	r3, r8, r8
 8003d0c:	eb49 0409 	adc.w	r4, r9, r9
 8003d10:	4698      	mov	r8, r3
 8003d12:	46a1      	mov	r9, r4
 8003d14:	eb18 080a 	adds.w	r8, r8, sl
 8003d18:	eb49 090b 	adc.w	r9, r9, fp
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d30:	4688      	mov	r8, r1
 8003d32:	4691      	mov	r9, r2
 8003d34:	eb1a 0508 	adds.w	r5, sl, r8
 8003d38:	eb4b 0609 	adc.w	r6, fp, r9
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4619      	mov	r1, r3
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	0094      	lsls	r4, r2, #2
 8003d50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d54:	008b      	lsls	r3, r1, #2
 8003d56:	461a      	mov	r2, r3
 8003d58:	4623      	mov	r3, r4
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	f7fc faa7 	bl	80002b0 <__aeabi_uldivmod>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	461a      	mov	r2, r3
 8003d68:	4bb8      	ldr	r3, [pc, #736]	; (800404c <UART_SetConfig+0x6f4>)
 8003d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	469b      	mov	fp, r3
 8003d78:	f04f 0c00 	mov.w	ip, #0
 8003d7c:	46d9      	mov	r9, fp
 8003d7e:	46e2      	mov	sl, ip
 8003d80:	eb19 0309 	adds.w	r3, r9, r9
 8003d84:	eb4a 040a 	adc.w	r4, sl, sl
 8003d88:	4699      	mov	r9, r3
 8003d8a:	46a2      	mov	sl, r4
 8003d8c:	eb19 090b 	adds.w	r9, r9, fp
 8003d90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003da8:	4689      	mov	r9, r1
 8003daa:	4692      	mov	sl, r2
 8003dac:	eb1b 0509 	adds.w	r5, fp, r9
 8003db0:	eb4c 060a 	adc.w	r6, ip, sl
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4619      	mov	r1, r3
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	f04f 0400 	mov.w	r4, #0
 8003dc6:	0094      	lsls	r4, r2, #2
 8003dc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dcc:	008b      	lsls	r3, r1, #2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	4631      	mov	r1, r6
 8003dd6:	f7fc fa6b 	bl	80002b0 <__aeabi_uldivmod>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b9a      	ldr	r3, [pc, #616]	; (800404c <UART_SetConfig+0x6f4>)
 8003de2:	fba3 1302 	umull	r1, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2164      	movs	r1, #100	; 0x64
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a95      	ldr	r2, [pc, #596]	; (800404c <UART_SetConfig+0x6f4>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e00:	4498      	add	r8, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	469b      	mov	fp, r3
 8003e06:	f04f 0c00 	mov.w	ip, #0
 8003e0a:	46d9      	mov	r9, fp
 8003e0c:	46e2      	mov	sl, ip
 8003e0e:	eb19 0309 	adds.w	r3, r9, r9
 8003e12:	eb4a 040a 	adc.w	r4, sl, sl
 8003e16:	4699      	mov	r9, r3
 8003e18:	46a2      	mov	sl, r4
 8003e1a:	eb19 090b 	adds.w	r9, r9, fp
 8003e1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e22:	f04f 0100 	mov.w	r1, #0
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e36:	4689      	mov	r9, r1
 8003e38:	4692      	mov	sl, r2
 8003e3a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e3e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4619      	mov	r1, r3
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	f04f 0400 	mov.w	r4, #0
 8003e54:	0094      	lsls	r4, r2, #2
 8003e56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e5a:	008b      	lsls	r3, r1, #2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4623      	mov	r3, r4
 8003e60:	4628      	mov	r0, r5
 8003e62:	4631      	mov	r1, r6
 8003e64:	f7fc fa24 	bl	80002b0 <__aeabi_uldivmod>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b77      	ldr	r3, [pc, #476]	; (800404c <UART_SetConfig+0x6f4>)
 8003e70:	fba3 1302 	umull	r1, r3, r3, r2
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	2164      	movs	r1, #100	; 0x64
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	3332      	adds	r3, #50	; 0x32
 8003e82:	4a72      	ldr	r2, [pc, #456]	; (800404c <UART_SetConfig+0x6f4>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4442      	add	r2, r8
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	e0d0      	b.n	800403a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe f894 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	469a      	mov	sl, r3
 8003ea2:	f04f 0b00 	mov.w	fp, #0
 8003ea6:	46d0      	mov	r8, sl
 8003ea8:	46d9      	mov	r9, fp
 8003eaa:	eb18 0308 	adds.w	r3, r8, r8
 8003eae:	eb49 0409 	adc.w	r4, r9, r9
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	46a1      	mov	r9, r4
 8003eb6:	eb18 080a 	adds.w	r8, r8, sl
 8003eba:	eb49 090b 	adc.w	r9, r9, fp
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ece:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ed2:	4688      	mov	r8, r1
 8003ed4:	4691      	mov	r9, r2
 8003ed6:	eb1a 0508 	adds.w	r5, sl, r8
 8003eda:	eb4b 0609 	adc.w	r6, fp, r9
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	f04f 0400 	mov.w	r4, #0
 8003ef0:	0094      	lsls	r4, r2, #2
 8003ef2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef6:	008b      	lsls	r3, r1, #2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	4631      	mov	r1, r6
 8003f00:	f7fc f9d6 	bl	80002b0 <__aeabi_uldivmod>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b50      	ldr	r3, [pc, #320]	; (800404c <UART_SetConfig+0x6f4>)
 8003f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	469b      	mov	fp, r3
 8003f1a:	f04f 0c00 	mov.w	ip, #0
 8003f1e:	46d9      	mov	r9, fp
 8003f20:	46e2      	mov	sl, ip
 8003f22:	eb19 0309 	adds.w	r3, r9, r9
 8003f26:	eb4a 040a 	adc.w	r4, sl, sl
 8003f2a:	4699      	mov	r9, r3
 8003f2c:	46a2      	mov	sl, r4
 8003f2e:	eb19 090b 	adds.w	r9, r9, fp
 8003f32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f4a:	4689      	mov	r9, r1
 8003f4c:	4692      	mov	sl, r2
 8003f4e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f52:	eb4c 060a 	adc.w	r6, ip, sl
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f04f 0400 	mov.w	r4, #0
 8003f68:	0094      	lsls	r4, r2, #2
 8003f6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f6e:	008b      	lsls	r3, r1, #2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4623      	mov	r3, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	4631      	mov	r1, r6
 8003f78:	f7fc f99a 	bl	80002b0 <__aeabi_uldivmod>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b32      	ldr	r3, [pc, #200]	; (800404c <UART_SetConfig+0x6f4>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	; 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	3332      	adds	r3, #50	; 0x32
 8003f96:	4a2d      	ldr	r2, [pc, #180]	; (800404c <UART_SetConfig+0x6f4>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa2:	4498      	add	r8, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	469b      	mov	fp, r3
 8003fa8:	f04f 0c00 	mov.w	ip, #0
 8003fac:	46d9      	mov	r9, fp
 8003fae:	46e2      	mov	sl, ip
 8003fb0:	eb19 0309 	adds.w	r3, r9, r9
 8003fb4:	eb4a 040a 	adc.w	r4, sl, sl
 8003fb8:	4699      	mov	r9, r3
 8003fba:	46a2      	mov	sl, r4
 8003fbc:	eb19 090b 	adds.w	r9, r9, fp
 8003fc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fd8:	4689      	mov	r9, r1
 8003fda:	4692      	mov	sl, r2
 8003fdc:	eb1b 0509 	adds.w	r5, fp, r9
 8003fe0:	eb4c 060a 	adc.w	r6, ip, sl
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f04f 0400 	mov.w	r4, #0
 8003ff6:	0094      	lsls	r4, r2, #2
 8003ff8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ffc:	008b      	lsls	r3, r1, #2
 8003ffe:	461a      	mov	r2, r3
 8004000:	4623      	mov	r3, r4
 8004002:	4628      	mov	r0, r5
 8004004:	4631      	mov	r1, r6
 8004006:	f7fc f953 	bl	80002b0 <__aeabi_uldivmod>
 800400a:	4603      	mov	r3, r0
 800400c:	460c      	mov	r4, r1
 800400e:	461a      	mov	r2, r3
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <UART_SetConfig+0x6f4>)
 8004012:	fba3 1302 	umull	r1, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2164      	movs	r1, #100	; 0x64
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	3332      	adds	r3, #50	; 0x32
 8004024:	4a09      	ldr	r2, [pc, #36]	; (800404c <UART_SetConfig+0x6f4>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4442      	add	r2, r8
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	e7ff      	b.n	800403a <UART_SetConfig+0x6e2>
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004044:	40011000 	.word	0x40011000
 8004048:	40011400 	.word	0x40011400
 800404c:	51eb851f 	.word	0x51eb851f

08004050 <__errno>:
 8004050:	4b01      	ldr	r3, [pc, #4]	; (8004058 <__errno+0x8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	2000000c 	.word	0x2000000c

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4e0d      	ldr	r6, [pc, #52]	; (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004062:	1ba4      	subs	r4, r4, r6
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2500      	movs	r5, #0
 8004068:	42a5      	cmp	r5, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4e0b      	ldr	r6, [pc, #44]	; (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	; (80040a0 <__libc_init_array+0x44>)
 8004070:	f000 fc26 	bl	80048c0 <_init>
 8004074:	1ba4      	subs	r4, r4, r6
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2500      	movs	r5, #0
 800407a:	42a5      	cmp	r5, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004084:	4798      	blx	r3
 8004086:	3501      	adds	r5, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800408e:	4798      	blx	r3
 8004090:	3501      	adds	r5, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	08004b64 	.word	0x08004b64
 8004098:	08004b64 	.word	0x08004b64
 800409c:	08004b64 	.word	0x08004b64
 80040a0:	08004b68 	.word	0x08004b68

080040a4 <memset>:
 80040a4:	4402      	add	r2, r0
 80040a6:	4603      	mov	r3, r0
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d100      	bne.n	80040ae <memset+0xa>
 80040ac:	4770      	bx	lr
 80040ae:	f803 1b01 	strb.w	r1, [r3], #1
 80040b2:	e7f9      	b.n	80040a8 <memset+0x4>

080040b4 <siprintf>:
 80040b4:	b40e      	push	{r1, r2, r3}
 80040b6:	b500      	push	{lr}
 80040b8:	b09c      	sub	sp, #112	; 0x70
 80040ba:	ab1d      	add	r3, sp, #116	; 0x74
 80040bc:	9002      	str	r0, [sp, #8]
 80040be:	9006      	str	r0, [sp, #24]
 80040c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040c4:	4809      	ldr	r0, [pc, #36]	; (80040ec <siprintf+0x38>)
 80040c6:	9107      	str	r1, [sp, #28]
 80040c8:	9104      	str	r1, [sp, #16]
 80040ca:	4909      	ldr	r1, [pc, #36]	; (80040f0 <siprintf+0x3c>)
 80040cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80040d0:	9105      	str	r1, [sp, #20]
 80040d2:	6800      	ldr	r0, [r0, #0]
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	a902      	add	r1, sp, #8
 80040d8:	f000 f866 	bl	80041a8 <_svfiprintf_r>
 80040dc:	9b02      	ldr	r3, [sp, #8]
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	b01c      	add	sp, #112	; 0x70
 80040e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040e8:	b003      	add	sp, #12
 80040ea:	4770      	bx	lr
 80040ec:	2000000c 	.word	0x2000000c
 80040f0:	ffff0208 	.word	0xffff0208

080040f4 <__ssputs_r>:
 80040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	688e      	ldr	r6, [r1, #8]
 80040fa:	429e      	cmp	r6, r3
 80040fc:	4682      	mov	sl, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	4690      	mov	r8, r2
 8004102:	4699      	mov	r9, r3
 8004104:	d837      	bhi.n	8004176 <__ssputs_r+0x82>
 8004106:	898a      	ldrh	r2, [r1, #12]
 8004108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800410c:	d031      	beq.n	8004172 <__ssputs_r+0x7e>
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	6909      	ldr	r1, [r1, #16]
 8004112:	1a6f      	subs	r7, r5, r1
 8004114:	6965      	ldr	r5, [r4, #20]
 8004116:	2302      	movs	r3, #2
 8004118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800411c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004120:	f109 0301 	add.w	r3, r9, #1
 8004124:	443b      	add	r3, r7
 8004126:	429d      	cmp	r5, r3
 8004128:	bf38      	it	cc
 800412a:	461d      	movcc	r5, r3
 800412c:	0553      	lsls	r3, r2, #21
 800412e:	d530      	bpl.n	8004192 <__ssputs_r+0x9e>
 8004130:	4629      	mov	r1, r5
 8004132:	f000 fb2b 	bl	800478c <_malloc_r>
 8004136:	4606      	mov	r6, r0
 8004138:	b950      	cbnz	r0, 8004150 <__ssputs_r+0x5c>
 800413a:	230c      	movs	r3, #12
 800413c:	f8ca 3000 	str.w	r3, [sl]
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004150:	463a      	mov	r2, r7
 8004152:	6921      	ldr	r1, [r4, #16]
 8004154:	f000 faa8 	bl	80046a8 <memcpy>
 8004158:	89a3      	ldrh	r3, [r4, #12]
 800415a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800415e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	6126      	str	r6, [r4, #16]
 8004166:	6165      	str	r5, [r4, #20]
 8004168:	443e      	add	r6, r7
 800416a:	1bed      	subs	r5, r5, r7
 800416c:	6026      	str	r6, [r4, #0]
 800416e:	60a5      	str	r5, [r4, #8]
 8004170:	464e      	mov	r6, r9
 8004172:	454e      	cmp	r6, r9
 8004174:	d900      	bls.n	8004178 <__ssputs_r+0x84>
 8004176:	464e      	mov	r6, r9
 8004178:	4632      	mov	r2, r6
 800417a:	4641      	mov	r1, r8
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	f000 fa9e 	bl	80046be <memmove>
 8004182:	68a3      	ldr	r3, [r4, #8]
 8004184:	1b9b      	subs	r3, r3, r6
 8004186:	60a3      	str	r3, [r4, #8]
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	441e      	add	r6, r3
 800418c:	6026      	str	r6, [r4, #0]
 800418e:	2000      	movs	r0, #0
 8004190:	e7dc      	b.n	800414c <__ssputs_r+0x58>
 8004192:	462a      	mov	r2, r5
 8004194:	f000 fb54 	bl	8004840 <_realloc_r>
 8004198:	4606      	mov	r6, r0
 800419a:	2800      	cmp	r0, #0
 800419c:	d1e2      	bne.n	8004164 <__ssputs_r+0x70>
 800419e:	6921      	ldr	r1, [r4, #16]
 80041a0:	4650      	mov	r0, sl
 80041a2:	f000 faa5 	bl	80046f0 <_free_r>
 80041a6:	e7c8      	b.n	800413a <__ssputs_r+0x46>

080041a8 <_svfiprintf_r>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	461d      	mov	r5, r3
 80041ae:	898b      	ldrh	r3, [r1, #12]
 80041b0:	061f      	lsls	r7, r3, #24
 80041b2:	b09d      	sub	sp, #116	; 0x74
 80041b4:	4680      	mov	r8, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	4616      	mov	r6, r2
 80041ba:	d50f      	bpl.n	80041dc <_svfiprintf_r+0x34>
 80041bc:	690b      	ldr	r3, [r1, #16]
 80041be:	b96b      	cbnz	r3, 80041dc <_svfiprintf_r+0x34>
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	f000 fae3 	bl	800478c <_malloc_r>
 80041c6:	6020      	str	r0, [r4, #0]
 80041c8:	6120      	str	r0, [r4, #16]
 80041ca:	b928      	cbnz	r0, 80041d8 <_svfiprintf_r+0x30>
 80041cc:	230c      	movs	r3, #12
 80041ce:	f8c8 3000 	str.w	r3, [r8]
 80041d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d6:	e0c8      	b.n	800436a <_svfiprintf_r+0x1c2>
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	6163      	str	r3, [r4, #20]
 80041dc:	2300      	movs	r3, #0
 80041de:	9309      	str	r3, [sp, #36]	; 0x24
 80041e0:	2320      	movs	r3, #32
 80041e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041e6:	2330      	movs	r3, #48	; 0x30
 80041e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ec:	9503      	str	r5, [sp, #12]
 80041ee:	f04f 0b01 	mov.w	fp, #1
 80041f2:	4637      	mov	r7, r6
 80041f4:	463d      	mov	r5, r7
 80041f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041fa:	b10b      	cbz	r3, 8004200 <_svfiprintf_r+0x58>
 80041fc:	2b25      	cmp	r3, #37	; 0x25
 80041fe:	d13e      	bne.n	800427e <_svfiprintf_r+0xd6>
 8004200:	ebb7 0a06 	subs.w	sl, r7, r6
 8004204:	d00b      	beq.n	800421e <_svfiprintf_r+0x76>
 8004206:	4653      	mov	r3, sl
 8004208:	4632      	mov	r2, r6
 800420a:	4621      	mov	r1, r4
 800420c:	4640      	mov	r0, r8
 800420e:	f7ff ff71 	bl	80040f4 <__ssputs_r>
 8004212:	3001      	adds	r0, #1
 8004214:	f000 80a4 	beq.w	8004360 <_svfiprintf_r+0x1b8>
 8004218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421a:	4453      	add	r3, sl
 800421c:	9309      	str	r3, [sp, #36]	; 0x24
 800421e:	783b      	ldrb	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 809d 	beq.w	8004360 <_svfiprintf_r+0x1b8>
 8004226:	2300      	movs	r3, #0
 8004228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800422c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	9307      	str	r3, [sp, #28]
 8004234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004238:	931a      	str	r3, [sp, #104]	; 0x68
 800423a:	462f      	mov	r7, r5
 800423c:	2205      	movs	r2, #5
 800423e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004242:	4850      	ldr	r0, [pc, #320]	; (8004384 <_svfiprintf_r+0x1dc>)
 8004244:	f7fb ffe4 	bl	8000210 <memchr>
 8004248:	9b04      	ldr	r3, [sp, #16]
 800424a:	b9d0      	cbnz	r0, 8004282 <_svfiprintf_r+0xda>
 800424c:	06d9      	lsls	r1, r3, #27
 800424e:	bf44      	itt	mi
 8004250:	2220      	movmi	r2, #32
 8004252:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004256:	071a      	lsls	r2, r3, #28
 8004258:	bf44      	itt	mi
 800425a:	222b      	movmi	r2, #43	; 0x2b
 800425c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004260:	782a      	ldrb	r2, [r5, #0]
 8004262:	2a2a      	cmp	r2, #42	; 0x2a
 8004264:	d015      	beq.n	8004292 <_svfiprintf_r+0xea>
 8004266:	9a07      	ldr	r2, [sp, #28]
 8004268:	462f      	mov	r7, r5
 800426a:	2000      	movs	r0, #0
 800426c:	250a      	movs	r5, #10
 800426e:	4639      	mov	r1, r7
 8004270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004274:	3b30      	subs	r3, #48	; 0x30
 8004276:	2b09      	cmp	r3, #9
 8004278:	d94d      	bls.n	8004316 <_svfiprintf_r+0x16e>
 800427a:	b1b8      	cbz	r0, 80042ac <_svfiprintf_r+0x104>
 800427c:	e00f      	b.n	800429e <_svfiprintf_r+0xf6>
 800427e:	462f      	mov	r7, r5
 8004280:	e7b8      	b.n	80041f4 <_svfiprintf_r+0x4c>
 8004282:	4a40      	ldr	r2, [pc, #256]	; (8004384 <_svfiprintf_r+0x1dc>)
 8004284:	1a80      	subs	r0, r0, r2
 8004286:	fa0b f000 	lsl.w	r0, fp, r0
 800428a:	4318      	orrs	r0, r3
 800428c:	9004      	str	r0, [sp, #16]
 800428e:	463d      	mov	r5, r7
 8004290:	e7d3      	b.n	800423a <_svfiprintf_r+0x92>
 8004292:	9a03      	ldr	r2, [sp, #12]
 8004294:	1d11      	adds	r1, r2, #4
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	9103      	str	r1, [sp, #12]
 800429a:	2a00      	cmp	r2, #0
 800429c:	db01      	blt.n	80042a2 <_svfiprintf_r+0xfa>
 800429e:	9207      	str	r2, [sp, #28]
 80042a0:	e004      	b.n	80042ac <_svfiprintf_r+0x104>
 80042a2:	4252      	negs	r2, r2
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	9207      	str	r2, [sp, #28]
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	783b      	ldrb	r3, [r7, #0]
 80042ae:	2b2e      	cmp	r3, #46	; 0x2e
 80042b0:	d10c      	bne.n	80042cc <_svfiprintf_r+0x124>
 80042b2:	787b      	ldrb	r3, [r7, #1]
 80042b4:	2b2a      	cmp	r3, #42	; 0x2a
 80042b6:	d133      	bne.n	8004320 <_svfiprintf_r+0x178>
 80042b8:	9b03      	ldr	r3, [sp, #12]
 80042ba:	1d1a      	adds	r2, r3, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	9203      	str	r2, [sp, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bfb8      	it	lt
 80042c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80042c8:	3702      	adds	r7, #2
 80042ca:	9305      	str	r3, [sp, #20]
 80042cc:	4d2e      	ldr	r5, [pc, #184]	; (8004388 <_svfiprintf_r+0x1e0>)
 80042ce:	7839      	ldrb	r1, [r7, #0]
 80042d0:	2203      	movs	r2, #3
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7fb ff9c 	bl	8000210 <memchr>
 80042d8:	b138      	cbz	r0, 80042ea <_svfiprintf_r+0x142>
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	1b40      	subs	r0, r0, r5
 80042de:	fa03 f000 	lsl.w	r0, r3, r0
 80042e2:	9b04      	ldr	r3, [sp, #16]
 80042e4:	4303      	orrs	r3, r0
 80042e6:	3701      	adds	r7, #1
 80042e8:	9304      	str	r3, [sp, #16]
 80042ea:	7839      	ldrb	r1, [r7, #0]
 80042ec:	4827      	ldr	r0, [pc, #156]	; (800438c <_svfiprintf_r+0x1e4>)
 80042ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042f2:	2206      	movs	r2, #6
 80042f4:	1c7e      	adds	r6, r7, #1
 80042f6:	f7fb ff8b 	bl	8000210 <memchr>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d038      	beq.n	8004370 <_svfiprintf_r+0x1c8>
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <_svfiprintf_r+0x1e8>)
 8004300:	bb13      	cbnz	r3, 8004348 <_svfiprintf_r+0x1a0>
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	3307      	adds	r3, #7
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	3308      	adds	r3, #8
 800430c:	9303      	str	r3, [sp, #12]
 800430e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004310:	444b      	add	r3, r9
 8004312:	9309      	str	r3, [sp, #36]	; 0x24
 8004314:	e76d      	b.n	80041f2 <_svfiprintf_r+0x4a>
 8004316:	fb05 3202 	mla	r2, r5, r2, r3
 800431a:	2001      	movs	r0, #1
 800431c:	460f      	mov	r7, r1
 800431e:	e7a6      	b.n	800426e <_svfiprintf_r+0xc6>
 8004320:	2300      	movs	r3, #0
 8004322:	3701      	adds	r7, #1
 8004324:	9305      	str	r3, [sp, #20]
 8004326:	4619      	mov	r1, r3
 8004328:	250a      	movs	r5, #10
 800432a:	4638      	mov	r0, r7
 800432c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004330:	3a30      	subs	r2, #48	; 0x30
 8004332:	2a09      	cmp	r2, #9
 8004334:	d903      	bls.n	800433e <_svfiprintf_r+0x196>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0c8      	beq.n	80042cc <_svfiprintf_r+0x124>
 800433a:	9105      	str	r1, [sp, #20]
 800433c:	e7c6      	b.n	80042cc <_svfiprintf_r+0x124>
 800433e:	fb05 2101 	mla	r1, r5, r1, r2
 8004342:	2301      	movs	r3, #1
 8004344:	4607      	mov	r7, r0
 8004346:	e7f0      	b.n	800432a <_svfiprintf_r+0x182>
 8004348:	ab03      	add	r3, sp, #12
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	4622      	mov	r2, r4
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <_svfiprintf_r+0x1ec>)
 8004350:	a904      	add	r1, sp, #16
 8004352:	4640      	mov	r0, r8
 8004354:	f3af 8000 	nop.w
 8004358:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800435c:	4681      	mov	r9, r0
 800435e:	d1d6      	bne.n	800430e <_svfiprintf_r+0x166>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	065b      	lsls	r3, r3, #25
 8004364:	f53f af35 	bmi.w	80041d2 <_svfiprintf_r+0x2a>
 8004368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800436a:	b01d      	add	sp, #116	; 0x74
 800436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004370:	ab03      	add	r3, sp, #12
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	4622      	mov	r2, r4
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <_svfiprintf_r+0x1ec>)
 8004378:	a904      	add	r1, sp, #16
 800437a:	4640      	mov	r0, r8
 800437c:	f000 f882 	bl	8004484 <_printf_i>
 8004380:	e7ea      	b.n	8004358 <_svfiprintf_r+0x1b0>
 8004382:	bf00      	nop
 8004384:	08004b28 	.word	0x08004b28
 8004388:	08004b2e 	.word	0x08004b2e
 800438c:	08004b32 	.word	0x08004b32
 8004390:	00000000 	.word	0x00000000
 8004394:	080040f5 	.word	0x080040f5

08004398 <_printf_common>:
 8004398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	4691      	mov	r9, r2
 800439e:	461f      	mov	r7, r3
 80043a0:	688a      	ldr	r2, [r1, #8]
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bfb8      	it	lt
 80043ac:	4613      	movlt	r3, r2
 80043ae:	f8c9 3000 	str.w	r3, [r9]
 80043b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043b6:	4606      	mov	r6, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	b112      	cbz	r2, 80043c2 <_printf_common+0x2a>
 80043bc:	3301      	adds	r3, #1
 80043be:	f8c9 3000 	str.w	r3, [r9]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043cc:	3302      	addmi	r3, #2
 80043ce:	f8c9 3000 	strmi.w	r3, [r9]
 80043d2:	6825      	ldr	r5, [r4, #0]
 80043d4:	f015 0506 	ands.w	r5, r5, #6
 80043d8:	d107      	bne.n	80043ea <_printf_common+0x52>
 80043da:	f104 0a19 	add.w	sl, r4, #25
 80043de:	68e3      	ldr	r3, [r4, #12]
 80043e0:	f8d9 2000 	ldr.w	r2, [r9]
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	42ab      	cmp	r3, r5
 80043e8:	dc28      	bgt.n	800443c <_printf_common+0xa4>
 80043ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	3300      	adds	r3, #0
 80043f2:	bf18      	it	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	0692      	lsls	r2, r2, #26
 80043f8:	d42d      	bmi.n	8004456 <_printf_common+0xbe>
 80043fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043fe:	4639      	mov	r1, r7
 8004400:	4630      	mov	r0, r6
 8004402:	47c0      	blx	r8
 8004404:	3001      	adds	r0, #1
 8004406:	d020      	beq.n	800444a <_printf_common+0xb2>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	68e5      	ldr	r5, [r4, #12]
 800440c:	f8d9 2000 	ldr.w	r2, [r9]
 8004410:	f003 0306 	and.w	r3, r3, #6
 8004414:	2b04      	cmp	r3, #4
 8004416:	bf08      	it	eq
 8004418:	1aad      	subeq	r5, r5, r2
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	bf0c      	ite	eq
 8004420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004424:	2500      	movne	r5, #0
 8004426:	4293      	cmp	r3, r2
 8004428:	bfc4      	itt	gt
 800442a:	1a9b      	subgt	r3, r3, r2
 800442c:	18ed      	addgt	r5, r5, r3
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	341a      	adds	r4, #26
 8004434:	454d      	cmp	r5, r9
 8004436:	d11a      	bne.n	800446e <_printf_common+0xd6>
 8004438:	2000      	movs	r0, #0
 800443a:	e008      	b.n	800444e <_printf_common+0xb6>
 800443c:	2301      	movs	r3, #1
 800443e:	4652      	mov	r2, sl
 8004440:	4639      	mov	r1, r7
 8004442:	4630      	mov	r0, r6
 8004444:	47c0      	blx	r8
 8004446:	3001      	adds	r0, #1
 8004448:	d103      	bne.n	8004452 <_printf_common+0xba>
 800444a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004452:	3501      	adds	r5, #1
 8004454:	e7c3      	b.n	80043de <_printf_common+0x46>
 8004456:	18e1      	adds	r1, r4, r3
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	2030      	movs	r0, #48	; 0x30
 800445c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004460:	4422      	add	r2, r4
 8004462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004466:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800446a:	3302      	adds	r3, #2
 800446c:	e7c5      	b.n	80043fa <_printf_common+0x62>
 800446e:	2301      	movs	r3, #1
 8004470:	4622      	mov	r2, r4
 8004472:	4639      	mov	r1, r7
 8004474:	4630      	mov	r0, r6
 8004476:	47c0      	blx	r8
 8004478:	3001      	adds	r0, #1
 800447a:	d0e6      	beq.n	800444a <_printf_common+0xb2>
 800447c:	f109 0901 	add.w	r9, r9, #1
 8004480:	e7d8      	b.n	8004434 <_printf_common+0x9c>
	...

08004484 <_printf_i>:
 8004484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004488:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800448c:	460c      	mov	r4, r1
 800448e:	7e09      	ldrb	r1, [r1, #24]
 8004490:	b085      	sub	sp, #20
 8004492:	296e      	cmp	r1, #110	; 0x6e
 8004494:	4617      	mov	r7, r2
 8004496:	4606      	mov	r6, r0
 8004498:	4698      	mov	r8, r3
 800449a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800449c:	f000 80b3 	beq.w	8004606 <_printf_i+0x182>
 80044a0:	d822      	bhi.n	80044e8 <_printf_i+0x64>
 80044a2:	2963      	cmp	r1, #99	; 0x63
 80044a4:	d036      	beq.n	8004514 <_printf_i+0x90>
 80044a6:	d80a      	bhi.n	80044be <_printf_i+0x3a>
 80044a8:	2900      	cmp	r1, #0
 80044aa:	f000 80b9 	beq.w	8004620 <_printf_i+0x19c>
 80044ae:	2958      	cmp	r1, #88	; 0x58
 80044b0:	f000 8083 	beq.w	80045ba <_printf_i+0x136>
 80044b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044bc:	e032      	b.n	8004524 <_printf_i+0xa0>
 80044be:	2964      	cmp	r1, #100	; 0x64
 80044c0:	d001      	beq.n	80044c6 <_printf_i+0x42>
 80044c2:	2969      	cmp	r1, #105	; 0x69
 80044c4:	d1f6      	bne.n	80044b4 <_printf_i+0x30>
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	0605      	lsls	r5, r0, #24
 80044cc:	f103 0104 	add.w	r1, r3, #4
 80044d0:	d52a      	bpl.n	8004528 <_printf_i+0xa4>
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6011      	str	r1, [r2, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	da03      	bge.n	80044e2 <_printf_i+0x5e>
 80044da:	222d      	movs	r2, #45	; 0x2d
 80044dc:	425b      	negs	r3, r3
 80044de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044e2:	486f      	ldr	r0, [pc, #444]	; (80046a0 <_printf_i+0x21c>)
 80044e4:	220a      	movs	r2, #10
 80044e6:	e039      	b.n	800455c <_printf_i+0xd8>
 80044e8:	2973      	cmp	r1, #115	; 0x73
 80044ea:	f000 809d 	beq.w	8004628 <_printf_i+0x1a4>
 80044ee:	d808      	bhi.n	8004502 <_printf_i+0x7e>
 80044f0:	296f      	cmp	r1, #111	; 0x6f
 80044f2:	d020      	beq.n	8004536 <_printf_i+0xb2>
 80044f4:	2970      	cmp	r1, #112	; 0x70
 80044f6:	d1dd      	bne.n	80044b4 <_printf_i+0x30>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f043 0320 	orr.w	r3, r3, #32
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	e003      	b.n	800450a <_printf_i+0x86>
 8004502:	2975      	cmp	r1, #117	; 0x75
 8004504:	d017      	beq.n	8004536 <_printf_i+0xb2>
 8004506:	2978      	cmp	r1, #120	; 0x78
 8004508:	d1d4      	bne.n	80044b4 <_printf_i+0x30>
 800450a:	2378      	movs	r3, #120	; 0x78
 800450c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004510:	4864      	ldr	r0, [pc, #400]	; (80046a4 <_printf_i+0x220>)
 8004512:	e055      	b.n	80045c0 <_printf_i+0x13c>
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	1d19      	adds	r1, r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6011      	str	r1, [r2, #0]
 800451c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004524:	2301      	movs	r3, #1
 8004526:	e08c      	b.n	8004642 <_printf_i+0x1be>
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6011      	str	r1, [r2, #0]
 800452c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004530:	bf18      	it	ne
 8004532:	b21b      	sxthne	r3, r3
 8004534:	e7cf      	b.n	80044d6 <_printf_i+0x52>
 8004536:	6813      	ldr	r3, [r2, #0]
 8004538:	6825      	ldr	r5, [r4, #0]
 800453a:	1d18      	adds	r0, r3, #4
 800453c:	6010      	str	r0, [r2, #0]
 800453e:	0628      	lsls	r0, r5, #24
 8004540:	d501      	bpl.n	8004546 <_printf_i+0xc2>
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	e002      	b.n	800454c <_printf_i+0xc8>
 8004546:	0668      	lsls	r0, r5, #25
 8004548:	d5fb      	bpl.n	8004542 <_printf_i+0xbe>
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	4854      	ldr	r0, [pc, #336]	; (80046a0 <_printf_i+0x21c>)
 800454e:	296f      	cmp	r1, #111	; 0x6f
 8004550:	bf14      	ite	ne
 8004552:	220a      	movne	r2, #10
 8004554:	2208      	moveq	r2, #8
 8004556:	2100      	movs	r1, #0
 8004558:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800455c:	6865      	ldr	r5, [r4, #4]
 800455e:	60a5      	str	r5, [r4, #8]
 8004560:	2d00      	cmp	r5, #0
 8004562:	f2c0 8095 	blt.w	8004690 <_printf_i+0x20c>
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	f021 0104 	bic.w	r1, r1, #4
 800456c:	6021      	str	r1, [r4, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d13d      	bne.n	80045ee <_printf_i+0x16a>
 8004572:	2d00      	cmp	r5, #0
 8004574:	f040 808e 	bne.w	8004694 <_printf_i+0x210>
 8004578:	4665      	mov	r5, ip
 800457a:	2a08      	cmp	r2, #8
 800457c:	d10b      	bne.n	8004596 <_printf_i+0x112>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	07db      	lsls	r3, r3, #31
 8004582:	d508      	bpl.n	8004596 <_printf_i+0x112>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	bfde      	ittt	le
 800458c:	2330      	movle	r3, #48	; 0x30
 800458e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004592:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004596:	ebac 0305 	sub.w	r3, ip, r5
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	f8cd 8000 	str.w	r8, [sp]
 80045a0:	463b      	mov	r3, r7
 80045a2:	aa03      	add	r2, sp, #12
 80045a4:	4621      	mov	r1, r4
 80045a6:	4630      	mov	r0, r6
 80045a8:	f7ff fef6 	bl	8004398 <_printf_common>
 80045ac:	3001      	adds	r0, #1
 80045ae:	d14d      	bne.n	800464c <_printf_i+0x1c8>
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b4:	b005      	add	sp, #20
 80045b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045ba:	4839      	ldr	r0, [pc, #228]	; (80046a0 <_printf_i+0x21c>)
 80045bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045c0:	6813      	ldr	r3, [r2, #0]
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	1d1d      	adds	r5, r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6015      	str	r5, [r2, #0]
 80045ca:	060a      	lsls	r2, r1, #24
 80045cc:	d50b      	bpl.n	80045e6 <_printf_i+0x162>
 80045ce:	07ca      	lsls	r2, r1, #31
 80045d0:	bf44      	itt	mi
 80045d2:	f041 0120 	orrmi.w	r1, r1, #32
 80045d6:	6021      	strmi	r1, [r4, #0]
 80045d8:	b91b      	cbnz	r3, 80045e2 <_printf_i+0x15e>
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	f022 0220 	bic.w	r2, r2, #32
 80045e0:	6022      	str	r2, [r4, #0]
 80045e2:	2210      	movs	r2, #16
 80045e4:	e7b7      	b.n	8004556 <_printf_i+0xd2>
 80045e6:	064d      	lsls	r5, r1, #25
 80045e8:	bf48      	it	mi
 80045ea:	b29b      	uxthmi	r3, r3
 80045ec:	e7ef      	b.n	80045ce <_printf_i+0x14a>
 80045ee:	4665      	mov	r5, ip
 80045f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80045f4:	fb02 3311 	mls	r3, r2, r1, r3
 80045f8:	5cc3      	ldrb	r3, [r0, r3]
 80045fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045fe:	460b      	mov	r3, r1
 8004600:	2900      	cmp	r1, #0
 8004602:	d1f5      	bne.n	80045f0 <_printf_i+0x16c>
 8004604:	e7b9      	b.n	800457a <_printf_i+0xf6>
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	6825      	ldr	r5, [r4, #0]
 800460a:	6961      	ldr	r1, [r4, #20]
 800460c:	1d18      	adds	r0, r3, #4
 800460e:	6010      	str	r0, [r2, #0]
 8004610:	0628      	lsls	r0, r5, #24
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	d501      	bpl.n	800461a <_printf_i+0x196>
 8004616:	6019      	str	r1, [r3, #0]
 8004618:	e002      	b.n	8004620 <_printf_i+0x19c>
 800461a:	066a      	lsls	r2, r5, #25
 800461c:	d5fb      	bpl.n	8004616 <_printf_i+0x192>
 800461e:	8019      	strh	r1, [r3, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	4665      	mov	r5, ip
 8004626:	e7b9      	b.n	800459c <_printf_i+0x118>
 8004628:	6813      	ldr	r3, [r2, #0]
 800462a:	1d19      	adds	r1, r3, #4
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	681d      	ldr	r5, [r3, #0]
 8004630:	6862      	ldr	r2, [r4, #4]
 8004632:	2100      	movs	r1, #0
 8004634:	4628      	mov	r0, r5
 8004636:	f7fb fdeb 	bl	8000210 <memchr>
 800463a:	b108      	cbz	r0, 8004640 <_printf_i+0x1bc>
 800463c:	1b40      	subs	r0, r0, r5
 800463e:	6060      	str	r0, [r4, #4]
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	2300      	movs	r3, #0
 8004646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464a:	e7a7      	b.n	800459c <_printf_i+0x118>
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	462a      	mov	r2, r5
 8004650:	4639      	mov	r1, r7
 8004652:	4630      	mov	r0, r6
 8004654:	47c0      	blx	r8
 8004656:	3001      	adds	r0, #1
 8004658:	d0aa      	beq.n	80045b0 <_printf_i+0x12c>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	079b      	lsls	r3, r3, #30
 800465e:	d413      	bmi.n	8004688 <_printf_i+0x204>
 8004660:	68e0      	ldr	r0, [r4, #12]
 8004662:	9b03      	ldr	r3, [sp, #12]
 8004664:	4298      	cmp	r0, r3
 8004666:	bfb8      	it	lt
 8004668:	4618      	movlt	r0, r3
 800466a:	e7a3      	b.n	80045b4 <_printf_i+0x130>
 800466c:	2301      	movs	r3, #1
 800466e:	464a      	mov	r2, r9
 8004670:	4639      	mov	r1, r7
 8004672:	4630      	mov	r0, r6
 8004674:	47c0      	blx	r8
 8004676:	3001      	adds	r0, #1
 8004678:	d09a      	beq.n	80045b0 <_printf_i+0x12c>
 800467a:	3501      	adds	r5, #1
 800467c:	68e3      	ldr	r3, [r4, #12]
 800467e:	9a03      	ldr	r2, [sp, #12]
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	42ab      	cmp	r3, r5
 8004684:	dcf2      	bgt.n	800466c <_printf_i+0x1e8>
 8004686:	e7eb      	b.n	8004660 <_printf_i+0x1dc>
 8004688:	2500      	movs	r5, #0
 800468a:	f104 0919 	add.w	r9, r4, #25
 800468e:	e7f5      	b.n	800467c <_printf_i+0x1f8>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ac      	bne.n	80045ee <_printf_i+0x16a>
 8004694:	7803      	ldrb	r3, [r0, #0]
 8004696:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800469a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800469e:	e76c      	b.n	800457a <_printf_i+0xf6>
 80046a0:	08004b39 	.word	0x08004b39
 80046a4:	08004b4a 	.word	0x08004b4a

080046a8 <memcpy>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	1e43      	subs	r3, r0, #1
 80046ac:	440a      	add	r2, r1
 80046ae:	4291      	cmp	r1, r2
 80046b0:	d100      	bne.n	80046b4 <memcpy+0xc>
 80046b2:	bd10      	pop	{r4, pc}
 80046b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046bc:	e7f7      	b.n	80046ae <memcpy+0x6>

080046be <memmove>:
 80046be:	4288      	cmp	r0, r1
 80046c0:	b510      	push	{r4, lr}
 80046c2:	eb01 0302 	add.w	r3, r1, r2
 80046c6:	d807      	bhi.n	80046d8 <memmove+0x1a>
 80046c8:	1e42      	subs	r2, r0, #1
 80046ca:	4299      	cmp	r1, r3
 80046cc:	d00a      	beq.n	80046e4 <memmove+0x26>
 80046ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046d6:	e7f8      	b.n	80046ca <memmove+0xc>
 80046d8:	4283      	cmp	r3, r0
 80046da:	d9f5      	bls.n	80046c8 <memmove+0xa>
 80046dc:	1881      	adds	r1, r0, r2
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	42d3      	cmn	r3, r2
 80046e2:	d100      	bne.n	80046e6 <memmove+0x28>
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80046ee:	e7f7      	b.n	80046e0 <memmove+0x22>

080046f0 <_free_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4605      	mov	r5, r0
 80046f4:	2900      	cmp	r1, #0
 80046f6:	d045      	beq.n	8004784 <_free_r+0x94>
 80046f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046fc:	1f0c      	subs	r4, r1, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfb8      	it	lt
 8004702:	18e4      	addlt	r4, r4, r3
 8004704:	f000 f8d2 	bl	80048ac <__malloc_lock>
 8004708:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <_free_r+0x98>)
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	4610      	mov	r0, r2
 800470e:	b933      	cbnz	r3, 800471e <_free_r+0x2e>
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	6014      	str	r4, [r2, #0]
 8004714:	4628      	mov	r0, r5
 8004716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800471a:	f000 b8c8 	b.w	80048ae <__malloc_unlock>
 800471e:	42a3      	cmp	r3, r4
 8004720:	d90c      	bls.n	800473c <_free_r+0x4c>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	1862      	adds	r2, r4, r1
 8004726:	4293      	cmp	r3, r2
 8004728:	bf04      	itt	eq
 800472a:	681a      	ldreq	r2, [r3, #0]
 800472c:	685b      	ldreq	r3, [r3, #4]
 800472e:	6063      	str	r3, [r4, #4]
 8004730:	bf04      	itt	eq
 8004732:	1852      	addeq	r2, r2, r1
 8004734:	6022      	streq	r2, [r4, #0]
 8004736:	6004      	str	r4, [r0, #0]
 8004738:	e7ec      	b.n	8004714 <_free_r+0x24>
 800473a:	4613      	mov	r3, r2
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	b10a      	cbz	r2, 8004744 <_free_r+0x54>
 8004740:	42a2      	cmp	r2, r4
 8004742:	d9fa      	bls.n	800473a <_free_r+0x4a>
 8004744:	6819      	ldr	r1, [r3, #0]
 8004746:	1858      	adds	r0, r3, r1
 8004748:	42a0      	cmp	r0, r4
 800474a:	d10b      	bne.n	8004764 <_free_r+0x74>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	4401      	add	r1, r0
 8004750:	1858      	adds	r0, r3, r1
 8004752:	4282      	cmp	r2, r0
 8004754:	6019      	str	r1, [r3, #0]
 8004756:	d1dd      	bne.n	8004714 <_free_r+0x24>
 8004758:	6810      	ldr	r0, [r2, #0]
 800475a:	6852      	ldr	r2, [r2, #4]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	4401      	add	r1, r0
 8004760:	6019      	str	r1, [r3, #0]
 8004762:	e7d7      	b.n	8004714 <_free_r+0x24>
 8004764:	d902      	bls.n	800476c <_free_r+0x7c>
 8004766:	230c      	movs	r3, #12
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	e7d3      	b.n	8004714 <_free_r+0x24>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	1821      	adds	r1, r4, r0
 8004770:	428a      	cmp	r2, r1
 8004772:	bf04      	itt	eq
 8004774:	6811      	ldreq	r1, [r2, #0]
 8004776:	6852      	ldreq	r2, [r2, #4]
 8004778:	6062      	str	r2, [r4, #4]
 800477a:	bf04      	itt	eq
 800477c:	1809      	addeq	r1, r1, r0
 800477e:	6021      	streq	r1, [r4, #0]
 8004780:	605c      	str	r4, [r3, #4]
 8004782:	e7c7      	b.n	8004714 <_free_r+0x24>
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	bf00      	nop
 8004788:	20000094 	.word	0x20000094

0800478c <_malloc_r>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	1ccd      	adds	r5, r1, #3
 8004790:	f025 0503 	bic.w	r5, r5, #3
 8004794:	3508      	adds	r5, #8
 8004796:	2d0c      	cmp	r5, #12
 8004798:	bf38      	it	cc
 800479a:	250c      	movcc	r5, #12
 800479c:	2d00      	cmp	r5, #0
 800479e:	4606      	mov	r6, r0
 80047a0:	db01      	blt.n	80047a6 <_malloc_r+0x1a>
 80047a2:	42a9      	cmp	r1, r5
 80047a4:	d903      	bls.n	80047ae <_malloc_r+0x22>
 80047a6:	230c      	movs	r3, #12
 80047a8:	6033      	str	r3, [r6, #0]
 80047aa:	2000      	movs	r0, #0
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
 80047ae:	f000 f87d 	bl	80048ac <__malloc_lock>
 80047b2:	4a21      	ldr	r2, [pc, #132]	; (8004838 <_malloc_r+0xac>)
 80047b4:	6814      	ldr	r4, [r2, #0]
 80047b6:	4621      	mov	r1, r4
 80047b8:	b991      	cbnz	r1, 80047e0 <_malloc_r+0x54>
 80047ba:	4c20      	ldr	r4, [pc, #128]	; (800483c <_malloc_r+0xb0>)
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	b91b      	cbnz	r3, 80047c8 <_malloc_r+0x3c>
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 f863 	bl	800488c <_sbrk_r>
 80047c6:	6020      	str	r0, [r4, #0]
 80047c8:	4629      	mov	r1, r5
 80047ca:	4630      	mov	r0, r6
 80047cc:	f000 f85e 	bl	800488c <_sbrk_r>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d124      	bne.n	800481e <_malloc_r+0x92>
 80047d4:	230c      	movs	r3, #12
 80047d6:	6033      	str	r3, [r6, #0]
 80047d8:	4630      	mov	r0, r6
 80047da:	f000 f868 	bl	80048ae <__malloc_unlock>
 80047de:	e7e4      	b.n	80047aa <_malloc_r+0x1e>
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	1b5b      	subs	r3, r3, r5
 80047e4:	d418      	bmi.n	8004818 <_malloc_r+0x8c>
 80047e6:	2b0b      	cmp	r3, #11
 80047e8:	d90f      	bls.n	800480a <_malloc_r+0x7e>
 80047ea:	600b      	str	r3, [r1, #0]
 80047ec:	50cd      	str	r5, [r1, r3]
 80047ee:	18cc      	adds	r4, r1, r3
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f85c 	bl	80048ae <__malloc_unlock>
 80047f6:	f104 000b 	add.w	r0, r4, #11
 80047fa:	1d23      	adds	r3, r4, #4
 80047fc:	f020 0007 	bic.w	r0, r0, #7
 8004800:	1ac3      	subs	r3, r0, r3
 8004802:	d0d3      	beq.n	80047ac <_malloc_r+0x20>
 8004804:	425a      	negs	r2, r3
 8004806:	50e2      	str	r2, [r4, r3]
 8004808:	e7d0      	b.n	80047ac <_malloc_r+0x20>
 800480a:	428c      	cmp	r4, r1
 800480c:	684b      	ldr	r3, [r1, #4]
 800480e:	bf16      	itet	ne
 8004810:	6063      	strne	r3, [r4, #4]
 8004812:	6013      	streq	r3, [r2, #0]
 8004814:	460c      	movne	r4, r1
 8004816:	e7eb      	b.n	80047f0 <_malloc_r+0x64>
 8004818:	460c      	mov	r4, r1
 800481a:	6849      	ldr	r1, [r1, #4]
 800481c:	e7cc      	b.n	80047b8 <_malloc_r+0x2c>
 800481e:	1cc4      	adds	r4, r0, #3
 8004820:	f024 0403 	bic.w	r4, r4, #3
 8004824:	42a0      	cmp	r0, r4
 8004826:	d005      	beq.n	8004834 <_malloc_r+0xa8>
 8004828:	1a21      	subs	r1, r4, r0
 800482a:	4630      	mov	r0, r6
 800482c:	f000 f82e 	bl	800488c <_sbrk_r>
 8004830:	3001      	adds	r0, #1
 8004832:	d0cf      	beq.n	80047d4 <_malloc_r+0x48>
 8004834:	6025      	str	r5, [r4, #0]
 8004836:	e7db      	b.n	80047f0 <_malloc_r+0x64>
 8004838:	20000094 	.word	0x20000094
 800483c:	20000098 	.word	0x20000098

08004840 <_realloc_r>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	4607      	mov	r7, r0
 8004844:	4614      	mov	r4, r2
 8004846:	460e      	mov	r6, r1
 8004848:	b921      	cbnz	r1, 8004854 <_realloc_r+0x14>
 800484a:	4611      	mov	r1, r2
 800484c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004850:	f7ff bf9c 	b.w	800478c <_malloc_r>
 8004854:	b922      	cbnz	r2, 8004860 <_realloc_r+0x20>
 8004856:	f7ff ff4b 	bl	80046f0 <_free_r>
 800485a:	4625      	mov	r5, r4
 800485c:	4628      	mov	r0, r5
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004860:	f000 f826 	bl	80048b0 <_malloc_usable_size_r>
 8004864:	42a0      	cmp	r0, r4
 8004866:	d20f      	bcs.n	8004888 <_realloc_r+0x48>
 8004868:	4621      	mov	r1, r4
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff ff8e 	bl	800478c <_malloc_r>
 8004870:	4605      	mov	r5, r0
 8004872:	2800      	cmp	r0, #0
 8004874:	d0f2      	beq.n	800485c <_realloc_r+0x1c>
 8004876:	4631      	mov	r1, r6
 8004878:	4622      	mov	r2, r4
 800487a:	f7ff ff15 	bl	80046a8 <memcpy>
 800487e:	4631      	mov	r1, r6
 8004880:	4638      	mov	r0, r7
 8004882:	f7ff ff35 	bl	80046f0 <_free_r>
 8004886:	e7e9      	b.n	800485c <_realloc_r+0x1c>
 8004888:	4635      	mov	r5, r6
 800488a:	e7e7      	b.n	800485c <_realloc_r+0x1c>

0800488c <_sbrk_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4c06      	ldr	r4, [pc, #24]	; (80048a8 <_sbrk_r+0x1c>)
 8004890:	2300      	movs	r3, #0
 8004892:	4605      	mov	r5, r0
 8004894:	4608      	mov	r0, r1
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	f7fc fe50 	bl	800153c <_sbrk>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_sbrk_r+0x1a>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_sbrk_r+0x1a>
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	20000290 	.word	0x20000290

080048ac <__malloc_lock>:
 80048ac:	4770      	bx	lr

080048ae <__malloc_unlock>:
 80048ae:	4770      	bx	lr

080048b0 <_malloc_usable_size_r>:
 80048b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b4:	1f18      	subs	r0, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bfbc      	itt	lt
 80048ba:	580b      	ldrlt	r3, [r1, r0]
 80048bc:	18c0      	addlt	r0, r0, r3
 80048be:	4770      	bx	lr

080048c0 <_init>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr

080048cc <_fini>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr
