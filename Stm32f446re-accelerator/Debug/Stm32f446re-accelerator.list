
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf4  08007bf4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b24  20000024  08007c20  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b48  08007c20  00022b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001703e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e18  00000000  00000000  00037092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  00039eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  0003ad58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023754  00000000  00000000  0003baa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1ab  00000000  00000000  0005f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb194  00000000  00000000  0006d3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013853b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a80  00000000  00000000  001385b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007aa8 	.word	0x08007aa8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08007aa8 	.word	0x08007aa8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f000 ff18 	bl	8001340 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f000 ff10 	bl	8001340 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f000 ff08 	bl	8001340 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f000 ff00 	bl	8001340 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f000 ff12 	bl	8001388 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08007b34 	.word	0x08007b34

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <Rf96_OutPower+0x28>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	4619      	mov	r1, r3
 8000582:	2009      	movs	r0, #9
 8000584:	f000 fedc 	bl	8001340 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000588:	2187      	movs	r1, #135	; 0x87
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f000 fed8 	bl	8001340 <SPIWrite>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08007b40 	.word	0x08007b40

0800059c <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Rf96_OCP+0x20>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	200b      	movs	r0, #11
 80005b0:	f000 fec6 	bl	8001340 <SPIWrite>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	08007b44 	.word	0x08007b44

080005c0 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <Rf96_LNA+0x20>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	4619      	mov	r1, r3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f000 feb4 	bl	8001340 <SPIWrite>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08007b48 	.word	0x08007b48

080005e4 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C);
	SPIWrite(LR_RegModemConfig1,0x8E);
 80005f6:	218e      	movs	r1, #142	; 0x8e
 80005f8:	201d      	movs	r0, #29
 80005fa:	f000 fea1 	bl	8001340 <SPIWrite>
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 8000618:	2177      	movs	r1, #119	; 0x77
 800061a:	201e      	movs	r0, #30
 800061c:	f000 fe90 	bl	8001340 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	201f      	movs	r0, #31
 8000628:	f000 fe8a 	bl	8001340 <SPIWrite>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2020      	movs	r0, #32
 800064a:	f000 fe79 	bl	8001340 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2021      	movs	r0, #33	; 0x21
 8000656:	f000 fe73 	bl	8001340 <SPIWrite>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	460a      	mov	r2, r1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	4613      	mov	r3, r2
 8000670:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	019b      	lsls	r3, r3, #6
 8000676:	b2da      	uxtb	r2, r3
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	011b      	lsls	r3, r3, #4
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	2040      	movs	r0, #64	; 0x40
 8000686:	f000 fe5b 	bl	8001340 <SPIWrite>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000696:	21f7      	movs	r1, #247	; 0xf7
 8000698:	2011      	movs	r0, #17
 800069a:	f000 fe51 	bl	8001340 <SPIWrite>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	4603      	mov	r3, r0
 80006aa:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4619      	mov	r1, r3
 80006b0:	2022      	movs	r0, #34	; 0x22
 80006b2:	f000 fe45 	bl	8001340 <SPIWrite>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4619      	mov	r1, r3
 80006cc:	200e      	movs	r0, #14
 80006ce:	f000 fe37 	bl	8001340 <SPIWrite>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	4603      	mov	r3, r0
 80006e2:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4619      	mov	r1, r3
 80006e8:	200d      	movs	r0, #13
 80006ea:	f000 fe29 	bl	8001340 <SPIWrite>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80006fa:	2183      	movs	r1, #131	; 0x83
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fe1f 	bl	8001340 <SPIWrite>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}

08000706 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	461a      	mov	r2, r3
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fe35 	bl	8001388 <BurstWrite>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 800072a:	f7ff fefb 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 800072e:	f7ff ff01 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff ff06 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff19 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff2c 	bl	800059c <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff ff3b 	bl	80005c0 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 800074a:	2200      	movs	r2, #0
 800074c:	2104      	movs	r1, #4
 800074e:	2007      	movs	r0, #7
 8000750:	f7ff ff48 	bl	80005e4 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000754:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000758:	2101      	movs	r1, #1
 800075a:	2006      	movs	r0, #6
 800075c:	f7ff ff53 	bl	8000606 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 8000760:	2008      	movs	r0, #8
 8000762:	f7ff ff67 	bl	8000634 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000766:	f7ff fed5 	bl	8000514 <Rf96_Standby>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}

0800076e <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1(1,0);
 8000772:	2100      	movs	r1, #0
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff ff74 	bl	8000662 <Rf96_PinOut_Di0_Di1>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800077a:	f7ff fec3 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800077e:	f7ff ff88 	bl	8000692 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 8000782:	201b      	movs	r0, #27
 8000784:	f7ff ff8d 	bl	80006a2 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000788:	2080      	movs	r0, #128	; 0x80
 800078a:	f7ff ff98 	bl	80006be <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800078e:	2080      	movs	r0, #128	; 0x80
 8000790:	f7ff ffa3 	bl	80006da <Rf96_FIFO_point>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	4619      	mov	r1, r3
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ffac 	bl	8000706 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 80007ae:	f7ff ffa2 	bl	80006f6 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <PacketToRadio>:
uint8_t accelSelect[3][5] = {{0x68, 0x04, 0x32, 0x04, 0x3a},{0x68, 0x04, 0x64, 0x04, 0x6c},{0x68, 0x04, 0x96, 0x04, 0x9e}};



void PacketToRadio(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	e01d      	b.n	8000804 <PacketToRadio+0x48>
	{
		for(uint8_t i=0;i<9;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	71bb      	strb	r3, [r7, #6]
 80007cc:	e014      	b.n	80007f8 <PacketToRadio+0x3c>
		   RadioBuff[i+j*9]=packageCut[j][i];
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	79b8      	ldrb	r0, [r7, #6]
 80007d2:	79bc      	ldrb	r4, [r7, #6]
 80007d4:	79f9      	ldrb	r1, [r7, #7]
 80007d6:	460b      	mov	r3, r1
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	440b      	add	r3, r1
 80007dc:	18e1      	adds	r1, r4, r3
 80007de:	4c13      	ldr	r4, [pc, #76]	; (800082c <PacketToRadio+0x70>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	019b      	lsls	r3, r3, #6
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4423      	add	r3, r4
 80007ea:	4403      	add	r3, r0
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <PacketToRadio+0x74>)
 80007f0:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<9;i++)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	3301      	adds	r3, #1
 80007f6:	71bb      	strb	r3, [r7, #6]
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b08      	cmp	r3, #8
 80007fc:	d9e7      	bls.n	80007ce <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	3301      	adds	r3, #1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d9de      	bls.n	80007c8 <PacketToRadio+0xc>
	}

	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 800080a:	2080      	movs	r0, #128	; 0x80
 800080c:	f7ff ff57 	bl	80006be <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 8000810:	2080      	movs	r0, #128	; 0x80
 8000812:	f7ff ff62 	bl	80006da <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 8000816:	f7ff fe75 	bl	8000504 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 800081a:	211b      	movs	r1, #27
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <PacketToRadio+0x74>)
 800081e:	f7ff ffbb 	bl	8000798 <Rf96_LoRaTxPacket>
	//  srtAll[0]='1';
	//  srtAll[1]='\n';
	//  HAL_UART_Transmit_IT(&huart2, srtAll,2);

}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bd90      	pop	{r4, r7, pc}
 800082a:	bf00      	nop
 800082c:	200004d8 	.word	0x200004d8
 8000830:	20002358 	.word	0x20002358

08000834 <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 8000834:	b480      	push	{r7}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	4611      	mov	r1, r2
 8000840:	461a      	mov	r2, r3
 8000842:	460b      	mov	r3, r1
 8000844:	80fb      	strh	r3, [r7, #6]
 8000846:	4613      	mov	r3, r2
 8000848:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	82fb      	strh	r3, [r7, #22]
 800084e:	e01f      	b.n	8000890 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <uint32_TO_charmass+0x70>)
 8000854:	fba3 2301 	umull	r2, r3, r3, r1
 8000858:	08da      	lsrs	r2, r3, #3
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	1aca      	subs	r2, r1, r3
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	1e59      	subs	r1, r3, #1
 800086a:	8afb      	ldrh	r3, [r7, #22]
 800086c:	1ac9      	subs	r1, r1, r3
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	440b      	add	r3, r1
 8000872:	4619      	mov	r1, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	440b      	add	r3, r1
 8000878:	3230      	adds	r2, #48	; 0x30
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <uint32_TO_charmass+0x70>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 800088a:	8afb      	ldrh	r3, [r7, #22]
 800088c:	3301      	adds	r3, #1
 800088e:	82fb      	strh	r3, [r7, #22]
 8000890:	8afa      	ldrh	r2, [r7, #22]
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	d3db      	bcc.n	8000850 <uint32_TO_charmass+0x1c>

	}
}
 8000898:	bf00      	nop
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	cccccccd 	.word	0xcccccccd

080008a8 <SyncAccel>:


// Функция синхронизации

void SyncAccel(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	  // Синхронизация
	  if(readFlag==1)
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SyncAccel+0x8c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d111      	bne.n	80008d8 <SyncAccel+0x30>
	  {
		UsartCount=0;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <SyncAccel+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
	  	readFlag=0;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <SyncAccel+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f001 feaf 	bl	8002624 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <SyncAccel+0x94>)
 80008c8:	f003 ffc8 	bl	800485c <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14*PacketSize);
 80008cc:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80008d0:	491b      	ldr	r1, [pc, #108]	; (8000940 <SyncAccel+0x98>)
 80008d2:	481a      	ldr	r0, [pc, #104]	; (800093c <SyncAccel+0x94>)
 80008d4:	f003 ff42 	bl	800475c <HAL_UART_Receive_DMA>
	  }
	  if(readFlag2==1)
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <SyncAccel+0x9c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d111      	bne.n	8000904 <SyncAccel+0x5c>
	  {
		UsartCount=0;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <SyncAccel+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
	  	readFlag2=0;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <SyncAccel+0x9c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f001 fe99 	bl	8002624 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 80008f2:	4815      	ldr	r0, [pc, #84]	; (8000948 <SyncAccel+0xa0>)
 80008f4:	f003 ffb2 	bl	800485c <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14*PacketSize);
 80008f8:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80008fc:	4913      	ldr	r1, [pc, #76]	; (800094c <SyncAccel+0xa4>)
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <SyncAccel+0xa0>)
 8000900:	f003 ff2c 	bl	800475c <HAL_UART_Receive_DMA>
	  }
	  if(readFlag3==1)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <SyncAccel+0xa8>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d111      	bne.n	8000930 <SyncAccel+0x88>
	  {
		UsartCount=0;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <SyncAccel+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	  	readFlag3=0;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <SyncAccel+0xa8>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f001 fe83 	bl	8002624 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <SyncAccel+0xac>)
 8000920:	f003 ff9c 	bl	800485c <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14*PacketSize);
 8000924:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000928:	490b      	ldr	r1, [pc, #44]	; (8000958 <SyncAccel+0xb0>)
 800092a:	480a      	ldr	r0, [pc, #40]	; (8000954 <SyncAccel+0xac>)
 800092c:	f003 ff16 	bl	800475c <HAL_UART_Receive_DMA>
	  }


}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20002378 	.word	0x20002378
 8000938:	200007cc 	.word	0x200007cc
 800093c:	20000a94 	.word	0x20000a94
 8000940:	20000040 	.word	0x20000040
 8000944:	2000234c 	.word	0x2000234c
 8000948:	20001ad4 	.word	0x20001ad4
 800094c:	20000350 	.word	0x20000350
 8000950:	2000080c 	.word	0x2000080c
 8000954:	200019cc 	.word	0x200019cc
 8000958:	200001c8 	.word	0x200001c8

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f001 fded 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f8a5 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 fa6f 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 800096e:	f000 fa27 	bl	8000dc0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000972:	f000 f911 	bl	8000b98 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000976:	f000 f9cf 	bl	8000d18 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800097a:	f000 f9f7 	bl	8000d6c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800097e:	f000 f9a1 	bl	8000cc4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000982:	f004 fe41 	bl	8005608 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000986:	f000 f93d 	bl	8000c04 <MX_SPI3_Init>
  MX_UART5_Init();
 800098a:	f000 f971 	bl	8000c70 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  int kolZapis = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]



	Rf96_Lora_init();
 8000992:	f7ff fec8 	bl	8000726 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8000996:	f7ff feea 	bl	800076e <Rf96_Lora_TX_mode>

*/



		HAL_UART_Receive_DMA(&huart3, &package[0][0], 14*PacketSize);
 800099a:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800099e:	4936      	ldr	r1, [pc, #216]	; (8000a78 <main+0x11c>)
 80009a0:	4836      	ldr	r0, [pc, #216]	; (8000a7c <main+0x120>)
 80009a2:	f003 fedb 	bl	800475c <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart5, &package[1][0], 14*PacketSize);
 80009a6:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80009aa:	4935      	ldr	r1, [pc, #212]	; (8000a80 <main+0x124>)
 80009ac:	4835      	ldr	r0, [pc, #212]	; (8000a84 <main+0x128>)
 80009ae:	f003 fed5 	bl	800475c <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, &package[2][0], 14*PacketSize);
 80009b2:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80009b6:	4934      	ldr	r1, [pc, #208]	; (8000a88 <main+0x12c>)
 80009b8:	4834      	ldr	r0, [pc, #208]	; (8000a8c <main+0x130>)
 80009ba:	f003 fecf 	bl	800475c <HAL_UART_Receive_DMA>


        //Rf96_LoRaTxPacket((char*)packageCut,27);


		PacketToRadio();
 80009be:	f7ff fefd 	bl	80007bc <PacketToRadio>

		////////////////ФЛЕШКА



	    fres = f_mount(&FatFs, "", 1); //1=mount now
 80009c2:	2201      	movs	r2, #1
 80009c4:	4932      	ldr	r1, [pc, #200]	; (8000a90 <main+0x134>)
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <main+0x138>)
 80009c8:	f006 fbc4 	bl	8007154 <f_mount>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <main+0x13c>)
 80009d2:	701a      	strb	r2, [r3, #0]


		  if (fres != FR_OK) {
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <main+0x13c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d000      	beq.n	80009de <main+0x82>
		   // myprintf("f_mount error (%i)\r\n", fres);

			//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
			while(1);
 80009dc:	e7fe      	b.n	80009dc <main+0x80>


	  //fres = f_open(&fil, "write.txt", FA_OPEN_APPEND | FA_WRITE);


		  fres = f_open(&fil, "write.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80009de:	220a      	movs	r2, #10
 80009e0:	492e      	ldr	r1, [pc, #184]	; (8000a9c <main+0x140>)
 80009e2:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <main+0x144>)
 80009e4:	f006 fbfc 	bl	80071e0 <f_open>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <main+0x13c>)
 80009ee:	701a      	strb	r2, [r3, #0]

	  if(fres == FR_OK) {
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <main+0x13c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d000      	beq.n	80009fa <main+0x9e>
	 //   myprintf("I was able to open 'write.txt' for writing\r\n");
	  } else {
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
			while(1);
 80009f8:	e7fe      	b.n	80009f8 <main+0x9c>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Кнопка
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <main+0x148>)
 8000a00:	f002 fce2 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d110      	bne.n	8000a2c <main+0xd0>
	  {
		  //Close file, don't forget this!
		  //HAL_Delay(10);
		   f_close(&fil);
 8000a0a:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <main+0x144>)
 8000a0c:	f006 ff99 	bl	8007942 <f_close>
		  // HAL_Delay(5);
		   //De-mount drive
		  f_mount(NULL, "", 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	491f      	ldr	r1, [pc, #124]	; (8000a90 <main+0x134>)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f006 fb9d 	bl	8007154 <f_mount>
		  while(1)
		  {
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		  HAL_Delay(500);
 8000a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1e:	f001 fe01 	bl	8002624 <HAL_Delay>
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		  HAL_Delay(500);
 8000a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a26:	f001 fdfd 	bl	8002624 <HAL_Delay>
		  HAL_Delay(500);
 8000a2a:	e7f6      	b.n	8000a1a <main+0xbe>
		  }
	  }
	  // Синхронизация
	    SyncAccel();
 8000a2c:	f7ff ff3c 	bl	80008a8 <SyncAccel>



	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 8000a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a34:	481c      	ldr	r0, [pc, #112]	; (8000aa8 <main+0x14c>)
 8000a36:	f002 fcc7 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <main+0xe8>
		{
			PacketToRadio();
 8000a40:	f7ff febc 	bl	80007bc <PacketToRadio>
		}

		if(metka==1)
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <main+0x150>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d1d6      	bne.n	80009fa <main+0x9e>
		{

			// парсер  Buff_Mid

			metka=0;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <main+0x150>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
			  }

*/


			          fres = f_write(&fil, &str1, sizeof(str1), &bytesWrote);
 8000a52:	463b      	mov	r3, r7
 8000a54:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8000a58:	4915      	ldr	r1, [pc, #84]	; (8000ab0 <main+0x154>)
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <main+0x144>)
 8000a5c:	f006 fd7e 	bl	800755c <f_write>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <main+0x13c>)
 8000a66:	701a      	strb	r2, [r3, #0]
					  } else {

					 //   myprintf("f_write error (%i)\r\n");
					  }

					  fres= f_sync(&fil);
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <main+0x144>)
 8000a6a:	f006 feec 	bl	8007846 <f_sync>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <main+0x13c>)
 8000a74:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 8000a76:	e7c0      	b.n	80009fa <main+0x9e>
 8000a78:	20000040 	.word	0x20000040
 8000a7c:	20000a94 	.word	0x20000a94
 8000a80:	200001c8 	.word	0x200001c8
 8000a84:	200019cc 	.word	0x200019cc
 8000a88:	20000350 	.word	0x20000350
 8000a8c:	20001ad4 	.word	0x20001ad4
 8000a90:	08007ae0 	.word	0x08007ae0
 8000a94:	20000ad4 	.word	0x20000ad4
 8000a98:	20002494 	.word	0x20002494
 8000a9c:	08007ae4 	.word	0x08007ae4
 8000aa0:	2000249c 	.word	0x2000249c
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	200007cd 	.word	0x200007cd
 8000ab0:	20001b30 	.word	0x20001b30

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2234      	movs	r2, #52	; 0x34
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 ffe8 	bl	8007a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <SystemClock_Config+0xdc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	; (8000b90 <SystemClock_Config+0xdc>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <SystemClock_Config+0xdc>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <SystemClock_Config+0xe0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <SystemClock_Config+0xe0>)
 8000afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <SystemClock_Config+0xe0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b24:	2308      	movs	r3, #8
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b28:	23b4      	movs	r3, #180	; 0xb4
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 ff7f 	bl	8003a40 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b48:	f000 fbe0 	bl	800130c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b4c:	f002 fc6e 	bl	800342c <HAL_PWREx_EnableOverDrive>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b56:	f000 fbd9 	bl	800130c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2105      	movs	r1, #5
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fca7 	bl	80034cc <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b84:	f000 fbc2 	bl	800130c <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	; 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <MX_SPI1_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bcc:	2210      	movs	r2, #16
 8000bce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bea:	f003 f983 	bl	8003ef4 <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bf4:	f000 fb8a 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20002384 	.word	0x20002384
 8000c00:	40013000 	.word	0x40013000

08000c04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_SPI3_Init+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c34:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c50:	220a      	movs	r2, #10
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c56:	f003 f94d 	bl	8003ef4 <HAL_SPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c60:	f000 fb54 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000196c 	.word	0x2000196c
 8000c6c:	40003c00 	.word	0x40003c00

08000c70 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_UART5_Init+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000c7c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000c80:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_UART5_Init+0x4c>)
 8000ca8:	f003 fd0a 	bl	80046c0 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000cb2:	f000 fb2b 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200019cc 	.word	0x200019cc
 8000cc0:	40005000 	.word	0x40005000

08000cc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USART1_UART_Init+0x4c>)
 8000cfc:	f003 fce0 	bl	80046c0 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 fb01 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20001ad4 	.word	0x20001ad4
 8000d14:	40011000 	.word	0x40011000

08000d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_USART2_UART_Init+0x50>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f003 fcb6 	bl	80046c0 <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d5a:	f000 fad7 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200023e8 	.word	0x200023e8
 8000d68:	40004400 	.word	0x40004400

08000d6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <MX_USART3_UART_Init+0x50>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d78:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000d7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USART3_UART_Init+0x4c>)
 8000da4:	f003 fc8c 	bl	80046c0 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dae:	f000 faad 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000a94 	.word	0x20000a94
 8000dbc:	40004800 	.word	0x40004800

08000dc0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_DMA_Init+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <MX_DMA_Init+0x88>)
 8000dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_DMA_Init+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	200b      	movs	r0, #11
 8000e04:	f001 fd0b 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e08:	200b      	movs	r0, #11
 8000e0a:	f001 fd24 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	200c      	movs	r0, #12
 8000e14:	f001 fd03 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e18:	200c      	movs	r0, #12
 8000e1a:	f001 fd1c 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2011      	movs	r0, #17
 8000e24:	f001 fcfb 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e28:	2011      	movs	r0, #17
 8000e2a:	f001 fd14 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	203a      	movs	r0, #58	; 0x3a
 8000e34:	f001 fcf3 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e38:	203a      	movs	r0, #58	; 0x3a
 8000e3a:	f001 fd0c 	bl	8002856 <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b5e      	ldr	r3, [pc, #376]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a5d      	ldr	r2, [pc, #372]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b5b      	ldr	r3, [pc, #364]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b57      	ldr	r3, [pc, #348]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a56      	ldr	r2, [pc, #344]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b54      	ldr	r3, [pc, #336]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b50      	ldr	r3, [pc, #320]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a48      	ldr	r2, [pc, #288]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <MX_GPIO_Init+0x194>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000ed8:	4842      	ldr	r0, [pc, #264]	; (8000fe4 <MX_GPIO_Init+0x198>)
 8000eda:	f002 fa8d 	bl	80033f8 <HAL_GPIO_WritePin>
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f248 0112 	movw	r1, #32786	; 0x8012
 8000ee4:	4840      	ldr	r0, [pc, #256]	; (8000fe8 <MX_GPIO_Init+0x19c>)
 8000ee6:	f002 fa87 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f246 0142 	movw	r1, #24642	; 0x6042
 8000ef0:	483e      	ldr	r0, [pc, #248]	; (8000fec <MX_GPIO_Init+0x1a0>)
 8000ef2:	f002 fa81 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <MX_GPIO_Init+0x1a4>)
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4836      	ldr	r0, [pc, #216]	; (8000fe4 <MX_GPIO_Init+0x198>)
 8000f0c:	f002 f8ca 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000f10:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000f14:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	482e      	ldr	r0, [pc, #184]	; (8000fe4 <MX_GPIO_Init+0x198>)
 8000f2a:	f002 f8bb 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000f2e:	f240 4301 	movw	r3, #1025	; 0x401
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4829      	ldr	r0, [pc, #164]	; (8000fe8 <MX_GPIO_Init+0x19c>)
 8000f44:	f002 f8ae 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8000f48:	f248 0312 	movw	r3, #32786	; 0x8012
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4821      	ldr	r0, [pc, #132]	; (8000fe8 <MX_GPIO_Init+0x19c>)
 8000f62:	f002 f89f 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f66:	2302      	movs	r3, #2
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481b      	ldr	r0, [pc, #108]	; (8000fec <MX_GPIO_Init+0x1a0>)
 8000f7e:	f002 f891 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8000f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_GPIO_Init+0x1a0>)
 8000f9c:	f002 f882 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8000fa0:	f244 0340 	movw	r3, #16448	; 0x4040
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_GPIO_Init+0x1a0>)
 8000fba:	f002 f873 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fbe:	2338      	movs	r3, #56	; 0x38
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_GPIO_Init+0x1a0>)
 8000fd2:	f002 f867 	bl	80030a4 <HAL_GPIO_Init>

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	10210000 	.word	0x10210000

08000ff4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]



if(huart==&huart3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4ab2      	ldr	r2, [pc, #712]	; (80012c8 <HAL_UART_RxCpltCallback+0x2d4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d138      	bne.n	8001076 <HAL_UART_RxCpltCallback+0x82>
{

if(package[0][0]!=0x68 && package[0][14]!=0x68)
 8001004:	4bb1      	ldr	r3, [pc, #708]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b68      	cmp	r3, #104	; 0x68
 800100a:	d00a      	beq.n	8001022 <HAL_UART_RxCpltCallback+0x2e>
 800100c:	4baf      	ldr	r3, [pc, #700]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 800100e:	7b9b      	ldrb	r3, [r3, #14]
 8001010:	2b68      	cmp	r3, #104	; 0x68
 8001012:	d006      	beq.n	8001022 <HAL_UART_RxCpltCallback+0x2e>
{
	readFlag=1;
 8001014:	4bae      	ldr	r3, [pc, #696]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
	UsartCount=0;
 800101a:	4bae      	ldr	r3, [pc, #696]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	e029      	b.n	8001076 <HAL_UART_RxCpltCallback+0x82>
	//HAL_UART_Abort(&huart3);

}else
{
	for(uint8_t j=0;j<PacketSize;j++)
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
 8001026:	e01d      	b.n	8001064 <HAL_UART_RxCpltCallback+0x70>
	{
	for(uint8_t i=0;i<9;i++)
 8001028:	2300      	movs	r3, #0
 800102a:	75bb      	strb	r3, [r7, #22]
 800102c:	e014      	b.n	8001058 <HAL_UART_RxCpltCallback+0x64>
	{
		packageCut[0][i+j*9]=package[0][i+4+j*14];
 800102e:	7dbb      	ldrb	r3, [r7, #22]
 8001030:	1d19      	adds	r1, r3, #4
 8001032:	7dfa      	ldrb	r2, [r7, #23]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4419      	add	r1, r3
 800103e:	7db8      	ldrb	r0, [r7, #22]
 8001040:	7dfa      	ldrb	r2, [r7, #23]
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	4403      	add	r3, r0
 800104a:	4aa0      	ldr	r2, [pc, #640]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 800104c:	5c51      	ldrb	r1, [r2, r1]
 800104e:	4aa2      	ldr	r2, [pc, #648]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001050:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001052:	7dbb      	ldrb	r3, [r7, #22]
 8001054:	3301      	adds	r3, #1
 8001056:	75bb      	strb	r3, [r7, #22]
 8001058:	7dbb      	ldrb	r3, [r7, #22]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d9e7      	bls.n	800102e <HAL_UART_RxCpltCallback+0x3a>
	for(uint8_t j=0;j<PacketSize;j++)
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	3301      	adds	r3, #1
 8001062:	75fb      	strb	r3, [r7, #23]
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b1b      	cmp	r3, #27
 8001068:	d9de      	bls.n	8001028 <HAL_UART_RxCpltCallback+0x34>
	for(uint8_t i=0;i<9*20;i++)
	{
		packageCut[0][i]=package[0][i+4];
	}
	*/
	UsartCount++;
 800106a:	4b9a      	ldr	r3, [pc, #616]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b98      	ldr	r3, [pc, #608]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001074:	701a      	strb	r2, [r3, #0]

}
}
if(huart==&huart1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a98      	ldr	r2, [pc, #608]	; (80012dc <HAL_UART_RxCpltCallback+0x2e8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d13f      	bne.n	80010fe <HAL_UART_RxCpltCallback+0x10a>
{

	if(package[2][0]!=0x68 && package[2][14]!=0x68)
 800107e:	4b93      	ldr	r3, [pc, #588]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 8001080:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8001084:	2b68      	cmp	r3, #104	; 0x68
 8001086:	d00b      	beq.n	80010a0 <HAL_UART_RxCpltCallback+0xac>
 8001088:	4b90      	ldr	r3, [pc, #576]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 800108a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800108e:	2b68      	cmp	r3, #104	; 0x68
 8001090:	d006      	beq.n	80010a0 <HAL_UART_RxCpltCallback+0xac>
	{
		readFlag2=1;
 8001092:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Abort(&huart3);
		UsartCount=0;
 8001098:	4b8e      	ldr	r3, [pc, #568]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e02e      	b.n	80010fe <HAL_UART_RxCpltCallback+0x10a>

	}else
	{

		for(uint8_t j=0;j<PacketSize;j++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	757b      	strb	r3, [r7, #21]
 80010a4:	e022      	b.n	80010ec <HAL_UART_RxCpltCallback+0xf8>
		{
		for(uint8_t i=0;i<9;i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	753b      	strb	r3, [r7, #20]
 80010aa:	e019      	b.n	80010e0 <HAL_UART_RxCpltCallback+0xec>
		{
			packageCut[2][i+j*9]=package[2][i+4+j*14];
 80010ac:	7d3b      	ldrb	r3, [r7, #20]
 80010ae:	1d19      	adds	r1, r3, #4
 80010b0:	7d7a      	ldrb	r2, [r7, #21]
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4419      	add	r1, r3
 80010bc:	7d38      	ldrb	r0, [r7, #20]
 80010be:	7d7a      	ldrb	r2, [r7, #21]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4413      	add	r3, r2
 80010c6:	4403      	add	r3, r0
 80010c8:	4a80      	ldr	r2, [pc, #512]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 80010ca:	440a      	add	r2, r1
 80010cc:	f892 1310 	ldrb.w	r1, [r2, #784]	; 0x310
 80010d0:	4a81      	ldr	r2, [pc, #516]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 80010d2:	4413      	add	r3, r2
 80010d4:	460a      	mov	r2, r1
 80010d6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
		for(uint8_t i=0;i<9;i++)
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	753b      	strb	r3, [r7, #20]
 80010e0:	7d3b      	ldrb	r3, [r7, #20]
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d9e2      	bls.n	80010ac <HAL_UART_RxCpltCallback+0xb8>
		for(uint8_t j=0;j<PacketSize;j++)
 80010e6:	7d7b      	ldrb	r3, [r7, #21]
 80010e8:	3301      	adds	r3, #1
 80010ea:	757b      	strb	r3, [r7, #21]
 80010ec:	7d7b      	ldrb	r3, [r7, #21]
 80010ee:	2b1b      	cmp	r3, #27
 80010f0:	d9d9      	bls.n	80010a6 <HAL_UART_RxCpltCallback+0xb2>
		for(uint8_t i=0;i<9*20;i++)
		{
			packageCut[2][i]=package[2][i+4];
		}
		*/
		UsartCount++;
 80010f2:	4b78      	ldr	r3, [pc, #480]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 80010fc:	701a      	strb	r2, [r3, #0]
	}

}

if(huart==&huart5)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a78      	ldr	r2, [pc, #480]	; (80012e4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d13f      	bne.n	8001186 <HAL_UART_RxCpltCallback+0x192>
{

	if(package[1][0]!=0x68 && package[1][14]!=0x68)
 8001106:	4b71      	ldr	r3, [pc, #452]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 8001108:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800110c:	2b68      	cmp	r3, #104	; 0x68
 800110e:	d00b      	beq.n	8001128 <HAL_UART_RxCpltCallback+0x134>
 8001110:	4b6e      	ldr	r3, [pc, #440]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 8001112:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001116:	2b68      	cmp	r3, #104	; 0x68
 8001118:	d006      	beq.n	8001128 <HAL_UART_RxCpltCallback+0x134>
	{
		readFlag3=1;
 800111a:	4b73      	ldr	r3, [pc, #460]	; (80012e8 <HAL_UART_RxCpltCallback+0x2f4>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001120:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e02e      	b.n	8001186 <HAL_UART_RxCpltCallback+0x192>
		//HAL_UART_Abort(&huart3);

	}else
	{
		for(uint8_t j=0;j<PacketSize;j++)
 8001128:	2300      	movs	r3, #0
 800112a:	74fb      	strb	r3, [r7, #19]
 800112c:	e022      	b.n	8001174 <HAL_UART_RxCpltCallback+0x180>
		{
		for(uint8_t i=0;i<9;i++)
 800112e:	2300      	movs	r3, #0
 8001130:	74bb      	strb	r3, [r7, #18]
 8001132:	e019      	b.n	8001168 <HAL_UART_RxCpltCallback+0x174>
		{
			packageCut[1][i+j*9]=package[1][i+4+j*14];
 8001134:	7cbb      	ldrb	r3, [r7, #18]
 8001136:	1d19      	adds	r1, r3, #4
 8001138:	7cfa      	ldrb	r2, [r7, #19]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4419      	add	r1, r3
 8001144:	7cb8      	ldrb	r0, [r7, #18]
 8001146:	7cfa      	ldrb	r2, [r7, #19]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	4403      	add	r3, r0
 8001150:	4a5e      	ldr	r2, [pc, #376]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 8001152:	440a      	add	r2, r1
 8001154:	f892 1188 	ldrb.w	r1, [r2, #392]	; 0x188
 8001158:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		for(uint8_t i=0;i<9;i++)
 8001162:	7cbb      	ldrb	r3, [r7, #18]
 8001164:	3301      	adds	r3, #1
 8001166:	74bb      	strb	r3, [r7, #18]
 8001168:	7cbb      	ldrb	r3, [r7, #18]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d9e2      	bls.n	8001134 <HAL_UART_RxCpltCallback+0x140>
		for(uint8_t j=0;j<PacketSize;j++)
 800116e:	7cfb      	ldrb	r3, [r7, #19]
 8001170:	3301      	adds	r3, #1
 8001172:	74fb      	strb	r3, [r7, #19]
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b1b      	cmp	r3, #27
 8001178:	d9d9      	bls.n	800112e <HAL_UART_RxCpltCallback+0x13a>
		for(uint8_t i=0;i<9*20;i++)
		{
			packageCut[1][i]=package[1][i+4];
		}
		*/
		UsartCount++;
 800117a:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001184:	701a      	strb	r2, [r3, #0]

	}

}
if(UsartCount==3 && readFlag==0 && readFlag2==0 && readFlag3==0)  // Получено 1 измерение с каждого датчика
 8001186:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b03      	cmp	r3, #3
 800118c:	f040 8098 	bne.w	80012c0 <HAL_UART_RxCpltCallback+0x2cc>
 8001190:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f040 8093 	bne.w	80012c0 <HAL_UART_RxCpltCallback+0x2cc>
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <HAL_UART_RxCpltCallback+0x2ec>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 808e 	bne.w	80012c0 <HAL_UART_RxCpltCallback+0x2cc>
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <HAL_UART_RxCpltCallback+0x2f4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f040 8089 	bne.w	80012c0 <HAL_UART_RxCpltCallback+0x2cc>
{
	UsartCount=0;
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]



	reciveTime = HAL_GetTick();
 80011b4:	f001 fa2a 	bl	800260c <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <HAL_UART_RxCpltCallback+0x2f8>)
 80011bc:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0, j=PacketSize;i<PacketSize;i++, j--)
 80011be:	2300      	movs	r3, #0
 80011c0:	747b      	strb	r3, [r7, #17]
 80011c2:	231c      	movs	r3, #28
 80011c4:	743b      	strb	r3, [r7, #16]
 80011c6:	e014      	b.n	80011f2 <HAL_UART_RxCpltCallback+0x1fe>
	{
		uint32_TO_charmass(reciveTime-j, Buff_Mid, i*36, 8);
 80011c8:	4b48      	ldr	r3, [pc, #288]	; (80012ec <HAL_UART_RxCpltCallback+0x2f8>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	7c3b      	ldrb	r3, [r7, #16]
 80011ce:	1ad0      	subs	r0, r2, r3
 80011d0:	7c7b      	ldrb	r3, [r7, #17]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	00d2      	lsls	r2, r2, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	2308      	movs	r3, #8
 80011e0:	4943      	ldr	r1, [pc, #268]	; (80012f0 <HAL_UART_RxCpltCallback+0x2fc>)
 80011e2:	f7ff fb27 	bl	8000834 <uint32_TO_charmass>
	for(uint8_t i=0, j=PacketSize;i<PacketSize;i++, j--)
 80011e6:	7c7b      	ldrb	r3, [r7, #17]
 80011e8:	3301      	adds	r3, #1
 80011ea:	747b      	strb	r3, [r7, #17]
 80011ec:	7c3b      	ldrb	r3, [r7, #16]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	743b      	strb	r3, [r7, #16]
 80011f2:	7c7b      	ldrb	r3, [r7, #17]
 80011f4:	2b1b      	cmp	r3, #27
 80011f6:	d9e7      	bls.n	80011c8 <HAL_UART_RxCpltCallback+0x1d4>
	}

	for(uint8_t j=0;j<PacketSize;j++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e05a      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x2c0>
	{
		for(uint8_t i=0;i<9;i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	73bb      	strb	r3, [r7, #14]
 8001202:	e015      	b.n	8001230 <HAL_UART_RxCpltCallback+0x23c>
		{
			Buff_Mid[i+9+j*36]=packageCut[0][i+j*9];
 8001204:	7bb9      	ldrb	r1, [r7, #14]
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	4419      	add	r1, r3
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	f103 0009 	add.w	r0, r3, #9
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4403      	add	r3, r0
 8001222:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001224:	5c51      	ldrb	r1, [r2, r1]
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_UART_RxCpltCallback+0x2fc>)
 8001228:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	3301      	adds	r3, #1
 800122e:	73bb      	strb	r3, [r7, #14]
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d9e6      	bls.n	8001204 <HAL_UART_RxCpltCallback+0x210>

		}
		for(uint8_t i=0;i<9;i++)
 8001236:	2300      	movs	r3, #0
 8001238:	737b      	strb	r3, [r7, #13]
 800123a:	e017      	b.n	800126c <HAL_UART_RxCpltCallback+0x278>
		{
			Buff_Mid[i+18+j*36]=packageCut[1][i+j*9];
 800123c:	7b79      	ldrb	r1, [r7, #13]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	4419      	add	r1, r3
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	f103 0012 	add.w	r0, r3, #18
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4403      	add	r3, r0
 800125a:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 800125c:	440a      	add	r2, r1
 800125e:	f892 10fc 	ldrb.w	r1, [r2, #252]	; 0xfc
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <HAL_UART_RxCpltCallback+0x2fc>)
 8001264:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	3301      	adds	r3, #1
 800126a:	737b      	strb	r3, [r7, #13]
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	2b08      	cmp	r3, #8
 8001270:	d9e4      	bls.n	800123c <HAL_UART_RxCpltCallback+0x248>

		}
		for(uint8_t i=0;i<9;i++)
 8001272:	2300      	movs	r3, #0
 8001274:	733b      	strb	r3, [r7, #12]
 8001276:	e017      	b.n	80012a8 <HAL_UART_RxCpltCallback+0x2b4>
		{
			Buff_Mid[i+27+j*36]=packageCut[2][i+j*9];
 8001278:	7b39      	ldrb	r1, [r7, #12]
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	4419      	add	r1, r3
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	f103 001b 	add.w	r0, r3, #27
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4403      	add	r3, r0
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001298:	440a      	add	r2, r1
 800129a:	f892 11f8 	ldrb.w	r1, [r2, #504]	; 0x1f8
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_UART_RxCpltCallback+0x2fc>)
 80012a0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 80012a2:	7b3b      	ldrb	r3, [r7, #12]
 80012a4:	3301      	adds	r3, #1
 80012a6:	733b      	strb	r3, [r7, #12]
 80012a8:	7b3b      	ldrb	r3, [r7, #12]
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d9e4      	bls.n	8001278 <HAL_UART_RxCpltCallback+0x284>
	for(uint8_t j=0;j<PacketSize;j++)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	3301      	adds	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b1b      	cmp	r3, #27
 80012b8:	d9a1      	bls.n	80011fe <HAL_UART_RxCpltCallback+0x20a>

		}

	}

	metka=1;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
	}
	*/

}

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000a94 	.word	0x20000a94
 80012cc:	20000040 	.word	0x20000040
 80012d0:	20002378 	.word	0x20002378
 80012d4:	200007cc 	.word	0x200007cc
 80012d8:	200004d8 	.word	0x200004d8
 80012dc:	20001ad4 	.word	0x20001ad4
 80012e0:	2000234c 	.word	0x2000234c
 80012e4:	200019cc 	.word	0x200019cc
 80012e8:	2000080c 	.word	0x2000080c
 80012ec:	20002380 	.word	0x20002380
 80012f0:	20000d04 	.word	0x20000d04
 80012f4:	200007cd 	.word	0x200007cd

080012f8 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]


}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8001326:	1df9      	adds	r1, r7, #7
 8001328:	230a      	movs	r3, #10
 800132a:	2201      	movs	r2, #1
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <SPICmd8bit+0x20>)
 800132e:	f002 fe45 	bl	8003fbc <HAL_SPI_Transmit>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20002384 	.word	0x20002384

08001340 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001350:	2200      	movs	r2, #0
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <SPIWrite+0x44>)
 8001356:	f002 f84f 	bl	80033f8 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ffda 	bl	800131c <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffd6 	bl	800131c <SPICmd8bit>
	NSS_H();
 8001370:	2201      	movs	r2, #1
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <SPIWrite+0x44>)
 8001376:	f002 f83f 	bl	80033f8 <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40020400 	.word	0x40020400

08001388 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d922      	bls.n	80013e4 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 800139e:	2200      	movs	r2, #0
 80013a0:	2140      	movs	r1, #64	; 0x40
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <BurstWrite+0x64>)
 80013a4:	f002 f828 	bl	80033f8 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffb3 	bl	800131c <SPICmd8bit>
    for(i=0;i<length;i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e009      	b.n	80013d0 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ffa9 	bl	800131c <SPICmd8bit>
    for(i=0;i<length;i++)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3f1      	bcc.n	80013bc <BurstWrite+0x34>
    NSS_H();
 80013d8:	2201      	movs	r2, #1
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <BurstWrite+0x64>)
 80013de:	f002 f80b 	bl	80033f8 <HAL_GPIO_WritePin>
 80013e2:	e000      	b.n	80013e6 <BurstWrite+0x5e>
    return;
 80013e4:	bf00      	nop
  }
}
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_MspInit+0x4c>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x4c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x4c>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800142e:	2007      	movs	r0, #7
 8001430:	f001 f9ea 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a4a      	ldr	r2, [pc, #296]	; (8001588 <HAL_SPI_MspInit+0x148>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12c      	bne.n	80014bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_SPI_MspInit+0x14c>)
 800146c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a41      	ldr	r2, [pc, #260]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800149a:	23e0      	movs	r3, #224	; 0xe0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014aa:	2305      	movs	r3, #5
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4836      	ldr	r0, [pc, #216]	; (8001590 <HAL_SPI_MspInit+0x150>)
 80014b6:	f001 fdf5 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014ba:	e060      	b.n	800157e <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a34      	ldr	r2, [pc, #208]	; (8001594 <HAL_SPI_MspInit+0x154>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d15b      	bne.n	800157e <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_SPI_MspInit+0x14c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a2f      	ldr	r2, [pc, #188]	; (800158c <HAL_SPI_MspInit+0x14c>)
 80014d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_SPI_MspInit+0x14c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_SPI_MspInit+0x14c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_SPI_MspInit+0x14c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_SPI_MspInit+0x14c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_SPI_MspInit+0x14c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001522:	2301      	movs	r3, #1
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800152a:	2307      	movs	r3, #7
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <HAL_SPI_MspInit+0x158>)
 8001536:	f001 fdb5 	bl	80030a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800153a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800154c:	2306      	movs	r3, #6
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <HAL_SPI_MspInit+0x15c>)
 8001558:	f001 fda4 	bl	80030a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800155c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001566:	2301      	movs	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156e:	2306      	movs	r3, #6
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <HAL_SPI_MspInit+0x15c>)
 800157a:	f001 fd93 	bl	80030a4 <HAL_GPIO_Init>
}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40013000 	.word	0x40013000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000
 8001594:	40003c00 	.word	0x40003c00
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b092      	sub	sp, #72	; 0x48
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a87      	ldr	r2, [pc, #540]	; (80017dc <HAL_UART_MspInit+0x23c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	f040 8083 	bne.w	80016ca <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
 80015c8:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a84      	ldr	r2, [pc, #528]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80015ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
 80015de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e4:	4b7e      	ldr	r3, [pc, #504]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	4a7d      	ldr	r2, [pc, #500]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6313      	str	r3, [r2, #48]	; 0x30
 80015f0:	4b7b      	ldr	r3, [pc, #492]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001600:	4b77      	ldr	r3, [pc, #476]	; (80017e0 <HAL_UART_MspInit+0x240>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a76      	ldr	r2, [pc, #472]	; (80017e0 <HAL_UART_MspInit+0x240>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b74      	ldr	r3, [pc, #464]	; (80017e0 <HAL_UART_MspInit+0x240>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001622:	2301      	movs	r3, #1
 8001624:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800162a:	2308      	movs	r3, #8
 800162c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001632:	4619      	mov	r1, r3
 8001634:	486b      	ldr	r0, [pc, #428]	; (80017e4 <HAL_UART_MspInit+0x244>)
 8001636:	f001 fd35 	bl	80030a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800163a:	2304      	movs	r3, #4
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800164a:	2308      	movs	r3, #8
 800164c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001652:	4619      	mov	r1, r3
 8001654:	4864      	ldr	r0, [pc, #400]	; (80017e8 <HAL_UART_MspInit+0x248>)
 8001656:	f001 fd25 	bl	80030a4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800165a:	4b64      	ldr	r3, [pc, #400]	; (80017ec <HAL_UART_MspInit+0x24c>)
 800165c:	4a64      	ldr	r2, [pc, #400]	; (80017f0 <HAL_UART_MspInit+0x250>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001660:	4b62      	ldr	r3, [pc, #392]	; (80017ec <HAL_UART_MspInit+0x24c>)
 8001662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001666:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001668:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_UART_MspInit+0x24c>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166e:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <HAL_UART_MspInit+0x24c>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_UART_MspInit+0x24c>)
 8001676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167c:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_UART_MspInit+0x24c>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001682:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <HAL_UART_MspInit+0x24c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <HAL_UART_MspInit+0x24c>)
 800168a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001690:	4b56      	ldr	r3, [pc, #344]	; (80017ec <HAL_UART_MspInit+0x24c>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001696:	4b55      	ldr	r3, [pc, #340]	; (80017ec <HAL_UART_MspInit+0x24c>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800169c:	4853      	ldr	r0, [pc, #332]	; (80017ec <HAL_UART_MspInit+0x24c>)
 800169e:	f001 f8f5 	bl	800288c <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80016a8:	f7ff fe30 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_UART_MspInit+0x24c>)
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
 80016b2:	4a4e      	ldr	r2, [pc, #312]	; (80017ec <HAL_UART_MspInit+0x24c>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2035      	movs	r0, #53	; 0x35
 80016be:	f001 f8ae 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80016c2:	2035      	movs	r0, #53	; 0x35
 80016c4:	f001 f8c7 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016c8:	e18e      	b.n	80019e8 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a49      	ldr	r2, [pc, #292]	; (80017f4 <HAL_UART_MspInit+0x254>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f040 8099 	bne.w	8001808 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a39      	ldr	r2, [pc, #228]	; (80017e0 <HAL_UART_MspInit+0x240>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_UART_MspInit+0x240>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_UART_MspInit+0x240>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_UART_MspInit+0x240>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_UART_MspInit+0x240>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800172a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800173c:	2307      	movs	r3, #7
 800173e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001744:	4619      	mov	r1, r3
 8001746:	482c      	ldr	r0, [pc, #176]	; (80017f8 <HAL_UART_MspInit+0x258>)
 8001748:	f001 fcac 	bl	80030a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800175c:	2307      	movs	r3, #7
 800175e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001764:	4619      	mov	r1, r3
 8001766:	4825      	ldr	r0, [pc, #148]	; (80017fc <HAL_UART_MspInit+0x25c>)
 8001768:	f001 fc9c 	bl	80030a4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_UART_MspInit+0x260>)
 800176e:	4a25      	ldr	r2, [pc, #148]	; (8001804 <HAL_UART_MspInit+0x264>)
 8001770:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_UART_MspInit+0x260>)
 8001774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001778:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_UART_MspInit+0x260>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_UART_MspInit+0x260>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_UART_MspInit+0x260>)
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_UART_MspInit+0x260>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_UART_MspInit+0x260>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_UART_MspInit+0x260>)
 800179c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_UART_MspInit+0x260>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_UART_MspInit+0x260>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ae:	4814      	ldr	r0, [pc, #80]	; (8001800 <HAL_UART_MspInit+0x260>)
 80017b0:	f001 f86c 	bl	800288c <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_UART_MspInit+0x21e>
      Error_Handler();
 80017ba:	f7ff fda7 	bl	800130c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_UART_MspInit+0x260>)
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <HAL_UART_MspInit+0x260>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2025      	movs	r0, #37	; 0x25
 80017d0:	f001 f825 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017d4:	2025      	movs	r0, #37	; 0x25
 80017d6:	f001 f83e 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 80017da:	e105      	b.n	80019e8 <HAL_UART_MspInit+0x448>
 80017dc:	40005000 	.word	0x40005000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	20002428 	.word	0x20002428
 80017f0:	40026010 	.word	0x40026010
 80017f4:	40011000 	.word	0x40011000
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	20001a10 	.word	0x20001a10
 8001804:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a78      	ldr	r2, [pc, #480]	; (80019f0 <HAL_UART_MspInit+0x450>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d162      	bne.n	80018d8 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a76      	ldr	r2, [pc, #472]	; (80019f4 <HAL_UART_MspInit+0x454>)
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	4b70      	ldr	r3, [pc, #448]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a6f      	ldr	r2, [pc, #444]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800184a:	230c      	movs	r3, #12
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800185a:	2307      	movs	r3, #7
 800185c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001862:	4619      	mov	r1, r3
 8001864:	4864      	ldr	r0, [pc, #400]	; (80019f8 <HAL_UART_MspInit+0x458>)
 8001866:	f001 fc1d 	bl	80030a4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800186a:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HAL_UART_MspInit+0x45c>)
 800186c:	4a64      	ldr	r2, [pc, #400]	; (8001a00 <HAL_UART_MspInit+0x460>)
 800186e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001870:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_UART_MspInit+0x45c>)
 8001872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001876:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001878:	4b60      	ldr	r3, [pc, #384]	; (80019fc <HAL_UART_MspInit+0x45c>)
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_UART_MspInit+0x45c>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001884:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <HAL_UART_MspInit+0x45c>)
 8001886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188c:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_UART_MspInit+0x45c>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001892:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <HAL_UART_MspInit+0x45c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001898:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_UART_MspInit+0x45c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_UART_MspInit+0x45c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_UART_MspInit+0x45c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018aa:	4854      	ldr	r0, [pc, #336]	; (80019fc <HAL_UART_MspInit+0x45c>)
 80018ac:	f000 ffee 	bl	800288c <HAL_DMA_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_UART_MspInit+0x31a>
      Error_Handler();
 80018b6:	f7ff fd29 	bl	800130c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <HAL_UART_MspInit+0x45c>)
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_UART_MspInit+0x45c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2026      	movs	r0, #38	; 0x26
 80018cc:	f000 ffa7 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018d0:	2026      	movs	r0, #38	; 0x26
 80018d2:	f000 ffc0 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 80018d6:	e087      	b.n	80019e8 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_UART_MspInit+0x464>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	f040 8082 	bne.w	80019e8 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_UART_MspInit+0x454>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_UART_MspInit+0x454>)
 80018ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_UART_MspInit+0x454>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4a3a      	ldr	r2, [pc, #232]	; (80019f4 <HAL_UART_MspInit+0x454>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6313      	str	r3, [r2, #48]	; 0x30
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a33      	ldr	r2, [pc, #204]	; (80019f4 <HAL_UART_MspInit+0x454>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_UART_MspInit+0x454>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001938:	2320      	movs	r3, #32
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001948:	2307      	movs	r3, #7
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001950:	4619      	mov	r1, r3
 8001952:	482d      	ldr	r0, [pc, #180]	; (8001a08 <HAL_UART_MspInit+0x468>)
 8001954:	f001 fba6 	bl	80030a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800196a:	2307      	movs	r3, #7
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001972:	4619      	mov	r1, r3
 8001974:	4825      	ldr	r0, [pc, #148]	; (8001a0c <HAL_UART_MspInit+0x46c>)
 8001976:	f001 fb95 	bl	80030a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_UART_MspInit+0x470>)
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_UART_MspInit+0x474>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_UART_MspInit+0x470>)
 8001982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001986:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_UART_MspInit+0x470>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_UART_MspInit+0x470>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_UART_MspInit+0x470>)
 8001996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800199a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_UART_MspInit+0x470>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_UART_MspInit+0x470>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_UART_MspInit+0x470>)
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x470>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_UART_MspInit+0x470>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80019bc:	4814      	ldr	r0, [pc, #80]	; (8001a10 <HAL_UART_MspInit+0x470>)
 80019be:	f000 ff65 	bl	800288c <HAL_DMA_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x42c>
      Error_Handler();
 80019c8:	f7ff fca0 	bl	800130c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_UART_MspInit+0x470>)
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_UART_MspInit+0x470>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2027      	movs	r0, #39	; 0x27
 80019de:	f000 ff1e 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019e2:	2027      	movs	r0, #39	; 0x27
 80019e4:	f000 ff37 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 80019e8:	bf00      	nop
 80019ea:	3748      	adds	r7, #72	; 0x48
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40004400 	.word	0x40004400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	20001a70 	.word	0x20001a70
 8001a00:	400260a0 	.word	0x400260a0
 8001a04:	40004800 	.word	0x40004800
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	20000a2c 	.word	0x20000a2c
 8001a14:	40026028 	.word	0x40026028

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f000 fdba 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <DMA1_Stream0_IRQHandler+0x10>)
 8001a7a:	f001 f89f 	bl	8002bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20002428 	.word	0x20002428

08001a88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <DMA1_Stream1_IRQHandler+0x10>)
 8001a8e:	f001 f895 	bl	8002bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000a2c 	.word	0x20000a2c

08001a9c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <DMA1_Stream6_IRQHandler+0x10>)
 8001aa2:	f001 f88b 	bl	8002bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20001a70 	.word	0x20001a70

08001ab0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <USART1_IRQHandler+0x10>)
 8001ab6:	f002 ff53 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20001ad4 	.word	0x20001ad4

08001ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <USART2_IRQHandler+0x10>)
 8001aca:	f002 ff49 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200023e8 	.word	0x200023e8

08001ad8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <USART3_IRQHandler+0x10>)
 8001ade:	f002 ff3f 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000a94 	.word	0x20000a94

08001aec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <UART5_IRQHandler+0x10>)
 8001af2:	f002 ff35 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200019cc 	.word	0x200019cc

08001b00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA2_Stream2_IRQHandler+0x10>)
 8001b06:	f001 f859 	bl	8002bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20001a10 	.word	0x20001a10

08001b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <SystemInit+0x28>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <SystemInit+0x28>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SystemInit+0x28>)
 8001b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8001b48:	f000 fd60 	bl	800260c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SPI_Timer_On+0x20>)
 8001b50:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <SPI_Timer_On+0x24>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200026d4 	.word	0x200026d4
 8001b64:	200026d8 	.word	0x200026d8

08001b68 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001b6c:	f000 fd4e 	bl	800260c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <SPI_Timer_Status+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1ad2      	subs	r2, r2, r3
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SPI_Timer_Status+0x28>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	bf34      	ite	cc
 8001b80:	2301      	movcc	r3, #1
 8001b82:	2300      	movcs	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200026d4 	.word	0x200026d4
 8001b90:	200026d8 	.word	0x200026d8

08001b94 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8001b9e:	f107 020f 	add.w	r2, r7, #15
 8001ba2:	1df9      	adds	r1, r7, #7
 8001ba4:	2332      	movs	r3, #50	; 0x32
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <xchg_spi+0x28>)
 8001bac:	f002 fb3a 	bl	8004224 <HAL_SPI_TransmitReceive>
    return rxDat;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000196c 	.word	0x2000196c

08001bc0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e00a      	b.n	8001be6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	18d4      	adds	r4, r2, r3
 8001bd6:	20ff      	movs	r0, #255	; 0xff
 8001bd8:	f7ff ffdc 	bl	8001b94 <xchg_spi>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3f0      	bcc.n	8001bd0 <rcvr_spi_multi+0x10>
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}

08001bf6 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e009      	b.n	8001c1a <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffc0 	bl	8001b94 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3f1      	bcc.n	8001c06 <xmit_spi_multi+0x10>
	}
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001c32:	f000 fceb 	bl	800260c <HAL_GetTick>
 8001c36:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8001c3c:	20ff      	movs	r0, #255	; 0xff
 8001c3e:	f7ff ffa9 	bl	8001b94 <xchg_spi>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2bff      	cmp	r3, #255	; 0xff
 8001c4a:	d007      	beq.n	8001c5c <wait_ready+0x32>
 8001c4c:	f000 fcde 	bl	800260c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8ef      	bhi.n	8001c3c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2bff      	cmp	r3, #255	; 0xff
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c7a:	4804      	ldr	r0, [pc, #16]	; (8001c8c <despiselect+0x1c>)
 8001c7c:	f001 fbbc 	bl	80033f8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001c80:	20ff      	movs	r0, #255	; 0xff
 8001c82:	f7ff ff87 	bl	8001b94 <xchg_spi>

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40020000 	.word	0x40020000

08001c90 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9a:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <spiselect+0x34>)
 8001c9c:	f001 fbac 	bl	80033f8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001ca0:	20ff      	movs	r0, #255	; 0xff
 8001ca2:	f7ff ff77 	bl	8001b94 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001caa:	f7ff ffbe 	bl	8001c2a <wait_ready>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <spiselect+0x28>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e002      	b.n	8001cbe <spiselect+0x2e>

	despiselect();
 8001cb8:	f7ff ffda 	bl	8001c70 <despiselect>
	return 0;	/* Timeout */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8001cd2:	20c8      	movs	r0, #200	; 0xc8
 8001cd4:	f7ff ff34 	bl	8001b40 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8001cd8:	20ff      	movs	r0, #255	; 0xff
 8001cda:	f7ff ff5b 	bl	8001b94 <xchg_spi>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2bff      	cmp	r3, #255	; 0xff
 8001ce6:	d104      	bne.n	8001cf2 <rcvr_datablock+0x2a>
 8001ce8:	f7ff ff3e 	bl	8001b68 <SPI_Timer_Status>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f2      	bne.n	8001cd8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2bfe      	cmp	r3, #254	; 0xfe
 8001cf6:	d001      	beq.n	8001cfc <rcvr_datablock+0x34>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e00a      	b.n	8001d12 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff5e 	bl	8001bc0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001d04:	20ff      	movs	r0, #255	; 0xff
 8001d06:	f7ff ff45 	bl	8001b94 <xchg_spi>
 8001d0a:	20ff      	movs	r0, #255	; 0xff
 8001d0c:	f7ff ff42 	bl	8001b94 <xchg_spi>

	return 1;						/* Function succeeded */
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8001d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2a:	f7ff ff7e 	bl	8001c2a <wait_ready>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <xmit_datablock+0x1e>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e01e      	b.n	8001d76 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff2a 	bl	8001b94 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	2bfd      	cmp	r3, #253	; 0xfd
 8001d44:	d016      	beq.n	8001d74 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8001d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff53 	bl	8001bf6 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001d50:	20ff      	movs	r0, #255	; 0xff
 8001d52:	f7ff ff1f 	bl	8001b94 <xchg_spi>
 8001d56:	20ff      	movs	r0, #255	; 0xff
 8001d58:	f7ff ff1c 	bl	8001b94 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8001d5c:	20ff      	movs	r0, #255	; 0xff
 8001d5e:	f7ff ff19 	bl	8001b94 <xchg_spi>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d001      	beq.n	8001d74 <xmit_datablock+0x5a>
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <xmit_datablock+0x5c>
	}
	return 1;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	6039      	str	r1, [r7, #0]
 8001d88:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da0e      	bge.n	8001db0 <send_cmd+0x32>
		cmd &= 0x7F;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d98:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2037      	movs	r0, #55	; 0x37
 8001d9e:	f7ff ffee 	bl	8001d7e <send_cmd>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8001da6:	7bbb      	ldrb	r3, [r7, #14]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d901      	bls.n	8001db0 <send_cmd+0x32>
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	e051      	b.n	8001e54 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d008      	beq.n	8001dc8 <send_cmd+0x4a>
		despiselect();
 8001db6:	f7ff ff5b 	bl	8001c70 <despiselect>
		if (!spiselect()) return 0xFF;
 8001dba:	f7ff ff69 	bl	8001c90 <spiselect>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <send_cmd+0x4a>
 8001dc4:	23ff      	movs	r3, #255	; 0xff
 8001dc6:	e045      	b.n	8001e54 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fedf 	bl	8001b94 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	0e1b      	lsrs	r3, r3, #24
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fed9 	bl	8001b94 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fed3 	bl	8001b94 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fecd 	bl	8001b94 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fec8 	bl	8001b94 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <send_cmd+0x94>
 8001e0e:	2395      	movs	r3, #149	; 0x95
 8001e10:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d101      	bne.n	8001e1c <send_cmd+0x9e>
 8001e18:	2387      	movs	r3, #135	; 0x87
 8001e1a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff feb8 	bl	8001b94 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d102      	bne.n	8001e30 <send_cmd+0xb2>
 8001e2a:	20ff      	movs	r0, #255	; 0xff
 8001e2c:	f7ff feb2 	bl	8001b94 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8001e30:	230a      	movs	r3, #10
 8001e32:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8001e34:	20ff      	movs	r0, #255	; 0xff
 8001e36:	f7ff fead 	bl	8001b94 <xchg_spi>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8001e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da05      	bge.n	8001e52 <send_cmd+0xd4>
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <send_cmd+0xb6>

	return res;							/* Return received response */
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <USER_SPI_initialize+0x14>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0cb      	b.n	8002008 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8001e70:	4b67      	ldr	r3, [pc, #412]	; (8002010 <USER_SPI_initialize+0x1b4>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <USER_SPI_initialize+0x2a>
 8001e7e:	4b64      	ldr	r3, [pc, #400]	; (8002010 <USER_SPI_initialize+0x1b4>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	e0c0      	b.n	8002008 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8001e86:	4b63      	ldr	r3, [pc, #396]	; (8002014 <USER_SPI_initialize+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8e:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8001e90:	230a      	movs	r3, #10
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e005      	b.n	8001ea2 <USER_SPI_initialize+0x46>
 8001e96:	20ff      	movs	r0, #255	; 0xff
 8001e98:	f7ff fe7c 	bl	8001b94 <xchg_spi>
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f6      	bne.n	8001e96 <USER_SPI_initialize+0x3a>

	ty = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8001eac:	2100      	movs	r1, #0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff ff65 	bl	8001d7e <send_cmd>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 808b 	bne.w	8001fd2 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8001ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec0:	f7ff fe3e 	bl	8001b40 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8001ec4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001ec8:	2008      	movs	r0, #8
 8001eca:	f7ff ff58 	bl	8001d7e <send_cmd>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d151      	bne.n	8001f78 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e00d      	b.n	8001ef6 <USER_SPI_initialize+0x9a>
 8001eda:	7bfc      	ldrb	r4, [r7, #15]
 8001edc:	20ff      	movs	r0, #255	; 0xff
 8001ede:	f7ff fe59 	bl	8001b94 <xchg_spi>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	4423      	add	r3, r4
 8001eec:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d9ee      	bls.n	8001eda <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8001efc:	7abb      	ldrb	r3, [r7, #10]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d167      	bne.n	8001fd2 <USER_SPI_initialize+0x176>
 8001f02:	7afb      	ldrb	r3, [r7, #11]
 8001f04:	2baa      	cmp	r3, #170	; 0xaa
 8001f06:	d164      	bne.n	8001fd2 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8001f08:	bf00      	nop
 8001f0a:	f7ff fe2d 	bl	8001b68 <SPI_Timer_Status>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <USER_SPI_initialize+0xc8>
 8001f14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f18:	20a9      	movs	r0, #169	; 0xa9
 8001f1a:	f7ff ff30 	bl	8001d7e <send_cmd>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f2      	bne.n	8001f0a <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8001f24:	f7ff fe20 	bl	8001b68 <SPI_Timer_Status>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d051      	beq.n	8001fd2 <USER_SPI_initialize+0x176>
 8001f2e:	2100      	movs	r1, #0
 8001f30:	203a      	movs	r0, #58	; 0x3a
 8001f32:	f7ff ff24 	bl	8001d7e <send_cmd>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d14a      	bne.n	8001fd2 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e00d      	b.n	8001f5e <USER_SPI_initialize+0x102>
 8001f42:	7bfc      	ldrb	r4, [r7, #15]
 8001f44:	20ff      	movs	r0, #255	; 0xff
 8001f46:	f7ff fe25 	bl	8001b94 <xchg_spi>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4423      	add	r3, r4
 8001f54:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d9ee      	bls.n	8001f42 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8001f64:	7a3b      	ldrb	r3, [r7, #8]
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <USER_SPI_initialize+0x116>
 8001f6e:	230c      	movs	r3, #12
 8001f70:	e000      	b.n	8001f74 <USER_SPI_initialize+0x118>
 8001f72:	2304      	movs	r3, #4
 8001f74:	737b      	strb	r3, [r7, #13]
 8001f76:	e02c      	b.n	8001fd2 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001f78:	2100      	movs	r1, #0
 8001f7a:	20a9      	movs	r0, #169	; 0xa9
 8001f7c:	f7ff feff 	bl	8001d7e <send_cmd>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d804      	bhi.n	8001f90 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001f86:	2302      	movs	r3, #2
 8001f88:	737b      	strb	r3, [r7, #13]
 8001f8a:	23a9      	movs	r3, #169	; 0xa9
 8001f8c:	73bb      	strb	r3, [r7, #14]
 8001f8e:	e003      	b.n	8001f98 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8001f90:	2301      	movs	r3, #1
 8001f92:	737b      	strb	r3, [r7, #13]
 8001f94:	2301      	movs	r3, #1
 8001f96:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8001f98:	bf00      	nop
 8001f9a:	f7ff fde5 	bl	8001b68 <SPI_Timer_Status>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <USER_SPI_initialize+0x158>
 8001fa4:	7bbb      	ldrb	r3, [r7, #14]
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fee8 	bl	8001d7e <send_cmd>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f2      	bne.n	8001f9a <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8001fb4:	f7ff fdd8 	bl	8001b68 <SPI_Timer_Status>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <USER_SPI_initialize+0x172>
 8001fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc2:	2010      	movs	r0, #16
 8001fc4:	f7ff fedb 	bl	8001d7e <send_cmd>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <USER_SPI_initialize+0x176>
				ty = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <USER_SPI_initialize+0x1bc>)
 8001fd4:	7b7b      	ldrb	r3, [r7, #13]
 8001fd6:	7013      	strb	r3, [r2, #0]
	despiselect();
 8001fd8:	f7ff fe4a 	bl	8001c70 <despiselect>

	if (ty) {			/* OK */
 8001fdc:	7b7b      	ldrb	r3, [r7, #13]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <USER_SPI_initialize+0x1b8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <USER_SPI_initialize+0x1b4>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <USER_SPI_initialize+0x1b4>)
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e002      	b.n	8002002 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <USER_SPI_initialize+0x1b4>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <USER_SPI_initialize+0x1b4>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b2db      	uxtb	r3, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	20000004 	.word	0x20000004
 8002014:	2000196c 	.word	0x2000196c
 8002018:	200007ce 	.word	0x200007ce

0800201c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <USER_SPI_status+0x14>
 800202c:	2301      	movs	r3, #1
 800202e:	e002      	b.n	8002036 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <USER_SPI_status+0x28>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000004 	.word	0x20000004

08002048 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <USER_SPI_read+0x1c>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <USER_SPI_read+0x20>
 8002064:	2304      	movs	r3, #4
 8002066:	e04d      	b.n	8002104 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <USER_SPI_read+0xc4>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <USER_SPI_read+0x32>
 8002076:	2303      	movs	r3, #3
 8002078:	e044      	b.n	8002104 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <USER_SPI_read+0xc8>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <USER_SPI_read+0x44>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	025b      	lsls	r3, r3, #9
 800208a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d111      	bne.n	80020b6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	2011      	movs	r0, #17
 8002096:	f7ff fe72 	bl	8001d7e <send_cmd>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d129      	bne.n	80020f4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80020a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a4:	68b8      	ldr	r0, [r7, #8]
 80020a6:	f7ff fe0f 	bl	8001cc8 <rcvr_datablock>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d021      	beq.n	80020f4 <USER_SPI_read+0xac>
			count = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	e01e      	b.n	80020f4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	2012      	movs	r0, #18
 80020ba:	f7ff fe60 	bl	8001d7e <send_cmd>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d117      	bne.n	80020f4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80020c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c8:	68b8      	ldr	r0, [r7, #8]
 80020ca:	f7ff fdfd 	bl	8001cc8 <rcvr_datablock>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <USER_SPI_read+0xa2>
				buff += 512;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020da:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	3b01      	subs	r3, #1
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ed      	bne.n	80020c4 <USER_SPI_read+0x7c>
 80020e8:	e000      	b.n	80020ec <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80020ea:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80020ec:	2100      	movs	r1, #0
 80020ee:	200c      	movs	r0, #12
 80020f0:	f7ff fe45 	bl	8001d7e <send_cmd>
		}
	}
	despiselect();
 80020f4:	f7ff fdbc 	bl	8001c70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000004 	.word	0x20000004
 8002110:	200007ce 	.word	0x200007ce

08002114 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <USER_SPI_write+0x1c>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <USER_SPI_write+0x20>
 8002130:	2304      	movs	r3, #4
 8002132:	e063      	b.n	80021fc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <USER_SPI_write+0xf0>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <USER_SPI_write+0x32>
 8002142:	2303      	movs	r3, #3
 8002144:	e05a      	b.n	80021fc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <USER_SPI_write+0xf0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <USER_SPI_write+0x44>
 8002154:	2302      	movs	r3, #2
 8002156:	e051      	b.n	80021fc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <USER_SPI_write+0xf4>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <USER_SPI_write+0x56>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d110      	bne.n	8002192 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	2018      	movs	r0, #24
 8002174:	f7ff fe03 	bl	8001d7e <send_cmd>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d136      	bne.n	80021ec <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800217e:	21fe      	movs	r1, #254	; 0xfe
 8002180:	68b8      	ldr	r0, [r7, #8]
 8002182:	f7ff fdca 	bl	8001d1a <xmit_datablock>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d02f      	beq.n	80021ec <USER_SPI_write+0xd8>
			count = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	e02c      	b.n	80021ec <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <USER_SPI_write+0xf4>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f003 0306 	and.w	r3, r3, #6
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <USER_SPI_write+0x92>
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	2097      	movs	r0, #151	; 0x97
 80021a2:	f7ff fdec 	bl	8001d7e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	2019      	movs	r0, #25
 80021aa:	f7ff fde8 	bl	8001d7e <send_cmd>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d11b      	bne.n	80021ec <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80021b4:	21fc      	movs	r1, #252	; 0xfc
 80021b6:	68b8      	ldr	r0, [r7, #8]
 80021b8:	f7ff fdaf 	bl	8001d1a <xmit_datablock>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <USER_SPI_write+0xc4>
				buff += 512;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021c8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ee      	bne.n	80021b4 <USER_SPI_write+0xa0>
 80021d6:	e000      	b.n	80021da <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80021d8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80021da:	21fd      	movs	r1, #253	; 0xfd
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fd9c 	bl	8001d1a <xmit_datablock>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <USER_SPI_write+0xd8>
 80021e8:	2301      	movs	r3, #1
 80021ea:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80021ec:	f7ff fd40 	bl	8001c70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000004 	.word	0x20000004
 8002208:	200007ce 	.word	0x200007ce

0800220c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	603a      	str	r2, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	460b      	mov	r3, r1
 800221a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <USER_SPI_ioctl+0x1a>
 8002222:	2304      	movs	r3, #4
 8002224:	e15a      	b.n	80024dc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002226:	4baf      	ldr	r3, [pc, #700]	; (80024e4 <USER_SPI_ioctl+0x2d8>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <USER_SPI_ioctl+0x2c>
 8002234:	2303      	movs	r3, #3
 8002236:	e151      	b.n	80024dc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	2b04      	cmp	r3, #4
 8002242:	f200 8136 	bhi.w	80024b2 <USER_SPI_ioctl+0x2a6>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <USER_SPI_ioctl+0x40>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	08002261 	.word	0x08002261
 8002250:	08002275 	.word	0x08002275
 8002254:	080024b3 	.word	0x080024b3
 8002258:	08002321 	.word	0x08002321
 800225c:	08002417 	.word	0x08002417
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002260:	f7ff fd16 	bl	8001c90 <spiselect>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8127 	beq.w	80024ba <USER_SPI_ioctl+0x2ae>
 800226c:	2300      	movs	r3, #0
 800226e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002272:	e122      	b.n	80024ba <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002274:	2100      	movs	r1, #0
 8002276:	2009      	movs	r0, #9
 8002278:	f7ff fd81 	bl	8001d7e <send_cmd>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 811d 	bne.w	80024be <USER_SPI_ioctl+0x2b2>
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2110      	movs	r1, #16
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fd1c 	bl	8001cc8 <rcvr_datablock>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8113 	beq.w	80024be <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002298:	7b3b      	ldrb	r3, [r7, #12]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d111      	bne.n	80022c6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80022a2:	7d7b      	ldrb	r3, [r7, #21]
 80022a4:	461a      	mov	r2, r3
 80022a6:	7d3b      	ldrb	r3, [r7, #20]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	4413      	add	r3, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80022b6:	4413      	add	r3, r2
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	029a      	lsls	r2, r3, #10
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e028      	b.n	8002318 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80022c6:	7c7b      	ldrb	r3, [r7, #17]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	7dbb      	ldrb	r3, [r7, #22]
 80022d0:	09db      	lsrs	r3, r3, #7
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	7d7b      	ldrb	r3, [r7, #21]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 0306 	and.w	r3, r3, #6
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3302      	adds	r3, #2
 80022ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80022ee:	7d3b      	ldrb	r3, [r7, #20]
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	441a      	add	r2, r3
 80022fc:	7cbb      	ldrb	r3, [r7, #18]
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002304:	4413      	add	r3, r2
 8002306:	3301      	adds	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800230a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800230e:	3b09      	subs	r3, #9
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	409a      	lsls	r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800231e:	e0ce      	b.n	80024be <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002320:	4b71      	ldr	r3, [pc, #452]	; (80024e8 <USER_SPI_ioctl+0x2dc>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d031      	beq.n	8002390 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800232c:	2100      	movs	r1, #0
 800232e:	208d      	movs	r0, #141	; 0x8d
 8002330:	f7ff fd25 	bl	8001d7e <send_cmd>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 80c3 	bne.w	80024c2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800233c:	20ff      	movs	r0, #255	; 0xff
 800233e:	f7ff fc29 	bl	8001b94 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	2110      	movs	r1, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fcbd 	bl	8001cc8 <rcvr_datablock>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80b6 	beq.w	80024c2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002356:	2330      	movs	r3, #48	; 0x30
 8002358:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800235c:	e007      	b.n	800236e <USER_SPI_ioctl+0x162>
 800235e:	20ff      	movs	r0, #255	; 0xff
 8002360:	f7ff fc18 	bl	8001b94 <xchg_spi>
 8002364:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002368:	3b01      	subs	r3, #1
 800236a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800236e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f3      	bne.n	800235e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002376:	7dbb      	ldrb	r3, [r7, #22]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	2310      	movs	r3, #16
 8002380:	fa03 f202 	lsl.w	r2, r3, r2
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800238e:	e098      	b.n	80024c2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002390:	2100      	movs	r1, #0
 8002392:	2009      	movs	r0, #9
 8002394:	f7ff fcf3 	bl	8001d7e <send_cmd>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 8091 	bne.w	80024c2 <USER_SPI_ioctl+0x2b6>
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2110      	movs	r1, #16
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fc8e 	bl	8001cc8 <rcvr_datablock>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8087 	beq.w	80024c2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80023b4:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <USER_SPI_ioctl+0x2dc>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80023c0:	7dbb      	ldrb	r3, [r7, #22]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80023c8:	7dfa      	ldrb	r2, [r7, #23]
 80023ca:	09d2      	lsrs	r2, r2, #7
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4413      	add	r3, r2
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	7e7b      	ldrb	r3, [r7, #25]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e013      	b.n	800240e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80023e6:	7dbb      	ldrb	r3, [r7, #22]
 80023e8:	109b      	asrs	r3, r3, #2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	3301      	adds	r3, #1
 80023f2:	7dfa      	ldrb	r2, [r7, #23]
 80023f4:	00d2      	lsls	r2, r2, #3
 80023f6:	f002 0218 	and.w	r2, r2, #24
 80023fa:	7df9      	ldrb	r1, [r7, #23]
 80023fc:	0949      	lsrs	r1, r1, #5
 80023fe:	b2c9      	uxtb	r1, r1
 8002400:	440a      	add	r2, r1
 8002402:	3201      	adds	r2, #1
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	461a      	mov	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002414:	e055      	b.n	80024c2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <USER_SPI_ioctl+0x2dc>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f003 0306 	and.w	r3, r3, #6
 800241e:	2b00      	cmp	r3, #0
 8002420:	d051      	beq.n	80024c6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002422:	f107 020c 	add.w	r2, r7, #12
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	210b      	movs	r1, #11
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff feee 	bl	800220c <USER_SPI_ioctl>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d149      	bne.n	80024ca <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002436:	7b3b      	ldrb	r3, [r7, #12]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <USER_SPI_ioctl+0x23e>
 8002440:	7dbb      	ldrb	r3, [r7, #22]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d041      	beq.n	80024ce <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <USER_SPI_ioctl+0x2dc>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	025b      	lsls	r3, r3, #9
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002474:	2020      	movs	r0, #32
 8002476:	f7ff fc82 	bl	8001d7e <send_cmd>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d128      	bne.n	80024d2 <USER_SPI_ioctl+0x2c6>
 8002480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002482:	2021      	movs	r0, #33	; 0x21
 8002484:	f7ff fc7b 	bl	8001d7e <send_cmd>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d121      	bne.n	80024d2 <USER_SPI_ioctl+0x2c6>
 800248e:	2100      	movs	r1, #0
 8002490:	2026      	movs	r0, #38	; 0x26
 8002492:	f7ff fc74 	bl	8001d7e <send_cmd>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11a      	bne.n	80024d2 <USER_SPI_ioctl+0x2c6>
 800249c:	f247 5030 	movw	r0, #30000	; 0x7530
 80024a0:	f7ff fbc3 	bl	8001c2a <wait_ready>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d013      	beq.n	80024d2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80024b0:	e00f      	b.n	80024d2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80024b2:	2304      	movs	r3, #4
 80024b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024b8:	e00c      	b.n	80024d4 <USER_SPI_ioctl+0x2c8>
		break;
 80024ba:	bf00      	nop
 80024bc:	e00a      	b.n	80024d4 <USER_SPI_ioctl+0x2c8>
		break;
 80024be:	bf00      	nop
 80024c0:	e008      	b.n	80024d4 <USER_SPI_ioctl+0x2c8>
		break;
 80024c2:	bf00      	nop
 80024c4:	e006      	b.n	80024d4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80024c6:	bf00      	nop
 80024c8:	e004      	b.n	80024d4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80024ca:	bf00      	nop
 80024cc:	e002      	b.n	80024d4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <USER_SPI_ioctl+0x2c8>
		break;
 80024d2:	bf00      	nop
	}

	despiselect();
 80024d4:	f7ff fbcc 	bl	8001c70 <despiselect>

	return res;
 80024d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3730      	adds	r7, #48	; 0x30
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000004 	.word	0x20000004
 80024e8:	200007ce 	.word	0x200007ce

080024ec <Reset_Handler>:
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002524 <LoopFillZerobss+0x14>
 80024f0:	2100      	movs	r1, #0
 80024f2:	e003      	b.n	80024fc <LoopCopyDataInit>

080024f4 <CopyDataInit>:
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <LoopFillZerobss+0x18>)
 80024f6:	585b      	ldr	r3, [r3, r1]
 80024f8:	5043      	str	r3, [r0, r1]
 80024fa:	3104      	adds	r1, #4

080024fc <LoopCopyDataInit>:
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <LoopFillZerobss+0x1c>)
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <LoopFillZerobss+0x20>)
 8002500:	1842      	adds	r2, r0, r1
 8002502:	429a      	cmp	r2, r3
 8002504:	d3f6      	bcc.n	80024f4 <CopyDataInit>
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <LoopFillZerobss+0x24>)
 8002508:	e002      	b.n	8002510 <LoopFillZerobss>

0800250a <FillZerobss>:
 800250a:	2300      	movs	r3, #0
 800250c:	f842 3b04 	str.w	r3, [r2], #4

08002510 <LoopFillZerobss>:
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <LoopFillZerobss+0x28>)
 8002512:	429a      	cmp	r2, r3
 8002514:	d3f9      	bcc.n	800250a <FillZerobss>
 8002516:	f7ff fafd 	bl	8001b14 <SystemInit>
 800251a:	f005 fa99 	bl	8007a50 <__libc_init_array>
 800251e:	f7fe fa1d 	bl	800095c <main>
 8002522:	4770      	bx	lr
 8002524:	20020000 	.word	0x20020000
 8002528:	08007bfc 	.word	0x08007bfc
 800252c:	20000000 	.word	0x20000000
 8002530:	20000024 	.word	0x20000024
 8002534:	20000024 	.word	0x20000024
 8002538:	20002b48 	.word	0x20002b48

0800253c <ADC_IRQHandler>:
 800253c:	e7fe      	b.n	800253c <ADC_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <HAL_Init+0x40>)
 800254a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_Init+0x40>)
 8002556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_Init+0x40>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 f94d 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	2000      	movs	r0, #0
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7fe ff3c 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f965 	bl	8002872 <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c0:	f000 f92d 	bl	800281e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000000 	.word	0x20000000
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20000008 	.word	0x20000008

080025e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x20>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x24>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_IncTick+0x24>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	2000000c 	.word	0x2000000c
 8002608:	200026dc 	.word	0x200026dc

0800260c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_GetTick+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	200026dc 	.word	0x200026dc

08002624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff ffee 	bl	800260c <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263c:	d005      	beq.n	800264a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_Delay+0x40>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264a:	bf00      	nop
 800264c:	f7ff ffde 	bl	800260c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8f7      	bhi.n	800264c <HAL_Delay+0x28>
  {
  }
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000000c 	.word	0x2000000c

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027e8:	f7ff ff8e 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff29 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff3e 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff8e 	bl	800275c <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5d 	bl	8002708 <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff31 	bl	80026cc <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff feb8 	bl	800260c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e099      	b.n	80029dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c8:	e00f      	b.n	80028ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ca:	f7ff fe9f 	bl	800260c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d908      	bls.n	80028ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2203      	movs	r2, #3
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e078      	b.n	80029dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e8      	bne.n	80028ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <HAL_DMA_Init+0x158>)
 8002904:	4013      	ands	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4313      	orrs	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f023 0307 	bic.w	r3, r3, #7
 800296a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b04      	cmp	r3, #4
 800297c:	d117      	bne.n	80029ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00e      	beq.n	80029ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fb0d 	bl	8002fb0 <DMA_CheckFifoParam>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2240      	movs	r2, #64	; 0x40
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029aa:	2301      	movs	r3, #1
 80029ac:	e016      	b.n	80029dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fac4 	bl	8002f44 <DMA_CalcBaseAndBitshift>
 80029bc:	4603      	mov	r3, r0
 80029be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	223f      	movs	r2, #63	; 0x3f
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	f010803f 	.word	0xf010803f

080029e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_Start_IT+0x26>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e040      	b.n	8002a90 <HAL_DMA_Start_IT+0xa8>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d12f      	bne.n	8002a82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fa56 	bl	8002ee8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	223f      	movs	r2, #63	; 0x3f
 8002a42:	409a      	lsls	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0216 	orr.w	r2, r2, #22
 8002a56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e005      	b.n	8002a8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa6:	f7ff fdb1 	bl	800260c <HAL_GetTick>
 8002aaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d008      	beq.n	8002aca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e052      	b.n	8002b70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0216 	bic.w	r2, r2, #22
 8002ad8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <HAL_DMA_Abort+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0208 	bic.w	r2, r2, #8
 8002b08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	e013      	b.n	8002b44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1c:	f7ff fd76 	bl	800260c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d90c      	bls.n	8002b44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e015      	b.n	8002b70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e4      	bne.n	8002b1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	223f      	movs	r2, #63	; 0x3f
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00c      	b.n	8002bb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2205      	movs	r2, #5
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0201 	bic.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bc8:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_DMA_IRQHandler+0x258>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a92      	ldr	r2, [pc, #584]	; (8002e18 <HAL_DMA_IRQHandler+0x25c>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	2208      	movs	r2, #8
 8002be8:	409a      	lsls	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01a      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0204 	bic.w	r2, r2, #4
 8002c0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	2208      	movs	r2, #8
 8002c16:	409a      	lsls	r2, r3
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f043 0202 	orr.w	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2204      	movs	r2, #4
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d012      	beq.n	8002c94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00b      	beq.n	8002c94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	2204      	movs	r2, #4
 8002c82:	409a      	lsls	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8c:	f043 0204 	orr.w	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	2210      	movs	r2, #16
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d043      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d03c      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d018      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d024      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
 8002cea:	e01f      	b.n	8002d2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01b      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
 8002cfc:	e016      	b.n	8002d2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0208 	bic.w	r2, r2, #8
 8002d1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	2220      	movs	r2, #32
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 808e 	beq.w	8002e5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8086 	beq.w	8002e5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2220      	movs	r2, #32
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d136      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0216 	bic.w	r2, r2, #22
 8002d74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_DMA_IRQHandler+0x1da>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0208 	bic.w	r2, r2, #8
 8002da4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	223f      	movs	r2, #63	; 0x3f
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d07d      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
        }
        return;
 8002dd2:	e078      	b.n	8002ec6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01c      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d108      	bne.n	8002e02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d030      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
 8002e00:	e02b      	b.n	8002e5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d027      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
 8002e12:	e022      	b.n	8002e5a <HAL_DMA_IRQHandler+0x29e>
 8002e14:	20000000 	.word	0x20000000
 8002e18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d032      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d022      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2205      	movs	r2, #5
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d307      	bcc.n	8002ea2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f2      	bne.n	8002e86 <HAL_DMA_IRQHandler+0x2ca>
 8002ea0:	e000      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ea2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ec6:	bf00      	nop
    }
  }
}
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop

08002ed0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d108      	bne.n	8002f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f26:	e007      	b.n	8002f38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3b10      	subs	r3, #16
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <DMA_CalcBaseAndBitshift+0x68>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d909      	bls.n	8002f86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	1d1a      	adds	r2, r3, #4
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	659a      	str	r2, [r3, #88]	; 0x58
 8002f84:	e007      	b.n	8002f96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	aaaaaaab 	.word	0xaaaaaaab
 8002fac:	08007b64 	.word	0x08007b64

08002fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11f      	bne.n	800300a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d855      	bhi.n	800307c <DMA_CheckFifoParam+0xcc>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <DMA_CheckFifoParam+0x28>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002fe9 	.word	0x08002fe9
 8002fdc:	08002ffb 	.word	0x08002ffb
 8002fe0:	08002fe9 	.word	0x08002fe9
 8002fe4:	0800307d 	.word	0x0800307d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d045      	beq.n	8003080 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff8:	e042      	b.n	8003080 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003002:	d13f      	bne.n	8003084 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e03c      	b.n	8003084 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	d121      	bne.n	8003058 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d836      	bhi.n	8003088 <DMA_CheckFifoParam+0xd8>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <DMA_CheckFifoParam+0x70>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003031 	.word	0x08003031
 8003024:	08003037 	.word	0x08003037
 8003028:	08003031 	.word	0x08003031
 800302c:	08003049 	.word	0x08003049
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e02f      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d024      	beq.n	800308c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e021      	b.n	800308c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003050:	d11e      	bne.n	8003090 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003056:	e01b      	b.n	8003090 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d902      	bls.n	8003064 <DMA_CheckFifoParam+0xb4>
 800305e:	2b03      	cmp	r3, #3
 8003060:	d003      	beq.n	800306a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003062:	e018      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e015      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      break;
 800307a:	e00b      	b.n	8003094 <DMA_CheckFifoParam+0xe4>
      break;
 800307c:	bf00      	nop
 800307e:	e00a      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003080:	bf00      	nop
 8003082:	e008      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003084:	bf00      	nop
 8003086:	e006      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003088:	bf00      	nop
 800308a:	e004      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 800308c:	bf00      	nop
 800308e:	e002      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;   
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003094:	bf00      	nop
    }
  } 
  
  return status; 
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e165      	b.n	800338c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f040 8154 	bne.w	8003386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d00b      	beq.n	80030fe <HAL_GPIO_Init+0x5a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030f2:	2b11      	cmp	r3, #17
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b12      	cmp	r3, #18
 80030fc:	d130      	bne.n	8003160 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 0201 	and.w	r2, r3, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0xfc>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b12      	cmp	r3, #18
 800319e:	d123      	bne.n	80031e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	69b9      	ldr	r1, [r7, #24]
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80ae 	beq.w	8003386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_GPIO_Init+0x2fc>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4a5b      	ldr	r2, [pc, #364]	; (80033a0 <HAL_GPIO_Init+0x2fc>)
 8003234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003238:	6453      	str	r3, [r2, #68]	; 0x44
 800323a:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_GPIO_Init+0x2fc>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003246:	4a57      	ldr	r2, [pc, #348]	; (80033a4 <HAL_GPIO_Init+0x300>)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4e      	ldr	r2, [pc, #312]	; (80033a8 <HAL_GPIO_Init+0x304>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d025      	beq.n	80032be <HAL_GPIO_Init+0x21a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4d      	ldr	r2, [pc, #308]	; (80033ac <HAL_GPIO_Init+0x308>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <HAL_GPIO_Init+0x216>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4c      	ldr	r2, [pc, #304]	; (80033b0 <HAL_GPIO_Init+0x30c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d019      	beq.n	80032b6 <HAL_GPIO_Init+0x212>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_GPIO_Init+0x310>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4a      	ldr	r2, [pc, #296]	; (80033b8 <HAL_GPIO_Init+0x314>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00d      	beq.n	80032ae <HAL_GPIO_Init+0x20a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a49      	ldr	r2, [pc, #292]	; (80033bc <HAL_GPIO_Init+0x318>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x206>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a48      	ldr	r2, [pc, #288]	; (80033c0 <HAL_GPIO_Init+0x31c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_GPIO_Init+0x202>
 80032a2:	2306      	movs	r3, #6
 80032a4:	e00c      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e00a      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032aa:	2305      	movs	r3, #5
 80032ac:	e008      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e004      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032be:	2300      	movs	r3, #0
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f002 0203 	and.w	r2, r2, #3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4093      	lsls	r3, r2
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d0:	4934      	ldr	r1, [pc, #208]	; (80033a4 <HAL_GPIO_Init+0x300>)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_GPIO_Init+0x320>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003302:	4a30      	ldr	r2, [pc, #192]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_GPIO_Init+0x320>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <HAL_GPIO_Init+0x320>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_GPIO_Init+0x320>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003380:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	f67f ae96 	bls.w	80030c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003394:	bf00      	nop
 8003396:	3724      	adds	r7, #36	; 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40021400 	.word	0x40021400
 80033c0:	40021800 	.word	0x40021800
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e001      	b.n	80033ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003414:	e003      	b.n	800341e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	041a      	lsls	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	619a      	str	r2, [r3, #24]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_PWREx_EnableOverDrive+0x90>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_PWREx_EnableOverDrive+0x90>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_PWREx_EnableOverDrive+0x90>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003458:	f7ff f8d8 	bl	800260c <HAL_GetTick>
 800345c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800345e:	e009      	b.n	8003474 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003460:	f7ff f8d4 	bl	800260c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800346e:	d901      	bls.n	8003474 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e01f      	b.n	80034b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d1ee      	bne.n	8003460 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003488:	f7ff f8c0 	bl	800260c <HAL_GetTick>
 800348c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800348e:	e009      	b.n	80034a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003490:	f7ff f8bc 	bl	800260c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800349e:	d901      	bls.n	80034a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e007      	b.n	80034b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034b0:	d1ee      	bne.n	8003490 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	420e0040 	.word	0x420e0040
 80034c4:	40007000 	.word	0x40007000
 80034c8:	420e0044 	.word	0x420e0044

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0cc      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d90c      	bls.n	8003508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b65      	ldr	r3, [pc, #404]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b8      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b59      	ldr	r3, [pc, #356]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	494d      	ldr	r1, [pc, #308]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d044      	beq.n	80035ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d119      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e07f      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d003      	beq.n	800358a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	2b03      	cmp	r3, #3
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06f      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e067      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4934      	ldr	r1, [pc, #208]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035bc:	f7ff f826 	bl	800260c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	e00a      	b.n	80035da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7ff f822 	bl	800260c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e04f      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 020c 	and.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1eb      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ec:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d20c      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e032      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4916      	ldr	r1, [pc, #88]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	490e      	ldr	r1, [pc, #56]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003652:	f000 f855 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 8003656:	4601      	mov	r1, r0
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	fa21 f303 	lsr.w	r3, r1, r3
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe ff86 	bl	8002584 <HAL_InitTick>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023c00 	.word	0x40023c00
 8003688:	40023800 	.word	0x40023800
 800368c:	08007b4c 	.word	0x08007b4c
 8003690:	20000000 	.word	0x20000000
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_GetHCLKFreq+0x14>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000000 	.word	0x20000000

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b4:	f7ff fff0 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b8:	4601      	mov	r1, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0a9b      	lsrs	r3, r3, #10
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08007b5c 	.word	0x08007b5c

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036dc:	f7ff ffdc 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036e0:	4601      	mov	r1, r0
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0b5b      	lsrs	r3, r3, #13
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4a03      	ldr	r2, [pc, #12]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ee:	5cd3      	ldrb	r3, [r2, r3]
 80036f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	08007b5c 	.word	0x08007b5c

08003700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371a:	4bc6      	ldr	r3, [pc, #792]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b0c      	cmp	r3, #12
 8003724:	f200 817e 	bhi.w	8003a24 <HAL_RCC_GetSysClockFreq+0x324>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <HAL_RCC_GetSysClockFreq+0x30>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003765 	.word	0x08003765
 8003734:	08003a25 	.word	0x08003a25
 8003738:	08003a25 	.word	0x08003a25
 800373c:	08003a25 	.word	0x08003a25
 8003740:	0800376b 	.word	0x0800376b
 8003744:	08003a25 	.word	0x08003a25
 8003748:	08003a25 	.word	0x08003a25
 800374c:	08003a25 	.word	0x08003a25
 8003750:	08003771 	.word	0x08003771
 8003754:	08003a25 	.word	0x08003a25
 8003758:	08003a25 	.word	0x08003a25
 800375c:	08003a25 	.word	0x08003a25
 8003760:	080038cd 	.word	0x080038cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4bb4      	ldr	r3, [pc, #720]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x338>)
 8003766:	613b      	str	r3, [r7, #16]
       break;
 8003768:	e15f      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800376a:	4bb4      	ldr	r3, [pc, #720]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x33c>)
 800376c:	613b      	str	r3, [r7, #16]
      break;
 800376e:	e15c      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003770:	4bb0      	ldr	r3, [pc, #704]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003778:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800377a:	4bae      	ldr	r3, [pc, #696]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04a      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003786:	4bab      	ldr	r3, [pc, #684]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	099b      	lsrs	r3, r3, #6
 800378c:	f04f 0400 	mov.w	r4, #0
 8003790:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	ea03 0501 	and.w	r5, r3, r1
 800379c:	ea04 0602 	and.w	r6, r4, r2
 80037a0:	4629      	mov	r1, r5
 80037a2:	4632      	mov	r2, r6
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	0154      	lsls	r4, r2, #5
 80037ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037b2:	014b      	lsls	r3, r1, #5
 80037b4:	4619      	mov	r1, r3
 80037b6:	4622      	mov	r2, r4
 80037b8:	1b49      	subs	r1, r1, r5
 80037ba:	eb62 0206 	sbc.w	r2, r2, r6
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	f04f 0400 	mov.w	r4, #0
 80037c6:	0194      	lsls	r4, r2, #6
 80037c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037cc:	018b      	lsls	r3, r1, #6
 80037ce:	1a5b      	subs	r3, r3, r1
 80037d0:	eb64 0402 	sbc.w	r4, r4, r2
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	00e2      	lsls	r2, r4, #3
 80037de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037e2:	00d9      	lsls	r1, r3, #3
 80037e4:	460b      	mov	r3, r1
 80037e6:	4614      	mov	r4, r2
 80037e8:	195b      	adds	r3, r3, r5
 80037ea:	eb44 0406 	adc.w	r4, r4, r6
 80037ee:	f04f 0100 	mov.w	r1, #0
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	0262      	lsls	r2, r4, #9
 80037f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037fc:	0259      	lsls	r1, r3, #9
 80037fe:	460b      	mov	r3, r1
 8003800:	4614      	mov	r4, r2
 8003802:	4618      	mov	r0, r3
 8003804:	4621      	mov	r1, r4
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f04f 0400 	mov.w	r4, #0
 800380c:	461a      	mov	r2, r3
 800380e:	4623      	mov	r3, r4
 8003810:	f7fc fcf8 	bl	8000204 <__aeabi_uldivmod>
 8003814:	4603      	mov	r3, r0
 8003816:	460c      	mov	r4, r1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e049      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381c:	4b85      	ldr	r3, [pc, #532]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	f04f 0400 	mov.w	r4, #0
 8003826:	f240 11ff 	movw	r1, #511	; 0x1ff
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	ea03 0501 	and.w	r5, r3, r1
 8003832:	ea04 0602 	and.w	r6, r4, r2
 8003836:	4629      	mov	r1, r5
 8003838:	4632      	mov	r2, r6
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	0154      	lsls	r4, r2, #5
 8003844:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003848:	014b      	lsls	r3, r1, #5
 800384a:	4619      	mov	r1, r3
 800384c:	4622      	mov	r2, r4
 800384e:	1b49      	subs	r1, r1, r5
 8003850:	eb62 0206 	sbc.w	r2, r2, r6
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	f04f 0400 	mov.w	r4, #0
 800385c:	0194      	lsls	r4, r2, #6
 800385e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003862:	018b      	lsls	r3, r1, #6
 8003864:	1a5b      	subs	r3, r3, r1
 8003866:	eb64 0402 	sbc.w	r4, r4, r2
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	00e2      	lsls	r2, r4, #3
 8003874:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003878:	00d9      	lsls	r1, r3, #3
 800387a:	460b      	mov	r3, r1
 800387c:	4614      	mov	r4, r2
 800387e:	195b      	adds	r3, r3, r5
 8003880:	eb44 0406 	adc.w	r4, r4, r6
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	02a2      	lsls	r2, r4, #10
 800388e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003892:	0299      	lsls	r1, r3, #10
 8003894:	460b      	mov	r3, r1
 8003896:	4614      	mov	r4, r2
 8003898:	4618      	mov	r0, r3
 800389a:	4621      	mov	r1, r4
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f04f 0400 	mov.w	r4, #0
 80038a2:	461a      	mov	r2, r3
 80038a4:	4623      	mov	r3, r4
 80038a6:	f7fc fcad 	bl	8000204 <__aeabi_uldivmod>
 80038aa:	4603      	mov	r3, r0
 80038ac:	460c      	mov	r4, r1
 80038ae:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b0:	4b60      	ldr	r3, [pc, #384]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	3301      	adds	r3, #1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	613b      	str	r3, [r7, #16]
      break;
 80038ca:	e0ae      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038cc:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d6:	4b57      	ldr	r3, [pc, #348]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d04a      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e2:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	ea03 0501 	and.w	r5, r3, r1
 80038f8:	ea04 0602 	and.w	r6, r4, r2
 80038fc:	4629      	mov	r1, r5
 80038fe:	4632      	mov	r2, r6
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	f04f 0400 	mov.w	r4, #0
 8003908:	0154      	lsls	r4, r2, #5
 800390a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800390e:	014b      	lsls	r3, r1, #5
 8003910:	4619      	mov	r1, r3
 8003912:	4622      	mov	r2, r4
 8003914:	1b49      	subs	r1, r1, r5
 8003916:	eb62 0206 	sbc.w	r2, r2, r6
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	f04f 0400 	mov.w	r4, #0
 8003922:	0194      	lsls	r4, r2, #6
 8003924:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003928:	018b      	lsls	r3, r1, #6
 800392a:	1a5b      	subs	r3, r3, r1
 800392c:	eb64 0402 	sbc.w	r4, r4, r2
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	00e2      	lsls	r2, r4, #3
 800393a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800393e:	00d9      	lsls	r1, r3, #3
 8003940:	460b      	mov	r3, r1
 8003942:	4614      	mov	r4, r2
 8003944:	195b      	adds	r3, r3, r5
 8003946:	eb44 0406 	adc.w	r4, r4, r6
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	0262      	lsls	r2, r4, #9
 8003954:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003958:	0259      	lsls	r1, r3, #9
 800395a:	460b      	mov	r3, r1
 800395c:	4614      	mov	r4, r2
 800395e:	4618      	mov	r0, r3
 8003960:	4621      	mov	r1, r4
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	461a      	mov	r2, r3
 800396a:	4623      	mov	r3, r4
 800396c:	f7fc fc4a 	bl	8000204 <__aeabi_uldivmod>
 8003970:	4603      	mov	r3, r0
 8003972:	460c      	mov	r4, r1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e049      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003978:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	f04f 0400 	mov.w	r4, #0
 8003982:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	ea03 0501 	and.w	r5, r3, r1
 800398e:	ea04 0602 	and.w	r6, r4, r2
 8003992:	4629      	mov	r1, r5
 8003994:	4632      	mov	r2, r6
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	f04f 0400 	mov.w	r4, #0
 800399e:	0154      	lsls	r4, r2, #5
 80039a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039a4:	014b      	lsls	r3, r1, #5
 80039a6:	4619      	mov	r1, r3
 80039a8:	4622      	mov	r2, r4
 80039aa:	1b49      	subs	r1, r1, r5
 80039ac:	eb62 0206 	sbc.w	r2, r2, r6
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	f04f 0400 	mov.w	r4, #0
 80039b8:	0194      	lsls	r4, r2, #6
 80039ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039be:	018b      	lsls	r3, r1, #6
 80039c0:	1a5b      	subs	r3, r3, r1
 80039c2:	eb64 0402 	sbc.w	r4, r4, r2
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	00e2      	lsls	r2, r4, #3
 80039d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039d4:	00d9      	lsls	r1, r3, #3
 80039d6:	460b      	mov	r3, r1
 80039d8:	4614      	mov	r4, r2
 80039da:	195b      	adds	r3, r3, r5
 80039dc:	eb44 0406 	adc.w	r4, r4, r6
 80039e0:	f04f 0100 	mov.w	r1, #0
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	02a2      	lsls	r2, r4, #10
 80039ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039ee:	0299      	lsls	r1, r3, #10
 80039f0:	460b      	mov	r3, r1
 80039f2:	4614      	mov	r4, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	4621      	mov	r1, r4
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f04f 0400 	mov.w	r4, #0
 80039fe:	461a      	mov	r2, r3
 8003a00:	4623      	mov	r3, r4
 8003a02:	f7fc fbff 	bl	8000204 <__aeabi_uldivmod>
 8003a06:	4603      	mov	r3, r0
 8003a08:	460c      	mov	r4, r1
 8003a0a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0f1b      	lsrs	r3, r3, #28
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	613b      	str	r3, [r7, #16]
      break;
 8003a22:	e002      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x338>)
 8003a26:	613b      	str	r3, [r7, #16]
      break;
 8003a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2a:	693b      	ldr	r3, [r7, #16]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	007a1200 	.word	0x007a1200

08003a40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8083 	beq.w	8003b60 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a5a:	4b95      	ldr	r3, [pc, #596]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d019      	beq.n	8003a9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a66:	4b92      	ldr	r3, [pc, #584]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a72:	4b8f      	ldr	r3, [pc, #572]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7e:	d00c      	beq.n	8003a9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a80:	4b8b      	ldr	r3, [pc, #556]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d112      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8c:	4b88      	ldr	r3, [pc, #544]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a98:	d10b      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9a:	4b85      	ldr	r3, [pc, #532]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d05b      	beq.n	8003b5e <HAL_RCC_OscConfig+0x11e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d157      	bne.n	8003b5e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e216      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x8a>
 8003abc:	4b7c      	ldr	r3, [pc, #496]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a7b      	ldr	r2, [pc, #492]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e01d      	b.n	8003b06 <HAL_RCC_OscConfig+0xc6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCC_OscConfig+0xae>
 8003ad4:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a75      	ldr	r2, [pc, #468]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a72      	ldr	r2, [pc, #456]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e00b      	b.n	8003b06 <HAL_RCC_OscConfig+0xc6>
 8003aee:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6f      	ldr	r2, [pc, #444]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6c      	ldr	r2, [pc, #432]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d013      	beq.n	8003b36 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fd7d 	bl	800260c <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b16:	f7fe fd79 	bl	800260c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1db      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b28:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0xd6>
 8003b34:	e014      	b.n	8003b60 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fe fd69 	bl	800260c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b3e:	f7fe fd65 	bl	800260c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	; 0x64
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1c7      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b50:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0xfe>
 8003b5c:	e000      	b.n	8003b60 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d06f      	beq.n	8003c4c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d017      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b78:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d105      	bne.n	8003b90 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b84:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b90:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	d11c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9c:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x180>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e18f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4938      	ldr	r1, [pc, #224]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd4:	e03a      	b.n	8003c4c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d020      	beq.n	8003c20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bde:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RCC_OscConfig+0x274>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe fd12 	bl	800260c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe fd0e 	bl	800260c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e170      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
 8003c1e:	e015      	b.n	8003c4c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_RCC_OscConfig+0x274>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fe fcf1 	bl	800260c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fced 	bl	800260c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e14f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d037      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d016      	beq.n	8003c8e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCC_OscConfig+0x278>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fe fcd1 	bl	800260c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fe fccd 	bl	800260c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e12f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x22e>
 8003c8c:	e01c      	b.n	8003cc8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_RCC_OscConfig+0x278>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fe fcba 	bl	800260c <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7fe fcb6 	bl	800260c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d908      	bls.n	8003cbc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e118      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	42470000 	.word	0x42470000
 8003cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbc:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e9      	bne.n	8003c9c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8097 	beq.w	8003e04 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b83      	ldr	r3, [pc, #524]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b7f      	ldr	r3, [pc, #508]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a7e      	ldr	r2, [pc, #504]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	4b7c      	ldr	r3, [pc, #496]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b79      	ldr	r3, [pc, #484]	; (8003eec <HAL_RCC_OscConfig+0x4ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d118      	bne.n	8003d44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4b76      	ldr	r3, [pc, #472]	; (8003eec <HAL_RCC_OscConfig+0x4ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a75      	ldr	r2, [pc, #468]	; (8003eec <HAL_RCC_OscConfig+0x4ac>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fc75 	bl	800260c <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fe fc71 	bl	800260c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0d3      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <HAL_RCC_OscConfig+0x4ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x31a>
 8003d4c:	4b66      	ldr	r3, [pc, #408]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a65      	ldr	r2, [pc, #404]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	e01c      	b.n	8003d94 <HAL_RCC_OscConfig+0x354>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x33c>
 8003d62:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a60      	ldr	r2, [pc, #384]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	4b5e      	ldr	r3, [pc, #376]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a5d      	ldr	r2, [pc, #372]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0x354>
 8003d7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	4a59      	ldr	r2, [pc, #356]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70
 8003d88:	4b57      	ldr	r3, [pc, #348]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	4a56      	ldr	r2, [pc, #344]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003d8e:	f023 0304 	bic.w	r3, r3, #4
 8003d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fc36 	bl	800260c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fe fc32 	bl	800260c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e092      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ee      	beq.n	8003da4 <HAL_RCC_OscConfig+0x364>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fe fc20 	bl	800260c <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fc1c 	bl	800260c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e07c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ee      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d068      	beq.n	8003ede <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d060      	beq.n	8003eda <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d145      	bne.n	8003eac <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <HAL_RCC_OscConfig+0x4b0>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fe fbf1 	bl	800260c <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fe fbed 	bl	800260c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e04f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	019b      	lsls	r3, r3, #6
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	071b      	lsls	r3, r3, #28
 8003e78:	491b      	ldr	r1, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <HAL_RCC_OscConfig+0x4b0>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe fbc2 	bl	800260c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe fbbe 	bl	800260c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e020      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x44c>
 8003eaa:	e018      	b.n	8003ede <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCC_OscConfig+0x4b0>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fbab 	bl	800260c <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe fba7 	bl	800260c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e009      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_OscConfig+0x4a8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x47a>
 8003ed8:	e001      	b.n	8003ede <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	42470060 	.word	0x42470060

08003ef4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e056      	b.n	8003fb4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fd fa8d 	bl	8001440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	ea42 0103 	orr.w	r1, r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	f003 0104 	and.w	r1, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_SPI_Transmit+0x22>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e11e      	b.n	800421c <HAL_SPI_Transmit+0x260>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe6:	f7fe fb11 	bl	800260c <HAL_GetTick>
 8003fea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d002      	beq.n	8004002 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004000:	e103      	b.n	800420a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_SPI_Transmit+0x52>
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004012:	e0fa      	b.n	800420a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2203      	movs	r2, #3
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d107      	bne.n	800406c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d007      	beq.n	800408a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004088:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004092:	d14b      	bne.n	800412c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_Transmit+0xe6>
 800409c:	8afb      	ldrh	r3, [r7, #22]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d13e      	bne.n	8004120 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	1c9a      	adds	r2, r3, #2
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040c6:	e02b      	b.n	8004120 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d112      	bne.n	80040fc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80040fa:	e011      	b.n	8004120 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fc:	f7fe fa86 	bl	800260c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d803      	bhi.n	8004114 <HAL_SPI_Transmit+0x158>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004112:	d102      	bne.n	800411a <HAL_SPI_Transmit+0x15e>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800411e:	e074      	b.n	800420a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ce      	bne.n	80040c8 <HAL_SPI_Transmit+0x10c>
 800412a:	e04c      	b.n	80041c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_SPI_Transmit+0x17e>
 8004134:	8afb      	ldrh	r3, [r7, #22]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d140      	bne.n	80041bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004160:	e02c      	b.n	80041bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b02      	cmp	r3, #2
 800416e:	d113      	bne.n	8004198 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	86da      	strh	r2, [r3, #54]	; 0x36
 8004196:	e011      	b.n	80041bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004198:	f7fe fa38 	bl	800260c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d803      	bhi.n	80041b0 <HAL_SPI_Transmit+0x1f4>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ae:	d102      	bne.n	80041b6 <HAL_SPI_Transmit+0x1fa>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041ba:	e026      	b.n	800420a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1cd      	bne.n	8004162 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fa36 	bl	800463c <SPI_EndRxTxTransaction>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e000      	b.n	800420a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004208:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800421a:	7ffb      	ldrb	r3, [r7, #31]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	; 0x30
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004232:	2301      	movs	r3, #1
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_SPI_TransmitReceive+0x26>
 8004246:	2302      	movs	r3, #2
 8004248:	e18a      	b.n	8004560 <HAL_SPI_TransmitReceive+0x33c>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004252:	f7fe f9db 	bl	800260c <HAL_GetTick>
 8004256:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800426c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004270:	2b01      	cmp	r3, #1
 8004272:	d00f      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x70>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427a:	d107      	bne.n	800428c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <HAL_SPI_TransmitReceive+0x68>
 8004284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004288:	2b04      	cmp	r3, #4
 800428a:	d003      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800428c:	2302      	movs	r3, #2
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004292:	e15b      	b.n	800454c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x82>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x82>
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042ac:	e14e      	b.n	800454c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d003      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2205      	movs	r2, #5
 80042be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	887a      	ldrh	r2, [r7, #2]
 80042d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	887a      	ldrh	r2, [r7, #2]
 80042ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d007      	beq.n	8004316 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431e:	d178      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_SPI_TransmitReceive+0x10a>
 8004328:	8b7b      	ldrh	r3, [r7, #26]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d166      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	881a      	ldrh	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004352:	e053      	b.n	80043fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d11b      	bne.n	800439a <HAL_SPI_TransmitReceive+0x176>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_SPI_TransmitReceive+0x176>
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d113      	bne.n	800439a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d119      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x1b8>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d014      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	b292      	uxth	r2, r2
 80043be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043d8:	2301      	movs	r3, #1
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043dc:	f7fe f916 	bl	800260c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d807      	bhi.n	80043fc <HAL_SPI_TransmitReceive+0x1d8>
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f2:	d003      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043fa:	e0a7      	b.n	800454c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1a6      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x130>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1a1      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x130>
 8004410:	e07c      	b.n	800450c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x1fc>
 800441a:	8b7b      	ldrh	r3, [r7, #26]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d16b      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004446:	e057      	b.n	80044f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d11c      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x26c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x26c>
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d114      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d119      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x2ae>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d014      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ce:	2301      	movs	r3, #1
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044d2:	f7fe f89b 	bl	800260c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044de:	429a      	cmp	r2, r3
 80044e0:	d803      	bhi.n	80044ea <HAL_SPI_TransmitReceive+0x2c6>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e8:	d102      	bne.n	80044f0 <HAL_SPI_TransmitReceive+0x2cc>
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044f6:	e029      	b.n	800454c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1a2      	bne.n	8004448 <HAL_SPI_TransmitReceive+0x224>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d19d      	bne.n	8004448 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f893 	bl	800463c <SPI_EndRxTxTransaction>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d006      	beq.n	800452a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004528:	e010      	b.n	800454c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	e000      	b.n	800454c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800454a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800455c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004560:	4618      	mov	r0, r3
 8004562:	3730      	adds	r7, #48	; 0x30
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004578:	e04c      	b.n	8004614 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004580:	d048      	beq.n	8004614 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004582:	f7fe f843 	bl	800260c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d902      	bls.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d13d      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b0:	d111      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d004      	beq.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d107      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045de:	d10f      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e00f      	b.n	8004634 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	429a      	cmp	r2, r3
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	429a      	cmp	r2, r3
 8004630:	d1a3      	bne.n	800457a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <SPI_EndRxTxTransaction+0x7c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <SPI_EndRxTxTransaction+0x80>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0d5b      	lsrs	r3, r3, #21
 8004654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004666:	d112      	bne.n	800468e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2200      	movs	r2, #0
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff ff78 	bl	8004568 <SPI_WaitFlagStateUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d016      	beq.n	80046ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e00f      	b.n	80046ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	3b01      	subs	r3, #1
 8004698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d0f2      	beq.n	800468e <SPI_EndRxTxTransaction+0x52>
 80046a8:	e000      	b.n	80046ac <SPI_EndRxTxTransaction+0x70>
        break;
 80046aa:	bf00      	nop
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000000 	.word	0x20000000
 80046bc:	165e9f81 	.word	0x165e9f81

080046c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e03f      	b.n	8004752 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc ff5a 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fc03 	bl	8004f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	d166      	bne.n	8004844 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_Receive_DMA+0x26>
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e05f      	b.n	8004846 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_UART_Receive_DMA+0x38>
 8004790:	2302      	movs	r3, #2
 8004792:	e058      	b.n	8004846 <HAL_UART_Receive_DMA+0xea>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2222      	movs	r2, #34	; 0x22
 80047b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	4a25      	ldr	r2, [pc, #148]	; (8004850 <HAL_UART_Receive_DMA+0xf4>)
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	4a24      	ldr	r2, [pc, #144]	; (8004854 <HAL_UART_Receive_DMA+0xf8>)
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	4a23      	ldr	r2, [pc, #140]	; (8004858 <HAL_UART_Receive_DMA+0xfc>)
 80047cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	2200      	movs	r2, #0
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80047d6:	f107 0308 	add.w	r3, r7, #8
 80047da:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	f7fe f8fb 	bl	80029e8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800483e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	08004b89 	.word	0x08004b89
 8004854:	08004bf1 	.word	0x08004bf1
 8004858:	08004c0d 	.word	0x08004c0d

0800485c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004872:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b80      	cmp	r3, #128	; 0x80
 8004890:	d124      	bne.n	80048dc <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	2200      	movs	r2, #0
 80048b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe f8ee 	bl	8002a98 <HAL_DMA_Abort>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00c      	beq.n	80048dc <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fb02 	bl	8002ed0 <HAL_DMA_GetError>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d104      	bne.n	80048dc <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2210      	movs	r2, #16
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e03d      	b.n	8004958 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d124      	bne.n	8004934 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d018      	beq.n	8004934 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	2200      	movs	r2, #0
 8004908:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe f8c2 	bl	8002a98 <HAL_DMA_Abort>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fad6 	bl	8002ed0 <HAL_DMA_GetError>
 8004924:	4603      	mov	r3, r0
 8004926:	2b20      	cmp	r3, #32
 8004928:	d104      	bne.n	8004934 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2210      	movs	r2, #16
 800492e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e011      	b.n	8004958 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_UART_IRQHandler+0x52>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa2e 	bl	8004e0c <UART_Receive_IT>
      return;
 80049b0:	e0d1      	b.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80b0 	beq.w	8004b1a <HAL_UART_IRQHandler+0x1ba>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_UART_IRQHandler+0x70>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80a5 	beq.w	8004b1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_UART_IRQHandler+0x90>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_UART_IRQHandler+0xb0>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	f043 0202 	orr.w	r2, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_UART_IRQHandler+0xd0>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	f043 0204 	orr.w	r2, r3, #4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00f      	beq.n	8004a5a <HAL_UART_IRQHandler+0xfa>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_UART_IRQHandler+0xee>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	f043 0208 	orr.w	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d078      	beq.n	8004b54 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_UART_IRQHandler+0x11c>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f9c8 	bl	8004e0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x144>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d031      	beq.n	8004b08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f911 	bl	8004ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d123      	bne.n	8004b00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d013      	beq.n	8004af8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	4a21      	ldr	r2, [pc, #132]	; (8004b5c <HAL_UART_IRQHandler+0x1fc>)
 8004ad6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe f84b 	bl	8002b78 <HAL_DMA_Abort_IT>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d016      	beq.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af2:	4610      	mov	r0, r2
 8004af4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af6:	e00e      	b.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f83b 	bl	8004b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afe:	e00a      	b.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f837 	bl	8004b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b06:	e006      	b.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f833 	bl	8004b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b14:	e01e      	b.n	8004b54 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b16:	bf00      	nop
    return;
 8004b18:	e01c      	b.n	8004b54 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1d6>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8fe 	bl	8004d30 <UART_Transmit_IT>
    return;
 8004b34:	e00f      	b.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f946 	bl	8004ddc <UART_EndTransmit_IT>
    return;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004b54:	bf00      	nop
  }
}
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	08004d09 	.word	0x08004d09

08004b60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d11e      	bne.n	8004be2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7fc fa06 	bl	8000ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ffae 	bl	8004b60 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b80      	cmp	r3, #128	; 0x80
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b21      	cmp	r3, #33	; 0x21
 8004c3e:	d108      	bne.n	8004c52 <UART_DMAError+0x46>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c4c:	68b8      	ldr	r0, [r7, #8]
 8004c4e:	f000 f827 	bl	8004ca0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b22      	cmp	r3, #34	; 0x22
 8004c72:	d108      	bne.n	8004c86 <UART_DMAError+0x7a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c80:	68b8      	ldr	r0, [r7, #8]
 8004c82:	f000 f823 	bl	8004ccc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	f043 0210 	orr.w	r2, r3, #16
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f7ff ff6e 	bl	8004b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004cb6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ce2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff26 	bl	8004b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b21      	cmp	r3, #33	; 0x21
 8004d42:	d144      	bne.n	8004dce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4c:	d11a      	bne.n	8004d84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	1c9a      	adds	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]
 8004d76:	e00e      	b.n	8004d96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	621a      	str	r2, [r3, #32]
 8004d82:	e008      	b.n	8004d96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	1c59      	adds	r1, r3, #1
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6211      	str	r1, [r2, #32]
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	4619      	mov	r1, r3
 8004da4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10f      	bne.n	8004dca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004dce:	2302      	movs	r3, #2
  }
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fc fa7b 	bl	80012f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b22      	cmp	r3, #34	; 0x22
 8004e1e:	d171      	bne.n	8004f04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d123      	bne.n	8004e72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10e      	bne.n	8004e56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	1c9a      	adds	r2, r3, #2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
 8004e54:	e029      	b.n	8004eaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e70:	e01b      	b.n	8004eaa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6858      	ldr	r0, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6291      	str	r1, [r2, #40]	; 0x28
 8004e8a:	b2c2      	uxtb	r2, r0
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e00c      	b.n	8004eaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	1c58      	adds	r0, r3, #1
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	6288      	str	r0, [r1, #40]	; 0x28
 8004ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d120      	bne.n	8004f00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0220 	bic.w	r2, r2, #32
 8004ecc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc f87c 	bl	8000ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e002      	b.n	8004f06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f52:	f023 030c 	bic.w	r3, r3, #12
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	f040 818b 	bne.w	8005298 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4ac1      	ldr	r2, [pc, #772]	; (800528c <UART_SetConfig+0x37c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d005      	beq.n	8004f98 <UART_SetConfig+0x88>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4abf      	ldr	r2, [pc, #764]	; (8005290 <UART_SetConfig+0x380>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	f040 80bd 	bne.w	8005112 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7fe fb9e 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	461d      	mov	r5, r3
 8004fa2:	f04f 0600 	mov.w	r6, #0
 8004fa6:	46a8      	mov	r8, r5
 8004fa8:	46b1      	mov	r9, r6
 8004faa:	eb18 0308 	adds.w	r3, r8, r8
 8004fae:	eb49 0409 	adc.w	r4, r9, r9
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	46a1      	mov	r9, r4
 8004fb6:	eb18 0805 	adds.w	r8, r8, r5
 8004fba:	eb49 0906 	adc.w	r9, r9, r6
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fd2:	4688      	mov	r8, r1
 8004fd4:	4691      	mov	r9, r2
 8004fd6:	eb18 0005 	adds.w	r0, r8, r5
 8004fda:	eb49 0106 	adc.w	r1, r9, r6
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	f04f 0600 	mov.w	r6, #0
 8004fe8:	196b      	adds	r3, r5, r5
 8004fea:	eb46 0406 	adc.w	r4, r6, r6
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	f7fb f907 	bl	8000204 <__aeabi_uldivmod>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4ba5      	ldr	r3, [pc, #660]	; (8005294 <UART_SetConfig+0x384>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	461d      	mov	r5, r3
 800500c:	f04f 0600 	mov.w	r6, #0
 8005010:	46a9      	mov	r9, r5
 8005012:	46b2      	mov	sl, r6
 8005014:	eb19 0309 	adds.w	r3, r9, r9
 8005018:	eb4a 040a 	adc.w	r4, sl, sl
 800501c:	4699      	mov	r9, r3
 800501e:	46a2      	mov	sl, r4
 8005020:	eb19 0905 	adds.w	r9, r9, r5
 8005024:	eb4a 0a06 	adc.w	sl, sl, r6
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800503c:	4689      	mov	r9, r1
 800503e:	4692      	mov	sl, r2
 8005040:	eb19 0005 	adds.w	r0, r9, r5
 8005044:	eb4a 0106 	adc.w	r1, sl, r6
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	461d      	mov	r5, r3
 800504e:	f04f 0600 	mov.w	r6, #0
 8005052:	196b      	adds	r3, r5, r5
 8005054:	eb46 0406 	adc.w	r4, r6, r6
 8005058:	461a      	mov	r2, r3
 800505a:	4623      	mov	r3, r4
 800505c:	f7fb f8d2 	bl	8000204 <__aeabi_uldivmod>
 8005060:	4603      	mov	r3, r0
 8005062:	460c      	mov	r4, r1
 8005064:	461a      	mov	r2, r3
 8005066:	4b8b      	ldr	r3, [pc, #556]	; (8005294 <UART_SetConfig+0x384>)
 8005068:	fba3 1302 	umull	r1, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2164      	movs	r1, #100	; 0x64
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	3332      	adds	r3, #50	; 0x32
 800507a:	4a86      	ldr	r2, [pc, #536]	; (8005294 <UART_SetConfig+0x384>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005088:	4498      	add	r8, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	461d      	mov	r5, r3
 800508e:	f04f 0600 	mov.w	r6, #0
 8005092:	46a9      	mov	r9, r5
 8005094:	46b2      	mov	sl, r6
 8005096:	eb19 0309 	adds.w	r3, r9, r9
 800509a:	eb4a 040a 	adc.w	r4, sl, sl
 800509e:	4699      	mov	r9, r3
 80050a0:	46a2      	mov	sl, r4
 80050a2:	eb19 0905 	adds.w	r9, r9, r5
 80050a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050be:	4689      	mov	r9, r1
 80050c0:	4692      	mov	sl, r2
 80050c2:	eb19 0005 	adds.w	r0, r9, r5
 80050c6:	eb4a 0106 	adc.w	r1, sl, r6
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	461d      	mov	r5, r3
 80050d0:	f04f 0600 	mov.w	r6, #0
 80050d4:	196b      	adds	r3, r5, r5
 80050d6:	eb46 0406 	adc.w	r4, r6, r6
 80050da:	461a      	mov	r2, r3
 80050dc:	4623      	mov	r3, r4
 80050de:	f7fb f891 	bl	8000204 <__aeabi_uldivmod>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	461a      	mov	r2, r3
 80050e8:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <UART_SetConfig+0x384>)
 80050ea:	fba3 1302 	umull	r1, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2164      	movs	r1, #100	; 0x64
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	3332      	adds	r3, #50	; 0x32
 80050fc:	4a65      	ldr	r2, [pc, #404]	; (8005294 <UART_SetConfig+0x384>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f003 0207 	and.w	r2, r3, #7
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4442      	add	r2, r8
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	e26f      	b.n	80055f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005112:	f7fe facd 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8005116:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	461d      	mov	r5, r3
 800511c:	f04f 0600 	mov.w	r6, #0
 8005120:	46a8      	mov	r8, r5
 8005122:	46b1      	mov	r9, r6
 8005124:	eb18 0308 	adds.w	r3, r8, r8
 8005128:	eb49 0409 	adc.w	r4, r9, r9
 800512c:	4698      	mov	r8, r3
 800512e:	46a1      	mov	r9, r4
 8005130:	eb18 0805 	adds.w	r8, r8, r5
 8005134:	eb49 0906 	adc.w	r9, r9, r6
 8005138:	f04f 0100 	mov.w	r1, #0
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005144:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005148:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800514c:	4688      	mov	r8, r1
 800514e:	4691      	mov	r9, r2
 8005150:	eb18 0005 	adds.w	r0, r8, r5
 8005154:	eb49 0106 	adc.w	r1, r9, r6
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	461d      	mov	r5, r3
 800515e:	f04f 0600 	mov.w	r6, #0
 8005162:	196b      	adds	r3, r5, r5
 8005164:	eb46 0406 	adc.w	r4, r6, r6
 8005168:	461a      	mov	r2, r3
 800516a:	4623      	mov	r3, r4
 800516c:	f7fb f84a 	bl	8000204 <__aeabi_uldivmod>
 8005170:	4603      	mov	r3, r0
 8005172:	460c      	mov	r4, r1
 8005174:	461a      	mov	r2, r3
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <UART_SetConfig+0x384>)
 8005178:	fba3 2302 	umull	r2, r3, r3, r2
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	461d      	mov	r5, r3
 8005186:	f04f 0600 	mov.w	r6, #0
 800518a:	46a9      	mov	r9, r5
 800518c:	46b2      	mov	sl, r6
 800518e:	eb19 0309 	adds.w	r3, r9, r9
 8005192:	eb4a 040a 	adc.w	r4, sl, sl
 8005196:	4699      	mov	r9, r3
 8005198:	46a2      	mov	sl, r4
 800519a:	eb19 0905 	adds.w	r9, r9, r5
 800519e:	eb4a 0a06 	adc.w	sl, sl, r6
 80051a2:	f04f 0100 	mov.w	r1, #0
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051b6:	4689      	mov	r9, r1
 80051b8:	4692      	mov	sl, r2
 80051ba:	eb19 0005 	adds.w	r0, r9, r5
 80051be:	eb4a 0106 	adc.w	r1, sl, r6
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	461d      	mov	r5, r3
 80051c8:	f04f 0600 	mov.w	r6, #0
 80051cc:	196b      	adds	r3, r5, r5
 80051ce:	eb46 0406 	adc.w	r4, r6, r6
 80051d2:	461a      	mov	r2, r3
 80051d4:	4623      	mov	r3, r4
 80051d6:	f7fb f815 	bl	8000204 <__aeabi_uldivmod>
 80051da:	4603      	mov	r3, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	461a      	mov	r2, r3
 80051e0:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <UART_SetConfig+0x384>)
 80051e2:	fba3 1302 	umull	r1, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2164      	movs	r1, #100	; 0x64
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	3332      	adds	r3, #50	; 0x32
 80051f4:	4a27      	ldr	r2, [pc, #156]	; (8005294 <UART_SetConfig+0x384>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005202:	4498      	add	r8, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	461d      	mov	r5, r3
 8005208:	f04f 0600 	mov.w	r6, #0
 800520c:	46a9      	mov	r9, r5
 800520e:	46b2      	mov	sl, r6
 8005210:	eb19 0309 	adds.w	r3, r9, r9
 8005214:	eb4a 040a 	adc.w	r4, sl, sl
 8005218:	4699      	mov	r9, r3
 800521a:	46a2      	mov	sl, r4
 800521c:	eb19 0905 	adds.w	r9, r9, r5
 8005220:	eb4a 0a06 	adc.w	sl, sl, r6
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005230:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005234:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005238:	4689      	mov	r9, r1
 800523a:	4692      	mov	sl, r2
 800523c:	eb19 0005 	adds.w	r0, r9, r5
 8005240:	eb4a 0106 	adc.w	r1, sl, r6
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	461d      	mov	r5, r3
 800524a:	f04f 0600 	mov.w	r6, #0
 800524e:	196b      	adds	r3, r5, r5
 8005250:	eb46 0406 	adc.w	r4, r6, r6
 8005254:	461a      	mov	r2, r3
 8005256:	4623      	mov	r3, r4
 8005258:	f7fa ffd4 	bl	8000204 <__aeabi_uldivmod>
 800525c:	4603      	mov	r3, r0
 800525e:	460c      	mov	r4, r1
 8005260:	461a      	mov	r2, r3
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <UART_SetConfig+0x384>)
 8005264:	fba3 1302 	umull	r1, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2164      	movs	r1, #100	; 0x64
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	3332      	adds	r3, #50	; 0x32
 8005276:	4a07      	ldr	r2, [pc, #28]	; (8005294 <UART_SetConfig+0x384>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 0207 	and.w	r2, r3, #7
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4442      	add	r2, r8
 8005288:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800528a:	e1b2      	b.n	80055f2 <UART_SetConfig+0x6e2>
 800528c:	40011000 	.word	0x40011000
 8005290:	40011400 	.word	0x40011400
 8005294:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4ad7      	ldr	r2, [pc, #860]	; (80055fc <UART_SetConfig+0x6ec>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d005      	beq.n	80052ae <UART_SetConfig+0x39e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4ad6      	ldr	r2, [pc, #856]	; (8005600 <UART_SetConfig+0x6f0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	f040 80d1 	bne.w	8005450 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80052ae:	f7fe fa13 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 80052b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	469a      	mov	sl, r3
 80052b8:	f04f 0b00 	mov.w	fp, #0
 80052bc:	46d0      	mov	r8, sl
 80052be:	46d9      	mov	r9, fp
 80052c0:	eb18 0308 	adds.w	r3, r8, r8
 80052c4:	eb49 0409 	adc.w	r4, r9, r9
 80052c8:	4698      	mov	r8, r3
 80052ca:	46a1      	mov	r9, r4
 80052cc:	eb18 080a 	adds.w	r8, r8, sl
 80052d0:	eb49 090b 	adc.w	r9, r9, fp
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052e8:	4688      	mov	r8, r1
 80052ea:	4691      	mov	r9, r2
 80052ec:	eb1a 0508 	adds.w	r5, sl, r8
 80052f0:	eb4b 0609 	adc.w	r6, fp, r9
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4619      	mov	r1, r3
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	f04f 0400 	mov.w	r4, #0
 8005306:	0094      	lsls	r4, r2, #2
 8005308:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800530c:	008b      	lsls	r3, r1, #2
 800530e:	461a      	mov	r2, r3
 8005310:	4623      	mov	r3, r4
 8005312:	4628      	mov	r0, r5
 8005314:	4631      	mov	r1, r6
 8005316:	f7fa ff75 	bl	8000204 <__aeabi_uldivmod>
 800531a:	4603      	mov	r3, r0
 800531c:	460c      	mov	r4, r1
 800531e:	461a      	mov	r2, r3
 8005320:	4bb8      	ldr	r3, [pc, #736]	; (8005604 <UART_SetConfig+0x6f4>)
 8005322:	fba3 2302 	umull	r2, r3, r3, r2
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	469b      	mov	fp, r3
 8005330:	f04f 0c00 	mov.w	ip, #0
 8005334:	46d9      	mov	r9, fp
 8005336:	46e2      	mov	sl, ip
 8005338:	eb19 0309 	adds.w	r3, r9, r9
 800533c:	eb4a 040a 	adc.w	r4, sl, sl
 8005340:	4699      	mov	r9, r3
 8005342:	46a2      	mov	sl, r4
 8005344:	eb19 090b 	adds.w	r9, r9, fp
 8005348:	eb4a 0a0c 	adc.w	sl, sl, ip
 800534c:	f04f 0100 	mov.w	r1, #0
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800535c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005360:	4689      	mov	r9, r1
 8005362:	4692      	mov	sl, r2
 8005364:	eb1b 0509 	adds.w	r5, fp, r9
 8005368:	eb4c 060a 	adc.w	r6, ip, sl
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4619      	mov	r1, r3
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	f04f 0400 	mov.w	r4, #0
 800537e:	0094      	lsls	r4, r2, #2
 8005380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005384:	008b      	lsls	r3, r1, #2
 8005386:	461a      	mov	r2, r3
 8005388:	4623      	mov	r3, r4
 800538a:	4628      	mov	r0, r5
 800538c:	4631      	mov	r1, r6
 800538e:	f7fa ff39 	bl	8000204 <__aeabi_uldivmod>
 8005392:	4603      	mov	r3, r0
 8005394:	460c      	mov	r4, r1
 8005396:	461a      	mov	r2, r3
 8005398:	4b9a      	ldr	r3, [pc, #616]	; (8005604 <UART_SetConfig+0x6f4>)
 800539a:	fba3 1302 	umull	r1, r3, r3, r2
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2164      	movs	r1, #100	; 0x64
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	3332      	adds	r3, #50	; 0x32
 80053ac:	4a95      	ldr	r2, [pc, #596]	; (8005604 <UART_SetConfig+0x6f4>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053b8:	4498      	add	r8, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	469b      	mov	fp, r3
 80053be:	f04f 0c00 	mov.w	ip, #0
 80053c2:	46d9      	mov	r9, fp
 80053c4:	46e2      	mov	sl, ip
 80053c6:	eb19 0309 	adds.w	r3, r9, r9
 80053ca:	eb4a 040a 	adc.w	r4, sl, sl
 80053ce:	4699      	mov	r9, r3
 80053d0:	46a2      	mov	sl, r4
 80053d2:	eb19 090b 	adds.w	r9, r9, fp
 80053d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053da:	f04f 0100 	mov.w	r1, #0
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053ee:	4689      	mov	r9, r1
 80053f0:	4692      	mov	sl, r2
 80053f2:	eb1b 0509 	adds.w	r5, fp, r9
 80053f6:	eb4c 060a 	adc.w	r6, ip, sl
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4619      	mov	r1, r3
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	f04f 0400 	mov.w	r4, #0
 800540c:	0094      	lsls	r4, r2, #2
 800540e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005412:	008b      	lsls	r3, r1, #2
 8005414:	461a      	mov	r2, r3
 8005416:	4623      	mov	r3, r4
 8005418:	4628      	mov	r0, r5
 800541a:	4631      	mov	r1, r6
 800541c:	f7fa fef2 	bl	8000204 <__aeabi_uldivmod>
 8005420:	4603      	mov	r3, r0
 8005422:	460c      	mov	r4, r1
 8005424:	461a      	mov	r2, r3
 8005426:	4b77      	ldr	r3, [pc, #476]	; (8005604 <UART_SetConfig+0x6f4>)
 8005428:	fba3 1302 	umull	r1, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	2164      	movs	r1, #100	; 0x64
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	3332      	adds	r3, #50	; 0x32
 800543a:	4a72      	ldr	r2, [pc, #456]	; (8005604 <UART_SetConfig+0x6f4>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4442      	add	r2, r8
 800544c:	609a      	str	r2, [r3, #8]
 800544e:	e0d0      	b.n	80055f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005450:	f7fe f92e 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8005454:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	469a      	mov	sl, r3
 800545a:	f04f 0b00 	mov.w	fp, #0
 800545e:	46d0      	mov	r8, sl
 8005460:	46d9      	mov	r9, fp
 8005462:	eb18 0308 	adds.w	r3, r8, r8
 8005466:	eb49 0409 	adc.w	r4, r9, r9
 800546a:	4698      	mov	r8, r3
 800546c:	46a1      	mov	r9, r4
 800546e:	eb18 080a 	adds.w	r8, r8, sl
 8005472:	eb49 090b 	adc.w	r9, r9, fp
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005482:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005486:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800548a:	4688      	mov	r8, r1
 800548c:	4691      	mov	r9, r2
 800548e:	eb1a 0508 	adds.w	r5, sl, r8
 8005492:	eb4b 0609 	adc.w	r6, fp, r9
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4619      	mov	r1, r3
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	0094      	lsls	r4, r2, #2
 80054aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054ae:	008b      	lsls	r3, r1, #2
 80054b0:	461a      	mov	r2, r3
 80054b2:	4623      	mov	r3, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	4631      	mov	r1, r6
 80054b8:	f7fa fea4 	bl	8000204 <__aeabi_uldivmod>
 80054bc:	4603      	mov	r3, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b50      	ldr	r3, [pc, #320]	; (8005604 <UART_SetConfig+0x6f4>)
 80054c4:	fba3 2302 	umull	r2, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	469b      	mov	fp, r3
 80054d2:	f04f 0c00 	mov.w	ip, #0
 80054d6:	46d9      	mov	r9, fp
 80054d8:	46e2      	mov	sl, ip
 80054da:	eb19 0309 	adds.w	r3, r9, r9
 80054de:	eb4a 040a 	adc.w	r4, sl, sl
 80054e2:	4699      	mov	r9, r3
 80054e4:	46a2      	mov	sl, r4
 80054e6:	eb19 090b 	adds.w	r9, r9, fp
 80054ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054ee:	f04f 0100 	mov.w	r1, #0
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005502:	4689      	mov	r9, r1
 8005504:	4692      	mov	sl, r2
 8005506:	eb1b 0509 	adds.w	r5, fp, r9
 800550a:	eb4c 060a 	adc.w	r6, ip, sl
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4619      	mov	r1, r3
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	f04f 0400 	mov.w	r4, #0
 8005520:	0094      	lsls	r4, r2, #2
 8005522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005526:	008b      	lsls	r3, r1, #2
 8005528:	461a      	mov	r2, r3
 800552a:	4623      	mov	r3, r4
 800552c:	4628      	mov	r0, r5
 800552e:	4631      	mov	r1, r6
 8005530:	f7fa fe68 	bl	8000204 <__aeabi_uldivmod>
 8005534:	4603      	mov	r3, r0
 8005536:	460c      	mov	r4, r1
 8005538:	461a      	mov	r2, r3
 800553a:	4b32      	ldr	r3, [pc, #200]	; (8005604 <UART_SetConfig+0x6f4>)
 800553c:	fba3 1302 	umull	r1, r3, r3, r2
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	2164      	movs	r1, #100	; 0x64
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	3332      	adds	r3, #50	; 0x32
 800554e:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <UART_SetConfig+0x6f4>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800555a:	4498      	add	r8, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	469b      	mov	fp, r3
 8005560:	f04f 0c00 	mov.w	ip, #0
 8005564:	46d9      	mov	r9, fp
 8005566:	46e2      	mov	sl, ip
 8005568:	eb19 0309 	adds.w	r3, r9, r9
 800556c:	eb4a 040a 	adc.w	r4, sl, sl
 8005570:	4699      	mov	r9, r3
 8005572:	46a2      	mov	sl, r4
 8005574:	eb19 090b 	adds.w	r9, r9, fp
 8005578:	eb4a 0a0c 	adc.w	sl, sl, ip
 800557c:	f04f 0100 	mov.w	r1, #0
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800558c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005590:	4689      	mov	r9, r1
 8005592:	4692      	mov	sl, r2
 8005594:	eb1b 0509 	adds.w	r5, fp, r9
 8005598:	eb4c 060a 	adc.w	r6, ip, sl
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4619      	mov	r1, r3
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	f04f 0400 	mov.w	r4, #0
 80055ae:	0094      	lsls	r4, r2, #2
 80055b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055b4:	008b      	lsls	r3, r1, #2
 80055b6:	461a      	mov	r2, r3
 80055b8:	4623      	mov	r3, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	4631      	mov	r1, r6
 80055be:	f7fa fe21 	bl	8000204 <__aeabi_uldivmod>
 80055c2:	4603      	mov	r3, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <UART_SetConfig+0x6f4>)
 80055ca:	fba3 1302 	umull	r1, r3, r3, r2
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	2164      	movs	r1, #100	; 0x64
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	3332      	adds	r3, #50	; 0x32
 80055dc:	4a09      	ldr	r2, [pc, #36]	; (8005604 <UART_SetConfig+0x6f4>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4442      	add	r2, r8
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	e7ff      	b.n	80055f2 <UART_SetConfig+0x6e2>
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fc:	40011000 	.word	0x40011000
 8005600:	40011400 	.word	0x40011400
 8005604:	51eb851f 	.word	0x51eb851f

08005608 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800560c:	4904      	ldr	r1, [pc, #16]	; (8005620 <MX_FATFS_Init+0x18>)
 800560e:	4805      	ldr	r0, [pc, #20]	; (8005624 <MX_FATFS_Init+0x1c>)
 8005610:	f002 fa0e 	bl	8007a30 <FATFS_LinkDriver>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <MX_FATFS_Init+0x20>)
 800561a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200026e0 	.word	0x200026e0
 8005624:	20000010 	.word	0x20000010
 8005628:	200026e4 	.word	0x200026e4

0800562c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005630:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	4618      	mov	r0, r3
 800564a:	f7fc fc07 	bl	8001e5c <USER_SPI_initialize>
 800564e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fc fcd9 	bl	800201c <USER_SPI_status>
 800566a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005684:	7bf8      	ldrb	r0, [r7, #15]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	f7fc fcdc 	bl	8002048 <USER_SPI_read>
 8005690:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	4603      	mov	r3, r0
 80056a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80056aa:	7bf8      	ldrb	r0, [r7, #15]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	f7fc fd2f 	bl	8002114 <USER_SPI_write>
 80056b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	603a      	str	r2, [r7, #0]
 80056ca:	71fb      	strb	r3, [r7, #7]
 80056cc:	460b      	mov	r3, r1
 80056ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80056d0:	79b9      	ldrb	r1, [r7, #6]
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fc fd98 	bl	800220c <USER_SPI_ioctl>
 80056dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	4a08      	ldr	r2, [pc, #32]	; (8005718 <disk_status+0x30>)
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	79fa      	ldrb	r2, [r7, #7]
 8005700:	4905      	ldr	r1, [pc, #20]	; (8005718 <disk_status+0x30>)
 8005702:	440a      	add	r2, r1
 8005704:	7a12      	ldrb	r2, [r2, #8]
 8005706:	4610      	mov	r0, r2
 8005708:	4798      	blx	r3
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800570e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	200007f8 	.word	0x200007f8

0800571c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	4a0d      	ldr	r2, [pc, #52]	; (8005764 <disk_initialize+0x48>)
 800572e:	5cd3      	ldrb	r3, [r2, r3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d111      	bne.n	8005758 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	4a0b      	ldr	r2, [pc, #44]	; (8005764 <disk_initialize+0x48>)
 8005738:	2101      	movs	r1, #1
 800573a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	4a09      	ldr	r2, [pc, #36]	; (8005764 <disk_initialize+0x48>)
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	79fa      	ldrb	r2, [r7, #7]
 800574a:	4906      	ldr	r1, [pc, #24]	; (8005764 <disk_initialize+0x48>)
 800574c:	440a      	add	r2, r1
 800574e:	7a12      	ldrb	r2, [r2, #8]
 8005750:	4610      	mov	r0, r2
 8005752:	4798      	blx	r3
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200007f8 	.word	0x200007f8

08005768 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <disk_read+0x3c>)
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	689c      	ldr	r4, [r3, #8]
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	4a07      	ldr	r2, [pc, #28]	; (80057a4 <disk_read+0x3c>)
 8005788:	4413      	add	r3, r2
 800578a:	7a18      	ldrb	r0, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	47a0      	blx	r4
 8005794:	4603      	mov	r3, r0
 8005796:	75fb      	strb	r3, [r7, #23]
  return res;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd90      	pop	{r4, r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200007f8 	.word	0x200007f8

080057a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4603      	mov	r3, r0
 80057b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <disk_write+0x3c>)
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68dc      	ldr	r4, [r3, #12]
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	4a07      	ldr	r2, [pc, #28]	; (80057e4 <disk_write+0x3c>)
 80057c8:	4413      	add	r3, r2
 80057ca:	7a18      	ldrb	r0, [r3, #8]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	47a0      	blx	r4
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200007f8 	.word	0x200007f8

080057e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	603a      	str	r2, [r7, #0]
 80057f2:	71fb      	strb	r3, [r7, #7]
 80057f4:	460b      	mov	r3, r1
 80057f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	4a09      	ldr	r2, [pc, #36]	; (8005820 <disk_ioctl+0x38>)
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	79fa      	ldrb	r2, [r7, #7]
 8005806:	4906      	ldr	r1, [pc, #24]	; (8005820 <disk_ioctl+0x38>)
 8005808:	440a      	add	r2, r1
 800580a:	7a10      	ldrb	r0, [r2, #8]
 800580c:	79b9      	ldrb	r1, [r7, #6]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	4798      	blx	r3
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]
  return res;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	200007f8 	.word	0x200007f8

08005824 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3301      	adds	r3, #1
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005834:	89fb      	ldrh	r3, [r7, #14]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	b21a      	sxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b21b      	sxth	r3, r3
 8005840:	4313      	orrs	r3, r2
 8005842:	b21b      	sxth	r3, r3
 8005844:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005846:	89fb      	ldrh	r3, [r7, #14]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3303      	adds	r3, #3
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	3202      	adds	r2, #2
 800586c:	7812      	ldrb	r2, [r2, #0]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	3201      	adds	r2, #1
 800587a:	7812      	ldrb	r2, [r2, #0]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
	return rv;
 800588c:	68fb      	ldr	r3, [r7, #12]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	887a      	ldrh	r2, [r7, #2]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	887b      	ldrh	r3, [r7, #2]
 80058b4:	0a1b      	lsrs	r3, r3, #8
 80058b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	1c53      	adds	r3, r2, #1
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	6179      	str	r1, [r7, #20]
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3b01      	subs	r3, #1
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f1      	bne.n	8005942 <mem_cpy+0x1a>
	}
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	617a      	str	r2, [r7, #20]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3b01      	subs	r3, #1
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f3      	bne.n	800597a <mem_set+0x10>
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800599e:	b480      	push	{r7}
 80059a0:	b089      	sub	sp, #36	; 0x24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	61fa      	str	r2, [r7, #28]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	61ba      	str	r2, [r7, #24]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	1acb      	subs	r3, r1, r3
 80059ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	607b      	str	r3, [r7, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <mem_cmp+0x40>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0eb      	beq.n	80059b6 <mem_cmp+0x18>

	return r;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3724      	adds	r7, #36	; 0x24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059f6:	e002      	b.n	80059fe <chk_chr+0x12>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3301      	adds	r3, #1
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <chk_chr+0x26>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d1f2      	bne.n	80059f8 <chk_chr+0xc>
	return *str;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	781b      	ldrb	r3, [r3, #0]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e029      	b.n	8005a8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a38:	4a27      	ldr	r2, [pc, #156]	; (8005ad8 <chk_lock+0xb4>)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	4413      	add	r3, r2
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01d      	beq.n	8005a82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a46:	4a24      	ldr	r2, [pc, #144]	; (8005ad8 <chk_lock+0xb4>)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4413      	add	r3, r2
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d116      	bne.n	8005a86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a58:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <chk_lock+0xb4>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4413      	add	r3, r2
 8005a60:	3304      	adds	r3, #4
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d10c      	bne.n	8005a86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ad8 <chk_lock+0xb4>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	4413      	add	r3, r2
 8005a74:	3308      	adds	r3, #8
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d102      	bne.n	8005a86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a80:	e007      	b.n	8005a92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a82:	2301      	movs	r3, #1
 8005a84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d9d2      	bls.n	8005a38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d109      	bne.n	8005aac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <chk_lock+0x80>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d101      	bne.n	8005aa8 <chk_lock+0x84>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e010      	b.n	8005aca <chk_lock+0xa6>
 8005aa8:	2312      	movs	r3, #18
 8005aaa:	e00e      	b.n	8005aca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d108      	bne.n	8005ac4 <chk_lock+0xa0>
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <chk_lock+0xb4>)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	4413      	add	r3, r2
 8005aba:	330c      	adds	r3, #12
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac2:	d101      	bne.n	8005ac8 <chk_lock+0xa4>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	e000      	b.n	8005aca <chk_lock+0xa6>
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	200007d8 	.word	0x200007d8

08005adc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	e002      	b.n	8005aee <enq_lock+0x12>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3301      	adds	r3, #1
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d806      	bhi.n	8005b02 <enq_lock+0x26>
 8005af4:	4a09      	ldr	r2, [pc, #36]	; (8005b1c <enq_lock+0x40>)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f2      	bne.n	8005ae8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	bf14      	ite	ne
 8005b08:	2301      	movne	r3, #1
 8005b0a:	2300      	moveq	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	200007d8 	.word	0x200007d8

08005b20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e01f      	b.n	8005b70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b30:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <inc_lock+0x118>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	4413      	add	r3, r2
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d113      	bne.n	8005b6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b42:	4a3d      	ldr	r2, [pc, #244]	; (8005c38 <inc_lock+0x118>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4413      	add	r3, r2
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d109      	bne.n	8005b6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b56:	4a38      	ldr	r2, [pc, #224]	; (8005c38 <inc_lock+0x118>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3308      	adds	r3, #8
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d006      	beq.n	8005b78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d9dc      	bls.n	8005b30 <inc_lock+0x10>
 8005b76:	e000      	b.n	8005b7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d132      	bne.n	8005be6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e002      	b.n	8005b8c <inc_lock+0x6c>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d806      	bhi.n	8005ba0 <inc_lock+0x80>
 8005b92:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <inc_lock+0x118>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	4413      	add	r3, r2
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f2      	bne.n	8005b86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d101      	bne.n	8005baa <inc_lock+0x8a>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e040      	b.n	8005c2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4922      	ldr	r1, [pc, #136]	; (8005c38 <inc_lock+0x118>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	440b      	add	r3, r1
 8005bb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	491e      	ldr	r1, [pc, #120]	; (8005c38 <inc_lock+0x118>)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	491a      	ldr	r1, [pc, #104]	; (8005c38 <inc_lock+0x118>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005bd8:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <inc_lock+0x118>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4413      	add	r3, r2
 8005be0:	330c      	adds	r3, #12
 8005be2:	2200      	movs	r2, #0
 8005be4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <inc_lock+0xe0>
 8005bec:	4a12      	ldr	r2, [pc, #72]	; (8005c38 <inc_lock+0x118>)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	4413      	add	r3, r2
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <inc_lock+0xe0>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e015      	b.n	8005c2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d108      	bne.n	8005c18 <inc_lock+0xf8>
 8005c06:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <inc_lock+0x118>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	4413      	add	r3, r2
 8005c0e:	330c      	adds	r3, #12
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	e001      	b.n	8005c1c <inc_lock+0xfc>
 8005c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1c:	4906      	ldr	r1, [pc, #24]	; (8005c38 <inc_lock+0x118>)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	440b      	add	r3, r1
 8005c24:	330c      	adds	r3, #12
 8005c26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	200007d8 	.word	0x200007d8

08005c3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d825      	bhi.n	8005c9c <dec_lock+0x60>
		n = Files[i].ctr;
 8005c50:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <dec_lock+0x74>)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	4413      	add	r3, r2
 8005c58:	330c      	adds	r3, #12
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c64:	d101      	bne.n	8005c6a <dec_lock+0x2e>
 8005c66:	2300      	movs	r3, #0
 8005c68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c6a:	89fb      	ldrh	r3, [r7, #14]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <dec_lock+0x3a>
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c76:	4a0e      	ldr	r2, [pc, #56]	; (8005cb0 <dec_lock+0x74>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	330c      	adds	r3, #12
 8005c80:	89fa      	ldrh	r2, [r7, #14]
 8005c82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <dec_lock+0x5a>
 8005c8a:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <dec_lock+0x74>)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	4413      	add	r3, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	737b      	strb	r3, [r7, #13]
 8005c9a:	e001      	b.n	8005ca0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ca0:	7b7b      	ldrb	r3, [r7, #13]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	200007d8 	.word	0x200007d8

08005cb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e010      	b.n	8005ce4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <clear_lock+0x44>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	4413      	add	r3, r2
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d105      	bne.n	8005cde <clear_lock+0x2a>
 8005cd2:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <clear_lock+0x44>)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	4413      	add	r3, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d9eb      	bls.n	8005cc2 <clear_lock+0xe>
	}
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	200007d8 	.word	0x200007d8

08005cfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	78db      	ldrb	r3, [r3, #3]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d034      	beq.n	8005d7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7858      	ldrb	r0, [r3, #1]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d20:	2301      	movs	r3, #1
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	f7ff fd40 	bl	80057a8 <disk_write>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
 8005d32:	e022      	b.n	8005d7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d217      	bcs.n	8005d7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	789b      	ldrb	r3, [r3, #2]
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	e010      	b.n	8005d74 <sync_window+0x78>
					wsect += fs->fsize;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4413      	add	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7858      	ldrb	r0, [r3, #1]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d66:	2301      	movs	r3, #1
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	f7ff fd1d 	bl	80057a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d8eb      	bhi.n	8005d52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d01b      	beq.n	8005dd4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffad 	bl	8005cfc <sync_window>
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d113      	bne.n	8005dd4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	7858      	ldrb	r0, [r3, #1]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005db6:	2301      	movs	r3, #1
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	f7ff fcd5 	bl	8005768 <disk_read>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff87 	bl	8005cfc <sync_window>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d158      	bne.n	8005eaa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d148      	bne.n	8005e92 <sync_fs+0xb2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	791b      	ldrb	r3, [r3, #4]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d144      	bne.n	8005e92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3330      	adds	r3, #48	; 0x30
 8005e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fda9 	bl	800596a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3330      	adds	r3, #48	; 0x30
 8005e1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e20:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fd38 	bl	800589a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3330      	adds	r3, #48	; 0x30
 8005e2e:	4921      	ldr	r1, [pc, #132]	; (8005eb4 <sync_fs+0xd4>)
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fd4d 	bl	80058d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3330      	adds	r3, #48	; 0x30
 8005e3a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e3e:	491e      	ldr	r1, [pc, #120]	; (8005eb8 <sync_fs+0xd8>)
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fd45 	bl	80058d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3330      	adds	r3, #48	; 0x30
 8005e4a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f7ff fd3b 	bl	80058d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3330      	adds	r3, #48	; 0x30
 8005e5e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7ff fd31 	bl	80058d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7858      	ldrb	r0, [r3, #1]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	2301      	movs	r3, #1
 8005e88:	f7ff fc8e 	bl	80057a8 <disk_write>
			fs->fsi_flag = 0;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	2200      	movs	r2, #0
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fca4 	bl	80057e8 <disk_ioctl>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <sync_fs+0xca>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	41615252 	.word	0x41615252
 8005eb8:	61417272 	.word	0x61417272

08005ebc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3b02      	subs	r3, #2
 8005eca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	3b02      	subs	r3, #2
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d301      	bcc.n	8005edc <clust2sect+0x20>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e008      	b.n	8005eee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	895b      	ldrh	r3, [r3, #10]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	fb03 f202 	mul.w	r2, r3, r2
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	4413      	add	r3, r2
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d904      	bls.n	8005f1a <get_fat+0x20>
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e08c      	b.n	800603a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d045      	beq.n	8005fba <get_fat+0xc0>
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d05d      	beq.n	8005fee <get_fat+0xf4>
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d177      	bne.n	8006026 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6a1a      	ldr	r2, [r3, #32]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	0a5b      	lsrs	r3, r3, #9
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6938      	ldr	r0, [r7, #16]
 8005f52:	f7ff ff17 	bl	8005d84 <move_window>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d167      	bne.n	800602c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	60fa      	str	r2, [r7, #12]
 8005f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f6e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6a1a      	ldr	r2, [r3, #32]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	0a5b      	lsrs	r3, r3, #9
 8005f78:	4413      	add	r3, r2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6938      	ldr	r0, [r7, #16]
 8005f7e:	f7ff ff01 	bl	8005d84 <move_window>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d153      	bne.n	8006030 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <get_fat+0xb6>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	e002      	b.n	8005fb6 <get_fat+0xbc>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb6:	617b      	str	r3, [r7, #20]
			break;
 8005fb8:	e03f      	b.n	800603a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6938      	ldr	r0, [r7, #16]
 8005fc8:	f7ff fedc 	bl	8005d84 <move_window>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d130      	bne.n	8006034 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005fe0:	4413      	add	r3, r2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fc1e 	bl	8005824 <ld_word>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	617b      	str	r3, [r7, #20]
			break;
 8005fec:	e025      	b.n	800603a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	09db      	lsrs	r3, r3, #7
 8005ff6:	4413      	add	r3, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f7ff fec2 	bl	8005d84 <move_window>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d118      	bne.n	8006038 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006014:	4413      	add	r3, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fc1c 	bl	8005854 <ld_dword>
 800601c:	4603      	mov	r3, r0
 800601e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006022:	617b      	str	r3, [r7, #20]
			break;
 8006024:	e009      	b.n	800603a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006026:	2301      	movs	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e006      	b.n	800603a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800602c:	bf00      	nop
 800602e:	e004      	b.n	800603a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006030:	bf00      	nop
 8006032:	e002      	b.n	800603a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006034:	bf00      	nop
 8006036:	e000      	b.n	800603a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006038:	bf00      	nop
		}
	}

	return val;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b089      	sub	sp, #36	; 0x24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006050:	2302      	movs	r3, #2
 8006052:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b01      	cmp	r3, #1
 8006058:	f240 80d6 	bls.w	8006208 <put_fat+0x1c4>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	f080 80d0 	bcs.w	8006208 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d073      	beq.n	8006158 <put_fat+0x114>
 8006070:	2b03      	cmp	r3, #3
 8006072:	f000 8091 	beq.w	8006198 <put_fat+0x154>
 8006076:	2b01      	cmp	r3, #1
 8006078:	f040 80c6 	bne.w	8006208 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4413      	add	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1a      	ldr	r2, [r3, #32]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	0a5b      	lsrs	r3, r3, #9
 8006092:	4413      	add	r3, r2
 8006094:	4619      	mov	r1, r3
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff fe74 	bl	8005d84 <move_window>
 800609c:	4603      	mov	r3, r0
 800609e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060a0:	7ffb      	ldrb	r3, [r7, #31]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 80a9 	bne.w	80061fa <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	1c59      	adds	r1, r3, #1
 80060b2:	61b9      	str	r1, [r7, #24]
 80060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b8:	4413      	add	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <put_fat+0x9e>
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	b25b      	sxtb	r3, r3
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	b25a      	sxtb	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	b25b      	sxtb	r3, r3
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	e001      	b.n	80060e6 <put_fat+0xa2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1a      	ldr	r2, [r3, #32]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	0a5b      	lsrs	r3, r3, #9
 80060f8:	4413      	add	r3, r2
 80060fa:	4619      	mov	r1, r3
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f7ff fe41 	bl	8005d84 <move_window>
 8006102:	4603      	mov	r3, r0
 8006104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006106:	7ffb      	ldrb	r3, [r7, #31]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d178      	bne.n	80061fe <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	4413      	add	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <put_fat+0xea>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	b2db      	uxtb	r3, r3
 800612c:	e00e      	b.n	800614c <put_fat+0x108>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b25b      	sxtb	r3, r3
 8006134:	f023 030f 	bic.w	r3, r3, #15
 8006138:	b25a      	sxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	b25b      	sxtb	r3, r3
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	b25b      	sxtb	r3, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	b25b      	sxtb	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	70da      	strb	r2, [r3, #3]
			break;
 8006156:	e057      	b.n	8006208 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	4413      	add	r3, r2
 8006162:	4619      	mov	r1, r3
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff fe0d 	bl	8005d84 <move_window>
 800616a:	4603      	mov	r3, r0
 800616c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800616e:	7ffb      	ldrb	r3, [r7, #31]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d146      	bne.n	8006202 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006182:	4413      	add	r3, r2
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	b292      	uxth	r2, r2
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fb85 	bl	800589a <st_word>
			fs->wflag = 1;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	70da      	strb	r2, [r3, #3]
			break;
 8006196:	e037      	b.n	8006208 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1a      	ldr	r2, [r3, #32]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	09db      	lsrs	r3, r3, #7
 80061a0:	4413      	add	r3, r2
 80061a2:	4619      	mov	r1, r3
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff fded 	bl	8005d84 <move_window>
 80061aa:	4603      	mov	r3, r0
 80061ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d128      	bne.n	8006206 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80061c8:	4413      	add	r3, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fb42 	bl	8005854 <ld_dword>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061d6:	4323      	orrs	r3, r4
 80061d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80061e8:	4413      	add	r3, r2
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fb6f 	bl	80058d0 <st_dword>
			fs->wflag = 1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	70da      	strb	r2, [r3, #3]
			break;
 80061f8:	e006      	b.n	8006208 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80061fa:	bf00      	nop
 80061fc:	e004      	b.n	8006208 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006206:	bf00      	nop
		}
	}
	return res;
 8006208:	7ffb      	ldrb	r3, [r7, #31]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3724      	adds	r7, #36	; 0x24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd90      	pop	{r4, r7, pc}

08006212 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b088      	sub	sp, #32
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d904      	bls.n	8006238 <remove_chain+0x26>
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d301      	bcc.n	800623c <remove_chain+0x2a>
 8006238:	2302      	movs	r3, #2
 800623a:	e04b      	b.n	80062d4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	69b8      	ldr	r0, [r7, #24]
 800624a:	f7ff fefb 	bl	8006044 <put_fat>
 800624e:	4603      	mov	r3, r0
 8006250:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <remove_chain+0x4a>
 8006258:	7ffb      	ldrb	r3, [r7, #31]
 800625a:	e03b      	b.n	80062d4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff fe4b 	bl	8005efa <get_fat>
 8006264:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d031      	beq.n	80062d0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <remove_chain+0x64>
 8006272:	2302      	movs	r3, #2
 8006274:	e02e      	b.n	80062d4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627c:	d101      	bne.n	8006282 <remove_chain+0x70>
 800627e:	2301      	movs	r3, #1
 8006280:	e028      	b.n	80062d4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006282:	2200      	movs	r2, #0
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	69b8      	ldr	r0, [r7, #24]
 8006288:	f7ff fedc 	bl	8006044 <put_fat>
 800628c:	4603      	mov	r3, r0
 800628e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006290:	7ffb      	ldrb	r3, [r7, #31]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <remove_chain+0x88>
 8006296:	7ffb      	ldrb	r3, [r7, #31]
 8006298:	e01c      	b.n	80062d4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	3b02      	subs	r3, #2
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d20b      	bcs.n	80062c0 <remove_chain+0xae>
			fs->free_clst++;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	791b      	ldrb	r3, [r3, #4]
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d3c6      	bcc.n	800625c <remove_chain+0x4a>
 80062ce:	e000      	b.n	80062d2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80062d0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <create_chain+0x2c>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	d31b      	bcc.n	8006340 <create_chain+0x64>
 8006308:	2301      	movs	r3, #1
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	e018      	b.n	8006340 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fdf2 	bl	8005efa <get_fat>
 8006316:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d801      	bhi.n	8006322 <create_chain+0x46>
 800631e:	2301      	movs	r3, #1
 8006320:	e070      	b.n	8006404 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006328:	d101      	bne.n	800632e <create_chain+0x52>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	e06a      	b.n	8006404 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	429a      	cmp	r2, r3
 8006336:	d201      	bcs.n	800633c <create_chain+0x60>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	e063      	b.n	8006404 <create_chain+0x128>
		scl = clst;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3301      	adds	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	429a      	cmp	r2, r3
 8006352:	d307      	bcc.n	8006364 <create_chain+0x88>
				ncl = 2;
 8006354:	2302      	movs	r3, #2
 8006356:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	429a      	cmp	r2, r3
 800635e:	d901      	bls.n	8006364 <create_chain+0x88>
 8006360:	2300      	movs	r3, #0
 8006362:	e04f      	b.n	8006404 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006364:	69f9      	ldr	r1, [r7, #28]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff fdc7 	bl	8005efa <get_fat>
 800636c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00e      	beq.n	8006392 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d003      	beq.n	8006382 <create_chain+0xa6>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006380:	d101      	bne.n	8006386 <create_chain+0xaa>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	e03e      	b.n	8006404 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	429a      	cmp	r2, r3
 800638c:	d1da      	bne.n	8006344 <create_chain+0x68>
 800638e:	2300      	movs	r3, #0
 8006390:	e038      	b.n	8006404 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006392:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f7ff fe52 	bl	8006044 <put_fat>
 80063a0:	4603      	mov	r3, r0
 80063a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <create_chain+0xe2>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d006      	beq.n	80063be <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6938      	ldr	r0, [r7, #16]
 80063b6:	f7ff fe45 	bl	8006044 <put_fat>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d116      	bne.n	80063f2 <create_chain+0x116>
		fs->last_clst = ncl;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	691a      	ldr	r2, [r3, #16]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	3b02      	subs	r3, #2
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d804      	bhi.n	80063e2 <create_chain+0x106>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	1e5a      	subs	r2, r3, #1
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	791b      	ldrb	r3, [r3, #4]
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	711a      	strb	r2, [r3, #4]
 80063f0:	e007      	b.n	8006402 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d102      	bne.n	80063fe <create_chain+0x122>
 80063f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063fc:	e000      	b.n	8006400 <create_chain+0x124>
 80063fe:	2301      	movs	r3, #1
 8006400:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006402:	69fb      	ldr	r3, [r7, #28]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	3304      	adds	r3, #4
 8006422:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	0a5b      	lsrs	r3, r3, #9
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	8952      	ldrh	r2, [r2, #10]
 800642c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006430:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1d1a      	adds	r2, r3, #4
 8006436:	613a      	str	r2, [r7, #16]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <clmt_clust+0x3a>
 8006442:	2300      	movs	r3, #0
 8006444:	e010      	b.n	8006468 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d307      	bcc.n	800645e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800645c:	e7e9      	b.n	8006432 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800645e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4413      	add	r3, r2
}
 8006468:	4618      	mov	r0, r3
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648a:	d204      	bcs.n	8006496 <dir_sdi+0x22>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006496:	2302      	movs	r3, #2
 8006498:	e063      	b.n	8006562 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <dir_sdi+0x46>
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d902      	bls.n	80064ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10c      	bne.n	80064da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	8912      	ldrh	r2, [r2, #8]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d301      	bcc.n	80064d0 <dir_sdi+0x5c>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e048      	b.n	8006562 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	61da      	str	r2, [r3, #28]
 80064d8:	e029      	b.n	800652e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	895b      	ldrh	r3, [r3, #10]
 80064de:	025b      	lsls	r3, r3, #9
 80064e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064e2:	e019      	b.n	8006518 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fd06 	bl	8005efa <get_fat>
 80064ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f6:	d101      	bne.n	80064fc <dir_sdi+0x88>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e032      	b.n	8006562 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d904      	bls.n	800650c <dir_sdi+0x98>
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	429a      	cmp	r2, r3
 800650a:	d301      	bcc.n	8006510 <dir_sdi+0x9c>
 800650c:	2302      	movs	r3, #2
 800650e:	e028      	b.n	8006562 <dir_sdi+0xee>
			ofs -= csz;
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	429a      	cmp	r2, r3
 800651e:	d2e1      	bcs.n	80064e4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006520:	6979      	ldr	r1, [r7, #20]
 8006522:	6938      	ldr	r0, [r7, #16]
 8006524:	f7ff fcca 	bl	8005ebc <clust2sect>
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <dir_sdi+0xcc>
 800653c:	2302      	movs	r3, #2
 800653e:	e010      	b.n	8006562 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	0a5b      	lsrs	r3, r3, #9
 8006548:	441a      	add	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655a:	441a      	add	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	3320      	adds	r3, #32
 8006580:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <dir_next+0x28>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006590:	d301      	bcc.n	8006596 <dir_next+0x2c>
 8006592:	2304      	movs	r3, #4
 8006594:	e0aa      	b.n	80066ec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659c:	2b00      	cmp	r3, #0
 800659e:	f040 8098 	bne.w	80066d2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10b      	bne.n	80065cc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	8912      	ldrh	r2, [r2, #8]
 80065bc:	4293      	cmp	r3, r2
 80065be:	f0c0 8088 	bcc.w	80066d2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	61da      	str	r2, [r3, #28]
 80065c8:	2304      	movs	r3, #4
 80065ca:	e08f      	b.n	80066ec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	0a5b      	lsrs	r3, r3, #9
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	8952      	ldrh	r2, [r2, #10]
 80065d4:	3a01      	subs	r2, #1
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d17a      	bne.n	80066d2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f7ff fc88 	bl	8005efa <get_fat>
 80065ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d801      	bhi.n	80065f6 <dir_next+0x8c>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e07a      	b.n	80066ec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fc:	d101      	bne.n	8006602 <dir_next+0x98>
 80065fe:	2301      	movs	r3, #1
 8006600:	e074      	b.n	80066ec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	429a      	cmp	r2, r3
 800660a:	d358      	bcc.n	80066be <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	61da      	str	r2, [r3, #28]
 8006618:	2304      	movs	r3, #4
 800661a:	e067      	b.n	80066ec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7ff fe59 	bl	80062dc <create_chain>
 800662a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <dir_next+0xcc>
 8006632:	2307      	movs	r3, #7
 8006634:	e05a      	b.n	80066ec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <dir_next+0xd6>
 800663c:	2302      	movs	r3, #2
 800663e:	e055      	b.n	80066ec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006646:	d101      	bne.n	800664c <dir_next+0xe2>
 8006648:	2301      	movs	r3, #1
 800664a:	e04f      	b.n	80066ec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7ff fb55 	bl	8005cfc <sync_window>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <dir_next+0xf2>
 8006658:	2301      	movs	r3, #1
 800665a:	e047      	b.n	80066ec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3330      	adds	r3, #48	; 0x30
 8006660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f97f 	bl	800596a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	6979      	ldr	r1, [r7, #20]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff fc22 	bl	8005ebc <clust2sect>
 8006678:	4602      	mov	r2, r0
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	62da      	str	r2, [r3, #44]	; 0x2c
 800667e:	e012      	b.n	80066a6 <dir_next+0x13c>
						fs->wflag = 1;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff fb38 	bl	8005cfc <sync_window>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <dir_next+0x12c>
 8006692:	2301      	movs	r3, #1
 8006694:	e02a      	b.n	80066ec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	3301      	adds	r3, #1
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	895b      	ldrh	r3, [r3, #10]
 80066aa:	461a      	mov	r2, r3
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d3e6      	bcc.n	8006680 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad2      	subs	r2, r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80066c4:	6979      	ldr	r1, [r7, #20]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff fbf8 	bl	8005ebc <clust2sect>
 80066cc:	4602      	mov	r2, r0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006704:	2100      	movs	r1, #0
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff feb4 	bl	8006474 <dir_sdi>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d12b      	bne.n	800676e <dir_alloc+0x7a>
		n = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4619      	mov	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fb2f 	bl	8005d84 <move_window>
 8006726:	4603      	mov	r3, r0
 8006728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d11d      	bne.n	800676c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2be5      	cmp	r3, #229	; 0xe5
 8006738:	d004      	beq.n	8006744 <dir_alloc+0x50>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d107      	bne.n	8006754 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3301      	adds	r3, #1
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d102      	bne.n	8006758 <dir_alloc+0x64>
 8006752:	e00c      	b.n	800676e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006758:	2101      	movs	r1, #1
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ff05 	bl	800656a <dir_next>
 8006760:	4603      	mov	r3, r0
 8006762:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0d7      	beq.n	800671a <dir_alloc+0x26>
 800676a:	e000      	b.n	800676e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800676c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	2b04      	cmp	r3, #4
 8006772:	d101      	bne.n	8006778 <dir_alloc+0x84>
 8006774:	2307      	movs	r3, #7
 8006776:	75fb      	strb	r3, [r7, #23]
	return res;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	331a      	adds	r3, #26
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff f847 	bl	8005824 <ld_word>
 8006796:	4603      	mov	r3, r0
 8006798:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d109      	bne.n	80067b6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	3314      	adds	r3, #20
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff f83c 	bl	8005824 <ld_word>
 80067ac:	4603      	mov	r3, r0
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80067b6:	68fb      	ldr	r3, [r7, #12]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	331a      	adds	r3, #26
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	b292      	uxth	r2, r2
 80067d4:	4611      	mov	r1, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff f85f 	bl	800589a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d109      	bne.n	80067f8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f103 0214 	add.w	r2, r3, #20
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7ff f851 	bl	800589a <st_word>
	}
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800680e:	2100      	movs	r1, #0
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fe2f 	bl	8006474 <dir_sdi>
 8006816:	4603      	mov	r3, r0
 8006818:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <dir_find+0x24>
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	e03e      	b.n	80068a2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	4619      	mov	r1, r3
 800682a:	6938      	ldr	r0, [r7, #16]
 800682c:	f7ff faaa 	bl	8005d84 <move_window>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d12f      	bne.n	800689a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <dir_find+0x4e>
 8006848:	2304      	movs	r3, #4
 800684a:	75fb      	strb	r3, [r7, #23]
 800684c:	e028      	b.n	80068a0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	330b      	adds	r3, #11
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800685a:	b2da      	uxtb	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	330b      	adds	r3, #11
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <dir_find+0x86>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a18      	ldr	r0, [r3, #32]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3324      	adds	r3, #36	; 0x24
 8006878:	220b      	movs	r2, #11
 800687a:	4619      	mov	r1, r3
 800687c:	f7ff f88f 	bl	800599e <mem_cmp>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006886:	2100      	movs	r1, #0
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fe6e 	bl	800656a <dir_next>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0c5      	beq.n	8006824 <dir_find+0x24>
 8006898:	e002      	b.n	80068a0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800689e:	bf00      	nop

	return res;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80068b8:	2101      	movs	r1, #1
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ff1a 	bl	80066f4 <dir_alloc>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d11c      	bne.n	8006904 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	4619      	mov	r1, r3
 80068d0:	68b8      	ldr	r0, [r7, #8]
 80068d2:	f7ff fa57 	bl	8005d84 <move_window>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d111      	bne.n	8006904 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	2220      	movs	r2, #32
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff f83e 	bl	800596a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a18      	ldr	r0, [r3, #32]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3324      	adds	r3, #36	; 0x24
 80068f6:	220b      	movs	r2, #11
 80068f8:	4619      	mov	r1, r3
 80068fa:	f7ff f815 	bl	8005928 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2201      	movs	r2, #1
 8006902:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3324      	adds	r3, #36	; 0x24
 8006924:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006926:	220b      	movs	r2, #11
 8006928:	2120      	movs	r1, #32
 800692a:	68b8      	ldr	r0, [r7, #8]
 800692c:	f7ff f81d 	bl	800596a <mem_set>
	si = i = 0; ni = 8;
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	2308      	movs	r3, #8
 800693a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	617a      	str	r2, [r7, #20]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800694a:	7ffb      	ldrb	r3, [r7, #31]
 800694c:	2b20      	cmp	r3, #32
 800694e:	d94e      	bls.n	80069ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006950:	7ffb      	ldrb	r3, [r7, #31]
 8006952:	2b2f      	cmp	r3, #47	; 0x2f
 8006954:	d006      	beq.n	8006964 <create_name+0x54>
 8006956:	7ffb      	ldrb	r3, [r7, #31]
 8006958:	2b5c      	cmp	r3, #92	; 0x5c
 800695a:	d110      	bne.n	800697e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800695c:	e002      	b.n	8006964 <create_name+0x54>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	3301      	adds	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b2f      	cmp	r3, #47	; 0x2f
 800696e:	d0f6      	beq.n	800695e <create_name+0x4e>
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b5c      	cmp	r3, #92	; 0x5c
 800697a:	d0f0      	beq.n	800695e <create_name+0x4e>
			break;
 800697c:	e038      	b.n	80069f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800697e:	7ffb      	ldrb	r3, [r7, #31]
 8006980:	2b2e      	cmp	r3, #46	; 0x2e
 8006982:	d003      	beq.n	800698c <create_name+0x7c>
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	429a      	cmp	r2, r3
 800698a:	d30c      	bcc.n	80069a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b0b      	cmp	r3, #11
 8006990:	d002      	beq.n	8006998 <create_name+0x88>
 8006992:	7ffb      	ldrb	r3, [r7, #31]
 8006994:	2b2e      	cmp	r3, #46	; 0x2e
 8006996:	d001      	beq.n	800699c <create_name+0x8c>
 8006998:	2306      	movs	r3, #6
 800699a:	e044      	b.n	8006a26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800699c:	2308      	movs	r3, #8
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	230b      	movs	r3, #11
 80069a2:	61bb      	str	r3, [r7, #24]
			continue;
 80069a4:	e022      	b.n	80069ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80069a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	da04      	bge.n	80069b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80069ae:	7ffb      	ldrb	r3, [r7, #31]
 80069b0:	3b80      	subs	r3, #128	; 0x80
 80069b2:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <create_name+0x120>)
 80069b4:	5cd3      	ldrb	r3, [r2, r3]
 80069b6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80069b8:	7ffb      	ldrb	r3, [r7, #31]
 80069ba:	4619      	mov	r1, r3
 80069bc:	481d      	ldr	r0, [pc, #116]	; (8006a34 <create_name+0x124>)
 80069be:	f7ff f815 	bl	80059ec <chk_chr>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <create_name+0xbc>
 80069c8:	2306      	movs	r3, #6
 80069ca:	e02c      	b.n	8006a26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80069cc:	7ffb      	ldrb	r3, [r7, #31]
 80069ce:	2b60      	cmp	r3, #96	; 0x60
 80069d0:	d905      	bls.n	80069de <create_name+0xce>
 80069d2:	7ffb      	ldrb	r3, [r7, #31]
 80069d4:	2b7a      	cmp	r3, #122	; 0x7a
 80069d6:	d802      	bhi.n	80069de <create_name+0xce>
 80069d8:	7ffb      	ldrb	r3, [r7, #31]
 80069da:	3b20      	subs	r3, #32
 80069dc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	613a      	str	r2, [r7, #16]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	4413      	add	r3, r2
 80069e8:	7ffa      	ldrb	r2, [r7, #31]
 80069ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80069ec:	e7a6      	b.n	800693c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80069ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	441a      	add	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <create_name+0xf4>
 8006a00:	2306      	movs	r3, #6
 8006a02:	e010      	b.n	8006a26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2be5      	cmp	r3, #229	; 0xe5
 8006a0a:	d102      	bne.n	8006a12 <create_name+0x102>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2205      	movs	r2, #5
 8006a10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d801      	bhi.n	8006a1c <create_name+0x10c>
 8006a18:	2204      	movs	r2, #4
 8006a1a:	e000      	b.n	8006a1e <create_name+0x10e>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	330b      	adds	r3, #11
 8006a22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	08007b6c 	.word	0x08007b6c
 8006a34:	08007af0 	.word	0x08007af0

08006a38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006a4c:	e002      	b.n	8006a54 <follow_path+0x1c>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	3301      	adds	r3, #1
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b2f      	cmp	r3, #47	; 0x2f
 8006a5a:	d0f8      	beq.n	8006a4e <follow_path+0x16>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b5c      	cmp	r3, #92	; 0x5c
 8006a62:	d0f4      	beq.n	8006a4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2200      	movs	r2, #0
 8006a68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b1f      	cmp	r3, #31
 8006a70:	d80a      	bhi.n	8006a88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2280      	movs	r2, #128	; 0x80
 8006a76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fcf9 	bl	8006474 <dir_sdi>
 8006a82:	4603      	mov	r3, r0
 8006a84:	75fb      	strb	r3, [r7, #23]
 8006a86:	e043      	b.n	8006b10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a88:	463b      	mov	r3, r7
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff ff3f 	bl	8006910 <create_name>
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d134      	bne.n	8006b06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff feaf 	bl	8006800 <dir_find>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006aac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d127      	bne.n	8006b0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d122      	bne.n	8006b0a <follow_path+0xd2>
 8006ac4:	2305      	movs	r3, #5
 8006ac6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006ac8:	e01f      	b.n	8006b0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11c      	bne.n	8006b0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	799b      	ldrb	r3, [r3, #6]
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006ae0:	2305      	movs	r3, #5
 8006ae2:	75fb      	strb	r3, [r7, #23]
 8006ae4:	e014      	b.n	8006b10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af4:	4413      	add	r3, r2
 8006af6:	4619      	mov	r1, r3
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff fe42 	bl	8006782 <ld_clust>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b04:	e7c0      	b.n	8006a88 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b06:	bf00      	nop
 8006b08:	e002      	b.n	8006b10 <follow_path+0xd8>
				break;
 8006b0a:	bf00      	nop
 8006b0c:	e000      	b.n	8006b10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b0e:	bf00      	nop
			}
		}
	}

	return res;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d031      	beq.n	8006b94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e002      	b.n	8006b3e <get_ldnumber+0x24>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d903      	bls.n	8006b4e <get_ldnumber+0x34>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b3a      	cmp	r3, #58	; 0x3a
 8006b4c:	d1f4      	bne.n	8006b38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b3a      	cmp	r3, #58	; 0x3a
 8006b54:	d11c      	bne.n	8006b90 <get_ldnumber+0x76>
			tp = *path;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	60fa      	str	r2, [r7, #12]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3b30      	subs	r3, #48	; 0x30
 8006b66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b09      	cmp	r3, #9
 8006b6c:	d80e      	bhi.n	8006b8c <get_ldnumber+0x72>
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d10a      	bne.n	8006b8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d107      	bne.n	8006b8c <get_ldnumber+0x72>
					vol = (int)i;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3301      	adds	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	e002      	b.n	8006b96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b94:	693b      	ldr	r3, [r7, #16]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
	...

08006ba4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	70da      	strb	r2, [r3, #3]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff f8e0 	bl	8005d84 <move_window>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <check_fs+0x2a>
 8006bca:	2304      	movs	r3, #4
 8006bcc:	e038      	b.n	8006c40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3330      	adds	r3, #48	; 0x30
 8006bd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fe24 	bl	8005824 <ld_word>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <check_fs+0x48>
 8006be8:	2303      	movs	r3, #3
 8006bea:	e029      	b.n	8006c40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bf2:	2be9      	cmp	r3, #233	; 0xe9
 8006bf4:	d009      	beq.n	8006c0a <check_fs+0x66>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bfc:	2beb      	cmp	r3, #235	; 0xeb
 8006bfe:	d11e      	bne.n	8006c3e <check_fs+0x9a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c06:	2b90      	cmp	r3, #144	; 0x90
 8006c08:	d119      	bne.n	8006c3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3330      	adds	r3, #48	; 0x30
 8006c0e:	3336      	adds	r3, #54	; 0x36
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fe1f 	bl	8005854 <ld_dword>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	4a0a      	ldr	r2, [pc, #40]	; (8006c48 <check_fs+0xa4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <check_fs+0x82>
 8006c22:	2300      	movs	r3, #0
 8006c24:	e00c      	b.n	8006c40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3330      	adds	r3, #48	; 0x30
 8006c2a:	3352      	adds	r3, #82	; 0x52
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe fe11 	bl	8005854 <ld_dword>
 8006c32:	4602      	mov	r2, r0
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <check_fs+0xa8>)
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d101      	bne.n	8006c3e <check_fs+0x9a>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e000      	b.n	8006c40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006c3e:	2302      	movs	r3, #2
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	00544146 	.word	0x00544146
 8006c4c:	33544146 	.word	0x33544146

08006c50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b096      	sub	sp, #88	; 0x58
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff ff58 	bl	8006b1a <get_ldnumber>
 8006c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da01      	bge.n	8006c76 <find_volume+0x26>
 8006c72:	230b      	movs	r3, #11
 8006c74:	e22e      	b.n	80070d4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c76:	4aa8      	ldr	r2, [pc, #672]	; (8006f18 <find_volume+0x2c8>)
 8006c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <find_volume+0x3a>
 8006c86:	230c      	movs	r3, #12
 8006c88:	e224      	b.n	80070d4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	f023 0301 	bic.w	r3, r3, #1
 8006c96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01a      	beq.n	8006cd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fd1f 	bl	80056e8 <disk_status>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10c      	bne.n	8006cd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <find_volume+0x82>
 8006cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006cce:	230a      	movs	r3, #10
 8006cd0:	e200      	b.n	80070d4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e1fe      	b.n	80070d4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fd17 	bl	800571c <disk_initialize>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d00:	2303      	movs	r3, #3
 8006d02:	e1e7      	b.n	80070d4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <find_volume+0xca>
 8006d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d16:	230a      	movs	r3, #10
 8006d18:	e1dc      	b.n	80070d4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d22:	f7ff ff3f 	bl	8006ba4 <check_fs>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d14b      	bne.n	8006dcc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d34:	2300      	movs	r3, #0
 8006d36:	643b      	str	r3, [r7, #64]	; 0x40
 8006d38:	e01f      	b.n	8006d7a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d48:	4413      	add	r3, r2
 8006d4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	3304      	adds	r3, #4
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d006      	beq.n	8006d64 <find_volume+0x114>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	3308      	adds	r3, #8
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fd7a 	bl	8005854 <ld_dword>
 8006d60:	4602      	mov	r2, r0
 8006d62:	e000      	b.n	8006d66 <find_volume+0x116>
 8006d64:	2200      	movs	r2, #0
 8006d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006d6e:	440b      	add	r3, r1
 8006d70:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d76:	3301      	adds	r3, #1
 8006d78:	643b      	str	r3, [r7, #64]	; 0x40
 8006d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d9dc      	bls.n	8006d3a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006d80:	2300      	movs	r3, #0
 8006d82:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <find_volume+0x140>
 8006d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d98:	4413      	add	r3, r2
 8006d9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006d9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <find_volume+0x162>
 8006da6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006da8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006daa:	f7ff fefb 	bl	8006ba4 <check_fs>
 8006dae:	4603      	mov	r3, r0
 8006db0:	e000      	b.n	8006db4 <find_volume+0x164>
 8006db2:	2303      	movs	r3, #3
 8006db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d905      	bls.n	8006dcc <find_volume+0x17c>
 8006dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d9e1      	bls.n	8006d90 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d101      	bne.n	8006dd8 <find_volume+0x188>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e17d      	b.n	80070d4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d901      	bls.n	8006de4 <find_volume+0x194>
 8006de0:	230d      	movs	r3, #13
 8006de2:	e177      	b.n	80070d4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	3330      	adds	r3, #48	; 0x30
 8006de8:	330b      	adds	r3, #11
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe fd1a 	bl	8005824 <ld_word>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df6:	d001      	beq.n	8006dfc <find_volume+0x1ac>
 8006df8:	230d      	movs	r3, #13
 8006dfa:	e16b      	b.n	80070d4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	3330      	adds	r3, #48	; 0x30
 8006e00:	3316      	adds	r3, #22
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fd0e 	bl	8005824 <ld_word>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <find_volume+0x1d0>
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	3330      	adds	r3, #48	; 0x30
 8006e16:	3324      	adds	r3, #36	; 0x24
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fd1b 	bl	8005854 <ld_dword>
 8006e1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e24:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	789b      	ldrb	r3, [r3, #2]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d005      	beq.n	8006e44 <find_volume+0x1f4>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	789b      	ldrb	r3, [r3, #2]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d001      	beq.n	8006e44 <find_volume+0x1f4>
 8006e40:	230d      	movs	r3, #13
 8006e42:	e147      	b.n	80070d4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	789b      	ldrb	r3, [r3, #2]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
 8006e50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	895b      	ldrh	r3, [r3, #10]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <find_volume+0x228>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	895b      	ldrh	r3, [r3, #10]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	895b      	ldrh	r3, [r3, #10]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <find_volume+0x22c>
 8006e78:	230d      	movs	r3, #13
 8006e7a:	e12b      	b.n	80070d4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	3330      	adds	r3, #48	; 0x30
 8006e80:	3311      	adds	r3, #17
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fcce 	bl	8005824 <ld_word>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	891b      	ldrh	r3, [r3, #8]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <find_volume+0x252>
 8006e9e:	230d      	movs	r3, #13
 8006ea0:	e118      	b.n	80070d4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	3330      	adds	r3, #48	; 0x30
 8006ea6:	3313      	adds	r3, #19
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fcbb 	bl	8005824 <ld_word>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <find_volume+0x276>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	3330      	adds	r3, #48	; 0x30
 8006ebc:	3320      	adds	r3, #32
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fcc8 	bl	8005854 <ld_dword>
 8006ec4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	3330      	adds	r3, #48	; 0x30
 8006eca:	330e      	adds	r3, #14
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fca9 	bl	8005824 <ld_word>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ed6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <find_volume+0x290>
 8006edc:	230d      	movs	r3, #13
 8006ede:	e0f9      	b.n	80070d4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ee0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee4:	4413      	add	r3, r2
 8006ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ee8:	8912      	ldrh	r2, [r2, #8]
 8006eea:	0912      	lsrs	r2, r2, #4
 8006eec:	b292      	uxth	r2, r2
 8006eee:	4413      	add	r3, r2
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d201      	bcs.n	8006efe <find_volume+0x2ae>
 8006efa:	230d      	movs	r3, #13
 8006efc:	e0ea      	b.n	80070d4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f06:	8952      	ldrh	r2, [r2, #10]
 8006f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d103      	bne.n	8006f1c <find_volume+0x2cc>
 8006f14:	230d      	movs	r3, #13
 8006f16:	e0dd      	b.n	80070d4 <find_volume+0x484>
 8006f18:	200007d0 	.word	0x200007d0
		fmt = FS_FAT32;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d802      	bhi.n	8006f32 <find_volume+0x2e2>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d802      	bhi.n	8006f42 <find_volume+0x2f2>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	1c9a      	adds	r2, r3, #2
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f4e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006f50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f54:	441a      	add	r2, r3
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006f5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	441a      	add	r2, r3
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006f64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d11e      	bne.n	8006faa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	3330      	adds	r3, #48	; 0x30
 8006f70:	332a      	adds	r3, #42	; 0x2a
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fc56 	bl	8005824 <ld_word>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <find_volume+0x332>
 8006f7e:	230d      	movs	r3, #13
 8006f80:	e0a8      	b.n	80070d4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	891b      	ldrh	r3, [r3, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <find_volume+0x33e>
 8006f8a:	230d      	movs	r3, #13
 8006f8c:	e0a2      	b.n	80070d4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	3330      	adds	r3, #48	; 0x30
 8006f92:	332c      	adds	r3, #44	; 0x2c
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fc5d 	bl	8005854 <ld_dword>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa8:	e01f      	b.n	8006fea <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	891b      	ldrh	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <find_volume+0x366>
 8006fb2:	230d      	movs	r3, #13
 8006fb4:	e08e      	b.n	80070d4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbc:	441a      	add	r2, r3
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d103      	bne.n	8006fd2 <find_volume+0x382>
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	e00a      	b.n	8006fe8 <find_volume+0x398>
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	695a      	ldr	r2, [r3, #20]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	4413      	add	r3, r2
 8006fdc:	085a      	lsrs	r2, r3, #1
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006fe8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006ff4:	0a5b      	lsrs	r3, r3, #9
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d201      	bcs.n	8006ffe <find_volume+0x3ae>
 8006ffa:	230d      	movs	r3, #13
 8006ffc:	e06a      	b.n	80070d4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2280      	movs	r2, #128	; 0x80
 8007012:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007018:	2b03      	cmp	r3, #3
 800701a:	d149      	bne.n	80070b0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	3330      	adds	r3, #48	; 0x30
 8007020:	3330      	adds	r3, #48	; 0x30
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fbfe 	bl	8005824 <ld_word>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d140      	bne.n	80070b0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800702e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007030:	3301      	adds	r3, #1
 8007032:	4619      	mov	r1, r3
 8007034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007036:	f7fe fea5 	bl	8005d84 <move_window>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d137      	bne.n	80070b0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	2200      	movs	r2, #0
 8007044:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	3330      	adds	r3, #48	; 0x30
 800704a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fbe8 	bl	8005824 <ld_word>
 8007054:	4603      	mov	r3, r0
 8007056:	461a      	mov	r2, r3
 8007058:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800705c:	429a      	cmp	r2, r3
 800705e:	d127      	bne.n	80070b0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	3330      	adds	r3, #48	; 0x30
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fbf5 	bl	8005854 <ld_dword>
 800706a:	4602      	mov	r2, r0
 800706c:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <find_volume+0x48c>)
 800706e:	429a      	cmp	r2, r3
 8007070:	d11e      	bne.n	80070b0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	3330      	adds	r3, #48	; 0x30
 8007076:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fbea 	bl	8005854 <ld_dword>
 8007080:	4602      	mov	r2, r0
 8007082:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <find_volume+0x490>)
 8007084:	429a      	cmp	r2, r3
 8007086:	d113      	bne.n	80070b0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	3330      	adds	r3, #48	; 0x30
 800708c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fbdf 	bl	8005854 <ld_dword>
 8007096:	4602      	mov	r2, r0
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	3330      	adds	r3, #48	; 0x30
 80070a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe fbd5 	bl	8005854 <ld_dword>
 80070aa:	4602      	mov	r2, r0
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80070b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <find_volume+0x494>)
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <find_volume+0x494>)
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <find_volume+0x494>)
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80070cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070ce:	f7fe fdf1 	bl	8005cb4 <clear_lock>
#endif
	return FR_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3758      	adds	r7, #88	; 0x58
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	41615252 	.word	0x41615252
 80070e0:	61417272 	.word	0x61417272
 80070e4:	200007d4 	.word	0x200007d4

080070e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80070f2:	2309      	movs	r3, #9
 80070f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01c      	beq.n	8007136 <validate+0x4e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d018      	beq.n	8007136 <validate+0x4e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d013      	beq.n	8007136 <validate+0x4e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	889a      	ldrh	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	88db      	ldrh	r3, [r3, #6]
 8007118:	429a      	cmp	r2, r3
 800711a:	d10c      	bne.n	8007136 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fae0 	bl	80056e8 <disk_status>
 8007128:	4603      	mov	r3, r0
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <validate+0x4e>
			res = FR_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <validate+0x5a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	e000      	b.n	8007144 <validate+0x5c>
 8007142:	2300      	movs	r3, #0
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	6013      	str	r3, [r2, #0]
	return res;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007166:	f107 0310 	add.w	r3, r7, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fcd5 	bl	8006b1a <get_ldnumber>
 8007170:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da01      	bge.n	800717c <f_mount+0x28>
 8007178:	230b      	movs	r3, #11
 800717a:	e02b      	b.n	80071d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800717c:	4a17      	ldr	r2, [pc, #92]	; (80071dc <f_mount+0x88>)
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007184:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d005      	beq.n	8007198 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800718c:	69b8      	ldr	r0, [r7, #24]
 800718e:	f7fe fd91 	bl	8005cb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	490d      	ldr	r1, [pc, #52]	; (80071dc <f_mount+0x88>)
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <f_mount+0x66>
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d001      	beq.n	80071be <f_mount+0x6a>
 80071ba:	2300      	movs	r3, #0
 80071bc:	e00a      	b.n	80071d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80071be:	f107 010c 	add.w	r1, r7, #12
 80071c2:	f107 0308 	add.w	r3, r7, #8
 80071c6:	2200      	movs	r2, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fd41 	bl	8006c50 <find_volume>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200007d0 	.word	0x200007d0

080071e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b098      	sub	sp, #96	; 0x60
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <f_open+0x18>
 80071f4:	2309      	movs	r3, #9
 80071f6:	e1ad      	b.n	8007554 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007200:	79fa      	ldrb	r2, [r7, #7]
 8007202:	f107 0110 	add.w	r1, r7, #16
 8007206:	f107 0308 	add.w	r3, r7, #8
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fd20 	bl	8006c50 <find_volume>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 8191 	bne.w	8007542 <f_open+0x362>
		dj.obj.fs = fs;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	f107 0314 	add.w	r3, r7, #20
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fc03 	bl	8006a38 <follow_path>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800723c:	2b00      	cmp	r3, #0
 800723e:	d11a      	bne.n	8007276 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007240:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007244:	b25b      	sxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	da03      	bge.n	8007252 <f_open+0x72>
				res = FR_INVALID_NAME;
 800724a:	2306      	movs	r3, #6
 800724c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007250:	e011      	b.n	8007276 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf14      	ite	ne
 800725c:	2301      	movne	r3, #1
 800725e:	2300      	moveq	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fbda 	bl	8005a24 <chk_lock>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	f003 031c 	and.w	r3, r3, #28
 800727c:	2b00      	cmp	r3, #0
 800727e:	d07f      	beq.n	8007380 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007284:	2b00      	cmp	r3, #0
 8007286:	d017      	beq.n	80072b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800728c:	2b04      	cmp	r3, #4
 800728e:	d10e      	bne.n	80072ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007290:	f7fe fc24 	bl	8005adc <enq_lock>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <f_open+0xc8>
 800729a:	f107 0314 	add.w	r3, r7, #20
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fb03 	bl	80068aa <dir_register>
 80072a4:	4603      	mov	r3, r0
 80072a6:	e000      	b.n	80072aa <f_open+0xca>
 80072a8:	2312      	movs	r3, #18
 80072aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	f043 0308 	orr.w	r3, r3, #8
 80072b4:	71fb      	strb	r3, [r7, #7]
 80072b6:	e010      	b.n	80072da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80072b8:	7ebb      	ldrb	r3, [r7, #26]
 80072ba:	f003 0311 	and.w	r3, r3, #17
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <f_open+0xea>
					res = FR_DENIED;
 80072c2:	2307      	movs	r3, #7
 80072c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072c8:	e007      	b.n	80072da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <f_open+0xfa>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80072da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d168      	bne.n	80073b4 <f_open+0x1d4>
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d063      	beq.n	80073b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80072ec:	f7fe f99e 	bl	800562c <get_fattime>
 80072f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	330e      	adds	r3, #14
 80072f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fae9 	bl	80058d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	3316      	adds	r3, #22
 8007302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe fae3 	bl	80058d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	330b      	adds	r3, #11
 800730e:	2220      	movs	r2, #32
 8007310:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fa32 	bl	8006782 <ld_clust>
 800731e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007324:	2200      	movs	r2, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff fa4a 	bl	80067c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732e:	331c      	adds	r3, #28
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe facc 	bl	80058d0 <st_dword>
					fs->wflag = 1;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2201      	movs	r2, #1
 800733c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d037      	beq.n	80073b4 <f_open+0x1d4>
						dw = fs->winsect;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	2200      	movs	r2, #0
 8007350:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe ff5d 	bl	8006212 <remove_chain>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800735e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007362:	2b00      	cmp	r3, #0
 8007364:	d126      	bne.n	80073b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fd0a 	bl	8005d84 <move_window>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800737a:	3a01      	subs	r2, #1
 800737c:	60da      	str	r2, [r3, #12]
 800737e:	e019      	b.n	80073b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007384:	2b00      	cmp	r3, #0
 8007386:	d115      	bne.n	80073b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007388:	7ebb      	ldrb	r3, [r7, #26]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007392:	2304      	movs	r3, #4
 8007394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007398:	e00c      	b.n	80073b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <f_open+0x1d4>
 80073a4:	7ebb      	ldrb	r3, [r7, #26]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <f_open+0x1d4>
						res = FR_DENIED;
 80073ae:	2307      	movs	r3, #7
 80073b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80073b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d128      	bne.n	800740e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80073d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bf14      	ite	ne
 80073e6:	2301      	movne	r3, #1
 80073e8:	2300      	moveq	r3, #0
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	f107 0314 	add.w	r3, r7, #20
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fb93 	bl	8005b20 <inc_lock>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <f_open+0x22e>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800740e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007412:	2b00      	cmp	r3, #0
 8007414:	f040 8095 	bne.w	8007542 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff f9af 	bl	8006782 <ld_clust>
 8007424:	4602      	mov	r2, r0
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	331c      	adds	r3, #28
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fa10 	bl	8005854 <ld_dword>
 8007434:	4602      	mov	r2, r0
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	88da      	ldrh	r2, [r3, #6]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	79fa      	ldrb	r2, [r7, #7]
 8007452:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3330      	adds	r3, #48	; 0x30
 800746a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fa7a 	bl	800596a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d060      	beq.n	8007542 <f_open+0x362>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d05c      	beq.n	8007542 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	895b      	ldrh	r3, [r3, #10]
 8007494:	025b      	lsls	r3, r3, #9
 8007496:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	657b      	str	r3, [r7, #84]	; 0x54
 80074a4:	e016      	b.n	80074d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fd25 	bl	8005efa <get_fat>
 80074b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80074b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d802      	bhi.n	80074be <f_open+0x2de>
 80074b8:	2302      	movs	r3, #2
 80074ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80074be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c4:	d102      	bne.n	80074cc <f_open+0x2ec>
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	657b      	str	r3, [r7, #84]	; 0x54
 80074d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <f_open+0x304>
 80074dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d8e0      	bhi.n	80074a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80074ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d127      	bne.n	8007542 <f_open+0x362>
 80074f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d022      	beq.n	8007542 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fcdb 	bl	8005ebc <clust2sect>
 8007506:	6478      	str	r0, [r7, #68]	; 0x44
 8007508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <f_open+0x336>
						res = FR_INT_ERR;
 800750e:	2302      	movs	r3, #2
 8007510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007514:	e015      	b.n	8007542 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007518:	0a5a      	lsrs	r2, r3, #9
 800751a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751c:	441a      	add	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	7858      	ldrb	r0, [r3, #1]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	2301      	movs	r3, #1
 8007532:	f7fe f919 	bl	8005768 <disk_read>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <f_open+0x362>
 800753c:	2301      	movs	r3, #1
 800753e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <f_open+0x370>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007554:	4618      	mov	r0, r3
 8007556:	3760      	adds	r7, #96	; 0x60
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08c      	sub	sp, #48	; 0x30
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f107 0210 	add.w	r2, r7, #16
 800757a:	4611      	mov	r1, r2
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fdb3 	bl	80070e8 <validate>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800758c:	2b00      	cmp	r3, #0
 800758e:	d107      	bne.n	80075a0 <f_write+0x44>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	7d5b      	ldrb	r3, [r3, #21]
 8007594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <f_write+0x4a>
 80075a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075a4:	e14b      	b.n	800783e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	7d1b      	ldrb	r3, [r3, #20]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <f_write+0x5a>
 80075b2:	2307      	movs	r3, #7
 80075b4:	e143      	b.n	800783e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	441a      	add	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	f080 812d 	bcs.w	8007822 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	43db      	mvns	r3, r3
 80075ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80075d0:	e127      	b.n	8007822 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f040 80e3 	bne.w	80077a6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	0a5b      	lsrs	r3, r3, #9
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	8952      	ldrh	r2, [r2, #10]
 80075ea:	3a01      	subs	r2, #1
 80075ec:	4013      	ands	r3, r2
 80075ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d143      	bne.n	800767e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10c      	bne.n	8007618 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d11a      	bne.n	8007640 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fe64 	bl	80062dc <create_chain>
 8007614:	62b8      	str	r0, [r7, #40]	; 0x28
 8007616:	e013      	b.n	8007640 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d007      	beq.n	8007630 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	4619      	mov	r1, r3
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7fe fef0 	bl	800640c <clmt_clust>
 800762c:	62b8      	str	r0, [r7, #40]	; 0x28
 800762e:	e007      	b.n	8007640 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fe fe4f 	bl	80062dc <create_chain>
 800763e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 80f2 	beq.w	800782c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	2b01      	cmp	r3, #1
 800764c:	d104      	bne.n	8007658 <f_write+0xfc>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2202      	movs	r2, #2
 8007652:	755a      	strb	r2, [r3, #21]
 8007654:	2302      	movs	r3, #2
 8007656:	e0f2      	b.n	800783e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800765e:	d104      	bne.n	800766a <f_write+0x10e>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	755a      	strb	r2, [r3, #21]
 8007666:	2301      	movs	r3, #1
 8007668:	e0e9      	b.n	800783e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800766e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <f_write+0x122>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800767c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	7d1b      	ldrb	r3, [r3, #20]
 8007682:	b25b      	sxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	da18      	bge.n	80076ba <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	7858      	ldrb	r0, [r3, #1]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a1a      	ldr	r2, [r3, #32]
 8007696:	2301      	movs	r3, #1
 8007698:	f7fe f886 	bl	80057a8 <disk_write>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <f_write+0x150>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	755a      	strb	r2, [r3, #21]
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0c8      	b.n	800783e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	7d1b      	ldrb	r3, [r3, #20]
 80076b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fe fbfa 	bl	8005ebc <clust2sect>
 80076c8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <f_write+0x17e>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2202      	movs	r2, #2
 80076d4:	755a      	strb	r2, [r3, #21]
 80076d6:	2302      	movs	r3, #2
 80076d8:	e0b1      	b.n	800783e <f_write+0x2e2>
			sect += csect;
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4413      	add	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	0a5b      	lsrs	r3, r3, #9
 80076e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d03c      	beq.n	8007768 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	4413      	add	r3, r2
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	8952      	ldrh	r2, [r2, #10]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d905      	bls.n	8007708 <f_write+0x1ac>
					cc = fs->csize - csect;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	895b      	ldrh	r3, [r3, #10]
 8007700:	461a      	mov	r2, r3
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	7858      	ldrb	r0, [r3, #1]
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	f7fe f849 	bl	80057a8 <disk_write>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <f_write+0x1ca>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	755a      	strb	r2, [r3, #21]
 8007722:	2301      	movs	r3, #1
 8007724:	e08b      	b.n	800783e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	6a3a      	ldr	r2, [r7, #32]
 8007730:	429a      	cmp	r2, r3
 8007732:	d915      	bls.n	8007760 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a1a      	ldr	r2, [r3, #32]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	025b      	lsls	r3, r3, #9
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800774c:	4619      	mov	r1, r3
 800774e:	f7fe f8eb 	bl	8005928 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	7d1b      	ldrb	r3, [r3, #20]
 8007756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775a:	b2da      	uxtb	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	025b      	lsls	r3, r3, #9
 8007764:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007766:	e03f      	b.n	80077e8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	429a      	cmp	r2, r3
 8007770:	d016      	beq.n	80077a0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800777a:	429a      	cmp	r2, r3
 800777c:	d210      	bcs.n	80077a0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	7858      	ldrb	r0, [r3, #1]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007788:	2301      	movs	r3, #1
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	f7fd ffec 	bl	8005768 <disk_read>
 8007790:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	755a      	strb	r2, [r3, #21]
 800779c:	2301      	movs	r3, #1
 800779e:	e04e      	b.n	800783e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d901      	bls.n	80077c0 <f_write+0x264>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	4413      	add	r3, r2
 80077d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d2:	69f9      	ldr	r1, [r7, #28]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe f8a7 	bl	8005928 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	7d1b      	ldrb	r3, [r3, #20]
 80077de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	4413      	add	r3, r2
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	441a      	add	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	619a      	str	r2, [r3, #24]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	429a      	cmp	r2, r3
 8007806:	bf38      	it	cc
 8007808:	461a      	movcc	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	441a      	add	r2, r3
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f47f aed4 	bne.w	80075d2 <f_write+0x76>
 800782a:	e000      	b.n	800782e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800782c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	7d1b      	ldrb	r3, [r3, #20]
 8007832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007836:	b2da      	uxtb	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3730      	adds	r7, #48	; 0x30
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f107 0208 	add.w	r2, r7, #8
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fc46 	bl	80070e8 <validate>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d168      	bne.n	8007938 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7d1b      	ldrb	r3, [r3, #20]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d062      	beq.n	8007938 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7d1b      	ldrb	r3, [r3, #20]
 8007876:	b25b      	sxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	da15      	bge.n	80078a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	7858      	ldrb	r0, [r3, #1]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	2301      	movs	r3, #1
 800788c:	f7fd ff8c 	bl	80057a8 <disk_write>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <f_sync+0x54>
 8007896:	2301      	movs	r3, #1
 8007898:	e04f      	b.n	800793a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7d1b      	ldrb	r3, [r3, #20]
 800789e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80078a8:	f7fd fec0 	bl	800562c <get_fattime>
 80078ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f7fe fa64 	bl	8005d84 <move_window>
 80078bc:	4603      	mov	r3, r0
 80078be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d138      	bne.n	8007938 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	330b      	adds	r3, #11
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	330b      	adds	r3, #11
 80078d6:	f042 0220 	orr.w	r2, r2, #32
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	461a      	mov	r2, r3
 80078e8:	68f9      	ldr	r1, [r7, #12]
 80078ea:	f7fe ff69 	bl	80067c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f103 021c 	add.w	r2, r3, #28
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fd ffe8 	bl	80058d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3316      	adds	r3, #22
 8007904:	6939      	ldr	r1, [r7, #16]
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd ffe2 	bl	80058d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3312      	adds	r3, #18
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f7fd ffc1 	bl	800589a <st_word>
					fs->wflag = 1;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2201      	movs	r2, #1
 800791c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe fa5d 	bl	8005de0 <sync_fs>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	7d1b      	ldrb	r3, [r3, #20]
 800792e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007932:	b2da      	uxtb	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007938:	7dfb      	ldrb	r3, [r7, #23]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff ff7b 	bl	8007846 <f_sync>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d118      	bne.n	800798c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f107 0208 	add.w	r2, r7, #8
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fbc0 	bl	80070e8 <validate>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10c      	bne.n	800798c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f960 	bl	8005c3c <dec_lock>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80079a6:	2301      	movs	r3, #1
 80079a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80079ae:	4b1f      	ldr	r3, [pc, #124]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079b0:	7a5b      	ldrb	r3, [r3, #9]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d131      	bne.n	8007a1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80079b8:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079ba:	7a5b      	ldrb	r3, [r3, #9]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079c2:	2100      	movs	r1, #0
 80079c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80079c6:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079c8:	7a5b      	ldrb	r3, [r3, #9]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80079d6:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079d8:	7a5b      	ldrb	r3, [r3, #9]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079e0:	4413      	add	r3, r2
 80079e2:	79fa      	ldrb	r2, [r7, #7]
 80079e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80079e6:	4b11      	ldr	r3, [pc, #68]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079e8:	7a5b      	ldrb	r3, [r3, #9]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	b2d1      	uxtb	r1, r2
 80079f0:	4a0e      	ldr	r2, [pc, #56]	; (8007a2c <FATFS_LinkDriverEx+0x94>)
 80079f2:	7251      	strb	r1, [r2, #9]
 80079f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079f6:	7dbb      	ldrb	r3, [r7, #22]
 80079f8:	3330      	adds	r3, #48	; 0x30
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3301      	adds	r3, #1
 8007a04:	223a      	movs	r2, #58	; 0x3a
 8007a06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	3302      	adds	r3, #2
 8007a0c:	222f      	movs	r2, #47	; 0x2f
 8007a0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	3303      	adds	r3, #3
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	200007f8 	.word	0x200007f8

08007a30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff ffaa 	bl	8007998 <FATFS_LinkDriverEx>
 8007a44:	4603      	mov	r3, r0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4e0d      	ldr	r6, [pc, #52]	; (8007a88 <__libc_init_array+0x38>)
 8007a54:	4c0d      	ldr	r4, [pc, #52]	; (8007a8c <__libc_init_array+0x3c>)
 8007a56:	1ba4      	subs	r4, r4, r6
 8007a58:	10a4      	asrs	r4, r4, #2
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	42a5      	cmp	r5, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	4e0b      	ldr	r6, [pc, #44]	; (8007a90 <__libc_init_array+0x40>)
 8007a62:	4c0c      	ldr	r4, [pc, #48]	; (8007a94 <__libc_init_array+0x44>)
 8007a64:	f000 f820 	bl	8007aa8 <_init>
 8007a68:	1ba4      	subs	r4, r4, r6
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	2500      	movs	r5, #0
 8007a6e:	42a5      	cmp	r5, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a78:	4798      	blx	r3
 8007a7a:	3501      	adds	r5, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a82:	4798      	blx	r3
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	08007bf4 	.word	0x08007bf4
 8007a8c:	08007bf4 	.word	0x08007bf4
 8007a90:	08007bf4 	.word	0x08007bf4
 8007a94:	08007bf8 	.word	0x08007bf8

08007a98 <memset>:
 8007a98:	4402      	add	r2, r0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d100      	bne.n	8007aa2 <memset+0xa>
 8007aa0:	4770      	bx	lr
 8007aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa6:	e7f9      	b.n	8007a9c <memset+0x4>

08007aa8 <_init>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_fini>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr
