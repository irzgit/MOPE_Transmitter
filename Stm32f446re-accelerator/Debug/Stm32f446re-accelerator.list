
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00006c4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed4  08006ed4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006edc  08006edc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001394  20000088  08006f6c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000141c  08006f6c  0002141c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014442  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d8b  00000000  00000000  000344fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00037288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  00037f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232f3  00000000  00000000  00038b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca74  00000000  00000000  0005be43  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cba29  00000000  00000000  000688b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001342e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  0013435c  2**2
=======
  1 .text         000075ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007834  08007834  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800783c  0800783c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000088  080078cc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014dc  080078cc  000214dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018391  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000320c  00000000  00000000  00038449  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  0003b658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  0003c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024127  00000000  00000000  0003d980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f55a  00000000  00000000  00061aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d33f1  00000000  00000000  00071001  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001443f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd8  00000000  00000000  00144470  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001f0:	08006e04 	.word	0x08006e04
=======
 80001f0:	08007764 	.word	0x08007764
>>>>>>> Stashed changes

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
<<<<<<< Updated upstream
 800020c:	08006e04 	.word	0x08006e04
=======
 800020c:	08007764 	.word	0x08007764
>>>>>>> Stashed changes

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
<<<<<<< Updated upstream
 80005b8:	f001 fd98 	bl	80020ec <SPIWrite>
=======
 80005b8:	f001 feec 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80005c8:	f001 fd90 	bl	80020ec <SPIWrite>
=======
 80005c8:	f001 fee4 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80005d8:	f001 fd88 	bl	80020ec <SPIWrite>
=======
 80005d8:	f001 fedc 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80005e8:	f001 fd80 	bl	80020ec <SPIWrite>
=======
 80005e8:	f001 fed4 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
<<<<<<< Updated upstream
 800060c:	f001 fd92 	bl	8002134 <BurstWrite>
=======
 800060c:	f001 fee6 	bl	80023dc <BurstWrite>
>>>>>>> Stashed changes

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
 8000618:	08006e40 	.word	0x08006e40
=======
 8000618:	080077a0 	.word	0x080077a0
>>>>>>> Stashed changes

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
<<<<<<< Updated upstream
 8000630:	f001 fd5c 	bl	80020ec <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f001 fd58 	bl	80020ec <SPIWrite>
=======
 8000630:	f001 feb0 	bl	8002394 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f001 feac 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
 8000644:	08006e4c 	.word	0x08006e4c
=======
 8000644:	080077ac 	.word	0x080077ac
>>>>>>> Stashed changes

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
<<<<<<< Updated upstream
 800065c:	f001 fd46 	bl	80020ec <SPIWrite>
=======
 800065c:	f001 fe9a 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
 8000668:	08006e50 	.word	0x08006e50
=======
 8000668:	080077b0 	.word	0x080077b0
>>>>>>> Stashed changes

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
<<<<<<< Updated upstream
 8000680:	f001 fd34 	bl	80020ec <SPIWrite>
=======
 8000680:	f001 fe88 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
 800068c:	08006e54 	.word	0x08006e54
=======
 800068c:	080077b4 	.word	0x080077b4
>>>>>>> Stashed changes

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C);
	SPIWrite(LR_RegModemConfig1,0x8E);
 80006a2:	218e      	movs	r1, #142	; 0x8e
 80006a4:	201d      	movs	r0, #29
<<<<<<< Updated upstream
 80006a6:	f001 fd21 	bl	80020ec <SPIWrite>
=======
 80006a6:	f001 fe75 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
<<<<<<< Updated upstream
 80006c8:	f001 fd10 	bl	80020ec <SPIWrite>
=======
 80006c8:	f001 fe64 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
<<<<<<< Updated upstream
 80006d4:	f001 fd0a 	bl	80020ec <SPIWrite>
=======
 80006d4:	f001 fe5e 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
<<<<<<< Updated upstream
 80006f6:	f001 fcf9 	bl	80020ec <SPIWrite>
=======
 80006f6:	f001 fe4d 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
<<<<<<< Updated upstream
 8000702:	f001 fcf3 	bl	80020ec <SPIWrite>
=======
 8000702:	f001 fe47 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	460a      	mov	r2, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	b2da      	uxtb	r2, r3
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2040      	movs	r0, #64	; 0x40
<<<<<<< Updated upstream
 8000732:	f001 fcdb 	bl	80020ec <SPIWrite>
=======
 8000732:	f001 fe2f 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000742:	21f7      	movs	r1, #247	; 0xf7
 8000744:	2011      	movs	r0, #17
<<<<<<< Updated upstream
 8000746:	f001 fcd1 	bl	80020ec <SPIWrite>
=======
 8000746:	f001 fe25 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4619      	mov	r1, r3
 800075c:	2022      	movs	r0, #34	; 0x22
<<<<<<< Updated upstream
 800075e:	f001 fcc5 	bl	80020ec <SPIWrite>
=======
 800075e:	f001 fe19 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
<<<<<<< Updated upstream
 800077a:	f001 fcb7 	bl	80020ec <SPIWrite>
=======
 800077a:	f001 fe0b 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4619      	mov	r1, r3
 8000794:	200d      	movs	r0, #13
<<<<<<< Updated upstream
 8000796:	f001 fca9 	bl	80020ec <SPIWrite>
=======
 8000796:	f001 fdfd 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80007a6:	2183      	movs	r1, #131	; 0x83
 80007a8:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80007aa:	f001 fc9f 	bl	80020ec <SPIWrite>
=======
 80007aa:	f001 fdf3 	bl	8002394 <SPIWrite>
>>>>>>> Stashed changes
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	2000      	movs	r0, #0
<<<<<<< Updated upstream
 80007c6:	f001 fcb5 	bl	8002134 <BurstWrite>
=======
 80007c6:	f001 fe09 	bl	80023dc <BurstWrite>
>>>>>>> Stashed changes
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007d6:	f7ff fefb 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007da:	f7ff ff01 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff06 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff19 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff2c 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff3b 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	2007      	movs	r0, #7
 80007fc:	f7ff ff48 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000800:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000804:	2101      	movs	r1, #1
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ff53 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 800080c:	2008      	movs	r0, #8
 800080e:	f7ff ff67 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000812:	f7ff fed5 	bl	80005c0 <Rf96_Standby>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1(1,0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff74 	bl	800070e <Rf96_PinOut_Di0_Di1>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000826:	f7ff fec3 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082a:	f7ff ff88 	bl	800073e <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 800082e:	201b      	movs	r0, #27
 8000830:	f7ff ff8d 	bl	800074e <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	f7ff ff98 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ffa3 	bl	8000786 <Rf96_FIFO_point>

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffac 	bl	80007b2 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800085a:	f7ff ffa2 	bl	80007a2 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <PacketToRadio>:
uint8_t accelSelect[3][5] = {{0x68, 0x04, 0x32, 0x04, 0x3a},{0x68, 0x04, 0x64, 0x04, 0x6c},{0x68, 0x04, 0x96, 0x04, 0x9e}};



void PacketToRadio(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e01c      	b.n	80008ae <PacketToRadio+0x46>
	{
		for(uint8_t i=0;i<9;i++)
 8000874:	2300      	movs	r3, #0
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	e013      	b.n	80008a2 <PacketToRadio+0x3a>
		   RadioBuff[i+j*9]=packageCut[j][i];
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	79b8      	ldrb	r0, [r7, #6]
 800087e:	79bc      	ldrb	r4, [r7, #6]
 8000880:	79f9      	ldrb	r1, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	18e1      	adds	r1, r4, r3
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <PacketToRadio+0x6c>)
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	4423      	add	r3, r4
 8000894:	4403      	add	r3, r0
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <PacketToRadio+0x70>)
 800089a:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<9;i++)
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	3301      	adds	r3, #1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d9e8      	bls.n	800087a <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3301      	adds	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d9df      	bls.n	8000874 <PacketToRadio+0xc>
	}
	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f7ff ff58 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	f7ff ff63 	bl	8000786 <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 80008c0:	f7ff fe76 	bl	80005b0 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 80008c4:	211b      	movs	r1, #27
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <PacketToRadio+0x70>)
 80008c8:	f7ff ffbc 	bl	8000844 <Rf96_LoRaTxPacket>

}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	200000d0 	.word	0x200000d0
<<<<<<< Updated upstream
 80008d8:	20000930 	.word	0x20000930
=======
 80008d8:	200009b0 	.word	0x200009b0
>>>>>>> Stashed changes

080008dc <transmit>:

void transmit(uint8_t* str, uint8_t* str2)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af08      	add	r7, sp, #32
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0;i<NumofPacket;i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	f000 bc50 	b.w	800118e <transmit+0x8b2>
	{


		        // первый акселерометр
			    // Ось Х
				xIntSumFirst = (str[1+8+i*36] & 0x0F) * 10 + (str[1+9+i*36] >> 4); // целочисленная сумма X
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	4613      	mov	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4413      	add	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	3309      	adds	r3, #9
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f003 020f 	and.w	r2, r3, #15
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4619      	mov	r1, r3
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	4613      	mov	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	330a      	adds	r3, #10
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	b2db      	uxtb	r3, r3
 8000928:	440b      	add	r3, r1
 800092a:	4ab6      	ldr	r2, [pc, #728]	; (8000c04 <transmit+0x328>)
 800092c:	6013      	str	r3, [r2, #0]
				x5First = str[1+9+i*36] & 0x0F; //перевод правого бита 5го байта
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	4613      	mov	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	330a      	adds	r3, #10
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	4ab0      	ldr	r2, [pc, #704]	; (8000c08 <transmit+0x32c>)
 8000948:	6013      	str	r3, [r2, #0]
				x60First = str[1+10+i*36] >> 4; //перевод левого бита 6го байта
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4613      	mov	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	330b      	adds	r3, #11
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4ba9      	ldr	r3, [pc, #676]	; (8000c0c <transmit+0x330>)
 8000966:	601a      	str	r2, [r3, #0]
				x65First = str[1+10+i*36] & 0x0F; //перевод правого бита 6го байта
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	330b      	adds	r3, #11
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	4aa3      	ldr	r2, [pc, #652]	; (8000c10 <transmit+0x334>)
 8000982:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d;",xIntSumFirst, x5First, x60First);
 8000984:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <transmit+0x328>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b9f      	ldr	r3, [pc, #636]	; (8000c08 <transmit+0x32c>)
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	4b9f      	ldr	r3, [pc, #636]	; (8000c0c <transmit+0x330>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	460b      	mov	r3, r1
 8000994:	499f      	ldr	r1, [pc, #636]	; (8000c14 <transmit+0x338>)
 8000996:	48a0      	ldr	r0, [pc, #640]	; (8000c18 <transmit+0x33c>)
<<<<<<< Updated upstream
 8000998:	f005 fe2e 	bl	80065f8 <siprintf>
=======
 8000998:	f006 fade 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+8+i*36] >> 4) == 0x01)
 800099c:	7bfa      	ldrb	r2, [r7, #15]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	3309      	adds	r3, #9
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d102      	bne.n	80009be <transmit+0xe2>
					xvalFirst[0] = '-';
 80009b8:	4b97      	ldr	r3, [pc, #604]	; (8000c18 <transmit+0x33c>)
 80009ba:	222d      	movs	r2, #45	; 0x2d
 80009bc:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[1+11+i*36] & 0x0F) * 10 + (str[1+12+i*36] >> 4);	// целочисленная сумма Y
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	4613      	mov	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	330c      	adds	r3, #12
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	f003 020f 	and.w	r2, r3, #15
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	4613      	mov	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	330d      	adds	r3, #13
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	440b      	add	r3, r1
 80009fa:	4a88      	ldr	r2, [pc, #544]	; (8000c1c <transmit+0x340>)
 80009fc:	6013      	str	r3, [r2, #0]
				y8First = str[1+12+i*36] & 0x0F; //перевод правого бита 8го байта
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	4613      	mov	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	330d      	adds	r3, #13
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	4a82      	ldr	r2, [pc, #520]	; (8000c20 <transmit+0x344>)
 8000a18:	6013      	str	r3, [r2, #0]
				y90First = str[1+13+i*36] >> 4; //перевод левого бита 9го байта
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	330e      	adds	r3, #14
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b7b      	ldr	r3, [pc, #492]	; (8000c24 <transmit+0x348>)
 8000a36:	601a      	str	r2, [r3, #0]
				y95First = str[1+13+i*36] & 0x0F; //перевод правого бита 9го байта
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	330e      	adds	r3, #14
 8000a44:	461a      	mov	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	4a75      	ldr	r2, [pc, #468]	; (8000c28 <transmit+0x34c>)
 8000a52:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d;", yIntSumFirst, y8First, y90First);
 8000a54:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <transmit+0x340>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b71      	ldr	r3, [pc, #452]	; (8000c20 <transmit+0x344>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b71      	ldr	r3, [pc, #452]	; (8000c24 <transmit+0x348>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	460b      	mov	r3, r1
 8000a64:	496b      	ldr	r1, [pc, #428]	; (8000c14 <transmit+0x338>)
 8000a66:	4871      	ldr	r0, [pc, #452]	; (8000c2c <transmit+0x350>)
<<<<<<< Updated upstream
 8000a68:	f005 fdc6 	bl	80065f8 <siprintf>
=======
 8000a68:	f006 fa76 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+11+i*36] >> 4) == 0x01)
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	330c      	adds	r3, #12
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d102      	bne.n	8000a8e <transmit+0x1b2>
					yvalFirst[0] = '-';
 8000a88:	4b68      	ldr	r3, [pc, #416]	; (8000c2c <transmit+0x350>)
 8000a8a:	222d      	movs	r2, #45	; 0x2d
 8000a8c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[1+14+i*36] & 0x0F) * 10 + (str[1+15+i*36] >> 4); //целочисленная сумма Z
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	330f      	adds	r3, #15
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 020f 	and.w	r2, r3, #15
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	7bfa      	ldrb	r2, [r7, #15]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	3310      	adds	r3, #16
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	440b      	add	r3, r1
 8000aca:	4a59      	ldr	r2, [pc, #356]	; (8000c30 <transmit+0x354>)
 8000acc:	6013      	str	r3, [r2, #0]
				z11First = str[1+15+i*36] & 0x0F; //перевод правого бита 11го байта
 8000ace:	7bfa      	ldrb	r2, [r7, #15]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	3310      	adds	r3, #16
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	4a53      	ldr	r2, [pc, #332]	; (8000c34 <transmit+0x358>)
 8000ae8:	6013      	str	r3, [r2, #0]
				z120First = str[1+16+i*36] >> 4; //перевод левого бита 12го байта
 8000aea:	7bfa      	ldrb	r2, [r7, #15]
 8000aec:	4613      	mov	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3311      	adds	r3, #17
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <transmit+0x35c>)
 8000b06:	601a      	str	r2, [r3, #0]
				z125First = str[1+16+i*36] & 0x0F; //перевод правого бита 12го байта
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	3311      	adds	r3, #17
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <transmit+0x360>)
 8000b22:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d;", zIntSumFirst, z11First, z120First);
 8000b24:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <transmit+0x354>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <transmit+0x358>)
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <transmit+0x35c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	460b      	mov	r3, r1
 8000b34:	4937      	ldr	r1, [pc, #220]	; (8000c14 <transmit+0x338>)
 8000b36:	4842      	ldr	r0, [pc, #264]	; (8000c40 <transmit+0x364>)
<<<<<<< Updated upstream
 8000b38:	f005 fd5e 	bl	80065f8 <siprintf>
=======
 8000b38:	f006 fa0e 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+14+i*36] >> 4) == 0x01)
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	330f      	adds	r3, #15
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d102      	bne.n	8000b5e <transmit+0x282>
					zvalFirst[0] = '-';
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <transmit+0x364>)
 8000b5a:	222d      	movs	r2, #45	; 0x2d
 8000b5c:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[1+17+i*36] & 0x0F) * 10 + (str[1+18+i*36] >> 4); // целочисленная сумма X
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	4613      	mov	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3312      	adds	r3, #18
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 020f 	and.w	r2, r3, #15
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3313      	adds	r3, #19
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	440b      	add	r3, r1
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <transmit+0x368>)
 8000b9c:	6013      	str	r3, [r2, #0]
				x5Second = str[1+18+i*36] & 0x0F; //перевод правого бита 5го байта
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	3313      	adds	r3, #19
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <transmit+0x36c>)
 8000bb8:	6013      	str	r3, [r2, #0]
				x60Second = str[1+19+i*36] >> 4; //перевод левого бита 6го байта
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <transmit+0x370>)
 8000bd6:	601a      	str	r2, [r3, #0]
				x65Second = str[1+19+i*36] & 0x0F; //перевод правого бита 6го байта
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	3314      	adds	r3, #20
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <transmit+0x374>)
 8000bf2:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d;",xIntSumSecond, x5Second, x60Second);
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <transmit+0x368>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <transmit+0x36c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <transmit+0x370>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	e028      	b.n	8000c54 <transmit+0x378>
 8000c02:	bf00      	nop
<<<<<<< Updated upstream
 8000c04:	20000d68 	.word	0x20000d68
 8000c08:	2000090c 	.word	0x2000090c
 8000c0c:	20000b58 	.word	0x20000b58
 8000c10:	20000918 	.word	0x20000918
 8000c14:	08006e1c 	.word	0x08006e1c
 8000c18:	2000019c 	.word	0x2000019c
 8000c1c:	200008f0 	.word	0x200008f0
 8000c20:	200008f4 	.word	0x200008f4
 8000c24:	2000051c 	.word	0x2000051c
 8000c28:	200007e0 	.word	0x200007e0
 8000c2c:	20000520 	.word	0x20000520
 8000c30:	20000920 	.word	0x20000920
 8000c34:	20000730 	.word	0x20000730
 8000c38:	2000072c 	.word	0x2000072c
 8000c3c:	20000914 	.word	0x20000914
 8000c40:	20000928 	.word	0x20000928
 8000c44:	200008ec 	.word	0x200008ec
 8000c48:	20000b5c 	.word	0x20000b5c
 8000c4c:	20000528 	.word	0x20000528
 8000c50:	200008e8 	.word	0x200008e8
=======
 8000c04:	20000de8 	.word	0x20000de8
 8000c08:	2000094c 	.word	0x2000094c
 8000c0c:	20000bd8 	.word	0x20000bd8
 8000c10:	20000958 	.word	0x20000958
 8000c14:	0800777c 	.word	0x0800777c
 8000c18:	2000019c 	.word	0x2000019c
 8000c1c:	20000930 	.word	0x20000930
 8000c20:	20000934 	.word	0x20000934
 8000c24:	2000055c 	.word	0x2000055c
 8000c28:	20000820 	.word	0x20000820
 8000c2c:	20000560 	.word	0x20000560
 8000c30:	200009a0 	.word	0x200009a0
 8000c34:	20000770 	.word	0x20000770
 8000c38:	2000076c 	.word	0x2000076c
 8000c3c:	20000954 	.word	0x20000954
 8000c40:	200009a8 	.word	0x200009a8
 8000c44:	2000092c 	.word	0x2000092c
 8000c48:	20000bdc 	.word	0x20000bdc
 8000c4c:	20000568 	.word	0x20000568
 8000c50:	20000928 	.word	0x20000928
>>>>>>> Stashed changes
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	460b      	mov	r3, r1
 8000c58:	49b9      	ldr	r1, [pc, #740]	; (8000f40 <transmit+0x664>)
 8000c5a:	48ba      	ldr	r0, [pc, #744]	; (8000f44 <transmit+0x668>)
<<<<<<< Updated upstream
 8000c5c:	f005 fccc 	bl	80065f8 <siprintf>
=======
 8000c5c:	f006 f97c 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+17+i*36] >> 4) == 0x01)
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	3312      	adds	r3, #18
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d102      	bne.n	8000c82 <transmit+0x3a6>
					xvalSecond[0] = '-';
 8000c7c:	4bb1      	ldr	r3, [pc, #708]	; (8000f44 <transmit+0x668>)
 8000c7e:	222d      	movs	r2, #45	; 0x2d
 8000c80:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[1+20+i*36] & 0x0F) * 10 + (str[1+21+i*36] >> 4);	// целочисленная сумма Y
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3315      	adds	r3, #21
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f003 020f 	and.w	r2, r3, #15
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	3316      	adds	r3, #22
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	4aa2      	ldr	r2, [pc, #648]	; (8000f48 <transmit+0x66c>)
 8000cc0:	6013      	str	r3, [r2, #0]
				y8Second = str[1+21+i*36] & 0x0F; //перевод правого бита 8го байта
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	3316      	adds	r3, #22
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	4a9c      	ldr	r2, [pc, #624]	; (8000f4c <transmit+0x670>)
 8000cdc:	6013      	str	r3, [r2, #0]
				y90Second = str[1+22+i*36] >> 4; //перевод левого бита 9го байта
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3317      	adds	r3, #23
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <transmit+0x674>)
 8000cfa:	601a      	str	r2, [r3, #0]
				y95Second = str[1+22+i*36] & 0x0F; //перевод правого бита 9го байта
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3317      	adds	r3, #23
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	4a8f      	ldr	r2, [pc, #572]	; (8000f54 <transmit+0x678>)
 8000d16:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d;", yIntSumSecond, y8Second, y90Second);
 8000d18:	4b8b      	ldr	r3, [pc, #556]	; (8000f48 <transmit+0x66c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <transmit+0x670>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	4b8b      	ldr	r3, [pc, #556]	; (8000f50 <transmit+0x674>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	460b      	mov	r3, r1
 8000d28:	4985      	ldr	r1, [pc, #532]	; (8000f40 <transmit+0x664>)
 8000d2a:	488b      	ldr	r0, [pc, #556]	; (8000f58 <transmit+0x67c>)
<<<<<<< Updated upstream
 8000d2c:	f005 fc64 	bl	80065f8 <siprintf>
=======
 8000d2c:	f006 f914 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+20+i*36] >> 4) == 0x01)
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4613      	mov	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3315      	adds	r3, #21
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d102      	bne.n	8000d52 <transmit+0x476>
					yvalSecond[0] = '-';
 8000d4c:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <transmit+0x67c>)
 8000d4e:	222d      	movs	r2, #45	; 0x2d
 8000d50:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[1+23+i*36] & 0x0F) * 10 + (str[1+24+i*36] >> 4); //целочисленная сумма Z
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f003 020f 	and.w	r2, r3, #15
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	4613      	mov	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	3319      	adds	r3, #25
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4a73      	ldr	r2, [pc, #460]	; (8000f5c <transmit+0x680>)
 8000d90:	6013      	str	r3, [r2, #0]
				z11Second = str[1+24+i*36] & 0x0F; //перевод правого бита 11го байта
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	4613      	mov	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3319      	adds	r3, #25
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	4a6d      	ldr	r2, [pc, #436]	; (8000f60 <transmit+0x684>)
 8000dac:	6013      	str	r3, [r2, #0]
				z120Second = str[1+25+i*36] >> 4; //перевод левого бита 12го байта
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	4613      	mov	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	331a      	adds	r3, #26
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <transmit+0x688>)
 8000dca:	601a      	str	r2, [r3, #0]
				z125Second = str[1+25+i*36] & 0x0F; //перевод правого бита 12го байта
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	331a      	adds	r3, #26
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <transmit+0x68c>)
 8000de6:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d;", zIntSumSecond, z11Second, z120Second);
 8000de8:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <transmit+0x680>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <transmit+0x684>)
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <transmit+0x688>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	460b      	mov	r3, r1
 8000df8:	4951      	ldr	r1, [pc, #324]	; (8000f40 <transmit+0x664>)
 8000dfa:	485c      	ldr	r0, [pc, #368]	; (8000f6c <transmit+0x690>)
<<<<<<< Updated upstream
 8000dfc:	f005 fbfc 	bl	80065f8 <siprintf>
=======
 8000dfc:	f006 f8ac 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+23+i*36] >> 4) == 0x01)
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	4613      	mov	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d102      	bne.n	8000e22 <transmit+0x546>
					zvalSecond[0] = '-';
 8000e1c:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <transmit+0x690>)
 8000e1e:	222d      	movs	r2, #45	; 0x2d
 8000e20:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[1+26+i*36] & 0x0F) * 10 + (str[1+27+i*36] >> 4); // целочисленная сумма X
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	331b      	adds	r3, #27
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f003 020f 	and.w	r2, r3, #15
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	331c      	adds	r3, #28
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <transmit+0x694>)
 8000e60:	6013      	str	r3, [r2, #0]
				x5Third = str[1+27+i*36] & 0x0F; //перевод правого бита 5го байта
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	331c      	adds	r3, #28
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <transmit+0x698>)
 8000e7c:	6013      	str	r3, [r2, #0]
				x60Third = str[1+28+i*36] >> 4; //перевод левого бита 6го байта
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	4613      	mov	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	331d      	adds	r3, #29
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <transmit+0x69c>)
 8000e9a:	601a      	str	r2, [r3, #0]
				x65Third = str[1+28+i*36] & 0x0F; //перевод правого бита 6го байта
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	331d      	adds	r3, #29
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <transmit+0x6a0>)
 8000eb6:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d;",xIntSumThird, x5Third, x60Third);
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <transmit+0x694>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <transmit+0x698>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <transmit+0x69c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	491d      	ldr	r1, [pc, #116]	; (8000f40 <transmit+0x664>)
 8000eca:	482d      	ldr	r0, [pc, #180]	; (8000f80 <transmit+0x6a4>)
<<<<<<< Updated upstream
 8000ecc:	f005 fb94 	bl	80065f8 <siprintf>
=======
 8000ecc:	f006 f844 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+26+i*36] >> 4) == 0x01)
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	331b      	adds	r3, #27
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <transmit+0x616>
					xvalThird[0] = '-';
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <transmit+0x6a4>)
 8000eee:	222d      	movs	r2, #45	; 0x2d
 8000ef0:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[1+29+i*36] & 0x0F) * 10 + (str[1+30+i*36] >> 4);	// целочисленная сумма Y
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	331e      	adds	r3, #30
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	f003 020f 	and.w	r2, r3, #15
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	4613      	mov	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	331f      	adds	r3, #31
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <transmit+0x6a8>)
 8000f30:	6013      	str	r3, [r2, #0]
				y8Third = str[1+30+i*36] & 0x0F; //перевод правого бита 8го байта
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	e024      	b.n	8000f88 <transmit+0x6ac>
 8000f3e:	bf00      	nop
<<<<<<< Updated upstream
 8000f40:	08006e1c 	.word	0x08006e1c
 8000f44:	20000120 	.word	0x20000120
 8000f48:	2000079c 	.word	0x2000079c
 8000f4c:	20000910 	.word	0x20000910
 8000f50:	20000aac 	.word	0x20000aac
 8000f54:	20000118 	.word	0x20000118
 8000f58:	200008f8 	.word	0x200008f8
 8000f5c:	20000114 	.word	0x20000114
 8000f60:	20000fa0 	.word	0x20000fa0
 8000f64:	20000734 	.word	0x20000734
 8000f68:	20000128 	.word	0x20000128
 8000f6c:	20000738 	.word	0x20000738
 8000f70:	20000f9c 	.word	0x20000f9c
 8000f74:	200008a4 	.word	0x200008a4
 8000f78:	20000514 	.word	0x20000514
 8000f7c:	20000900 	.word	0x20000900
 8000f80:	20000ab0 	.word	0x20000ab0
 8000f84:	2000091c 	.word	0x2000091c
=======
 8000f40:	0800777c 	.word	0x0800777c
 8000f44:	20000120 	.word	0x20000120
 8000f48:	200007dc 	.word	0x200007dc
 8000f4c:	20000950 	.word	0x20000950
 8000f50:	20000b2c 	.word	0x20000b2c
 8000f54:	20000118 	.word	0x20000118
 8000f58:	20000938 	.word	0x20000938
 8000f5c:	20000114 	.word	0x20000114
 8000f60:	20001060 	.word	0x20001060
 8000f64:	20000774 	.word	0x20000774
 8000f68:	20000128 	.word	0x20000128
 8000f6c:	20000778 	.word	0x20000778
 8000f70:	2000105c 	.word	0x2000105c
 8000f74:	200008e4 	.word	0x200008e4
 8000f78:	20000554 	.word	0x20000554
 8000f7c:	20000940 	.word	0x20000940
 8000f80:	20000b30 	.word	0x20000b30
 8000f84:	2000099c 	.word	0x2000099c
>>>>>>> Stashed changes
 8000f88:	331f      	adds	r3, #31
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a82      	ldr	r2, [pc, #520]	; (80011a0 <transmit+0x8c4>)
 8000f98:	6013      	str	r3, [r2, #0]
				y90Third = str[1+31+i*36] >> 4; //перевод левого бита 9го байта
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3320      	adds	r3, #32
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <transmit+0x8c8>)
 8000fb6:	601a      	str	r2, [r3, #0]
				y95Third = str[1+31+i*36] & 0x0F; //перевод правого бита 9го байта
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	3320      	adds	r3, #32
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <transmit+0x8cc>)
 8000fd2:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d;", yIntSumThird, y8Third, y90Third);
 8000fd4:	4b75      	ldr	r3, [pc, #468]	; (80011ac <transmit+0x8d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <transmit+0x8c4>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <transmit+0x8c8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4972      	ldr	r1, [pc, #456]	; (80011b0 <transmit+0x8d4>)
 8000fe6:	4873      	ldr	r0, [pc, #460]	; (80011b4 <transmit+0x8d8>)
<<<<<<< Updated upstream
 8000fe8:	f005 fb06 	bl	80065f8 <siprintf>
=======
 8000fe8:	f005 ffb6 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+29+i*36] >> 4) == 0x01)
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	331e      	adds	r3, #30
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <transmit+0x732>
					yvalThird[0] = '-';
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <transmit+0x8d8>)
 800100a:	222d      	movs	r2, #45	; 0x2d
 800100c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[1+32+i*36] & 0x0F) * 10 + (str[1+33+i*36] >> 4); //целочисленная сумма Z
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	3321      	adds	r3, #33	; 0x21
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 020f 	and.w	r2, r3, #15
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4619      	mov	r1, r3
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	3322      	adds	r3, #34	; 0x22
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	b2db      	uxtb	r3, r3
 8001048:	440b      	add	r3, r1
 800104a:	4a5b      	ldr	r2, [pc, #364]	; (80011b8 <transmit+0x8dc>)
 800104c:	6013      	str	r3, [r2, #0]
				z11Third = str[1+33+i*36] & 0x0F; //перевод правого бита 11го байта
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	3322      	adds	r3, #34	; 0x22
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <transmit+0x8e0>)
 8001068:	6013      	str	r3, [r2, #0]
				z120Third = str[1+34+i*36] >> 4; //перевод левого бита 12го байта
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	3323      	adds	r3, #35	; 0x23
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <transmit+0x8e4>)
 8001086:	601a      	str	r2, [r3, #0]
				z125Third = str[1+34+i*36] & 0x0F; //перевод правого бита 12го байта
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3323      	adds	r3, #35	; 0x23
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <transmit+0x8e8>)
 80010a2:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d;", zIntSumThird, z11Third, z120Third);
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <transmit+0x8dc>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <transmit+0x8e0>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <transmit+0x8e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	460b      	mov	r3, r1
 80010b4:	493e      	ldr	r1, [pc, #248]	; (80011b0 <transmit+0x8d4>)
 80010b6:	4844      	ldr	r0, [pc, #272]	; (80011c8 <transmit+0x8ec>)
<<<<<<< Updated upstream
 80010b8:	f005 fa9e 	bl	80065f8 <siprintf>
=======
 80010b8:	f005 ff4e 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
				if((str[1+32+i*36] >> 4) == 0x01)
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	3321      	adds	r3, #33	; 0x21
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <transmit+0x802>
					zvalThird[0] = '-';
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <transmit+0x8ec>)
 80010da:	222d      	movs	r2, #45	; 0x2d
 80010dc:	701a      	strb	r2, [r3, #0]


				for(uint8_t j=0;j<8;j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e019      	b.n	8001118 <transmit+0x83c>
				{

					str2[j+i*73]=str[j+i*36];
 80010e4:	7bb9      	ldrb	r1, [r7, #14]
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1899      	adds	r1, r3, r2
 80010f8:	7bb8      	ldrb	r0, [r7, #14]
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	4403      	add	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	780a      	ldrb	r2, [r1, #0]
 8001110:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	3301      	adds	r3, #1
 8001116:	73bb      	strb	r3, [r7, #14]
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d9e2      	bls.n	80010e4 <transmit+0x808>
				}
				for(uint8_t j=0;j<8;j++)
 800111e:	2300      	movs	r3, #0
 8001120:	737b      	strb	r3, [r7, #13]
 8001122:	e011      	b.n	8001148 <transmit+0x86c>
				{

					str2[j+8+i*73]=';';
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	f103 0108 	add.w	r1, r3, #8
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	440b      	add	r3, r1
 8001138:	461a      	mov	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	223b      	movs	r2, #59	; 0x3b
 8001140:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	3301      	adds	r3, #1
 8001146:	737b      	strb	r3, [r7, #13]
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d9ea      	bls.n	8001124 <transmit+0x848>
				}


				sprintf(&str2[1+8+i*73], "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	3309      	adds	r3, #9
 800115c:	461a      	mov	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	1898      	adds	r0, r3, r2
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <transmit+0x8ec>)
 8001164:	9306      	str	r3, [sp, #24]
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <transmit+0x8d8>)
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <transmit+0x8f0>)
 800116c:	9304      	str	r3, [sp, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <transmit+0x8f4>)
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <transmit+0x8f8>)
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <transmit+0x8fc>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <transmit+0x900>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <transmit+0x904>)
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <transmit+0x908>)
 8001182:	4919      	ldr	r1, [pc, #100]	; (80011e8 <transmit+0x90c>)
<<<<<<< Updated upstream
 8001184:	f005 fa38 	bl	80065f8 <siprintf>
=======
 8001184:	f005 fee8 	bl	8006f58 <siprintf>
>>>>>>> Stashed changes
	for(uint8_t i=0;i<NumofPacket;i++)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b06      	cmp	r3, #6
 8001192:	f67f abac 	bls.w	80008ee <transmit+0x12>

	}

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
<<<<<<< Updated upstream
 80011a0:	20000798 	.word	0x20000798
 80011a4:	20000134 	.word	0x20000134
 80011a8:	20000510 	.word	0x20000510
 80011ac:	2000091c 	.word	0x2000091c
 80011b0:	08006e1c 	.word	0x08006e1c
 80011b4:	2000012c 	.word	0x2000012c
 80011b8:	20000b60 	.word	0x20000b60
 80011bc:	20000138 	.word	0x20000138
 80011c0:	20000950 	.word	0x20000950
 80011c4:	20000518 	.word	0x20000518
 80011c8:	20000904 	.word	0x20000904
 80011cc:	20000ab0 	.word	0x20000ab0
 80011d0:	20000738 	.word	0x20000738
 80011d4:	200008f8 	.word	0x200008f8
 80011d8:	20000120 	.word	0x20000120
 80011dc:	20000928 	.word	0x20000928
 80011e0:	20000520 	.word	0x20000520
 80011e4:	2000019c 	.word	0x2000019c
 80011e8:	08006e28 	.word	0x08006e28
=======
 80011a0:	200007d8 	.word	0x200007d8
 80011a4:	20000134 	.word	0x20000134
 80011a8:	20000550 	.word	0x20000550
 80011ac:	2000099c 	.word	0x2000099c
 80011b0:	0800777c 	.word	0x0800777c
 80011b4:	2000012c 	.word	0x2000012c
 80011b8:	20000be0 	.word	0x20000be0
 80011bc:	20000138 	.word	0x20000138
 80011c0:	200009d0 	.word	0x200009d0
 80011c4:	20000558 	.word	0x20000558
 80011c8:	20000944 	.word	0x20000944
 80011cc:	20000b30 	.word	0x20000b30
 80011d0:	20000778 	.word	0x20000778
 80011d4:	20000938 	.word	0x20000938
 80011d8:	20000120 	.word	0x20000120
 80011dc:	200009a8 	.word	0x200009a8
 80011e0:	20000560 	.word	0x20000560
 80011e4:	2000019c 	.word	0x2000019c
 80011e8:	08007788 	.word	0x08007788
>>>>>>> Stashed changes

080011ec <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	82fb      	strh	r3, [r7, #22]
 8001206:	e01f      	b.n	8001248 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <uint32_TO_charmass+0x70>)
 800120c:	fba3 2301 	umull	r2, r3, r3, r1
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	1aca      	subs	r2, r1, r3
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	1e59      	subs	r1, r3, #1
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	1ac9      	subs	r1, r1, r3
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	440b      	add	r3, r1
 800122a:	4619      	mov	r1, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	440b      	add	r3, r1
 8001230:	3230      	adds	r2, #48	; 0x30
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <uint32_TO_charmass+0x70>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	3301      	adds	r3, #1
 8001246:	82fb      	strh	r3, [r7, #22]
 8001248:	8afa      	ldrh	r2, [r7, #22]
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3db      	bcc.n	8001208 <uint32_TO_charmass+0x1c>

	}
}
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	cccccccd 	.word	0xcccccccd

08001260 <SyncAccel>:


// Функция синхронизации

void SyncAccel(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	  // Синхронизация
	  if(readFlag==1)
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <SyncAccel+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d110      	bne.n	800128e <SyncAccel+0x2e>
	  {
		UsartCount=0;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <SyncAccel+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	  	readFlag=0;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <SyncAccel+0x88>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 800127a:	f002 f8d5 	bl	8003428 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 800127e:	481c      	ldr	r0, [pc, #112]	; (80012f0 <SyncAccel+0x90>)
 8001280:	f004 f9ee 	bl	8005660 <HAL_UART_Abort>
=======
 800127a:	f002 faab 	bl	80037d4 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 800127e:	481c      	ldr	r0, [pc, #112]	; (80012f0 <SyncAccel+0x90>)
 8001280:	f004 fe9e 	bl	8005fc0 <HAL_UART_Abort>
>>>>>>> Stashed changes
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001284:	220e      	movs	r2, #14
 8001286:	491b      	ldr	r1, [pc, #108]	; (80012f4 <SyncAccel+0x94>)
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <SyncAccel+0x90>)
<<<<<<< Updated upstream
 800128a:	f004 f969 	bl	8005560 <HAL_UART_Receive_DMA>
=======
 800128a:	f004 fe19 	bl	8005ec0 <HAL_UART_Receive_DMA>
>>>>>>> Stashed changes
	  }
	  if(readFlag2==1)
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SyncAccel+0x98>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d110      	bne.n	80012b8 <SyncAccel+0x58>
	  {
		UsartCount=0;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <SyncAccel+0x8c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	  	readFlag2=0;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <SyncAccel+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012a2:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80012a4:	f002 f8c0 	bl	8003428 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 80012a8:	4814      	ldr	r0, [pc, #80]	; (80012fc <SyncAccel+0x9c>)
 80012aa:	f004 f9d9 	bl	8005660 <HAL_UART_Abort>
=======
 80012a4:	f002 fa96 	bl	80037d4 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 80012a8:	4814      	ldr	r0, [pc, #80]	; (80012fc <SyncAccel+0x9c>)
 80012aa:	f004 fe89 	bl	8005fc0 <HAL_UART_Abort>
>>>>>>> Stashed changes
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 80012ae:	220e      	movs	r2, #14
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <SyncAccel+0xa0>)
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <SyncAccel+0x9c>)
<<<<<<< Updated upstream
 80012b4:	f004 f954 	bl	8005560 <HAL_UART_Receive_DMA>
=======
 80012b4:	f004 fe04 	bl	8005ec0 <HAL_UART_Receive_DMA>
>>>>>>> Stashed changes
	  }
	  if(readFlag3==1)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <SyncAccel+0xa4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d110      	bne.n	80012e2 <SyncAccel+0x82>
	  {
		UsartCount=0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <SyncAccel+0x8c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	  	readFlag3=0;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <SyncAccel+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80012ce:	f002 f8ab 	bl	8003428 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <SyncAccel+0xa8>)
 80012d4:	f004 f9c4 	bl	8005660 <HAL_UART_Abort>
=======
 80012ce:	f002 fa81 	bl	80037d4 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <SyncAccel+0xa8>)
 80012d4:	f004 fe74 	bl	8005fc0 <HAL_UART_Abort>
>>>>>>> Stashed changes
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 80012d8:	220e      	movs	r2, #14
 80012da:	490c      	ldr	r1, [pc, #48]	; (800130c <SyncAccel+0xac>)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <SyncAccel+0xa8>)
<<<<<<< Updated upstream
 80012de:	f004 f93f 	bl	8005560 <HAL_UART_Receive_DMA>
=======
 80012de:	f004 fdef 	bl	8005ec0 <HAL_UART_Receive_DMA>
>>>>>>> Stashed changes
	  }


}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
<<<<<<< Updated upstream
 80012e8:	2000094c 	.word	0x2000094c
 80012ec:	200000f0 	.word	0x200000f0
 80012f0:	200001a4 	.word	0x200001a4
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	20000924 	.word	0x20000924
 80012fc:	200008a8 	.word	0x200008a8
 8001300:	200000c0 	.word	0x200000c0
 8001304:	2000011c 	.word	0x2000011c
 8001308:	200007a0 	.word	0x200007a0
=======
 80012e8:	200009cc 	.word	0x200009cc
 80012ec:	200000f0 	.word	0x200000f0
 80012f0:	200001a4 	.word	0x200001a4
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	200009a4 	.word	0x200009a4
 80012fc:	200008e8 	.word	0x200008e8
 8001300:	200000c0 	.word	0x200000c0
 8001304:	2000011c 	.word	0x2000011c
 8001308:	200007e0 	.word	0x200007e0
>>>>>>> Stashed changes
 800130c:	200000b2 	.word	0x200000b2

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8001316:	f002 f815 	bl	8003344 <HAL_Init>
=======
 8001316:	f002 f9eb 	bl	80036f0 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 800131a:	f000 f8ab 	bl	8001474 <SystemClock_Config>
=======
 800131a:	f000 f8b9 	bl	8001490 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 800131e:	f000 fa75 	bl	800180c <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 fa2d 	bl	8001780 <MX_DMA_Init>
  MX_SPI1_Init();
 8001326:	f000 f917 	bl	8001558 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800132a:	f000 f9d5 	bl	80016d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800132e:	f000 f9fd 	bl	800172c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001332:	f000 f9a7 	bl	8001684 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001336:	f005 f869 	bl	800640c <MX_FATFS_Init>
  MX_SPI3_Init();
 800133a:	f000 f943 	bl	80015c4 <MX_SPI3_Init>
  MX_UART5_Init();
 800133e:	f000 f977 	bl	8001630 <MX_UART5_Init>
=======
 800131e:	f000 fb13 	bl	8001948 <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 facb 	bl	80018bc <MX_DMA_Init>
  MX_SPI1_Init();
 8001326:	f000 f925 	bl	8001574 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800132a:	f000 fa73 	bl	8001814 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800132e:	f000 fa9b 	bl	8001868 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001332:	f000 fa45 	bl	80017c0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001336:	f005 fd19 	bl	8006d6c <MX_FATFS_Init>
  MX_SPI3_Init();
 800133a:	f000 f951 	bl	80015e0 <MX_SPI3_Init>
  MX_UART5_Init();
 800133e:	f000 fa15 	bl	800176c <MX_UART5_Init>
  MX_TIM6_Init();
 8001342:	f000 f983 	bl	800164c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001346:	f000 f9b7 	bl	80016b8 <MX_TIM7_Init>
  MX_TIM10_Init();
 800134a:	f000 f9eb 	bl	8001724 <MX_TIM10_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN 2 */

	// Сд карта инициализация
	SDCARD_Init();
 800134e:	f000 feab 	bl	80020a8 <SDCARD_Init>
    // Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
<<<<<<< Updated upstream
 8001342:	f7ff fa46 	bl	80007d2 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8001346:	f7ff fa68 	bl	800081a <Rf96_Lora_TX_mode>

	// Сд карта инициализация
	SDCARD_Init();
 800134a:	f000 fd59 	bl	8001e00 <SDCARD_Init>

    // Запуск приема в дма с аксселерометров
    HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 800134e:	220e      	movs	r2, #14
 8001350:	4939      	ldr	r1, [pc, #228]	; (8001438 <main+0x128>)
 8001352:	483a      	ldr	r0, [pc, #232]	; (800143c <main+0x12c>)
 8001354:	f004 f904 	bl	8005560 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001358:	220e      	movs	r2, #14
 800135a:	4939      	ldr	r1, [pc, #228]	; (8001440 <main+0x130>)
 800135c:	4839      	ldr	r0, [pc, #228]	; (8001444 <main+0x134>)
 800135e:	f004 f8ff 	bl	8005560 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8001362:	220e      	movs	r2, #14
 8001364:	4938      	ldr	r1, [pc, #224]	; (8001448 <main+0x138>)
 8001366:	4839      	ldr	r0, [pc, #228]	; (800144c <main+0x13c>)
 8001368:	f004 f8fa 	bl	8005560 <HAL_UART_Receive_DMA>

    // Отправка первого нулевого пакета
	PacketToRadio();
 800136c:	f7ff fa7c 	bl	8000868 <PacketToRadio>
  /* USER CODE BEGIN WHILE */
  while (1)
=======
 8001352:	f7ff fa3e 	bl	80007d2 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8001356:	f7ff fa60 	bl	800081a <Rf96_Lora_TX_mode>

    // Запуск приема в дма с аксселерометров
    HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 800135a:	220e      	movs	r2, #14
 800135c:	493c      	ldr	r1, [pc, #240]	; (8001450 <main+0x140>)
 800135e:	483d      	ldr	r0, [pc, #244]	; (8001454 <main+0x144>)
 8001360:	f004 fdae 	bl	8005ec0 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001364:	220e      	movs	r2, #14
 8001366:	493c      	ldr	r1, [pc, #240]	; (8001458 <main+0x148>)
 8001368:	483c      	ldr	r0, [pc, #240]	; (800145c <main+0x14c>)
 800136a:	f004 fda9 	bl	8005ec0 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 800136e:	220e      	movs	r2, #14
 8001370:	493b      	ldr	r1, [pc, #236]	; (8001460 <main+0x150>)
 8001372:	483c      	ldr	r0, [pc, #240]	; (8001464 <main+0x154>)
 8001374:	f004 fda4 	bl	8005ec0 <HAL_UART_Receive_DMA>

    // Отправка первого нулевого пакета
	PacketToRadio();
 8001378:	f7ff fa76 	bl	8000868 <PacketToRadio>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4839      	ldr	r0, [pc, #228]	; (8001468 <main+0x158>)
 8001382:	f003 f911 	bl	80045a8 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
  {

	  // Синхронизация
	    SyncAccel();
<<<<<<< Updated upstream
 8001370:	f7ff ff76 	bl	8001260 <SyncAccel>

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 8001374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001378:	4835      	ldr	r0, [pc, #212]	; (8001450 <main+0x140>)
 800137a:	f002 ff27 	bl	80041cc <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <main+0x78>
		{
			PacketToRadio();
 8001384:	f7ff fa70 	bl	8000868 <PacketToRadio>
=======
 8001386:	f7ff ff6b 	bl	8001260 <SyncAccel>

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 800138a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138e:	4837      	ldr	r0, [pc, #220]	; (800146c <main+0x15c>)
 8001390:	f003 f8f2 	bl	8004578 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <main+0x8e>
		{
			PacketToRadio();
 800139a:	f7ff fa65 	bl	8000868 <PacketToRadio>
>>>>>>> Stashed changes
		}

		if(metka==1)
<<<<<<< Updated upstream
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <main+0x144>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d1ef      	bne.n	8001370 <main+0x60>
=======
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <main+0x160>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1ef      	bne.n	8001386 <main+0x76>
>>>>>>> Stashed changes
		{
			//HAL_UART_Transmit_IT(&huart2, "\n", 1);

			metka=0;
<<<<<<< Updated upstream
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <main+0x144>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
			if(pr==1)
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <main+0x148>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d136      	bne.n	800140c <main+0xfc>
			{

				if(z==0)
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <main+0x14c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d11c      	bne.n	80013e0 <main+0xd0>
				{
					z=1;
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <main+0x14c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]

					memset(Buff_Mid,0,sizeof(Buff_Mid));
 80013ac:	22fc      	movs	r2, #252	; 0xfc
 80013ae:	2100      	movs	r1, #0
 80013b0:	482b      	ldr	r0, [pc, #172]	; (8001460 <main+0x150>)
 80013b2:	f005 f919 	bl	80065e8 <memset>
					for(uint8_t i=0;i<NumofPacket;i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e00e      	b.n	80013da <main+0xca>
					{
						uint32_TO_charmass(0, Buff_Mid, i*36, 8);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	00d2      	lsls	r2, r2, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	2308      	movs	r3, #8
 80013cc:	4924      	ldr	r1, [pc, #144]	; (8001460 <main+0x150>)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff ff0c 	bl	80011ec <uint32_TO_charmass>
					for(uint8_t i=0;i<NumofPacket;i++)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	3301      	adds	r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d9ed      	bls.n	80013bc <main+0xac>
=======
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <main+0x160>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
			if(pr==1)
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <main+0x164>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d136      	bne.n	8001422 <main+0x112>
			{

				if(z==0)
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <main+0x168>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11c      	bne.n	80013f6 <main+0xe6>
				{
					z=1;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <main+0x168>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]

					memset(Buff_Mid,0,sizeof(Buff_Mid));
 80013c2:	22fc      	movs	r2, #252	; 0xfc
 80013c4:	2100      	movs	r1, #0
 80013c6:	482d      	ldr	r0, [pc, #180]	; (800147c <main+0x16c>)
 80013c8:	f005 fdbe 	bl	8006f48 <memset>
					for(uint8_t i=0;i<NumofPacket;i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e00e      	b.n	80013f0 <main+0xe0>
					{
						uint32_TO_charmass(0, Buff_Mid, i*36, 8);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	00d2      	lsls	r2, r2, #3
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	2308      	movs	r3, #8
 80013e2:	4926      	ldr	r1, [pc, #152]	; (800147c <main+0x16c>)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ff01 	bl	80011ec <uint32_TO_charmass>
					for(uint8_t i=0;i<NumofPacket;i++)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	3301      	adds	r3, #1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d9ed      	bls.n	80013d2 <main+0xc2>
>>>>>>> Stashed changes

					}

				}
				transmit(Buff_Mid,Buff_str1);
<<<<<<< Updated upstream
 80013e0:	4920      	ldr	r1, [pc, #128]	; (8001464 <main+0x154>)
 80013e2:	481f      	ldr	r0, [pc, #124]	; (8001460 <main+0x150>)
 80013e4:	f7ff fa7a 	bl	80008dc <transmit>


				Buff_str1[510]=';';
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <main+0x154>)
 80013ea:	223b      	movs	r2, #59	; 0x3b
 80013ec:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str1[511]='\n';
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <main+0x154>)
 80013f2:	220a      	movs	r2, #10
 80013f4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
				// Запись на SD
				SDCARD_WriteSingleBlock(blockAddr++, Buff_str1);
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <main+0x158>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	491a      	ldr	r1, [pc, #104]	; (8001468 <main+0x158>)
 8001400:	600a      	str	r2, [r1, #0]
 8001402:	4918      	ldr	r1, [pc, #96]	; (8001464 <main+0x154>)
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fde7 	bl	8001fd8 <SDCARD_WriteSingleBlock>
 800140a:	e7b1      	b.n	8001370 <main+0x60>

=======
 80013f6:	4922      	ldr	r1, [pc, #136]	; (8001480 <main+0x170>)
 80013f8:	4820      	ldr	r0, [pc, #128]	; (800147c <main+0x16c>)
 80013fa:	f7ff fa6f 	bl	80008dc <transmit>


				Buff_str1[510]=';';
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <main+0x170>)
 8001400:	223b      	movs	r2, #59	; 0x3b
 8001402:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str1[511]='\n';
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <main+0x170>)
 8001408:	220a      	movs	r2, #10
 800140a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff

				SDCARD_WriteSingleBlock(blockAddr++, Buff_str1);
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <main+0x174>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	491b      	ldr	r1, [pc, #108]	; (8001484 <main+0x174>)
 8001416:	600a      	str	r2, [r1, #0]
 8001418:	4919      	ldr	r1, [pc, #100]	; (8001480 <main+0x170>)
 800141a:	4618      	mov	r0, r3
 800141c:	f000 ff30 	bl	8002280 <SDCARD_WriteSingleBlock>
 8001420:	e7b1      	b.n	8001386 <main+0x76>
				 */
>>>>>>> Stashed changes
			}
			else
			{

				transmit(Buff_Top,Buff_str2);
<<<<<<< Updated upstream
 800140c:	4917      	ldr	r1, [pc, #92]	; (800146c <main+0x15c>)
 800140e:	4818      	ldr	r0, [pc, #96]	; (8001470 <main+0x160>)
 8001410:	f7ff fa64 	bl	80008dc <transmit>

				Buff_str2[510]=';';
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <main+0x15c>)
 8001416:	223b      	movs	r2, #59	; 0x3b
 8001418:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str2[511]='\n';
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <main+0x15c>)
 800141e:	220a      	movs	r2, #10
 8001420:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
				// Запись на SD
				SDCARD_WriteSingleBlock(blockAddr++, Buff_str2);
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <main+0x158>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	490f      	ldr	r1, [pc, #60]	; (8001468 <main+0x158>)
 800142c:	600a      	str	r2, [r1, #0]
 800142e:	490f      	ldr	r1, [pc, #60]	; (800146c <main+0x15c>)
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fdd1 	bl	8001fd8 <SDCARD_WriteSingleBlock>
	    SyncAccel();
 8001436:	e79b      	b.n	8001370 <main+0x60>
 8001438:	200000a4 	.word	0x200000a4
 800143c:	200001a4 	.word	0x200001a4
 8001440:	200000b2 	.word	0x200000b2
 8001444:	200007a0 	.word	0x200007a0
 8001448:	200000c0 	.word	0x200000c0
 800144c:	200008a8 	.word	0x200008a8
 8001450:	40020000 	.word	0x40020000
 8001454:	200000f3 	.word	0x200000f3
 8001458:	200000f2 	.word	0x200000f2
 800145c:	200000f4 	.word	0x200000f4
 8001460:	20000414 	.word	0x20000414
 8001464:	20000b68 	.word	0x20000b68
 8001468:	200000ec 	.word	0x200000ec
 800146c:	2000052c 	.word	0x2000052c
 8001470:	20000954 	.word	0x20000954

08001474 <SystemClock_Config>:
=======
 8001422:	4919      	ldr	r1, [pc, #100]	; (8001488 <main+0x178>)
 8001424:	4819      	ldr	r0, [pc, #100]	; (800148c <main+0x17c>)
 8001426:	f7ff fa59 	bl	80008dc <transmit>

				Buff_str2[510]=';';
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <main+0x178>)
 800142c:	223b      	movs	r2, #59	; 0x3b
 800142e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str2[511]='\n';
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <main+0x178>)
 8001434:	220a      	movs	r2, #10
 8001436:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
				  } else
				  {
				  }
				 fres= f_sync(&fil);
*/
				SDCARD_WriteSingleBlock(blockAddr++, Buff_str2);
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <main+0x174>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	4910      	ldr	r1, [pc, #64]	; (8001484 <main+0x174>)
 8001442:	600a      	str	r2, [r1, #0]
 8001444:	4910      	ldr	r1, [pc, #64]	; (8001488 <main+0x178>)
 8001446:	4618      	mov	r0, r3
 8001448:	f000 ff1a 	bl	8002280 <SDCARD_WriteSingleBlock>
	    SyncAccel();
 800144c:	e79b      	b.n	8001386 <main+0x76>
 800144e:	bf00      	nop
 8001450:	200000a4 	.word	0x200000a4
 8001454:	200001a4 	.word	0x200001a4
 8001458:	200000b2 	.word	0x200000b2
 800145c:	200007e0 	.word	0x200007e0
 8001460:	200000c0 	.word	0x200000c0
 8001464:	200008e8 	.word	0x200008e8
 8001468:	40020800 	.word	0x40020800
 800146c:	40020000 	.word	0x40020000
 8001470:	200000f3 	.word	0x200000f3
 8001474:	200000f2 	.word	0x200000f2
 8001478:	200000f4 	.word	0x200000f4
 800147c:	20000454 	.word	0x20000454
 8001480:	20000be8 	.word	0x20000be8
 8001484:	200000ec 	.word	0x200000ec
 8001488:	2000056c 	.word	0x2000056c
 800148c:	200009d4 	.word	0x200009d4

08001490 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	; 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2234      	movs	r2, #52	; 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f005 f8b0 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
=======
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	2234      	movs	r2, #52	; 0x34
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 fd52 	bl	8006f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <SystemClock_Config+0xdc>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <SystemClock_Config+0xdc>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <SystemClock_Config+0xdc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <SystemClock_Config+0xe0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a25      	ldr	r2, [pc, #148]	; (8001554 <SystemClock_Config+0xe0>)
 80014be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <SystemClock_Config+0xe0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d8:	2310      	movs	r3, #16
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014e4:	2308      	movs	r3, #8
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014e8:	23b4      	movs	r3, #180	; 0xb4
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 f9a1 	bl	8004844 <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001508:	f000 fc06 	bl	8001d18 <Error_Handler>
=======
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <SystemClock_Config+0xdc>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	4a2b      	ldr	r2, [pc, #172]	; (800156c <SystemClock_Config+0xdc>)
 80014be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <SystemClock_Config+0xdc>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <SystemClock_Config+0xe0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <SystemClock_Config+0xe0>)
 80014da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <SystemClock_Config+0xe0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001500:	2308      	movs	r3, #8
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001504:	23b4      	movs	r3, #180	; 0xb4
 8001506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001508:	2302      	movs	r3, #2
 800150a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800150c:	2302      	movs	r3, #2
 800150e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001510:	2302      	movs	r3, #2
 8001512:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fb69 	bl	8004bf0 <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001524:	f000 fd4c 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< Updated upstream
 800150c:	f002 fe90 	bl	8004230 <HAL_PWREx_EnableOverDrive>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001516:	f000 fbff 	bl	8001d18 <Error_Handler>
=======
 8001528:	f003 f858 	bl	80045dc <HAL_PWREx_EnableOverDrive>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001532:	f000 fd45 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 800151a:	230f      	movs	r3, #15
 800151c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2302      	movs	r3, #2
 8001520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001526:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	2105      	movs	r1, #5
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fec9 	bl	80042d0 <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001544:	f000 fbe8 	bl	8001d18 <Error_Handler>
  }
}
 8001548:	bf00      	nop
 800154a:	3750      	adds	r7, #80	; 0x50
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <MX_SPI1_Init>:
=======
 8001536:	230f      	movs	r3, #15
 8001538:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001542:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2105      	movs	r1, #5
 8001554:	4618      	mov	r0, r3
 8001556:	f003 f891 	bl	800467c <HAL_RCC_ClockConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001560:	f000 fd2e 	bl	8001fc0 <Error_Handler>
  }
}
 8001564:	bf00      	nop
 8001566:	3750      	adds	r7, #80	; 0x50
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <MX_SPI1_Init>:
>>>>>>> Stashed changes
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
<<<<<<< Updated upstream
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
=======
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
<<<<<<< Updated upstream
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_SPI1_Init+0x64>)
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <MX_SPI1_Init+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_SPI1_Init+0x64>)
 8001564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_SPI1_Init+0x64>)
 8001584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001588:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SPI1_Init+0x64>)
 800158c:	2210      	movs	r2, #16
 800158e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SPI1_Init+0x64>)
 80015a4:	220a      	movs	r2, #10
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_SPI1_Init+0x64>)
 80015aa:	f003 fba5 	bl	8004cf8 <HAL_SPI_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015b4:	f000 fbb0 	bl	8001d18 <Error_Handler>
=======
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_SPI1_Init+0x64>)
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <MX_SPI1_Init+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_SPI1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a8:	2210      	movs	r2, #16
 80015aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c0:	220a      	movs	r2, #10
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c6:	f003 fd6d 	bl	80050a4 <HAL_SPI_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015d0:	f000 fcf6 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< Updated upstream
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000a54 	.word	0x20000a54
 80015c0:	40013000 	.word	0x40013000

080015c4 <MX_SPI3_Init>:
=======
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000ad4 	.word	0x20000ad4
 80015dc:	40013000 	.word	0x40013000

080015e0 <MX_SPI3_Init>:
>>>>>>> Stashed changes
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
<<<<<<< Updated upstream
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
=======
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
<<<<<<< Updated upstream
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_SPI3_Init+0x64>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <MX_SPI3_Init+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_SPI3_Init+0x64>)
 80015d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_SPI3_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_SPI3_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_SPI3_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_SPI3_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_SPI3_Init+0x64>)
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_SPI3_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_SPI3_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_SPI3_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_SPI3_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_SPI3_Init+0x64>)
 8001610:	220a      	movs	r2, #10
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_SPI3_Init+0x64>)
 8001616:	f003 fb6f 	bl	8004cf8 <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001620:	f000 fb7a 	bl	8001d18 <Error_Handler>
=======
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_SPI3_Init+0x64>)
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <MX_SPI3_Init+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_SPI3_Init+0x64>)
 80015ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_SPI3_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_SPI3_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_SPI3_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_SPI3_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_SPI3_Init+0x64>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_SPI3_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_SPI3_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_SPI3_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_SPI3_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_SPI3_Init+0x64>)
 800162c:	220a      	movs	r2, #10
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_SPI3_Init+0x64>)
 8001632:	f003 fd37 	bl	80050a4 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800163c:	f000 fcc0 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
<<<<<<< Updated upstream
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000740 	.word	0x20000740
 800162c:	40003c00 	.word	0x40003c00

08001630 <MX_UART5_Init>:
=======
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000780 	.word	0x20000780
 8001648:	40003c00 	.word	0x40003c00

0800164c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_TIM6_Init+0x64>)
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_TIM6_Init+0x68>)
 800165e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001662:	f242 3227 	movw	r2, #8999	; 0x2327
 8001666:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_TIM6_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001674:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_TIM6_Init+0x64>)
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <MX_TIM6_Init+0x64>)
 800167e:	f004 f8f7 	bl	8005870 <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001688:	f000 fc9a 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM6_Init+0x64>)
 800169a:	f004 fb33 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016a4:	f000 fc8c 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000095c 	.word	0x2000095c
 80016b4:	40001000 	.word	0x40001000

080016b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM7_Init+0x64>)
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <MX_TIM7_Init+0x68>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_TIM7_Init+0x64>)
 80016ce:	f242 3227 	movw	r2, #8999	; 0x2327
 80016d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_TIM7_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_TIM7_Init+0x64>)
 80016dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_TIM7_Init+0x64>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_TIM7_Init+0x64>)
 80016ea:	f004 f8c1 	bl	8005870 <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80016f4:	f000 fc64 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_TIM7_Init+0x64>)
 8001706:	f004 fafd 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001710:	f000 fc56 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000101c 	.word	0x2000101c
 8001720:	40001400 	.word	0x40001400

08001724 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_TIM10_Init+0x40>)
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <MX_TIM10_Init+0x44>)
 800172c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_TIM10_Init+0x40>)
 8001730:	f242 3227 	movw	r2, #8999	; 0x2327
 8001734:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_TIM10_Init+0x40>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_TIM10_Init+0x40>)
 800173e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001742:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_TIM10_Init+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_TIM10_Init+0x40>)
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_TIM10_Init+0x40>)
 8001752:	f004 f88d 	bl	8005870 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800175c:	f000 fc30 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000414 	.word	0x20000414
 8001768:	40014400 	.word	0x40014400

0800176c <MX_UART5_Init>:
>>>>>>> Stashed changes
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
<<<<<<< Updated upstream
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
=======
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
<<<<<<< Updated upstream
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_UART5_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_UART5_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_UART5_Init+0x4c>)
 800163c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001640:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_UART5_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_UART5_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_UART5_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_UART5_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_UART5_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_UART5_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_UART5_Init+0x4c>)
 8001668:	f003 ff2c 	bl	80054c4 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001672:	f000 fb51 	bl	8001d18 <Error_Handler>
=======
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_UART5_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <MX_UART5_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_UART5_Init+0x4c>)
 8001778:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800177c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_UART5_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_UART5_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_UART5_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_UART5_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_UART5_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_UART5_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_UART5_Init+0x4c>)
 80017a4:	f004 fb3e 	bl	8005e24 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 fc07 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
<<<<<<< Updated upstream
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200007a0 	.word	0x200007a0
 8001680:	40005000 	.word	0x40005000

08001684 <MX_USART1_UART_Init>:
=======
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200007e0 	.word	0x200007e0
 80017bc:	40005000 	.word	0x40005000

080017c0 <MX_USART1_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< Updated upstream
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
=======
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< Updated upstream
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART1_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 8001690:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART1_UART_Init+0x4c>)
 80016bc:	f003 ff02 	bl	80054c4 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 fb27 	bl	8001d18 <Error_Handler>
=======
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART1_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017cc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80017d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f8:	f004 fb14 	bl	8005e24 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 fbdd 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< Updated upstream
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200008a8 	.word	0x200008a8
 80016d4:	40011000 	.word	0x40011000

080016d8 <MX_USART2_UART_Init>:
=======
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200008e8 	.word	0x200008e8
 8001810:	40011000 	.word	0x40011000

08001814 <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
=======
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< Updated upstream
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <MX_USART2_UART_Init+0x50>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016e4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80016e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 8001710:	f003 fed8 	bl	80054c4 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800171a:	f000 fafd 	bl	8001d18 <Error_Handler>
=======
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART2_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001820:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART2_UART_Init+0x4c>)
 800184c:	f004 faea 	bl	8005e24 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 fbb3 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< Updated upstream
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000ab8 	.word	0x20000ab8
 8001728:	40004400 	.word	0x40004400

0800172c <MX_USART3_UART_Init>:
=======
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000b38 	.word	0x20000b38
 8001864:	40004400 	.word	0x40004400

08001868 <MX_USART3_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
<<<<<<< Updated upstream
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
=======
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< Updated upstream
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART3_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001738:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001764:	f003 feae 	bl	80054c4 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f000 fad3 	bl	8001d18 <Error_Handler>
=======
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART3_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001874:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 80018a0:	f004 fac0 	bl	8005e24 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 fb89 	bl	8001fc0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< Updated upstream
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200001a4 	.word	0x200001a4
 800177c:	40004800 	.word	0x40004800

08001780 <MX_DMA_Init>:
=======
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001a4 	.word	0x200001a4
 80018b8:	40004800 	.word	0x40004800

080018bc <MX_DMA_Init>:
>>>>>>> Stashed changes

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
<<<<<<< Updated upstream
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_DMA_Init+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <MX_DMA_Init+0x88>)
 8001790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_DMA_Init+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_DMA_Init+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <MX_DMA_Init+0x88>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_DMA_Init+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
=======
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <MX_DMA_Init+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <MX_DMA_Init+0x88>)
 80018cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <MX_DMA_Init+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_DMA_Init+0x88>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <MX_DMA_Init+0x88>)
 80018e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_DMA_Init+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
<<<<<<< Updated upstream
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	200b      	movs	r0, #11
 80017c4:	f001 ff2d 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017c8:	200b      	movs	r0, #11
 80017ca:	f001 ff46 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	200c      	movs	r0, #12
 80017d4:	f001 ff25 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017d8:	200c      	movs	r0, #12
 80017da:	f001 ff3e 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2011      	movs	r0, #17
 80017e4:	f001 ff1d 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017e8:	2011      	movs	r0, #17
 80017ea:	f001 ff36 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	203a      	movs	r0, #58	; 0x3a
 80017f4:	f001 ff15 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017f8:	203a      	movs	r0, #58	; 0x3a
 80017fa:	f001 ff2e 	bl	800365a <HAL_NVIC_EnableIRQ>

}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <MX_GPIO_Init>:
=======
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	200b      	movs	r0, #11
 8001900:	f002 f865 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001904:	200b      	movs	r0, #11
 8001906:	f002 f87e 	bl	8003a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	200c      	movs	r0, #12
 8001910:	f002 f85d 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001914:	200c      	movs	r0, #12
 8001916:	f002 f876 	bl	8003a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2011      	movs	r0, #17
 8001920:	f002 f855 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001924:	2011      	movs	r0, #17
 8001926:	f002 f86e 	bl	8003a06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	203a      	movs	r0, #58	; 0x3a
 8001930:	f002 f84d 	bl	80039ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001934:	203a      	movs	r0, #58	; 0x3a
 8001936:	f002 f866 	bl	8003a06 <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b5e      	ldr	r3, [pc, #376]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a5d      	ldr	r2, [pc, #372]	; (80019a0 <MX_GPIO_Init+0x194>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b54      	ldr	r3, [pc, #336]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a4f      	ldr	r2, [pc, #316]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <MX_GPIO_Init+0x194>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <MX_GPIO_Init+0x194>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <MX_GPIO_Init+0x194>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001898:	4842      	ldr	r0, [pc, #264]	; (80019a4 <MX_GPIO_Init+0x198>)
 800189a:	f002 fcaf 	bl	80041fc <HAL_GPIO_WritePin>
=======
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <MX_GPIO_Init+0x194>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <MX_GPIO_Init+0x194>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <MX_GPIO_Init+0x194>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <MX_GPIO_Init+0x194>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a56      	ldr	r2, [pc, #344]	; (8001adc <MX_GPIO_Init+0x194>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <MX_GPIO_Init+0x194>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b50      	ldr	r3, [pc, #320]	; (8001adc <MX_GPIO_Init+0x194>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a4f      	ldr	r2, [pc, #316]	; (8001adc <MX_GPIO_Init+0x194>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <MX_GPIO_Init+0x194>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <MX_GPIO_Init+0x194>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a48      	ldr	r2, [pc, #288]	; (8001adc <MX_GPIO_Init+0x194>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <MX_GPIO_Init+0x194>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80019d4:	4842      	ldr	r0, [pc, #264]	; (8001ae0 <MX_GPIO_Init+0x198>)
 80019d6:	f002 fde7 	bl	80045a8 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
<<<<<<< Updated upstream
 800189e:	2200      	movs	r2, #0
 80018a0:	f248 0112 	movw	r1, #32786	; 0x8012
 80018a4:	4840      	ldr	r0, [pc, #256]	; (80019a8 <MX_GPIO_Init+0x19c>)
 80018a6:	f002 fca9 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f246 0142 	movw	r1, #24642	; 0x6042
 80018b0:	483e      	ldr	r0, [pc, #248]	; (80019ac <MX_GPIO_Init+0x1a0>)
 80018b2:	f002 fca3 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018bc:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <MX_GPIO_Init+0x1a4>)
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4836      	ldr	r0, [pc, #216]	; (80019a4 <MX_GPIO_Init+0x198>)
 80018cc:	f002 faec 	bl	8003ea8 <HAL_GPIO_Init>
=======
 80019da:	2200      	movs	r2, #0
 80019dc:	f248 0112 	movw	r1, #32786	; 0x8012
 80019e0:	4840      	ldr	r0, [pc, #256]	; (8001ae4 <MX_GPIO_Init+0x19c>)
 80019e2:	f002 fde1 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f246 0142 	movw	r1, #24642	; 0x6042
 80019ec:	483e      	ldr	r0, [pc, #248]	; (8001ae8 <MX_GPIO_Init+0x1a0>)
 80019ee:	f002 fddb 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f8:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <MX_GPIO_Init+0x1a4>)
 80019fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4836      	ldr	r0, [pc, #216]	; (8001ae0 <MX_GPIO_Init+0x198>)
 8001a08:	f002 fc24 	bl	8004254 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
<<<<<<< Updated upstream
 80018d0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80018d4:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	482e      	ldr	r0, [pc, #184]	; (80019a4 <MX_GPIO_Init+0x198>)
 80018ea:	f002 fadd 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 80018ee:	f240 4301 	movw	r3, #1025	; 0x401
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4829      	ldr	r0, [pc, #164]	; (80019a8 <MX_GPIO_Init+0x19c>)
 8001904:	f002 fad0 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001908:	f248 0312 	movw	r3, #32786	; 0x8012
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <MX_GPIO_Init+0x19c>)
 8001922:	f002 fac1 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001926:	2302      	movs	r3, #2
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192e:	2301      	movs	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	481b      	ldr	r0, [pc, #108]	; (80019ac <MX_GPIO_Init+0x1a0>)
 800193e:	f002 fab3 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8001942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	2301      	movs	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <MX_GPIO_Init+0x1a0>)
 800195c:	f002 faa4 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8001960:	f244 0340 	movw	r3, #16448	; 0x4040
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <MX_GPIO_Init+0x1a0>)
 800197a:	f002 fa95 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800197e:	2338      	movs	r3, #56	; 0x38
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4806      	ldr	r0, [pc, #24]	; (80019ac <MX_GPIO_Init+0x1a0>)
 8001992:	f002 fa89 	bl	8003ea8 <HAL_GPIO_Init>

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	10210000 	.word	0x10210000

080019b4 <HAL_UART_RxCpltCallback>:
=======
 8001a0c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001a10:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	482e      	ldr	r0, [pc, #184]	; (8001ae0 <MX_GPIO_Init+0x198>)
 8001a26:	f002 fc15 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8001a2a:	f240 4301 	movw	r3, #1025	; 0x401
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4829      	ldr	r0, [pc, #164]	; (8001ae4 <MX_GPIO_Init+0x19c>)
 8001a40:	f002 fc08 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001a44:	f248 0312 	movw	r3, #32786	; 0x8012
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4821      	ldr	r0, [pc, #132]	; (8001ae4 <MX_GPIO_Init+0x19c>)
 8001a5e:	f002 fbf9 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a62:	2302      	movs	r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	481b      	ldr	r0, [pc, #108]	; (8001ae8 <MX_GPIO_Init+0x1a0>)
 8001a7a:	f002 fbeb 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4814      	ldr	r0, [pc, #80]	; (8001ae8 <MX_GPIO_Init+0x1a0>)
 8001a98:	f002 fbdc 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8001a9c:	f244 0340 	movw	r3, #16448	; 0x4040
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_GPIO_Init+0x1a0>)
 8001ab6:	f002 fbcd 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001aba:	2338      	movs	r3, #56	; 0x38
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_GPIO_Init+0x1a0>)
 8001ace:	f002 fbc1 	bl	8004254 <HAL_GPIO_Init>

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	10210000 	.word	0x10210000

08001af0 <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

if(huart==&huart3)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4aa6      	ldr	r2, [pc, #664]	; (8001c58 <HAL_UART_RxCpltCallback+0x2a4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d120      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0x52>
{

if(package[0][0]!=0x68)
 80019c4:	4ba5      	ldr	r3, [pc, #660]	; (8001c5c <HAL_UART_RxCpltCallback+0x2a8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b68      	cmp	r3, #104	; 0x68
 80019ca:	d006      	beq.n	80019da <HAL_UART_RxCpltCallback+0x26>
{
	readFlag=1;
 80019cc:	4ba4      	ldr	r3, [pc, #656]	; (8001c60 <HAL_UART_RxCpltCallback+0x2ac>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
	UsartCount=0;
 80019d2:	4ba4      	ldr	r3, [pc, #656]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_UART_RxCpltCallback+0x52>
=======
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]


if(huart==&huart3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4aa2      	ldr	r2, [pc, #648]	; (8001d84 <HAL_UART_RxCpltCallback+0x294>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d12e      	bne.n	8001b5e <HAL_UART_RxCpltCallback+0x6e>
{
	HAL_TIM_Base_Stop_IT(&htim6);
 8001b00:	48a1      	ldr	r0, [pc, #644]	; (8001d88 <HAL_UART_RxCpltCallback+0x298>)
 8001b02:	f003 ff04 	bl	800590e <HAL_TIM_Base_Stop_IT>
	TIM6->CNT=0;
 8001b06:	4ba1      	ldr	r3, [pc, #644]	; (8001d8c <HAL_UART_RxCpltCallback+0x29c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2102      	movs	r1, #2
 8001b10:	489f      	ldr	r0, [pc, #636]	; (8001d90 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b12:	f002 fd49 	bl	80045a8 <HAL_GPIO_WritePin>
if(package[0][0]!=0x68)
 8001b16:	4b9f      	ldr	r3, [pc, #636]	; (8001d94 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b68      	cmp	r3, #104	; 0x68
 8001b1c:	d006      	beq.n	8001b2c <HAL_UART_RxCpltCallback+0x3c>
{
	readFlag=1;
 8001b1e:	4b9e      	ldr	r3, [pc, #632]	; (8001d98 <HAL_UART_RxCpltCallback+0x2a8>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
	UsartCount=0;
 8001b24:	4b9d      	ldr	r3, [pc, #628]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e015      	b.n	8001b58 <HAL_UART_RxCpltCallback+0x68>
>>>>>>> Stashed changes

}else
{
	for(uint8_t i=0;i<9;i++)
<<<<<<< Updated upstream
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
 80019de:	e009      	b.n	80019f4 <HAL_UART_RxCpltCallback+0x40>
	{
		packageCut[0][i]=package[0][i+4];
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	1d1a      	adds	r2, r3, #4
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	499d      	ldr	r1, [pc, #628]	; (8001c5c <HAL_UART_RxCpltCallback+0x2a8>)
 80019e8:	5c89      	ldrb	r1, [r1, r2]
 80019ea:	4a9f      	ldr	r2, [pc, #636]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 80019ec:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	3301      	adds	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d9f2      	bls.n	80019e0 <HAL_UART_RxCpltCallback+0x2c>
	}
	UsartCount++;
 80019fa:	4b9a      	ldr	r3, [pc, #616]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b98      	ldr	r3, [pc, #608]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001a04:	701a      	strb	r2, [r3, #0]

}
}
if(huart==&huart1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <HAL_UART_RxCpltCallback+0x2b8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d123      	bne.n	8001a56 <HAL_UART_RxCpltCallback+0xa2>
{

	if(package[2][0]!=0x68)
 8001a0e:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <HAL_UART_RxCpltCallback+0x2a8>)
 8001a10:	7f1b      	ldrb	r3, [r3, #28]
 8001a12:	2b68      	cmp	r3, #104	; 0x68
 8001a14:	d006      	beq.n	8001a24 <HAL_UART_RxCpltCallback+0x70>
	{
		readFlag2=1;
 8001a16:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_UART_RxCpltCallback+0x2bc>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001a1c:	4b91      	ldr	r3, [pc, #580]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e018      	b.n	8001a56 <HAL_UART_RxCpltCallback+0xa2>
=======
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	75fb      	strb	r3, [r7, #23]
 8001b30:	e009      	b.n	8001b46 <HAL_UART_RxCpltCallback+0x56>
	{
		packageCut[0][i]=package[0][i+4];
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	4996      	ldr	r1, [pc, #600]	; (8001d94 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b3a:	5c89      	ldrb	r1, [r1, r2]
 8001b3c:	4a98      	ldr	r2, [pc, #608]	; (8001da0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001b3e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	3301      	adds	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d9f2      	bls.n	8001b32 <HAL_UART_RxCpltCallback+0x42>
	}
	UsartCount++;
 8001b4c:	4b93      	ldr	r3, [pc, #588]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001b56:	701a      	strb	r2, [r3, #0]

}
HAL_TIM_Base_Start_IT(&htim6);
 8001b58:	488b      	ldr	r0, [pc, #556]	; (8001d88 <HAL_UART_RxCpltCallback+0x298>)
 8001b5a:	f003 feb4 	bl	80058c6 <HAL_TIM_Base_Start_IT>
}
if(huart==&huart1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a90      	ldr	r2, [pc, #576]	; (8001da4 <HAL_UART_RxCpltCallback+0x2b4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d131      	bne.n	8001bca <HAL_UART_RxCpltCallback+0xda>
{
	HAL_TIM_Base_Stop_IT(&htim7);
 8001b66:	4890      	ldr	r0, [pc, #576]	; (8001da8 <HAL_UART_RxCpltCallback+0x2b8>)
 8001b68:	f003 fed1 	bl	800590e <HAL_TIM_Base_Stop_IT>
	TIM7->CNT=0;
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <HAL_UART_RxCpltCallback+0x2bc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2104      	movs	r1, #4
 8001b76:	4886      	ldr	r0, [pc, #536]	; (8001d90 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b78:	f002 fd16 	bl	80045a8 <HAL_GPIO_WritePin>
	if(package[2][0]!=0x68)
 8001b7c:	4b85      	ldr	r3, [pc, #532]	; (8001d94 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b7e:	7f1b      	ldrb	r3, [r3, #28]
 8001b80:	2b68      	cmp	r3, #104	; 0x68
 8001b82:	d006      	beq.n	8001b92 <HAL_UART_RxCpltCallback+0xa2>
	{
		readFlag2=1;
 8001b84:	4b8a      	ldr	r3, [pc, #552]	; (8001db0 <HAL_UART_RxCpltCallback+0x2c0>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001b8a:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e018      	b.n	8001bc4 <HAL_UART_RxCpltCallback+0xd4>
>>>>>>> Stashed changes

	}else
	{
		for(uint8_t i=0;i<9;i++)
<<<<<<< Updated upstream
 8001a24:	2300      	movs	r3, #0
 8001a26:	75bb      	strb	r3, [r7, #22]
 8001a28:	e00c      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x90>
		{
			packageCut[2][i]=package[2][i+4];
 8001a2a:	7dbb      	ldrb	r3, [r7, #22]
 8001a2c:	1d1a      	adds	r2, r3, #4
 8001a2e:	7dbb      	ldrb	r3, [r7, #22]
 8001a30:	498a      	ldr	r1, [pc, #552]	; (8001c5c <HAL_UART_RxCpltCallback+0x2a8>)
 8001a32:	440a      	add	r2, r1
 8001a34:	7f11      	ldrb	r1, [r2, #28]
 8001a36:	4a8c      	ldr	r2, [pc, #560]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 8001a3e:	7dbb      	ldrb	r3, [r7, #22]
 8001a40:	3301      	adds	r3, #1
 8001a42:	75bb      	strb	r3, [r7, #22]
 8001a44:	7dbb      	ldrb	r3, [r7, #22]
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d9ef      	bls.n	8001a2a <HAL_UART_RxCpltCallback+0x76>
		}
		UsartCount++;
 8001a4a:	4b86      	ldr	r3, [pc, #536]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b84      	ldr	r3, [pc, #528]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001a54:	701a      	strb	r2, [r3, #0]
	}
=======
 8001b92:	2300      	movs	r3, #0
 8001b94:	75bb      	strb	r3, [r7, #22]
 8001b96:	e00c      	b.n	8001bb2 <HAL_UART_RxCpltCallback+0xc2>
		{
			packageCut[2][i]=package[2][i+4];
 8001b98:	7dbb      	ldrb	r3, [r7, #22]
 8001b9a:	1d1a      	adds	r2, r3, #4
 8001b9c:	7dbb      	ldrb	r3, [r7, #22]
 8001b9e:	497d      	ldr	r1, [pc, #500]	; (8001d94 <HAL_UART_RxCpltCallback+0x2a4>)
 8001ba0:	440a      	add	r2, r1
 8001ba2:	7f11      	ldrb	r1, [r2, #28]
 8001ba4:	4a7e      	ldr	r2, [pc, #504]	; (8001da0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	460a      	mov	r2, r1
 8001baa:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 8001bac:	7dbb      	ldrb	r3, [r7, #22]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	75bb      	strb	r3, [r7, #22]
 8001bb2:	7dbb      	ldrb	r3, [r7, #22]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d9ef      	bls.n	8001b98 <HAL_UART_RxCpltCallback+0xa8>
		}
		UsartCount++;
 8001bb8:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001bc2:	701a      	strb	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(&htim7);
 8001bc4:	4878      	ldr	r0, [pc, #480]	; (8001da8 <HAL_UART_RxCpltCallback+0x2b8>)
 8001bc6:	f003 fe7e 	bl	80058c6 <HAL_TIM_Base_Start_IT>
>>>>>>> Stashed changes

}

if(huart==&huart5)
<<<<<<< Updated upstream
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a86      	ldr	r2, [pc, #536]	; (8001c74 <HAL_UART_RxCpltCallback+0x2c0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d123      	bne.n	8001aa6 <HAL_UART_RxCpltCallback+0xf2>
{

	if(package[1][0]!=0x68)
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_UART_RxCpltCallback+0x2a8>)
 8001a60:	7b9b      	ldrb	r3, [r3, #14]
 8001a62:	2b68      	cmp	r3, #104	; 0x68
 8001a64:	d006      	beq.n	8001a74 <HAL_UART_RxCpltCallback+0xc0>
	{
		readFlag3=1;
 8001a66:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_UART_RxCpltCallback+0x2c4>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001a6c:	4b7d      	ldr	r3, [pc, #500]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	e018      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0xf2>
=======
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <HAL_UART_RxCpltCallback+0x2c4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d131      	bne.n	8001c36 <HAL_UART_RxCpltCallback+0x146>
{
	HAL_TIM_Base_Stop_IT(&htim10);
 8001bd2:	4879      	ldr	r0, [pc, #484]	; (8001db8 <HAL_UART_RxCpltCallback+0x2c8>)
 8001bd4:	f003 fe9b 	bl	800590e <HAL_TIM_Base_Stop_IT>
	TIM10->CNT=0;
 8001bd8:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <HAL_UART_RxCpltCallback+0x2cc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2108      	movs	r1, #8
 8001be2:	486b      	ldr	r0, [pc, #428]	; (8001d90 <HAL_UART_RxCpltCallback+0x2a0>)
 8001be4:	f002 fce0 	bl	80045a8 <HAL_GPIO_WritePin>
	if(package[1][0]!=0x68)
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bea:	7b9b      	ldrb	r3, [r3, #14]
 8001bec:	2b68      	cmp	r3, #104	; 0x68
 8001bee:	d006      	beq.n	8001bfe <HAL_UART_RxCpltCallback+0x10e>
	{
		readFlag3=1;
 8001bf0:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <HAL_UART_RxCpltCallback+0x2d0>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001bf6:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	e018      	b.n	8001c30 <HAL_UART_RxCpltCallback+0x140>
>>>>>>> Stashed changes

	}else
	{
		for(uint8_t i=0;i<9;i++)
<<<<<<< Updated upstream
 8001a74:	2300      	movs	r3, #0
 8001a76:	757b      	strb	r3, [r7, #21]
 8001a78:	e00c      	b.n	8001a94 <HAL_UART_RxCpltCallback+0xe0>
		{
			packageCut[1][i]=package[1][i+4];
 8001a7a:	7d7b      	ldrb	r3, [r7, #21]
 8001a7c:	1d1a      	adds	r2, r3, #4
 8001a7e:	7d7b      	ldrb	r3, [r7, #21]
 8001a80:	4976      	ldr	r1, [pc, #472]	; (8001c5c <HAL_UART_RxCpltCallback+0x2a8>)
 8001a82:	440a      	add	r2, r1
 8001a84:	7b91      	ldrb	r1, [r2, #14]
 8001a86:	4a78      	ldr	r2, [pc, #480]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 8001a8e:	7d7b      	ldrb	r3, [r7, #21]
 8001a90:	3301      	adds	r3, #1
 8001a92:	757b      	strb	r3, [r7, #21]
 8001a94:	7d7b      	ldrb	r3, [r7, #21]
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d9ef      	bls.n	8001a7a <HAL_UART_RxCpltCallback+0xc6>
		}
		UsartCount++;
 8001a9a:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b70      	ldr	r3, [pc, #448]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001aa4:	701a      	strb	r2, [r3, #0]

	}

}
if(UsartCount==3 && readFlag==0 && readFlag2==0 && readFlag3==0)  // Получено 1 измерение с каждого датчика
 8001aa6:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	f040 811c 	bne.w	8001ce8 <HAL_UART_RxCpltCallback+0x334>
 8001ab0:	4b6b      	ldr	r3, [pc, #428]	; (8001c60 <HAL_UART_RxCpltCallback+0x2ac>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 8117 	bne.w	8001ce8 <HAL_UART_RxCpltCallback+0x334>
 8001aba:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_UART_RxCpltCallback+0x2bc>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 8112 	bne.w	8001ce8 <HAL_UART_RxCpltCallback+0x334>
 8001ac4:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <HAL_UART_RxCpltCallback+0x2c4>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 810d 	bne.w	8001ce8 <HAL_UART_RxCpltCallback+0x334>
{
	UsartCount=0;
 8001ace:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]


if(pr==0)
 8001ad4:	4b69      	ldr	r3, [pc, #420]	; (8001c7c <HAL_UART_RxCpltCallback+0x2c8>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d174      	bne.n	8001bc6 <HAL_UART_RxCpltCallback+0x212>
=======
 8001bfe:	2300      	movs	r3, #0
 8001c00:	757b      	strb	r3, [r7, #21]
 8001c02:	e00c      	b.n	8001c1e <HAL_UART_RxCpltCallback+0x12e>
		{
			packageCut[1][i]=package[1][i+4];
 8001c04:	7d7b      	ldrb	r3, [r7, #21]
 8001c06:	1d1a      	adds	r2, r3, #4
 8001c08:	7d7b      	ldrb	r3, [r7, #21]
 8001c0a:	4962      	ldr	r1, [pc, #392]	; (8001d94 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c0c:	440a      	add	r2, r1
 8001c0e:	7b91      	ldrb	r1, [r2, #14]
 8001c10:	4a63      	ldr	r2, [pc, #396]	; (8001da0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001c12:	4413      	add	r3, r2
 8001c14:	460a      	mov	r2, r1
 8001c16:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 8001c18:	7d7b      	ldrb	r3, [r7, #21]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	757b      	strb	r3, [r7, #21]
 8001c1e:	7d7b      	ldrb	r3, [r7, #21]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d9ef      	bls.n	8001c04 <HAL_UART_RxCpltCallback+0x114>
		}
		UsartCount++;
 8001c24:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001c2e:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim10);
 8001c30:	4861      	ldr	r0, [pc, #388]	; (8001db8 <HAL_UART_RxCpltCallback+0x2c8>)
 8001c32:	f003 fe48 	bl	80058c6 <HAL_TIM_Base_Start_IT>
}
if(UsartCount==3 && readFlag==0 && readFlag2==0 && readFlag3==0)  // Получено 1 измерение с каждого датчика
 8001c36:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	f040 812b 	bne.w	8001e96 <HAL_UART_RxCpltCallback+0x3a6>
 8001c40:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <HAL_UART_RxCpltCallback+0x2a8>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 8126 	bne.w	8001e96 <HAL_UART_RxCpltCallback+0x3a6>
 8001c4a:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_UART_RxCpltCallback+0x2c0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 8121 	bne.w	8001e96 <HAL_UART_RxCpltCallback+0x3a6>
 8001c54:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_UART_RxCpltCallback+0x2d0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 811c 	bne.w	8001e96 <HAL_UART_RxCpltCallback+0x3a6>
{
	UsartCount=0;
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_UART_RxCpltCallback+0x2ac>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]


if(pr==0)
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <HAL_UART_RxCpltCallback+0x2d4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d174      	bne.n	8001d56 <HAL_UART_RxCpltCallback+0x266>
>>>>>>> Stashed changes
{



	reciveTime = HAL_GetTick();
<<<<<<< Updated upstream
 8001adc:	f001 fc98 	bl	8003410 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_UART_RxCpltCallback+0x2cc>)
 8001ae4:	601a      	str	r2, [r3, #0]

	uint32_TO_charmass(reciveTime, Buff_Mid, CountOfAccel*36, 8);
 8001ae6:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <HAL_UART_RxCpltCallback+0x2cc>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	00d2      	lsls	r2, r2, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	2308      	movs	r3, #8
 8001afc:	4962      	ldr	r1, [pc, #392]	; (8001c88 <HAL_UART_RxCpltCallback+0x2d4>)
 8001afe:	f7ff fb75 	bl	80011ec <uint32_TO_charmass>
	for(uint8_t i=0;i<9;i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	753b      	strb	r3, [r7, #20]
 8001b06:	e012      	b.n	8001b2e <HAL_UART_RxCpltCallback+0x17a>
	{
		Buff_Mid[i+9+36*CountOfAccel]=packageCut[0][i];
 8001b08:	7d3a      	ldrb	r2, [r7, #20]
 8001b0a:	7d3b      	ldrb	r3, [r7, #20]
 8001b0c:	f103 0109 	add.w	r1, r3, #9
 8001b10:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4403      	add	r3, r0
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	4951      	ldr	r1, [pc, #324]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001b22:	5c89      	ldrb	r1, [r1, r2]
 8001b24:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_UART_RxCpltCallback+0x2d4>)
 8001b26:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001b28:	7d3b      	ldrb	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	753b      	strb	r3, [r7, #20]
 8001b2e:	7d3b      	ldrb	r3, [r7, #20]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d9e9      	bls.n	8001b08 <HAL_UART_RxCpltCallback+0x154>

	}
	for(uint8_t i=0;i<9;i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	74fb      	strb	r3, [r7, #19]
 8001b38:	e013      	b.n	8001b62 <HAL_UART_RxCpltCallback+0x1ae>
	{
		Buff_Mid[i+18+36*CountOfAccel]=packageCut[1][i];
 8001b3a:	7cfa      	ldrb	r2, [r7, #19]
 8001b3c:	7cfb      	ldrb	r3, [r7, #19]
 8001b3e:	f103 0112 	add.w	r1, r3, #18
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	4603      	mov	r3, r0
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4403      	add	r3, r0
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	4945      	ldr	r1, [pc, #276]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001b54:	440a      	add	r2, r1
 8001b56:	7a51      	ldrb	r1, [r2, #9]
 8001b58:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <HAL_UART_RxCpltCallback+0x2d4>)
 8001b5a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001b5c:	7cfb      	ldrb	r3, [r7, #19]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	74fb      	strb	r3, [r7, #19]
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d9e8      	bls.n	8001b3a <HAL_UART_RxCpltCallback+0x186>

	}
	for(uint8_t i=0;i<9;i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	74bb      	strb	r3, [r7, #18]
 8001b6c:	e013      	b.n	8001b96 <HAL_UART_RxCpltCallback+0x1e2>
	{
		Buff_Mid[i+27+36*CountOfAccel]=packageCut[2][i];
 8001b6e:	7cba      	ldrb	r2, [r7, #18]
 8001b70:	7cbb      	ldrb	r3, [r7, #18]
 8001b72:	f103 011b 	add.w	r1, r3, #27
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4403      	add	r3, r0
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	4938      	ldr	r1, [pc, #224]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001b88:	440a      	add	r2, r1
 8001b8a:	7c91      	ldrb	r1, [r2, #18]
 8001b8c:	4a3e      	ldr	r2, [pc, #248]	; (8001c88 <HAL_UART_RxCpltCallback+0x2d4>)
 8001b8e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001b90:	7cbb      	ldrb	r3, [r7, #18]
 8001b92:	3301      	adds	r3, #1
 8001b94:	74bb      	strb	r3, [r7, #18]
 8001b96:	7cbb      	ldrb	r3, [r7, #18]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d9e8      	bls.n	8001b6e <HAL_UART_RxCpltCallback+0x1ba>
=======
 8001c6c:	f001 fda6 	bl	80037bc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001c74:	601a      	str	r2, [r3, #0]

	uint32_TO_charmass(reciveTime, Buff_Mid, CountOfAccel*36, 8);
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	00d2      	lsls	r2, r2, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	4950      	ldr	r1, [pc, #320]	; (8001dd0 <HAL_UART_RxCpltCallback+0x2e0>)
 8001c8e:	f7ff faad 	bl	80011ec <uint32_TO_charmass>
	for(uint8_t i=0;i<9;i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	753b      	strb	r3, [r7, #20]
 8001c96:	e012      	b.n	8001cbe <HAL_UART_RxCpltCallback+0x1ce>
	{
		Buff_Mid[i+9+36*CountOfAccel]=packageCut[0][i];
 8001c98:	7d3a      	ldrb	r2, [r7, #20]
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	f103 0109 	add.w	r1, r3, #9
 8001ca0:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4403      	add	r3, r0
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	493b      	ldr	r1, [pc, #236]	; (8001da0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001cb2:	5c89      	ldrb	r1, [r1, r2]
 8001cb4:	4a46      	ldr	r2, [pc, #280]	; (8001dd0 <HAL_UART_RxCpltCallback+0x2e0>)
 8001cb6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001cb8:	7d3b      	ldrb	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	753b      	strb	r3, [r7, #20]
 8001cbe:	7d3b      	ldrb	r3, [r7, #20]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d9e9      	bls.n	8001c98 <HAL_UART_RxCpltCallback+0x1a8>

	}
	for(uint8_t i=0;i<9;i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	74fb      	strb	r3, [r7, #19]
 8001cc8:	e013      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x202>
	{
		Buff_Mid[i+18+36*CountOfAccel]=packageCut[1][i];
 8001cca:	7cfa      	ldrb	r2, [r7, #19]
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	f103 0112 	add.w	r1, r3, #18
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4403      	add	r3, r0
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	492f      	ldr	r1, [pc, #188]	; (8001da0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001ce4:	440a      	add	r2, r1
 8001ce6:	7a51      	ldrb	r1, [r2, #9]
 8001ce8:	4a39      	ldr	r2, [pc, #228]	; (8001dd0 <HAL_UART_RxCpltCallback+0x2e0>)
 8001cea:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	74fb      	strb	r3, [r7, #19]
 8001cf2:	7cfb      	ldrb	r3, [r7, #19]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d9e8      	bls.n	8001cca <HAL_UART_RxCpltCallback+0x1da>

	}
	for(uint8_t i=0;i<9;i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	74bb      	strb	r3, [r7, #18]
 8001cfc:	e013      	b.n	8001d26 <HAL_UART_RxCpltCallback+0x236>
	{
		Buff_Mid[i+27+36*CountOfAccel]=packageCut[2][i];
 8001cfe:	7cba      	ldrb	r2, [r7, #18]
 8001d00:	7cbb      	ldrb	r3, [r7, #18]
 8001d02:	f103 011b 	add.w	r1, r3, #27
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4403      	add	r3, r0
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	4922      	ldr	r1, [pc, #136]	; (8001da0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001d18:	440a      	add	r2, r1
 8001d1a:	7c91      	ldrb	r1, [r2, #18]
 8001d1c:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_UART_RxCpltCallback+0x2e0>)
 8001d1e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001d20:	7cbb      	ldrb	r3, [r7, #18]
 8001d22:	3301      	adds	r3, #1
 8001d24:	74bb      	strb	r3, [r7, #18]
 8001d26:	7cbb      	ldrb	r3, [r7, #18]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d9e8      	bls.n	8001cfe <HAL_UART_RxCpltCallback+0x20e>
>>>>>>> Stashed changes

	}



	CountOfAccel++;
<<<<<<< Updated upstream
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001ba6:	701a      	strb	r2, [r3, #0]


	if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	f040 809b 	bne.w	8001ce8 <HAL_UART_RxCpltCallback+0x334>
	{
		CountOfAccel=0;
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
		metka=1;
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_UART_RxCpltCallback+0x2d8>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
		pr=1;
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_UART_RxCpltCallback+0x2c8>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
=======
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001d36:	701a      	strb	r2, [r3, #0]


	if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b07      	cmp	r3, #7
 8001d3e:	f040 80aa 	bne.w	8001e96 <HAL_UART_RxCpltCallback+0x3a6>
	{
		CountOfAccel=0;
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
		metka=1;
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
		pr=1;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_UART_RxCpltCallback+0x2d4>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
}


}

}
<<<<<<< Updated upstream
 8001bc4:	e090      	b.n	8001ce8 <HAL_UART_RxCpltCallback+0x334>
	reciveTime = HAL_GetTick();
 8001bc6:	f001 fc23 	bl	8003410 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_UART_RxCpltCallback+0x2cc>)
 8001bce:	601a      	str	r2, [r3, #0]
	uint32_TO_charmass(reciveTime, Buff_Top, CountOfAccel*36, 8);
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_UART_RxCpltCallback+0x2cc>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	00d2      	lsls	r2, r2, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	2308      	movs	r3, #8
 8001be6:	492a      	ldr	r1, [pc, #168]	; (8001c90 <HAL_UART_RxCpltCallback+0x2dc>)
 8001be8:	f7ff fb00 	bl	80011ec <uint32_TO_charmass>
	for(uint8_t i=0;i<9;i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	747b      	strb	r3, [r7, #17]
 8001bf0:	e012      	b.n	8001c18 <HAL_UART_RxCpltCallback+0x264>
		Buff_Top[i+9+36*CountOfAccel]=packageCut[0][i];
 8001bf2:	7c7a      	ldrb	r2, [r7, #17]
 8001bf4:	7c7b      	ldrb	r3, [r7, #17]
 8001bf6:	f103 0109 	add.w	r1, r3, #9
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4603      	mov	r3, r0
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4403      	add	r3, r0
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	4917      	ldr	r1, [pc, #92]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001c0c:	5c89      	ldrb	r1, [r1, r2]
 8001c0e:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <HAL_UART_RxCpltCallback+0x2dc>)
 8001c10:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001c12:	7c7b      	ldrb	r3, [r7, #17]
 8001c14:	3301      	adds	r3, #1
 8001c16:	747b      	strb	r3, [r7, #17]
 8001c18:	7c7b      	ldrb	r3, [r7, #17]
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d9e9      	bls.n	8001bf2 <HAL_UART_RxCpltCallback+0x23e>
	for(uint8_t i=0;i<9;i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	743b      	strb	r3, [r7, #16]
 8001c22:	e013      	b.n	8001c4c <HAL_UART_RxCpltCallback+0x298>
		Buff_Top[i+18+36*CountOfAccel]=packageCut[1][i];
 8001c24:	7c3a      	ldrb	r2, [r7, #16]
 8001c26:	7c3b      	ldrb	r3, [r7, #16]
 8001c28:	f103 0112 	add.w	r1, r3, #18
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_UART_RxCpltCallback+0x2d0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4403      	add	r3, r0
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	490a      	ldr	r1, [pc, #40]	; (8001c68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001c3e:	440a      	add	r2, r1
 8001c40:	7a51      	ldrb	r1, [r2, #9]
 8001c42:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <HAL_UART_RxCpltCallback+0x2dc>)
 8001c44:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001c46:	7c3b      	ldrb	r3, [r7, #16]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	743b      	strb	r3, [r7, #16]
 8001c4c:	7c3b      	ldrb	r3, [r7, #16]
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d9e8      	bls.n	8001c24 <HAL_UART_RxCpltCallback+0x270>
	for(uint8_t i=0;i<9;i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e031      	b.n	8001cbc <HAL_UART_RxCpltCallback+0x308>
 8001c58:	200001a4 	.word	0x200001a4
 8001c5c:	200000a4 	.word	0x200000a4
 8001c60:	2000094c 	.word	0x2000094c
 8001c64:	200000f0 	.word	0x200000f0
 8001c68:	200000d0 	.word	0x200000d0
 8001c6c:	200008a8 	.word	0x200008a8
 8001c70:	20000924 	.word	0x20000924
 8001c74:	200007a0 	.word	0x200007a0
 8001c78:	2000011c 	.word	0x2000011c
 8001c7c:	200000f2 	.word	0x200000f2
 8001c80:	20000a50 	.word	0x20000a50
 8001c84:	200000f1 	.word	0x200000f1
 8001c88:	20000414 	.word	0x20000414
 8001c8c:	200000f3 	.word	0x200000f3
 8001c90:	20000954 	.word	0x20000954
		Buff_Top[i+27+36*CountOfAccel]=packageCut[2][i];
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	f103 011b 	add.w	r1, r3, #27
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_UART_RxCpltCallback+0x33c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4403      	add	r3, r0
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	4911      	ldr	r1, [pc, #68]	; (8001cf4 <HAL_UART_RxCpltCallback+0x340>)
 8001cae:	440a      	add	r2, r1
 8001cb0:	7c91      	ldrb	r1, [r2, #18]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_UART_RxCpltCallback+0x344>)
 8001cb4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d9e8      	bls.n	8001c94 <HAL_UART_RxCpltCallback+0x2e0>
	CountOfAccel++;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_UART_RxCpltCallback+0x33c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_UART_RxCpltCallback+0x33c>)
 8001ccc:	701a      	strb	r2, [r3, #0]
	if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_UART_RxCpltCallback+0x33c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b07      	cmp	r3, #7
 8001cd4:	d108      	bne.n	8001ce8 <HAL_UART_RxCpltCallback+0x334>
		CountOfAccel=0;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_UART_RxCpltCallback+0x33c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
		metka=1;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_UART_RxCpltCallback+0x348>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
		pr=0;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_UART_RxCpltCallback+0x34c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200000f1 	.word	0x200000f1
 8001cf4:	200000d0 	.word	0x200000d0
 8001cf8:	20000954 	.word	0x20000954
 8001cfc:	200000f3 	.word	0x200000f3
 8001d00:	200000f2 	.word	0x200000f2

08001d04 <HAL_UART_TxCpltCallback>:
=======
 8001d54:	e09f      	b.n	8001e96 <HAL_UART_RxCpltCallback+0x3a6>
	reciveTime = HAL_GetTick();
 8001d56:	f001 fd31 	bl	80037bc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d5e:	601a      	str	r2, [r3, #0]
	uint32_TO_charmass(reciveTime, Buff_Top, CountOfAccel*36, 8);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_UART_RxCpltCallback+0x2dc>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	00d2      	lsls	r2, r2, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	2308      	movs	r3, #8
 8001d76:	4918      	ldr	r1, [pc, #96]	; (8001dd8 <HAL_UART_RxCpltCallback+0x2e8>)
 8001d78:	f7ff fa38 	bl	80011ec <uint32_TO_charmass>
	for(uint8_t i=0;i<9;i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	747b      	strb	r3, [r7, #17]
 8001d80:	e03f      	b.n	8001e02 <HAL_UART_RxCpltCallback+0x312>
 8001d82:	bf00      	nop
 8001d84:	200001a4 	.word	0x200001a4
 8001d88:	2000095c 	.word	0x2000095c
 8001d8c:	40001000 	.word	0x40001000
 8001d90:	40020800 	.word	0x40020800
 8001d94:	200000a4 	.word	0x200000a4
 8001d98:	200009cc 	.word	0x200009cc
 8001d9c:	200000f0 	.word	0x200000f0
 8001da0:	200000d0 	.word	0x200000d0
 8001da4:	200008e8 	.word	0x200008e8
 8001da8:	2000101c 	.word	0x2000101c
 8001dac:	40001400 	.word	0x40001400
 8001db0:	200009a4 	.word	0x200009a4
 8001db4:	200007e0 	.word	0x200007e0
 8001db8:	20000414 	.word	0x20000414
 8001dbc:	40014400 	.word	0x40014400
 8001dc0:	2000011c 	.word	0x2000011c
 8001dc4:	200000f2 	.word	0x200000f2
 8001dc8:	20000ad0 	.word	0x20000ad0
 8001dcc:	200000f1 	.word	0x200000f1
 8001dd0:	20000454 	.word	0x20000454
 8001dd4:	200000f3 	.word	0x200000f3
 8001dd8:	200009d4 	.word	0x200009d4
		Buff_Top[i+9+36*CountOfAccel]=packageCut[0][i];
 8001ddc:	7c7a      	ldrb	r2, [r7, #17]
 8001dde:	7c7b      	ldrb	r3, [r7, #17]
 8001de0:	f103 0109 	add.w	r1, r3, #9
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4403      	add	r3, r0
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	492b      	ldr	r1, [pc, #172]	; (8001ea4 <HAL_UART_RxCpltCallback+0x3b4>)
 8001df6:	5c89      	ldrb	r1, [r1, r2]
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_UART_RxCpltCallback+0x3b8>)
 8001dfa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001dfc:	7c7b      	ldrb	r3, [r7, #17]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	747b      	strb	r3, [r7, #17]
 8001e02:	7c7b      	ldrb	r3, [r7, #17]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d9e9      	bls.n	8001ddc <HAL_UART_RxCpltCallback+0x2ec>
	for(uint8_t i=0;i<9;i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	743b      	strb	r3, [r7, #16]
 8001e0c:	e013      	b.n	8001e36 <HAL_UART_RxCpltCallback+0x346>
		Buff_Top[i+18+36*CountOfAccel]=packageCut[1][i];
 8001e0e:	7c3a      	ldrb	r2, [r7, #16]
 8001e10:	7c3b      	ldrb	r3, [r7, #16]
 8001e12:	f103 0112 	add.w	r1, r3, #18
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4403      	add	r3, r0
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	491f      	ldr	r1, [pc, #124]	; (8001ea4 <HAL_UART_RxCpltCallback+0x3b4>)
 8001e28:	440a      	add	r2, r1
 8001e2a:	7a51      	ldrb	r1, [r2, #9]
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_UART_RxCpltCallback+0x3b8>)
 8001e2e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001e30:	7c3b      	ldrb	r3, [r7, #16]
 8001e32:	3301      	adds	r3, #1
 8001e34:	743b      	strb	r3, [r7, #16]
 8001e36:	7c3b      	ldrb	r3, [r7, #16]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d9e8      	bls.n	8001e0e <HAL_UART_RxCpltCallback+0x31e>
	for(uint8_t i=0;i<9;i++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e013      	b.n	8001e6a <HAL_UART_RxCpltCallback+0x37a>
		Buff_Top[i+27+36*CountOfAccel]=packageCut[2][i];
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	f103 011b 	add.w	r1, r3, #27
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4403      	add	r3, r0
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	4912      	ldr	r1, [pc, #72]	; (8001ea4 <HAL_UART_RxCpltCallback+0x3b4>)
 8001e5c:	440a      	add	r2, r1
 8001e5e:	7c91      	ldrb	r1, [r2, #18]
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_UART_RxCpltCallback+0x3b8>)
 8001e62:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	3301      	adds	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d9e8      	bls.n	8001e42 <HAL_UART_RxCpltCallback+0x352>
	CountOfAccel++;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e7a:	701a      	strb	r2, [r3, #0]
	if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b07      	cmp	r3, #7
 8001e82:	d108      	bne.n	8001e96 <HAL_UART_RxCpltCallback+0x3a6>
		CountOfAccel=0;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
		metka=1;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_UART_RxCpltCallback+0x3bc>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
		pr=0;
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_UART_RxCpltCallback+0x3c0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200000f1 	.word	0x200000f1
 8001ea4:	200000d0 	.word	0x200000d0
 8001ea8:	200009d4 	.word	0x200009d4
 8001eac:	200000f3 	.word	0x200000f3
 8001eb0:	200000f2 	.word	0x200000f2

08001eb4 <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]


}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <Error_Handler>:
=======
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]


}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

	if(htim==&htim6)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d117      	bne.n	8001f08 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		TIM6->CNT=0;
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[0],0,9);
 8001ede:	2209      	movs	r2, #9
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4829      	ldr	r0, [pc, #164]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ee4:	f005 f830 	bl	8006f48 <memset>
		HAL_TIM_Base_Start_IT(&htim6);
 8001ee8:	4825      	ldr	r0, [pc, #148]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001eea:	f003 fcec 	bl	80058c6 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4826      	ldr	r0, [pc, #152]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ef4:	f002 fb58 	bl	80045a8 <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart3);
 8001ef8:	4825      	ldr	r0, [pc, #148]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001efa:	f004 f861 	bl	8005fc0 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001efe:	220e      	movs	r2, #14
 8001f00:	4924      	ldr	r1, [pc, #144]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f02:	4823      	ldr	r0, [pc, #140]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f04:	f003 ffdc 	bl	8005ec0 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim7)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d117      	bne.n	8001f40 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		TIM7->CNT=0;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[2],0,9);
 8001f16:	2209      	movs	r2, #9
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4821      	ldr	r0, [pc, #132]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f1c:	f005 f814 	bl	8006f48 <memset>
		HAL_TIM_Base_Start_IT(&htim7);
 8001f20:	481d      	ldr	r0, [pc, #116]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f22:	f003 fcd0 	bl	80058c6 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	2104      	movs	r1, #4
 8001f2a:	4818      	ldr	r0, [pc, #96]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f2c:	f002 fb3c 	bl	80045a8 <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart1);
 8001f30:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f32:	f004 f845 	bl	8005fc0 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8001f36:	220e      	movs	r2, #14
 8001f38:	491b      	ldr	r1, [pc, #108]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f3a:	481a      	ldr	r0, [pc, #104]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f3c:	f003 ffc0 	bl	8005ec0 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim10)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d117      	bne.n	8001f78 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		TIM10->CNT=0;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[1],0,9);
 8001f4e:	2209      	movs	r2, #9
 8001f50:	2100      	movs	r1, #0
 8001f52:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f54:	f004 fff8 	bl	8006f48 <memset>
		HAL_TIM_Base_Start_IT(&htim10);
 8001f58:	4814      	ldr	r0, [pc, #80]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f5a:	f003 fcb4 	bl	80058c6 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2108      	movs	r1, #8
 8001f62:	480a      	ldr	r0, [pc, #40]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f64:	f002 fb20 	bl	80045a8 <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart5);
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001f6a:	f004 f829 	bl	8005fc0 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001f6e:	220e      	movs	r2, #14
 8001f70:	4912      	ldr	r1, [pc, #72]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001f72:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001f74:	f003 ffa4 	bl	8005ec0 <HAL_UART_Receive_DMA>
	}



}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2000095c 	.word	0x2000095c
 8001f84:	40001000 	.word	0x40001000
 8001f88:	200000d0 	.word	0x200000d0
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	200001a4 	.word	0x200001a4
 8001f94:	200000a4 	.word	0x200000a4
 8001f98:	2000101c 	.word	0x2000101c
 8001f9c:	40001400 	.word	0x40001400
 8001fa0:	200000e2 	.word	0x200000e2
 8001fa4:	200008e8 	.word	0x200008e8
 8001fa8:	200000c0 	.word	0x200000c0
 8001fac:	20000414 	.word	0x20000414
 8001fb0:	40014400 	.word	0x40014400
 8001fb4:	200000d9 	.word	0x200000d9
 8001fb8:	200007e0 	.word	0x200007e0
 8001fbc:	200000b2 	.word	0x200000b2

08001fc0 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
=======
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< Updated upstream
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <SDCARD_Select>:
=======
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SDCARD_Select>:
>>>>>>> Stashed changes
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
<<<<<<< Updated upstream
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d32:	4802      	ldr	r0, [pc, #8]	; (8001d3c <SDCARD_Select+0x14>)
 8001d34:	f002 fa62 	bl	80041fc <HAL_GPIO_WritePin>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40020000 	.word	0x40020000

08001d40 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4a:	4802      	ldr	r0, [pc, #8]	; (8001d54 <SDCARD_Unselect+0x14>)
 8001d4c:	f002 fa56 	bl	80041fc <HAL_GPIO_WritePin>
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40020000 	.word	0x40020000

08001d58 <SDCARD_ReadR1>:
=======
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fda:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <SDCARD_Select+0x14>)
 8001fdc:	f002 fae4 	bl	80045a8 <HAL_GPIO_WritePin>
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff2:	4802      	ldr	r0, [pc, #8]	; (8001ffc <SDCARD_Unselect+0x14>)
 8001ff4:	f002 fad8 	bl	80045a8 <HAL_GPIO_WritePin>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40020000 	.word	0x40020000

08002000 <SDCARD_ReadR1>:
>>>>>>> Stashed changes
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
<<<<<<< Updated upstream
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001d5e:	23ff      	movs	r3, #255	; 0xff
 8001d60:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001d62:	1dfa      	adds	r2, r7, #7
 8001d64:	1db9      	adds	r1, r7, #6
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <SDCARD_ReadR1+0x34>)
 8001d70:	f003 f95a 	bl	8005028 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da00      	bge.n	8001d7e <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8001d7c:	e7f1      	b.n	8001d62 <SDCARD_ReadR1+0xa>
            break;
 8001d7e:	bf00      	nop
    }
    return r1;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000740 	.word	0x20000740

08001d90 <SDCARD_ReadBytes>:
=======
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8002006:	23ff      	movs	r3, #255	; 0xff
 8002008:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 800200a:	1dfa      	adds	r2, r7, #7
 800200c:	1db9      	adds	r1, r7, #6
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <SDCARD_ReadR1+0x34>)
 8002018:	f003 f9dc 	bl	80053d4 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	da00      	bge.n	8002026 <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8002024:	e7f1      	b.n	800200a <SDCARD_ReadR1+0xa>
            break;
 8002026:	bf00      	nop
    }
    return r1;
 8002028:	79fb      	ldrb	r3, [r7, #7]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000780 	.word	0x20000780

08002038 <SDCARD_ReadBytes>:
>>>>>>> Stashed changes
            return -1;
    }
    return 0;
}

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
<<<<<<< Updated upstream
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001d9a:	23ff      	movs	r3, #255	; 0xff
 8001d9c:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8001d9e:	e00f      	b.n	8001dc0 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8001da0:	f107 010f 	add.w	r1, r7, #15
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2301      	movs	r3, #1
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <SDCARD_ReadBytes+0x40>)
 8001db0:	f003 f93a 	bl	8005028 <HAL_SPI_TransmitReceive>
        buff++;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3301      	adds	r3, #1
 8001db8:	607b      	str	r3, [r7, #4]
        buff_size--;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ec      	bne.n	8001da0 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000740 	.word	0x20000740

08001dd4 <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	2101      	movs	r1, #1
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ffd6 	bl	8001d90 <SDCARD_ReadBytes>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da02      	bge.n	8001df0 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dee:	e003      	b.n	8001df8 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2bff      	cmp	r3, #255	; 0xff
 8001df4:	d1f1      	bne.n	8001dda <SDCARD_WaitNotBusy+0x6>

    return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <SDCARD_Init>:
 
int SDCARD_Init() {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
=======
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af02      	add	r7, sp, #8
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8002042:	23ff      	movs	r3, #255	; 0xff
 8002044:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8002046:	e00f      	b.n	8002068 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8002048:	f107 010f 	add.w	r1, r7, #15
 800204c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2301      	movs	r3, #1
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <SDCARD_ReadBytes+0x40>)
 8002058:	f003 f9bc 	bl	80053d4 <HAL_SPI_TransmitReceive>
        buff++;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3301      	adds	r3, #1
 8002060:	607b      	str	r3, [r7, #4]
        buff_size--;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ec      	bne.n	8002048 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000780 	.word	0x20000780

0800207c <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	2101      	movs	r1, #1
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ffd6 	bl	8002038 <SDCARD_ReadBytes>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	da02      	bge.n	8002098 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002096:	e003      	b.n	80020a0 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d1f1      	bne.n	8002082 <SDCARD_WaitNotBusy+0x6>

    return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <SDCARD_Init>:
 
int SDCARD_Init() {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
<<<<<<< Updated upstream
 8001e06:	f7ff ff9b 	bl	8001d40 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 8001e0a:	23ff      	movs	r3, #255	; 0xff
 8001e0c:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e00a      	b.n	8001e2a <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 8001e14:	f107 010a 	add.w	r1, r7, #10
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4868      	ldr	r0, [pc, #416]	; (8001fc0 <SDCARD_Init+0x1c0>)
 8001e20:	f002 ffce 	bl	8004dc0 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	ddf1      	ble.n	8001e14 <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 8001e30:	f7ff ff7a 	bl	8001d28 <SDCARD_Select>
=======
 80020ae:	f7ff ff9b 	bl	8001fe8 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 80020b2:	23ff      	movs	r3, #255	; 0xff
 80020b4:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e00a      	b.n	80020d2 <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 80020bc:	f107 010a 	add.w	r1, r7, #10
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c4:	2201      	movs	r2, #1
 80020c6:	4868      	ldr	r0, [pc, #416]	; (8002268 <SDCARD_Init+0x1c0>)
 80020c8:	f003 f850 	bl	800516c <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	ddf1      	ble.n	80020bc <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 80020d8:	f7ff ff7a 	bl	8001fd0 <SDCARD_Select>
>>>>>>> Stashed changes
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
<<<<<<< Updated upstream
 8001e34:	f7ff ffce 	bl	8001dd4 <SDCARD_WaitNotBusy>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da04      	bge.n	8001e48 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 8001e3e:	f7ff ff7f 	bl	8001d40 <SDCARD_Unselect>
        return -1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e46:	e0b6      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 80020dc:	f7ff ffce 	bl	800207c <SDCARD_WaitNotBusy>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da04      	bge.n	80020f0 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 80020e6:	f7ff ff7f 	bl	8001fe8 <SDCARD_Unselect>
        return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ee:	e0b6      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
<<<<<<< Updated upstream
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e4c:	2206      	movs	r2, #6
 8001e4e:	495d      	ldr	r1, [pc, #372]	; (8001fc4 <SDCARD_Init+0x1c4>)
 8001e50:	485b      	ldr	r0, [pc, #364]	; (8001fc0 <SDCARD_Init+0x1c0>)
 8001e52:	f002 ffb5 	bl	8004dc0 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001e56:	f7ff ff7f 	bl	8001d58 <SDCARD_ReadR1>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d004      	beq.n	8001e6a <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 8001e60:	f7ff ff6e 	bl	8001d40 <SDCARD_Unselect>
        return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e68:	e0a5      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f4:	2206      	movs	r2, #6
 80020f6:	495d      	ldr	r1, [pc, #372]	; (800226c <SDCARD_Init+0x1c4>)
 80020f8:	485b      	ldr	r0, [pc, #364]	; (8002268 <SDCARD_Init+0x1c0>)
 80020fa:	f003 f837 	bl	800516c <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 80020fe:	f7ff ff7f 	bl	8002000 <SDCARD_ReadR1>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d004      	beq.n	8002112 <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 8002108:	f7ff ff6e 	bl	8001fe8 <SDCARD_Unselect>
        return -1;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002110:	e0a5      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
<<<<<<< Updated upstream
 8001e6a:	f7ff ffb3 	bl	8001dd4 <SDCARD_WaitNotBusy>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da04      	bge.n	8001e7e <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 8001e74:	f7ff ff64 	bl	8001d40 <SDCARD_Unselect>
        return -1;
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e7c:	e09b      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 8002112:	f7ff ffb3 	bl	800207c <SDCARD_WaitNotBusy>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	da04      	bge.n	8002126 <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 800211c:	f7ff ff64 	bl	8001fe8 <SDCARD_Unselect>
        return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002124:	e09b      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
<<<<<<< Updated upstream
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	2206      	movs	r2, #6
 8001e84:	4950      	ldr	r1, [pc, #320]	; (8001fc8 <SDCARD_Init+0x1c8>)
 8001e86:	484e      	ldr	r0, [pc, #312]	; (8001fc0 <SDCARD_Init+0x1c0>)
 8001e88:	f002 ff9a 	bl	8004dc0 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001e8c:	f7ff ff64 	bl	8001d58 <SDCARD_ReadR1>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d004      	beq.n	8001ea0 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 8001e96:	f7ff ff53 	bl	8001d40 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8001e9a:	f06f 0301 	mvn.w	r3, #1
 8001e9e:	e08a      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 8002126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212a:	2206      	movs	r2, #6
 800212c:	4950      	ldr	r1, [pc, #320]	; (8002270 <SDCARD_Init+0x1c8>)
 800212e:	484e      	ldr	r0, [pc, #312]	; (8002268 <SDCARD_Init+0x1c0>)
 8002130:	f003 f81c 	bl	800516c <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8002134:	f7ff ff64 	bl	8002000 <SDCARD_ReadR1>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d004      	beq.n	8002148 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 800213e:	f7ff ff53 	bl	8001fe8 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8002142:	f06f 0301 	mvn.w	r3, #1
 8002146:	e08a      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
<<<<<<< Updated upstream
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff73 	bl	8001d90 <SDCARD_ReadBytes>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da04      	bge.n	8001eba <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8001eb0:	f7ff ff46 	bl	8001d40 <SDCARD_Unselect>
            return -3;
 8001eb4:	f06f 0302 	mvn.w	r3, #2
 8001eb8:	e07d      	b.n	8001fb6 <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 8001eba:	79bb      	ldrb	r3, [r7, #6]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <SDCARD_Init+0xca>
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2baa      	cmp	r3, #170	; 0xaa
 8001ec8:	d004      	beq.n	8001ed4 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8001eca:	f7ff ff39 	bl	8001d40 <SDCARD_Unselect>
            return -4;
 8001ece:	f06f 0303 	mvn.w	r3, #3
 8001ed2:	e070      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2104      	movs	r1, #4
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff73 	bl	8002038 <SDCARD_ReadBytes>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	da04      	bge.n	8002162 <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8002158:	f7ff ff46 	bl	8001fe8 <SDCARD_Unselect>
            return -3;
 800215c:	f06f 0302 	mvn.w	r3, #2
 8002160:	e07d      	b.n	800225e <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 8002162:	79bb      	ldrb	r3, [r7, #6]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <SDCARD_Init+0xca>
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	2baa      	cmp	r3, #170	; 0xaa
 8002170:	d004      	beq.n	800217c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8002172:	f7ff ff39 	bl	8001fe8 <SDCARD_Unselect>
            return -4;
 8002176:	f06f 0303 	mvn.w	r3, #3
 800217a:	e070      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
<<<<<<< Updated upstream
 8001ed4:	f7ff ff7e 	bl	8001dd4 <SDCARD_WaitNotBusy>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da04      	bge.n	8001ee8 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8001ede:	f7ff ff2f 	bl	8001d40 <SDCARD_Unselect>
            return -1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee6:	e066      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 800217c:	f7ff ff7e 	bl	800207c <SDCARD_WaitNotBusy>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	da04      	bge.n	8002190 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8002186:	f7ff ff2f 	bl	8001fe8 <SDCARD_Unselect>
            return -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218e:	e066      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
<<<<<<< Updated upstream
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eec:	2206      	movs	r2, #6
 8001eee:	4937      	ldr	r1, [pc, #220]	; (8001fcc <SDCARD_Init+0x1cc>)
 8001ef0:	4833      	ldr	r0, [pc, #204]	; (8001fc0 <SDCARD_Init+0x1c0>)
 8001ef2:	f002 ff65 	bl	8004dc0 <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 8001ef6:	f7ff ff2f 	bl	8001d58 <SDCARD_ReadR1>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d004      	beq.n	8001f0a <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 8001f00:	f7ff ff1e 	bl	8001d40 <SDCARD_Unselect>
            return -5;
 8001f04:	f06f 0304 	mvn.w	r3, #4
 8001f08:	e055      	b.n	8001fb6 <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001f0a:	f7ff ff63 	bl	8001dd4 <SDCARD_WaitNotBusy>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da04      	bge.n	8001f1e <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 8001f14:	f7ff ff14 	bl	8001d40 <SDCARD_Unselect>
            return -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f1c:	e04b      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 8002190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002194:	2206      	movs	r2, #6
 8002196:	4937      	ldr	r1, [pc, #220]	; (8002274 <SDCARD_Init+0x1cc>)
 8002198:	4833      	ldr	r0, [pc, #204]	; (8002268 <SDCARD_Init+0x1c0>)
 800219a:	f002 ffe7 	bl	800516c <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 800219e:	f7ff ff2f 	bl	8002000 <SDCARD_ReadR1>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d004      	beq.n	80021b2 <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 80021a8:	f7ff ff1e 	bl	8001fe8 <SDCARD_Unselect>
            return -5;
 80021ac:	f06f 0304 	mvn.w	r3, #4
 80021b0:	e055      	b.n	800225e <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80021b2:	f7ff ff63 	bl	800207c <SDCARD_WaitNotBusy>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da04      	bge.n	80021c6 <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 80021bc:	f7ff ff14 	bl	8001fe8 <SDCARD_Unselect>
            return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c4:	e04b      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
<<<<<<< Updated upstream
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	2206      	movs	r2, #6
 8001f24:	492a      	ldr	r1, [pc, #168]	; (8001fd0 <SDCARD_Init+0x1d0>)
 8001f26:	4826      	ldr	r0, [pc, #152]	; (8001fc0 <SDCARD_Init+0x1c0>)
 8001f28:	f002 ff4a 	bl	8004dc0 <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 8001f2c:	f7ff ff14 	bl	8001d58 <SDCARD_ReadR1>
 8001f30:	4603      	mov	r3, r0
 8001f32:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <SDCARD_Init+0x14a>
=======
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ca:	2206      	movs	r2, #6
 80021cc:	492a      	ldr	r1, [pc, #168]	; (8002278 <SDCARD_Init+0x1d0>)
 80021ce:	4826      	ldr	r0, [pc, #152]	; (8002268 <SDCARD_Init+0x1c0>)
 80021d0:	f002 ffcc 	bl	800516c <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 80021d4:	f7ff ff14 	bl	8002000 <SDCARD_ReadR1>
 80021d8:	4603      	mov	r3, r0
 80021da:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <SDCARD_Init+0x14a>
>>>>>>> Stashed changes
            break;
        }

        if(r1 != 0x01) {
<<<<<<< Updated upstream
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d0c9      	beq.n	8001ed4 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8001f40:	f7ff fefe 	bl	8001d40 <SDCARD_Unselect>
            return -6;
 8001f44:	f06f 0305 	mvn.w	r3, #5
 8001f48:	e035      	b.n	8001fb6 <SDCARD_Init+0x1b6>
            break;
 8001f4a:	bf00      	nop
=======
 80021e2:	7afb      	ldrb	r3, [r7, #11]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d0c9      	beq.n	800217c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 80021e8:	f7ff fefe 	bl	8001fe8 <SDCARD_Unselect>
            return -6;
 80021ec:	f06f 0305 	mvn.w	r3, #5
 80021f0:	e035      	b.n	800225e <SDCARD_Init+0x1b6>
            break;
 80021f2:	bf00      	nop
>>>>>>> Stashed changes

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
<<<<<<< Updated upstream
 8001f4c:	f7ff ff42 	bl	8001dd4 <SDCARD_WaitNotBusy>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da04      	bge.n	8001f60 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 8001f56:	f7ff fef3 	bl	8001d40 <SDCARD_Unselect>
        return -1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5e:	e02a      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 80021f4:	f7ff ff42 	bl	800207c <SDCARD_WaitNotBusy>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da04      	bge.n	8002208 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 80021fe:	f7ff fef3 	bl	8001fe8 <SDCARD_Unselect>
        return -1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002206:	e02a      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
<<<<<<< Updated upstream
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f64:	2206      	movs	r2, #6
 8001f66:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <SDCARD_Init+0x1d4>)
 8001f68:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <SDCARD_Init+0x1c0>)
 8001f6a:	f002 ff29 	bl	8004dc0 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8001f6e:	f7ff fef3 	bl	8001d58 <SDCARD_ReadR1>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <SDCARD_Init+0x182>
        SDCARD_Unselect();
 8001f78:	f7ff fee2 	bl	8001d40 <SDCARD_Unselect>
        return -7;
 8001f7c:	f06f 0306 	mvn.w	r3, #6
 8001f80:	e019      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 8002208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220c:	2206      	movs	r2, #6
 800220e:	491b      	ldr	r1, [pc, #108]	; (800227c <SDCARD_Init+0x1d4>)
 8002210:	4815      	ldr	r0, [pc, #84]	; (8002268 <SDCARD_Init+0x1c0>)
 8002212:	f002 ffab 	bl	800516c <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8002216:	f7ff fef3 	bl	8002000 <SDCARD_ReadR1>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <SDCARD_Init+0x182>
        SDCARD_Unselect();
 8002220:	f7ff fee2 	bl	8001fe8 <SDCARD_Unselect>
        return -7;
 8002224:	f06f 0306 	mvn.w	r3, #6
 8002228:	e019      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
<<<<<<< Updated upstream
 8001f82:	463b      	mov	r3, r7
 8001f84:	2104      	movs	r1, #4
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff02 	bl	8001d90 <SDCARD_ReadBytes>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da04      	bge.n	8001f9c <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 8001f92:	f7ff fed5 	bl	8001d40 <SDCARD_Unselect>
            return -8;
 8001f96:	f06f 0307 	mvn.w	r3, #7
 8001f9a:	e00c      	b.n	8001fb6 <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8001f9c:	783b      	ldrb	r3, [r7, #0]
 8001f9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8001fa4:	d004      	beq.n	8001fb0 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 8001fa6:	f7ff fecb 	bl	8001d40 <SDCARD_Unselect>
            return -9;
 8001faa:	f06f 0308 	mvn.w	r3, #8
 8001fae:	e002      	b.n	8001fb6 <SDCARD_Init+0x1b6>
=======
 800222a:	463b      	mov	r3, r7
 800222c:	2104      	movs	r1, #4
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff02 	bl	8002038 <SDCARD_ReadBytes>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	da04      	bge.n	8002244 <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 800223a:	f7ff fed5 	bl	8001fe8 <SDCARD_Unselect>
            return -8;
 800223e:	f06f 0307 	mvn.w	r3, #7
 8002242:	e00c      	b.n	800225e <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8002244:	783b      	ldrb	r3, [r7, #0]
 8002246:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800224a:	2bc0      	cmp	r3, #192	; 0xc0
 800224c:	d004      	beq.n	8002258 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 800224e:	f7ff fecb 	bl	8001fe8 <SDCARD_Unselect>
            return -9;
 8002252:	f06f 0308 	mvn.w	r3, #8
 8002256:	e002      	b.n	800225e <SDCARD_Init+0x1b6>
>>>>>>> Stashed changes
        }
    }

    SDCARD_Unselect();
<<<<<<< Updated upstream
 8001fb0:	f7ff fec6 	bl	8001d40 <SDCARD_Unselect>
    return 0;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000740 	.word	0x20000740
 8001fc4:	08006e58 	.word	0x08006e58
 8001fc8:	08006e60 	.word	0x08006e60
 8001fcc:	08006e68 	.word	0x08006e68
 8001fd0:	08006e70 	.word	0x08006e70
 8001fd4:	08006e78 	.word	0x08006e78

08001fd8 <SDCARD_WriteSingleBlock>:
=======
 8002258:	f7ff fec6 	bl	8001fe8 <SDCARD_Unselect>
    return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000780 	.word	0x20000780
 800226c:	080077b8 	.word	0x080077b8
 8002270:	080077c0 	.word	0x080077c0
 8002274:	080077c8 	.word	0x080077c8
 8002278:	080077d0 	.word	0x080077d0
 800227c:	080077d8 	.word	0x080077d8

08002280 <SDCARD_WriteSingleBlock>:
>>>>>>> Stashed changes
    SDCARD_Unselect();
    return 0;
}


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
<<<<<<< Updated upstream
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 8001fe2:	f7ff fea1 	bl	8001d28 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001fe6:	f7ff fef5 	bl	8001dd4 <SDCARD_WaitNotBusy>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da04      	bge.n	8001ffa <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8001ff0:	f7ff fea6 	bl	8001d40 <SDCARD_Unselect>
        return -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff8:	e05e      	b.n	80020b8 <SDCARD_WriteSingleBlock+0xe0>
=======
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 800228a:	f7ff fea1 	bl	8001fd0 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800228e:	f7ff fef5 	bl	800207c <SDCARD_WaitNotBusy>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	da04      	bge.n	80022a2 <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8002298:	f7ff fea6 	bl	8001fe8 <SDCARD_Unselect>
        return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a0:	e05e      	b.n	8002360 <SDCARD_WriteSingleBlock+0xe0>
>>>>>>> Stashed changes
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
<<<<<<< Updated upstream
 8001ffa:	2358      	movs	r3, #88	; 0x58
 8001ffc:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8002002:	b2db      	uxtb	r3, r3
 8002004:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800200a:	b2db      	uxtb	r3, r3
 800200c:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8002012:	b2db      	uxtb	r3, r3
 8002014:	74fb      	strb	r3, [r7, #19]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	753b      	strb	r3, [r7, #20]
 800201c:	23ff      	movs	r3, #255	; 0xff
 800201e:	757b      	strb	r3, [r7, #21]
=======
 80022a2:	2358      	movs	r3, #88	; 0x58
 80022a4:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	74fb      	strb	r3, [r7, #19]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	753b      	strb	r3, [r7, #20]
 80022c4:	23ff      	movs	r3, #255	; 0xff
 80022c6:	757b      	strb	r3, [r7, #21]
>>>>>>> Stashed changes
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
<<<<<<< Updated upstream
 8002020:	f107 0110 	add.w	r1, r7, #16
 8002024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002028:	2206      	movs	r2, #6
 800202a:	4825      	ldr	r0, [pc, #148]	; (80020c0 <SDCARD_WriteSingleBlock+0xe8>)
 800202c:	f002 fec8 	bl	8004dc0 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8002030:	f7ff fe92 	bl	8001d58 <SDCARD_ReadR1>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 800203a:	f7ff fe81 	bl	8001d40 <SDCARD_Unselect>
        return -2;
 800203e:	f06f 0301 	mvn.w	r3, #1
 8002042:	e039      	b.n	80020b8 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 8002044:	23fe      	movs	r3, #254	; 0xfe
 8002046:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <SDCARD_WriteSingleBlock+0xec>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 800204e:	f107 010f 	add.w	r1, r7, #15
 8002052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002056:	2201      	movs	r2, #1
 8002058:	4819      	ldr	r0, [pc, #100]	; (80020c0 <SDCARD_WriteSingleBlock+0xe8>)
 800205a:	f002 feb1 	bl	8004dc0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 800205e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	4815      	ldr	r0, [pc, #84]	; (80020c0 <SDCARD_WriteSingleBlock+0xe8>)
 800206a:	f002 fea9 	bl	8004dc0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 800206e:	f107 010c 	add.w	r1, r7, #12
 8002072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002076:	2202      	movs	r2, #2
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <SDCARD_WriteSingleBlock+0xe8>)
 800207a:	f002 fea1 	bl	8004dc0 <HAL_SPI_Transmit>
=======
 80022c8:	f107 0110 	add.w	r1, r7, #16
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d0:	2206      	movs	r2, #6
 80022d2:	4825      	ldr	r0, [pc, #148]	; (8002368 <SDCARD_WriteSingleBlock+0xe8>)
 80022d4:	f002 ff4a 	bl	800516c <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 80022d8:	f7ff fe92 	bl	8002000 <SDCARD_ReadR1>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 80022e2:	f7ff fe81 	bl	8001fe8 <SDCARD_Unselect>
        return -2;
 80022e6:	f06f 0301 	mvn.w	r3, #1
 80022ea:	e039      	b.n	8002360 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 80022ec:	23fe      	movs	r3, #254	; 0xfe
 80022ee:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <SDCARD_WriteSingleBlock+0xec>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 80022f6:	f107 010f 	add.w	r1, r7, #15
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fe:	2201      	movs	r2, #1
 8002300:	4819      	ldr	r0, [pc, #100]	; (8002368 <SDCARD_WriteSingleBlock+0xe8>)
 8002302:	f002 ff33 	bl	800516c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 8002306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	4815      	ldr	r0, [pc, #84]	; (8002368 <SDCARD_WriteSingleBlock+0xe8>)
 8002312:	f002 ff2b 	bl	800516c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 8002316:	f107 010c 	add.w	r1, r7, #12
 800231a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231e:	2202      	movs	r2, #2
 8002320:	4811      	ldr	r0, [pc, #68]	; (8002368 <SDCARD_WriteSingleBlock+0xe8>)
 8002322:	f002 ff23 	bl	800516c <HAL_SPI_Transmit>
>>>>>>> Stashed changes
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
<<<<<<< Updated upstream
 800207e:	f107 030b 	add.w	r3, r7, #11
 8002082:	2101      	movs	r1, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe83 	bl	8001d90 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b05      	cmp	r3, #5
 8002092:	d004      	beq.n	800209e <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 8002094:	f7ff fe54 	bl	8001d40 <SDCARD_Unselect>
        return -3;
 8002098:	f06f 0302 	mvn.w	r3, #2
 800209c:	e00c      	b.n	80020b8 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 800209e:	f7ff fe99 	bl	8001dd4 <SDCARD_WaitNotBusy>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da04      	bge.n	80020b2 <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 80020a8:	f7ff fe4a 	bl	8001d40 <SDCARD_Unselect>
        return -4;
 80020ac:	f06f 0303 	mvn.w	r3, #3
 80020b0:	e002      	b.n	80020b8 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 80020b2:	f7ff fe45 	bl	8001d40 <SDCARD_Unselect>
    return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000740 	.word	0x20000740
 80020c4:	08006e3c 	.word	0x08006e3c

080020c8 <SPICmd8bit>:
=======
 8002326:	f107 030b 	add.w	r3, r7, #11
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fe83 	bl	8002038 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2b05      	cmp	r3, #5
 800233a:	d004      	beq.n	8002346 <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 800233c:	f7ff fe54 	bl	8001fe8 <SDCARD_Unselect>
        return -3;
 8002340:	f06f 0302 	mvn.w	r3, #2
 8002344:	e00c      	b.n	8002360 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 8002346:	f7ff fe99 	bl	800207c <SDCARD_WaitNotBusy>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	da04      	bge.n	800235a <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 8002350:	f7ff fe4a 	bl	8001fe8 <SDCARD_Unselect>
        return -4;
 8002354:	f06f 0303 	mvn.w	r3, #3
 8002358:	e002      	b.n	8002360 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 800235a:	f7ff fe45 	bl	8001fe8 <SDCARD_Unselect>
    return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000780 	.word	0x20000780
 800236c:	0800779c 	.word	0x0800779c

08002370 <SPICmd8bit>:
>>>>>>> Stashed changes
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
<<<<<<< Updated upstream
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 80020d2:	1df9      	adds	r1, r7, #7
 80020d4:	230a      	movs	r3, #10
 80020d6:	2201      	movs	r2, #1
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <SPICmd8bit+0x20>)
 80020da:	f002 fe71 	bl	8004dc0 <HAL_SPI_Transmit>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000a54 	.word	0x20000a54

080020ec <SPIWrite>:
=======
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800237a:	1df9      	adds	r1, r7, #7
 800237c:	230a      	movs	r3, #10
 800237e:	2201      	movs	r2, #1
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <SPICmd8bit+0x20>)
 8002382:	f002 fef3 	bl	800516c <HAL_SPI_Transmit>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000ad4 	.word	0x20000ad4

08002394 <SPIWrite>:
>>>>>>> Stashed changes
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
<<<<<<< Updated upstream
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	460a      	mov	r2, r1
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80020fc:	2200      	movs	r2, #0
 80020fe:	2140      	movs	r1, #64	; 0x40
 8002100:	480b      	ldr	r0, [pc, #44]	; (8002130 <SPIWrite+0x44>)
 8002102:	f002 f87b 	bl	80041fc <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ffda 	bl	80020c8 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8002114:	79bb      	ldrb	r3, [r7, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ffd6 	bl	80020c8 <SPICmd8bit>
	NSS_H();
 800211c:	2201      	movs	r2, #1
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	4803      	ldr	r0, [pc, #12]	; (8002130 <SPIWrite+0x44>)
 8002122:	f002 f86b 	bl	80041fc <HAL_GPIO_WritePin>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40020400 	.word	0x40020400

08002134 <BurstWrite>:
=======
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	460a      	mov	r2, r1
 800239e:	71fb      	strb	r3, [r7, #7]
 80023a0:	4613      	mov	r3, r2
 80023a2:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80023a4:	2200      	movs	r2, #0
 80023a6:	2140      	movs	r1, #64	; 0x40
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <SPIWrite+0x44>)
 80023aa:	f002 f8fd 	bl	80045a8 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ffda 	bl	8002370 <SPICmd8bit>
	SPICmd8bit(WrPara);
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffd6 	bl	8002370 <SPICmd8bit>
	NSS_H();
 80023c4:	2201      	movs	r2, #1
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	4803      	ldr	r0, [pc, #12]	; (80023d8 <SPIWrite+0x44>)
 80023ca:	f002 f8ed 	bl	80045a8 <HAL_GPIO_WritePin>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40020400 	.word	0x40020400

080023dc <BurstWrite>:
>>>>>>> Stashed changes
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
<<<<<<< Updated upstream
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
 8002140:	4613      	mov	r3, r2
 8002142:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d922      	bls.n	8002190 <BurstWrite+0x5c>
=======
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d922      	bls.n	8002438 <BurstWrite+0x5c>
>>>>>>> Stashed changes
    return;
  else
  {
	  NSS_L();
<<<<<<< Updated upstream
 800214a:	2200      	movs	r2, #0
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	4812      	ldr	r0, [pc, #72]	; (8002198 <BurstWrite+0x64>)
 8002150:	f002 f854 	bl	80041fc <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ffb3 	bl	80020c8 <SPICmd8bit>
    for(i=0;i<length;i++)
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e009      	b.n	800217c <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ffa9 	bl	80020c8 <SPICmd8bit>
    for(i=0;i<length;i++)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	3301      	adds	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3f1      	bcc.n	8002168 <BurstWrite+0x34>
    NSS_H();
 8002184:	2201      	movs	r2, #1
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	4803      	ldr	r0, [pc, #12]	; (8002198 <BurstWrite+0x64>)
 800218a:	f002 f837 	bl	80041fc <HAL_GPIO_WritePin>
 800218e:	e000      	b.n	8002192 <BurstWrite+0x5e>
    return;
 8002190:	bf00      	nop
  }
}
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40020400 	.word	0x40020400

0800219c <HAL_MspInit>:
=======
 80023f2:	2200      	movs	r2, #0
 80023f4:	2140      	movs	r1, #64	; 0x40
 80023f6:	4812      	ldr	r0, [pc, #72]	; (8002440 <BurstWrite+0x64>)
 80023f8:	f002 f8d6 	bl	80045a8 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ffb3 	bl	8002370 <SPICmd8bit>
    for(i=0;i<length;i++)
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e009      	b.n	8002424 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ffa9 	bl	8002370 <SPICmd8bit>
    for(i=0;i<length;i++)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	3301      	adds	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	79bb      	ldrb	r3, [r7, #6]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3f1      	bcc.n	8002410 <BurstWrite+0x34>
    NSS_H();
 800242c:	2201      	movs	r2, #1
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <BurstWrite+0x64>)
 8002432:	f002 f8b9 	bl	80045a8 <HAL_GPIO_WritePin>
 8002436:	e000      	b.n	800243a <BurstWrite+0x5e>
    return;
 8002438:	bf00      	nop
  }
}
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40020400 	.word	0x40020400

08002444 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
=======
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_MspInit+0x4c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_MspInit+0x4c>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_MspInit+0x4c>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_MspInit+0x4c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021da:	2007      	movs	r0, #7
 80021dc:	f001 fa16 	bl	800360c <HAL_NVIC_SetPriorityGrouping>
=======
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_MspInit+0x4c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_MspInit+0x4c>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_MspInit+0x4c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_MspInit+0x4c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_MspInit+0x4c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_SPI_MspInit>:
=======
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <HAL_SPI_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< Updated upstream
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_SPI_MspInit+0x148>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12c      	bne.n	8002268 <HAL_SPI_MspInit+0x7c>
=======
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a4a      	ldr	r2, [pc, #296]	; (80025dc <HAL_SPI_MspInit+0x148>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12c      	bne.n	8002510 <HAL_SPI_MspInit+0x7c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< Updated upstream
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a48      	ldr	r2, [pc, #288]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697b      	ldr	r3, [r7, #20]
=======
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a48      	ldr	r2, [pc, #288]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 80024c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a41      	ldr	r2, [pc, #260]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
 8002246:	23e0      	movs	r3, #224	; 0xe0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002256:	2305      	movs	r3, #5
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4619      	mov	r1, r3
 8002260:	4836      	ldr	r0, [pc, #216]	; (800233c <HAL_SPI_MspInit+0x150>)
 8002262:	f001 fe21 	bl	8003ea8 <HAL_GPIO_Init>
=======
 80024ee:	23e0      	movs	r3, #224	; 0xe0
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024fe:	2305      	movs	r3, #5
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	4619      	mov	r1, r3
 8002508:	4836      	ldr	r0, [pc, #216]	; (80025e4 <HAL_SPI_MspInit+0x150>)
 800250a:	f001 fea3 	bl	8004254 <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8002266:	e060      	b.n	800232a <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a34      	ldr	r2, [pc, #208]	; (8002340 <HAL_SPI_MspInit+0x154>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d15b      	bne.n	800232a <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 800227c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_SPI_MspInit+0x14c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80022d6:	2307      	movs	r3, #7
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	4818      	ldr	r0, [pc, #96]	; (8002344 <HAL_SPI_MspInit+0x158>)
 80022e2:	f001 fde1 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022f8:	2306      	movs	r3, #6
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	4619      	mov	r1, r3
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <HAL_SPI_MspInit+0x15c>)
 8002304:	f001 fdd0 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002312:	2301      	movs	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800231a:	2306      	movs	r3, #6
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	4808      	ldr	r0, [pc, #32]	; (8002348 <HAL_SPI_MspInit+0x15c>)
 8002326:	f001 fdbf 	bl	8003ea8 <HAL_GPIO_Init>
}
 800232a:	bf00      	nop
 800232c:	3730      	adds	r7, #48	; 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40013000 	.word	0x40013000
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000
 8002340:	40003c00 	.word	0x40003c00
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800

0800234c <HAL_UART_MspInit>:
=======
 800250e:	e060      	b.n	80025d2 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_SPI_MspInit+0x154>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d15b      	bne.n	80025d2 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a2f      	ldr	r2, [pc, #188]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 8002524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_SPI_MspInit+0x14c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800256e:	2301      	movs	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002576:	2301      	movs	r3, #1
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800257e:	2307      	movs	r3, #7
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 031c 	add.w	r3, r7, #28
 8002586:	4619      	mov	r1, r3
 8002588:	4818      	ldr	r0, [pc, #96]	; (80025ec <HAL_SPI_MspInit+0x158>)
 800258a:	f001 fe63 	bl	8004254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800258e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025a0:	2306      	movs	r3, #6
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4811      	ldr	r0, [pc, #68]	; (80025f0 <HAL_SPI_MspInit+0x15c>)
 80025ac:	f001 fe52 	bl	8004254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025c2:	2306      	movs	r3, #6
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	4619      	mov	r1, r3
 80025cc:	4808      	ldr	r0, [pc, #32]	; (80025f0 <HAL_SPI_MspInit+0x15c>)
 80025ce:	f001 fe41 	bl	8004254 <HAL_GPIO_Init>
}
 80025d2:	bf00      	nop
 80025d4:	3730      	adds	r7, #48	; 0x30
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40013000 	.word	0x40013000
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40003c00 	.word	0x40003c00
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800

080025f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_TIM_Base_MspInit+0xb8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d116      	bne.n	8002634 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002610:	f043 0310 	orr.w	r3, r3, #16
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2036      	movs	r0, #54	; 0x36
 8002628:	f001 f9d1 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800262c:	2036      	movs	r0, #54	; 0x36
 800262e:	f001 f9ea 	bl	8003a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002632:	e036      	b.n	80026a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_TIM_Base_MspInit+0xc0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d116      	bne.n	800266c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002648:	f043 0320 	orr.w	r3, r3, #32
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2037      	movs	r0, #55	; 0x37
 8002660:	f001 f9b5 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002664:	2037      	movs	r0, #55	; 0x37
 8002666:	f001 f9ce 	bl	8003a06 <HAL_NVIC_EnableIRQ>
}
 800266a:	e01a      	b.n	80026a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_TIM_Base_MspInit+0xc4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d115      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_TIM_Base_MspInit+0xbc>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2019      	movs	r0, #25
 8002698:	f001 f999 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800269c:	2019      	movs	r0, #25
 800269e:	f001 f9b2 	bl	8003a06 <HAL_NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40001000 	.word	0x40001000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40001400 	.word	0x40001400
 80026b8:	40014400 	.word	0x40014400

080026bc <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 800234c:	b580      	push	{r7, lr}
 800234e:	b092      	sub	sp, #72	; 0x48
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a87      	ldr	r2, [pc, #540]	; (8002588 <HAL_UART_MspInit+0x23c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f040 8083 	bne.w	8002476 <HAL_UART_MspInit+0x12a>
=======
 80026bc:	b580      	push	{r7, lr}
 80026be:	b092      	sub	sp, #72	; 0x48
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a87      	ldr	r2, [pc, #540]	; (80028f8 <HAL_UART_MspInit+0x23c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	f040 8083 	bne.w	80027e6 <HAL_UART_MspInit+0x12a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
<<<<<<< Updated upstream
 8002370:	2300      	movs	r3, #0
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
 8002374:	4b85      	ldr	r3, [pc, #532]	; (800258c <HAL_UART_MspInit+0x240>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	4a84      	ldr	r2, [pc, #528]	; (800258c <HAL_UART_MspInit+0x240>)
 800237a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237e:	6413      	str	r3, [r2, #64]	; 0x40
 8002380:	4b82      	ldr	r3, [pc, #520]	; (800258c <HAL_UART_MspInit+0x240>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002390:	4b7e      	ldr	r3, [pc, #504]	; (800258c <HAL_UART_MspInit+0x240>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a7d      	ldr	r2, [pc, #500]	; (800258c <HAL_UART_MspInit+0x240>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b7b      	ldr	r3, [pc, #492]	; (800258c <HAL_UART_MspInit+0x240>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ac:	4b77      	ldr	r3, [pc, #476]	; (800258c <HAL_UART_MspInit+0x240>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	4a76      	ldr	r2, [pc, #472]	; (800258c <HAL_UART_MspInit+0x240>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6313      	str	r3, [r2, #48]	; 0x30
 80023b8:	4b74      	ldr	r3, [pc, #464]	; (800258c <HAL_UART_MspInit+0x240>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
=======
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
 80026e4:	4b85      	ldr	r3, [pc, #532]	; (80028fc <HAL_UART_MspInit+0x240>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	4a84      	ldr	r2, [pc, #528]	; (80028fc <HAL_UART_MspInit+0x240>)
 80026ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
 80026f0:	4b82      	ldr	r3, [pc, #520]	; (80028fc <HAL_UART_MspInit+0x240>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002700:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a7d      	ldr	r2, [pc, #500]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <HAL_UART_MspInit+0x240>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
 800271c:	4b77      	ldr	r3, [pc, #476]	; (80028fc <HAL_UART_MspInit+0x240>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4a76      	ldr	r2, [pc, #472]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6313      	str	r3, [r2, #48]	; 0x30
 8002728:	4b74      	ldr	r3, [pc, #464]	; (80028fc <HAL_UART_MspInit+0x240>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
<<<<<<< Updated upstream
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023d6:	2308      	movs	r3, #8
 80023d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023de:	4619      	mov	r1, r3
 80023e0:	486b      	ldr	r0, [pc, #428]	; (8002590 <HAL_UART_MspInit+0x244>)
 80023e2:	f001 fd61 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023e6:	2304      	movs	r3, #4
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023f6:	2308      	movs	r3, #8
 80023f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023fe:	4619      	mov	r1, r3
 8002400:	4864      	ldr	r0, [pc, #400]	; (8002594 <HAL_UART_MspInit+0x248>)
 8002402:	f001 fd51 	bl	8003ea8 <HAL_GPIO_Init>
=======
 8002734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800273e:	2301      	movs	r3, #1
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002746:	2308      	movs	r3, #8
 8002748:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800274e:	4619      	mov	r1, r3
 8002750:	486b      	ldr	r0, [pc, #428]	; (8002900 <HAL_UART_MspInit+0x244>)
 8002752:	f001 fd7f 	bl	8004254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002756:	2304      	movs	r3, #4
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275e:	2301      	movs	r3, #1
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002766:	2308      	movs	r3, #8
 8002768:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800276e:	4619      	mov	r1, r3
 8002770:	4864      	ldr	r0, [pc, #400]	; (8002904 <HAL_UART_MspInit+0x248>)
 8002772:	f001 fd6f 	bl	8004254 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
<<<<<<< Updated upstream
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <HAL_UART_MspInit+0x24c>)
 8002408:	4a64      	ldr	r2, [pc, #400]	; (800259c <HAL_UART_MspInit+0x250>)
 800240a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800240c:	4b62      	ldr	r3, [pc, #392]	; (8002598 <HAL_UART_MspInit+0x24c>)
 800240e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002412:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002414:	4b60      	ldr	r3, [pc, #384]	; (8002598 <HAL_UART_MspInit+0x24c>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <HAL_UART_MspInit+0x24c>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_UART_MspInit+0x24c>)
 8002422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002426:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_UART_MspInit+0x24c>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242e:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <HAL_UART_MspInit+0x24c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002434:	4b58      	ldr	r3, [pc, #352]	; (8002598 <HAL_UART_MspInit+0x24c>)
 8002436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800243c:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_UART_MspInit+0x24c>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002442:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_UART_MspInit+0x24c>)
 8002444:	2200      	movs	r2, #0
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002448:	4853      	ldr	r0, [pc, #332]	; (8002598 <HAL_UART_MspInit+0x24c>)
 800244a:	f001 f921 	bl	8003690 <HAL_DMA_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002454:	f7ff fc60 	bl	8001d18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4f      	ldr	r2, [pc, #316]	; (8002598 <HAL_UART_MspInit+0x24c>)
 800245c:	635a      	str	r2, [r3, #52]	; 0x34
 800245e:	4a4e      	ldr	r2, [pc, #312]	; (8002598 <HAL_UART_MspInit+0x24c>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2035      	movs	r0, #53	; 0x35
 800246a:	f001 f8da 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800246e:	2035      	movs	r0, #53	; 0x35
 8002470:	f001 f8f3 	bl	800365a <HAL_NVIC_EnableIRQ>
=======
 8002776:	4b64      	ldr	r3, [pc, #400]	; (8002908 <HAL_UART_MspInit+0x24c>)
 8002778:	4a64      	ldr	r2, [pc, #400]	; (800290c <HAL_UART_MspInit+0x250>)
 800277a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_UART_MspInit+0x24c>)
 800277e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002782:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002784:	4b60      	ldr	r3, [pc, #384]	; (8002908 <HAL_UART_MspInit+0x24c>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800278a:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <HAL_UART_MspInit+0x24c>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002790:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <HAL_UART_MspInit+0x24c>)
 8002792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002796:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002798:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_UART_MspInit+0x24c>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800279e:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_UART_MspInit+0x24c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <HAL_UART_MspInit+0x24c>)
 80027a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027aa:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <HAL_UART_MspInit+0x24c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b2:	4b55      	ldr	r3, [pc, #340]	; (8002908 <HAL_UART_MspInit+0x24c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80027b8:	4853      	ldr	r0, [pc, #332]	; (8002908 <HAL_UART_MspInit+0x24c>)
 80027ba:	f001 f93f 	bl	8003a3c <HAL_DMA_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80027c4:	f7ff fbfc 	bl	8001fc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_UART_MspInit+0x24c>)
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
 80027ce:	4a4e      	ldr	r2, [pc, #312]	; (8002908 <HAL_UART_MspInit+0x24c>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	2035      	movs	r0, #53	; 0x35
 80027da:	f001 f8f8 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80027de:	2035      	movs	r0, #53	; 0x35
 80027e0:	f001 f911 	bl	8003a06 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8002474:	e18e      	b.n	8002794 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a49      	ldr	r2, [pc, #292]	; (80025a0 <HAL_UART_MspInit+0x254>)
 800247c:	4293      	cmp	r3, r2
 800247e:	f040 8099 	bne.w	80025b4 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_UART_MspInit+0x240>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a40      	ldr	r2, [pc, #256]	; (800258c <HAL_UART_MspInit+0x240>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_UART_MspInit+0x240>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
 80024a2:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_UART_MspInit+0x240>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a39      	ldr	r2, [pc, #228]	; (800258c <HAL_UART_MspInit+0x240>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <HAL_UART_MspInit+0x240>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_UART_MspInit+0x240>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a32      	ldr	r2, [pc, #200]	; (800258c <HAL_UART_MspInit+0x240>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_UART_MspInit+0x240>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024e8:	2307      	movs	r3, #7
 80024ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024f0:	4619      	mov	r1, r3
 80024f2:	482c      	ldr	r0, [pc, #176]	; (80025a4 <HAL_UART_MspInit+0x258>)
 80024f4:	f001 fcd8 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002508:	2307      	movs	r3, #7
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002510:	4619      	mov	r1, r3
 8002512:	4825      	ldr	r0, [pc, #148]	; (80025a8 <HAL_UART_MspInit+0x25c>)
 8002514:	f001 fcc8 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_UART_MspInit+0x260>)
 800251a:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <HAL_UART_MspInit+0x264>)
 800251c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002524:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_UART_MspInit+0x260>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002538:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_UART_MspInit+0x260>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800255a:	4814      	ldr	r0, [pc, #80]	; (80025ac <HAL_UART_MspInit+0x260>)
 800255c:	f001 f898 	bl	8003690 <HAL_DMA_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8002566:	f7ff fbd7 	bl	8001d18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <HAL_UART_MspInit+0x260>)
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_UART_MspInit+0x260>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	2025      	movs	r0, #37	; 0x25
 800257c:	f001 f851 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002580:	2025      	movs	r0, #37	; 0x25
 8002582:	f001 f86a 	bl	800365a <HAL_NVIC_EnableIRQ>
}
 8002586:	e105      	b.n	8002794 <HAL_UART_MspInit+0x448>
 8002588:	40005000 	.word	0x40005000
 800258c:	40023800 	.word	0x40023800
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	20000af8 	.word	0x20000af8
 800259c:	40026010 	.word	0x40026010
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	200007e4 	.word	0x200007e4
 80025b0:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a78      	ldr	r2, [pc, #480]	; (800279c <HAL_UART_MspInit+0x450>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d162      	bne.n	8002684 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	4b77      	ldr	r3, [pc, #476]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a76      	ldr	r2, [pc, #472]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b74      	ldr	r3, [pc, #464]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025f6:	230c      	movs	r3, #12
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002606:	2307      	movs	r3, #7
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800260e:	4619      	mov	r1, r3
 8002610:	4864      	ldr	r0, [pc, #400]	; (80027a4 <HAL_UART_MspInit+0x458>)
 8002612:	f001 fc49 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002616:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 8002618:	4a64      	ldr	r2, [pc, #400]	; (80027ac <HAL_UART_MspInit+0x460>)
 800261a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800261c:	4b62      	ldr	r3, [pc, #392]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 800261e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002622:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002624:	4b60      	ldr	r3, [pc, #384]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262a:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002630:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 8002632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002636:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002638:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263e:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002644:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 8002646:	2200      	movs	r2, #0
 8002648:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 800264c:	2200      	movs	r2, #0
 800264e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 8002652:	2200      	movs	r2, #0
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002656:	4854      	ldr	r0, [pc, #336]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 8002658:	f001 f81a 	bl	8003690 <HAL_DMA_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002662:	f7ff fb59 	bl	8001d18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
 800266c:	4a4e      	ldr	r2, [pc, #312]	; (80027a8 <HAL_UART_MspInit+0x45c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	2026      	movs	r0, #38	; 0x26
 8002678:	f000 ffd3 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800267c:	2026      	movs	r0, #38	; 0x26
 800267e:	f000 ffec 	bl	800365a <HAL_NVIC_EnableIRQ>
}
 8002682:	e087      	b.n	8002794 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a49      	ldr	r2, [pc, #292]	; (80027b0 <HAL_UART_MspInit+0x464>)
 800268a:	4293      	cmp	r3, r2
 800268c:	f040 8082 	bne.w	8002794 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_UART_MspInit+0x454>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a41      	ldr	r2, [pc, #260]	; (80027a0 <HAL_UART_MspInit+0x454>)
 800269a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a33      	ldr	r2, [pc, #204]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_UART_MspInit+0x454>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026e4:	2320      	movs	r3, #32
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026f4:	2307      	movs	r3, #7
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026fc:	4619      	mov	r1, r3
 80026fe:	482d      	ldr	r0, [pc, #180]	; (80027b4 <HAL_UART_MspInit+0x468>)
 8002700:	f001 fbd2 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002708:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002716:	2307      	movs	r3, #7
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800271e:	4619      	mov	r1, r3
 8002720:	4825      	ldr	r0, [pc, #148]	; (80027b8 <HAL_UART_MspInit+0x46c>)
 8002722:	f001 fbc1 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002726:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_UART_MspInit+0x470>)
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_UART_MspInit+0x474>)
 800272a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_UART_MspInit+0x470>)
 800272e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002732:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_UART_MspInit+0x470>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_UART_MspInit+0x470>)
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_UART_MspInit+0x470>)
 8002742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002746:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_UART_MspInit+0x470>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_UART_MspInit+0x470>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_UART_MspInit+0x470>)
 8002756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_UART_MspInit+0x470>)
 800275e:	2200      	movs	r2, #0
 8002760:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_UART_MspInit+0x470>)
 8002764:	2200      	movs	r2, #0
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002768:	4814      	ldr	r0, [pc, #80]	; (80027bc <HAL_UART_MspInit+0x470>)
 800276a:	f000 ff91 	bl	8003690 <HAL_DMA_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002774:	f7ff fad0 	bl	8001d18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_UART_MspInit+0x470>)
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
 800277e:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_UART_MspInit+0x470>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	2027      	movs	r0, #39	; 0x27
 800278a:	f000 ff4a 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800278e:	2027      	movs	r0, #39	; 0x27
 8002790:	f000 ff63 	bl	800365a <HAL_NVIC_EnableIRQ>
}
 8002794:	bf00      	nop
 8002796:	3748      	adds	r7, #72	; 0x48
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40004400 	.word	0x40004400
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	20000844 	.word	0x20000844
 80027ac:	400260a0 	.word	0x400260a0
 80027b0:	40004800 	.word	0x40004800
 80027b4:	40020800 	.word	0x40020800
 80027b8:	40020400 	.word	0x40020400
 80027bc:	2000013c 	.word	0x2000013c
 80027c0:	40026028 	.word	0x40026028

080027c4 <NMI_Handler>:
=======
 80027e4:	e18e      	b.n	8002b04 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a49      	ldr	r2, [pc, #292]	; (8002910 <HAL_UART_MspInit+0x254>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f040 8099 	bne.w	8002924 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_UART_MspInit+0x240>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a40      	ldr	r2, [pc, #256]	; (80028fc <HAL_UART_MspInit+0x240>)
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
 8002812:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a39      	ldr	r2, [pc, #228]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	623b      	str	r3, [r7, #32]
 8002828:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	4b33      	ldr	r3, [pc, #204]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a32      	ldr	r2, [pc, #200]	; (80028fc <HAL_UART_MspInit+0x240>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_UART_MspInit+0x240>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002858:	2307      	movs	r3, #7
 800285a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002860:	4619      	mov	r1, r3
 8002862:	482c      	ldr	r0, [pc, #176]	; (8002914 <HAL_UART_MspInit+0x258>)
 8002864:	f001 fcf6 	bl	8004254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002878:	2307      	movs	r3, #7
 800287a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002880:	4619      	mov	r1, r3
 8002882:	4825      	ldr	r0, [pc, #148]	; (8002918 <HAL_UART_MspInit+0x25c>)
 8002884:	f001 fce6 	bl	8004254 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_UART_MspInit+0x260>)
 800288a:	4a25      	ldr	r2, [pc, #148]	; (8002920 <HAL_UART_MspInit+0x264>)
 800288c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_UART_MspInit+0x260>)
 8002890:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002894:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_UART_MspInit+0x260>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800289c:	4b1f      	ldr	r3, [pc, #124]	; (800291c <HAL_UART_MspInit+0x260>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_UART_MspInit+0x260>)
 80028a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_UART_MspInit+0x260>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_UART_MspInit+0x260>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_UART_MspInit+0x260>)
 80028b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_UART_MspInit+0x260>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_UART_MspInit+0x260>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028ca:	4814      	ldr	r0, [pc, #80]	; (800291c <HAL_UART_MspInit+0x260>)
 80028cc:	f001 f8b6 	bl	8003a3c <HAL_DMA_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_UART_MspInit+0x21e>
      Error_Handler();
 80028d6:	f7ff fb73 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_UART_MspInit+0x260>)
 80028de:	635a      	str	r2, [r3, #52]	; 0x34
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_UART_MspInit+0x260>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2025      	movs	r0, #37	; 0x25
 80028ec:	f001 f86f 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028f0:	2025      	movs	r0, #37	; 0x25
 80028f2:	f001 f888 	bl	8003a06 <HAL_NVIC_EnableIRQ>
}
 80028f6:	e105      	b.n	8002b04 <HAL_UART_MspInit+0x448>
 80028f8:	40005000 	.word	0x40005000
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	20000b78 	.word	0x20000b78
 800290c:	40026010 	.word	0x40026010
 8002910:	40011000 	.word	0x40011000
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	20000824 	.word	0x20000824
 8002920:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a78      	ldr	r2, [pc, #480]	; (8002b0c <HAL_UART_MspInit+0x450>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d162      	bne.n	80029f4 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	4b77      	ldr	r3, [pc, #476]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a76      	ldr	r2, [pc, #472]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b74      	ldr	r3, [pc, #464]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	4b70      	ldr	r3, [pc, #448]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a6f      	ldr	r2, [pc, #444]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b6d      	ldr	r3, [pc, #436]	; (8002b10 <HAL_UART_MspInit+0x454>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002966:	230c      	movs	r3, #12
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002976:	2307      	movs	r3, #7
 8002978:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800297e:	4619      	mov	r1, r3
 8002980:	4864      	ldr	r0, [pc, #400]	; (8002b14 <HAL_UART_MspInit+0x458>)
 8002982:	f001 fc67 	bl	8004254 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002986:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 8002988:	4a64      	ldr	r2, [pc, #400]	; (8002b1c <HAL_UART_MspInit+0x460>)
 800298a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800298c:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 800298e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002992:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002994:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 8002996:	2240      	movs	r2, #64	; 0x40
 8002998:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a8:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029b4:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ba:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029c0:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029c6:	4854      	ldr	r0, [pc, #336]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029c8:	f001 f838 	bl	8003a3c <HAL_DMA_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 80029d2:	f7ff faf5 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4f      	ldr	r2, [pc, #316]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
 80029dc:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <HAL_UART_MspInit+0x45c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2026      	movs	r0, #38	; 0x26
 80029e8:	f000 fff1 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029ec:	2026      	movs	r0, #38	; 0x26
 80029ee:	f001 f80a 	bl	8003a06 <HAL_NVIC_EnableIRQ>
}
 80029f2:	e087      	b.n	8002b04 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a49      	ldr	r2, [pc, #292]	; (8002b20 <HAL_UART_MspInit+0x464>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 8082 	bne.w	8002b04 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2c:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	6313      	str	r3, [r2, #48]	; 0x30
 8002a48:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_UART_MspInit+0x454>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a54:	2320      	movs	r3, #32
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a64:	2307      	movs	r3, #7
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	482d      	ldr	r0, [pc, #180]	; (8002b24 <HAL_UART_MspInit+0x468>)
 8002a70:	f001 fbf0 	bl	8004254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a86:	2307      	movs	r3, #7
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4825      	ldr	r0, [pc, #148]	; (8002b28 <HAL_UART_MspInit+0x46c>)
 8002a92:	f001 fbdf 	bl	8004254 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002a96:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_UART_MspInit+0x474>)
 8002a9a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa4:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ad8:	4814      	ldr	r0, [pc, #80]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002ada:	f000 ffaf 	bl	8003a3c <HAL_DMA_Init>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002ae4:	f7ff fa6c 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002aec:	635a      	str	r2, [r3, #52]	; 0x34
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_UART_MspInit+0x470>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2027      	movs	r0, #39	; 0x27
 8002afa:	f000 ff68 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002afe:	2027      	movs	r0, #39	; 0x27
 8002b00:	f000 ff81 	bl	8003a06 <HAL_NVIC_EnableIRQ>
}
 8002b04:	bf00      	nop
 8002b06:	3748      	adds	r7, #72	; 0x48
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40004400 	.word	0x40004400
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	20000884 	.word	0x20000884
 8002b1c:	400260a0 	.word	0x400260a0
 8002b20:	40004800 	.word	0x40004800
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	2000013c 	.word	0x2000013c
 8002b30:	40026028 	.word	0x40026028

08002b34 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
=======
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< Updated upstream
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HardFault_Handler>:
=======
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
=======
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80027d6:	e7fe      	b.n	80027d6 <HardFault_Handler+0x4>

080027d8 <MemManage_Handler>:
=======
 8002b46:	e7fe      	b.n	8002b46 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
=======
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80027dc:	e7fe      	b.n	80027dc <MemManage_Handler+0x4>

080027de <BusFault_Handler>:
=======
 8002b4c:	e7fe      	b.n	8002b4c <MemManage_Handler+0x4>

08002b4e <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
=======
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80027e2:	e7fe      	b.n	80027e2 <BusFault_Handler+0x4>

080027e4 <UsageFault_Handler>:
=======
 8002b52:	e7fe      	b.n	8002b52 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
=======
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80027e8:	e7fe      	b.n	80027e8 <UsageFault_Handler+0x4>

080027ea <SVC_Handler>:
=======
 8002b58:	e7fe      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5a <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
=======
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <DebugMon_Handler>:
=======
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
=======
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <PendSV_Handler>:
=======
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
=======
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <SysTick_Handler>:
=======
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
=======
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8002818:	f000 fde6 	bl	80033e8 <HAL_IncTick>
=======
 8002b88:	f000 fe04 	bl	8003794 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <DMA1_Stream0_IRQHandler>:
=======
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <DMA1_Stream0_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
=======
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
<<<<<<< Updated upstream
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <DMA1_Stream0_IRQHandler+0x10>)
 8002826:	f001 f8cb 	bl	80039c0 <HAL_DMA_IRQHandler>
=======
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA1_Stream0_IRQHandler+0x10>)
 8002b96:	f001 f8e9 	bl	8003d6c <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
<<<<<<< Updated upstream
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000af8 	.word	0x20000af8

08002834 <DMA1_Stream1_IRQHandler>:
=======
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000b78 	.word	0x20000b78

08002ba4 <DMA1_Stream1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
=======
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
<<<<<<< Updated upstream
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <DMA1_Stream1_IRQHandler+0x10>)
 800283a:	f001 f8c1 	bl	80039c0 <HAL_DMA_IRQHandler>
=======
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <DMA1_Stream1_IRQHandler+0x10>)
 8002baa:	f001 f8df 	bl	8003d6c <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
<<<<<<< Updated upstream
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000013c 	.word	0x2000013c

08002848 <DMA1_Stream6_IRQHandler>:
=======
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000013c 	.word	0x2000013c

08002bb8 <DMA1_Stream6_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
=======
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
<<<<<<< Updated upstream
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <DMA1_Stream6_IRQHandler+0x10>)
 800284e:	f001 f8b7 	bl	80039c0 <HAL_DMA_IRQHandler>
=======
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <DMA1_Stream6_IRQHandler+0x10>)
 8002bbe:	f001 f8d5 	bl	8003d6c <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
<<<<<<< Updated upstream
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000844 	.word	0x20000844

0800285c <USART1_IRQHandler>:
=======
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000884 	.word	0x20000884

08002bcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002bd2:	f002 fec7 	bl	8005964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000414 	.word	0x20000414

08002be0 <USART1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< Updated upstream
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
=======
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< Updated upstream
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <USART1_IRQHandler+0x10>)
 8002862:	f002 ff7f 	bl	8005764 <HAL_UART_IRQHandler>
=======
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <USART1_IRQHandler+0x10>)
 8002be6:	f003 fa6d 	bl	80060c4 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< Updated upstream
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200008a8 	.word	0x200008a8

08002870 <USART2_IRQHandler>:
=======
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200008e8 	.word	0x200008e8

08002bf4 <USART2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
=======
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< Updated upstream
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <USART2_IRQHandler+0x10>)
 8002876:	f002 ff75 	bl	8005764 <HAL_UART_IRQHandler>
=======
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <USART2_IRQHandler+0x10>)
 8002bfa:	f003 fa63 	bl	80060c4 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< Updated upstream
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000ab8 	.word	0x20000ab8

08002884 <USART3_IRQHandler>:
=======
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000b38 	.word	0x20000b38

08002c08 <USART3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
=======
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< Updated upstream
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <USART3_IRQHandler+0x10>)
 800288a:	f002 ff6b 	bl	8005764 <HAL_UART_IRQHandler>
=======
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <USART3_IRQHandler+0x10>)
 8002c0e:	f003 fa59 	bl	80060c4 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< Updated upstream
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200001a4 	.word	0x200001a4

08002898 <UART5_IRQHandler>:
=======
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200001a4 	.word	0x200001a4

08002c1c <UART5_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
<<<<<<< Updated upstream
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
=======
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
<<<<<<< Updated upstream
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <UART5_IRQHandler+0x10>)
 800289e:	f002 ff61 	bl	8005764 <HAL_UART_IRQHandler>
=======
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <UART5_IRQHandler+0x10>)
 8002c22:	f003 fa4f 	bl	80060c4 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
<<<<<<< Updated upstream
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200007a0 	.word	0x200007a0

080028ac <DMA2_Stream2_IRQHandler>:
=======
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200007e0 	.word	0x200007e0

08002c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <TIM6_DAC_IRQHandler+0x10>)
 8002c36:	f002 fe95 	bl	8005964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000095c 	.word	0x2000095c

08002c44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <TIM7_IRQHandler+0x10>)
 8002c4a:	f002 fe8b 	bl	8005964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000101c 	.word	0x2000101c

08002c58 <DMA2_Stream2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
<<<<<<< Updated upstream
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
=======
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
<<<<<<< Updated upstream
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <DMA2_Stream2_IRQHandler+0x10>)
 80028b2:	f001 f885 	bl	80039c0 <HAL_DMA_IRQHandler>
=======
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <DMA2_Stream2_IRQHandler+0x10>)
 8002c5e:	f001 f885 	bl	8003d6c <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
<<<<<<< Updated upstream
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200007e4 	.word	0x200007e4

080028c0 <_sbrk>:
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <_sbrk+0x50>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_sbrk+0x16>
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <_sbrk+0x50>)
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <_sbrk+0x54>)
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <_sbrk+0x50>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <_sbrk+0x50>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	466a      	mov	r2, sp
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d907      	bls.n	80028fa <_sbrk+0x3a>
 80028ea:	f003 fe53 	bl	8006594 <__errno>
 80028ee:	4602      	mov	r2, r0
 80028f0:	230c      	movs	r3, #12
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f8:	e006      	b.n	8002908 <_sbrk+0x48>
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <_sbrk+0x50>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	4a03      	ldr	r2, [pc, #12]	; (8002910 <_sbrk+0x50>)
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200000f8 	.word	0x200000f8
 8002914:	20001420 	.word	0x20001420

08002918 <SystemInit>:
=======
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000824 	.word	0x20000824

08002c6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <_sbrk+0x50>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <_sbrk+0x16>
		heap_end = &end;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <_sbrk+0x50>)
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <_sbrk+0x54>)
 8002c80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <_sbrk+0x50>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <_sbrk+0x50>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	466a      	mov	r2, sp
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d907      	bls.n	8002ca6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c96:	f004 f92d 	bl	8006ef4 <__errno>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca4:	e006      	b.n	8002cb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <_sbrk+0x50>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <_sbrk+0x50>)
 8002cb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200000f8 	.word	0x200000f8
 8002cc0:	200014e0 	.word	0x200014e0

08002cc4 <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <SystemInit+0x28>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <SystemInit+0x28>)
 8002924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <SystemInit+0x28>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <SystemInit+0x28>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< Updated upstream
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <SystemInit+0x28>)
 800292e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002932:	609a      	str	r2, [r3, #8]
#endif
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <SPI_Timer_On>:
=======
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SystemInit+0x28>)
 8002cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cde:	609a      	str	r2, [r3, #8]
#endif
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <SPI_Timer_On>:
>>>>>>> Stashed changes
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
<<<<<<< Updated upstream
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800294c:	f000 fd60 	bl	8003410 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SPI_Timer_On+0x20>)
 8002954:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <SPI_Timer_On+0x24>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000fa4 	.word	0x20000fa4
 8002968:	20000fa8 	.word	0x20000fa8

0800296c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002970:	f000 fd4e 	bl	8003410 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <SPI_Timer_Status+0x24>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SPI_Timer_Status+0x28>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	bf34      	ite	cc
 8002984:	2301      	movcc	r3, #1
 8002986:	2300      	movcs	r3, #0
 8002988:	b2db      	uxtb	r3, r3
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000fa4 	.word	0x20000fa4
 8002994:	20000fa8 	.word	0x20000fa8

08002998 <xchg_spi>:
=======
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002cf8:	f000 fd60 	bl	80037bc <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SPI_Timer_On+0x20>)
 8002d00:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <SPI_Timer_On+0x24>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6013      	str	r3, [r2, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20001064 	.word	0x20001064
 8002d14:	20001068 	.word	0x20001068

08002d18 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002d1c:	f000 fd4e 	bl	80037bc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <SPI_Timer_Status+0x24>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SPI_Timer_Status+0x28>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	bf34      	ite	cc
 8002d30:	2301      	movcc	r3, #1
 8002d32:	2300      	movcs	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20001064 	.word	0x20001064
 8002d40:	20001068 	.word	0x20001068

08002d44 <xchg_spi>:
>>>>>>> Stashed changes
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
<<<<<<< Updated upstream
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 80029a2:	f107 020f 	add.w	r2, r7, #15
 80029a6:	1df9      	adds	r1, r7, #7
 80029a8:	2332      	movs	r3, #50	; 0x32
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2301      	movs	r3, #1
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <xchg_spi+0x28>)
 80029b0:	f002 fb3a 	bl	8005028 <HAL_SPI_TransmitReceive>
    return rxDat;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000740 	.word	0x20000740

080029c4 <rcvr_spi_multi>:
=======
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002d4e:	f107 020f 	add.w	r2, r7, #15
 8002d52:	1df9      	adds	r1, r7, #7
 8002d54:	2332      	movs	r3, #50	; 0x32
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	4804      	ldr	r0, [pc, #16]	; (8002d6c <xchg_spi+0x28>)
 8002d5c:	f002 fb3a 	bl	80053d4 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000780 	.word	0x20000780

08002d70 <rcvr_spi_multi>:
>>>>>>> Stashed changes
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
<<<<<<< Updated upstream
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e00a      	b.n	80029ea <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	18d4      	adds	r4, r2, r3
 80029da:	20ff      	movs	r0, #255	; 0xff
 80029dc:	f7ff ffdc 	bl	8002998 <xchg_spi>
 80029e0:	4603      	mov	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3301      	adds	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3f0      	bcc.n	80029d4 <rcvr_spi_multi+0x10>
	}
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}

080029fa <xmit_spi_multi>:
=======
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	e00a      	b.n	8002d96 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	18d4      	adds	r4, r2, r3
 8002d86:	20ff      	movs	r0, #255	; 0xff
 8002d88:	f7ff ffdc 	bl	8002d44 <xchg_spi>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3301      	adds	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d3f0      	bcc.n	8002d80 <rcvr_spi_multi+0x10>
	}
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}

08002da6 <xmit_spi_multi>:
>>>>>>> Stashed changes
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
<<<<<<< Updated upstream
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e009      	b.n	8002a1e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ffc0 	bl	8002998 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3f1      	bcc.n	8002a0a <xmit_spi_multi+0x10>
	}
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <wait_ready>:
=======
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e009      	b.n	8002dca <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ffc0 	bl	8002d44 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3f1      	bcc.n	8002db6 <xmit_spi_multi+0x10>
	}
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <wait_ready>:
>>>>>>> Stashed changes

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
<<<<<<< Updated upstream
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
=======
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
<<<<<<< Updated upstream
 8002a36:	f000 fceb 	bl	8003410 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002a40:	20ff      	movs	r0, #255	; 0xff
 8002a42:	f7ff ffa9 	bl	8002998 <xchg_spi>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2bff      	cmp	r3, #255	; 0xff
 8002a4e:	d007      	beq.n	8002a60 <wait_ready+0x32>
 8002a50:	f000 fcde 	bl	8003410 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d8ef      	bhi.n	8002a40 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2bff      	cmp	r3, #255	; 0xff
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <despiselect>:
=======
 8002de2:	f000 fceb 	bl	80037bc <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002dec:	20ff      	movs	r0, #255	; 0xff
 8002dee:	f7ff ffa9 	bl	8002d44 <xchg_spi>
 8002df2:	4603      	mov	r3, r0
 8002df4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2bff      	cmp	r3, #255	; 0xff
 8002dfa:	d007      	beq.n	8002e0c <wait_ready+0x32>
 8002dfc:	f000 fcde 	bl	80037bc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8ef      	bhi.n	8002dec <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2bff      	cmp	r3, #255	; 0xff
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <despiselect>:
>>>>>>> Stashed changes
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
<<<<<<< Updated upstream
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <despiselect+0x1c>)
 8002a80:	f001 fbbc 	bl	80041fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002a84:	20ff      	movs	r0, #255	; 0xff
 8002a86:	f7ff ff87 	bl	8002998 <xchg_spi>

}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40020000 	.word	0x40020000

08002a94 <spiselect>:
=======
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002e24:	2201      	movs	r2, #1
 8002e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2a:	4804      	ldr	r0, [pc, #16]	; (8002e3c <despiselect+0x1c>)
 8002e2c:	f001 fbbc 	bl	80045a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002e30:	20ff      	movs	r0, #255	; 0xff
 8002e32:	f7ff ff87 	bl	8002d44 <xchg_spi>

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40020000 	.word	0x40020000

08002e40 <spiselect>:
>>>>>>> Stashed changes
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
<<<<<<< Updated upstream
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9e:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <spiselect+0x34>)
 8002aa0:	f001 fbac 	bl	80041fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002aa4:	20ff      	movs	r0, #255	; 0xff
 8002aa6:	f7ff ff77 	bl	8002998 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aae:	f7ff ffbe 	bl	8002a2e <wait_ready>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <spiselect+0x28>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e002      	b.n	8002ac2 <spiselect+0x2e>

	despiselect();
 8002abc:	f7ff ffda 	bl	8002a74 <despiselect>
	return 0;	/* Timeout */
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40020000 	.word	0x40020000

08002acc <rcvr_datablock>:
=======
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002e44:	2200      	movs	r2, #0
 8002e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e4a:	480a      	ldr	r0, [pc, #40]	; (8002e74 <spiselect+0x34>)
 8002e4c:	f001 fbac 	bl	80045a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002e50:	20ff      	movs	r0, #255	; 0xff
 8002e52:	f7ff ff77 	bl	8002d44 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002e56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e5a:	f7ff ffbe 	bl	8002dda <wait_ready>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <spiselect+0x28>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e002      	b.n	8002e6e <spiselect+0x2e>

	despiselect();
 8002e68:	f7ff ffda 	bl	8002e20 <despiselect>
	return 0;	/* Timeout */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40020000 	.word	0x40020000

08002e78 <rcvr_datablock>:
>>>>>>> Stashed changes
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
<<<<<<< Updated upstream
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
=======
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	BYTE token;


	SPI_Timer_On(200);
<<<<<<< Updated upstream
 8002ad6:	20c8      	movs	r0, #200	; 0xc8
 8002ad8:	f7ff ff34 	bl	8002944 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002adc:	20ff      	movs	r0, #255	; 0xff
 8002ade:	f7ff ff5b 	bl	8002998 <xchg_spi>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2bff      	cmp	r3, #255	; 0xff
 8002aea:	d104      	bne.n	8002af6 <rcvr_datablock+0x2a>
 8002aec:	f7ff ff3e 	bl	800296c <SPI_Timer_Status>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f2      	bne.n	8002adc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2bfe      	cmp	r3, #254	; 0xfe
 8002afa:	d001      	beq.n	8002b00 <rcvr_datablock+0x34>
 8002afc:	2300      	movs	r3, #0
 8002afe:	e00a      	b.n	8002b16 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff5e 	bl	80029c4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002b08:	20ff      	movs	r0, #255	; 0xff
 8002b0a:	f7ff ff45 	bl	8002998 <xchg_spi>
 8002b0e:	20ff      	movs	r0, #255	; 0xff
 8002b10:	f7ff ff42 	bl	8002998 <xchg_spi>

	return 1;						/* Function succeeded */
 8002b14:	2301      	movs	r3, #1
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <xmit_datablock>:
=======
 8002e82:	20c8      	movs	r0, #200	; 0xc8
 8002e84:	f7ff ff34 	bl	8002cf0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002e88:	20ff      	movs	r0, #255	; 0xff
 8002e8a:	f7ff ff5b 	bl	8002d44 <xchg_spi>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2bff      	cmp	r3, #255	; 0xff
 8002e96:	d104      	bne.n	8002ea2 <rcvr_datablock+0x2a>
 8002e98:	f7ff ff3e 	bl	8002d18 <SPI_Timer_Status>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f2      	bne.n	8002e88 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2bfe      	cmp	r3, #254	; 0xfe
 8002ea6:	d001      	beq.n	8002eac <rcvr_datablock+0x34>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e00a      	b.n	8002ec2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ff5e 	bl	8002d70 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002eb4:	20ff      	movs	r0, #255	; 0xff
 8002eb6:	f7ff ff45 	bl	8002d44 <xchg_spi>
 8002eba:	20ff      	movs	r0, #255	; 0xff
 8002ebc:	f7ff ff42 	bl	8002d44 <xchg_spi>

	return 1;						/* Function succeeded */
 8002ec0:	2301      	movs	r3, #1
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <xmit_datablock>:
>>>>>>> Stashed changes
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
<<<<<<< Updated upstream
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	70fb      	strb	r3, [r7, #3]
=======
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
<<<<<<< Updated upstream
 8002b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b2e:	f7ff ff7e 	bl	8002a2e <wait_ready>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <xmit_datablock+0x1e>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e01e      	b.n	8002b7a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff2a 	bl	8002998 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	2bfd      	cmp	r3, #253	; 0xfd
 8002b48:	d016      	beq.n	8002b78 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ff53 	bl	80029fa <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002b54:	20ff      	movs	r0, #255	; 0xff
 8002b56:	f7ff ff1f 	bl	8002998 <xchg_spi>
 8002b5a:	20ff      	movs	r0, #255	; 0xff
 8002b5c:	f7ff ff1c 	bl	8002998 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002b60:	20ff      	movs	r0, #255	; 0xff
 8002b62:	f7ff ff19 	bl	8002998 <xchg_spi>
 8002b66:	4603      	mov	r3, r0
 8002b68:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d001      	beq.n	8002b78 <xmit_datablock+0x5a>
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <xmit_datablock+0x5c>
	}
	return 1;
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <send_cmd>:
=======
 8002ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eda:	f7ff ff7e 	bl	8002dda <wait_ready>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <xmit_datablock+0x1e>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e01e      	b.n	8002f26 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff2a 	bl	8002d44 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2bfd      	cmp	r3, #253	; 0xfd
 8002ef4:	d016      	beq.n	8002f24 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff53 	bl	8002da6 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002f00:	20ff      	movs	r0, #255	; 0xff
 8002f02:	f7ff ff1f 	bl	8002d44 <xchg_spi>
 8002f06:	20ff      	movs	r0, #255	; 0xff
 8002f08:	f7ff ff1c 	bl	8002d44 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002f0c:	20ff      	movs	r0, #255	; 0xff
 8002f0e:	f7ff ff19 	bl	8002d44 <xchg_spi>
 8002f12:	4603      	mov	r3, r0
 8002f14:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d001      	beq.n	8002f24 <xmit_datablock+0x5a>
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <xmit_datablock+0x5c>
	}
	return 1;
 8002f24:	2301      	movs	r3, #1
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <send_cmd>:
>>>>>>> Stashed changes
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
<<<<<<< Updated upstream
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	6039      	str	r1, [r7, #0]
 8002b8c:	71fb      	strb	r3, [r7, #7]
=======
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	6039      	str	r1, [r7, #0]
 8002f38:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
<<<<<<< Updated upstream
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	da0e      	bge.n	8002bb4 <send_cmd+0x32>
		cmd &= 0x7F;
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b9c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2037      	movs	r0, #55	; 0x37
 8002ba2:	f7ff ffee 	bl	8002b82 <send_cmd>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d901      	bls.n	8002bb4 <send_cmd+0x32>
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	e051      	b.n	8002c58 <send_cmd+0xd6>
=======
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da0e      	bge.n	8002f60 <send_cmd+0x32>
		cmd &= 0x7F;
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f48:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2037      	movs	r0, #55	; 0x37
 8002f4e:	f7ff ffee 	bl	8002f2e <send_cmd>
 8002f52:	4603      	mov	r3, r0
 8002f54:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002f56:	7bbb      	ldrb	r3, [r7, #14]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d901      	bls.n	8002f60 <send_cmd+0x32>
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	e051      	b.n	8003004 <send_cmd+0xd6>
>>>>>>> Stashed changes
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
<<<<<<< Updated upstream
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d008      	beq.n	8002bcc <send_cmd+0x4a>
		despiselect();
 8002bba:	f7ff ff5b 	bl	8002a74 <despiselect>
		if (!spiselect()) return 0xFF;
 8002bbe:	f7ff ff69 	bl	8002a94 <spiselect>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <send_cmd+0x4a>
 8002bc8:	23ff      	movs	r3, #255	; 0xff
 8002bca:	e045      	b.n	8002c58 <send_cmd+0xd6>
=======
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d008      	beq.n	8002f78 <send_cmd+0x4a>
		despiselect();
 8002f66:	f7ff ff5b 	bl	8002e20 <despiselect>
		if (!spiselect()) return 0xFF;
 8002f6a:	f7ff ff69 	bl	8002e40 <spiselect>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <send_cmd+0x4a>
 8002f74:	23ff      	movs	r3, #255	; 0xff
 8002f76:	e045      	b.n	8003004 <send_cmd+0xd6>
>>>>>>> Stashed changes
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
<<<<<<< Updated upstream
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fedf 	bl	8002998 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	0e1b      	lsrs	r3, r3, #24
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fed9 	bl	8002998 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fed3 	bl	8002998 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fecd 	bl	8002998 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fec8 	bl	8002998 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <send_cmd+0x94>
 8002c12:	2395      	movs	r3, #149	; 0x95
 8002c14:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d101      	bne.n	8002c20 <send_cmd+0x9e>
 8002c1c:	2387      	movs	r3, #135	; 0x87
 8002c1e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff feb8 	bl	8002998 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d102      	bne.n	8002c34 <send_cmd+0xb2>
 8002c2e:	20ff      	movs	r0, #255	; 0xff
 8002c30:	f7ff feb2 	bl	8002998 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002c34:	230a      	movs	r3, #10
 8002c36:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002c38:	20ff      	movs	r0, #255	; 0xff
 8002c3a:	f7ff fead 	bl	8002998 <xchg_spi>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002c42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da05      	bge.n	8002c56 <send_cmd+0xd4>
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <USER_SPI_initialize>:
=======
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fedf 	bl	8002d44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	0e1b      	lsrs	r3, r3, #24
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fed9 	bl	8002d44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fed3 	bl	8002d44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fecd 	bl	8002d44 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fec8 	bl	8002d44 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <send_cmd+0x94>
 8002fbe:	2395      	movs	r3, #149	; 0x95
 8002fc0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d101      	bne.n	8002fcc <send_cmd+0x9e>
 8002fc8:	2387      	movs	r3, #135	; 0x87
 8002fca:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff feb8 	bl	8002d44 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d102      	bne.n	8002fe0 <send_cmd+0xb2>
 8002fda:	20ff      	movs	r0, #255	; 0xff
 8002fdc:	f7ff feb2 	bl	8002d44 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002fe0:	230a      	movs	r3, #10
 8002fe2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002fe4:	20ff      	movs	r0, #255	; 0xff
 8002fe6:	f7ff fead 	bl	8002d44 <xchg_spi>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002fee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da05      	bge.n	8003002 <send_cmd+0xd4>
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003002:	7bbb      	ldrb	r3, [r7, #14]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <USER_SPI_initialize>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
<<<<<<< Updated upstream
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <USER_SPI_initialize+0x14>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0cb      	b.n	8002e0c <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002c74:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <USER_SPI_initialize+0x1b4>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <USER_SPI_initialize+0x2a>
 8002c82:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <USER_SPI_initialize+0x1b4>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e0c0      	b.n	8002e0c <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <USER_SPI_initialize+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c92:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002c94:	230a      	movs	r3, #10
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e005      	b.n	8002ca6 <USER_SPI_initialize+0x46>
 8002c9a:	20ff      	movs	r0, #255	; 0xff
 8002c9c:	f7ff fe7c 	bl	8002998 <xchg_spi>
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f6      	bne.n	8002c9a <USER_SPI_initialize+0x3a>

	ty = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7ff ff65 	bl	8002b82 <send_cmd>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f040 808b 	bne.w	8002dd6 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cc4:	f7ff fe3e 	bl	8002944 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002cc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002ccc:	2008      	movs	r0, #8
 8002cce:	f7ff ff58 	bl	8002b82 <send_cmd>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d151      	bne.n	8002d7c <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e00d      	b.n	8002cfa <USER_SPI_initialize+0x9a>
 8002cde:	7bfc      	ldrb	r4, [r7, #15]
 8002ce0:	20ff      	movs	r0, #255	; 0xff
 8002ce2:	f7ff fe59 	bl	8002998 <xchg_spi>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4423      	add	r3, r4
 8002cf0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d9ee      	bls.n	8002cde <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002d00:	7abb      	ldrb	r3, [r7, #10]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d167      	bne.n	8002dd6 <USER_SPI_initialize+0x176>
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	2baa      	cmp	r3, #170	; 0xaa
 8002d0a:	d164      	bne.n	8002dd6 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002d0c:	bf00      	nop
 8002d0e:	f7ff fe2d 	bl	800296c <SPI_Timer_Status>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <USER_SPI_initialize+0xc8>
 8002d18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d1c:	20a9      	movs	r0, #169	; 0xa9
 8002d1e:	f7ff ff30 	bl	8002b82 <send_cmd>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f2      	bne.n	8002d0e <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002d28:	f7ff fe20 	bl	800296c <SPI_Timer_Status>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d051      	beq.n	8002dd6 <USER_SPI_initialize+0x176>
 8002d32:	2100      	movs	r1, #0
 8002d34:	203a      	movs	r0, #58	; 0x3a
 8002d36:	f7ff ff24 	bl	8002b82 <send_cmd>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d14a      	bne.n	8002dd6 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e00d      	b.n	8002d62 <USER_SPI_initialize+0x102>
 8002d46:	7bfc      	ldrb	r4, [r7, #15]
 8002d48:	20ff      	movs	r0, #255	; 0xff
 8002d4a:	f7ff fe25 	bl	8002998 <xchg_spi>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	4423      	add	r3, r4
 8002d58:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d9ee      	bls.n	8002d46 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002d68:	7a3b      	ldrb	r3, [r7, #8]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <USER_SPI_initialize+0x116>
 8002d72:	230c      	movs	r3, #12
 8002d74:	e000      	b.n	8002d78 <USER_SPI_initialize+0x118>
 8002d76:	2304      	movs	r3, #4
 8002d78:	737b      	strb	r3, [r7, #13]
 8002d7a:	e02c      	b.n	8002dd6 <USER_SPI_initialize+0x176>
=======
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <USER_SPI_initialize+0x14>
 800301c:	2301      	movs	r3, #1
 800301e:	e0cb      	b.n	80031b8 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003020:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <USER_SPI_initialize+0x1b4>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <USER_SPI_initialize+0x2a>
 800302e:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <USER_SPI_initialize+0x1b4>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e0c0      	b.n	80031b8 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8003036:	4b63      	ldr	r3, [pc, #396]	; (80031c4 <USER_SPI_initialize+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303e:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003040:	230a      	movs	r3, #10
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e005      	b.n	8003052 <USER_SPI_initialize+0x46>
 8003046:	20ff      	movs	r0, #255	; 0xff
 8003048:	f7ff fe7c 	bl	8002d44 <xchg_spi>
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	3b01      	subs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f6      	bne.n	8003046 <USER_SPI_initialize+0x3a>

	ty = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800305c:	2100      	movs	r1, #0
 800305e:	2000      	movs	r0, #0
 8003060:	f7ff ff65 	bl	8002f2e <send_cmd>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	f040 808b 	bne.w	8003182 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800306c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003070:	f7ff fe3e 	bl	8002cf0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003074:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003078:	2008      	movs	r0, #8
 800307a:	f7ff ff58 	bl	8002f2e <send_cmd>
 800307e:	4603      	mov	r3, r0
 8003080:	2b01      	cmp	r3, #1
 8003082:	d151      	bne.n	8003128 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	e00d      	b.n	80030a6 <USER_SPI_initialize+0x9a>
 800308a:	7bfc      	ldrb	r4, [r7, #15]
 800308c:	20ff      	movs	r0, #255	; 0xff
 800308e:	f7ff fe59 	bl	8002d44 <xchg_spi>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	4423      	add	r3, r4
 800309c:	f803 2c08 	strb.w	r2, [r3, #-8]
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	3301      	adds	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d9ee      	bls.n	800308a <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80030ac:	7abb      	ldrb	r3, [r7, #10]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d167      	bne.n	8003182 <USER_SPI_initialize+0x176>
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	2baa      	cmp	r3, #170	; 0xaa
 80030b6:	d164      	bne.n	8003182 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80030b8:	bf00      	nop
 80030ba:	f7ff fe2d 	bl	8002d18 <SPI_Timer_Status>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <USER_SPI_initialize+0xc8>
 80030c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030c8:	20a9      	movs	r0, #169	; 0xa9
 80030ca:	f7ff ff30 	bl	8002f2e <send_cmd>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f2      	bne.n	80030ba <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80030d4:	f7ff fe20 	bl	8002d18 <SPI_Timer_Status>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d051      	beq.n	8003182 <USER_SPI_initialize+0x176>
 80030de:	2100      	movs	r1, #0
 80030e0:	203a      	movs	r0, #58	; 0x3a
 80030e2:	f7ff ff24 	bl	8002f2e <send_cmd>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d14a      	bne.n	8003182 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e00d      	b.n	800310e <USER_SPI_initialize+0x102>
 80030f2:	7bfc      	ldrb	r4, [r7, #15]
 80030f4:	20ff      	movs	r0, #255	; 0xff
 80030f6:	f7ff fe25 	bl	8002d44 <xchg_spi>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	4423      	add	r3, r4
 8003104:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	3301      	adds	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d9ee      	bls.n	80030f2 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003114:	7a3b      	ldrb	r3, [r7, #8]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <USER_SPI_initialize+0x116>
 800311e:	230c      	movs	r3, #12
 8003120:	e000      	b.n	8003124 <USER_SPI_initialize+0x118>
 8003122:	2304      	movs	r3, #4
 8003124:	737b      	strb	r3, [r7, #13]
 8003126:	e02c      	b.n	8003182 <USER_SPI_initialize+0x176>
>>>>>>> Stashed changes
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
<<<<<<< Updated upstream
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	20a9      	movs	r0, #169	; 0xa9
 8002d80:	f7ff feff 	bl	8002b82 <send_cmd>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d804      	bhi.n	8002d94 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	737b      	strb	r3, [r7, #13]
 8002d8e:	23a9      	movs	r3, #169	; 0xa9
 8002d90:	73bb      	strb	r3, [r7, #14]
 8002d92:	e003      	b.n	8002d9c <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002d94:	2301      	movs	r3, #1
 8002d96:	737b      	strb	r3, [r7, #13]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002d9c:	bf00      	nop
 8002d9e:	f7ff fde5 	bl	800296c <SPI_Timer_Status>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <USER_SPI_initialize+0x158>
 8002da8:	7bbb      	ldrb	r3, [r7, #14]
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fee8 	bl	8002b82 <send_cmd>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f2      	bne.n	8002d9e <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002db8:	f7ff fdd8 	bl	800296c <SPI_Timer_Status>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <USER_SPI_initialize+0x172>
 8002dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc6:	2010      	movs	r0, #16
 8002dc8:	f7ff fedb 	bl	8002b82 <send_cmd>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <USER_SPI_initialize+0x176>
				ty = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8002dd6:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <USER_SPI_initialize+0x1bc>)
 8002dd8:	7b7b      	ldrb	r3, [r7, #13]
 8002dda:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002ddc:	f7ff fe4a 	bl	8002a74 <despiselect>

	if (ty) {			/* OK */
 8002de0:	7b7b      	ldrb	r3, [r7, #13]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <USER_SPI_initialize+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2210      	movs	r2, #16
 8002dec:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <USER_SPI_initialize+0x1b4>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <USER_SPI_initialize+0x1b4>)
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e002      	b.n	8002e06 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <USER_SPI_initialize+0x1b4>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002e06:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <USER_SPI_initialize+0x1b4>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	20000004 	.word	0x20000004
 8002e18:	20000740 	.word	0x20000740
 8002e1c:	200000fc 	.word	0x200000fc

08002e20 <USER_SPI_status>:
=======
 8003128:	2100      	movs	r1, #0
 800312a:	20a9      	movs	r0, #169	; 0xa9
 800312c:	f7ff feff 	bl	8002f2e <send_cmd>
 8003130:	4603      	mov	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d804      	bhi.n	8003140 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003136:	2302      	movs	r3, #2
 8003138:	737b      	strb	r3, [r7, #13]
 800313a:	23a9      	movs	r3, #169	; 0xa9
 800313c:	73bb      	strb	r3, [r7, #14]
 800313e:	e003      	b.n	8003148 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003140:	2301      	movs	r3, #1
 8003142:	737b      	strb	r3, [r7, #13]
 8003144:	2301      	movs	r3, #1
 8003146:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003148:	bf00      	nop
 800314a:	f7ff fde5 	bl	8002d18 <SPI_Timer_Status>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <USER_SPI_initialize+0x158>
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fee8 	bl	8002f2e <send_cmd>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f2      	bne.n	800314a <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003164:	f7ff fdd8 	bl	8002d18 <SPI_Timer_Status>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <USER_SPI_initialize+0x172>
 800316e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003172:	2010      	movs	r0, #16
 8003174:	f7ff fedb 	bl	8002f2e <send_cmd>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <USER_SPI_initialize+0x176>
				ty = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8003182:	4a11      	ldr	r2, [pc, #68]	; (80031c8 <USER_SPI_initialize+0x1bc>)
 8003184:	7b7b      	ldrb	r3, [r7, #13]
 8003186:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003188:	f7ff fe4a 	bl	8002e20 <despiselect>

	if (ty) {			/* OK */
 800318c:	7b7b      	ldrb	r3, [r7, #13]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <USER_SPI_initialize+0x1b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2210      	movs	r2, #16
 8003198:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <USER_SPI_initialize+0x1b4>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <USER_SPI_initialize+0x1b4>)
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e002      	b.n	80031b2 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <USER_SPI_initialize+0x1b4>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80031b2:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <USER_SPI_initialize+0x1b4>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b2db      	uxtb	r3, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	20000004 	.word	0x20000004
 80031c4:	20000780 	.word	0x20000780
 80031c8:	200000fc 	.word	0x200000fc

080031cc <USER_SPI_status>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
<<<<<<< Updated upstream
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <USER_SPI_status+0x14>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e002      	b.n	8002e3a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <USER_SPI_status+0x28>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000004 	.word	0x20000004

08002e4c <USER_SPI_read>:
=======
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <USER_SPI_status+0x14>
 80031dc:	2301      	movs	r3, #1
 80031de:	e002      	b.n	80031e6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <USER_SPI_status+0x28>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000004 	.word	0x20000004

080031f8 <USER_SPI_read>:
>>>>>>> Stashed changes
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
<<<<<<< Updated upstream
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <USER_SPI_read+0x1c>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <USER_SPI_read+0x20>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e04d      	b.n	8002f08 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <USER_SPI_read+0xc4>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <USER_SPI_read+0x32>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e044      	b.n	8002f08 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <USER_SPI_read+0xc8>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <USER_SPI_read+0x44>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d111      	bne.n	8002eba <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	2011      	movs	r0, #17
 8002e9a:	f7ff fe72 	bl	8002b82 <send_cmd>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d129      	bne.n	8002ef8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ea8:	68b8      	ldr	r0, [r7, #8]
 8002eaa:	f7ff fe0f 	bl	8002acc <rcvr_datablock>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d021      	beq.n	8002ef8 <USER_SPI_read+0xac>
			count = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	e01e      	b.n	8002ef8 <USER_SPI_read+0xac>
=======
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <USER_SPI_read+0x1c>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <USER_SPI_read+0x20>
 8003214:	2304      	movs	r3, #4
 8003216:	e04d      	b.n	80032b4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <USER_SPI_read+0xc4>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <USER_SPI_read+0x32>
 8003226:	2303      	movs	r3, #3
 8003228:	e044      	b.n	80032b4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <USER_SPI_read+0xc8>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <USER_SPI_read+0x44>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	025b      	lsls	r3, r3, #9
 800323a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d111      	bne.n	8003266 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	2011      	movs	r0, #17
 8003246:	f7ff fe72 	bl	8002f2e <send_cmd>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d129      	bne.n	80032a4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003254:	68b8      	ldr	r0, [r7, #8]
 8003256:	f7ff fe0f 	bl	8002e78 <rcvr_datablock>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d021      	beq.n	80032a4 <USER_SPI_read+0xac>
			count = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	e01e      	b.n	80032a4 <USER_SPI_read+0xac>
>>>>>>> Stashed changes
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
<<<<<<< Updated upstream
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	2012      	movs	r0, #18
 8002ebe:	f7ff fe60 	bl	8002b82 <send_cmd>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d117      	bne.n	8002ef8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ecc:	68b8      	ldr	r0, [r7, #8]
 8002ece:	f7ff fdfd 	bl	8002acc <rcvr_datablock>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <USER_SPI_read+0xa2>
				buff += 512;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ede:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ed      	bne.n	8002ec8 <USER_SPI_read+0x7c>
 8002eec:	e000      	b.n	8002ef0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002eee:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	200c      	movs	r0, #12
 8002ef4:	f7ff fe45 	bl	8002b82 <send_cmd>
		}
	}
	despiselect();
 8002ef8:	f7ff fdbc 	bl	8002a74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000004 	.word	0x20000004
 8002f14:	200000fc 	.word	0x200000fc

08002f18 <USER_SPI_write>:
=======
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	2012      	movs	r0, #18
 800326a:	f7ff fe60 	bl	8002f2e <send_cmd>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d117      	bne.n	80032a4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003278:	68b8      	ldr	r0, [r7, #8]
 800327a:	f7ff fdfd 	bl	8002e78 <rcvr_datablock>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <USER_SPI_read+0xa2>
				buff += 512;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800328a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	3b01      	subs	r3, #1
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ed      	bne.n	8003274 <USER_SPI_read+0x7c>
 8003298:	e000      	b.n	800329c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800329a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800329c:	2100      	movs	r1, #0
 800329e:	200c      	movs	r0, #12
 80032a0:	f7ff fe45 	bl	8002f2e <send_cmd>
		}
	}
	despiselect();
 80032a4:	f7ff fdbc 	bl	8002e20 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000004 	.word	0x20000004
 80032c0:	200000fc 	.word	0x200000fc

080032c4 <USER_SPI_write>:
>>>>>>> Stashed changes
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
<<<<<<< Updated upstream
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <USER_SPI_write+0x1c>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <USER_SPI_write+0x20>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e063      	b.n	8003000 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002f38:	4b33      	ldr	r3, [pc, #204]	; (8003008 <USER_SPI_write+0xf0>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <USER_SPI_write+0x32>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e05a      	b.n	8003000 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <USER_SPI_write+0xf0>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <USER_SPI_write+0x44>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e051      	b.n	8003000 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	; (800300c <USER_SPI_write+0xf4>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <USER_SPI_write+0x56>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	025b      	lsls	r3, r3, #9
 8002f6c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d110      	bne.n	8002f96 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	2018      	movs	r0, #24
 8002f78:	f7ff fe03 	bl	8002b82 <send_cmd>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d136      	bne.n	8002ff0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002f82:	21fe      	movs	r1, #254	; 0xfe
 8002f84:	68b8      	ldr	r0, [r7, #8]
 8002f86:	f7ff fdca 	bl	8002b1e <xmit_datablock>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d02f      	beq.n	8002ff0 <USER_SPI_write+0xd8>
			count = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	e02c      	b.n	8002ff0 <USER_SPI_write+0xd8>
=======
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <USER_SPI_write+0x1c>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <USER_SPI_write+0x20>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e063      	b.n	80033ac <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80032e4:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <USER_SPI_write+0xf0>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <USER_SPI_write+0x32>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e05a      	b.n	80033ac <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <USER_SPI_write+0xf0>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <USER_SPI_write+0x44>
 8003304:	2302      	movs	r3, #2
 8003306:	e051      	b.n	80033ac <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <USER_SPI_write+0xf4>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <USER_SPI_write+0x56>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d110      	bne.n	8003342 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	2018      	movs	r0, #24
 8003324:	f7ff fe03 	bl	8002f2e <send_cmd>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d136      	bne.n	800339c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800332e:	21fe      	movs	r1, #254	; 0xfe
 8003330:	68b8      	ldr	r0, [r7, #8]
 8003332:	f7ff fdca 	bl	8002eca <xmit_datablock>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d02f      	beq.n	800339c <USER_SPI_write+0xd8>
			count = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	e02c      	b.n	800339c <USER_SPI_write+0xd8>
>>>>>>> Stashed changes
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
<<<<<<< Updated upstream
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <USER_SPI_write+0xf4>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	f003 0306 	and.w	r3, r3, #6
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <USER_SPI_write+0x92>
 8002fa2:	6839      	ldr	r1, [r7, #0]
 8002fa4:	2097      	movs	r0, #151	; 0x97
 8002fa6:	f7ff fdec 	bl	8002b82 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	2019      	movs	r0, #25
 8002fae:	f7ff fde8 	bl	8002b82 <send_cmd>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11b      	bne.n	8002ff0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002fb8:	21fc      	movs	r1, #252	; 0xfc
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f7ff fdaf 	bl	8002b1e <xmit_datablock>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <USER_SPI_write+0xc4>
				buff += 512;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002fcc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ee      	bne.n	8002fb8 <USER_SPI_write+0xa0>
 8002fda:	e000      	b.n	8002fde <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002fdc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002fde:	21fd      	movs	r1, #253	; 0xfd
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff fd9c 	bl	8002b1e <xmit_datablock>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <USER_SPI_write+0xd8>
 8002fec:	2301      	movs	r3, #1
 8002fee:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002ff0:	f7ff fd40 	bl	8002a74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000004 	.word	0x20000004
 800300c:	200000fc 	.word	0x200000fc

08003010 <USER_SPI_ioctl>:
=======
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <USER_SPI_write+0xf4>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <USER_SPI_write+0x92>
 800334e:	6839      	ldr	r1, [r7, #0]
 8003350:	2097      	movs	r0, #151	; 0x97
 8003352:	f7ff fdec 	bl	8002f2e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	2019      	movs	r0, #25
 800335a:	f7ff fde8 	bl	8002f2e <send_cmd>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11b      	bne.n	800339c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003364:	21fc      	movs	r1, #252	; 0xfc
 8003366:	68b8      	ldr	r0, [r7, #8]
 8003368:	f7ff fdaf 	bl	8002eca <xmit_datablock>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <USER_SPI_write+0xc4>
				buff += 512;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003378:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3b01      	subs	r3, #1
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ee      	bne.n	8003364 <USER_SPI_write+0xa0>
 8003386:	e000      	b.n	800338a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003388:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800338a:	21fd      	movs	r1, #253	; 0xfd
 800338c:	2000      	movs	r0, #0
 800338e:	f7ff fd9c 	bl	8002eca <xmit_datablock>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <USER_SPI_write+0xd8>
 8003398:	2301      	movs	r3, #1
 800339a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800339c:	f7ff fd40 	bl	8002e20 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000004 	.word	0x20000004
 80033b8:	200000fc 	.word	0x200000fc

080033bc <USER_SPI_ioctl>:
>>>>>>> Stashed changes
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
<<<<<<< Updated upstream
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	; 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	603a      	str	r2, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	460b      	mov	r3, r1
 800301e:	71bb      	strb	r3, [r7, #6]
=======
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	603a      	str	r2, [r7, #0]
 80033c6:	71fb      	strb	r3, [r7, #7]
 80033c8:	460b      	mov	r3, r1
 80033ca:	71bb      	strb	r3, [r7, #6]
>>>>>>> Stashed changes
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
<<<<<<< Updated upstream
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <USER_SPI_ioctl+0x1a>
 8003026:	2304      	movs	r3, #4
 8003028:	e15a      	b.n	80032e0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800302a:	4baf      	ldr	r3, [pc, #700]	; (80032e8 <USER_SPI_ioctl+0x2d8>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <USER_SPI_ioctl+0x2c>
 8003038:	2303      	movs	r3, #3
 800303a:	e151      	b.n	80032e0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003042:	79bb      	ldrb	r3, [r7, #6]
 8003044:	2b04      	cmp	r3, #4
 8003046:	f200 8136 	bhi.w	80032b6 <USER_SPI_ioctl+0x2a6>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <USER_SPI_ioctl+0x40>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003065 	.word	0x08003065
 8003054:	08003079 	.word	0x08003079
 8003058:	080032b7 	.word	0x080032b7
 800305c:	08003125 	.word	0x08003125
 8003060:	0800321b 	.word	0x0800321b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003064:	f7ff fd16 	bl	8002a94 <spiselect>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8127 	beq.w	80032be <USER_SPI_ioctl+0x2ae>
 8003070:	2300      	movs	r3, #0
 8003072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003076:	e122      	b.n	80032be <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003078:	2100      	movs	r1, #0
 800307a:	2009      	movs	r0, #9
 800307c:	f7ff fd81 	bl	8002b82 <send_cmd>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 811d 	bne.w	80032c2 <USER_SPI_ioctl+0x2b2>
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	2110      	movs	r1, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fd1c 	bl	8002acc <rcvr_datablock>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8113 	beq.w	80032c2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800309c:	7b3b      	ldrb	r3, [r7, #12]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d111      	bne.n	80030ca <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80030a6:	7d7b      	ldrb	r3, [r7, #21]
 80030a8:	461a      	mov	r2, r3
 80030aa:	7d3b      	ldrb	r3, [r7, #20]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	4413      	add	r3, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80030ba:	4413      	add	r3, r2
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	029a      	lsls	r2, r3, #10
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e028      	b.n	800311c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80030ca:	7c7b      	ldrb	r3, [r7, #17]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	7dbb      	ldrb	r3, [r7, #22]
 80030d4:	09db      	lsrs	r3, r3, #7
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4413      	add	r3, r2
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	7d7b      	ldrb	r3, [r7, #21]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	3302      	adds	r3, #2
 80030ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80030f2:	7d3b      	ldrb	r3, [r7, #20]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	441a      	add	r2, r3
 8003100:	7cbb      	ldrb	r3, [r7, #18]
 8003102:	029b      	lsls	r3, r3, #10
 8003104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003108:	4413      	add	r3, r2
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800310e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003112:	3b09      	subs	r3, #9
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	409a      	lsls	r2, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003122:	e0ce      	b.n	80032c2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003124:	4b71      	ldr	r3, [pc, #452]	; (80032ec <USER_SPI_ioctl+0x2dc>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d031      	beq.n	8003194 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003130:	2100      	movs	r1, #0
 8003132:	208d      	movs	r0, #141	; 0x8d
 8003134:	f7ff fd25 	bl	8002b82 <send_cmd>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 80c3 	bne.w	80032c6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003140:	20ff      	movs	r0, #255	; 0xff
 8003142:	f7ff fc29 	bl	8002998 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	2110      	movs	r1, #16
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fcbd 	bl	8002acc <rcvr_datablock>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80b6 	beq.w	80032c6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800315a:	2330      	movs	r3, #48	; 0x30
 800315c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003160:	e007      	b.n	8003172 <USER_SPI_ioctl+0x162>
 8003162:	20ff      	movs	r0, #255	; 0xff
 8003164:	f7ff fc18 	bl	8002998 <xchg_spi>
 8003168:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800316c:	3b01      	subs	r3, #1
 800316e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003172:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f3      	bne.n	8003162 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800317a:	7dbb      	ldrb	r3, [r7, #22]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	2310      	movs	r3, #16
 8003184:	fa03 f202 	lsl.w	r2, r3, r2
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <USER_SPI_ioctl+0x1a>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e15a      	b.n	800368c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80033d6:	4baf      	ldr	r3, [pc, #700]	; (8003694 <USER_SPI_ioctl+0x2d8>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <USER_SPI_ioctl+0x2c>
 80033e4:	2303      	movs	r3, #3
 80033e6:	e151      	b.n	800368c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80033ee:	79bb      	ldrb	r3, [r7, #6]
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	f200 8136 	bhi.w	8003662 <USER_SPI_ioctl+0x2a6>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <USER_SPI_ioctl+0x40>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	08003411 	.word	0x08003411
 8003400:	08003425 	.word	0x08003425
 8003404:	08003663 	.word	0x08003663
 8003408:	080034d1 	.word	0x080034d1
 800340c:	080035c7 	.word	0x080035c7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003410:	f7ff fd16 	bl	8002e40 <spiselect>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8127 	beq.w	800366a <USER_SPI_ioctl+0x2ae>
 800341c:	2300      	movs	r3, #0
 800341e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003422:	e122      	b.n	800366a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003424:	2100      	movs	r1, #0
 8003426:	2009      	movs	r0, #9
 8003428:	f7ff fd81 	bl	8002f2e <send_cmd>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 811d 	bne.w	800366e <USER_SPI_ioctl+0x2b2>
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	2110      	movs	r1, #16
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fd1c 	bl	8002e78 <rcvr_datablock>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8113 	beq.w	800366e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003448:	7b3b      	ldrb	r3, [r7, #12]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d111      	bne.n	8003476 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003452:	7d7b      	ldrb	r3, [r7, #21]
 8003454:	461a      	mov	r2, r3
 8003456:	7d3b      	ldrb	r3, [r7, #20]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	4413      	add	r3, r2
 800345c:	461a      	mov	r2, r3
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003466:	4413      	add	r3, r2
 8003468:	3301      	adds	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	029a      	lsls	r2, r3, #10
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e028      	b.n	80034c8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003476:	7c7b      	ldrb	r3, [r7, #17]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	b2da      	uxtb	r2, r3
 800347e:	7dbb      	ldrb	r3, [r7, #22]
 8003480:	09db      	lsrs	r3, r3, #7
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4413      	add	r3, r2
 8003486:	b2da      	uxtb	r2, r3
 8003488:	7d7b      	ldrb	r3, [r7, #21]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0306 	and.w	r3, r3, #6
 8003492:	b2db      	uxtb	r3, r3
 8003494:	4413      	add	r3, r2
 8003496:	b2db      	uxtb	r3, r3
 8003498:	3302      	adds	r3, #2
 800349a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800349e:	7d3b      	ldrb	r3, [r7, #20]
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	441a      	add	r2, r3
 80034ac:	7cbb      	ldrb	r3, [r7, #18]
 80034ae:	029b      	lsls	r3, r3, #10
 80034b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034b4:	4413      	add	r3, r2
 80034b6:	3301      	adds	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80034ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034be:	3b09      	subs	r3, #9
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	409a      	lsls	r2, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80034ce:	e0ce      	b.n	800366e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80034d0:	4b71      	ldr	r3, [pc, #452]	; (8003698 <USER_SPI_ioctl+0x2dc>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d031      	beq.n	8003540 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80034dc:	2100      	movs	r1, #0
 80034de:	208d      	movs	r0, #141	; 0x8d
 80034e0:	f7ff fd25 	bl	8002f2e <send_cmd>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 80c3 	bne.w	8003672 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80034ec:	20ff      	movs	r0, #255	; 0xff
 80034ee:	f7ff fc29 	bl	8002d44 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	2110      	movs	r1, #16
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fcbd 	bl	8002e78 <rcvr_datablock>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80b6 	beq.w	8003672 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003506:	2330      	movs	r3, #48	; 0x30
 8003508:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800350c:	e007      	b.n	800351e <USER_SPI_ioctl+0x162>
 800350e:	20ff      	movs	r0, #255	; 0xff
 8003510:	f7ff fc18 	bl	8002d44 <xchg_spi>
 8003514:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003518:	3b01      	subs	r3, #1
 800351a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800351e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f3      	bne.n	800350e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003526:	7dbb      	ldrb	r3, [r7, #22]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	2310      	movs	r3, #16
 8003530:	fa03 f202 	lsl.w	r2, r3, r2
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> Stashed changes
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
<<<<<<< Updated upstream
 8003192:	e098      	b.n	80032c6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003194:	2100      	movs	r1, #0
 8003196:	2009      	movs	r0, #9
 8003198:	f7ff fcf3 	bl	8002b82 <send_cmd>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 8091 	bne.w	80032c6 <USER_SPI_ioctl+0x2b6>
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	2110      	movs	r1, #16
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fc8e 	bl	8002acc <rcvr_datablock>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80031b8:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <USER_SPI_ioctl+0x2dc>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d012      	beq.n	80031ea <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80031c4:	7dbb      	ldrb	r3, [r7, #22]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80031cc:	7dfa      	ldrb	r2, [r7, #23]
 80031ce:	09d2      	lsrs	r2, r2, #7
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	4413      	add	r3, r2
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	7e7b      	ldrb	r3, [r7, #25]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e013      	b.n	8003212 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80031ea:	7dbb      	ldrb	r3, [r7, #22]
 80031ec:	109b      	asrs	r3, r3, #2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	3301      	adds	r3, #1
 80031f6:	7dfa      	ldrb	r2, [r7, #23]
 80031f8:	00d2      	lsls	r2, r2, #3
 80031fa:	f002 0218 	and.w	r2, r2, #24
 80031fe:	7df9      	ldrb	r1, [r7, #23]
 8003200:	0949      	lsrs	r1, r1, #5
 8003202:	b2c9      	uxtb	r1, r1
 8003204:	440a      	add	r2, r1
 8003206:	3201      	adds	r2, #1
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	461a      	mov	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003218:	e055      	b.n	80032c6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800321a:	4b34      	ldr	r3, [pc, #208]	; (80032ec <USER_SPI_ioctl+0x2dc>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	f003 0306 	and.w	r3, r3, #6
 8003222:	2b00      	cmp	r3, #0
 8003224:	d051      	beq.n	80032ca <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003226:	f107 020c 	add.w	r2, r7, #12
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	210b      	movs	r1, #11
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff feee 	bl	8003010 <USER_SPI_ioctl>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d149      	bne.n	80032ce <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800323a:	7b3b      	ldrb	r3, [r7, #12]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <USER_SPI_ioctl+0x23e>
 8003244:	7dbb      	ldrb	r3, [r7, #22]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d041      	beq.n	80032d2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800325e:	4b23      	ldr	r3, [pc, #140]	; (80032ec <USER_SPI_ioctl+0x2dc>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	025b      	lsls	r3, r3, #9
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	025b      	lsls	r3, r3, #9
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003278:	2020      	movs	r0, #32
 800327a:	f7ff fc82 	bl	8002b82 <send_cmd>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d128      	bne.n	80032d6 <USER_SPI_ioctl+0x2c6>
 8003284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003286:	2021      	movs	r0, #33	; 0x21
 8003288:	f7ff fc7b 	bl	8002b82 <send_cmd>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d121      	bne.n	80032d6 <USER_SPI_ioctl+0x2c6>
 8003292:	2100      	movs	r1, #0
 8003294:	2026      	movs	r0, #38	; 0x26
 8003296:	f7ff fc74 	bl	8002b82 <send_cmd>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11a      	bne.n	80032d6 <USER_SPI_ioctl+0x2c6>
 80032a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80032a4:	f7ff fbc3 	bl	8002a2e <wait_ready>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d013      	beq.n	80032d6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80032b4:	e00f      	b.n	80032d6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80032b6:	2304      	movs	r3, #4
 80032b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032bc:	e00c      	b.n	80032d8 <USER_SPI_ioctl+0x2c8>
		break;
 80032be:	bf00      	nop
 80032c0:	e00a      	b.n	80032d8 <USER_SPI_ioctl+0x2c8>
		break;
 80032c2:	bf00      	nop
 80032c4:	e008      	b.n	80032d8 <USER_SPI_ioctl+0x2c8>
		break;
 80032c6:	bf00      	nop
 80032c8:	e006      	b.n	80032d8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80032ca:	bf00      	nop
 80032cc:	e004      	b.n	80032d8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <USER_SPI_ioctl+0x2c8>
		break;
 80032d6:	bf00      	nop
	}

	despiselect();
 80032d8:	f7ff fbcc 	bl	8002a74 <despiselect>

	return res;
 80032dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3730      	adds	r7, #48	; 0x30
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000004 	.word	0x20000004
 80032ec:	200000fc 	.word	0x200000fc

080032f0 <Reset_Handler>:
 80032f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003328 <LoopFillZerobss+0x14>
 80032f4:	2100      	movs	r1, #0
 80032f6:	e003      	b.n	8003300 <LoopCopyDataInit>

080032f8 <CopyDataInit>:
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <LoopFillZerobss+0x18>)
 80032fa:	585b      	ldr	r3, [r3, r1]
 80032fc:	5043      	str	r3, [r0, r1]
 80032fe:	3104      	adds	r1, #4

08003300 <LoopCopyDataInit>:
 8003300:	480b      	ldr	r0, [pc, #44]	; (8003330 <LoopFillZerobss+0x1c>)
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <LoopFillZerobss+0x20>)
 8003304:	1842      	adds	r2, r0, r1
 8003306:	429a      	cmp	r2, r3
 8003308:	d3f6      	bcc.n	80032f8 <CopyDataInit>
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <LoopFillZerobss+0x24>)
 800330c:	e002      	b.n	8003314 <LoopFillZerobss>

0800330e <FillZerobss>:
 800330e:	2300      	movs	r3, #0
 8003310:	f842 3b04 	str.w	r3, [r2], #4

08003314 <LoopFillZerobss>:
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <LoopFillZerobss+0x28>)
 8003316:	429a      	cmp	r2, r3
 8003318:	d3f9      	bcc.n	800330e <FillZerobss>
 800331a:	f7ff fafd 	bl	8002918 <SystemInit>
 800331e:	f003 f93f 	bl	80065a0 <__libc_init_array>
 8003322:	f7fd fff5 	bl	8001310 <main>
 8003326:	4770      	bx	lr
 8003328:	20020000 	.word	0x20020000
 800332c:	08006ee4 	.word	0x08006ee4
 8003330:	20000000 	.word	0x20000000
 8003334:	20000088 	.word	0x20000088
 8003338:	20000088 	.word	0x20000088
 800333c:	2000141c 	.word	0x2000141c

08003340 <ADC_IRQHandler>:
 8003340:	e7fe      	b.n	8003340 <ADC_IRQHandler>
	...

08003344 <HAL_Init>:
=======
 800353e:	e098      	b.n	8003672 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003540:	2100      	movs	r1, #0
 8003542:	2009      	movs	r0, #9
 8003544:	f7ff fcf3 	bl	8002f2e <send_cmd>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 8091 	bne.w	8003672 <USER_SPI_ioctl+0x2b6>
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	2110      	movs	r1, #16
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fc8e 	bl	8002e78 <rcvr_datablock>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8087 	beq.w	8003672 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <USER_SPI_ioctl+0x2dc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d012      	beq.n	8003596 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003570:	7dbb      	ldrb	r3, [r7, #22]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003578:	7dfa      	ldrb	r2, [r7, #23]
 800357a:	09d2      	lsrs	r2, r2, #7
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	4413      	add	r3, r2
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	7e7b      	ldrb	r3, [r7, #25]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	461a      	mov	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e013      	b.n	80035be <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003596:	7dbb      	ldrb	r3, [r7, #22]
 8003598:	109b      	asrs	r3, r3, #2
 800359a:	b29b      	uxth	r3, r3
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	3301      	adds	r3, #1
 80035a2:	7dfa      	ldrb	r2, [r7, #23]
 80035a4:	00d2      	lsls	r2, r2, #3
 80035a6:	f002 0218 	and.w	r2, r2, #24
 80035aa:	7df9      	ldrb	r1, [r7, #23]
 80035ac:	0949      	lsrs	r1, r1, #5
 80035ae:	b2c9      	uxtb	r1, r1
 80035b0:	440a      	add	r2, r1
 80035b2:	3201      	adds	r2, #1
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80035c4:	e055      	b.n	8003672 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <USER_SPI_ioctl+0x2dc>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	f003 0306 	and.w	r3, r3, #6
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d051      	beq.n	8003676 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80035d2:	f107 020c 	add.w	r2, r7, #12
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	210b      	movs	r1, #11
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff feee 	bl	80033bc <USER_SPI_ioctl>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d149      	bne.n	800367a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80035e6:	7b3b      	ldrb	r3, [r7, #12]
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <USER_SPI_ioctl+0x23e>
 80035f0:	7dbb      	ldrb	r3, [r7, #22]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d041      	beq.n	800367e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800360a:	4b23      	ldr	r3, [pc, #140]	; (8003698 <USER_SPI_ioctl+0x2dc>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	025b      	lsls	r3, r3, #9
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	025b      	lsls	r3, r3, #9
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003624:	2020      	movs	r0, #32
 8003626:	f7ff fc82 	bl	8002f2e <send_cmd>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d128      	bne.n	8003682 <USER_SPI_ioctl+0x2c6>
 8003630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003632:	2021      	movs	r0, #33	; 0x21
 8003634:	f7ff fc7b 	bl	8002f2e <send_cmd>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d121      	bne.n	8003682 <USER_SPI_ioctl+0x2c6>
 800363e:	2100      	movs	r1, #0
 8003640:	2026      	movs	r0, #38	; 0x26
 8003642:	f7ff fc74 	bl	8002f2e <send_cmd>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11a      	bne.n	8003682 <USER_SPI_ioctl+0x2c6>
 800364c:	f247 5030 	movw	r0, #30000	; 0x7530
 8003650:	f7ff fbc3 	bl	8002dda <wait_ready>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800365a:	2300      	movs	r3, #0
 800365c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003660:	e00f      	b.n	8003682 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003662:	2304      	movs	r3, #4
 8003664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003668:	e00c      	b.n	8003684 <USER_SPI_ioctl+0x2c8>
		break;
 800366a:	bf00      	nop
 800366c:	e00a      	b.n	8003684 <USER_SPI_ioctl+0x2c8>
		break;
 800366e:	bf00      	nop
 8003670:	e008      	b.n	8003684 <USER_SPI_ioctl+0x2c8>
		break;
 8003672:	bf00      	nop
 8003674:	e006      	b.n	8003684 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003676:	bf00      	nop
 8003678:	e004      	b.n	8003684 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <USER_SPI_ioctl+0x2c8>
		break;
 8003682:	bf00      	nop
	}

	despiselect();
 8003684:	f7ff fbcc 	bl	8002e20 <despiselect>

	return res;
 8003688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800368c:	4618      	mov	r0, r3
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000004 	.word	0x20000004
 8003698:	200000fc 	.word	0x200000fc

0800369c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800369c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036a2:	e003      	b.n	80036ac <LoopCopyDataInit>

080036a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036aa:	3104      	adds	r1, #4

080036ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036b4:	d3f6      	bcc.n	80036a4 <CopyDataInit>
  ldr  r2, =_sbss
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036b8:	e002      	b.n	80036c0 <LoopFillZerobss>

080036ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036bc:	f842 3b04 	str.w	r3, [r2], #4

080036c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036c4:	d3f9      	bcc.n	80036ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036c6:	f7ff fafd 	bl	8002cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ca:	f003 fc19 	bl	8006f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ce:	f7fd fe1f 	bl	8001310 <main>
  bx  lr    
 80036d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036d8:	08007844 	.word	0x08007844
  ldr  r0, =_sdata
 80036dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036e0:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80036e4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80036e8:	200014dc 	.word	0x200014dc

080036ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036ec:	e7fe      	b.n	80036ec <ADC_IRQHandler>
	...

080036f0 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003348:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_Init+0x40>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <HAL_Init+0x40>)
 800334e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003352:	6013      	str	r3, [r2, #0]
=======
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_Init+0x40>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_Init+0x40>)
 80036fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036fe:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_Init+0x40>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_Init+0x40>)
 800335a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800335e:	6013      	str	r3, [r2, #0]
=======
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_Init+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <HAL_Init+0x40>)
 8003706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_Init+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a07      	ldr	r2, [pc, #28]	; (8003384 <HAL_Init+0x40>)
 8003366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336a:	6013      	str	r3, [r2, #0]
=======
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_Init+0x40>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <HAL_Init+0x40>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 800336c:	2003      	movs	r0, #3
 800336e:	f000 f94d 	bl	800360c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003372:	2000      	movs	r0, #0
 8003374:	f000 f808 	bl	8003388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003378:	f7fe ff10 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00

08003388 <HAL_InitTick>:
=======
 8003718:	2003      	movs	r0, #3
 800371a:	f000 f94d 	bl	80039b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371e:	2000      	movs	r0, #0
 8003720:	f000 f808 	bl	8003734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003724:	f7fe fe8e 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00

08003734 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_InitTick+0x54>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_InitTick+0x58>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800339e:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f965 	bl	8003676 <HAL_SYSTICK_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00e      	b.n	80033d4 <HAL_InitTick+0x4c>
=======
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_InitTick+0x54>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_InitTick+0x58>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800374a:	fbb3 f3f1 	udiv	r3, r3, r1
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f965 	bl	8003a22 <HAL_SYSTICK_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00e      	b.n	8003780 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d80a      	bhi.n	80033d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033bc:	2200      	movs	r2, #0
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c4:	f000 f92d 	bl	8003622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c8:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_InitTick+0x5c>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
=======
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d80a      	bhi.n	800377e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003768:	2200      	movs	r2, #0
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003770:	f000 f92d 	bl	80039ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4a06      	ldr	r2, [pc, #24]	; (8003790 <HAL_InitTick+0x5c>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000000 	.word	0x20000000
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_IncTick>:
=======
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000000 	.word	0x20000000
 800378c:	2000000c 	.word	0x2000000c
 8003790:	20000008 	.word	0x20000008

08003794 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_IncTick+0x20>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x24>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_IncTick+0x24>)
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c
 800340c:	20000fac 	.word	0x20000fac

08003410 <HAL_GetTick>:
=======
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	2000000c 	.word	0x2000000c
 80037b8:	2000106c 	.word	0x2000106c

080037bc <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return uwTick;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_GetTick+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000fac 	.word	0x20000fac

08003428 <HAL_Delay>:
=======
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	2000106c 	.word	0x2000106c

080037d4 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7ff ffee 	bl	8003410 <HAL_GetTick>
 8003434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003440:	d005      	beq.n	800344e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_Delay+0x40>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800344e:	bf00      	nop
 8003450:	f7ff ffde 	bl	8003410 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	429a      	cmp	r2, r3
 800345e:	d8f7      	bhi.n	8003450 <HAL_Delay+0x28>
  {
  }
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000000c 	.word	0x2000000c

0800346c <__NVIC_SetPriorityGrouping>:
=======
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff ffee 	bl	80037bc <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ec:	d005      	beq.n	80037fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_Delay+0x40>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037fa:	bf00      	nop
 80037fc:	f7ff ffde 	bl	80037bc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d8f7      	bhi.n	80037fc <HAL_Delay+0x28>
  {
  }
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	2000000c 	.word	0x2000000c

08003818 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003488:	4013      	ands	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_GetPriorityGrouping>:
=======
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <__NVIC_GetPriorityGrouping+0x18>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	f003 0307 	and.w	r3, r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_EnableIRQ>:
=======
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0b      	blt.n	80034fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <__NVIC_EnableIRQ+0x38>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2001      	movs	r0, #1
 80034f2:	fa00 f202 	lsl.w	r2, r0, r2
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000e100 	.word	0xe000e100

0800350c <__NVIC_SetPriority>:
=======
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	6039      	str	r1, [r7, #0]
 8003516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db0a      	blt.n	8003536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	490c      	ldr	r1, [pc, #48]	; (8003558 <__NVIC_SetPriority+0x4c>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	440b      	add	r3, r1
 8003530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db0a      	blt.n	80038e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	490c      	ldr	r1, [pc, #48]	; (8003904 <__NVIC_SetPriority+0x4c>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	440b      	add	r3, r1
 80038dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8003534:	e00a      	b.n	800354c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4908      	ldr	r1, [pc, #32]	; (800355c <__NVIC_SetPriority+0x50>)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	3b04      	subs	r3, #4
 8003544:	0112      	lsls	r2, r2, #4
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	440b      	add	r3, r1
 800354a:	761a      	strb	r2, [r3, #24]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000e100 	.word	0xe000e100
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <NVIC_EncodePriority>:
=======
 80038e0:	e00a      	b.n	80038f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <__NVIC_SetPriority+0x50>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3b04      	subs	r3, #4
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	440b      	add	r3, r1
 80038f6:	761a      	strb	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	61fb      	str	r3, [r7, #28]
=======
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f1c3 0307 	rsb	r3, r3, #7
 800357a:	2b04      	cmp	r3, #4
 800357c:	bf28      	it	cs
 800357e:	2304      	movcs	r3, #4
 8003580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3304      	adds	r3, #4
 8003586:	2b06      	cmp	r3, #6
 8003588:	d902      	bls.n	8003590 <NVIC_EncodePriority+0x30>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3b03      	subs	r3, #3
 800358e:	e000      	b.n	8003592 <NVIC_EncodePriority+0x32>
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	43d9      	mvns	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	4313      	orrs	r3, r2
         );
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3724      	adds	r7, #36	; 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <SysTick_Config>:
=======
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f1c3 0307 	rsb	r3, r3, #7
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf28      	it	cs
 800392a:	2304      	movcs	r3, #4
 800392c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3304      	adds	r3, #4
 8003932:	2b06      	cmp	r3, #6
 8003934:	d902      	bls.n	800393c <NVIC_EncodePriority+0x30>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3b03      	subs	r3, #3
 800393a:	e000      	b.n	800393e <NVIC_EncodePriority+0x32>
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	43d9      	mvns	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	4313      	orrs	r3, r2
         );
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d8:	d301      	bcc.n	80035de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035da:	2301      	movs	r3, #1
 80035dc:	e00f      	b.n	80035fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <SysTick_Config+0x40>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e6:	210f      	movs	r1, #15
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ec:	f7ff ff8e 	bl	800350c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <SysTick_Config+0x40>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <SysTick_Config+0x40>)
 80035f8:	2207      	movs	r2, #7
 80035fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	e000e010 	.word	0xe000e010

0800360c <HAL_NVIC_SetPriorityGrouping>:
=======
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003984:	d301      	bcc.n	800398a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003986:	2301      	movs	r3, #1
 8003988:	e00f      	b.n	80039aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <SysTick_Config+0x40>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003992:	210f      	movs	r1, #15
 8003994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003998:	f7ff ff8e 	bl	80038b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <SysTick_Config+0x40>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <SysTick_Config+0x40>)
 80039a4:	2207      	movs	r2, #7
 80039a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
=======
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff29 	bl	800346c <__NVIC_SetPriorityGrouping>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_SetPriority>:
=======
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff29 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
=======
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8003634:	f7ff ff3e 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 8003638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	6978      	ldr	r0, [r7, #20]
 8003640:	f7ff ff8e 	bl	8003560 <NVIC_EncodePriority>
 8003644:	4602      	mov	r2, r0
 8003646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff5d 	bl	800350c <__NVIC_SetPriority>
}
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_EnableIRQ>:
=======
 80039e0:	f7ff ff3e 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff ff8e 	bl	800390c <NVIC_EncodePriority>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff5d 	bl	80038b8 <__NVIC_SetPriority>
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	71fb      	strb	r3, [r7, #7]
=======
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff31 	bl	80034d0 <__NVIC_EnableIRQ>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SYSTICK_Config>:
=======
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff31 	bl	800387c <__NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ffa2 	bl	80035c8 <SysTick_Config>
 8003684:	4603      	mov	r3, r0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_DMA_Init>:
=======
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ffa2 	bl	8003974 <SysTick_Config>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff feb8 	bl	8003410 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]
=======
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a48:	f7ff feb8 	bl	80037bc <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e099      	b.n	80037e0 <HAL_DMA_Init+0x150>
=======
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e099      	b.n	8003b8c <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< Updated upstream
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036cc:	e00f      	b.n	80036ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ce:	f7ff fe9f 	bl	8003410 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d908      	bls.n	80036ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2203      	movs	r2, #3
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e078      	b.n	80037e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e8      	bne.n	80036ce <HAL_DMA_Init+0x3e>
=======
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a78:	e00f      	b.n	8003a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a7a:	f7ff fe9f 	bl	80037bc <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d908      	bls.n	8003a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e078      	b.n	8003b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e8      	bne.n	8003a7a <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_DMA_Init+0x158>)
 8003708:	4013      	ands	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
=======
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_DMA_Init+0x158>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b04      	cmp	r3, #4
 8003746:	d107      	bne.n	8003758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	4313      	orrs	r3, r2
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
=======
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d107      	bne.n	8003b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4313      	orrs	r3, r2
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b04      	cmp	r3, #4
 8003780:	d117      	bne.n	80037b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
=======
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d117      	bne.n	8003b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fb0d 	bl	8003db4 <DMA_CheckFifoParam>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ae:	2301      	movs	r3, #1
 80037b0:	e016      	b.n	80037e0 <HAL_DMA_Init+0x150>
=======
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb0d 	bl	8004160 <DMA_CheckFifoParam>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e016      	b.n	8003b8c <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	615a      	str	r2, [r3, #20]
=======
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fac4 	bl	8003d48 <DMA_CalcBaseAndBitshift>
 80037c0:	4603      	mov	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	223f      	movs	r2, #63	; 0x3f
 80037ca:	409a      	lsls	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	f010803f 	.word	0xf010803f

080037ec <HAL_DMA_Start_IT>:
=======
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fac4 	bl	80040f4 <DMA_CalcBaseAndBitshift>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	223f      	movs	r2, #63	; 0x3f
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	f010803f 	.word	0xf010803f

08003b98 <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	613b      	str	r3, [r7, #16]
=======
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_DMA_Start_IT+0x26>
 800380e:	2302      	movs	r3, #2
 8003810:	e040      	b.n	8003894 <HAL_DMA_Start_IT+0xa8>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d12f      	bne.n	8003886 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fa56 	bl	8003cec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	223f      	movs	r2, #63	; 0x3f
 8003846:	409a      	lsls	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0216 	orr.w	r2, r2, #22
 800385a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0208 	orr.w	r2, r2, #8
 8003872:	601a      	str	r2, [r3, #0]
=======
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_DMA_Start_IT+0x26>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e040      	b.n	8003c40 <HAL_DMA_Start_IT+0xa8>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d12f      	bne.n	8003c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fa56 	bl	8004098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	223f      	movs	r2, #63	; 0x3f
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0216 	orr.w	r2, r2, #22
 8003c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< Updated upstream
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e005      	b.n	8003892 <HAL_DMA_Start_IT+0xa6>
=======
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e005      	b.n	8003c3e <HAL_DMA_Start_IT+0xa6>
>>>>>>> Stashed changes
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< Updated upstream
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800388e:	2302      	movs	r3, #2
 8003890:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DMA_Abort>:
=======
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038aa:	f7ff fdb1 	bl	8003410 <HAL_GetTick>
 80038ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d008      	beq.n	80038ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e052      	b.n	8003974 <HAL_DMA_Abort+0xd8>
=======
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7ff fdb1 	bl	80037bc <HAL_GetTick>
 8003c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d008      	beq.n	8003c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e052      	b.n	8003d20 <HAL_DMA_Abort+0xd8>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< Updated upstream
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0216 	bic.w	r2, r2, #22
 80038dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <HAL_DMA_Abort+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0208 	bic.w	r2, r2, #8
 800390c:	601a      	str	r2, [r3, #0]
=======
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0216 	bic.w	r2, r2, #22
 8003c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_DMA_Abort+0x62>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0208 	bic.w	r2, r2, #8
 8003cb8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< Updated upstream
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391e:	e013      	b.n	8003948 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003920:	f7ff fd76 	bl	8003410 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b05      	cmp	r3, #5
 800392c:	d90c      	bls.n	8003948 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2203      	movs	r2, #3
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e015      	b.n	8003974 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e4      	bne.n	8003920 <HAL_DMA_Abort+0x84>
=======
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cca:	e013      	b.n	8003cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ccc:	f7ff fd76 	bl	80037bc <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d90c      	bls.n	8003cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2203      	movs	r2, #3
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e015      	b.n	8003d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e4      	bne.n	8003ccc <HAL_DMA_Abort+0x84>
>>>>>>> Stashed changes
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	223f      	movs	r2, #63	; 0x3f
 800395c:	409a      	lsls	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_DMA_Abort_IT>:
=======
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	223f      	movs	r2, #63	; 0x3f
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e00c      	b.n	80039b4 <HAL_DMA_Abort_IT+0x38>
=======
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e00c      	b.n	8003d60 <HAL_DMA_Abort_IT+0x38>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< Updated upstream
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2205      	movs	r2, #5
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_DMA_IRQHandler>:
=======
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2205      	movs	r2, #5
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039cc:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <HAL_DMA_IRQHandler+0x258>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a92      	ldr	r2, [pc, #584]	; (8003c1c <HAL_DMA_IRQHandler+0x25c>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	2208      	movs	r2, #8
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01a      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0204 	bic.w	r2, r2, #4
 8003a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2208      	movs	r2, #8
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d78:	4b92      	ldr	r3, [pc, #584]	; (8003fc4 <HAL_DMA_IRQHandler+0x258>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a92      	ldr	r2, [pc, #584]	; (8003fc8 <HAL_DMA_IRQHandler+0x25c>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	2208      	movs	r2, #8
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01a      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0204 	bic.w	r2, r2, #4
 8003dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2201      	movs	r2, #1
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d012      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	2201      	movs	r2, #1
 8003a50:	409a      	lsls	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	f043 0202 	orr.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d012      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2204      	movs	r2, #4
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d012      	beq.n	8003a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	2204      	movs	r2, #4
 8003a86:	409a      	lsls	r2, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	2204      	movs	r2, #4
 8003e14:	409a      	lsls	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	2204      	movs	r2, #4
 8003e32:	409a      	lsls	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d043      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d03c      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	2210      	movs	r2, #16
 8003abc:	409a      	lsls	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d018      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d024      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
 8003aee:	e01f      	b.n	8003b30 <HAL_DMA_IRQHandler+0x170>
=======
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	2210      	movs	r2, #16
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d043      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d03c      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2210      	movs	r2, #16
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d018      	beq.n	8003eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d024      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
 8003e9a:	e01f      	b.n	8003edc <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< Updated upstream
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01b      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
 8003b00:	e016      	b.n	8003b30 <HAL_DMA_IRQHandler+0x170>
=======
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e016      	b.n	8003edc <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0208 	bic.w	r2, r2, #8
 8003b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
=======
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0208 	bic.w	r2, r2, #8
 8003eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	2220      	movs	r2, #32
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 808e 	beq.w	8003c5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8086 	beq.w	8003c5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2220      	movs	r2, #32
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d136      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0216 	bic.w	r2, r2, #22
 8003b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x1da>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0208 	bic.w	r2, r2, #8
 8003ba8:	601a      	str	r2, [r3, #0]
=======
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 808e 	beq.w	800400a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8086 	beq.w	800400a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	2220      	movs	r2, #32
 8003f04:	409a      	lsls	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d136      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0216 	bic.w	r2, r2, #22
 8003f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x1da>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0208 	bic.w	r2, r2, #8
 8003f54:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	223f      	movs	r2, #63	; 0x3f
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d07d      	beq.n	8003cca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
        }
        return;
 8003bd6:	e078      	b.n	8003cca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01c      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d108      	bne.n	8003c06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d030      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
 8003c04:	e02b      	b.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
=======
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	223f      	movs	r2, #63	; 0x3f
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d07d      	beq.n	8004076 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
        }
        return;
 8003f82:	e078      	b.n	8004076 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01c      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d108      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d030      	beq.n	800400a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e02b      	b.n	800400a <HAL_DMA_IRQHandler+0x29e>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d027      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e022      	b.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	1b4e81b5 	.word	0x1b4e81b5
=======
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	e022      	b.n	800400a <HAL_DMA_IRQHandler+0x29e>
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Stashed changes
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0210 	bic.w	r2, r2, #16
 8003c3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
=======
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0210 	bic.w	r2, r2, #16
 8003fe8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< Updated upstream
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d032      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d022      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2205      	movs	r2, #5
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
=======
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	2b00      	cmp	r3, #0
 8004010:	d032      	beq.n	8004078 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d022      	beq.n	8004064 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2205      	movs	r2, #5
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      do
      {
        if (++count > timeout)
<<<<<<< Updated upstream
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d307      	bcc.n	8003ca6 <HAL_DMA_IRQHandler+0x2e6>
=======
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3301      	adds	r3, #1
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	429a      	cmp	r2, r3
 8004040:	d307      	bcc.n	8004052 <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> Stashed changes
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< Updated upstream
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f2      	bne.n	8003c8a <HAL_DMA_IRQHandler+0x2ca>
 8003ca4:	e000      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ca6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cca:	bf00      	nop
    }
  }
}
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop

08003cd4 <HAL_DMA_GetError>:
=======
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f2      	bne.n	8004036 <HAL_DMA_IRQHandler+0x2ca>
 8004050:	e000      	b.n	8004054 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004052:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	4798      	blx	r3
 8004074:	e000      	b.n	8004078 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004076:	bf00      	nop
    }
  }
}
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop

08004080 <HAL_DMA_GetError>:
>>>>>>> Stashed changes
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <DMA_SetConfig>:
=======
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d108      	bne.n	8003d2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	60da      	str	r2, [r3, #12]
=======
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d108      	bne.n	80040d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< Updated upstream
 8003d2a:	e007      	b.n	8003d3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	60da      	str	r2, [r3, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <DMA_CalcBaseAndBitshift>:
=======
 80040d6:	e007      	b.n	80040e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	3b10      	subs	r3, #16
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <DMA_CalcBaseAndBitshift+0x64>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]
=======
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	3b10      	subs	r3, #16
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <DMA_CalcBaseAndBitshift+0x64>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 8003d62:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d909      	bls.n	8003d8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	659a      	str	r2, [r3, #88]	; 0x58
 8003d88:	e007      	b.n	8003d9a <DMA_CalcBaseAndBitshift+0x52>
=======
 800410e:	4a13      	ldr	r2, [pc, #76]	; (800415c <DMA_CalcBaseAndBitshift+0x68>)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d909      	bls.n	8004136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	1d1a      	adds	r2, r3, #4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	659a      	str	r2, [r3, #88]	; 0x58
 8004134:	e007      	b.n	8004146 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	aaaaaaab 	.word	0xaaaaaaab
 8003db0:	08006e98 	.word	0x08006e98

08003db4 <DMA_CheckFifoParam>:
=======
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	aaaaaaab 	.word	0xaaaaaaab
 800415c:	080077f8 	.word	0x080077f8

08004160 <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11f      	bne.n	8003e0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d855      	bhi.n	8003e80 <DMA_CheckFifoParam+0xcc>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <DMA_CheckFifoParam+0x28>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003dff 	.word	0x08003dff
 8003de4:	08003ded 	.word	0x08003ded
 8003de8:	08003e81 	.word	0x08003e81
=======
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11f      	bne.n	80041ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d855      	bhi.n	800422c <DMA_CheckFifoParam+0xcc>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <DMA_CheckFifoParam+0x28>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	08004199 	.word	0x08004199
 800418c:	080041ab 	.word	0x080041ab
 8004190:	08004199 	.word	0x08004199
 8004194:	0800422d 	.word	0x0800422d
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d045      	beq.n	8003e84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfc:	e042      	b.n	8003e84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e06:	d13f      	bne.n	8003e88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0c:	e03c      	b.n	8003e88 <DMA_CheckFifoParam+0xd4>
=======
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d045      	beq.n	8004230 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e042      	b.n	8004230 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041b2:	d13f      	bne.n	8004234 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b8:	e03c      	b.n	8004234 <DMA_CheckFifoParam+0xd4>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e16:	d121      	bne.n	8003e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d836      	bhi.n	8003e8c <DMA_CheckFifoParam+0xd8>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <DMA_CheckFifoParam+0x70>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e3b 	.word	0x08003e3b
 8003e2c:	08003e35 	.word	0x08003e35
 8003e30:	08003e4d 	.word	0x08003e4d
=======
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c2:	d121      	bne.n	8004208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d836      	bhi.n	8004238 <DMA_CheckFifoParam+0xd8>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <DMA_CheckFifoParam+0x70>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041e7 	.word	0x080041e7
 80041d8:	080041e1 	.word	0x080041e1
 80041dc:	080041f9 	.word	0x080041f9
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      break;
 8003e38:	e02f      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d024      	beq.n	8003e90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4a:	e021      	b.n	8003e90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e54:	d11e      	bne.n	8003e94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e5a:	e01b      	b.n	8003e94 <DMA_CheckFifoParam+0xe0>
=======
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e02f      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d024      	beq.n	800423c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f6:	e021      	b.n	800423c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004200:	d11e      	bne.n	8004240 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004206:	e01b      	b.n	8004240 <DMA_CheckFifoParam+0xe0>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d902      	bls.n	8003e68 <DMA_CheckFifoParam+0xb4>
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d003      	beq.n	8003e6e <DMA_CheckFifoParam+0xba>
=======
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d902      	bls.n	8004214 <DMA_CheckFifoParam+0xb4>
 800420e:	2b03      	cmp	r3, #3
 8004210:	d003      	beq.n	800421a <DMA_CheckFifoParam+0xba>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 8003e66:	e018      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e015      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7e:	e00b      	b.n	8003e98 <DMA_CheckFifoParam+0xe4>
      break;
 8003e80:	bf00      	nop
 8003e82:	e00a      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      break;
 8003e84:	bf00      	nop
 8003e86:	e008      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      break;
 8003e88:	bf00      	nop
 8003e8a:	e006      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      break;
 8003e8c:	bf00      	nop
 8003e8e:	e004      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      break;
 8003e90:	bf00      	nop
 8003e92:	e002      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      break;   
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      break;
 8003e98:	bf00      	nop
=======
 8004212:	e018      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e015      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00e      	beq.n	8004244 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      break;
 800422a:	e00b      	b.n	8004244 <DMA_CheckFifoParam+0xe4>
      break;
 800422c:	bf00      	nop
 800422e:	e00a      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      break;
 8004230:	bf00      	nop
 8004232:	e008      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      break;
 8004234:	bf00      	nop
 8004236:	e006      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      break;
 8004238:	bf00      	nop
 800423a:	e004      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      break;
 800423c:	bf00      	nop
 800423e:	e002      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      break;   
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
      break;
 8004244:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_Init>:
=======
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
=======
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e165      	b.n	8004190 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	f040 8154 	bne.w	800418a <HAL_GPIO_Init+0x2e2>
=======
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e165      	b.n	800453c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	429a      	cmp	r2, r3
 800428a:	f040 8154 	bne.w	8004536 <HAL_GPIO_Init+0x2e2>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< Updated upstream
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d00b      	beq.n	8003f02 <HAL_GPIO_Init+0x5a>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d007      	beq.n	8003f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ef6:	2b11      	cmp	r3, #17
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b12      	cmp	r3, #18
 8003f00:	d130      	bne.n	8003f64 <HAL_GPIO_Init+0xbc>
=======
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d00b      	beq.n	80042ae <HAL_GPIO_Init+0x5a>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d007      	beq.n	80042ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042a2:	2b11      	cmp	r3, #17
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b12      	cmp	r3, #18
 80042ac:	d130      	bne.n	8004310 <HAL_GPIO_Init+0xbc>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 0201 	and.w	r2, r3, #1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	605a      	str	r2, [r3, #4]
=======
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	2203      	movs	r2, #3
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042e4:	2201      	movs	r2, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 0201 	and.w	r2, r3, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0xfc>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b12      	cmp	r3, #18
 8003fa2:	d123      	bne.n	8003fec <HAL_GPIO_Init+0x144>
=======
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0xfc>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b12      	cmp	r3, #18
 800434e:	d123      	bne.n	8004398 <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	08da      	lsrs	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3208      	adds	r2, #8
 8003fe6:	69b9      	ldr	r1, [r7, #24]
 8003fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	08da      	lsrs	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3208      	adds	r2, #8
 8004358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	220f      	movs	r2, #15
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	08da      	lsrs	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3208      	adds	r2, #8
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0203 	and.w	r2, r3, #3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	601a      	str	r2, [r3, #0]
=======
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2203      	movs	r2, #3
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0203 	and.w	r2, r3, #3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< Updated upstream
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80ae 	beq.w	800418a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	4b5c      	ldr	r3, [pc, #368]	; (80041a4 <HAL_GPIO_Init+0x2fc>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	4a5b      	ldr	r2, [pc, #364]	; (80041a4 <HAL_GPIO_Init+0x2fc>)
 8004038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <HAL_GPIO_Init+0x2fc>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404a:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_GPIO_Init+0x300>)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4e      	ldr	r2, [pc, #312]	; (80041ac <HAL_GPIO_Init+0x304>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d025      	beq.n	80040c2 <HAL_GPIO_Init+0x21a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4d      	ldr	r2, [pc, #308]	; (80041b0 <HAL_GPIO_Init+0x308>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01f      	beq.n	80040be <HAL_GPIO_Init+0x216>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4c      	ldr	r2, [pc, #304]	; (80041b4 <HAL_GPIO_Init+0x30c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d019      	beq.n	80040ba <HAL_GPIO_Init+0x212>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4b      	ldr	r2, [pc, #300]	; (80041b8 <HAL_GPIO_Init+0x310>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_GPIO_Init+0x20e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4a      	ldr	r2, [pc, #296]	; (80041bc <HAL_GPIO_Init+0x314>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00d      	beq.n	80040b2 <HAL_GPIO_Init+0x20a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a49      	ldr	r2, [pc, #292]	; (80041c0 <HAL_GPIO_Init+0x318>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <HAL_GPIO_Init+0x206>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a48      	ldr	r2, [pc, #288]	; (80041c4 <HAL_GPIO_Init+0x31c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_GPIO_Init+0x202>
 80040a6:	2306      	movs	r3, #6
 80040a8:	e00c      	b.n	80040c4 <HAL_GPIO_Init+0x21c>
 80040aa:	2307      	movs	r3, #7
 80040ac:	e00a      	b.n	80040c4 <HAL_GPIO_Init+0x21c>
 80040ae:	2305      	movs	r3, #5
 80040b0:	e008      	b.n	80040c4 <HAL_GPIO_Init+0x21c>
 80040b2:	2304      	movs	r3, #4
 80040b4:	e006      	b.n	80040c4 <HAL_GPIO_Init+0x21c>
 80040b6:	2303      	movs	r3, #3
 80040b8:	e004      	b.n	80040c4 <HAL_GPIO_Init+0x21c>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_Init+0x21c>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_GPIO_Init+0x21c>
 80040c2:	2300      	movs	r3, #0
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f002 0203 	and.w	r2, r2, #3
 80040ca:	0092      	lsls	r2, r2, #2
 80040cc:	4093      	lsls	r3, r2
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d4:	4934      	ldr	r1, [pc, #208]	; (80041a8 <HAL_GPIO_Init+0x300>)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3302      	adds	r3, #2
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_GPIO_Init+0x320>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004106:	4a30      	ldr	r2, [pc, #192]	; (80041c8 <HAL_GPIO_Init+0x320>)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800410c:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <HAL_GPIO_Init+0x320>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004130:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <HAL_GPIO_Init+0x320>)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_GPIO_Init+0x320>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_GPIO_Init+0x320>)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_GPIO_Init+0x320>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004184:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <HAL_GPIO_Init+0x320>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3301      	adds	r3, #1
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	f67f ae96 	bls.w	8003ec4 <HAL_GPIO_Init+0x1c>
=======
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80ae 	beq.w	8004536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <HAL_GPIO_Init+0x2fc>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	4a5b      	ldr	r2, [pc, #364]	; (8004550 <HAL_GPIO_Init+0x2fc>)
 80043e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ea:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_GPIO_Init+0x2fc>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043f6:	4a57      	ldr	r2, [pc, #348]	; (8004554 <HAL_GPIO_Init+0x300>)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	3302      	adds	r3, #2
 80043fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	220f      	movs	r2, #15
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a4e      	ldr	r2, [pc, #312]	; (8004558 <HAL_GPIO_Init+0x304>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d025      	beq.n	800446e <HAL_GPIO_Init+0x21a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a4d      	ldr	r2, [pc, #308]	; (800455c <HAL_GPIO_Init+0x308>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01f      	beq.n	800446a <HAL_GPIO_Init+0x216>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a4c      	ldr	r2, [pc, #304]	; (8004560 <HAL_GPIO_Init+0x30c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d019      	beq.n	8004466 <HAL_GPIO_Init+0x212>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a4b      	ldr	r2, [pc, #300]	; (8004564 <HAL_GPIO_Init+0x310>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <HAL_GPIO_Init+0x20e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4a      	ldr	r2, [pc, #296]	; (8004568 <HAL_GPIO_Init+0x314>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00d      	beq.n	800445e <HAL_GPIO_Init+0x20a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a49      	ldr	r2, [pc, #292]	; (800456c <HAL_GPIO_Init+0x318>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <HAL_GPIO_Init+0x206>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a48      	ldr	r2, [pc, #288]	; (8004570 <HAL_GPIO_Init+0x31c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d101      	bne.n	8004456 <HAL_GPIO_Init+0x202>
 8004452:	2306      	movs	r3, #6
 8004454:	e00c      	b.n	8004470 <HAL_GPIO_Init+0x21c>
 8004456:	2307      	movs	r3, #7
 8004458:	e00a      	b.n	8004470 <HAL_GPIO_Init+0x21c>
 800445a:	2305      	movs	r3, #5
 800445c:	e008      	b.n	8004470 <HAL_GPIO_Init+0x21c>
 800445e:	2304      	movs	r3, #4
 8004460:	e006      	b.n	8004470 <HAL_GPIO_Init+0x21c>
 8004462:	2303      	movs	r3, #3
 8004464:	e004      	b.n	8004470 <HAL_GPIO_Init+0x21c>
 8004466:	2302      	movs	r3, #2
 8004468:	e002      	b.n	8004470 <HAL_GPIO_Init+0x21c>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_GPIO_Init+0x21c>
 800446e:	2300      	movs	r3, #0
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	f002 0203 	and.w	r2, r2, #3
 8004476:	0092      	lsls	r2, r2, #2
 8004478:	4093      	lsls	r3, r2
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004480:	4934      	ldr	r1, [pc, #208]	; (8004554 <HAL_GPIO_Init+0x300>)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	3302      	adds	r3, #2
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <HAL_GPIO_Init+0x320>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b2:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_GPIO_Init+0x320>)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044b8:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <HAL_GPIO_Init+0x320>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044dc:	4a25      	ldr	r2, [pc, #148]	; (8004574 <HAL_GPIO_Init+0x320>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_GPIO_Init+0x320>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004506:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_GPIO_Init+0x320>)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_GPIO_Init+0x320>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004530:	4a10      	ldr	r2, [pc, #64]	; (8004574 <HAL_GPIO_Init+0x320>)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3301      	adds	r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	f67f ae96 	bls.w	8004270 <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8004198:	bf00      	nop
 800419a:	3724      	adds	r7, #36	; 0x24
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40013800 	.word	0x40013800
 80041ac:	40020000 	.word	0x40020000
 80041b0:	40020400 	.word	0x40020400
 80041b4:	40020800 	.word	0x40020800
 80041b8:	40020c00 	.word	0x40020c00
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40021400 	.word	0x40021400
 80041c4:	40021800 	.word	0x40021800
 80041c8:	40013c00 	.word	0x40013c00

080041cc <HAL_GPIO_ReadPin>:
=======
 8004544:	bf00      	nop
 8004546:	3724      	adds	r7, #36	; 0x24
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40021400 	.word	0x40021400
 8004570:	40021800 	.word	0x40021800
 8004574:	40013c00 	.word	0x40013c00

08004578 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
=======
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< Updated upstream
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	887b      	ldrh	r3, [r7, #2]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	e001      	b.n	80041ee <HAL_GPIO_ReadPin+0x22>
=======
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
 8004594:	e001      	b.n	800459a <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_GPIO_WritePin>:
=======
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
 8004208:	4613      	mov	r3, r2
 800420a:	707b      	strb	r3, [r7, #1]
=======
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	807b      	strh	r3, [r7, #2]
 80045b4:	4613      	mov	r3, r2
 80045b6:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 800420c:	787b      	ldrb	r3, [r7, #1]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	619a      	str	r2, [r3, #24]
=======
 80045b8:	787b      	ldrb	r3, [r7, #1]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 8004218:	e003      	b.n	8004222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	041a      	lsls	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	619a      	str	r2, [r3, #24]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <HAL_PWREx_EnableOverDrive>:
=======
 80045c4:	e003      	b.n	80045ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	041a      	lsls	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	619a      	str	r2, [r3, #24]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_PWREx_EnableOverDrive>:
>>>>>>> Stashed changes
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< Updated upstream
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	6413      	str	r3, [r2, #64]	; 0x40
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800425c:	f7ff f8d8 	bl	8003410 <HAL_GetTick>
 8004260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004262:	e009      	b.n	8004278 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004264:	f7ff f8d4 	bl	8003410 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004272:	d901      	bls.n	8004278 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e01f      	b.n	80042b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d1ee      	bne.n	8004264 <HAL_PWREx_EnableOverDrive+0x34>
=======
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_PWREx_EnableOverDrive+0x90>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_PWREx_EnableOverDrive+0x90>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6413      	str	r3, [r2, #64]	; 0x40
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_PWREx_EnableOverDrive+0x90>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_PWREx_EnableOverDrive+0x94>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004608:	f7ff f8d8 	bl	80037bc <HAL_GetTick>
 800460c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800460e:	e009      	b.n	8004624 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004610:	f7ff f8d4 	bl	80037bc <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461e:	d901      	bls.n	8004624 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e01f      	b.n	8004664 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <HAL_PWREx_EnableOverDrive+0x98>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d1ee      	bne.n	8004610 <HAL_PWREx_EnableOverDrive+0x34>
>>>>>>> Stashed changes
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< Updated upstream
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800428c:	f7ff f8c0 	bl	8003410 <HAL_GetTick>
 8004290:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004292:	e009      	b.n	80042a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004294:	f7ff f8bc 	bl	8003410 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a2:	d901      	bls.n	80042a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e007      	b.n	80042b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b4:	d1ee      	bne.n	8004294 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40023800 	.word	0x40023800
 80042c4:	420e0040 	.word	0x420e0040
 80042c8:	40007000 	.word	0x40007000
 80042cc:	420e0044 	.word	0x420e0044

080042d0 <HAL_RCC_ClockConfig>:
=======
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004638:	f7ff f8c0 	bl	80037bc <HAL_GetTick>
 800463c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800463e:	e009      	b.n	8004654 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004640:	f7ff f8bc 	bl	80037bc <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800464e:	d901      	bls.n	8004654 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e007      	b.n	8004664 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <HAL_PWREx_EnableOverDrive+0x98>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004660:	d1ee      	bne.n	8004640 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	420e0040 	.word	0x420e0040
 8004674:	40007000 	.word	0x40007000
 8004678:	420e0044 	.word	0x420e0044

0800467c <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
=======
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cc      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
=======
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0cc      	b.n	800482a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80042e4:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d90c      	bls.n	800430c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
=======
 8004690:	4b68      	ldr	r3, [pc, #416]	; (8004834 <HAL_RCC_ClockConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d90c      	bls.n	80046b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b65      	ldr	r3, [pc, #404]	; (8004834 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 80042fa:	4b63      	ldr	r3, [pc, #396]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b8      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
=======
 80046a6:	4b63      	ldr	r3, [pc, #396]	; (8004834 <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0b8      	b.n	800482a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_ClockConfig+0x8a>
=======
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a58      	ldr	r2, [pc, #352]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800432e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004346:	6093      	str	r3, [r2, #8]
=======
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d0:	4b59      	ldr	r3, [pc, #356]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a58      	ldr	r2, [pc, #352]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4a52      	ldr	r2, [pc, #328]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046f2:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	494d      	ldr	r1, [pc, #308]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
=======
 80046f4:	4b50      	ldr	r3, [pc, #320]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	494d      	ldr	r1, [pc, #308]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x120>
=======
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d044      	beq.n	800479c <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d119      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
=======
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d119      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e07f      	b.n	800482a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
=======
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d003      	beq.n	800473a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004736:	2b03      	cmp	r3, #3
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	4b3f      	ldr	r3, [pc, #252]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e06f      	b.n	800482a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e067      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
=======
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e067      	b.n	800482a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4934      	ldr	r1, [pc, #208]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c0:	f7ff f826 	bl	8003410 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	e00a      	b.n	80043de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f7ff f822 	bl	8003410 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 020c 	and.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d1eb      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xf8>
=======
 800475a:	4b37      	ldr	r3, [pc, #220]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4934      	ldr	r1, [pc, #208]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	4313      	orrs	r3, r2
 800476a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800476c:	f7ff f826 	bl	80037bc <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e00a      	b.n	800478a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7ff f822 	bl	80037bc <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e04f      	b.n	800482a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 020c 	and.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d1eb      	bne.n	8004774 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d20c      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]
=======
 800479c:	4b25      	ldr	r3, [pc, #148]	; (8004834 <HAL_RCC_ClockConfig+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d20c      	bcs.n	80047c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b22      	ldr	r3, [pc, #136]	; (8004834 <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e032      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
=======
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e032      	b.n	800482a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4916      	ldr	r1, [pc, #88]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
=======
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d0:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4916      	ldr	r1, [pc, #88]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490e      	ldr	r1, [pc, #56]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
=======
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	490e      	ldr	r1, [pc, #56]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8004456:	f000 f855 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 800445a:	4601      	mov	r1, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	5cd3      	ldrb	r3, [r2, r3]
 800446a:	fa21 f303 	lsr.w	r3, r1, r3
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe ff86 	bl	8003388 <HAL_InitTick>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00
 800448c:	40023800 	.word	0x40023800
 8004490:	08006e80 	.word	0x08006e80
 8004494:	20000000 	.word	0x20000000
 8004498:	20000008 	.word	0x20000008

0800449c <HAL_RCC_GetHCLKFreq>:
=======
 8004802:	f000 f855 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 8004806:	4601      	mov	r1, r0
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 8004814:	5cd3      	ldrb	r3, [r2, r3]
 8004816:	fa21 f303 	lsr.w	r3, r1, r3
 800481a:	4a09      	ldr	r2, [pc, #36]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800481e:	4b09      	ldr	r3, [pc, #36]	; (8004844 <HAL_RCC_ClockConfig+0x1c8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe ff86 	bl	8003734 <HAL_InitTick>

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023c00 	.word	0x40023c00
 8004838:	40023800 	.word	0x40023800
 800483c:	080077e0 	.word	0x080077e0
 8004840:	20000000 	.word	0x20000000
 8004844:	20000008 	.word	0x20000008

08004848 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000000 	.word	0x20000000

080044b4 <HAL_RCC_GetPCLK1Freq>:
=======
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_GetHCLKFreq+0x14>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000000 	.word	0x20000000

08004860 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b8:	f7ff fff0 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044bc:	4601      	mov	r1, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4a03      	ldr	r2, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	08006e90 	.word	0x08006e90

080044dc <HAL_RCC_GetPCLK2Freq>:
=======
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004864:	f7ff fff0 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004868:	4601      	mov	r1, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0a9b      	lsrs	r3, r3, #10
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4a03      	ldr	r2, [pc, #12]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004876:	5cd3      	ldrb	r3, [r2, r3]
 8004878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	080077f0 	.word	0x080077f0

08004888 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e0:	f7ff ffdc 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044e4:	4601      	mov	r1, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0b5b      	lsrs	r3, r3, #13
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4a03      	ldr	r2, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f2:	5cd3      	ldrb	r3, [r2, r3]
 80044f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	08006e90 	.word	0x08006e90

08004504 <HAL_RCC_GetSysClockFreq>:
=======
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800488c:	f7ff ffdc 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004890:	4601      	mov	r1, r0
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0b5b      	lsrs	r3, r3, #13
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4a03      	ldr	r2, [pc, #12]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800
 80048ac:	080077f0 	.word	0x080077f0

080048b0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800451e:	4bc6      	ldr	r3, [pc, #792]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b0c      	cmp	r3, #12
 8004528:	f200 817e 	bhi.w	8004828 <HAL_RCC_GetSysClockFreq+0x324>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <HAL_RCC_GetSysClockFreq+0x30>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004569 	.word	0x08004569
 8004538:	08004829 	.word	0x08004829
 800453c:	08004829 	.word	0x08004829
 8004540:	08004829 	.word	0x08004829
 8004544:	0800456f 	.word	0x0800456f
 8004548:	08004829 	.word	0x08004829
 800454c:	08004829 	.word	0x08004829
 8004550:	08004829 	.word	0x08004829
 8004554:	08004575 	.word	0x08004575
 8004558:	08004829 	.word	0x08004829
 800455c:	08004829 	.word	0x08004829
 8004560:	08004829 	.word	0x08004829
 8004564:	080046d1 	.word	0x080046d1
=======
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ca:	4bc6      	ldr	r3, [pc, #792]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	f200 817e 	bhi.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x324>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004915 	.word	0x08004915
 80048e4:	08004bd5 	.word	0x08004bd5
 80048e8:	08004bd5 	.word	0x08004bd5
 80048ec:	08004bd5 	.word	0x08004bd5
 80048f0:	0800491b 	.word	0x0800491b
 80048f4:	08004bd5 	.word	0x08004bd5
 80048f8:	08004bd5 	.word	0x08004bd5
 80048fc:	08004bd5 	.word	0x08004bd5
 8004900:	08004921 	.word	0x08004921
 8004904:	08004bd5 	.word	0x08004bd5
 8004908:	08004bd5 	.word	0x08004bd5
 800490c:	08004bd5 	.word	0x08004bd5
 8004910:	08004a7d 	.word	0x08004a7d
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8004568:	4bb4      	ldr	r3, [pc, #720]	; (800483c <HAL_RCC_GetSysClockFreq+0x338>)
 800456a:	613b      	str	r3, [r7, #16]
       break;
 800456c:	e15f      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x32a>
=======
 8004914:	4bb4      	ldr	r3, [pc, #720]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004916:	613b      	str	r3, [r7, #16]
       break;
 8004918:	e15f      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x32a>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 800456e:	4bb4      	ldr	r3, [pc, #720]	; (8004840 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004570:	613b      	str	r3, [r7, #16]
      break;
 8004572:	e15c      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x32a>
=======
 800491a:	4bb4      	ldr	r3, [pc, #720]	; (8004bec <HAL_RCC_GetSysClockFreq+0x33c>)
 800491c:	613b      	str	r3, [r7, #16]
      break;
 800491e:	e15c      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x32a>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8004574:	4bb0      	ldr	r3, [pc, #704]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800457c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800457e:	4bae      	ldr	r3, [pc, #696]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d04a      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458a:	4bab      	ldr	r3, [pc, #684]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	099b      	lsrs	r3, r3, #6
 8004590:	f04f 0400 	mov.w	r4, #0
 8004594:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	ea03 0501 	and.w	r5, r3, r1
 80045a0:	ea04 0602 	and.w	r6, r4, r2
 80045a4:	4629      	mov	r1, r5
 80045a6:	4632      	mov	r2, r6
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	0154      	lsls	r4, r2, #5
 80045b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045b6:	014b      	lsls	r3, r1, #5
 80045b8:	4619      	mov	r1, r3
 80045ba:	4622      	mov	r2, r4
 80045bc:	1b49      	subs	r1, r1, r5
 80045be:	eb62 0206 	sbc.w	r2, r2, r6
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	0194      	lsls	r4, r2, #6
 80045cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045d0:	018b      	lsls	r3, r1, #6
 80045d2:	1a5b      	subs	r3, r3, r1
 80045d4:	eb64 0402 	sbc.w	r4, r4, r2
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	00e2      	lsls	r2, r4, #3
 80045e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045e6:	00d9      	lsls	r1, r3, #3
 80045e8:	460b      	mov	r3, r1
 80045ea:	4614      	mov	r4, r2
 80045ec:	195b      	adds	r3, r3, r5
 80045ee:	eb44 0406 	adc.w	r4, r4, r6
 80045f2:	f04f 0100 	mov.w	r1, #0
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	0262      	lsls	r2, r4, #9
 80045fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004600:	0259      	lsls	r1, r3, #9
 8004602:	460b      	mov	r3, r1
 8004604:	4614      	mov	r4, r2
 8004606:	4618      	mov	r0, r3
 8004608:	4621      	mov	r1, r4
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	461a      	mov	r2, r3
 8004612:	4623      	mov	r3, r4
 8004614:	f7fb fe4c 	bl	80002b0 <__aeabi_uldivmod>
 8004618:	4603      	mov	r3, r0
 800461a:	460c      	mov	r4, r1
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e049      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x1b0>
=======
 8004920:	4bb0      	ldr	r3, [pc, #704]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004928:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800492a:	4bae      	ldr	r3, [pc, #696]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d04a      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004936:	4bab      	ldr	r3, [pc, #684]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	f04f 0400 	mov.w	r4, #0
 8004940:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	ea03 0501 	and.w	r5, r3, r1
 800494c:	ea04 0602 	and.w	r6, r4, r2
 8004950:	4629      	mov	r1, r5
 8004952:	4632      	mov	r2, r6
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	0154      	lsls	r4, r2, #5
 800495e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004962:	014b      	lsls	r3, r1, #5
 8004964:	4619      	mov	r1, r3
 8004966:	4622      	mov	r2, r4
 8004968:	1b49      	subs	r1, r1, r5
 800496a:	eb62 0206 	sbc.w	r2, r2, r6
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	f04f 0400 	mov.w	r4, #0
 8004976:	0194      	lsls	r4, r2, #6
 8004978:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800497c:	018b      	lsls	r3, r1, #6
 800497e:	1a5b      	subs	r3, r3, r1
 8004980:	eb64 0402 	sbc.w	r4, r4, r2
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	00e2      	lsls	r2, r4, #3
 800498e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004992:	00d9      	lsls	r1, r3, #3
 8004994:	460b      	mov	r3, r1
 8004996:	4614      	mov	r4, r2
 8004998:	195b      	adds	r3, r3, r5
 800499a:	eb44 0406 	adc.w	r4, r4, r6
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	0262      	lsls	r2, r4, #9
 80049a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049ac:	0259      	lsls	r1, r3, #9
 80049ae:	460b      	mov	r3, r1
 80049b0:	4614      	mov	r4, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	4621      	mov	r1, r4
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	461a      	mov	r2, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	f7fb fc76 	bl	80002b0 <__aeabi_uldivmod>
 80049c4:	4603      	mov	r3, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	e049      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0x1b0>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8004620:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	f04f 0400 	mov.w	r4, #0
 800462a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	ea03 0501 	and.w	r5, r3, r1
 8004636:	ea04 0602 	and.w	r6, r4, r2
 800463a:	4629      	mov	r1, r5
 800463c:	4632      	mov	r2, r6
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f04f 0400 	mov.w	r4, #0
 8004646:	0154      	lsls	r4, r2, #5
 8004648:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800464c:	014b      	lsls	r3, r1, #5
 800464e:	4619      	mov	r1, r3
 8004650:	4622      	mov	r2, r4
 8004652:	1b49      	subs	r1, r1, r5
 8004654:	eb62 0206 	sbc.w	r2, r2, r6
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	f04f 0400 	mov.w	r4, #0
 8004660:	0194      	lsls	r4, r2, #6
 8004662:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004666:	018b      	lsls	r3, r1, #6
 8004668:	1a5b      	subs	r3, r3, r1
 800466a:	eb64 0402 	sbc.w	r4, r4, r2
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	00e2      	lsls	r2, r4, #3
 8004678:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800467c:	00d9      	lsls	r1, r3, #3
 800467e:	460b      	mov	r3, r1
 8004680:	4614      	mov	r4, r2
 8004682:	195b      	adds	r3, r3, r5
 8004684:	eb44 0406 	adc.w	r4, r4, r6
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	02a2      	lsls	r2, r4, #10
 8004692:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004696:	0299      	lsls	r1, r3, #10
 8004698:	460b      	mov	r3, r1
 800469a:	4614      	mov	r4, r2
 800469c:	4618      	mov	r0, r3
 800469e:	4621      	mov	r1, r4
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f04f 0400 	mov.w	r4, #0
 80046a6:	461a      	mov	r2, r3
 80046a8:	4623      	mov	r3, r4
 80046aa:	f7fb fe01 	bl	80002b0 <__aeabi_uldivmod>
 80046ae:	4603      	mov	r3, r0
 80046b0:	460c      	mov	r4, r1
 80046b2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046b4:	4b60      	ldr	r3, [pc, #384]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	613b      	str	r3, [r7, #16]
      break;
 80046ce:	e0ae      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x32a>
=======
 80049cc:	4b85      	ldr	r3, [pc, #532]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	099b      	lsrs	r3, r3, #6
 80049d2:	f04f 0400 	mov.w	r4, #0
 80049d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	ea03 0501 	and.w	r5, r3, r1
 80049e2:	ea04 0602 	and.w	r6, r4, r2
 80049e6:	4629      	mov	r1, r5
 80049e8:	4632      	mov	r2, r6
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	f04f 0400 	mov.w	r4, #0
 80049f2:	0154      	lsls	r4, r2, #5
 80049f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049f8:	014b      	lsls	r3, r1, #5
 80049fa:	4619      	mov	r1, r3
 80049fc:	4622      	mov	r2, r4
 80049fe:	1b49      	subs	r1, r1, r5
 8004a00:	eb62 0206 	sbc.w	r2, r2, r6
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	f04f 0400 	mov.w	r4, #0
 8004a0c:	0194      	lsls	r4, r2, #6
 8004a0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a12:	018b      	lsls	r3, r1, #6
 8004a14:	1a5b      	subs	r3, r3, r1
 8004a16:	eb64 0402 	sbc.w	r4, r4, r2
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	00e2      	lsls	r2, r4, #3
 8004a24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a28:	00d9      	lsls	r1, r3, #3
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	195b      	adds	r3, r3, r5
 8004a30:	eb44 0406 	adc.w	r4, r4, r6
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	02a2      	lsls	r2, r4, #10
 8004a3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a42:	0299      	lsls	r1, r3, #10
 8004a44:	460b      	mov	r3, r1
 8004a46:	4614      	mov	r4, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f04f 0400 	mov.w	r4, #0
 8004a52:	461a      	mov	r2, r3
 8004a54:	4623      	mov	r3, r4
 8004a56:	f7fb fc2b 	bl	80002b0 <__aeabi_uldivmod>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a60:	4b60      	ldr	r3, [pc, #384]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	0c1b      	lsrs	r3, r3, #16
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	613b      	str	r3, [r7, #16]
      break;
 8004a7a:	e0ae      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x32a>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 80046d0:	4b59      	ldr	r3, [pc, #356]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046da:	4b57      	ldr	r3, [pc, #348]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d04a      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e6:	4b54      	ldr	r3, [pc, #336]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	ea03 0501 	and.w	r5, r3, r1
 80046fc:	ea04 0602 	and.w	r6, r4, r2
 8004700:	4629      	mov	r1, r5
 8004702:	4632      	mov	r2, r6
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	f04f 0400 	mov.w	r4, #0
 800470c:	0154      	lsls	r4, r2, #5
 800470e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004712:	014b      	lsls	r3, r1, #5
 8004714:	4619      	mov	r1, r3
 8004716:	4622      	mov	r2, r4
 8004718:	1b49      	subs	r1, r1, r5
 800471a:	eb62 0206 	sbc.w	r2, r2, r6
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	0194      	lsls	r4, r2, #6
 8004728:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800472c:	018b      	lsls	r3, r1, #6
 800472e:	1a5b      	subs	r3, r3, r1
 8004730:	eb64 0402 	sbc.w	r4, r4, r2
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	00e2      	lsls	r2, r4, #3
 800473e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004742:	00d9      	lsls	r1, r3, #3
 8004744:	460b      	mov	r3, r1
 8004746:	4614      	mov	r4, r2
 8004748:	195b      	adds	r3, r3, r5
 800474a:	eb44 0406 	adc.w	r4, r4, r6
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	0262      	lsls	r2, r4, #9
 8004758:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800475c:	0259      	lsls	r1, r3, #9
 800475e:	460b      	mov	r3, r1
 8004760:	4614      	mov	r4, r2
 8004762:	4618      	mov	r0, r3
 8004764:	4621      	mov	r1, r4
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	461a      	mov	r2, r3
 800476e:	4623      	mov	r3, r4
 8004770:	f7fb fd9e 	bl	80002b0 <__aeabi_uldivmod>
 8004774:	4603      	mov	r3, r0
 8004776:	460c      	mov	r4, r1
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e049      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x30c>
=======
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a84:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a86:	4b57      	ldr	r3, [pc, #348]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d04a      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a92:	4b54      	ldr	r3, [pc, #336]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	f04f 0400 	mov.w	r4, #0
 8004a9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	ea03 0501 	and.w	r5, r3, r1
 8004aa8:	ea04 0602 	and.w	r6, r4, r2
 8004aac:	4629      	mov	r1, r5
 8004aae:	4632      	mov	r2, r6
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	f04f 0400 	mov.w	r4, #0
 8004ab8:	0154      	lsls	r4, r2, #5
 8004aba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004abe:	014b      	lsls	r3, r1, #5
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	1b49      	subs	r1, r1, r5
 8004ac6:	eb62 0206 	sbc.w	r2, r2, r6
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	f04f 0400 	mov.w	r4, #0
 8004ad2:	0194      	lsls	r4, r2, #6
 8004ad4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ad8:	018b      	lsls	r3, r1, #6
 8004ada:	1a5b      	subs	r3, r3, r1
 8004adc:	eb64 0402 	sbc.w	r4, r4, r2
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	00e2      	lsls	r2, r4, #3
 8004aea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aee:	00d9      	lsls	r1, r3, #3
 8004af0:	460b      	mov	r3, r1
 8004af2:	4614      	mov	r4, r2
 8004af4:	195b      	adds	r3, r3, r5
 8004af6:	eb44 0406 	adc.w	r4, r4, r6
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	0262      	lsls	r2, r4, #9
 8004b04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b08:	0259      	lsls	r1, r3, #9
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	4621      	mov	r1, r4
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f04f 0400 	mov.w	r4, #0
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	f7fb fbc8 	bl	80002b0 <__aeabi_uldivmod>
 8004b20:	4603      	mov	r3, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e049      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x30c>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 800477c:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	f04f 0400 	mov.w	r4, #0
 8004786:	f240 11ff 	movw	r1, #511	; 0x1ff
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	ea03 0501 	and.w	r5, r3, r1
 8004792:	ea04 0602 	and.w	r6, r4, r2
 8004796:	4629      	mov	r1, r5
 8004798:	4632      	mov	r2, r6
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	f04f 0400 	mov.w	r4, #0
 80047a2:	0154      	lsls	r4, r2, #5
 80047a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047a8:	014b      	lsls	r3, r1, #5
 80047aa:	4619      	mov	r1, r3
 80047ac:	4622      	mov	r2, r4
 80047ae:	1b49      	subs	r1, r1, r5
 80047b0:	eb62 0206 	sbc.w	r2, r2, r6
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	f04f 0400 	mov.w	r4, #0
 80047bc:	0194      	lsls	r4, r2, #6
 80047be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047c2:	018b      	lsls	r3, r1, #6
 80047c4:	1a5b      	subs	r3, r3, r1
 80047c6:	eb64 0402 	sbc.w	r4, r4, r2
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	00e2      	lsls	r2, r4, #3
 80047d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047d8:	00d9      	lsls	r1, r3, #3
 80047da:	460b      	mov	r3, r1
 80047dc:	4614      	mov	r4, r2
 80047de:	195b      	adds	r3, r3, r5
 80047e0:	eb44 0406 	adc.w	r4, r4, r6
 80047e4:	f04f 0100 	mov.w	r1, #0
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	02a2      	lsls	r2, r4, #10
 80047ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047f2:	0299      	lsls	r1, r3, #10
 80047f4:	460b      	mov	r3, r1
 80047f6:	4614      	mov	r4, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	4621      	mov	r1, r4
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f04f 0400 	mov.w	r4, #0
 8004802:	461a      	mov	r2, r3
 8004804:	4623      	mov	r3, r4
 8004806:	f7fb fd53 	bl	80002b0 <__aeabi_uldivmod>
 800480a:	4603      	mov	r3, r0
 800480c:	460c      	mov	r4, r1
 800480e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_GetSysClockFreq+0x334>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	0f1b      	lsrs	r3, r3, #28
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	613b      	str	r3, [r7, #16]
      break;
 8004826:	e002      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x32a>
=======
 8004b28:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	f04f 0400 	mov.w	r4, #0
 8004b32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	ea03 0501 	and.w	r5, r3, r1
 8004b3e:	ea04 0602 	and.w	r6, r4, r2
 8004b42:	4629      	mov	r1, r5
 8004b44:	4632      	mov	r2, r6
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	0154      	lsls	r4, r2, #5
 8004b50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b54:	014b      	lsls	r3, r1, #5
 8004b56:	4619      	mov	r1, r3
 8004b58:	4622      	mov	r2, r4
 8004b5a:	1b49      	subs	r1, r1, r5
 8004b5c:	eb62 0206 	sbc.w	r2, r2, r6
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	f04f 0400 	mov.w	r4, #0
 8004b68:	0194      	lsls	r4, r2, #6
 8004b6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b6e:	018b      	lsls	r3, r1, #6
 8004b70:	1a5b      	subs	r3, r3, r1
 8004b72:	eb64 0402 	sbc.w	r4, r4, r2
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b84:	00d9      	lsls	r1, r3, #3
 8004b86:	460b      	mov	r3, r1
 8004b88:	4614      	mov	r4, r2
 8004b8a:	195b      	adds	r3, r3, r5
 8004b8c:	eb44 0406 	adc.w	r4, r4, r6
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	02a2      	lsls	r2, r4, #10
 8004b9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b9e:	0299      	lsls	r1, r3, #10
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f04f 0400 	mov.w	r4, #0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	f7fb fb7d 	bl	80002b0 <__aeabi_uldivmod>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	460c      	mov	r4, r1
 8004bba:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0f1b      	lsrs	r3, r3, #28
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	613b      	str	r3, [r7, #16]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x32a>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_RCC_GetSysClockFreq+0x338>)
 800482a:	613b      	str	r3, [r7, #16]
      break;
 800482c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482e:	693b      	ldr	r3, [r7, #16]
}
 8004830:	4618      	mov	r0, r3
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	00f42400 	.word	0x00f42400
 8004840:	007a1200 	.word	0x007a1200

08004844 <HAL_RCC_OscConfig>:
=======
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004bd6:	613b      	str	r3, [r7, #16]
      break;
 8004bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bda:	693b      	ldr	r3, [r7, #16]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200

08004bf0 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
=======
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8083 	beq.w	8004964 <HAL_RCC_OscConfig+0x120>
=======
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8083 	beq.w	8004d10 <HAL_RCC_OscConfig+0x120>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
<<<<<<< Updated upstream
 800485e:	4b95      	ldr	r3, [pc, #596]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b04      	cmp	r3, #4
 8004868:	d019      	beq.n	800489e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800486a:	4b92      	ldr	r3, [pc, #584]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004872:	2b08      	cmp	r3, #8
 8004874:	d106      	bne.n	8004884 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004876:	4b8f      	ldr	r3, [pc, #572]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004882:	d00c      	beq.n	800489e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004884:	4b8b      	ldr	r3, [pc, #556]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800488c:	2b0c      	cmp	r3, #12
 800488e:	d112      	bne.n	80048b6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004890:	4b88      	ldr	r3, [pc, #544]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800489c:	d10b      	bne.n	80048b6 <HAL_RCC_OscConfig+0x72>
=======
 8004c0a:	4b95      	ldr	r3, [pc, #596]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d019      	beq.n	8004c4a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c16:	4b92      	ldr	r3, [pc, #584]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c22:	4b8f      	ldr	r3, [pc, #572]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2e:	d00c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c30:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	d112      	bne.n	8004c62 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3c:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c48:	d10b      	bne.n	8004c62 <HAL_RCC_OscConfig+0x72>
>>>>>>> Stashed changes
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< Updated upstream
 800489e:	4b85      	ldr	r3, [pc, #532]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d05b      	beq.n	8004962 <HAL_RCC_OscConfig+0x11e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d157      	bne.n	8004962 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e216      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
=======
 8004c4a:	4b85      	ldr	r3, [pc, #532]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d05b      	beq.n	8004d0e <HAL_RCC_OscConfig+0x11e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d157      	bne.n	8004d0e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e216      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x8a>
 80048c0:	4b7c      	ldr	r3, [pc, #496]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7b      	ldr	r2, [pc, #492]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e01d      	b.n	800490a <HAL_RCC_OscConfig+0xc6>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d6:	d10c      	bne.n	80048f2 <HAL_RCC_OscConfig+0xae>
 80048d8:	4b76      	ldr	r3, [pc, #472]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a75      	ldr	r2, [pc, #468]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b73      	ldr	r3, [pc, #460]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a72      	ldr	r2, [pc, #456]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e00b      	b.n	800490a <HAL_RCC_OscConfig+0xc6>
 80048f2:	4b70      	ldr	r3, [pc, #448]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a6f      	ldr	r2, [pc, #444]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80048f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	4b6d      	ldr	r3, [pc, #436]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a6c      	ldr	r2, [pc, #432]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004908:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d013      	beq.n	800493a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fe fd7d 	bl	8003410 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800491a:	f7fe fd79 	bl	8003410 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b64      	cmp	r3, #100	; 0x64
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e1db      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492c:	4b61      	ldr	r3, [pc, #388]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0xd6>
 8004938:	e014      	b.n	8004964 <HAL_RCC_OscConfig+0x120>
=======
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x8a>
 8004c6c:	4b7c      	ldr	r3, [pc, #496]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a7b      	ldr	r2, [pc, #492]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e01d      	b.n	8004cb6 <HAL_RCC_OscConfig+0xc6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c82:	d10c      	bne.n	8004c9e <HAL_RCC_OscConfig+0xae>
 8004c84:	4b76      	ldr	r3, [pc, #472]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a75      	ldr	r2, [pc, #468]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a72      	ldr	r2, [pc, #456]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	e00b      	b.n	8004cb6 <HAL_RCC_OscConfig+0xc6>
 8004c9e:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6f      	ldr	r2, [pc, #444]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b6d      	ldr	r3, [pc, #436]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6c      	ldr	r2, [pc, #432]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d013      	beq.n	8004ce6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fd7d 	bl	80037bc <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc6:	f7fe fd79 	bl	80037bc <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b64      	cmp	r3, #100	; 0x64
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e1db      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0xd6>
 8004ce4:	e014      	b.n	8004d10 <HAL_RCC_OscConfig+0x120>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 800493a:	f7fe fd69 	bl	8003410 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004942:	f7fe fd65 	bl	8003410 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b64      	cmp	r3, #100	; 0x64
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e1c7      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004954:	4b57      	ldr	r3, [pc, #348]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0xfe>
 8004960:	e000      	b.n	8004964 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004962:	bf00      	nop
=======
 8004ce6:	f7fe fd69 	bl	80037bc <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cee:	f7fe fd65 	bl	80037bc <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b64      	cmp	r3, #100	; 0x64
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e1c7      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d00:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0xfe>
 8004d0c:	e000      	b.n	8004d10 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0e:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d06f      	beq.n	8004a50 <HAL_RCC_OscConfig+0x20c>
=======
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d06f      	beq.n	8004dfc <HAL_RCC_OscConfig+0x20c>
>>>>>>> Stashed changes
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
<<<<<<< Updated upstream
 8004970:	4b50      	ldr	r3, [pc, #320]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	d017      	beq.n	80049ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800497c:	4b4d      	ldr	r3, [pc, #308]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004984:	2b08      	cmp	r3, #8
 8004986:	d105      	bne.n	8004994 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004988:	4b4a      	ldr	r3, [pc, #296]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004994:	4b47      	ldr	r3, [pc, #284]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d11c      	bne.n	80049da <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a0:	4b44      	ldr	r3, [pc, #272]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <HAL_RCC_OscConfig+0x196>
=======
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d017      	beq.n	8004d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d28:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d34:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d40:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d11c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4c:	4b44      	ldr	r3, [pc, #272]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d116      	bne.n	8004d86 <HAL_RCC_OscConfig+0x196>
>>>>>>> Stashed changes
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< Updated upstream
 80049ac:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_OscConfig+0x180>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e18f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
=======
 8004d58:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_OscConfig+0x180>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e18f      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80049c4:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4938      	ldr	r1, [pc, #224]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d8:	e03a      	b.n	8004a50 <HAL_RCC_OscConfig+0x20c>
=======
 8004d70:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4938      	ldr	r1, [pc, #224]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d84:	e03a      	b.n	8004dfc <HAL_RCC_OscConfig+0x20c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d020      	beq.n	8004a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e2:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <HAL_RCC_OscConfig+0x274>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fe fd12 	bl	8003410 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fe fd0e 	bl	8003410 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e170      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1ac>
=======
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d8e:	4b35      	ldr	r3, [pc, #212]	; (8004e64 <HAL_RCC_OscConfig+0x274>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fe fd12 	bl	80037bc <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d9c:	f7fe fd0e 	bl	80037bc <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e170      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b2c      	ldr	r3, [pc, #176]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x1ac>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4925      	ldr	r1, [pc, #148]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
 8004a22:	e015      	b.n	8004a50 <HAL_RCC_OscConfig+0x20c>
=======
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4925      	ldr	r1, [pc, #148]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
 8004dce:	e015      	b.n	8004dfc <HAL_RCC_OscConfig+0x20c>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCC_OscConfig+0x274>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fe fcf1 	bl	8003410 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fe fced 	bl	8003410 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e14f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a44:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x1ee>
=======
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_RCC_OscConfig+0x274>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fe fcf1 	bl	80037bc <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dde:	f7fe fced 	bl	80037bc <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e14f      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <HAL_RCC_OscConfig+0x1ee>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d037      	beq.n	8004acc <HAL_RCC_OscConfig+0x288>
=======
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d037      	beq.n	8004e78 <HAL_RCC_OscConfig+0x288>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d016      	beq.n	8004a92 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_RCC_OscConfig+0x278>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6a:	f7fe fcd1 	bl	8003410 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a72:	f7fe fccd 	bl	8003410 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e12f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCC_OscConfig+0x270>)
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x22e>
 8004a90:	e01c      	b.n	8004acc <HAL_RCC_OscConfig+0x288>
=======
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d016      	beq.n	8004e3e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e10:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <HAL_RCC_OscConfig+0x278>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fe fcd1 	bl	80037bc <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7fe fccd 	bl	80037bc <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e12f      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x22e>
 8004e3c:	e01c      	b.n	8004e78 <HAL_RCC_OscConfig+0x288>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_RCC_OscConfig+0x278>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fe fcba 	bl	8003410 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a9e:	e00f      	b.n	8004ac0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7fe fcb6 	bl	8003410 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d908      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e118      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	42470000 	.word	0x42470000
 8004abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac0:	4b8a      	ldr	r3, [pc, #552]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e9      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x25c>
=======
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCC_OscConfig+0x278>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e44:	f7fe fcba 	bl	80037bc <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4a:	e00f      	b.n	8004e6c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e4c:	f7fe fcb6 	bl	80037bc <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d908      	bls.n	8004e6c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e118      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	42470000 	.word	0x42470000
 8004e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e6c:	4b8a      	ldr	r3, [pc, #552]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e9      	bne.n	8004e4c <HAL_RCC_OscConfig+0x25c>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8097 	beq.w	8004c08 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]
=======
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8097 	beq.w	8004fb4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 8004ade:	4b83      	ldr	r3, [pc, #524]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10f      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b7f      	ldr	r3, [pc, #508]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	4a7e      	ldr	r2, [pc, #504]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6413      	str	r3, [r2, #64]	; 0x40
 8004afa:	4b7c      	ldr	r3, [pc, #496]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0a:	4b79      	ldr	r3, [pc, #484]	; (8004cf0 <HAL_RCC_OscConfig+0x4ac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d118      	bne.n	8004b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x4ac>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x4ac>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b22:	f7fe fc75 	bl	8003410 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fe fc71 	bl	8003410 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0d3      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3c:	4b6c      	ldr	r3, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2e6>
=======
 8004e8a:	4b83      	ldr	r3, [pc, #524]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10f      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b7f      	ldr	r3, [pc, #508]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb6:	4b79      	ldr	r3, [pc, #484]	; (800509c <HAL_RCC_OscConfig+0x4ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d118      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec2:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCC_OscConfig+0x4ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a75      	ldr	r2, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ece:	f7fe fc75 	bl	80037bc <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fe fc71 	bl	80037bc <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e0d3      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	; (800509c <HAL_RCC_OscConfig+0x4ac>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x2e6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x31a>
 8004b50:	4b66      	ldr	r3, [pc, #408]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4a65      	ldr	r2, [pc, #404]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5c:	e01c      	b.n	8004b98 <HAL_RCC_OscConfig+0x354>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x33c>
 8004b66:	4b61      	ldr	r3, [pc, #388]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a60      	ldr	r2, [pc, #384]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b6c:	f043 0304 	orr.w	r3, r3, #4
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	4b5e      	ldr	r3, [pc, #376]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a5d      	ldr	r2, [pc, #372]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	e00b      	b.n	8004b98 <HAL_RCC_OscConfig+0x354>
 8004b80:	4b5a      	ldr	r3, [pc, #360]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	4a59      	ldr	r2, [pc, #356]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8c:	4b57      	ldr	r3, [pc, #348]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a56      	ldr	r2, [pc, #344]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004b92:	f023 0304 	bic.w	r3, r3, #4
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fe fc36 	bl	8003410 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fe fc32 	bl	8003410 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e092      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbe:	4b4b      	ldr	r3, [pc, #300]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0ee      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x364>
 8004bca:	e014      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3b2>
=======
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d106      	bne.n	8004f0a <HAL_RCC_OscConfig+0x31a>
 8004efc:	4b66      	ldr	r3, [pc, #408]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
 8004f08:	e01c      	b.n	8004f44 <HAL_RCC_OscConfig+0x354>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b05      	cmp	r3, #5
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x33c>
 8004f12:	4b61      	ldr	r3, [pc, #388]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a60      	ldr	r2, [pc, #384]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f18:	f043 0304 	orr.w	r3, r3, #4
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1e:	4b5e      	ldr	r3, [pc, #376]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCC_OscConfig+0x354>
 8004f2c:	4b5a      	ldr	r3, [pc, #360]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a59      	ldr	r2, [pc, #356]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	4b57      	ldr	r3, [pc, #348]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a56      	ldr	r2, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f3e:	f023 0304 	bic.w	r3, r3, #4
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fe fc36 	bl	80037bc <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	e00a      	b.n	8004f6a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fe fc32 	bl	80037bc <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e092      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ee      	beq.n	8004f54 <HAL_RCC_OscConfig+0x364>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3b2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004bcc:	f7fe fc20 	bl	8003410 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fe fc1c 	bl	8003410 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e07c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bea:	4b40      	ldr	r3, [pc, #256]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ee      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x390>
=======
 8004f78:	f7fe fc20 	bl	80037bc <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f80:	f7fe fc1c 	bl	80037bc <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e07c      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1ee      	bne.n	8004f80 <HAL_RCC_OscConfig+0x390>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	4a3a      	ldr	r2, [pc, #232]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d068      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c10:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d060      	beq.n	8004cde <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d145      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x46c>
=======
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d068      	beq.n	800508e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fbc:	4b36      	ldr	r3, [pc, #216]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d060      	beq.n	800508a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d145      	bne.n	800505c <HAL_RCC_OscConfig+0x46c>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8004c24:	4b33      	ldr	r3, [pc, #204]	; (8004cf4 <HAL_RCC_OscConfig+0x4b0>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fbf1 	bl	8003410 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe fbed 	bl	8003410 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e04f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c44:	4b29      	ldr	r3, [pc, #164]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3ee>
=======
 8004fd0:	4b33      	ldr	r3, [pc, #204]	; (80050a0 <HAL_RCC_OscConfig+0x4b0>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fe fbf1 	bl	80037bc <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fe fbed 	bl	80037bc <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e04f      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff0:	4b29      	ldr	r3, [pc, #164]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCC_OscConfig+0x3ee>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	019b      	lsls	r3, r3, #6
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	071b      	lsls	r3, r3, #28
 8004c7c:	491b      	ldr	r1, [pc, #108]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
=======
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	019b      	lsls	r3, r3, #6
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	3b01      	subs	r3, #1
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	061b      	lsls	r3, r3, #24
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	071b      	lsls	r3, r3, #28
 8005028:	491b      	ldr	r1, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <HAL_RCC_OscConfig+0x4b0>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fe fbc2 	bl	8003410 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fe fbbe 	bl	8003410 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e020      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x44c>
 8004cae:	e018      	b.n	8004ce2 <HAL_RCC_OscConfig+0x49e>
=======
 800502e:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <HAL_RCC_OscConfig+0x4b0>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe fbc2 	bl	80037bc <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503c:	f7fe fbbe 	bl	80037bc <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e020      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x44c>
 800505a:	e018      	b.n	800508e <HAL_RCC_OscConfig+0x49e>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <HAL_RCC_OscConfig+0x4b0>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb6:	f7fe fbab 	bl	8003410 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fe fba7 	bl	8003410 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e009      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_RCC_OscConfig+0x4a8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x47a>
 8004cdc:	e001      	b.n	8004ce2 <HAL_RCC_OscConfig+0x49e>
=======
 800505c:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCC_OscConfig+0x4b0>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fe fbab 	bl	80037bc <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506a:	f7fe fba7 	bl	80037bc <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e009      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_OscConfig+0x4a8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x47a>
 8005088:	e001      	b.n	800508e <HAL_RCC_OscConfig+0x49e>
>>>>>>> Stashed changes
        }
      }
    }
    else
    {
      return HAL_ERROR;
<<<<<<< Updated upstream
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40007000 	.word	0x40007000
 8004cf4:	42470060 	.word	0x42470060

08004cf8 <HAL_SPI_Init>:
=======
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40023800 	.word	0x40023800
 800509c:	40007000 	.word	0x40007000
 80050a0:	42470060 	.word	0x42470060

080050a4 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e056      	b.n	8004db8 <HAL_SPI_Init+0xc0>
=======
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e056      	b.n	8005164 <HAL_SPI_Init+0xc0>
>>>>>>> Stashed changes
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fd fa61 	bl	80021ec <HAL_SPI_MspInit>
=======
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fd f9df 	bl	8002494 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d40:	601a      	str	r2, [r3, #0]
=======
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ec:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
<<<<<<< Updated upstream
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	ea42 0103 	orr.w	r1, r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]
=======
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	ea42 0103 	orr.w	r1, r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
<<<<<<< Updated upstream
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	f003 0104 	and.w	r1, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
=======
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	f003 0104 	and.w	r1, r3, #4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_SPI_Transmit>:
=======
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005152:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_SPI_Transmit>:
>>>>>>> Stashed changes
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
=======
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_SPI_Transmit+0x22>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e11e      	b.n	8005020 <HAL_SPI_Transmit+0x260>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dea:	f7fe fb11 	bl	8003410 <HAL_GetTick>
 8004dee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d002      	beq.n	8004e06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
 8004e02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e04:	e103      	b.n	800500e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_Transmit+0x52>
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e16:	e0fa      	b.n	800500e <HAL_SPI_Transmit+0x24e>
=======
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_SPI_Transmit+0x22>
 800518a:	2302      	movs	r3, #2
 800518c:	e11e      	b.n	80053cc <HAL_SPI_Transmit+0x260>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005196:	f7fe fb11 	bl	80037bc <HAL_GetTick>
 800519a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d002      	beq.n	80051b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051ac:	2302      	movs	r3, #2
 80051ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051b0:	e103      	b.n	80053ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_SPI_Transmit+0x52>
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051c2:	e0fa      	b.n	80053ba <HAL_SPI_Transmit+0x24e>
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< Updated upstream
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5e:	d107      	bne.n	8004e70 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6e:	601a      	str	r2, [r3, #0]
=======
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2203      	movs	r2, #3
 80051c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	88fa      	ldrh	r2, [r7, #6]
 80051dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	88fa      	ldrh	r2, [r7, #6]
 80051e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520a:	d107      	bne.n	800521c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800521a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d007      	beq.n	8004e8e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8c:	601a      	str	r2, [r3, #0]
=======
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005226:	2b40      	cmp	r3, #64	; 0x40
 8005228:	d007      	beq.n	800523a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005238:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e96:	d14b      	bne.n	8004f30 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_SPI_Transmit+0xe6>
 8004ea0:	8afb      	ldrh	r3, [r7, #22]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d13e      	bne.n	8004f24 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	881a      	ldrh	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	1c9a      	adds	r2, r3, #2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004eca:	e02b      	b.n	8004f24 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d112      	bne.n	8004f00 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	881a      	ldrh	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	1c9a      	adds	r2, r3, #2
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004efe:	e011      	b.n	8004f24 <HAL_SPI_Transmit+0x164>
=======
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005242:	d14b      	bne.n	80052dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_SPI_Transmit+0xe6>
 800524c:	8afb      	ldrh	r3, [r7, #22]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d13e      	bne.n	80052d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	881a      	ldrh	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005276:	e02b      	b.n	80052d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d112      	bne.n	80052ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80052aa:	e011      	b.n	80052d0 <HAL_SPI_Transmit+0x164>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8004f00:	f7fe fa86 	bl	8003410 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d803      	bhi.n	8004f18 <HAL_SPI_Transmit+0x158>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f16:	d102      	bne.n	8004f1e <HAL_SPI_Transmit+0x15e>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f22:	e074      	b.n	800500e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ce      	bne.n	8004ecc <HAL_SPI_Transmit+0x10c>
 8004f2e:	e04c      	b.n	8004fca <HAL_SPI_Transmit+0x20a>
=======
 80052ac:	f7fe fa86 	bl	80037bc <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d803      	bhi.n	80052c4 <HAL_SPI_Transmit+0x158>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c2:	d102      	bne.n	80052ca <HAL_SPI_Transmit+0x15e>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052ce:	e074      	b.n	80053ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1ce      	bne.n	8005278 <HAL_SPI_Transmit+0x10c>
 80052da:	e04c      	b.n	8005376 <HAL_SPI_Transmit+0x20a>
>>>>>>> Stashed changes
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Transmit+0x17e>
 8004f38:	8afb      	ldrh	r3, [r7, #22]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d140      	bne.n	8004fc0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f64:	e02c      	b.n	8004fc0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d113      	bne.n	8004f9c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	7812      	ldrb	r2, [r2, #0]
 8004f80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f9a:	e011      	b.n	8004fc0 <HAL_SPI_Transmit+0x200>
=======
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_SPI_Transmit+0x17e>
 80052e4:	8afb      	ldrh	r3, [r7, #22]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d140      	bne.n	800536c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005310:	e02c      	b.n	800536c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d113      	bne.n	8005348 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	7812      	ldrb	r2, [r2, #0]
 800532c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	86da      	strh	r2, [r3, #54]	; 0x36
 8005346:	e011      	b.n	800536c <HAL_SPI_Transmit+0x200>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8004f9c:	f7fe fa38 	bl	8003410 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d803      	bhi.n	8004fb4 <HAL_SPI_Transmit+0x1f4>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb2:	d102      	bne.n	8004fba <HAL_SPI_Transmit+0x1fa>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fbe:	e026      	b.n	800500e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1cd      	bne.n	8004f66 <HAL_SPI_Transmit+0x1a6>
=======
 8005348:	f7fe fa38 	bl	80037bc <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d803      	bhi.n	8005360 <HAL_SPI_Transmit+0x1f4>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535e:	d102      	bne.n	8005366 <HAL_SPI_Transmit+0x1fa>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	77fb      	strb	r3, [r7, #31]
          goto error;
 800536a:	e026      	b.n	80053ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1cd      	bne.n	8005312 <HAL_SPI_Transmit+0x1a6>
>>>>>>> Stashed changes
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fa36 	bl	8005440 <SPI_EndRxTxTransaction>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa36 	bl	80057ec <SPI_EndRxTxTransaction>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	77fb      	strb	r3, [r7, #31]
 800500a:	e000      	b.n	800500e <HAL_SPI_Transmit+0x24e>
  }

error:
 800500c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800501e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_SPI_TransmitReceive>:
=======
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e000      	b.n	80053ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80053b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_SPI_TransmitReceive>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< Updated upstream
 8005028:	b580      	push	{r7, lr}
 800502a:	b08c      	sub	sp, #48	; 0x30
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	807b      	strh	r3, [r7, #2]
=======
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	; 0x30
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< Updated upstream
 8005036:	2301      	movs	r3, #1
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 80053e2:	2301      	movs	r3, #1
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_SPI_TransmitReceive+0x26>
 800504a:	2302      	movs	r3, #2
 800504c:	e18a      	b.n	8005364 <HAL_SPI_TransmitReceive+0x33c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005056:	f7fe f9db 	bl	8003410 <HAL_GetTick>
 800505a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800506c:	887b      	ldrh	r3, [r7, #2]
 800506e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005074:	2b01      	cmp	r3, #1
 8005076:	d00f      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x70>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507e:	d107      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x68>
 8005088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800508c:	2b04      	cmp	r3, #4
 800508e:	d003      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005090:	2302      	movs	r3, #2
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005096:	e15b      	b.n	8005350 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x82>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x82>
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050b0:	e14e      	b.n	8005350 <HAL_SPI_TransmitReceive+0x328>
=======
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_SPI_TransmitReceive+0x26>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e18a      	b.n	8005710 <HAL_SPI_TransmitReceive+0x33c>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005402:	f7fe f9db 	bl	80037bc <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005418:	887b      	ldrh	r3, [r7, #2]
 800541a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800541c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005420:	2b01      	cmp	r3, #1
 8005422:	d00f      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x70>
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542a:	d107      	bne.n	800543c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <HAL_SPI_TransmitReceive+0x68>
 8005434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005438:	2b04      	cmp	r3, #4
 800543a:	d003      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800543c:	2302      	movs	r3, #2
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005442:	e15b      	b.n	80056fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_SPI_TransmitReceive+0x82>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_SPI_TransmitReceive+0x82>
 8005450:	887b      	ldrh	r3, [r7, #2]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800545c:	e14e      	b.n	80056fc <HAL_SPI_TransmitReceive+0x328>
>>>>>>> Stashed changes
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< Updated upstream
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d003      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2205      	movs	r2, #5
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b04      	cmp	r3, #4
 8005468:	d003      	beq.n	8005472 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2205      	movs	r2, #5
 800546e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	887a      	ldrh	r2, [r7, #2]
 80050d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	887a      	ldrh	r2, [r7, #2]
 80050e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	887a      	ldrh	r2, [r7, #2]
 80050ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	887a      	ldrh	r2, [r7, #2]
 8005482:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	887a      	ldrh	r2, [r7, #2]
 8005488:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	887a      	ldrh	r2, [r7, #2]
 8005494:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	887a      	ldrh	r2, [r7, #2]
 800549a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d007      	beq.n	800511a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005118:	601a      	str	r2, [r3, #0]
=======
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d007      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005122:	d178      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_SPI_TransmitReceive+0x10a>
 800512c:	8b7b      	ldrh	r3, [r7, #26]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d166      	bne.n	8005200 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	881a      	ldrh	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005156:	e053      	b.n	8005200 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d11b      	bne.n	800519e <HAL_SPI_TransmitReceive+0x176>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d016      	beq.n	800519e <HAL_SPI_TransmitReceive+0x176>
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d113      	bne.n	800519e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	d178      	bne.n	80055c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_SPI_TransmitReceive+0x10a>
 80054d8:	8b7b      	ldrh	r3, [r7, #26]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d166      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	1c9a      	adds	r2, r3, #2
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005502:	e053      	b.n	80055ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	d11b      	bne.n	800554a <HAL_SPI_TransmitReceive+0x176>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d016      	beq.n	800554a <HAL_SPI_TransmitReceive+0x176>
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	2b01      	cmp	r3, #1
 8005520:	d113      	bne.n	800554a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	881a      	ldrh	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	1c9a      	adds	r2, r3, #2
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d119      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x1b8>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d014      	beq.n	80051e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	b292      	uxth	r2, r2
 80051c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051dc:	2301      	movs	r3, #1
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051e0:	f7fe f916 	bl	8003410 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d807      	bhi.n	8005200 <HAL_SPI_TransmitReceive+0x1d8>
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f6:	d003      	beq.n	8005200 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051fe:	e0a7      	b.n	8005350 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1a6      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x130>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1a1      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x130>
 8005214:	e07c      	b.n	8005310 <HAL_SPI_TransmitReceive+0x2e8>
=======
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b01      	cmp	r3, #1
 8005556:	d119      	bne.n	800558c <HAL_SPI_TransmitReceive+0x1b8>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d014      	beq.n	800558c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	b292      	uxth	r2, r2
 800556e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005588:	2301      	movs	r3, #1
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800558c:	f7fe f916 	bl	80037bc <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005598:	429a      	cmp	r2, r3
 800559a:	d807      	bhi.n	80055ac <HAL_SPI_TransmitReceive+0x1d8>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a2:	d003      	beq.n	80055ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055aa:	e0a7      	b.n	80056fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1a6      	bne.n	8005504 <HAL_SPI_TransmitReceive+0x130>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1a1      	bne.n	8005504 <HAL_SPI_TransmitReceive+0x130>
 80055c0:	e07c      	b.n	80056bc <HAL_SPI_TransmitReceive+0x2e8>
>>>>>>> Stashed changes
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x1fc>
 800521e:	8b7b      	ldrh	r3, [r7, #26]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d16b      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	330c      	adds	r3, #12
 800522e:	7812      	ldrb	r2, [r2, #0]
 8005230:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524a:	e057      	b.n	80052fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d11c      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x26c>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d017      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x26c>
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d114      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	7812      	ldrb	r2, [r2, #0]
 8005276:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x1fc>
 80055ca:	8b7b      	ldrh	r3, [r7, #26]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d16b      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	7812      	ldrb	r2, [r2, #0]
 80055dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f6:	e057      	b.n	80056a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d11c      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x26c>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d017      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x26c>
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d114      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	7812      	ldrb	r2, [r2, #0]
 8005622:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d119      	bne.n	80052d6 <HAL_SPI_TransmitReceive+0x2ae>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d014      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052d2:	2301      	movs	r3, #1
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052d6:	f7fe f89b 	bl	8003410 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d803      	bhi.n	80052ee <HAL_SPI_TransmitReceive+0x2c6>
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ec:	d102      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x2cc>
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052fa:	e029      	b.n	8005350 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1a2      	bne.n	800524c <HAL_SPI_TransmitReceive+0x224>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d19d      	bne.n	800524c <HAL_SPI_TransmitReceive+0x224>
=======
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d119      	bne.n	8005682 <HAL_SPI_TransmitReceive+0x2ae>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d014      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800567e:	2301      	movs	r3, #1
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005682:	f7fe f89b 	bl	80037bc <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800568e:	429a      	cmp	r2, r3
 8005690:	d803      	bhi.n	800569a <HAL_SPI_TransmitReceive+0x2c6>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005698:	d102      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x2cc>
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d103      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056a6:	e029      	b.n	80056fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1a2      	bne.n	80055f8 <HAL_SPI_TransmitReceive+0x224>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d19d      	bne.n	80055f8 <HAL_SPI_TransmitReceive+0x224>
>>>>>>> Stashed changes
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8005310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f893 	bl	8005440 <SPI_EndRxTxTransaction>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800532c:	e010      	b.n	8005350 <HAL_SPI_TransmitReceive+0x328>
=======
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f893 	bl	80057ec <SPI_EndRxTxTransaction>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d006      	beq.n	80056da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80056d8:	e010      	b.n	80056fc <HAL_SPI_TransmitReceive+0x328>
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	e000      	b.n	8005350 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800534e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005364:	4618      	mov	r0, r3
 8005366:	3730      	adds	r7, #48	; 0x30
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <SPI_WaitFlagStateUntilTimeout>:
=======
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	e000      	b.n	80056fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800570c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005710:	4618      	mov	r0, r3
 8005712:	3730      	adds	r7, #48	; 0x30
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537c:	e04c      	b.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005384:	d048      	beq.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005386:	f7fe f843 	bl	8003410 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d902      	bls.n	800539c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d13d      	bne.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xac>
=======
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005728:	e04c      	b.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005730:	d048      	beq.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005732:	f7fe f843 	bl	80037bc <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d902      	bls.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d13d      	bne.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0xac>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b4:	d111      	bne.n	80053da <SPI_WaitFlagStateUntilTimeout+0x6e>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053be:	d004      	beq.n	80053ca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d107      	bne.n	80053da <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
=======
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005756:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005760:	d111      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576a:	d004      	beq.n	8005776 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005774:	d107      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005784:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e2:	d10f      	bne.n	8005404 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005402:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e00f      	b.n	8005438 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	429a      	cmp	r2, r3
 8005434:	d1a3      	bne.n	800537e <SPI_WaitFlagStateUntilTimeout+0x12>
=======
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578e:	d10f      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e00f      	b.n	80057e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d1a3      	bne.n	800572a <SPI_WaitFlagStateUntilTimeout+0x12>
>>>>>>> Stashed changes
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <SPI_EndRxTxTransaction>:
=======
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <SPI_EndRxTxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <SPI_EndRxTxTransaction+0x7c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <SPI_EndRxTxTransaction+0x80>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	0d5b      	lsrs	r3, r3, #21
 8005458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546a:	d112      	bne.n	8005492 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	2180      	movs	r1, #128	; 0x80
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff ff78 	bl	800536c <SPI_WaitFlagStateUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f043 0220 	orr.w	r2, r3, #32
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e00f      	b.n	80054b2 <SPI_EndRxTxTransaction+0x72>
=======
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <SPI_EndRxTxTransaction+0x7c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <SPI_EndRxTxTransaction+0x80>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	0d5b      	lsrs	r3, r3, #21
 8005804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005808:	fb02 f303 	mul.w	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005816:	d112      	bne.n	800583e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	2180      	movs	r1, #128	; 0x80
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff ff78 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f043 0220 	orr.w	r2, r3, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e00f      	b.n	800585e <SPI_EndRxTxTransaction+0x72>
>>>>>>> Stashed changes
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< Updated upstream
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <SPI_EndRxTxTransaction+0x6e>
=======
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <SPI_EndRxTxTransaction+0x6e>
>>>>>>> Stashed changes
      {
        break;
      }
      count--;
<<<<<<< Updated upstream
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3b01      	subs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d0f2      	beq.n	8005492 <SPI_EndRxTxTransaction+0x52>
 80054ac:	e000      	b.n	80054b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80054ae:	bf00      	nop
  }

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000000 	.word	0x20000000
 80054c0:	165e9f81 	.word	0x165e9f81

080054c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
=======
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3b01      	subs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	d0f2      	beq.n	800583e <SPI_EndRxTxTransaction+0x52>
 8005858:	e000      	b.n	800585c <SPI_EndRxTxTransaction+0x70>
        break;
 800585a:	bf00      	nop
  }

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000000 	.word	0x20000000
 800586c:	165e9f81 	.word	0x165e9f81

08005870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e03f      	b.n	8005556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fc ff2e 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fc03 	bl	8005d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e01d      	b.n	80058be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc feac 	bl	80025f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 f988 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b06      	cmp	r3, #6
 80058ee:	d007      	beq.n	8005900 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
  }
>>>>>>> Stashed changes

  return HAL_OK;
<<<<<<< Updated upstream
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
=======
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b20      	cmp	r3, #32
 8005578:	d166      	bne.n	8005648 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_UART_Receive_DMA+0x26>
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e05f      	b.n	800564a <HAL_UART_Receive_DMA+0xea>
=======
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a1a      	ldr	r2, [r3, #32]
 800592c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <HAL_TIM_Base_Stop_IT+0x48>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	f240 4344 	movw	r3, #1092	; 0x444
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d107      	bne.n	8005956 <HAL_TIM_Base_Stop_IT+0x48>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d122      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d11b      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0202 	mvn.w	r2, #2
 8005990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8ee 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 80059ac:	e005      	b.n	80059ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f8e0 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f8f1 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d122      	bne.n	8005a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0204 	mvn.w	r2, #4
 80059e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8c4 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8b6 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f8c7 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0208 	mvn.w	r2, #8
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f89a 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f88c 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f89d 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d122      	bne.n	8005abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0210 	mvn.w	r2, #16
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2208      	movs	r2, #8
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f870 	bl	8005b88 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f862 	bl	8005b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f873 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d107      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0201 	mvn.w	r2, #1
 8005ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc f9f0 	bl	8001ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d10e      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b00:	2b80      	cmp	r3, #128	; 0x80
 8005b02:	d107      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f97e 	bl	8005e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d10e      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d107      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f838 	bl	8005bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d10e      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d107      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0220 	mvn.w	r2, #32
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f948 	bl	8005dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a40      	ldr	r2, [pc, #256]	; (8005cd8 <TIM_Base_SetConfig+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d00f      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3d      	ldr	r2, [pc, #244]	; (8005cdc <TIM_Base_SetConfig+0x118>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a3c      	ldr	r2, [pc, #240]	; (8005ce0 <TIM_Base_SetConfig+0x11c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3b      	ldr	r2, [pc, #236]	; (8005ce4 <TIM_Base_SetConfig+0x120>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ce8 <TIM_Base_SetConfig+0x124>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d108      	bne.n	8005c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a2f      	ldr	r2, [pc, #188]	; (8005cd8 <TIM_Base_SetConfig+0x114>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c24:	d027      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <TIM_Base_SetConfig+0x118>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d023      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <TIM_Base_SetConfig+0x11c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01f      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <TIM_Base_SetConfig+0x120>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <TIM_Base_SetConfig+0x124>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d017      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a28      	ldr	r2, [pc, #160]	; (8005cec <TIM_Base_SetConfig+0x128>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <TIM_Base_SetConfig+0x12c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00f      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <TIM_Base_SetConfig+0x130>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <TIM_Base_SetConfig+0x134>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a24      	ldr	r2, [pc, #144]	; (8005cfc <TIM_Base_SetConfig+0x138>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <TIM_Base_SetConfig+0x13c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d108      	bne.n	8005c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <TIM_Base_SetConfig+0x114>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_Base_SetConfig+0xf8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <TIM_Base_SetConfig+0x124>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	615a      	str	r2, [r3, #20]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00
 8005ce8:	40010400 	.word	0x40010400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800
 8005cf8:	40001800 	.word	0x40001800
 8005cfc:	40001c00 	.word	0x40001c00
 8005d00:	40002000 	.word	0x40002000

08005d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e05a      	b.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a21      	ldr	r2, [pc, #132]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d022      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d68:	d01d      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d018      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a15      	ldr	r2, [pc, #84]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d10c      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40010400 	.word	0x40010400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40001800 	.word	0x40001800

08005dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03f      	b.n	8005eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc fc36 	bl	80026bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	; 0x24
 8005e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fc03 	bl	8006674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d166      	bne.n	8005fa8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_UART_Receive_DMA+0x26>
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e05f      	b.n	8005faa <HAL_UART_Receive_DMA+0xea>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_UART_Receive_DMA+0x38>
 8005594:	2302      	movs	r3, #2
 8005596:	e058      	b.n	800564a <HAL_UART_Receive_DMA+0xea>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2222      	movs	r2, #34	; 0x22
 80055b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	4a25      	ldr	r2, [pc, #148]	; (8005654 <HAL_UART_Receive_DMA+0xf4>)
 80055c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	4a24      	ldr	r2, [pc, #144]	; (8005658 <HAL_UART_Receive_DMA+0xf8>)
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	4a23      	ldr	r2, [pc, #140]	; (800565c <HAL_UART_Receive_DMA+0xfc>)
 80055d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	2200      	movs	r2, #0
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	f7fe f8fb 	bl	80037ec <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005622:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	615a      	str	r2, [r3, #20]
=======
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_UART_Receive_DMA+0x38>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e058      	b.n	8005faa <HAL_UART_Receive_DMA+0xea>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2222      	movs	r2, #34	; 0x22
 8005f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <HAL_UART_Receive_DMA+0xf4>)
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <HAL_UART_Receive_DMA+0xf8>)
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	4a23      	ldr	r2, [pc, #140]	; (8005fbc <HAL_UART_Receive_DMA+0xfc>)
 8005f30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f36:	2200      	movs	r2, #0
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005f3a:	f107 0308 	add.w	r3, r7, #8
 8005f3e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	f7fd fe21 	bl	8003b98 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005f56:	2300      	movs	r3, #0
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f82:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005642:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <HAL_UART_Receive_DMA+0xea>
=======
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <HAL_UART_Receive_DMA+0xea>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8005648:	2302      	movs	r3, #2
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	0800598d 	.word	0x0800598d
 8005658:	080059f5 	.word	0x080059f5
 800565c:	08005a11 	.word	0x08005a11

08005660 <HAL_UART_Abort>:
=======
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	080062ed 	.word	0x080062ed
 8005fb8:	08006355 	.word	0x08006355
 8005fbc:	08006371 	.word	0x08006371

08005fc0 <HAL_UART_Abort>:
>>>>>>> Stashed changes
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005676:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b80      	cmp	r3, #128	; 0x80
 8005694:	d124      	bne.n	80056e0 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <HAL_UART_Abort+0x80>
=======
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005fd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d124      	bne.n	8006040 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006004:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	2b00      	cmp	r3, #0
 800600c:	d018      	beq.n	8006040 <HAL_UART_Abort+0x80>
>>>>>>> Stashed changes
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
<<<<<<< Updated upstream
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	2200      	movs	r2, #0
 80056b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe f8ee 	bl	800389c <HAL_DMA_Abort>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe fb02 	bl	8003cd4 <HAL_DMA_GetError>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d104      	bne.n	80056e0 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2210      	movs	r2, #16
 80056da:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e03d      	b.n	800575c <HAL_UART_Abort+0xfc>
=======
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	2200      	movs	r2, #0
 8006014:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	4618      	mov	r0, r3
 800601c:	f7fd fe14 	bl	8003c48 <HAL_DMA_Abort>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe f828 	bl	8004080 <HAL_DMA_GetError>
 8006030:	4603      	mov	r3, r0
 8006032:	2b20      	cmp	r3, #32
 8006034:	d104      	bne.n	8006040 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2210      	movs	r2, #16
 800603a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e03d      	b.n	80060bc <HAL_UART_Abort+0xfc>
>>>>>>> Stashed changes
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< Updated upstream
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d124      	bne.n	8005738 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	2b00      	cmp	r3, #0
 8005704:	d018      	beq.n	8005738 <HAL_UART_Abort+0xd8>
=======
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	d124      	bne.n	8006098 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695a      	ldr	r2, [r3, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800605c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	2b00      	cmp	r3, #0
 8006064:	d018      	beq.n	8006098 <HAL_UART_Abort+0xd8>
>>>>>>> Stashed changes
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
<<<<<<< Updated upstream
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570a:	2200      	movs	r2, #0
 800570c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe f8c2 	bl	800389c <HAL_DMA_Abort>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fad6 	bl	8003cd4 <HAL_DMA_GetError>
 8005728:	4603      	mov	r3, r0
 800572a:	2b20      	cmp	r3, #32
 800572c:	d104      	bne.n	8005738 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2210      	movs	r2, #16
 8005732:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e011      	b.n	800575c <HAL_UART_Abort+0xfc>
=======
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	2200      	movs	r2, #0
 800606c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	4618      	mov	r0, r3
 8006074:	f7fd fde8 	bl	8003c48 <HAL_DMA_Abort>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd fffc 	bl	8004080 <HAL_DMA_GetError>
 8006088:	4603      	mov	r3, r0
 800608a:	2b20      	cmp	r3, #32
 800608c:	d104      	bne.n	8006098 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2210      	movs	r2, #16
 8006092:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e011      	b.n	80060bc <HAL_UART_Abort+0xfc>
>>>>>>> Stashed changes
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
<<<<<<< Updated upstream
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_IRQHandler>:
=======
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_UART_IRQHandler+0x52>
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa2e 	bl	8005c10 <UART_Receive_IT>
      return;
 80057b4:	e0d1      	b.n	800595a <HAL_UART_IRQHandler+0x1f6>
=======
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10d      	bne.n	8006116 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_UART_IRQHandler+0x52>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa2e 	bl	8006570 <UART_Receive_IT>
      return;
 8006114:	e0d1      	b.n	80062ba <HAL_UART_IRQHandler+0x1f6>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< Updated upstream
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80b0 	beq.w	800591e <HAL_UART_IRQHandler+0x1ba>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <HAL_UART_IRQHandler+0x70>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80a5 	beq.w	800591e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_UART_IRQHandler+0x90>
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ec:	f043 0201 	orr.w	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80b0 	beq.w	800627e <HAL_UART_IRQHandler+0x1ba>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <HAL_UART_IRQHandler+0x70>
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80a5 	beq.w	800627e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_UART_IRQHandler+0x90>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	f043 0201 	orr.w	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_UART_IRQHandler+0xb0>
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	f043 0202 	orr.w	r2, r3, #2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_UART_IRQHandler+0xb0>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616c:	f043 0202 	orr.w	r2, r3, #2
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <HAL_UART_IRQHandler+0xd0>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582c:	f043 0204 	orr.w	r2, r3, #4
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_UART_IRQHandler+0xd0>
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	f043 0204 	orr.w	r2, r3, #4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< Updated upstream
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00f      	beq.n	800585e <HAL_UART_IRQHandler+0xfa>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <HAL_UART_IRQHandler+0xee>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	f043 0208 	orr.w	r2, r3, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00f      	beq.n	80061be <HAL_UART_IRQHandler+0xfa>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <HAL_UART_IRQHandler+0xee>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	f043 0208 	orr.w	r2, r3, #8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d078      	beq.n	8005958 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <HAL_UART_IRQHandler+0x11c>
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9c8 	bl	8005c10 <UART_Receive_IT>
=======
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d078      	beq.n	80062b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <HAL_UART_IRQHandler+0x11c>
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9c8 	bl	8006570 <UART_Receive_IT>
>>>>>>> Stashed changes
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <HAL_UART_IRQHandler+0x144>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d031      	beq.n	800590c <HAL_UART_IRQHandler+0x1a8>
=======
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	bf0c      	ite	eq
 80061ee:	2301      	moveq	r3, #1
 80061f0:	2300      	movne	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <HAL_UART_IRQHandler+0x144>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d031      	beq.n	800626c <HAL_UART_IRQHandler+0x1a8>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f911 	bl	8005ad0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	d123      	bne.n	8005904 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <HAL_UART_IRQHandler+0x198>
=======
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f911 	bl	8006430 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d123      	bne.n	8006264 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_UART_IRQHandler+0x198>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	4a21      	ldr	r2, [pc, #132]	; (8005960 <HAL_UART_IRQHandler+0x1fc>)
 80058da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe f84b 	bl	800397c <HAL_DMA_Abort_IT>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d016      	beq.n	800591a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058f6:	4610      	mov	r0, r2
 80058f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fa:	e00e      	b.n	800591a <HAL_UART_IRQHandler+0x1b6>
=======
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	4a21      	ldr	r2, [pc, #132]	; (80062c0 <HAL_UART_IRQHandler+0x1fc>)
 800623a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	4618      	mov	r0, r3
 8006242:	f7fd fd71 	bl	8003d28 <HAL_DMA_Abort_IT>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d016      	beq.n	800627a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006256:	4610      	mov	r0, r2
 8006258:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625a:	e00e      	b.n	800627a <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f83b 	bl	8005978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005902:	e00a      	b.n	800591a <HAL_UART_IRQHandler+0x1b6>
=======
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f83b 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006262:	e00a      	b.n	800627a <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f837 	bl	8005978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590a:	e006      	b.n	800591a <HAL_UART_IRQHandler+0x1b6>
=======
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f837 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626a:	e006      	b.n	800627a <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f833 	bl	8005978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005918:	e01e      	b.n	8005958 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591a:	bf00      	nop
    return;
 800591c:	e01c      	b.n	8005958 <HAL_UART_IRQHandler+0x1f4>
=======
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f833 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006278:	e01e      	b.n	80062b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	bf00      	nop
    return;
 800627c:	e01c      	b.n	80062b8 <HAL_UART_IRQHandler+0x1f4>
>>>>>>> Stashed changes
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< Updated upstream
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_UART_IRQHandler+0x1d6>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8fe 	bl	8005b34 <UART_Transmit_IT>
    return;
 8005938:	e00f      	b.n	800595a <HAL_UART_IRQHandler+0x1f6>
=======
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <HAL_UART_IRQHandler+0x1d6>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8fe 	bl	8006494 <UART_Transmit_IT>
    return;
 8006298:	e00f      	b.n	80062ba <HAL_UART_IRQHandler+0x1f6>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< Updated upstream
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_UART_IRQHandler+0x1f6>
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f946 	bl	8005be0 <UART_EndTransmit_IT>
    return;
 8005954:	bf00      	nop
 8005956:	e000      	b.n	800595a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005958:	bf00      	nop
  }
}
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	08005b0d 	.word	0x08005b0d

08005964 <HAL_UART_RxHalfCpltCallback>:
=======
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_UART_IRQHandler+0x1f6>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f946 	bl	8006540 <UART_EndTransmit_IT>
    return;
 80062b4:	bf00      	nop
 80062b6:	e000      	b.n	80062ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80062b8:	bf00      	nop
  }
}
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	0800646d 	.word	0x0800646d

080062c4 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
=======
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_ErrorCallback>:
=======
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
=======
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <UART_DMAReceiveCplt>:
=======
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <UART_DMAReceiveCplt>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d11e      	bne.n	80059e6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059bc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	615a      	str	r2, [r3, #20]
=======
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11e      	bne.n	8006346 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800631c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695a      	ldr	r2, [r3, #20]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059dc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800633c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
<<<<<<< Updated upstream
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7fb ffe4 	bl	80019b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <UART_DMARxHalfCplt>:
=======
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7fb fbd2 	bl	8001af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_DMARxHalfCplt>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	60fb      	str	r3, [r7, #12]
=======
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
<<<<<<< Updated upstream
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f7ff ffae 	bl	8005964 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_DMAError>:
=======
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff ffae 	bl	80062c4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <UART_DMAError>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b21      	cmp	r3, #33	; 0x21
 8005a42:	d108      	bne.n	8005a56 <UART_DMAError+0x46>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a50:	68b8      	ldr	r0, [r7, #8]
 8005a52:	f000 f827 	bl	8005aa4 <UART_EndTxTransfer>
=======
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b80      	cmp	r3, #128	; 0x80
 800638e:	bf0c      	ite	eq
 8006390:	2301      	moveq	r3, #1
 8006392:	2300      	movne	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b21      	cmp	r3, #33	; 0x21
 80063a2:	d108      	bne.n	80063b6 <UART_DMAError+0x46>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2200      	movs	r2, #0
 80063ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063b0:	68b8      	ldr	r0, [r7, #8]
 80063b2:	f000 f827 	bl	8006404 <UART_EndTxTransfer>
>>>>>>> Stashed changes
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b22      	cmp	r3, #34	; 0x22
 8005a76:	d108      	bne.n	8005a8a <UART_DMAError+0x7a>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2200      	movs	r2, #0
 8005a82:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	f000 f823 	bl	8005ad0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	f043 0210 	orr.w	r2, r3, #16
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b40      	cmp	r3, #64	; 0x40
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b22      	cmp	r3, #34	; 0x22
 80063d6:	d108      	bne.n	80063ea <UART_DMAError+0x7a>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063e4:	68b8      	ldr	r0, [r7, #8]
 80063e6:	f000 f823 	bl	8006430 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	f043 0210 	orr.w	r2, r3, #16
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8005a96:	68b8      	ldr	r0, [r7, #8]
 8005a98:	f7ff ff6e 	bl	8005978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <UART_EndTxTransfer>:
=======
 80063f6:	68b8      	ldr	r0, [r7, #8]
 80063f8:	f7ff ff6e 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_EndTxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005aba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <UART_EndRxTransfer>:
=======
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800641a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ae6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_DMAAbortOnError>:
=======
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006446:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff ff26 	bl	8005978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_Transmit_IT>:
=======
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff ff26 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
=======
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b21      	cmp	r3, #33	; 0x21
 8005b46:	d144      	bne.n	8005bd2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b50:	d11a      	bne.n	8005b88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]
 8005b7a:	e00e      	b.n	8005b9a <UART_Transmit_IT+0x66>
=======
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b21      	cmp	r3, #33	; 0x21
 80064a6:	d144      	bne.n	8006532 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b0:	d11a      	bne.n	80064e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d105      	bne.n	80064dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	1c9a      	adds	r2, r3, #2
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	621a      	str	r2, [r3, #32]
 80064da:	e00e      	b.n	80064fa <UART_Transmit_IT+0x66>
>>>>>>> Stashed changes
      }
      else
      {
        huart->pTxBuffPtr += 1U;
<<<<<<< Updated upstream
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]
 8005b86:	e008      	b.n	8005b9a <UART_Transmit_IT+0x66>
=======
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]
 80064e6:	e008      	b.n	80064fa <UART_Transmit_IT+0x66>
>>>>>>> Stashed changes
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< Updated upstream
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	1c59      	adds	r1, r3, #1
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6211      	str	r1, [r2, #32]
 8005b92:	781a      	ldrb	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10f      	bne.n	8005bce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e000      	b.n	8005bd4 <UART_Transmit_IT+0xa0>
=======
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6211      	str	r1, [r2, #32]
 80064f2:	781a      	ldrb	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29b      	uxth	r3, r3
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4619      	mov	r1, r3
 8006508:	84d1      	strh	r1, [r2, #38]	; 0x26
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10f      	bne.n	800652e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800651c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800652c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e000      	b.n	8006534 <UART_Transmit_IT+0xa0>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8005bd2:	2302      	movs	r3, #2
  }
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <UART_EndTransmit_IT>:
=======
 8006532:	2302      	movs	r3, #2
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006556:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fc f87f 	bl	8001d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <UART_Receive_IT>:
=======
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fb fca7 	bl	8001eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
=======
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b22      	cmp	r3, #34	; 0x22
 8005c22:	d171      	bne.n	8005d08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2c:	d123      	bne.n	8005c76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10e      	bne.n	8005c5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	1c9a      	adds	r2, r3, #2
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	629a      	str	r2, [r3, #40]	; 0x28
 8005c58:	e029      	b.n	8005cae <UART_Receive_IT+0x9e>
=======
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b22      	cmp	r3, #34	; 0x22
 8006582:	d171      	bne.n	8006668 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d123      	bne.n	80065d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10e      	bne.n	80065ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	1c9a      	adds	r2, r3, #2
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	629a      	str	r2, [r3, #40]	; 0x28
 80065b8:	e029      	b.n	800660e <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
<<<<<<< Updated upstream
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
 8005c74:	e01b      	b.n	8005cae <UART_Receive_IT+0x9e>
=======
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28
 80065d4:	e01b      	b.n	800660e <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
<<<<<<< Updated upstream
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6858      	ldr	r0, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	1c59      	adds	r1, r3, #1
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6291      	str	r1, [r2, #40]	; 0x28
 8005c8e:	b2c2      	uxtb	r2, r0
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e00c      	b.n	8005cae <UART_Receive_IT+0x9e>
=======
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6858      	ldr	r0, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	1c59      	adds	r1, r3, #1
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6291      	str	r1, [r2, #40]	; 0x28
 80065ee:	b2c2      	uxtb	r2, r0
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	e00c      	b.n	800660e <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< Updated upstream
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	1c58      	adds	r0, r3, #1
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	6288      	str	r0, [r1, #40]	; 0x28
 8005ca6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
=======
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	1c58      	adds	r0, r3, #1
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	6288      	str	r0, [r1, #40]	; 0x28
 8006606:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
      }
    }

    if (--huart->RxXferCount == 0U)
<<<<<<< Updated upstream
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d120      	bne.n	8005d04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0220 	bic.w	r2, r2, #32
 8005cd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29b      	uxth	r3, r3
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4619      	mov	r1, r3
 800661c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800661e:	2b00      	cmp	r3, #0
 8006620:	d120      	bne.n	8006664 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0220 	bic.w	r2, r2, #32
 8006630:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006640:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0201 	bic.w	r2, r2, #1
 8006650:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
<<<<<<< Updated upstream
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fb fe5a 	bl	80019b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e002      	b.n	8005d0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <UART_Receive_IT+0xfa>
=======
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fb fa48 	bl	8001af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e002      	b.n	800666a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	e000      	b.n	800666a <UART_Receive_IT+0xfa>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <UART_SetConfig>:
=======
 8006668:	2302      	movs	r3, #2
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
=======
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	611a      	str	r2, [r3, #16]
=======
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< Updated upstream
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d56:	f023 030c 	bic.w	r3, r3, #12
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	60d3      	str	r3, [r2, #12]
=======
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066b6:	f023 030c 	bic.w	r3, r3, #12
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< Updated upstream
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d82:	f040 818b 	bne.w	800609c <UART_SetConfig+0x388>
=======
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	f040 818b 	bne.w	80069fc <UART_SetConfig+0x388>
>>>>>>> Stashed changes
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< Updated upstream
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4ac1      	ldr	r2, [pc, #772]	; (8006090 <UART_SetConfig+0x37c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d005      	beq.n	8005d9c <UART_SetConfig+0x88>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4abf      	ldr	r2, [pc, #764]	; (8006094 <UART_SetConfig+0x380>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f040 80bd 	bne.w	8005f16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fe fb9e 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8005da0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	461d      	mov	r5, r3
 8005da6:	f04f 0600 	mov.w	r6, #0
 8005daa:	46a8      	mov	r8, r5
 8005dac:	46b1      	mov	r9, r6
 8005dae:	eb18 0308 	adds.w	r3, r8, r8
 8005db2:	eb49 0409 	adc.w	r4, r9, r9
 8005db6:	4698      	mov	r8, r3
 8005db8:	46a1      	mov	r9, r4
 8005dba:	eb18 0805 	adds.w	r8, r8, r5
 8005dbe:	eb49 0906 	adc.w	r9, r9, r6
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dd6:	4688      	mov	r8, r1
 8005dd8:	4691      	mov	r9, r2
 8005dda:	eb18 0005 	adds.w	r0, r8, r5
 8005dde:	eb49 0106 	adc.w	r1, r9, r6
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	461d      	mov	r5, r3
 8005de8:	f04f 0600 	mov.w	r6, #0
 8005dec:	196b      	adds	r3, r5, r5
 8005dee:	eb46 0406 	adc.w	r4, r6, r6
 8005df2:	461a      	mov	r2, r3
 8005df4:	4623      	mov	r3, r4
 8005df6:	f7fa fa5b 	bl	80002b0 <__aeabi_uldivmod>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4ba5      	ldr	r3, [pc, #660]	; (8006098 <UART_SetConfig+0x384>)
 8005e02:	fba3 2302 	umull	r2, r3, r3, r2
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	461d      	mov	r5, r3
 8005e10:	f04f 0600 	mov.w	r6, #0
 8005e14:	46a9      	mov	r9, r5
 8005e16:	46b2      	mov	sl, r6
 8005e18:	eb19 0309 	adds.w	r3, r9, r9
 8005e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e20:	4699      	mov	r9, r3
 8005e22:	46a2      	mov	sl, r4
 8005e24:	eb19 0905 	adds.w	r9, r9, r5
 8005e28:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e40:	4689      	mov	r9, r1
 8005e42:	4692      	mov	sl, r2
 8005e44:	eb19 0005 	adds.w	r0, r9, r5
 8005e48:	eb4a 0106 	adc.w	r1, sl, r6
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	461d      	mov	r5, r3
 8005e52:	f04f 0600 	mov.w	r6, #0
 8005e56:	196b      	adds	r3, r5, r5
 8005e58:	eb46 0406 	adc.w	r4, r6, r6
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4623      	mov	r3, r4
 8005e60:	f7fa fa26 	bl	80002b0 <__aeabi_uldivmod>
 8005e64:	4603      	mov	r3, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b8b      	ldr	r3, [pc, #556]	; (8006098 <UART_SetConfig+0x384>)
 8005e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	2164      	movs	r1, #100	; 0x64
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	3332      	adds	r3, #50	; 0x32
 8005e7e:	4a86      	ldr	r2, [pc, #536]	; (8006098 <UART_SetConfig+0x384>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e8c:	4498      	add	r8, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	461d      	mov	r5, r3
 8005e92:	f04f 0600 	mov.w	r6, #0
 8005e96:	46a9      	mov	r9, r5
 8005e98:	46b2      	mov	sl, r6
 8005e9a:	eb19 0309 	adds.w	r3, r9, r9
 8005e9e:	eb4a 040a 	adc.w	r4, sl, sl
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	46a2      	mov	sl, r4
 8005ea6:	eb19 0905 	adds.w	r9, r9, r5
 8005eaa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ebe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ec2:	4689      	mov	r9, r1
 8005ec4:	4692      	mov	sl, r2
 8005ec6:	eb19 0005 	adds.w	r0, r9, r5
 8005eca:	eb4a 0106 	adc.w	r1, sl, r6
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	461d      	mov	r5, r3
 8005ed4:	f04f 0600 	mov.w	r6, #0
 8005ed8:	196b      	adds	r3, r5, r5
 8005eda:	eb46 0406 	adc.w	r4, r6, r6
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	f7fa f9e5 	bl	80002b0 <__aeabi_uldivmod>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	460c      	mov	r4, r1
 8005eea:	461a      	mov	r2, r3
 8005eec:	4b6a      	ldr	r3, [pc, #424]	; (8006098 <UART_SetConfig+0x384>)
 8005eee:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	2164      	movs	r1, #100	; 0x64
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	3332      	adds	r3, #50	; 0x32
 8005f00:	4a65      	ldr	r2, [pc, #404]	; (8006098 <UART_SetConfig+0x384>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	f003 0207 	and.w	r2, r3, #7
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4442      	add	r2, r8
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	e26f      	b.n	80063f6 <UART_SetConfig+0x6e2>
=======
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4ac1      	ldr	r2, [pc, #772]	; (80069f0 <UART_SetConfig+0x37c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d005      	beq.n	80066fc <UART_SetConfig+0x88>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4abf      	ldr	r2, [pc, #764]	; (80069f4 <UART_SetConfig+0x380>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f040 80bd 	bne.w	8006876 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fe f8c4 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8006700:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	461d      	mov	r5, r3
 8006706:	f04f 0600 	mov.w	r6, #0
 800670a:	46a8      	mov	r8, r5
 800670c:	46b1      	mov	r9, r6
 800670e:	eb18 0308 	adds.w	r3, r8, r8
 8006712:	eb49 0409 	adc.w	r4, r9, r9
 8006716:	4698      	mov	r8, r3
 8006718:	46a1      	mov	r9, r4
 800671a:	eb18 0805 	adds.w	r8, r8, r5
 800671e:	eb49 0906 	adc.w	r9, r9, r6
 8006722:	f04f 0100 	mov.w	r1, #0
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800672e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006732:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006736:	4688      	mov	r8, r1
 8006738:	4691      	mov	r9, r2
 800673a:	eb18 0005 	adds.w	r0, r8, r5
 800673e:	eb49 0106 	adc.w	r1, r9, r6
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	461d      	mov	r5, r3
 8006748:	f04f 0600 	mov.w	r6, #0
 800674c:	196b      	adds	r3, r5, r5
 800674e:	eb46 0406 	adc.w	r4, r6, r6
 8006752:	461a      	mov	r2, r3
 8006754:	4623      	mov	r3, r4
 8006756:	f7f9 fdab 	bl	80002b0 <__aeabi_uldivmod>
 800675a:	4603      	mov	r3, r0
 800675c:	460c      	mov	r4, r1
 800675e:	461a      	mov	r2, r3
 8006760:	4ba5      	ldr	r3, [pc, #660]	; (80069f8 <UART_SetConfig+0x384>)
 8006762:	fba3 2302 	umull	r2, r3, r3, r2
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	461d      	mov	r5, r3
 8006770:	f04f 0600 	mov.w	r6, #0
 8006774:	46a9      	mov	r9, r5
 8006776:	46b2      	mov	sl, r6
 8006778:	eb19 0309 	adds.w	r3, r9, r9
 800677c:	eb4a 040a 	adc.w	r4, sl, sl
 8006780:	4699      	mov	r9, r3
 8006782:	46a2      	mov	sl, r4
 8006784:	eb19 0905 	adds.w	r9, r9, r5
 8006788:	eb4a 0a06 	adc.w	sl, sl, r6
 800678c:	f04f 0100 	mov.w	r1, #0
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006798:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800679c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a0:	4689      	mov	r9, r1
 80067a2:	4692      	mov	sl, r2
 80067a4:	eb19 0005 	adds.w	r0, r9, r5
 80067a8:	eb4a 0106 	adc.w	r1, sl, r6
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	461d      	mov	r5, r3
 80067b2:	f04f 0600 	mov.w	r6, #0
 80067b6:	196b      	adds	r3, r5, r5
 80067b8:	eb46 0406 	adc.w	r4, r6, r6
 80067bc:	461a      	mov	r2, r3
 80067be:	4623      	mov	r3, r4
 80067c0:	f7f9 fd76 	bl	80002b0 <__aeabi_uldivmod>
 80067c4:	4603      	mov	r3, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	461a      	mov	r2, r3
 80067ca:	4b8b      	ldr	r3, [pc, #556]	; (80069f8 <UART_SetConfig+0x384>)
 80067cc:	fba3 1302 	umull	r1, r3, r3, r2
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	2164      	movs	r1, #100	; 0x64
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	3332      	adds	r3, #50	; 0x32
 80067de:	4a86      	ldr	r2, [pc, #536]	; (80069f8 <UART_SetConfig+0x384>)
 80067e0:	fba2 2303 	umull	r2, r3, r2, r3
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067ec:	4498      	add	r8, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	461d      	mov	r5, r3
 80067f2:	f04f 0600 	mov.w	r6, #0
 80067f6:	46a9      	mov	r9, r5
 80067f8:	46b2      	mov	sl, r6
 80067fa:	eb19 0309 	adds.w	r3, r9, r9
 80067fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006802:	4699      	mov	r9, r3
 8006804:	46a2      	mov	sl, r4
 8006806:	eb19 0905 	adds.w	r9, r9, r5
 800680a:	eb4a 0a06 	adc.w	sl, sl, r6
 800680e:	f04f 0100 	mov.w	r1, #0
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800681a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800681e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006822:	4689      	mov	r9, r1
 8006824:	4692      	mov	sl, r2
 8006826:	eb19 0005 	adds.w	r0, r9, r5
 800682a:	eb4a 0106 	adc.w	r1, sl, r6
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	461d      	mov	r5, r3
 8006834:	f04f 0600 	mov.w	r6, #0
 8006838:	196b      	adds	r3, r5, r5
 800683a:	eb46 0406 	adc.w	r4, r6, r6
 800683e:	461a      	mov	r2, r3
 8006840:	4623      	mov	r3, r4
 8006842:	f7f9 fd35 	bl	80002b0 <__aeabi_uldivmod>
 8006846:	4603      	mov	r3, r0
 8006848:	460c      	mov	r4, r1
 800684a:	461a      	mov	r2, r3
 800684c:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <UART_SetConfig+0x384>)
 800684e:	fba3 1302 	umull	r1, r3, r3, r2
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	2164      	movs	r1, #100	; 0x64
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	3332      	adds	r3, #50	; 0x32
 8006860:	4a65      	ldr	r2, [pc, #404]	; (80069f8 <UART_SetConfig+0x384>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	f003 0207 	and.w	r2, r3, #7
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4442      	add	r2, r8
 8006872:	609a      	str	r2, [r3, #8]
 8006874:	e26f      	b.n	8006d56 <UART_SetConfig+0x6e2>
>>>>>>> Stashed changes
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 8005f16:	f7fe facd 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005f1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	461d      	mov	r5, r3
 8005f20:	f04f 0600 	mov.w	r6, #0
 8005f24:	46a8      	mov	r8, r5
 8005f26:	46b1      	mov	r9, r6
 8005f28:	eb18 0308 	adds.w	r3, r8, r8
 8005f2c:	eb49 0409 	adc.w	r4, r9, r9
 8005f30:	4698      	mov	r8, r3
 8005f32:	46a1      	mov	r9, r4
 8005f34:	eb18 0805 	adds.w	r8, r8, r5
 8005f38:	eb49 0906 	adc.w	r9, r9, r6
 8005f3c:	f04f 0100 	mov.w	r1, #0
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f50:	4688      	mov	r8, r1
 8005f52:	4691      	mov	r9, r2
 8005f54:	eb18 0005 	adds.w	r0, r8, r5
 8005f58:	eb49 0106 	adc.w	r1, r9, r6
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	461d      	mov	r5, r3
 8005f62:	f04f 0600 	mov.w	r6, #0
 8005f66:	196b      	adds	r3, r5, r5
 8005f68:	eb46 0406 	adc.w	r4, r6, r6
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4623      	mov	r3, r4
 8005f70:	f7fa f99e 	bl	80002b0 <__aeabi_uldivmod>
 8005f74:	4603      	mov	r3, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4b47      	ldr	r3, [pc, #284]	; (8006098 <UART_SetConfig+0x384>)
 8005f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	461d      	mov	r5, r3
 8005f8a:	f04f 0600 	mov.w	r6, #0
 8005f8e:	46a9      	mov	r9, r5
 8005f90:	46b2      	mov	sl, r6
 8005f92:	eb19 0309 	adds.w	r3, r9, r9
 8005f96:	eb4a 040a 	adc.w	r4, sl, sl
 8005f9a:	4699      	mov	r9, r3
 8005f9c:	46a2      	mov	sl, r4
 8005f9e:	eb19 0905 	adds.w	r9, r9, r5
 8005fa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fa6:	f04f 0100 	mov.w	r1, #0
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fba:	4689      	mov	r9, r1
 8005fbc:	4692      	mov	sl, r2
 8005fbe:	eb19 0005 	adds.w	r0, r9, r5
 8005fc2:	eb4a 0106 	adc.w	r1, sl, r6
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	461d      	mov	r5, r3
 8005fcc:	f04f 0600 	mov.w	r6, #0
 8005fd0:	196b      	adds	r3, r5, r5
 8005fd2:	eb46 0406 	adc.w	r4, r6, r6
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	f7fa f969 	bl	80002b0 <__aeabi_uldivmod>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b2c      	ldr	r3, [pc, #176]	; (8006098 <UART_SetConfig+0x384>)
 8005fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2164      	movs	r1, #100	; 0x64
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	3332      	adds	r3, #50	; 0x32
 8005ff8:	4a27      	ldr	r2, [pc, #156]	; (8006098 <UART_SetConfig+0x384>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006006:	4498      	add	r8, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	461d      	mov	r5, r3
 800600c:	f04f 0600 	mov.w	r6, #0
 8006010:	46a9      	mov	r9, r5
 8006012:	46b2      	mov	sl, r6
 8006014:	eb19 0309 	adds.w	r3, r9, r9
 8006018:	eb4a 040a 	adc.w	r4, sl, sl
 800601c:	4699      	mov	r9, r3
 800601e:	46a2      	mov	sl, r4
 8006020:	eb19 0905 	adds.w	r9, r9, r5
 8006024:	eb4a 0a06 	adc.w	sl, sl, r6
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800603c:	4689      	mov	r9, r1
 800603e:	4692      	mov	sl, r2
 8006040:	eb19 0005 	adds.w	r0, r9, r5
 8006044:	eb4a 0106 	adc.w	r1, sl, r6
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	461d      	mov	r5, r3
 800604e:	f04f 0600 	mov.w	r6, #0
 8006052:	196b      	adds	r3, r5, r5
 8006054:	eb46 0406 	adc.w	r4, r6, r6
 8006058:	461a      	mov	r2, r3
 800605a:	4623      	mov	r3, r4
 800605c:	f7fa f928 	bl	80002b0 <__aeabi_uldivmod>
 8006060:	4603      	mov	r3, r0
 8006062:	460c      	mov	r4, r1
 8006064:	461a      	mov	r2, r3
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <UART_SetConfig+0x384>)
 8006068:	fba3 1302 	umull	r1, r3, r3, r2
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	2164      	movs	r1, #100	; 0x64
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	3332      	adds	r3, #50	; 0x32
 800607a:	4a07      	ldr	r2, [pc, #28]	; (8006098 <UART_SetConfig+0x384>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f003 0207 	and.w	r2, r3, #7
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4442      	add	r2, r8
 800608c:	609a      	str	r2, [r3, #8]
=======
 8006876:	f7fd fff3 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 800687a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	461d      	mov	r5, r3
 8006880:	f04f 0600 	mov.w	r6, #0
 8006884:	46a8      	mov	r8, r5
 8006886:	46b1      	mov	r9, r6
 8006888:	eb18 0308 	adds.w	r3, r8, r8
 800688c:	eb49 0409 	adc.w	r4, r9, r9
 8006890:	4698      	mov	r8, r3
 8006892:	46a1      	mov	r9, r4
 8006894:	eb18 0805 	adds.w	r8, r8, r5
 8006898:	eb49 0906 	adc.w	r9, r9, r6
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068b0:	4688      	mov	r8, r1
 80068b2:	4691      	mov	r9, r2
 80068b4:	eb18 0005 	adds.w	r0, r8, r5
 80068b8:	eb49 0106 	adc.w	r1, r9, r6
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	461d      	mov	r5, r3
 80068c2:	f04f 0600 	mov.w	r6, #0
 80068c6:	196b      	adds	r3, r5, r5
 80068c8:	eb46 0406 	adc.w	r4, r6, r6
 80068cc:	461a      	mov	r2, r3
 80068ce:	4623      	mov	r3, r4
 80068d0:	f7f9 fcee 	bl	80002b0 <__aeabi_uldivmod>
 80068d4:	4603      	mov	r3, r0
 80068d6:	460c      	mov	r4, r1
 80068d8:	461a      	mov	r2, r3
 80068da:	4b47      	ldr	r3, [pc, #284]	; (80069f8 <UART_SetConfig+0x384>)
 80068dc:	fba3 2302 	umull	r2, r3, r3, r2
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	461d      	mov	r5, r3
 80068ea:	f04f 0600 	mov.w	r6, #0
 80068ee:	46a9      	mov	r9, r5
 80068f0:	46b2      	mov	sl, r6
 80068f2:	eb19 0309 	adds.w	r3, r9, r9
 80068f6:	eb4a 040a 	adc.w	r4, sl, sl
 80068fa:	4699      	mov	r9, r3
 80068fc:	46a2      	mov	sl, r4
 80068fe:	eb19 0905 	adds.w	r9, r9, r5
 8006902:	eb4a 0a06 	adc.w	sl, sl, r6
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006912:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006916:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800691a:	4689      	mov	r9, r1
 800691c:	4692      	mov	sl, r2
 800691e:	eb19 0005 	adds.w	r0, r9, r5
 8006922:	eb4a 0106 	adc.w	r1, sl, r6
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	461d      	mov	r5, r3
 800692c:	f04f 0600 	mov.w	r6, #0
 8006930:	196b      	adds	r3, r5, r5
 8006932:	eb46 0406 	adc.w	r4, r6, r6
 8006936:	461a      	mov	r2, r3
 8006938:	4623      	mov	r3, r4
 800693a:	f7f9 fcb9 	bl	80002b0 <__aeabi_uldivmod>
 800693e:	4603      	mov	r3, r0
 8006940:	460c      	mov	r4, r1
 8006942:	461a      	mov	r2, r3
 8006944:	4b2c      	ldr	r3, [pc, #176]	; (80069f8 <UART_SetConfig+0x384>)
 8006946:	fba3 1302 	umull	r1, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	2164      	movs	r1, #100	; 0x64
 800694e:	fb01 f303 	mul.w	r3, r1, r3
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	3332      	adds	r3, #50	; 0x32
 8006958:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <UART_SetConfig+0x384>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006966:	4498      	add	r8, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	461d      	mov	r5, r3
 800696c:	f04f 0600 	mov.w	r6, #0
 8006970:	46a9      	mov	r9, r5
 8006972:	46b2      	mov	sl, r6
 8006974:	eb19 0309 	adds.w	r3, r9, r9
 8006978:	eb4a 040a 	adc.w	r4, sl, sl
 800697c:	4699      	mov	r9, r3
 800697e:	46a2      	mov	sl, r4
 8006980:	eb19 0905 	adds.w	r9, r9, r5
 8006984:	eb4a 0a06 	adc.w	sl, sl, r6
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006994:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800699c:	4689      	mov	r9, r1
 800699e:	4692      	mov	sl, r2
 80069a0:	eb19 0005 	adds.w	r0, r9, r5
 80069a4:	eb4a 0106 	adc.w	r1, sl, r6
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	461d      	mov	r5, r3
 80069ae:	f04f 0600 	mov.w	r6, #0
 80069b2:	196b      	adds	r3, r5, r5
 80069b4:	eb46 0406 	adc.w	r4, r6, r6
 80069b8:	461a      	mov	r2, r3
 80069ba:	4623      	mov	r3, r4
 80069bc:	f7f9 fc78 	bl	80002b0 <__aeabi_uldivmod>
 80069c0:	4603      	mov	r3, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	461a      	mov	r2, r3
 80069c6:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <UART_SetConfig+0x384>)
 80069c8:	fba3 1302 	umull	r1, r3, r3, r2
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	2164      	movs	r1, #100	; 0x64
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	3332      	adds	r3, #50	; 0x32
 80069da:	4a07      	ldr	r2, [pc, #28]	; (80069f8 <UART_SetConfig+0x384>)
 80069dc:	fba2 2303 	umull	r2, r3, r2, r3
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	f003 0207 	and.w	r2, r3, #7
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4442      	add	r2, r8
 80069ec:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< Updated upstream
 800608e:	e1b2      	b.n	80063f6 <UART_SetConfig+0x6e2>
 8006090:	40011000 	.word	0x40011000
 8006094:	40011400 	.word	0x40011400
 8006098:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4ad7      	ldr	r2, [pc, #860]	; (8006400 <UART_SetConfig+0x6ec>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d005      	beq.n	80060b2 <UART_SetConfig+0x39e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4ad6      	ldr	r2, [pc, #856]	; (8006404 <UART_SetConfig+0x6f0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	f040 80d1 	bne.w	8006254 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060b2:	f7fe fa13 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 80060b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	469a      	mov	sl, r3
 80060bc:	f04f 0b00 	mov.w	fp, #0
 80060c0:	46d0      	mov	r8, sl
 80060c2:	46d9      	mov	r9, fp
 80060c4:	eb18 0308 	adds.w	r3, r8, r8
 80060c8:	eb49 0409 	adc.w	r4, r9, r9
 80060cc:	4698      	mov	r8, r3
 80060ce:	46a1      	mov	r9, r4
 80060d0:	eb18 080a 	adds.w	r8, r8, sl
 80060d4:	eb49 090b 	adc.w	r9, r9, fp
 80060d8:	f04f 0100 	mov.w	r1, #0
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060ec:	4688      	mov	r8, r1
 80060ee:	4691      	mov	r9, r2
 80060f0:	eb1a 0508 	adds.w	r5, sl, r8
 80060f4:	eb4b 0609 	adc.w	r6, fp, r9
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	4619      	mov	r1, r3
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	f04f 0400 	mov.w	r4, #0
 800610a:	0094      	lsls	r4, r2, #2
 800610c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006110:	008b      	lsls	r3, r1, #2
 8006112:	461a      	mov	r2, r3
 8006114:	4623      	mov	r3, r4
 8006116:	4628      	mov	r0, r5
 8006118:	4631      	mov	r1, r6
 800611a:	f7fa f8c9 	bl	80002b0 <__aeabi_uldivmod>
 800611e:	4603      	mov	r3, r0
 8006120:	460c      	mov	r4, r1
 8006122:	461a      	mov	r2, r3
 8006124:	4bb8      	ldr	r3, [pc, #736]	; (8006408 <UART_SetConfig+0x6f4>)
 8006126:	fba3 2302 	umull	r2, r3, r3, r2
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	469b      	mov	fp, r3
 8006134:	f04f 0c00 	mov.w	ip, #0
 8006138:	46d9      	mov	r9, fp
 800613a:	46e2      	mov	sl, ip
 800613c:	eb19 0309 	adds.w	r3, r9, r9
 8006140:	eb4a 040a 	adc.w	r4, sl, sl
 8006144:	4699      	mov	r9, r3
 8006146:	46a2      	mov	sl, r4
 8006148:	eb19 090b 	adds.w	r9, r9, fp
 800614c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006150:	f04f 0100 	mov.w	r1, #0
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006160:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006164:	4689      	mov	r9, r1
 8006166:	4692      	mov	sl, r2
 8006168:	eb1b 0509 	adds.w	r5, fp, r9
 800616c:	eb4c 060a 	adc.w	r6, ip, sl
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4619      	mov	r1, r3
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	f04f 0400 	mov.w	r4, #0
 8006182:	0094      	lsls	r4, r2, #2
 8006184:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006188:	008b      	lsls	r3, r1, #2
 800618a:	461a      	mov	r2, r3
 800618c:	4623      	mov	r3, r4
 800618e:	4628      	mov	r0, r5
 8006190:	4631      	mov	r1, r6
 8006192:	f7fa f88d 	bl	80002b0 <__aeabi_uldivmod>
 8006196:	4603      	mov	r3, r0
 8006198:	460c      	mov	r4, r1
 800619a:	461a      	mov	r2, r3
 800619c:	4b9a      	ldr	r3, [pc, #616]	; (8006408 <UART_SetConfig+0x6f4>)
 800619e:	fba3 1302 	umull	r1, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2164      	movs	r1, #100	; 0x64
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	3332      	adds	r3, #50	; 0x32
 80061b0:	4a95      	ldr	r2, [pc, #596]	; (8006408 <UART_SetConfig+0x6f4>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061bc:	4498      	add	r8, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	469b      	mov	fp, r3
 80061c2:	f04f 0c00 	mov.w	ip, #0
 80061c6:	46d9      	mov	r9, fp
 80061c8:	46e2      	mov	sl, ip
 80061ca:	eb19 0309 	adds.w	r3, r9, r9
 80061ce:	eb4a 040a 	adc.w	r4, sl, sl
 80061d2:	4699      	mov	r9, r3
 80061d4:	46a2      	mov	sl, r4
 80061d6:	eb19 090b 	adds.w	r9, r9, fp
 80061da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061f2:	4689      	mov	r9, r1
 80061f4:	4692      	mov	sl, r2
 80061f6:	eb1b 0509 	adds.w	r5, fp, r9
 80061fa:	eb4c 060a 	adc.w	r6, ip, sl
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4619      	mov	r1, r3
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	f04f 0400 	mov.w	r4, #0
 8006210:	0094      	lsls	r4, r2, #2
 8006212:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006216:	008b      	lsls	r3, r1, #2
 8006218:	461a      	mov	r2, r3
 800621a:	4623      	mov	r3, r4
 800621c:	4628      	mov	r0, r5
 800621e:	4631      	mov	r1, r6
 8006220:	f7fa f846 	bl	80002b0 <__aeabi_uldivmod>
 8006224:	4603      	mov	r3, r0
 8006226:	460c      	mov	r4, r1
 8006228:	461a      	mov	r2, r3
 800622a:	4b77      	ldr	r3, [pc, #476]	; (8006408 <UART_SetConfig+0x6f4>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	; 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	3332      	adds	r3, #50	; 0x32
 800623e:	4a72      	ldr	r2, [pc, #456]	; (8006408 <UART_SetConfig+0x6f4>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 020f 	and.w	r2, r3, #15
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4442      	add	r2, r8
 8006250:	609a      	str	r2, [r3, #8]
 8006252:	e0d0      	b.n	80063f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006254:	f7fe f92e 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8006258:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	469a      	mov	sl, r3
 800625e:	f04f 0b00 	mov.w	fp, #0
 8006262:	46d0      	mov	r8, sl
 8006264:	46d9      	mov	r9, fp
 8006266:	eb18 0308 	adds.w	r3, r8, r8
 800626a:	eb49 0409 	adc.w	r4, r9, r9
 800626e:	4698      	mov	r8, r3
 8006270:	46a1      	mov	r9, r4
 8006272:	eb18 080a 	adds.w	r8, r8, sl
 8006276:	eb49 090b 	adc.w	r9, r9, fp
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006286:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800628a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800628e:	4688      	mov	r8, r1
 8006290:	4691      	mov	r9, r2
 8006292:	eb1a 0508 	adds.w	r5, sl, r8
 8006296:	eb4b 0609 	adc.w	r6, fp, r9
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	4619      	mov	r1, r3
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	f04f 0400 	mov.w	r4, #0
 80062ac:	0094      	lsls	r4, r2, #2
 80062ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062b2:	008b      	lsls	r3, r1, #2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4623      	mov	r3, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	4631      	mov	r1, r6
 80062bc:	f7f9 fff8 	bl	80002b0 <__aeabi_uldivmod>
 80062c0:	4603      	mov	r3, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b50      	ldr	r3, [pc, #320]	; (8006408 <UART_SetConfig+0x6f4>)
 80062c8:	fba3 2302 	umull	r2, r3, r3, r2
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	469b      	mov	fp, r3
 80062d6:	f04f 0c00 	mov.w	ip, #0
 80062da:	46d9      	mov	r9, fp
 80062dc:	46e2      	mov	sl, ip
 80062de:	eb19 0309 	adds.w	r3, r9, r9
 80062e2:	eb4a 040a 	adc.w	r4, sl, sl
 80062e6:	4699      	mov	r9, r3
 80062e8:	46a2      	mov	sl, r4
 80062ea:	eb19 090b 	adds.w	r9, r9, fp
 80062ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006302:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006306:	4689      	mov	r9, r1
 8006308:	4692      	mov	sl, r2
 800630a:	eb1b 0509 	adds.w	r5, fp, r9
 800630e:	eb4c 060a 	adc.w	r6, ip, sl
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	4619      	mov	r1, r3
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	f04f 0400 	mov.w	r4, #0
 8006324:	0094      	lsls	r4, r2, #2
 8006326:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800632a:	008b      	lsls	r3, r1, #2
 800632c:	461a      	mov	r2, r3
 800632e:	4623      	mov	r3, r4
 8006330:	4628      	mov	r0, r5
 8006332:	4631      	mov	r1, r6
 8006334:	f7f9 ffbc 	bl	80002b0 <__aeabi_uldivmod>
 8006338:	4603      	mov	r3, r0
 800633a:	460c      	mov	r4, r1
 800633c:	461a      	mov	r2, r3
 800633e:	4b32      	ldr	r3, [pc, #200]	; (8006408 <UART_SetConfig+0x6f4>)
 8006340:	fba3 1302 	umull	r1, r3, r3, r2
 8006344:	095b      	lsrs	r3, r3, #5
 8006346:	2164      	movs	r1, #100	; 0x64
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	3332      	adds	r3, #50	; 0x32
 8006352:	4a2d      	ldr	r2, [pc, #180]	; (8006408 <UART_SetConfig+0x6f4>)
 8006354:	fba2 2303 	umull	r2, r3, r2, r3
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800635e:	4498      	add	r8, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	469b      	mov	fp, r3
 8006364:	f04f 0c00 	mov.w	ip, #0
 8006368:	46d9      	mov	r9, fp
 800636a:	46e2      	mov	sl, ip
 800636c:	eb19 0309 	adds.w	r3, r9, r9
 8006370:	eb4a 040a 	adc.w	r4, sl, sl
 8006374:	4699      	mov	r9, r3
 8006376:	46a2      	mov	sl, r4
 8006378:	eb19 090b 	adds.w	r9, r9, fp
 800637c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006380:	f04f 0100 	mov.w	r1, #0
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800638c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006390:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006394:	4689      	mov	r9, r1
 8006396:	4692      	mov	sl, r2
 8006398:	eb1b 0509 	adds.w	r5, fp, r9
 800639c:	eb4c 060a 	adc.w	r6, ip, sl
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	f04f 0400 	mov.w	r4, #0
 80063b2:	0094      	lsls	r4, r2, #2
 80063b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063b8:	008b      	lsls	r3, r1, #2
 80063ba:	461a      	mov	r2, r3
 80063bc:	4623      	mov	r3, r4
 80063be:	4628      	mov	r0, r5
 80063c0:	4631      	mov	r1, r6
 80063c2:	f7f9 ff75 	bl	80002b0 <__aeabi_uldivmod>
 80063c6:	4603      	mov	r3, r0
 80063c8:	460c      	mov	r4, r1
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <UART_SetConfig+0x6f4>)
 80063ce:	fba3 1302 	umull	r1, r3, r3, r2
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	2164      	movs	r1, #100	; 0x64
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	3332      	adds	r3, #50	; 0x32
 80063e0:	4a09      	ldr	r2, [pc, #36]	; (8006408 <UART_SetConfig+0x6f4>)
 80063e2:	fba2 2303 	umull	r2, r3, r2, r3
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	f003 020f 	and.w	r2, r3, #15
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4442      	add	r2, r8
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	e7ff      	b.n	80063f6 <UART_SetConfig+0x6e2>
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006400:	40011000 	.word	0x40011000
 8006404:	40011400 	.word	0x40011400
 8006408:	51eb851f 	.word	0x51eb851f

0800640c <MX_FATFS_Init>:
=======
 80069ee:	e1b2      	b.n	8006d56 <UART_SetConfig+0x6e2>
 80069f0:	40011000 	.word	0x40011000
 80069f4:	40011400 	.word	0x40011400
 80069f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4ad7      	ldr	r2, [pc, #860]	; (8006d60 <UART_SetConfig+0x6ec>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d005      	beq.n	8006a12 <UART_SetConfig+0x39e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4ad6      	ldr	r2, [pc, #856]	; (8006d64 <UART_SetConfig+0x6f0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	f040 80d1 	bne.w	8006bb4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a12:	f7fd ff39 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8006a16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	469a      	mov	sl, r3
 8006a1c:	f04f 0b00 	mov.w	fp, #0
 8006a20:	46d0      	mov	r8, sl
 8006a22:	46d9      	mov	r9, fp
 8006a24:	eb18 0308 	adds.w	r3, r8, r8
 8006a28:	eb49 0409 	adc.w	r4, r9, r9
 8006a2c:	4698      	mov	r8, r3
 8006a2e:	46a1      	mov	r9, r4
 8006a30:	eb18 080a 	adds.w	r8, r8, sl
 8006a34:	eb49 090b 	adc.w	r9, r9, fp
 8006a38:	f04f 0100 	mov.w	r1, #0
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a4c:	4688      	mov	r8, r1
 8006a4e:	4691      	mov	r9, r2
 8006a50:	eb1a 0508 	adds.w	r5, sl, r8
 8006a54:	eb4b 0609 	adc.w	r6, fp, r9
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	f04f 0400 	mov.w	r4, #0
 8006a6a:	0094      	lsls	r4, r2, #2
 8006a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a70:	008b      	lsls	r3, r1, #2
 8006a72:	461a      	mov	r2, r3
 8006a74:	4623      	mov	r3, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	4631      	mov	r1, r6
 8006a7a:	f7f9 fc19 	bl	80002b0 <__aeabi_uldivmod>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	461a      	mov	r2, r3
 8006a84:	4bb8      	ldr	r3, [pc, #736]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006a86:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	469b      	mov	fp, r3
 8006a94:	f04f 0c00 	mov.w	ip, #0
 8006a98:	46d9      	mov	r9, fp
 8006a9a:	46e2      	mov	sl, ip
 8006a9c:	eb19 0309 	adds.w	r3, r9, r9
 8006aa0:	eb4a 040a 	adc.w	r4, sl, sl
 8006aa4:	4699      	mov	r9, r3
 8006aa6:	46a2      	mov	sl, r4
 8006aa8:	eb19 090b 	adds.w	r9, r9, fp
 8006aac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ab0:	f04f 0100 	mov.w	r1, #0
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006abc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ac0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ac4:	4689      	mov	r9, r1
 8006ac6:	4692      	mov	sl, r2
 8006ac8:	eb1b 0509 	adds.w	r5, fp, r9
 8006acc:	eb4c 060a 	adc.w	r6, ip, sl
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	f04f 0400 	mov.w	r4, #0
 8006ae2:	0094      	lsls	r4, r2, #2
 8006ae4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ae8:	008b      	lsls	r3, r1, #2
 8006aea:	461a      	mov	r2, r3
 8006aec:	4623      	mov	r3, r4
 8006aee:	4628      	mov	r0, r5
 8006af0:	4631      	mov	r1, r6
 8006af2:	f7f9 fbdd 	bl	80002b0 <__aeabi_uldivmod>
 8006af6:	4603      	mov	r3, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	461a      	mov	r2, r3
 8006afc:	4b9a      	ldr	r3, [pc, #616]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006afe:	fba3 1302 	umull	r1, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	2164      	movs	r1, #100	; 0x64
 8006b06:	fb01 f303 	mul.w	r3, r1, r3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	3332      	adds	r3, #50	; 0x32
 8006b10:	4a95      	ldr	r2, [pc, #596]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b1c:	4498      	add	r8, r3
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	469b      	mov	fp, r3
 8006b22:	f04f 0c00 	mov.w	ip, #0
 8006b26:	46d9      	mov	r9, fp
 8006b28:	46e2      	mov	sl, ip
 8006b2a:	eb19 0309 	adds.w	r3, r9, r9
 8006b2e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b32:	4699      	mov	r9, r3
 8006b34:	46a2      	mov	sl, r4
 8006b36:	eb19 090b 	adds.w	r9, r9, fp
 8006b3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b3e:	f04f 0100 	mov.w	r1, #0
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b52:	4689      	mov	r9, r1
 8006b54:	4692      	mov	sl, r2
 8006b56:	eb1b 0509 	adds.w	r5, fp, r9
 8006b5a:	eb4c 060a 	adc.w	r6, ip, sl
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	4619      	mov	r1, r3
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	f04f 0400 	mov.w	r4, #0
 8006b70:	0094      	lsls	r4, r2, #2
 8006b72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b76:	008b      	lsls	r3, r1, #2
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	4631      	mov	r1, r6
 8006b80:	f7f9 fb96 	bl	80002b0 <__aeabi_uldivmod>
 8006b84:	4603      	mov	r3, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b77      	ldr	r3, [pc, #476]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	2164      	movs	r1, #100	; 0x64
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	3332      	adds	r3, #50	; 0x32
 8006b9e:	4a72      	ldr	r2, [pc, #456]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4442      	add	r2, r8
 8006bb0:	609a      	str	r2, [r3, #8]
 8006bb2:	e0d0      	b.n	8006d56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb4:	f7fd fe54 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 8006bb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	469a      	mov	sl, r3
 8006bbe:	f04f 0b00 	mov.w	fp, #0
 8006bc2:	46d0      	mov	r8, sl
 8006bc4:	46d9      	mov	r9, fp
 8006bc6:	eb18 0308 	adds.w	r3, r8, r8
 8006bca:	eb49 0409 	adc.w	r4, r9, r9
 8006bce:	4698      	mov	r8, r3
 8006bd0:	46a1      	mov	r9, r4
 8006bd2:	eb18 080a 	adds.w	r8, r8, sl
 8006bd6:	eb49 090b 	adc.w	r9, r9, fp
 8006bda:	f04f 0100 	mov.w	r1, #0
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006be6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bee:	4688      	mov	r8, r1
 8006bf0:	4691      	mov	r9, r2
 8006bf2:	eb1a 0508 	adds.w	r5, sl, r8
 8006bf6:	eb4b 0609 	adc.w	r6, fp, r9
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	f04f 0400 	mov.w	r4, #0
 8006c0c:	0094      	lsls	r4, r2, #2
 8006c0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c12:	008b      	lsls	r3, r1, #2
 8006c14:	461a      	mov	r2, r3
 8006c16:	4623      	mov	r3, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	f7f9 fb48 	bl	80002b0 <__aeabi_uldivmod>
 8006c20:	4603      	mov	r3, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	461a      	mov	r2, r3
 8006c26:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006c28:	fba3 2302 	umull	r2, r3, r3, r2
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	469b      	mov	fp, r3
 8006c36:	f04f 0c00 	mov.w	ip, #0
 8006c3a:	46d9      	mov	r9, fp
 8006c3c:	46e2      	mov	sl, ip
 8006c3e:	eb19 0309 	adds.w	r3, r9, r9
 8006c42:	eb4a 040a 	adc.w	r4, sl, sl
 8006c46:	4699      	mov	r9, r3
 8006c48:	46a2      	mov	sl, r4
 8006c4a:	eb19 090b 	adds.w	r9, r9, fp
 8006c4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c52:	f04f 0100 	mov.w	r1, #0
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c66:	4689      	mov	r9, r1
 8006c68:	4692      	mov	sl, r2
 8006c6a:	eb1b 0509 	adds.w	r5, fp, r9
 8006c6e:	eb4c 060a 	adc.w	r6, ip, sl
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4619      	mov	r1, r3
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	f04f 0400 	mov.w	r4, #0
 8006c84:	0094      	lsls	r4, r2, #2
 8006c86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c8a:	008b      	lsls	r3, r1, #2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	4631      	mov	r1, r6
 8006c94:	f7f9 fb0c 	bl	80002b0 <__aeabi_uldivmod>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4b32      	ldr	r3, [pc, #200]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	2164      	movs	r1, #100	; 0x64
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	3332      	adds	r3, #50	; 0x32
 8006cb2:	4a2d      	ldr	r2, [pc, #180]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cbe:	4498      	add	r8, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	469b      	mov	fp, r3
 8006cc4:	f04f 0c00 	mov.w	ip, #0
 8006cc8:	46d9      	mov	r9, fp
 8006cca:	46e2      	mov	sl, ip
 8006ccc:	eb19 0309 	adds.w	r3, r9, r9
 8006cd0:	eb4a 040a 	adc.w	r4, sl, sl
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	46a2      	mov	sl, r4
 8006cd8:	eb19 090b 	adds.w	r9, r9, fp
 8006cdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ce0:	f04f 0100 	mov.w	r1, #0
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cf4:	4689      	mov	r9, r1
 8006cf6:	4692      	mov	sl, r2
 8006cf8:	eb1b 0509 	adds.w	r5, fp, r9
 8006cfc:	eb4c 060a 	adc.w	r6, ip, sl
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	4619      	mov	r1, r3
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	f04f 0400 	mov.w	r4, #0
 8006d12:	0094      	lsls	r4, r2, #2
 8006d14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d18:	008b      	lsls	r3, r1, #2
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	4631      	mov	r1, r6
 8006d22:	f7f9 fac5 	bl	80002b0 <__aeabi_uldivmod>
 8006d26:	4603      	mov	r3, r0
 8006d28:	460c      	mov	r4, r1
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	2164      	movs	r1, #100	; 0x64
 8006d36:	fb01 f303 	mul.w	r3, r1, r3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	3332      	adds	r3, #50	; 0x32
 8006d40:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <UART_SetConfig+0x6f4>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	f003 020f 	and.w	r2, r3, #15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4442      	add	r2, r8
 8006d52:	609a      	str	r2, [r3, #8]
}
 8006d54:	e7ff      	b.n	8006d56 <UART_SetConfig+0x6e2>
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d60:	40011000 	.word	0x40011000
 8006d64:	40011400 	.word	0x40011400
 8006d68:	51eb851f 	.word	0x51eb851f

08006d6c <MX_FATFS_Init>:
>>>>>>> Stashed changes
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
<<<<<<< Updated upstream
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006410:	4904      	ldr	r1, [pc, #16]	; (8006424 <MX_FATFS_Init+0x18>)
 8006412:	4805      	ldr	r0, [pc, #20]	; (8006428 <MX_FATFS_Init+0x1c>)
 8006414:	f000 f8ae 	bl	8006574 <FATFS_LinkDriver>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <MX_FATFS_Init+0x20>)
 800641e:	701a      	strb	r2, [r3, #0]
=======
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006d70:	4904      	ldr	r1, [pc, #16]	; (8006d84 <MX_FATFS_Init+0x18>)
 8006d72:	4805      	ldr	r0, [pc, #20]	; (8006d88 <MX_FATFS_Init+0x1c>)
 8006d74:	f000 f8ae 	bl	8006ed4 <FATFS_LinkDriver>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <MX_FATFS_Init+0x20>)
 8006d7e:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
<<<<<<< Updated upstream
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000fb0 	.word	0x20000fb0
 8006428:	20000010 	.word	0x20000010
 800642c:	20000fb4 	.word	0x20000fb4

08006430 <USER_initialize>:
=======
 8006d80:	bf00      	nop
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20001070 	.word	0x20001070
 8006d88:	20000010 	.word	0x20000010
 8006d8c:	20001074 	.word	0x20001074

08006d90 <USER_initialize>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
<<<<<<< Updated upstream
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	4618      	mov	r0, r3
 800643e:	f7fc fc0f 	bl	8002c60 <USER_SPI_initialize>
 8006442:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USER_status>:
=======
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fc f935 	bl	800300c <USER_SPI_initialize>
 8006da2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USER_status>:
>>>>>>> Stashed changes
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
<<<<<<< Updated upstream
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	4618      	mov	r0, r3
 800645a:	f7fc fce1 	bl	8002e20 <USER_SPI_status>
 800645e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USER_read>:
=======
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fc fa07 	bl	80031cc <USER_SPI_status>
 8006dbe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USER_read>:
>>>>>>> Stashed changes
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
<<<<<<< Updated upstream
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006478:	7bf8      	ldrb	r0, [r7, #15]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	f7fc fce4 	bl	8002e4c <USER_SPI_read>
 8006484:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USER_write>:
=======
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006dd8:	7bf8      	ldrb	r0, [r7, #15]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	f7fc fa0a 	bl	80031f8 <USER_SPI_read>
 8006de4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USER_write>:
>>>>>>> Stashed changes
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
<<<<<<< Updated upstream
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800649e:	7bf8      	ldrb	r0, [r7, #15]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	f7fc fd37 	bl	8002f18 <USER_SPI_write>
 80064aa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USER_ioctl>:
=======
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006dfe:	7bf8      	ldrb	r0, [r7, #15]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	f7fc fa5d 	bl	80032c4 <USER_SPI_write>
 8006e0a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USER_ioctl>:
>>>>>>> Stashed changes
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
<<<<<<< Updated upstream
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	603a      	str	r2, [r7, #0]
 80064be:	71fb      	strb	r3, [r7, #7]
 80064c0:	460b      	mov	r3, r1
 80064c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80064c4:	79b9      	ldrb	r1, [r7, #6]
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc fda0 	bl	8003010 <USER_SPI_ioctl>
 80064d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <FATFS_LinkDriverEx>:
=======
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	603a      	str	r2, [r7, #0]
 8006e1e:	71fb      	strb	r3, [r7, #7]
 8006e20:	460b      	mov	r3, r1
 8006e22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006e24:	79b9      	ldrb	r1, [r7, #6]
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fc fac6 	bl	80033bc <USER_SPI_ioctl>
 8006e30:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <FATFS_LinkDriverEx>:
>>>>>>> Stashed changes
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
<<<<<<< Updated upstream
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80064ea:	2301      	movs	r3, #1
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80064f2:	4b1f      	ldr	r3, [pc, #124]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 80064f4:	7a5b      	ldrb	r3, [r3, #9]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d131      	bne.n	8006560 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80064fc:	4b1c      	ldr	r3, [pc, #112]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 80064fe:	7a5b      	ldrb	r3, [r3, #9]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 8006506:	2100      	movs	r1, #0
 8006508:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800650a:	4b19      	ldr	r3, [pc, #100]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 800650c:	7a5b      	ldrb	r3, [r3, #9]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	4a17      	ldr	r2, [pc, #92]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800651a:	4b15      	ldr	r3, [pc, #84]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 800651c:	7a5b      	ldrb	r3, [r3, #9]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	4b13      	ldr	r3, [pc, #76]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 8006524:	4413      	add	r3, r2
 8006526:	79fa      	ldrb	r2, [r7, #7]
 8006528:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 800652c:	7a5b      	ldrb	r3, [r3, #9]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	b2d1      	uxtb	r1, r2
 8006534:	4a0e      	ldr	r2, [pc, #56]	; (8006570 <FATFS_LinkDriverEx+0x94>)
 8006536:	7251      	strb	r1, [r2, #9]
 8006538:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800653a:	7dbb      	ldrb	r3, [r7, #22]
 800653c:	3330      	adds	r3, #48	; 0x30
 800653e:	b2da      	uxtb	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3301      	adds	r3, #1
 8006548:	223a      	movs	r2, #58	; 0x3a
 800654a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	3302      	adds	r3, #2
 8006550:	222f      	movs	r2, #47	; 0x2f
 8006552:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3303      	adds	r3, #3
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
}
 8006562:	4618      	mov	r0, r3
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000100 	.word	0x20000100

08006574 <FATFS_LinkDriver>:
=======
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e52:	4b1f      	ldr	r3, [pc, #124]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e54:	7a5b      	ldrb	r3, [r3, #9]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d131      	bne.n	8006ec0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e5c:	4b1c      	ldr	r3, [pc, #112]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e5e:	7a5b      	ldrb	r3, [r3, #9]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e66:	2100      	movs	r1, #0
 8006e68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e6a:	4b19      	ldr	r3, [pc, #100]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e6c:	7a5b      	ldrb	r3, [r3, #9]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	4a17      	ldr	r2, [pc, #92]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e7c:	7a5b      	ldrb	r3, [r3, #9]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e84:	4413      	add	r3, r2
 8006e86:	79fa      	ldrb	r2, [r7, #7]
 8006e88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e8c:	7a5b      	ldrb	r3, [r3, #9]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	b2d1      	uxtb	r1, r2
 8006e94:	4a0e      	ldr	r2, [pc, #56]	; (8006ed0 <FATFS_LinkDriverEx+0x94>)
 8006e96:	7251      	strb	r1, [r2, #9]
 8006e98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e9a:	7dbb      	ldrb	r3, [r7, #22]
 8006e9c:	3330      	adds	r3, #48	; 0x30
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	223a      	movs	r2, #58	; 0x3a
 8006eaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	3302      	adds	r3, #2
 8006eb0:	222f      	movs	r2, #47	; 0x2f
 8006eb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3303      	adds	r3, #3
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000100 	.word	0x20000100

08006ed4 <FATFS_LinkDriver>:
>>>>>>> Stashed changes
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
<<<<<<< Updated upstream
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800657e:	2200      	movs	r2, #0
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff ffaa 	bl	80064dc <FATFS_LinkDriverEx>
 8006588:	4603      	mov	r3, r0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <__errno>:
 8006594:	4b01      	ldr	r3, [pc, #4]	; (800659c <__errno+0x8>)
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000024 	.word	0x20000024

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	4e0d      	ldr	r6, [pc, #52]	; (80065d8 <__libc_init_array+0x38>)
 80065a4:	4c0d      	ldr	r4, [pc, #52]	; (80065dc <__libc_init_array+0x3c>)
 80065a6:	1ba4      	subs	r4, r4, r6
 80065a8:	10a4      	asrs	r4, r4, #2
 80065aa:	2500      	movs	r5, #0
 80065ac:	42a5      	cmp	r5, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	4e0b      	ldr	r6, [pc, #44]	; (80065e0 <__libc_init_array+0x40>)
 80065b2:	4c0c      	ldr	r4, [pc, #48]	; (80065e4 <__libc_init_array+0x44>)
 80065b4:	f000 fc26 	bl	8006e04 <_init>
 80065b8:	1ba4      	subs	r4, r4, r6
 80065ba:	10a4      	asrs	r4, r4, #2
 80065bc:	2500      	movs	r5, #0
 80065be:	42a5      	cmp	r5, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065c8:	4798      	blx	r3
 80065ca:	3501      	adds	r5, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065d2:	4798      	blx	r3
 80065d4:	3501      	adds	r5, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	08006edc 	.word	0x08006edc
 80065dc:	08006edc 	.word	0x08006edc
 80065e0:	08006edc 	.word	0x08006edc
 80065e4:	08006ee0 	.word	0x08006ee0

080065e8 <memset>:
 80065e8:	4402      	add	r2, r0
 80065ea:	4603      	mov	r3, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <siprintf>:
 80065f8:	b40e      	push	{r1, r2, r3}
 80065fa:	b500      	push	{lr}
 80065fc:	b09c      	sub	sp, #112	; 0x70
 80065fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006600:	9002      	str	r0, [sp, #8]
 8006602:	9006      	str	r0, [sp, #24]
 8006604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006608:	4809      	ldr	r0, [pc, #36]	; (8006630 <siprintf+0x38>)
 800660a:	9107      	str	r1, [sp, #28]
 800660c:	9104      	str	r1, [sp, #16]
 800660e:	4909      	ldr	r1, [pc, #36]	; (8006634 <siprintf+0x3c>)
 8006610:	f853 2b04 	ldr.w	r2, [r3], #4
 8006614:	9105      	str	r1, [sp, #20]
 8006616:	6800      	ldr	r0, [r0, #0]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	a902      	add	r1, sp, #8
 800661c:	f000 f866 	bl	80066ec <_svfiprintf_r>
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	b01c      	add	sp, #112	; 0x70
 8006628:	f85d eb04 	ldr.w	lr, [sp], #4
 800662c:	b003      	add	sp, #12
 800662e:	4770      	bx	lr
 8006630:	20000024 	.word	0x20000024
 8006634:	ffff0208 	.word	0xffff0208

08006638 <__ssputs_r>:
 8006638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663c:	688e      	ldr	r6, [r1, #8]
 800663e:	429e      	cmp	r6, r3
 8006640:	4682      	mov	sl, r0
 8006642:	460c      	mov	r4, r1
 8006644:	4690      	mov	r8, r2
 8006646:	4699      	mov	r9, r3
 8006648:	d837      	bhi.n	80066ba <__ssputs_r+0x82>
 800664a:	898a      	ldrh	r2, [r1, #12]
 800664c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006650:	d031      	beq.n	80066b6 <__ssputs_r+0x7e>
 8006652:	6825      	ldr	r5, [r4, #0]
 8006654:	6909      	ldr	r1, [r1, #16]
 8006656:	1a6f      	subs	r7, r5, r1
 8006658:	6965      	ldr	r5, [r4, #20]
 800665a:	2302      	movs	r3, #2
 800665c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006660:	fb95 f5f3 	sdiv	r5, r5, r3
 8006664:	f109 0301 	add.w	r3, r9, #1
 8006668:	443b      	add	r3, r7
 800666a:	429d      	cmp	r5, r3
 800666c:	bf38      	it	cc
 800666e:	461d      	movcc	r5, r3
 8006670:	0553      	lsls	r3, r2, #21
 8006672:	d530      	bpl.n	80066d6 <__ssputs_r+0x9e>
 8006674:	4629      	mov	r1, r5
 8006676:	f000 fb2b 	bl	8006cd0 <_malloc_r>
 800667a:	4606      	mov	r6, r0
 800667c:	b950      	cbnz	r0, 8006694 <__ssputs_r+0x5c>
 800667e:	230c      	movs	r3, #12
 8006680:	f8ca 3000 	str.w	r3, [sl]
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006694:	463a      	mov	r2, r7
 8006696:	6921      	ldr	r1, [r4, #16]
 8006698:	f000 faa8 	bl	8006bec <memcpy>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	6126      	str	r6, [r4, #16]
 80066aa:	6165      	str	r5, [r4, #20]
 80066ac:	443e      	add	r6, r7
 80066ae:	1bed      	subs	r5, r5, r7
 80066b0:	6026      	str	r6, [r4, #0]
 80066b2:	60a5      	str	r5, [r4, #8]
 80066b4:	464e      	mov	r6, r9
 80066b6:	454e      	cmp	r6, r9
 80066b8:	d900      	bls.n	80066bc <__ssputs_r+0x84>
 80066ba:	464e      	mov	r6, r9
 80066bc:	4632      	mov	r2, r6
 80066be:	4641      	mov	r1, r8
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	f000 fa9e 	bl	8006c02 <memmove>
 80066c6:	68a3      	ldr	r3, [r4, #8]
 80066c8:	1b9b      	subs	r3, r3, r6
 80066ca:	60a3      	str	r3, [r4, #8]
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	441e      	add	r6, r3
 80066d0:	6026      	str	r6, [r4, #0]
 80066d2:	2000      	movs	r0, #0
 80066d4:	e7dc      	b.n	8006690 <__ssputs_r+0x58>
 80066d6:	462a      	mov	r2, r5
 80066d8:	f000 fb54 	bl	8006d84 <_realloc_r>
 80066dc:	4606      	mov	r6, r0
 80066de:	2800      	cmp	r0, #0
 80066e0:	d1e2      	bne.n	80066a8 <__ssputs_r+0x70>
 80066e2:	6921      	ldr	r1, [r4, #16]
 80066e4:	4650      	mov	r0, sl
 80066e6:	f000 faa5 	bl	8006c34 <_free_r>
 80066ea:	e7c8      	b.n	800667e <__ssputs_r+0x46>

080066ec <_svfiprintf_r>:
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	461d      	mov	r5, r3
 80066f2:	898b      	ldrh	r3, [r1, #12]
 80066f4:	061f      	lsls	r7, r3, #24
 80066f6:	b09d      	sub	sp, #116	; 0x74
 80066f8:	4680      	mov	r8, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	4616      	mov	r6, r2
 80066fe:	d50f      	bpl.n	8006720 <_svfiprintf_r+0x34>
 8006700:	690b      	ldr	r3, [r1, #16]
 8006702:	b96b      	cbnz	r3, 8006720 <_svfiprintf_r+0x34>
 8006704:	2140      	movs	r1, #64	; 0x40
 8006706:	f000 fae3 	bl	8006cd0 <_malloc_r>
 800670a:	6020      	str	r0, [r4, #0]
 800670c:	6120      	str	r0, [r4, #16]
 800670e:	b928      	cbnz	r0, 800671c <_svfiprintf_r+0x30>
 8006710:	230c      	movs	r3, #12
 8006712:	f8c8 3000 	str.w	r3, [r8]
 8006716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800671a:	e0c8      	b.n	80068ae <_svfiprintf_r+0x1c2>
 800671c:	2340      	movs	r3, #64	; 0x40
 800671e:	6163      	str	r3, [r4, #20]
 8006720:	2300      	movs	r3, #0
 8006722:	9309      	str	r3, [sp, #36]	; 0x24
 8006724:	2320      	movs	r3, #32
 8006726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800672a:	2330      	movs	r3, #48	; 0x30
 800672c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006730:	9503      	str	r5, [sp, #12]
 8006732:	f04f 0b01 	mov.w	fp, #1
 8006736:	4637      	mov	r7, r6
 8006738:	463d      	mov	r5, r7
 800673a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800673e:	b10b      	cbz	r3, 8006744 <_svfiprintf_r+0x58>
 8006740:	2b25      	cmp	r3, #37	; 0x25
 8006742:	d13e      	bne.n	80067c2 <_svfiprintf_r+0xd6>
 8006744:	ebb7 0a06 	subs.w	sl, r7, r6
 8006748:	d00b      	beq.n	8006762 <_svfiprintf_r+0x76>
 800674a:	4653      	mov	r3, sl
 800674c:	4632      	mov	r2, r6
 800674e:	4621      	mov	r1, r4
 8006750:	4640      	mov	r0, r8
 8006752:	f7ff ff71 	bl	8006638 <__ssputs_r>
 8006756:	3001      	adds	r0, #1
 8006758:	f000 80a4 	beq.w	80068a4 <_svfiprintf_r+0x1b8>
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	4453      	add	r3, sl
 8006760:	9309      	str	r3, [sp, #36]	; 0x24
 8006762:	783b      	ldrb	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 809d 	beq.w	80068a4 <_svfiprintf_r+0x1b8>
 800676a:	2300      	movs	r3, #0
 800676c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800677c:	931a      	str	r3, [sp, #104]	; 0x68
 800677e:	462f      	mov	r7, r5
 8006780:	2205      	movs	r2, #5
 8006782:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006786:	4850      	ldr	r0, [pc, #320]	; (80068c8 <_svfiprintf_r+0x1dc>)
 8006788:	f7f9 fd42 	bl	8000210 <memchr>
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	b9d0      	cbnz	r0, 80067c6 <_svfiprintf_r+0xda>
 8006790:	06d9      	lsls	r1, r3, #27
 8006792:	bf44      	itt	mi
 8006794:	2220      	movmi	r2, #32
 8006796:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800679a:	071a      	lsls	r2, r3, #28
 800679c:	bf44      	itt	mi
 800679e:	222b      	movmi	r2, #43	; 0x2b
 80067a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067a4:	782a      	ldrb	r2, [r5, #0]
 80067a6:	2a2a      	cmp	r2, #42	; 0x2a
 80067a8:	d015      	beq.n	80067d6 <_svfiprintf_r+0xea>
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	462f      	mov	r7, r5
 80067ae:	2000      	movs	r0, #0
 80067b0:	250a      	movs	r5, #10
 80067b2:	4639      	mov	r1, r7
 80067b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067b8:	3b30      	subs	r3, #48	; 0x30
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	d94d      	bls.n	800685a <_svfiprintf_r+0x16e>
 80067be:	b1b8      	cbz	r0, 80067f0 <_svfiprintf_r+0x104>
 80067c0:	e00f      	b.n	80067e2 <_svfiprintf_r+0xf6>
 80067c2:	462f      	mov	r7, r5
 80067c4:	e7b8      	b.n	8006738 <_svfiprintf_r+0x4c>
 80067c6:	4a40      	ldr	r2, [pc, #256]	; (80068c8 <_svfiprintf_r+0x1dc>)
 80067c8:	1a80      	subs	r0, r0, r2
 80067ca:	fa0b f000 	lsl.w	r0, fp, r0
 80067ce:	4318      	orrs	r0, r3
 80067d0:	9004      	str	r0, [sp, #16]
 80067d2:	463d      	mov	r5, r7
 80067d4:	e7d3      	b.n	800677e <_svfiprintf_r+0x92>
 80067d6:	9a03      	ldr	r2, [sp, #12]
 80067d8:	1d11      	adds	r1, r2, #4
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	9103      	str	r1, [sp, #12]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	db01      	blt.n	80067e6 <_svfiprintf_r+0xfa>
 80067e2:	9207      	str	r2, [sp, #28]
 80067e4:	e004      	b.n	80067f0 <_svfiprintf_r+0x104>
 80067e6:	4252      	negs	r2, r2
 80067e8:	f043 0302 	orr.w	r3, r3, #2
 80067ec:	9207      	str	r2, [sp, #28]
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	783b      	ldrb	r3, [r7, #0]
 80067f2:	2b2e      	cmp	r3, #46	; 0x2e
 80067f4:	d10c      	bne.n	8006810 <_svfiprintf_r+0x124>
 80067f6:	787b      	ldrb	r3, [r7, #1]
 80067f8:	2b2a      	cmp	r3, #42	; 0x2a
 80067fa:	d133      	bne.n	8006864 <_svfiprintf_r+0x178>
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	1d1a      	adds	r2, r3, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	9203      	str	r2, [sp, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	bfb8      	it	lt
 8006808:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800680c:	3702      	adds	r7, #2
 800680e:	9305      	str	r3, [sp, #20]
 8006810:	4d2e      	ldr	r5, [pc, #184]	; (80068cc <_svfiprintf_r+0x1e0>)
 8006812:	7839      	ldrb	r1, [r7, #0]
 8006814:	2203      	movs	r2, #3
 8006816:	4628      	mov	r0, r5
 8006818:	f7f9 fcfa 	bl	8000210 <memchr>
 800681c:	b138      	cbz	r0, 800682e <_svfiprintf_r+0x142>
 800681e:	2340      	movs	r3, #64	; 0x40
 8006820:	1b40      	subs	r0, r0, r5
 8006822:	fa03 f000 	lsl.w	r0, r3, r0
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	4303      	orrs	r3, r0
 800682a:	3701      	adds	r7, #1
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	7839      	ldrb	r1, [r7, #0]
 8006830:	4827      	ldr	r0, [pc, #156]	; (80068d0 <_svfiprintf_r+0x1e4>)
 8006832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006836:	2206      	movs	r2, #6
 8006838:	1c7e      	adds	r6, r7, #1
 800683a:	f7f9 fce9 	bl	8000210 <memchr>
 800683e:	2800      	cmp	r0, #0
 8006840:	d038      	beq.n	80068b4 <_svfiprintf_r+0x1c8>
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <_svfiprintf_r+0x1e8>)
 8006844:	bb13      	cbnz	r3, 800688c <_svfiprintf_r+0x1a0>
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	3307      	adds	r3, #7
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	3308      	adds	r3, #8
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006854:	444b      	add	r3, r9
 8006856:	9309      	str	r3, [sp, #36]	; 0x24
 8006858:	e76d      	b.n	8006736 <_svfiprintf_r+0x4a>
 800685a:	fb05 3202 	mla	r2, r5, r2, r3
 800685e:	2001      	movs	r0, #1
 8006860:	460f      	mov	r7, r1
 8006862:	e7a6      	b.n	80067b2 <_svfiprintf_r+0xc6>
 8006864:	2300      	movs	r3, #0
 8006866:	3701      	adds	r7, #1
 8006868:	9305      	str	r3, [sp, #20]
 800686a:	4619      	mov	r1, r3
 800686c:	250a      	movs	r5, #10
 800686e:	4638      	mov	r0, r7
 8006870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006874:	3a30      	subs	r2, #48	; 0x30
 8006876:	2a09      	cmp	r2, #9
 8006878:	d903      	bls.n	8006882 <_svfiprintf_r+0x196>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0c8      	beq.n	8006810 <_svfiprintf_r+0x124>
 800687e:	9105      	str	r1, [sp, #20]
 8006880:	e7c6      	b.n	8006810 <_svfiprintf_r+0x124>
 8006882:	fb05 2101 	mla	r1, r5, r1, r2
 8006886:	2301      	movs	r3, #1
 8006888:	4607      	mov	r7, r0
 800688a:	e7f0      	b.n	800686e <_svfiprintf_r+0x182>
 800688c:	ab03      	add	r3, sp, #12
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	4622      	mov	r2, r4
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <_svfiprintf_r+0x1ec>)
 8006894:	a904      	add	r1, sp, #16
 8006896:	4640      	mov	r0, r8
 8006898:	f3af 8000 	nop.w
 800689c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80068a0:	4681      	mov	r9, r0
 80068a2:	d1d6      	bne.n	8006852 <_svfiprintf_r+0x166>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	065b      	lsls	r3, r3, #25
 80068a8:	f53f af35 	bmi.w	8006716 <_svfiprintf_r+0x2a>
 80068ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ae:	b01d      	add	sp, #116	; 0x74
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b4:	ab03      	add	r3, sp, #12
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4622      	mov	r2, r4
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <_svfiprintf_r+0x1ec>)
 80068bc:	a904      	add	r1, sp, #16
 80068be:	4640      	mov	r0, r8
 80068c0:	f000 f882 	bl	80069c8 <_printf_i>
 80068c4:	e7ea      	b.n	800689c <_svfiprintf_r+0x1b0>
 80068c6:	bf00      	nop
 80068c8:	08006ea0 	.word	0x08006ea0
 80068cc:	08006ea6 	.word	0x08006ea6
 80068d0:	08006eaa 	.word	0x08006eaa
 80068d4:	00000000 	.word	0x00000000
 80068d8:	08006639 	.word	0x08006639

080068dc <_printf_common>:
 80068dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	4691      	mov	r9, r2
 80068e2:	461f      	mov	r7, r3
 80068e4:	688a      	ldr	r2, [r1, #8]
 80068e6:	690b      	ldr	r3, [r1, #16]
 80068e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068ec:	4293      	cmp	r3, r2
 80068ee:	bfb8      	it	lt
 80068f0:	4613      	movlt	r3, r2
 80068f2:	f8c9 3000 	str.w	r3, [r9]
 80068f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068fa:	4606      	mov	r6, r0
 80068fc:	460c      	mov	r4, r1
 80068fe:	b112      	cbz	r2, 8006906 <_printf_common+0x2a>
 8006900:	3301      	adds	r3, #1
 8006902:	f8c9 3000 	str.w	r3, [r9]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	0699      	lsls	r1, r3, #26
 800690a:	bf42      	ittt	mi
 800690c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006910:	3302      	addmi	r3, #2
 8006912:	f8c9 3000 	strmi.w	r3, [r9]
 8006916:	6825      	ldr	r5, [r4, #0]
 8006918:	f015 0506 	ands.w	r5, r5, #6
 800691c:	d107      	bne.n	800692e <_printf_common+0x52>
 800691e:	f104 0a19 	add.w	sl, r4, #25
 8006922:	68e3      	ldr	r3, [r4, #12]
 8006924:	f8d9 2000 	ldr.w	r2, [r9]
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	42ab      	cmp	r3, r5
 800692c:	dc28      	bgt.n	8006980 <_printf_common+0xa4>
 800692e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	3300      	adds	r3, #0
 8006936:	bf18      	it	ne
 8006938:	2301      	movne	r3, #1
 800693a:	0692      	lsls	r2, r2, #26
 800693c:	d42d      	bmi.n	800699a <_printf_common+0xbe>
 800693e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006942:	4639      	mov	r1, r7
 8006944:	4630      	mov	r0, r6
 8006946:	47c0      	blx	r8
 8006948:	3001      	adds	r0, #1
 800694a:	d020      	beq.n	800698e <_printf_common+0xb2>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	68e5      	ldr	r5, [r4, #12]
 8006950:	f8d9 2000 	ldr.w	r2, [r9]
 8006954:	f003 0306 	and.w	r3, r3, #6
 8006958:	2b04      	cmp	r3, #4
 800695a:	bf08      	it	eq
 800695c:	1aad      	subeq	r5, r5, r2
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	6922      	ldr	r2, [r4, #16]
 8006962:	bf0c      	ite	eq
 8006964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006968:	2500      	movne	r5, #0
 800696a:	4293      	cmp	r3, r2
 800696c:	bfc4      	itt	gt
 800696e:	1a9b      	subgt	r3, r3, r2
 8006970:	18ed      	addgt	r5, r5, r3
 8006972:	f04f 0900 	mov.w	r9, #0
 8006976:	341a      	adds	r4, #26
 8006978:	454d      	cmp	r5, r9
 800697a:	d11a      	bne.n	80069b2 <_printf_common+0xd6>
 800697c:	2000      	movs	r0, #0
 800697e:	e008      	b.n	8006992 <_printf_common+0xb6>
 8006980:	2301      	movs	r3, #1
 8006982:	4652      	mov	r2, sl
 8006984:	4639      	mov	r1, r7
 8006986:	4630      	mov	r0, r6
 8006988:	47c0      	blx	r8
 800698a:	3001      	adds	r0, #1
 800698c:	d103      	bne.n	8006996 <_printf_common+0xba>
 800698e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006996:	3501      	adds	r5, #1
 8006998:	e7c3      	b.n	8006922 <_printf_common+0x46>
 800699a:	18e1      	adds	r1, r4, r3
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	2030      	movs	r0, #48	; 0x30
 80069a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069a4:	4422      	add	r2, r4
 80069a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069ae:	3302      	adds	r3, #2
 80069b0:	e7c5      	b.n	800693e <_printf_common+0x62>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4622      	mov	r2, r4
 80069b6:	4639      	mov	r1, r7
 80069b8:	4630      	mov	r0, r6
 80069ba:	47c0      	blx	r8
 80069bc:	3001      	adds	r0, #1
 80069be:	d0e6      	beq.n	800698e <_printf_common+0xb2>
 80069c0:	f109 0901 	add.w	r9, r9, #1
 80069c4:	e7d8      	b.n	8006978 <_printf_common+0x9c>
	...

080069c8 <_printf_i>:
 80069c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80069d0:	460c      	mov	r4, r1
 80069d2:	7e09      	ldrb	r1, [r1, #24]
 80069d4:	b085      	sub	sp, #20
 80069d6:	296e      	cmp	r1, #110	; 0x6e
 80069d8:	4617      	mov	r7, r2
 80069da:	4606      	mov	r6, r0
 80069dc:	4698      	mov	r8, r3
 80069de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e0:	f000 80b3 	beq.w	8006b4a <_printf_i+0x182>
 80069e4:	d822      	bhi.n	8006a2c <_printf_i+0x64>
 80069e6:	2963      	cmp	r1, #99	; 0x63
 80069e8:	d036      	beq.n	8006a58 <_printf_i+0x90>
 80069ea:	d80a      	bhi.n	8006a02 <_printf_i+0x3a>
 80069ec:	2900      	cmp	r1, #0
 80069ee:	f000 80b9 	beq.w	8006b64 <_printf_i+0x19c>
 80069f2:	2958      	cmp	r1, #88	; 0x58
 80069f4:	f000 8083 	beq.w	8006afe <_printf_i+0x136>
 80069f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a00:	e032      	b.n	8006a68 <_printf_i+0xa0>
 8006a02:	2964      	cmp	r1, #100	; 0x64
 8006a04:	d001      	beq.n	8006a0a <_printf_i+0x42>
 8006a06:	2969      	cmp	r1, #105	; 0x69
 8006a08:	d1f6      	bne.n	80069f8 <_printf_i+0x30>
 8006a0a:	6820      	ldr	r0, [r4, #0]
 8006a0c:	6813      	ldr	r3, [r2, #0]
 8006a0e:	0605      	lsls	r5, r0, #24
 8006a10:	f103 0104 	add.w	r1, r3, #4
 8006a14:	d52a      	bpl.n	8006a6c <_printf_i+0xa4>
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6011      	str	r1, [r2, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da03      	bge.n	8006a26 <_printf_i+0x5e>
 8006a1e:	222d      	movs	r2, #45	; 0x2d
 8006a20:	425b      	negs	r3, r3
 8006a22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a26:	486f      	ldr	r0, [pc, #444]	; (8006be4 <_printf_i+0x21c>)
 8006a28:	220a      	movs	r2, #10
 8006a2a:	e039      	b.n	8006aa0 <_printf_i+0xd8>
 8006a2c:	2973      	cmp	r1, #115	; 0x73
 8006a2e:	f000 809d 	beq.w	8006b6c <_printf_i+0x1a4>
 8006a32:	d808      	bhi.n	8006a46 <_printf_i+0x7e>
 8006a34:	296f      	cmp	r1, #111	; 0x6f
 8006a36:	d020      	beq.n	8006a7a <_printf_i+0xb2>
 8006a38:	2970      	cmp	r1, #112	; 0x70
 8006a3a:	d1dd      	bne.n	80069f8 <_printf_i+0x30>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	f043 0320 	orr.w	r3, r3, #32
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	e003      	b.n	8006a4e <_printf_i+0x86>
 8006a46:	2975      	cmp	r1, #117	; 0x75
 8006a48:	d017      	beq.n	8006a7a <_printf_i+0xb2>
 8006a4a:	2978      	cmp	r1, #120	; 0x78
 8006a4c:	d1d4      	bne.n	80069f8 <_printf_i+0x30>
 8006a4e:	2378      	movs	r3, #120	; 0x78
 8006a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a54:	4864      	ldr	r0, [pc, #400]	; (8006be8 <_printf_i+0x220>)
 8006a56:	e055      	b.n	8006b04 <_printf_i+0x13c>
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	1d19      	adds	r1, r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6011      	str	r1, [r2, #0]
 8006a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e08c      	b.n	8006b86 <_printf_i+0x1be>
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6011      	str	r1, [r2, #0]
 8006a70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a74:	bf18      	it	ne
 8006a76:	b21b      	sxthne	r3, r3
 8006a78:	e7cf      	b.n	8006a1a <_printf_i+0x52>
 8006a7a:	6813      	ldr	r3, [r2, #0]
 8006a7c:	6825      	ldr	r5, [r4, #0]
 8006a7e:	1d18      	adds	r0, r3, #4
 8006a80:	6010      	str	r0, [r2, #0]
 8006a82:	0628      	lsls	r0, r5, #24
 8006a84:	d501      	bpl.n	8006a8a <_printf_i+0xc2>
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	e002      	b.n	8006a90 <_printf_i+0xc8>
 8006a8a:	0668      	lsls	r0, r5, #25
 8006a8c:	d5fb      	bpl.n	8006a86 <_printf_i+0xbe>
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	4854      	ldr	r0, [pc, #336]	; (8006be4 <_printf_i+0x21c>)
 8006a92:	296f      	cmp	r1, #111	; 0x6f
 8006a94:	bf14      	ite	ne
 8006a96:	220a      	movne	r2, #10
 8006a98:	2208      	moveq	r2, #8
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aa0:	6865      	ldr	r5, [r4, #4]
 8006aa2:	60a5      	str	r5, [r4, #8]
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	f2c0 8095 	blt.w	8006bd4 <_printf_i+0x20c>
 8006aaa:	6821      	ldr	r1, [r4, #0]
 8006aac:	f021 0104 	bic.w	r1, r1, #4
 8006ab0:	6021      	str	r1, [r4, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d13d      	bne.n	8006b32 <_printf_i+0x16a>
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	f040 808e 	bne.w	8006bd8 <_printf_i+0x210>
 8006abc:	4665      	mov	r5, ip
 8006abe:	2a08      	cmp	r2, #8
 8006ac0:	d10b      	bne.n	8006ada <_printf_i+0x112>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	07db      	lsls	r3, r3, #31
 8006ac6:	d508      	bpl.n	8006ada <_printf_i+0x112>
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	bfde      	ittt	le
 8006ad0:	2330      	movle	r3, #48	; 0x30
 8006ad2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ad6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ada:	ebac 0305 	sub.w	r3, ip, r5
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	f8cd 8000 	str.w	r8, [sp]
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	aa03      	add	r2, sp, #12
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7ff fef6 	bl	80068dc <_printf_common>
 8006af0:	3001      	adds	r0, #1
 8006af2:	d14d      	bne.n	8006b90 <_printf_i+0x1c8>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006af8:	b005      	add	sp, #20
 8006afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006afe:	4839      	ldr	r0, [pc, #228]	; (8006be4 <_printf_i+0x21c>)
 8006b00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b04:	6813      	ldr	r3, [r2, #0]
 8006b06:	6821      	ldr	r1, [r4, #0]
 8006b08:	1d1d      	adds	r5, r3, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6015      	str	r5, [r2, #0]
 8006b0e:	060a      	lsls	r2, r1, #24
 8006b10:	d50b      	bpl.n	8006b2a <_printf_i+0x162>
 8006b12:	07ca      	lsls	r2, r1, #31
 8006b14:	bf44      	itt	mi
 8006b16:	f041 0120 	orrmi.w	r1, r1, #32
 8006b1a:	6021      	strmi	r1, [r4, #0]
 8006b1c:	b91b      	cbnz	r3, 8006b26 <_printf_i+0x15e>
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	f022 0220 	bic.w	r2, r2, #32
 8006b24:	6022      	str	r2, [r4, #0]
 8006b26:	2210      	movs	r2, #16
 8006b28:	e7b7      	b.n	8006a9a <_printf_i+0xd2>
 8006b2a:	064d      	lsls	r5, r1, #25
 8006b2c:	bf48      	it	mi
 8006b2e:	b29b      	uxthmi	r3, r3
 8006b30:	e7ef      	b.n	8006b12 <_printf_i+0x14a>
 8006b32:	4665      	mov	r5, ip
 8006b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b38:	fb02 3311 	mls	r3, r2, r1, r3
 8006b3c:	5cc3      	ldrb	r3, [r0, r3]
 8006b3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b42:	460b      	mov	r3, r1
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d1f5      	bne.n	8006b34 <_printf_i+0x16c>
 8006b48:	e7b9      	b.n	8006abe <_printf_i+0xf6>
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	6825      	ldr	r5, [r4, #0]
 8006b4e:	6961      	ldr	r1, [r4, #20]
 8006b50:	1d18      	adds	r0, r3, #4
 8006b52:	6010      	str	r0, [r2, #0]
 8006b54:	0628      	lsls	r0, r5, #24
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	d501      	bpl.n	8006b5e <_printf_i+0x196>
 8006b5a:	6019      	str	r1, [r3, #0]
 8006b5c:	e002      	b.n	8006b64 <_printf_i+0x19c>
 8006b5e:	066a      	lsls	r2, r5, #25
 8006b60:	d5fb      	bpl.n	8006b5a <_printf_i+0x192>
 8006b62:	8019      	strh	r1, [r3, #0]
 8006b64:	2300      	movs	r3, #0
 8006b66:	6123      	str	r3, [r4, #16]
 8006b68:	4665      	mov	r5, ip
 8006b6a:	e7b9      	b.n	8006ae0 <_printf_i+0x118>
 8006b6c:	6813      	ldr	r3, [r2, #0]
 8006b6e:	1d19      	adds	r1, r3, #4
 8006b70:	6011      	str	r1, [r2, #0]
 8006b72:	681d      	ldr	r5, [r3, #0]
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	2100      	movs	r1, #0
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f7f9 fb49 	bl	8000210 <memchr>
 8006b7e:	b108      	cbz	r0, 8006b84 <_printf_i+0x1bc>
 8006b80:	1b40      	subs	r0, r0, r5
 8006b82:	6060      	str	r0, [r4, #4]
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	6123      	str	r3, [r4, #16]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8e:	e7a7      	b.n	8006ae0 <_printf_i+0x118>
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	462a      	mov	r2, r5
 8006b94:	4639      	mov	r1, r7
 8006b96:	4630      	mov	r0, r6
 8006b98:	47c0      	blx	r8
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d0aa      	beq.n	8006af4 <_printf_i+0x12c>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	079b      	lsls	r3, r3, #30
 8006ba2:	d413      	bmi.n	8006bcc <_printf_i+0x204>
 8006ba4:	68e0      	ldr	r0, [r4, #12]
 8006ba6:	9b03      	ldr	r3, [sp, #12]
 8006ba8:	4298      	cmp	r0, r3
 8006baa:	bfb8      	it	lt
 8006bac:	4618      	movlt	r0, r3
 8006bae:	e7a3      	b.n	8006af8 <_printf_i+0x130>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	464a      	mov	r2, r9
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	47c0      	blx	r8
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d09a      	beq.n	8006af4 <_printf_i+0x12c>
 8006bbe:	3501      	adds	r5, #1
 8006bc0:	68e3      	ldr	r3, [r4, #12]
 8006bc2:	9a03      	ldr	r2, [sp, #12]
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	42ab      	cmp	r3, r5
 8006bc8:	dcf2      	bgt.n	8006bb0 <_printf_i+0x1e8>
 8006bca:	e7eb      	b.n	8006ba4 <_printf_i+0x1dc>
 8006bcc:	2500      	movs	r5, #0
 8006bce:	f104 0919 	add.w	r9, r4, #25
 8006bd2:	e7f5      	b.n	8006bc0 <_printf_i+0x1f8>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1ac      	bne.n	8006b32 <_printf_i+0x16a>
 8006bd8:	7803      	ldrb	r3, [r0, #0]
 8006bda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be2:	e76c      	b.n	8006abe <_printf_i+0xf6>
 8006be4:	08006eb1 	.word	0x08006eb1
 8006be8:	08006ec2 	.word	0x08006ec2

08006bec <memcpy>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	1e43      	subs	r3, r0, #1
 8006bf0:	440a      	add	r2, r1
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	d100      	bne.n	8006bf8 <memcpy+0xc>
 8006bf6:	bd10      	pop	{r4, pc}
 8006bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c00:	e7f7      	b.n	8006bf2 <memcpy+0x6>

08006c02 <memmove>:
 8006c02:	4288      	cmp	r0, r1
 8006c04:	b510      	push	{r4, lr}
 8006c06:	eb01 0302 	add.w	r3, r1, r2
 8006c0a:	d807      	bhi.n	8006c1c <memmove+0x1a>
 8006c0c:	1e42      	subs	r2, r0, #1
 8006c0e:	4299      	cmp	r1, r3
 8006c10:	d00a      	beq.n	8006c28 <memmove+0x26>
 8006c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c1a:	e7f8      	b.n	8006c0e <memmove+0xc>
 8006c1c:	4283      	cmp	r3, r0
 8006c1e:	d9f5      	bls.n	8006c0c <memmove+0xa>
 8006c20:	1881      	adds	r1, r0, r2
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	42d3      	cmn	r3, r2
 8006c26:	d100      	bne.n	8006c2a <memmove+0x28>
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c32:	e7f7      	b.n	8006c24 <memmove+0x22>

08006c34 <_free_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4605      	mov	r5, r0
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d045      	beq.n	8006cc8 <_free_r+0x94>
 8006c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c40:	1f0c      	subs	r4, r1, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	bfb8      	it	lt
 8006c46:	18e4      	addlt	r4, r4, r3
 8006c48:	f000 f8d2 	bl	8006df0 <__malloc_lock>
 8006c4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <_free_r+0x98>)
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	4610      	mov	r0, r2
 8006c52:	b933      	cbnz	r3, 8006c62 <_free_r+0x2e>
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	6014      	str	r4, [r2, #0]
 8006c58:	4628      	mov	r0, r5
 8006c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c5e:	f000 b8c8 	b.w	8006df2 <__malloc_unlock>
 8006c62:	42a3      	cmp	r3, r4
 8006c64:	d90c      	bls.n	8006c80 <_free_r+0x4c>
 8006c66:	6821      	ldr	r1, [r4, #0]
 8006c68:	1862      	adds	r2, r4, r1
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	bf04      	itt	eq
 8006c6e:	681a      	ldreq	r2, [r3, #0]
 8006c70:	685b      	ldreq	r3, [r3, #4]
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	bf04      	itt	eq
 8006c76:	1852      	addeq	r2, r2, r1
 8006c78:	6022      	streq	r2, [r4, #0]
 8006c7a:	6004      	str	r4, [r0, #0]
 8006c7c:	e7ec      	b.n	8006c58 <_free_r+0x24>
 8006c7e:	4613      	mov	r3, r2
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	b10a      	cbz	r2, 8006c88 <_free_r+0x54>
 8006c84:	42a2      	cmp	r2, r4
 8006c86:	d9fa      	bls.n	8006c7e <_free_r+0x4a>
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	1858      	adds	r0, r3, r1
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	d10b      	bne.n	8006ca8 <_free_r+0x74>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	4401      	add	r1, r0
 8006c94:	1858      	adds	r0, r3, r1
 8006c96:	4282      	cmp	r2, r0
 8006c98:	6019      	str	r1, [r3, #0]
 8006c9a:	d1dd      	bne.n	8006c58 <_free_r+0x24>
 8006c9c:	6810      	ldr	r0, [r2, #0]
 8006c9e:	6852      	ldr	r2, [r2, #4]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	4401      	add	r1, r0
 8006ca4:	6019      	str	r1, [r3, #0]
 8006ca6:	e7d7      	b.n	8006c58 <_free_r+0x24>
 8006ca8:	d902      	bls.n	8006cb0 <_free_r+0x7c>
 8006caa:	230c      	movs	r3, #12
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	e7d3      	b.n	8006c58 <_free_r+0x24>
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	1821      	adds	r1, r4, r0
 8006cb4:	428a      	cmp	r2, r1
 8006cb6:	bf04      	itt	eq
 8006cb8:	6811      	ldreq	r1, [r2, #0]
 8006cba:	6852      	ldreq	r2, [r2, #4]
 8006cbc:	6062      	str	r2, [r4, #4]
 8006cbe:	bf04      	itt	eq
 8006cc0:	1809      	addeq	r1, r1, r0
 8006cc2:	6021      	streq	r1, [r4, #0]
 8006cc4:	605c      	str	r4, [r3, #4]
 8006cc6:	e7c7      	b.n	8006c58 <_free_r+0x24>
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	bf00      	nop
 8006ccc:	2000010c 	.word	0x2000010c

08006cd0 <_malloc_r>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	1ccd      	adds	r5, r1, #3
 8006cd4:	f025 0503 	bic.w	r5, r5, #3
 8006cd8:	3508      	adds	r5, #8
 8006cda:	2d0c      	cmp	r5, #12
 8006cdc:	bf38      	it	cc
 8006cde:	250c      	movcc	r5, #12
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	db01      	blt.n	8006cea <_malloc_r+0x1a>
 8006ce6:	42a9      	cmp	r1, r5
 8006ce8:	d903      	bls.n	8006cf2 <_malloc_r+0x22>
 8006cea:	230c      	movs	r3, #12
 8006cec:	6033      	str	r3, [r6, #0]
 8006cee:	2000      	movs	r0, #0
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	f000 f87d 	bl	8006df0 <__malloc_lock>
 8006cf6:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <_malloc_r+0xac>)
 8006cf8:	6814      	ldr	r4, [r2, #0]
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	b991      	cbnz	r1, 8006d24 <_malloc_r+0x54>
 8006cfe:	4c20      	ldr	r4, [pc, #128]	; (8006d80 <_malloc_r+0xb0>)
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	b91b      	cbnz	r3, 8006d0c <_malloc_r+0x3c>
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 f863 	bl	8006dd0 <_sbrk_r>
 8006d0a:	6020      	str	r0, [r4, #0]
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f000 f85e 	bl	8006dd0 <_sbrk_r>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d124      	bne.n	8006d62 <_malloc_r+0x92>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f000 f868 	bl	8006df2 <__malloc_unlock>
 8006d22:	e7e4      	b.n	8006cee <_malloc_r+0x1e>
 8006d24:	680b      	ldr	r3, [r1, #0]
 8006d26:	1b5b      	subs	r3, r3, r5
 8006d28:	d418      	bmi.n	8006d5c <_malloc_r+0x8c>
 8006d2a:	2b0b      	cmp	r3, #11
 8006d2c:	d90f      	bls.n	8006d4e <_malloc_r+0x7e>
 8006d2e:	600b      	str	r3, [r1, #0]
 8006d30:	50cd      	str	r5, [r1, r3]
 8006d32:	18cc      	adds	r4, r1, r3
 8006d34:	4630      	mov	r0, r6
 8006d36:	f000 f85c 	bl	8006df2 <__malloc_unlock>
 8006d3a:	f104 000b 	add.w	r0, r4, #11
 8006d3e:	1d23      	adds	r3, r4, #4
 8006d40:	f020 0007 	bic.w	r0, r0, #7
 8006d44:	1ac3      	subs	r3, r0, r3
 8006d46:	d0d3      	beq.n	8006cf0 <_malloc_r+0x20>
 8006d48:	425a      	negs	r2, r3
 8006d4a:	50e2      	str	r2, [r4, r3]
 8006d4c:	e7d0      	b.n	8006cf0 <_malloc_r+0x20>
 8006d4e:	428c      	cmp	r4, r1
 8006d50:	684b      	ldr	r3, [r1, #4]
 8006d52:	bf16      	itet	ne
 8006d54:	6063      	strne	r3, [r4, #4]
 8006d56:	6013      	streq	r3, [r2, #0]
 8006d58:	460c      	movne	r4, r1
 8006d5a:	e7eb      	b.n	8006d34 <_malloc_r+0x64>
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	6849      	ldr	r1, [r1, #4]
 8006d60:	e7cc      	b.n	8006cfc <_malloc_r+0x2c>
 8006d62:	1cc4      	adds	r4, r0, #3
 8006d64:	f024 0403 	bic.w	r4, r4, #3
 8006d68:	42a0      	cmp	r0, r4
 8006d6a:	d005      	beq.n	8006d78 <_malloc_r+0xa8>
 8006d6c:	1a21      	subs	r1, r4, r0
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 f82e 	bl	8006dd0 <_sbrk_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d0cf      	beq.n	8006d18 <_malloc_r+0x48>
 8006d78:	6025      	str	r5, [r4, #0]
 8006d7a:	e7db      	b.n	8006d34 <_malloc_r+0x64>
 8006d7c:	2000010c 	.word	0x2000010c
 8006d80:	20000110 	.word	0x20000110

08006d84 <_realloc_r>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	4607      	mov	r7, r0
 8006d88:	4614      	mov	r4, r2
 8006d8a:	460e      	mov	r6, r1
 8006d8c:	b921      	cbnz	r1, 8006d98 <_realloc_r+0x14>
 8006d8e:	4611      	mov	r1, r2
 8006d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d94:	f7ff bf9c 	b.w	8006cd0 <_malloc_r>
 8006d98:	b922      	cbnz	r2, 8006da4 <_realloc_r+0x20>
 8006d9a:	f7ff ff4b 	bl	8006c34 <_free_r>
 8006d9e:	4625      	mov	r5, r4
 8006da0:	4628      	mov	r0, r5
 8006da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da4:	f000 f826 	bl	8006df4 <_malloc_usable_size_r>
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d20f      	bcs.n	8006dcc <_realloc_r+0x48>
 8006dac:	4621      	mov	r1, r4
 8006dae:	4638      	mov	r0, r7
 8006db0:	f7ff ff8e 	bl	8006cd0 <_malloc_r>
 8006db4:	4605      	mov	r5, r0
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d0f2      	beq.n	8006da0 <_realloc_r+0x1c>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	f7ff ff15 	bl	8006bec <memcpy>
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f7ff ff35 	bl	8006c34 <_free_r>
 8006dca:	e7e9      	b.n	8006da0 <_realloc_r+0x1c>
 8006dcc:	4635      	mov	r5, r6
 8006dce:	e7e7      	b.n	8006da0 <_realloc_r+0x1c>

08006dd0 <_sbrk_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4c06      	ldr	r4, [pc, #24]	; (8006dec <_sbrk_r+0x1c>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	f7fb fd70 	bl	80028c0 <_sbrk>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_sbrk_r+0x1a>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_sbrk_r+0x1a>
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20001418 	.word	0x20001418

08006df0 <__malloc_lock>:
 8006df0:	4770      	bx	lr

08006df2 <__malloc_unlock>:
 8006df2:	4770      	bx	lr

08006df4 <_malloc_usable_size_r>:
 8006df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df8:	1f18      	subs	r0, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bfbc      	itt	lt
 8006dfe:	580b      	ldrlt	r3, [r1, r0]
 8006e00:	18c0      	addlt	r0, r0, r3
 8006e02:	4770      	bx	lr

08006e04 <_init>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr

08006e10 <_fini>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr
=======
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ede:	2200      	movs	r2, #0
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff ffaa 	bl	8006e3c <FATFS_LinkDriverEx>
 8006ee8:	4603      	mov	r3, r0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <__errno>:
 8006ef4:	4b01      	ldr	r3, [pc, #4]	; (8006efc <__errno+0x8>)
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000024 	.word	0x20000024

08006f00 <__libc_init_array>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4e0d      	ldr	r6, [pc, #52]	; (8006f38 <__libc_init_array+0x38>)
 8006f04:	4c0d      	ldr	r4, [pc, #52]	; (8006f3c <__libc_init_array+0x3c>)
 8006f06:	1ba4      	subs	r4, r4, r6
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	42a5      	cmp	r5, r4
 8006f0e:	d109      	bne.n	8006f24 <__libc_init_array+0x24>
 8006f10:	4e0b      	ldr	r6, [pc, #44]	; (8006f40 <__libc_init_array+0x40>)
 8006f12:	4c0c      	ldr	r4, [pc, #48]	; (8006f44 <__libc_init_array+0x44>)
 8006f14:	f000 fc26 	bl	8007764 <_init>
 8006f18:	1ba4      	subs	r4, r4, r6
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	42a5      	cmp	r5, r4
 8006f20:	d105      	bne.n	8006f2e <__libc_init_array+0x2e>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f28:	4798      	blx	r3
 8006f2a:	3501      	adds	r5, #1
 8006f2c:	e7ee      	b.n	8006f0c <__libc_init_array+0xc>
 8006f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f32:	4798      	blx	r3
 8006f34:	3501      	adds	r5, #1
 8006f36:	e7f2      	b.n	8006f1e <__libc_init_array+0x1e>
 8006f38:	0800783c 	.word	0x0800783c
 8006f3c:	0800783c 	.word	0x0800783c
 8006f40:	0800783c 	.word	0x0800783c
 8006f44:	08007840 	.word	0x08007840

08006f48 <memset>:
 8006f48:	4402      	add	r2, r0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d100      	bne.n	8006f52 <memset+0xa>
 8006f50:	4770      	bx	lr
 8006f52:	f803 1b01 	strb.w	r1, [r3], #1
 8006f56:	e7f9      	b.n	8006f4c <memset+0x4>

08006f58 <siprintf>:
 8006f58:	b40e      	push	{r1, r2, r3}
 8006f5a:	b500      	push	{lr}
 8006f5c:	b09c      	sub	sp, #112	; 0x70
 8006f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f60:	9002      	str	r0, [sp, #8]
 8006f62:	9006      	str	r0, [sp, #24]
 8006f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f68:	4809      	ldr	r0, [pc, #36]	; (8006f90 <siprintf+0x38>)
 8006f6a:	9107      	str	r1, [sp, #28]
 8006f6c:	9104      	str	r1, [sp, #16]
 8006f6e:	4909      	ldr	r1, [pc, #36]	; (8006f94 <siprintf+0x3c>)
 8006f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f74:	9105      	str	r1, [sp, #20]
 8006f76:	6800      	ldr	r0, [r0, #0]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	a902      	add	r1, sp, #8
 8006f7c:	f000 f866 	bl	800704c <_svfiprintf_r>
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	b01c      	add	sp, #112	; 0x70
 8006f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f8c:	b003      	add	sp, #12
 8006f8e:	4770      	bx	lr
 8006f90:	20000024 	.word	0x20000024
 8006f94:	ffff0208 	.word	0xffff0208

08006f98 <__ssputs_r>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	688e      	ldr	r6, [r1, #8]
 8006f9e:	429e      	cmp	r6, r3
 8006fa0:	4682      	mov	sl, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4690      	mov	r8, r2
 8006fa6:	4699      	mov	r9, r3
 8006fa8:	d837      	bhi.n	800701a <__ssputs_r+0x82>
 8006faa:	898a      	ldrh	r2, [r1, #12]
 8006fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fb0:	d031      	beq.n	8007016 <__ssputs_r+0x7e>
 8006fb2:	6825      	ldr	r5, [r4, #0]
 8006fb4:	6909      	ldr	r1, [r1, #16]
 8006fb6:	1a6f      	subs	r7, r5, r1
 8006fb8:	6965      	ldr	r5, [r4, #20]
 8006fba:	2302      	movs	r3, #2
 8006fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fc4:	f109 0301 	add.w	r3, r9, #1
 8006fc8:	443b      	add	r3, r7
 8006fca:	429d      	cmp	r5, r3
 8006fcc:	bf38      	it	cc
 8006fce:	461d      	movcc	r5, r3
 8006fd0:	0553      	lsls	r3, r2, #21
 8006fd2:	d530      	bpl.n	8007036 <__ssputs_r+0x9e>
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f000 fb2b 	bl	8007630 <_malloc_r>
 8006fda:	4606      	mov	r6, r0
 8006fdc:	b950      	cbnz	r0, 8006ff4 <__ssputs_r+0x5c>
 8006fde:	230c      	movs	r3, #12
 8006fe0:	f8ca 3000 	str.w	r3, [sl]
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff4:	463a      	mov	r2, r7
 8006ff6:	6921      	ldr	r1, [r4, #16]
 8006ff8:	f000 faa8 	bl	800754c <memcpy>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	6126      	str	r6, [r4, #16]
 800700a:	6165      	str	r5, [r4, #20]
 800700c:	443e      	add	r6, r7
 800700e:	1bed      	subs	r5, r5, r7
 8007010:	6026      	str	r6, [r4, #0]
 8007012:	60a5      	str	r5, [r4, #8]
 8007014:	464e      	mov	r6, r9
 8007016:	454e      	cmp	r6, r9
 8007018:	d900      	bls.n	800701c <__ssputs_r+0x84>
 800701a:	464e      	mov	r6, r9
 800701c:	4632      	mov	r2, r6
 800701e:	4641      	mov	r1, r8
 8007020:	6820      	ldr	r0, [r4, #0]
 8007022:	f000 fa9e 	bl	8007562 <memmove>
 8007026:	68a3      	ldr	r3, [r4, #8]
 8007028:	1b9b      	subs	r3, r3, r6
 800702a:	60a3      	str	r3, [r4, #8]
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	441e      	add	r6, r3
 8007030:	6026      	str	r6, [r4, #0]
 8007032:	2000      	movs	r0, #0
 8007034:	e7dc      	b.n	8006ff0 <__ssputs_r+0x58>
 8007036:	462a      	mov	r2, r5
 8007038:	f000 fb54 	bl	80076e4 <_realloc_r>
 800703c:	4606      	mov	r6, r0
 800703e:	2800      	cmp	r0, #0
 8007040:	d1e2      	bne.n	8007008 <__ssputs_r+0x70>
 8007042:	6921      	ldr	r1, [r4, #16]
 8007044:	4650      	mov	r0, sl
 8007046:	f000 faa5 	bl	8007594 <_free_r>
 800704a:	e7c8      	b.n	8006fde <__ssputs_r+0x46>

0800704c <_svfiprintf_r>:
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	461d      	mov	r5, r3
 8007052:	898b      	ldrh	r3, [r1, #12]
 8007054:	061f      	lsls	r7, r3, #24
 8007056:	b09d      	sub	sp, #116	; 0x74
 8007058:	4680      	mov	r8, r0
 800705a:	460c      	mov	r4, r1
 800705c:	4616      	mov	r6, r2
 800705e:	d50f      	bpl.n	8007080 <_svfiprintf_r+0x34>
 8007060:	690b      	ldr	r3, [r1, #16]
 8007062:	b96b      	cbnz	r3, 8007080 <_svfiprintf_r+0x34>
 8007064:	2140      	movs	r1, #64	; 0x40
 8007066:	f000 fae3 	bl	8007630 <_malloc_r>
 800706a:	6020      	str	r0, [r4, #0]
 800706c:	6120      	str	r0, [r4, #16]
 800706e:	b928      	cbnz	r0, 800707c <_svfiprintf_r+0x30>
 8007070:	230c      	movs	r3, #12
 8007072:	f8c8 3000 	str.w	r3, [r8]
 8007076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800707a:	e0c8      	b.n	800720e <_svfiprintf_r+0x1c2>
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	6163      	str	r3, [r4, #20]
 8007080:	2300      	movs	r3, #0
 8007082:	9309      	str	r3, [sp, #36]	; 0x24
 8007084:	2320      	movs	r3, #32
 8007086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800708a:	2330      	movs	r3, #48	; 0x30
 800708c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007090:	9503      	str	r5, [sp, #12]
 8007092:	f04f 0b01 	mov.w	fp, #1
 8007096:	4637      	mov	r7, r6
 8007098:	463d      	mov	r5, r7
 800709a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800709e:	b10b      	cbz	r3, 80070a4 <_svfiprintf_r+0x58>
 80070a0:	2b25      	cmp	r3, #37	; 0x25
 80070a2:	d13e      	bne.n	8007122 <_svfiprintf_r+0xd6>
 80070a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80070a8:	d00b      	beq.n	80070c2 <_svfiprintf_r+0x76>
 80070aa:	4653      	mov	r3, sl
 80070ac:	4632      	mov	r2, r6
 80070ae:	4621      	mov	r1, r4
 80070b0:	4640      	mov	r0, r8
 80070b2:	f7ff ff71 	bl	8006f98 <__ssputs_r>
 80070b6:	3001      	adds	r0, #1
 80070b8:	f000 80a4 	beq.w	8007204 <_svfiprintf_r+0x1b8>
 80070bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070be:	4453      	add	r3, sl
 80070c0:	9309      	str	r3, [sp, #36]	; 0x24
 80070c2:	783b      	ldrb	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 809d 	beq.w	8007204 <_svfiprintf_r+0x1b8>
 80070ca:	2300      	movs	r3, #0
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070dc:	931a      	str	r3, [sp, #104]	; 0x68
 80070de:	462f      	mov	r7, r5
 80070e0:	2205      	movs	r2, #5
 80070e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070e6:	4850      	ldr	r0, [pc, #320]	; (8007228 <_svfiprintf_r+0x1dc>)
 80070e8:	f7f9 f892 	bl	8000210 <memchr>
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	b9d0      	cbnz	r0, 8007126 <_svfiprintf_r+0xda>
 80070f0:	06d9      	lsls	r1, r3, #27
 80070f2:	bf44      	itt	mi
 80070f4:	2220      	movmi	r2, #32
 80070f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070fa:	071a      	lsls	r2, r3, #28
 80070fc:	bf44      	itt	mi
 80070fe:	222b      	movmi	r2, #43	; 0x2b
 8007100:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007104:	782a      	ldrb	r2, [r5, #0]
 8007106:	2a2a      	cmp	r2, #42	; 0x2a
 8007108:	d015      	beq.n	8007136 <_svfiprintf_r+0xea>
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	462f      	mov	r7, r5
 800710e:	2000      	movs	r0, #0
 8007110:	250a      	movs	r5, #10
 8007112:	4639      	mov	r1, r7
 8007114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007118:	3b30      	subs	r3, #48	; 0x30
 800711a:	2b09      	cmp	r3, #9
 800711c:	d94d      	bls.n	80071ba <_svfiprintf_r+0x16e>
 800711e:	b1b8      	cbz	r0, 8007150 <_svfiprintf_r+0x104>
 8007120:	e00f      	b.n	8007142 <_svfiprintf_r+0xf6>
 8007122:	462f      	mov	r7, r5
 8007124:	e7b8      	b.n	8007098 <_svfiprintf_r+0x4c>
 8007126:	4a40      	ldr	r2, [pc, #256]	; (8007228 <_svfiprintf_r+0x1dc>)
 8007128:	1a80      	subs	r0, r0, r2
 800712a:	fa0b f000 	lsl.w	r0, fp, r0
 800712e:	4318      	orrs	r0, r3
 8007130:	9004      	str	r0, [sp, #16]
 8007132:	463d      	mov	r5, r7
 8007134:	e7d3      	b.n	80070de <_svfiprintf_r+0x92>
 8007136:	9a03      	ldr	r2, [sp, #12]
 8007138:	1d11      	adds	r1, r2, #4
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	9103      	str	r1, [sp, #12]
 800713e:	2a00      	cmp	r2, #0
 8007140:	db01      	blt.n	8007146 <_svfiprintf_r+0xfa>
 8007142:	9207      	str	r2, [sp, #28]
 8007144:	e004      	b.n	8007150 <_svfiprintf_r+0x104>
 8007146:	4252      	negs	r2, r2
 8007148:	f043 0302 	orr.w	r3, r3, #2
 800714c:	9207      	str	r2, [sp, #28]
 800714e:	9304      	str	r3, [sp, #16]
 8007150:	783b      	ldrb	r3, [r7, #0]
 8007152:	2b2e      	cmp	r3, #46	; 0x2e
 8007154:	d10c      	bne.n	8007170 <_svfiprintf_r+0x124>
 8007156:	787b      	ldrb	r3, [r7, #1]
 8007158:	2b2a      	cmp	r3, #42	; 0x2a
 800715a:	d133      	bne.n	80071c4 <_svfiprintf_r+0x178>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	9203      	str	r2, [sp, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfb8      	it	lt
 8007168:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800716c:	3702      	adds	r7, #2
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	4d2e      	ldr	r5, [pc, #184]	; (800722c <_svfiprintf_r+0x1e0>)
 8007172:	7839      	ldrb	r1, [r7, #0]
 8007174:	2203      	movs	r2, #3
 8007176:	4628      	mov	r0, r5
 8007178:	f7f9 f84a 	bl	8000210 <memchr>
 800717c:	b138      	cbz	r0, 800718e <_svfiprintf_r+0x142>
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	1b40      	subs	r0, r0, r5
 8007182:	fa03 f000 	lsl.w	r0, r3, r0
 8007186:	9b04      	ldr	r3, [sp, #16]
 8007188:	4303      	orrs	r3, r0
 800718a:	3701      	adds	r7, #1
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	7839      	ldrb	r1, [r7, #0]
 8007190:	4827      	ldr	r0, [pc, #156]	; (8007230 <_svfiprintf_r+0x1e4>)
 8007192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007196:	2206      	movs	r2, #6
 8007198:	1c7e      	adds	r6, r7, #1
 800719a:	f7f9 f839 	bl	8000210 <memchr>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d038      	beq.n	8007214 <_svfiprintf_r+0x1c8>
 80071a2:	4b24      	ldr	r3, [pc, #144]	; (8007234 <_svfiprintf_r+0x1e8>)
 80071a4:	bb13      	cbnz	r3, 80071ec <_svfiprintf_r+0x1a0>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	3307      	adds	r3, #7
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	3308      	adds	r3, #8
 80071b0:	9303      	str	r3, [sp, #12]
 80071b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b4:	444b      	add	r3, r9
 80071b6:	9309      	str	r3, [sp, #36]	; 0x24
 80071b8:	e76d      	b.n	8007096 <_svfiprintf_r+0x4a>
 80071ba:	fb05 3202 	mla	r2, r5, r2, r3
 80071be:	2001      	movs	r0, #1
 80071c0:	460f      	mov	r7, r1
 80071c2:	e7a6      	b.n	8007112 <_svfiprintf_r+0xc6>
 80071c4:	2300      	movs	r3, #0
 80071c6:	3701      	adds	r7, #1
 80071c8:	9305      	str	r3, [sp, #20]
 80071ca:	4619      	mov	r1, r3
 80071cc:	250a      	movs	r5, #10
 80071ce:	4638      	mov	r0, r7
 80071d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d4:	3a30      	subs	r2, #48	; 0x30
 80071d6:	2a09      	cmp	r2, #9
 80071d8:	d903      	bls.n	80071e2 <_svfiprintf_r+0x196>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0c8      	beq.n	8007170 <_svfiprintf_r+0x124>
 80071de:	9105      	str	r1, [sp, #20]
 80071e0:	e7c6      	b.n	8007170 <_svfiprintf_r+0x124>
 80071e2:	fb05 2101 	mla	r1, r5, r1, r2
 80071e6:	2301      	movs	r3, #1
 80071e8:	4607      	mov	r7, r0
 80071ea:	e7f0      	b.n	80071ce <_svfiprintf_r+0x182>
 80071ec:	ab03      	add	r3, sp, #12
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	4622      	mov	r2, r4
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <_svfiprintf_r+0x1ec>)
 80071f4:	a904      	add	r1, sp, #16
 80071f6:	4640      	mov	r0, r8
 80071f8:	f3af 8000 	nop.w
 80071fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007200:	4681      	mov	r9, r0
 8007202:	d1d6      	bne.n	80071b2 <_svfiprintf_r+0x166>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	065b      	lsls	r3, r3, #25
 8007208:	f53f af35 	bmi.w	8007076 <_svfiprintf_r+0x2a>
 800720c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720e:	b01d      	add	sp, #116	; 0x74
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007214:	ab03      	add	r3, sp, #12
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4622      	mov	r2, r4
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <_svfiprintf_r+0x1ec>)
 800721c:	a904      	add	r1, sp, #16
 800721e:	4640      	mov	r0, r8
 8007220:	f000 f882 	bl	8007328 <_printf_i>
 8007224:	e7ea      	b.n	80071fc <_svfiprintf_r+0x1b0>
 8007226:	bf00      	nop
 8007228:	08007800 	.word	0x08007800
 800722c:	08007806 	.word	0x08007806
 8007230:	0800780a 	.word	0x0800780a
 8007234:	00000000 	.word	0x00000000
 8007238:	08006f99 	.word	0x08006f99

0800723c <_printf_common>:
 800723c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	4691      	mov	r9, r2
 8007242:	461f      	mov	r7, r3
 8007244:	688a      	ldr	r2, [r1, #8]
 8007246:	690b      	ldr	r3, [r1, #16]
 8007248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800724c:	4293      	cmp	r3, r2
 800724e:	bfb8      	it	lt
 8007250:	4613      	movlt	r3, r2
 8007252:	f8c9 3000 	str.w	r3, [r9]
 8007256:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800725a:	4606      	mov	r6, r0
 800725c:	460c      	mov	r4, r1
 800725e:	b112      	cbz	r2, 8007266 <_printf_common+0x2a>
 8007260:	3301      	adds	r3, #1
 8007262:	f8c9 3000 	str.w	r3, [r9]
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	0699      	lsls	r1, r3, #26
 800726a:	bf42      	ittt	mi
 800726c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007270:	3302      	addmi	r3, #2
 8007272:	f8c9 3000 	strmi.w	r3, [r9]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	f015 0506 	ands.w	r5, r5, #6
 800727c:	d107      	bne.n	800728e <_printf_common+0x52>
 800727e:	f104 0a19 	add.w	sl, r4, #25
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	f8d9 2000 	ldr.w	r2, [r9]
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	42ab      	cmp	r3, r5
 800728c:	dc28      	bgt.n	80072e0 <_printf_common+0xa4>
 800728e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	3300      	adds	r3, #0
 8007296:	bf18      	it	ne
 8007298:	2301      	movne	r3, #1
 800729a:	0692      	lsls	r2, r2, #26
 800729c:	d42d      	bmi.n	80072fa <_printf_common+0xbe>
 800729e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a2:	4639      	mov	r1, r7
 80072a4:	4630      	mov	r0, r6
 80072a6:	47c0      	blx	r8
 80072a8:	3001      	adds	r0, #1
 80072aa:	d020      	beq.n	80072ee <_printf_common+0xb2>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	68e5      	ldr	r5, [r4, #12]
 80072b0:	f8d9 2000 	ldr.w	r2, [r9]
 80072b4:	f003 0306 	and.w	r3, r3, #6
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	bf08      	it	eq
 80072bc:	1aad      	subeq	r5, r5, r2
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	bf0c      	ite	eq
 80072c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c8:	2500      	movne	r5, #0
 80072ca:	4293      	cmp	r3, r2
 80072cc:	bfc4      	itt	gt
 80072ce:	1a9b      	subgt	r3, r3, r2
 80072d0:	18ed      	addgt	r5, r5, r3
 80072d2:	f04f 0900 	mov.w	r9, #0
 80072d6:	341a      	adds	r4, #26
 80072d8:	454d      	cmp	r5, r9
 80072da:	d11a      	bne.n	8007312 <_printf_common+0xd6>
 80072dc:	2000      	movs	r0, #0
 80072de:	e008      	b.n	80072f2 <_printf_common+0xb6>
 80072e0:	2301      	movs	r3, #1
 80072e2:	4652      	mov	r2, sl
 80072e4:	4639      	mov	r1, r7
 80072e6:	4630      	mov	r0, r6
 80072e8:	47c0      	blx	r8
 80072ea:	3001      	adds	r0, #1
 80072ec:	d103      	bne.n	80072f6 <_printf_common+0xba>
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7c3      	b.n	8007282 <_printf_common+0x46>
 80072fa:	18e1      	adds	r1, r4, r3
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	2030      	movs	r0, #48	; 0x30
 8007300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007304:	4422      	add	r2, r4
 8007306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800730a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800730e:	3302      	adds	r3, #2
 8007310:	e7c5      	b.n	800729e <_printf_common+0x62>
 8007312:	2301      	movs	r3, #1
 8007314:	4622      	mov	r2, r4
 8007316:	4639      	mov	r1, r7
 8007318:	4630      	mov	r0, r6
 800731a:	47c0      	blx	r8
 800731c:	3001      	adds	r0, #1
 800731e:	d0e6      	beq.n	80072ee <_printf_common+0xb2>
 8007320:	f109 0901 	add.w	r9, r9, #1
 8007324:	e7d8      	b.n	80072d8 <_printf_common+0x9c>
	...

08007328 <_printf_i>:
 8007328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800732c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007330:	460c      	mov	r4, r1
 8007332:	7e09      	ldrb	r1, [r1, #24]
 8007334:	b085      	sub	sp, #20
 8007336:	296e      	cmp	r1, #110	; 0x6e
 8007338:	4617      	mov	r7, r2
 800733a:	4606      	mov	r6, r0
 800733c:	4698      	mov	r8, r3
 800733e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007340:	f000 80b3 	beq.w	80074aa <_printf_i+0x182>
 8007344:	d822      	bhi.n	800738c <_printf_i+0x64>
 8007346:	2963      	cmp	r1, #99	; 0x63
 8007348:	d036      	beq.n	80073b8 <_printf_i+0x90>
 800734a:	d80a      	bhi.n	8007362 <_printf_i+0x3a>
 800734c:	2900      	cmp	r1, #0
 800734e:	f000 80b9 	beq.w	80074c4 <_printf_i+0x19c>
 8007352:	2958      	cmp	r1, #88	; 0x58
 8007354:	f000 8083 	beq.w	800745e <_printf_i+0x136>
 8007358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007360:	e032      	b.n	80073c8 <_printf_i+0xa0>
 8007362:	2964      	cmp	r1, #100	; 0x64
 8007364:	d001      	beq.n	800736a <_printf_i+0x42>
 8007366:	2969      	cmp	r1, #105	; 0x69
 8007368:	d1f6      	bne.n	8007358 <_printf_i+0x30>
 800736a:	6820      	ldr	r0, [r4, #0]
 800736c:	6813      	ldr	r3, [r2, #0]
 800736e:	0605      	lsls	r5, r0, #24
 8007370:	f103 0104 	add.w	r1, r3, #4
 8007374:	d52a      	bpl.n	80073cc <_printf_i+0xa4>
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6011      	str	r1, [r2, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da03      	bge.n	8007386 <_printf_i+0x5e>
 800737e:	222d      	movs	r2, #45	; 0x2d
 8007380:	425b      	negs	r3, r3
 8007382:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007386:	486f      	ldr	r0, [pc, #444]	; (8007544 <_printf_i+0x21c>)
 8007388:	220a      	movs	r2, #10
 800738a:	e039      	b.n	8007400 <_printf_i+0xd8>
 800738c:	2973      	cmp	r1, #115	; 0x73
 800738e:	f000 809d 	beq.w	80074cc <_printf_i+0x1a4>
 8007392:	d808      	bhi.n	80073a6 <_printf_i+0x7e>
 8007394:	296f      	cmp	r1, #111	; 0x6f
 8007396:	d020      	beq.n	80073da <_printf_i+0xb2>
 8007398:	2970      	cmp	r1, #112	; 0x70
 800739a:	d1dd      	bne.n	8007358 <_printf_i+0x30>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	f043 0320 	orr.w	r3, r3, #32
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	e003      	b.n	80073ae <_printf_i+0x86>
 80073a6:	2975      	cmp	r1, #117	; 0x75
 80073a8:	d017      	beq.n	80073da <_printf_i+0xb2>
 80073aa:	2978      	cmp	r1, #120	; 0x78
 80073ac:	d1d4      	bne.n	8007358 <_printf_i+0x30>
 80073ae:	2378      	movs	r3, #120	; 0x78
 80073b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073b4:	4864      	ldr	r0, [pc, #400]	; (8007548 <_printf_i+0x220>)
 80073b6:	e055      	b.n	8007464 <_printf_i+0x13c>
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	1d19      	adds	r1, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6011      	str	r1, [r2, #0]
 80073c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c8:	2301      	movs	r3, #1
 80073ca:	e08c      	b.n	80074e6 <_printf_i+0x1be>
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6011      	str	r1, [r2, #0]
 80073d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073d4:	bf18      	it	ne
 80073d6:	b21b      	sxthne	r3, r3
 80073d8:	e7cf      	b.n	800737a <_printf_i+0x52>
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	6825      	ldr	r5, [r4, #0]
 80073de:	1d18      	adds	r0, r3, #4
 80073e0:	6010      	str	r0, [r2, #0]
 80073e2:	0628      	lsls	r0, r5, #24
 80073e4:	d501      	bpl.n	80073ea <_printf_i+0xc2>
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	e002      	b.n	80073f0 <_printf_i+0xc8>
 80073ea:	0668      	lsls	r0, r5, #25
 80073ec:	d5fb      	bpl.n	80073e6 <_printf_i+0xbe>
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	4854      	ldr	r0, [pc, #336]	; (8007544 <_printf_i+0x21c>)
 80073f2:	296f      	cmp	r1, #111	; 0x6f
 80073f4:	bf14      	ite	ne
 80073f6:	220a      	movne	r2, #10
 80073f8:	2208      	moveq	r2, #8
 80073fa:	2100      	movs	r1, #0
 80073fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007400:	6865      	ldr	r5, [r4, #4]
 8007402:	60a5      	str	r5, [r4, #8]
 8007404:	2d00      	cmp	r5, #0
 8007406:	f2c0 8095 	blt.w	8007534 <_printf_i+0x20c>
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	f021 0104 	bic.w	r1, r1, #4
 8007410:	6021      	str	r1, [r4, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d13d      	bne.n	8007492 <_printf_i+0x16a>
 8007416:	2d00      	cmp	r5, #0
 8007418:	f040 808e 	bne.w	8007538 <_printf_i+0x210>
 800741c:	4665      	mov	r5, ip
 800741e:	2a08      	cmp	r2, #8
 8007420:	d10b      	bne.n	800743a <_printf_i+0x112>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	07db      	lsls	r3, r3, #31
 8007426:	d508      	bpl.n	800743a <_printf_i+0x112>
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	6862      	ldr	r2, [r4, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	bfde      	ittt	le
 8007430:	2330      	movle	r3, #48	; 0x30
 8007432:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007436:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800743a:	ebac 0305 	sub.w	r3, ip, r5
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	f8cd 8000 	str.w	r8, [sp]
 8007444:	463b      	mov	r3, r7
 8007446:	aa03      	add	r2, sp, #12
 8007448:	4621      	mov	r1, r4
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff fef6 	bl	800723c <_printf_common>
 8007450:	3001      	adds	r0, #1
 8007452:	d14d      	bne.n	80074f0 <_printf_i+0x1c8>
 8007454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007458:	b005      	add	sp, #20
 800745a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800745e:	4839      	ldr	r0, [pc, #228]	; (8007544 <_printf_i+0x21c>)
 8007460:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007464:	6813      	ldr	r3, [r2, #0]
 8007466:	6821      	ldr	r1, [r4, #0]
 8007468:	1d1d      	adds	r5, r3, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6015      	str	r5, [r2, #0]
 800746e:	060a      	lsls	r2, r1, #24
 8007470:	d50b      	bpl.n	800748a <_printf_i+0x162>
 8007472:	07ca      	lsls	r2, r1, #31
 8007474:	bf44      	itt	mi
 8007476:	f041 0120 	orrmi.w	r1, r1, #32
 800747a:	6021      	strmi	r1, [r4, #0]
 800747c:	b91b      	cbnz	r3, 8007486 <_printf_i+0x15e>
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	f022 0220 	bic.w	r2, r2, #32
 8007484:	6022      	str	r2, [r4, #0]
 8007486:	2210      	movs	r2, #16
 8007488:	e7b7      	b.n	80073fa <_printf_i+0xd2>
 800748a:	064d      	lsls	r5, r1, #25
 800748c:	bf48      	it	mi
 800748e:	b29b      	uxthmi	r3, r3
 8007490:	e7ef      	b.n	8007472 <_printf_i+0x14a>
 8007492:	4665      	mov	r5, ip
 8007494:	fbb3 f1f2 	udiv	r1, r3, r2
 8007498:	fb02 3311 	mls	r3, r2, r1, r3
 800749c:	5cc3      	ldrb	r3, [r0, r3]
 800749e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074a2:	460b      	mov	r3, r1
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d1f5      	bne.n	8007494 <_printf_i+0x16c>
 80074a8:	e7b9      	b.n	800741e <_printf_i+0xf6>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	6825      	ldr	r5, [r4, #0]
 80074ae:	6961      	ldr	r1, [r4, #20]
 80074b0:	1d18      	adds	r0, r3, #4
 80074b2:	6010      	str	r0, [r2, #0]
 80074b4:	0628      	lsls	r0, r5, #24
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	d501      	bpl.n	80074be <_printf_i+0x196>
 80074ba:	6019      	str	r1, [r3, #0]
 80074bc:	e002      	b.n	80074c4 <_printf_i+0x19c>
 80074be:	066a      	lsls	r2, r5, #25
 80074c0:	d5fb      	bpl.n	80074ba <_printf_i+0x192>
 80074c2:	8019      	strh	r1, [r3, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	4665      	mov	r5, ip
 80074ca:	e7b9      	b.n	8007440 <_printf_i+0x118>
 80074cc:	6813      	ldr	r3, [r2, #0]
 80074ce:	1d19      	adds	r1, r3, #4
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	681d      	ldr	r5, [r3, #0]
 80074d4:	6862      	ldr	r2, [r4, #4]
 80074d6:	2100      	movs	r1, #0
 80074d8:	4628      	mov	r0, r5
 80074da:	f7f8 fe99 	bl	8000210 <memchr>
 80074de:	b108      	cbz	r0, 80074e4 <_printf_i+0x1bc>
 80074e0:	1b40      	subs	r0, r0, r5
 80074e2:	6060      	str	r0, [r4, #4]
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	6123      	str	r3, [r4, #16]
 80074e8:	2300      	movs	r3, #0
 80074ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ee:	e7a7      	b.n	8007440 <_printf_i+0x118>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	462a      	mov	r2, r5
 80074f4:	4639      	mov	r1, r7
 80074f6:	4630      	mov	r0, r6
 80074f8:	47c0      	blx	r8
 80074fa:	3001      	adds	r0, #1
 80074fc:	d0aa      	beq.n	8007454 <_printf_i+0x12c>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	079b      	lsls	r3, r3, #30
 8007502:	d413      	bmi.n	800752c <_printf_i+0x204>
 8007504:	68e0      	ldr	r0, [r4, #12]
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	4298      	cmp	r0, r3
 800750a:	bfb8      	it	lt
 800750c:	4618      	movlt	r0, r3
 800750e:	e7a3      	b.n	8007458 <_printf_i+0x130>
 8007510:	2301      	movs	r3, #1
 8007512:	464a      	mov	r2, r9
 8007514:	4639      	mov	r1, r7
 8007516:	4630      	mov	r0, r6
 8007518:	47c0      	blx	r8
 800751a:	3001      	adds	r0, #1
 800751c:	d09a      	beq.n	8007454 <_printf_i+0x12c>
 800751e:	3501      	adds	r5, #1
 8007520:	68e3      	ldr	r3, [r4, #12]
 8007522:	9a03      	ldr	r2, [sp, #12]
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	42ab      	cmp	r3, r5
 8007528:	dcf2      	bgt.n	8007510 <_printf_i+0x1e8>
 800752a:	e7eb      	b.n	8007504 <_printf_i+0x1dc>
 800752c:	2500      	movs	r5, #0
 800752e:	f104 0919 	add.w	r9, r4, #25
 8007532:	e7f5      	b.n	8007520 <_printf_i+0x1f8>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1ac      	bne.n	8007492 <_printf_i+0x16a>
 8007538:	7803      	ldrb	r3, [r0, #0]
 800753a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800753e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007542:	e76c      	b.n	800741e <_printf_i+0xf6>
 8007544:	08007811 	.word	0x08007811
 8007548:	08007822 	.word	0x08007822

0800754c <memcpy>:
 800754c:	b510      	push	{r4, lr}
 800754e:	1e43      	subs	r3, r0, #1
 8007550:	440a      	add	r2, r1
 8007552:	4291      	cmp	r1, r2
 8007554:	d100      	bne.n	8007558 <memcpy+0xc>
 8007556:	bd10      	pop	{r4, pc}
 8007558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007560:	e7f7      	b.n	8007552 <memcpy+0x6>

08007562 <memmove>:
 8007562:	4288      	cmp	r0, r1
 8007564:	b510      	push	{r4, lr}
 8007566:	eb01 0302 	add.w	r3, r1, r2
 800756a:	d807      	bhi.n	800757c <memmove+0x1a>
 800756c:	1e42      	subs	r2, r0, #1
 800756e:	4299      	cmp	r1, r3
 8007570:	d00a      	beq.n	8007588 <memmove+0x26>
 8007572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007576:	f802 4f01 	strb.w	r4, [r2, #1]!
 800757a:	e7f8      	b.n	800756e <memmove+0xc>
 800757c:	4283      	cmp	r3, r0
 800757e:	d9f5      	bls.n	800756c <memmove+0xa>
 8007580:	1881      	adds	r1, r0, r2
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	42d3      	cmn	r3, r2
 8007586:	d100      	bne.n	800758a <memmove+0x28>
 8007588:	bd10      	pop	{r4, pc}
 800758a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800758e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007592:	e7f7      	b.n	8007584 <memmove+0x22>

08007594 <_free_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4605      	mov	r5, r0
 8007598:	2900      	cmp	r1, #0
 800759a:	d045      	beq.n	8007628 <_free_r+0x94>
 800759c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a0:	1f0c      	subs	r4, r1, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfb8      	it	lt
 80075a6:	18e4      	addlt	r4, r4, r3
 80075a8:	f000 f8d2 	bl	8007750 <__malloc_lock>
 80075ac:	4a1f      	ldr	r2, [pc, #124]	; (800762c <_free_r+0x98>)
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	4610      	mov	r0, r2
 80075b2:	b933      	cbnz	r3, 80075c2 <_free_r+0x2e>
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	6014      	str	r4, [r2, #0]
 80075b8:	4628      	mov	r0, r5
 80075ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075be:	f000 b8c8 	b.w	8007752 <__malloc_unlock>
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d90c      	bls.n	80075e0 <_free_r+0x4c>
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	1862      	adds	r2, r4, r1
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bf04      	itt	eq
 80075ce:	681a      	ldreq	r2, [r3, #0]
 80075d0:	685b      	ldreq	r3, [r3, #4]
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	bf04      	itt	eq
 80075d6:	1852      	addeq	r2, r2, r1
 80075d8:	6022      	streq	r2, [r4, #0]
 80075da:	6004      	str	r4, [r0, #0]
 80075dc:	e7ec      	b.n	80075b8 <_free_r+0x24>
 80075de:	4613      	mov	r3, r2
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	b10a      	cbz	r2, 80075e8 <_free_r+0x54>
 80075e4:	42a2      	cmp	r2, r4
 80075e6:	d9fa      	bls.n	80075de <_free_r+0x4a>
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	1858      	adds	r0, r3, r1
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d10b      	bne.n	8007608 <_free_r+0x74>
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	4401      	add	r1, r0
 80075f4:	1858      	adds	r0, r3, r1
 80075f6:	4282      	cmp	r2, r0
 80075f8:	6019      	str	r1, [r3, #0]
 80075fa:	d1dd      	bne.n	80075b8 <_free_r+0x24>
 80075fc:	6810      	ldr	r0, [r2, #0]
 80075fe:	6852      	ldr	r2, [r2, #4]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	4401      	add	r1, r0
 8007604:	6019      	str	r1, [r3, #0]
 8007606:	e7d7      	b.n	80075b8 <_free_r+0x24>
 8007608:	d902      	bls.n	8007610 <_free_r+0x7c>
 800760a:	230c      	movs	r3, #12
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	e7d3      	b.n	80075b8 <_free_r+0x24>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	1821      	adds	r1, r4, r0
 8007614:	428a      	cmp	r2, r1
 8007616:	bf04      	itt	eq
 8007618:	6811      	ldreq	r1, [r2, #0]
 800761a:	6852      	ldreq	r2, [r2, #4]
 800761c:	6062      	str	r2, [r4, #4]
 800761e:	bf04      	itt	eq
 8007620:	1809      	addeq	r1, r1, r0
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	605c      	str	r4, [r3, #4]
 8007626:	e7c7      	b.n	80075b8 <_free_r+0x24>
 8007628:	bd38      	pop	{r3, r4, r5, pc}
 800762a:	bf00      	nop
 800762c:	2000010c 	.word	0x2000010c

08007630 <_malloc_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	1ccd      	adds	r5, r1, #3
 8007634:	f025 0503 	bic.w	r5, r5, #3
 8007638:	3508      	adds	r5, #8
 800763a:	2d0c      	cmp	r5, #12
 800763c:	bf38      	it	cc
 800763e:	250c      	movcc	r5, #12
 8007640:	2d00      	cmp	r5, #0
 8007642:	4606      	mov	r6, r0
 8007644:	db01      	blt.n	800764a <_malloc_r+0x1a>
 8007646:	42a9      	cmp	r1, r5
 8007648:	d903      	bls.n	8007652 <_malloc_r+0x22>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	2000      	movs	r0, #0
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	f000 f87d 	bl	8007750 <__malloc_lock>
 8007656:	4a21      	ldr	r2, [pc, #132]	; (80076dc <_malloc_r+0xac>)
 8007658:	6814      	ldr	r4, [r2, #0]
 800765a:	4621      	mov	r1, r4
 800765c:	b991      	cbnz	r1, 8007684 <_malloc_r+0x54>
 800765e:	4c20      	ldr	r4, [pc, #128]	; (80076e0 <_malloc_r+0xb0>)
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	b91b      	cbnz	r3, 800766c <_malloc_r+0x3c>
 8007664:	4630      	mov	r0, r6
 8007666:	f000 f863 	bl	8007730 <_sbrk_r>
 800766a:	6020      	str	r0, [r4, #0]
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f000 f85e 	bl	8007730 <_sbrk_r>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d124      	bne.n	80076c2 <_malloc_r+0x92>
 8007678:	230c      	movs	r3, #12
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	4630      	mov	r0, r6
 800767e:	f000 f868 	bl	8007752 <__malloc_unlock>
 8007682:	e7e4      	b.n	800764e <_malloc_r+0x1e>
 8007684:	680b      	ldr	r3, [r1, #0]
 8007686:	1b5b      	subs	r3, r3, r5
 8007688:	d418      	bmi.n	80076bc <_malloc_r+0x8c>
 800768a:	2b0b      	cmp	r3, #11
 800768c:	d90f      	bls.n	80076ae <_malloc_r+0x7e>
 800768e:	600b      	str	r3, [r1, #0]
 8007690:	50cd      	str	r5, [r1, r3]
 8007692:	18cc      	adds	r4, r1, r3
 8007694:	4630      	mov	r0, r6
 8007696:	f000 f85c 	bl	8007752 <__malloc_unlock>
 800769a:	f104 000b 	add.w	r0, r4, #11
 800769e:	1d23      	adds	r3, r4, #4
 80076a0:	f020 0007 	bic.w	r0, r0, #7
 80076a4:	1ac3      	subs	r3, r0, r3
 80076a6:	d0d3      	beq.n	8007650 <_malloc_r+0x20>
 80076a8:	425a      	negs	r2, r3
 80076aa:	50e2      	str	r2, [r4, r3]
 80076ac:	e7d0      	b.n	8007650 <_malloc_r+0x20>
 80076ae:	428c      	cmp	r4, r1
 80076b0:	684b      	ldr	r3, [r1, #4]
 80076b2:	bf16      	itet	ne
 80076b4:	6063      	strne	r3, [r4, #4]
 80076b6:	6013      	streq	r3, [r2, #0]
 80076b8:	460c      	movne	r4, r1
 80076ba:	e7eb      	b.n	8007694 <_malloc_r+0x64>
 80076bc:	460c      	mov	r4, r1
 80076be:	6849      	ldr	r1, [r1, #4]
 80076c0:	e7cc      	b.n	800765c <_malloc_r+0x2c>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d005      	beq.n	80076d8 <_malloc_r+0xa8>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 f82e 	bl	8007730 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d0cf      	beq.n	8007678 <_malloc_r+0x48>
 80076d8:	6025      	str	r5, [r4, #0]
 80076da:	e7db      	b.n	8007694 <_malloc_r+0x64>
 80076dc:	2000010c 	.word	0x2000010c
 80076e0:	20000110 	.word	0x20000110

080076e4 <_realloc_r>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4607      	mov	r7, r0
 80076e8:	4614      	mov	r4, r2
 80076ea:	460e      	mov	r6, r1
 80076ec:	b921      	cbnz	r1, 80076f8 <_realloc_r+0x14>
 80076ee:	4611      	mov	r1, r2
 80076f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076f4:	f7ff bf9c 	b.w	8007630 <_malloc_r>
 80076f8:	b922      	cbnz	r2, 8007704 <_realloc_r+0x20>
 80076fa:	f7ff ff4b 	bl	8007594 <_free_r>
 80076fe:	4625      	mov	r5, r4
 8007700:	4628      	mov	r0, r5
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007704:	f000 f826 	bl	8007754 <_malloc_usable_size_r>
 8007708:	42a0      	cmp	r0, r4
 800770a:	d20f      	bcs.n	800772c <_realloc_r+0x48>
 800770c:	4621      	mov	r1, r4
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff ff8e 	bl	8007630 <_malloc_r>
 8007714:	4605      	mov	r5, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	d0f2      	beq.n	8007700 <_realloc_r+0x1c>
 800771a:	4631      	mov	r1, r6
 800771c:	4622      	mov	r2, r4
 800771e:	f7ff ff15 	bl	800754c <memcpy>
 8007722:	4631      	mov	r1, r6
 8007724:	4638      	mov	r0, r7
 8007726:	f7ff ff35 	bl	8007594 <_free_r>
 800772a:	e7e9      	b.n	8007700 <_realloc_r+0x1c>
 800772c:	4635      	mov	r5, r6
 800772e:	e7e7      	b.n	8007700 <_realloc_r+0x1c>

08007730 <_sbrk_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	4c06      	ldr	r4, [pc, #24]	; (800774c <_sbrk_r+0x1c>)
 8007734:	2300      	movs	r3, #0
 8007736:	4605      	mov	r5, r0
 8007738:	4608      	mov	r0, r1
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	f7fb fa96 	bl	8002c6c <_sbrk>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d102      	bne.n	800774a <_sbrk_r+0x1a>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	b103      	cbz	r3, 800774a <_sbrk_r+0x1a>
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	200014d8 	.word	0x200014d8

08007750 <__malloc_lock>:
 8007750:	4770      	bx	lr

08007752 <__malloc_unlock>:
 8007752:	4770      	bx	lr

08007754 <_malloc_usable_size_r>:
 8007754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007758:	1f18      	subs	r0, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfbc      	itt	lt
 800775e:	580b      	ldrlt	r3, [r1, r0]
 8007760:	18c0      	addlt	r0, r0, r3
 8007762:	4770      	bx	lr

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
>>>>>>> Stashed changes
