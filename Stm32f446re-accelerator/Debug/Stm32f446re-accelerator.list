
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009500  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080096d0  080096d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009830  08009830  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009838  08009838  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043bc  20000088  080098c8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004444  080098c8  00024444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b872  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003463  00000000  00000000  0003b92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003ed90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  00040198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000249a2  00000000  00000000  00041418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000111c4  00000000  00000000  00065dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d41d0  00000000  00000000  00076f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b14e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  0014b1cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096b8 	.word	0x080096b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080096b8 	.word	0x080096b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
 80005b8:	f001 fd36 	bl	8002028 <SPIWrite>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 fd2e 	bl	8002028 <SPIWrite>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 fd26 	bl	8002028 <SPIWrite>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 fd1e 	bl	8002028 <SPIWrite>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
 800060c:	f001 fd30 	bl	8002070 <BurstWrite>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08009744 	.word	0x08009744

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f001 fcfa 	bl	8002028 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f001 fcf6 	bl	8002028 <SPIWrite>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08009750 	.word	0x08009750

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
 800065c:	f001 fce4 	bl	8002028 <SPIWrite>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08009754 	.word	0x08009754

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
 8000680:	f001 fcd2 	bl	8002028 <SPIWrite>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08009758 	.word	0x08009758

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C);
	SPIWrite(LR_RegModemConfig1,0x8E);
 80006a2:	218e      	movs	r1, #142	; 0x8e
 80006a4:	201d      	movs	r0, #29
 80006a6:	f001 fcbf 	bl	8002028 <SPIWrite>
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
 80006c8:	f001 fcae 	bl	8002028 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
 80006d4:	f001 fca8 	bl	8002028 <SPIWrite>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f001 fc97 	bl	8002028 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f001 fc91 	bl	8002028 <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	460a      	mov	r2, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	b2da      	uxtb	r2, r3
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2040      	movs	r0, #64	; 0x40
 8000732:	f001 fc79 	bl	8002028 <SPIWrite>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000742:	21f7      	movs	r1, #247	; 0xf7
 8000744:	2011      	movs	r0, #17
 8000746:	f001 fc6f 	bl	8002028 <SPIWrite>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4619      	mov	r1, r3
 800075c:	2022      	movs	r0, #34	; 0x22
 800075e:	f001 fc63 	bl	8002028 <SPIWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
 800077a:	f001 fc55 	bl	8002028 <SPIWrite>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4619      	mov	r1, r3
 8000794:	200d      	movs	r0, #13
 8000796:	f001 fc47 	bl	8002028 <SPIWrite>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80007a6:	2183      	movs	r1, #131	; 0x83
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 fc3d 	bl	8002028 <SPIWrite>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fc53 	bl	8002070 <BurstWrite>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007d6:	f7ff fefb 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007da:	f7ff ff01 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff06 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff19 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff2c 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff3b 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	2007      	movs	r0, #7
 80007fc:	f7ff ff48 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000800:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000804:	2101      	movs	r1, #1
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ff53 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 800080c:	2008      	movs	r0, #8
 800080e:	f7ff ff67 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000812:	f7ff fed5 	bl	80005c0 <Rf96_Standby>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1(1,0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff74 	bl	800070e <Rf96_PinOut_Di0_Di1>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000826:	f7ff fec3 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082a:	f7ff ff88 	bl	800073e <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 800082e:	201b      	movs	r0, #27
 8000830:	f7ff ff8d 	bl	800074e <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	f7ff ff98 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ffa3 	bl	8000786 <Rf96_FIFO_point>

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffac 	bl	80007b2 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800085a:	f7ff ffa2 	bl	80007a2 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <PacketToRadio>:
uint8_t accelSelect[3][5] = {{0x68, 0x04, 0x32, 0x04, 0x3a},{0x68, 0x04, 0x64, 0x04, 0x6c},{0x68, 0x04, 0x96, 0x04, 0x9e}};

uint32_t countT=0;

void PacketToRadio(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e01c      	b.n	80008ae <PacketToRadio+0x46>
	{
		for(uint8_t i=0;i<9;i++)
 8000874:	2300      	movs	r3, #0
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	e013      	b.n	80008a2 <PacketToRadio+0x3a>
		   RadioBuff[i+j*9]=packageCut[j][i];
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	79b8      	ldrb	r0, [r7, #6]
 800087e:	79bc      	ldrb	r4, [r7, #6]
 8000880:	79f9      	ldrb	r1, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	18e1      	adds	r1, r4, r3
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <PacketToRadio+0x6c>)
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	4423      	add	r3, r4
 8000894:	4403      	add	r3, r0
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <PacketToRadio+0x70>)
 800089a:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<9;i++)
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	3301      	adds	r3, #1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d9e8      	bls.n	800087a <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3301      	adds	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d9df      	bls.n	8000874 <PacketToRadio+0xc>
	}
	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f7ff ff58 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	f7ff ff63 	bl	8000786 <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 80008c0:	f7ff fe76 	bl	80005b0 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 80008c4:	211b      	movs	r1, #27
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <PacketToRadio+0x70>)
 80008c8:	f7ff ffbc 	bl	8000844 <Rf96_LoRaTxPacket>

}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	200000d0 	.word	0x200000d0
 80008d8:	20003b1c 	.word	0x20003b1c

080008dc <transmit>:

void transmit(uint8_t* str, uint8_t* str2)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af08      	add	r7, sp, #32
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0;i<NumofPacket;i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	f000 bc50 	b.w	800118e <transmit+0x8b2>
	{


		        // первый акселерометр
			    // Ось Х
				xIntSumFirst = (str[1+8+i*36] & 0x0F) * 10 + (str[1+9+i*36] >> 4); // целочисленная сумма X
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	4613      	mov	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4413      	add	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	3309      	adds	r3, #9
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f003 020f 	and.w	r2, r3, #15
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4619      	mov	r1, r3
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	4613      	mov	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	330a      	adds	r3, #10
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	b2db      	uxtb	r3, r3
 8000928:	440b      	add	r3, r1
 800092a:	4ab6      	ldr	r2, [pc, #728]	; (8000c04 <transmit+0x328>)
 800092c:	6013      	str	r3, [r2, #0]
				x5First = str[1+9+i*36] & 0x0F; //перевод правого бита 5го байта
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	4613      	mov	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	330a      	adds	r3, #10
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	4ab0      	ldr	r2, [pc, #704]	; (8000c08 <transmit+0x32c>)
 8000948:	6013      	str	r3, [r2, #0]
				x60First = str[1+10+i*36] >> 4; //перевод левого бита 6го байта
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4613      	mov	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	330b      	adds	r3, #11
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4ba9      	ldr	r3, [pc, #676]	; (8000c0c <transmit+0x330>)
 8000966:	601a      	str	r2, [r3, #0]
				x65First = str[1+10+i*36] & 0x0F; //перевод правого бита 6го байта
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	330b      	adds	r3, #11
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	4aa3      	ldr	r2, [pc, #652]	; (8000c10 <transmit+0x334>)
 8000982:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d;",xIntSumFirst, x5First, x60First);
 8000984:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <transmit+0x328>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b9f      	ldr	r3, [pc, #636]	; (8000c08 <transmit+0x32c>)
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	4b9f      	ldr	r3, [pc, #636]	; (8000c0c <transmit+0x330>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	460b      	mov	r3, r1
 8000994:	499f      	ldr	r1, [pc, #636]	; (8000c14 <transmit+0x338>)
 8000996:	48a0      	ldr	r0, [pc, #640]	; (8000c18 <transmit+0x33c>)
 8000998:	f008 fa88 	bl	8008eac <siprintf>
				if((str[1+8+i*36] >> 4) == 0x01)
 800099c:	7bfa      	ldrb	r2, [r7, #15]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	3309      	adds	r3, #9
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d102      	bne.n	80009be <transmit+0xe2>
					xvalFirst[0] = '-';
 80009b8:	4b97      	ldr	r3, [pc, #604]	; (8000c18 <transmit+0x33c>)
 80009ba:	222d      	movs	r2, #45	; 0x2d
 80009bc:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[1+11+i*36] & 0x0F) * 10 + (str[1+12+i*36] >> 4);	// целочисленная сумма Y
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	4613      	mov	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	330c      	adds	r3, #12
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	f003 020f 	and.w	r2, r3, #15
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	4613      	mov	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	330d      	adds	r3, #13
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	440b      	add	r3, r1
 80009fa:	4a88      	ldr	r2, [pc, #544]	; (8000c1c <transmit+0x340>)
 80009fc:	6013      	str	r3, [r2, #0]
				y8First = str[1+12+i*36] & 0x0F; //перевод правого бита 8го байта
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	4613      	mov	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	330d      	adds	r3, #13
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	4a82      	ldr	r2, [pc, #520]	; (8000c20 <transmit+0x344>)
 8000a18:	6013      	str	r3, [r2, #0]
				y90First = str[1+13+i*36] >> 4; //перевод левого бита 9го байта
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	330e      	adds	r3, #14
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b7b      	ldr	r3, [pc, #492]	; (8000c24 <transmit+0x348>)
 8000a36:	601a      	str	r2, [r3, #0]
				y95First = str[1+13+i*36] & 0x0F; //перевод правого бита 9го байта
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	330e      	adds	r3, #14
 8000a44:	461a      	mov	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	4a75      	ldr	r2, [pc, #468]	; (8000c28 <transmit+0x34c>)
 8000a52:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d;", yIntSumFirst, y8First, y90First);
 8000a54:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <transmit+0x340>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b71      	ldr	r3, [pc, #452]	; (8000c20 <transmit+0x344>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b71      	ldr	r3, [pc, #452]	; (8000c24 <transmit+0x348>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	460b      	mov	r3, r1
 8000a64:	496b      	ldr	r1, [pc, #428]	; (8000c14 <transmit+0x338>)
 8000a66:	4871      	ldr	r0, [pc, #452]	; (8000c2c <transmit+0x350>)
 8000a68:	f008 fa20 	bl	8008eac <siprintf>
				if((str[1+11+i*36] >> 4) == 0x01)
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	330c      	adds	r3, #12
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d102      	bne.n	8000a8e <transmit+0x1b2>
					yvalFirst[0] = '-';
 8000a88:	4b68      	ldr	r3, [pc, #416]	; (8000c2c <transmit+0x350>)
 8000a8a:	222d      	movs	r2, #45	; 0x2d
 8000a8c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[1+14+i*36] & 0x0F) * 10 + (str[1+15+i*36] >> 4); //целочисленная сумма Z
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	330f      	adds	r3, #15
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 020f 	and.w	r2, r3, #15
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	7bfa      	ldrb	r2, [r7, #15]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	3310      	adds	r3, #16
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	440b      	add	r3, r1
 8000aca:	4a59      	ldr	r2, [pc, #356]	; (8000c30 <transmit+0x354>)
 8000acc:	6013      	str	r3, [r2, #0]
				z11First = str[1+15+i*36] & 0x0F; //перевод правого бита 11го байта
 8000ace:	7bfa      	ldrb	r2, [r7, #15]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	3310      	adds	r3, #16
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	4a53      	ldr	r2, [pc, #332]	; (8000c34 <transmit+0x358>)
 8000ae8:	6013      	str	r3, [r2, #0]
				z120First = str[1+16+i*36] >> 4; //перевод левого бита 12го байта
 8000aea:	7bfa      	ldrb	r2, [r7, #15]
 8000aec:	4613      	mov	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3311      	adds	r3, #17
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <transmit+0x35c>)
 8000b06:	601a      	str	r2, [r3, #0]
				z125First = str[1+16+i*36] & 0x0F; //перевод правого бита 12го байта
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	3311      	adds	r3, #17
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <transmit+0x360>)
 8000b22:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d;", zIntSumFirst, z11First, z120First);
 8000b24:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <transmit+0x354>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <transmit+0x358>)
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <transmit+0x35c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	460b      	mov	r3, r1
 8000b34:	4937      	ldr	r1, [pc, #220]	; (8000c14 <transmit+0x338>)
 8000b36:	4842      	ldr	r0, [pc, #264]	; (8000c40 <transmit+0x364>)
 8000b38:	f008 f9b8 	bl	8008eac <siprintf>
				if((str[1+14+i*36] >> 4) == 0x01)
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	330f      	adds	r3, #15
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d102      	bne.n	8000b5e <transmit+0x282>
					zvalFirst[0] = '-';
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <transmit+0x364>)
 8000b5a:	222d      	movs	r2, #45	; 0x2d
 8000b5c:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[1+17+i*36] & 0x0F) * 10 + (str[1+18+i*36] >> 4); // целочисленная сумма X
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	4613      	mov	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3312      	adds	r3, #18
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 020f 	and.w	r2, r3, #15
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3313      	adds	r3, #19
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	440b      	add	r3, r1
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <transmit+0x368>)
 8000b9c:	6013      	str	r3, [r2, #0]
				x5Second = str[1+18+i*36] & 0x0F; //перевод правого бита 5го байта
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	3313      	adds	r3, #19
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <transmit+0x36c>)
 8000bb8:	6013      	str	r3, [r2, #0]
				x60Second = str[1+19+i*36] >> 4; //перевод левого бита 6го байта
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <transmit+0x370>)
 8000bd6:	601a      	str	r2, [r3, #0]
				x65Second = str[1+19+i*36] & 0x0F; //перевод правого бита 6го байта
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	3314      	adds	r3, #20
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <transmit+0x374>)
 8000bf2:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d;",xIntSumSecond, x5Second, x60Second);
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <transmit+0x368>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <transmit+0x36c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <transmit+0x370>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	e028      	b.n	8000c54 <transmit+0x378>
 8000c02:	bf00      	nop
 8000c04:	20003d50 	.word	0x20003d50
 8000c08:	20003ab8 	.word	0x20003ab8
 8000c0c:	20003d40 	.word	0x20003d40
 8000c10:	20003ac4 	.word	0x20003ac4
 8000c14:	080096d0 	.word	0x080096d0
 8000c18:	200001d0 	.word	0x200001d0
 8000c1c:	20000964 	.word	0x20000964
 8000c20:	20000968 	.word	0x20000968
 8000c24:	20000590 	.word	0x20000590
 8000c28:	20000854 	.word	0x20000854
 8000c2c:	20000594 	.word	0x20000594
 8000c30:	20003b0c 	.word	0x20003b0c
 8000c34:	200007a4 	.word	0x200007a4
 8000c38:	200007a0 	.word	0x200007a0
 8000c3c:	20003ac0 	.word	0x20003ac0
 8000c40:	20003b14 	.word	0x20003b14
 8000c44:	20000960 	.word	0x20000960
 8000c48:	20003d44 	.word	0x20003d44
 8000c4c:	2000059c 	.word	0x2000059c
 8000c50:	2000095c 	.word	0x2000095c
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	460b      	mov	r3, r1
 8000c58:	49b9      	ldr	r1, [pc, #740]	; (8000f40 <transmit+0x664>)
 8000c5a:	48ba      	ldr	r0, [pc, #744]	; (8000f44 <transmit+0x668>)
 8000c5c:	f008 f926 	bl	8008eac <siprintf>
				if((str[1+17+i*36] >> 4) == 0x01)
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	3312      	adds	r3, #18
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d102      	bne.n	8000c82 <transmit+0x3a6>
					xvalSecond[0] = '-';
 8000c7c:	4bb1      	ldr	r3, [pc, #708]	; (8000f44 <transmit+0x668>)
 8000c7e:	222d      	movs	r2, #45	; 0x2d
 8000c80:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[1+20+i*36] & 0x0F) * 10 + (str[1+21+i*36] >> 4);	// целочисленная сумма Y
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3315      	adds	r3, #21
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f003 020f 	and.w	r2, r3, #15
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	3316      	adds	r3, #22
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	4aa2      	ldr	r2, [pc, #648]	; (8000f48 <transmit+0x66c>)
 8000cc0:	6013      	str	r3, [r2, #0]
				y8Second = str[1+21+i*36] & 0x0F; //перевод правого бита 8го байта
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	3316      	adds	r3, #22
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	4a9c      	ldr	r2, [pc, #624]	; (8000f4c <transmit+0x670>)
 8000cdc:	6013      	str	r3, [r2, #0]
				y90Second = str[1+22+i*36] >> 4; //перевод левого бита 9го байта
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3317      	adds	r3, #23
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <transmit+0x674>)
 8000cfa:	601a      	str	r2, [r3, #0]
				y95Second = str[1+22+i*36] & 0x0F; //перевод правого бита 9го байта
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3317      	adds	r3, #23
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	4a8f      	ldr	r2, [pc, #572]	; (8000f54 <transmit+0x678>)
 8000d16:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d;", yIntSumSecond, y8Second, y90Second);
 8000d18:	4b8b      	ldr	r3, [pc, #556]	; (8000f48 <transmit+0x66c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <transmit+0x670>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	4b8b      	ldr	r3, [pc, #556]	; (8000f50 <transmit+0x674>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	460b      	mov	r3, r1
 8000d28:	4985      	ldr	r1, [pc, #532]	; (8000f40 <transmit+0x664>)
 8000d2a:	488b      	ldr	r0, [pc, #556]	; (8000f58 <transmit+0x67c>)
 8000d2c:	f008 f8be 	bl	8008eac <siprintf>
				if((str[1+20+i*36] >> 4) == 0x01)
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4613      	mov	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3315      	adds	r3, #21
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d102      	bne.n	8000d52 <transmit+0x476>
					yvalSecond[0] = '-';
 8000d4c:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <transmit+0x67c>)
 8000d4e:	222d      	movs	r2, #45	; 0x2d
 8000d50:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[1+23+i*36] & 0x0F) * 10 + (str[1+24+i*36] >> 4); //целочисленная сумма Z
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f003 020f 	and.w	r2, r3, #15
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	4613      	mov	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	3319      	adds	r3, #25
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4a73      	ldr	r2, [pc, #460]	; (8000f5c <transmit+0x680>)
 8000d90:	6013      	str	r3, [r2, #0]
				z11Second = str[1+24+i*36] & 0x0F; //перевод правого бита 11го байта
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	4613      	mov	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3319      	adds	r3, #25
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	4a6d      	ldr	r2, [pc, #436]	; (8000f60 <transmit+0x684>)
 8000dac:	6013      	str	r3, [r2, #0]
				z120Second = str[1+25+i*36] >> 4; //перевод левого бита 12го байта
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	4613      	mov	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	331a      	adds	r3, #26
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <transmit+0x688>)
 8000dca:	601a      	str	r2, [r3, #0]
				z125Second = str[1+25+i*36] & 0x0F; //перевод правого бита 12го байта
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	331a      	adds	r3, #26
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <transmit+0x68c>)
 8000de6:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d;", zIntSumSecond, z11Second, z120Second);
 8000de8:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <transmit+0x680>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <transmit+0x684>)
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <transmit+0x688>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	460b      	mov	r3, r1
 8000df8:	4951      	ldr	r1, [pc, #324]	; (8000f40 <transmit+0x664>)
 8000dfa:	485c      	ldr	r0, [pc, #368]	; (8000f6c <transmit+0x690>)
 8000dfc:	f008 f856 	bl	8008eac <siprintf>
				if((str[1+23+i*36] >> 4) == 0x01)
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	4613      	mov	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d102      	bne.n	8000e22 <transmit+0x546>
					zvalSecond[0] = '-';
 8000e1c:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <transmit+0x690>)
 8000e1e:	222d      	movs	r2, #45	; 0x2d
 8000e20:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[1+26+i*36] & 0x0F) * 10 + (str[1+27+i*36] >> 4); // целочисленная сумма X
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	331b      	adds	r3, #27
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f003 020f 	and.w	r2, r3, #15
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	331c      	adds	r3, #28
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <transmit+0x694>)
 8000e60:	6013      	str	r3, [r2, #0]
				x5Third = str[1+27+i*36] & 0x0F; //перевод правого бита 5го байта
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	331c      	adds	r3, #28
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <transmit+0x698>)
 8000e7c:	6013      	str	r3, [r2, #0]
				x60Third = str[1+28+i*36] >> 4; //перевод левого бита 6го байта
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	4613      	mov	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	331d      	adds	r3, #29
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <transmit+0x69c>)
 8000e9a:	601a      	str	r2, [r3, #0]
				x65Third = str[1+28+i*36] & 0x0F; //перевод правого бита 6го байта
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	331d      	adds	r3, #29
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <transmit+0x6a0>)
 8000eb6:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d;",xIntSumThird, x5Third, x60Third);
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <transmit+0x694>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <transmit+0x698>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <transmit+0x69c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	491d      	ldr	r1, [pc, #116]	; (8000f40 <transmit+0x664>)
 8000eca:	482d      	ldr	r0, [pc, #180]	; (8000f80 <transmit+0x6a4>)
 8000ecc:	f007 ffee 	bl	8008eac <siprintf>
				if((str[1+26+i*36] >> 4) == 0x01)
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	331b      	adds	r3, #27
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <transmit+0x616>
					xvalThird[0] = '-';
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <transmit+0x6a4>)
 8000eee:	222d      	movs	r2, #45	; 0x2d
 8000ef0:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[1+29+i*36] & 0x0F) * 10 + (str[1+30+i*36] >> 4);	// целочисленная сумма Y
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	331e      	adds	r3, #30
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	f003 020f 	and.w	r2, r3, #15
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	4613      	mov	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	331f      	adds	r3, #31
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <transmit+0x6a8>)
 8000f30:	6013      	str	r3, [r2, #0]
				y8Third = str[1+30+i*36] & 0x0F; //перевод правого бита 8го байта
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	e024      	b.n	8000f88 <transmit+0x6ac>
 8000f3e:	bf00      	nop
 8000f40:	080096d0 	.word	0x080096d0
 8000f44:	20000154 	.word	0x20000154
 8000f48:	20000810 	.word	0x20000810
 8000f4c:	20003abc 	.word	0x20003abc
 8000f50:	20003c94 	.word	0x20003c94
 8000f54:	2000014c 	.word	0x2000014c
 8000f58:	20003aa4 	.word	0x20003aa4
 8000f5c:	20000148 	.word	0x20000148
 8000f60:	20003fc8 	.word	0x20003fc8
 8000f64:	200007a8 	.word	0x200007a8
 8000f68:	2000015c 	.word	0x2000015c
 8000f6c:	200007ac 	.word	0x200007ac
 8000f70:	20003fc4 	.word	0x20003fc4
 8000f74:	20000918 	.word	0x20000918
 8000f78:	20000588 	.word	0x20000588
 8000f7c:	20003aac 	.word	0x20003aac
 8000f80:	20003c98 	.word	0x20003c98
 8000f84:	20003b08 	.word	0x20003b08
 8000f88:	331f      	adds	r3, #31
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a82      	ldr	r2, [pc, #520]	; (80011a0 <transmit+0x8c4>)
 8000f98:	6013      	str	r3, [r2, #0]
				y90Third = str[1+31+i*36] >> 4; //перевод левого бита 9го байта
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3320      	adds	r3, #32
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <transmit+0x8c8>)
 8000fb6:	601a      	str	r2, [r3, #0]
				y95Third = str[1+31+i*36] & 0x0F; //перевод правого бита 9го байта
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	3320      	adds	r3, #32
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <transmit+0x8cc>)
 8000fd2:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d;", yIntSumThird, y8Third, y90Third);
 8000fd4:	4b75      	ldr	r3, [pc, #468]	; (80011ac <transmit+0x8d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <transmit+0x8c4>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <transmit+0x8c8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4972      	ldr	r1, [pc, #456]	; (80011b0 <transmit+0x8d4>)
 8000fe6:	4873      	ldr	r0, [pc, #460]	; (80011b4 <transmit+0x8d8>)
 8000fe8:	f007 ff60 	bl	8008eac <siprintf>
				if((str[1+29+i*36] >> 4) == 0x01)
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	331e      	adds	r3, #30
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <transmit+0x732>
					yvalThird[0] = '-';
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <transmit+0x8d8>)
 800100a:	222d      	movs	r2, #45	; 0x2d
 800100c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[1+32+i*36] & 0x0F) * 10 + (str[1+33+i*36] >> 4); //целочисленная сумма Z
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	3321      	adds	r3, #33	; 0x21
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 020f 	and.w	r2, r3, #15
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4619      	mov	r1, r3
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	3322      	adds	r3, #34	; 0x22
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	b2db      	uxtb	r3, r3
 8001048:	440b      	add	r3, r1
 800104a:	4a5b      	ldr	r2, [pc, #364]	; (80011b8 <transmit+0x8dc>)
 800104c:	6013      	str	r3, [r2, #0]
				z11Third = str[1+33+i*36] & 0x0F; //перевод правого бита 11го байта
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	3322      	adds	r3, #34	; 0x22
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <transmit+0x8e0>)
 8001068:	6013      	str	r3, [r2, #0]
				z120Third = str[1+34+i*36] >> 4; //перевод левого бита 12го байта
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	3323      	adds	r3, #35	; 0x23
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <transmit+0x8e4>)
 8001086:	601a      	str	r2, [r3, #0]
				z125Third = str[1+34+i*36] & 0x0F; //перевод правого бита 12го байта
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3323      	adds	r3, #35	; 0x23
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <transmit+0x8e8>)
 80010a2:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d;", zIntSumThird, z11Third, z120Third);
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <transmit+0x8dc>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <transmit+0x8e0>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <transmit+0x8e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	460b      	mov	r3, r1
 80010b4:	493e      	ldr	r1, [pc, #248]	; (80011b0 <transmit+0x8d4>)
 80010b6:	4844      	ldr	r0, [pc, #272]	; (80011c8 <transmit+0x8ec>)
 80010b8:	f007 fef8 	bl	8008eac <siprintf>
				if((str[1+32+i*36] >> 4) == 0x01)
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	3321      	adds	r3, #33	; 0x21
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <transmit+0x802>
					zvalThird[0] = '-';
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <transmit+0x8ec>)
 80010da:	222d      	movs	r2, #45	; 0x2d
 80010dc:	701a      	strb	r2, [r3, #0]


				for(uint8_t j=0;j<8;j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e019      	b.n	8001118 <transmit+0x83c>
				{

					str2[j+i*73]=str[j+i*36];
 80010e4:	7bb9      	ldrb	r1, [r7, #14]
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1899      	adds	r1, r3, r2
 80010f8:	7bb8      	ldrb	r0, [r7, #14]
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	4403      	add	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	780a      	ldrb	r2, [r1, #0]
 8001110:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	3301      	adds	r3, #1
 8001116:	73bb      	strb	r3, [r7, #14]
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d9e2      	bls.n	80010e4 <transmit+0x808>
				}
				for(uint8_t j=0;j<8;j++)
 800111e:	2300      	movs	r3, #0
 8001120:	737b      	strb	r3, [r7, #13]
 8001122:	e011      	b.n	8001148 <transmit+0x86c>
				{

					str2[j+8+i*73]=';';
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	f103 0108 	add.w	r1, r3, #8
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	440b      	add	r3, r1
 8001138:	461a      	mov	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	223b      	movs	r2, #59	; 0x3b
 8001140:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	3301      	adds	r3, #1
 8001146:	737b      	strb	r3, [r7, #13]
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d9ea      	bls.n	8001124 <transmit+0x848>
				}


				sprintf(&str2[1+8+i*73], "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	3309      	adds	r3, #9
 800115c:	461a      	mov	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	1898      	adds	r0, r3, r2
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <transmit+0x8ec>)
 8001164:	9306      	str	r3, [sp, #24]
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <transmit+0x8d8>)
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <transmit+0x8f0>)
 800116c:	9304      	str	r3, [sp, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <transmit+0x8f4>)
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <transmit+0x8f8>)
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <transmit+0x8fc>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <transmit+0x900>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <transmit+0x904>)
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <transmit+0x908>)
 8001182:	4919      	ldr	r1, [pc, #100]	; (80011e8 <transmit+0x90c>)
 8001184:	f007 fe92 	bl	8008eac <siprintf>
	for(uint8_t i=0;i<NumofPacket;i++)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b06      	cmp	r3, #6
 8001192:	f67f abac 	bls.w	80008ee <transmit+0x12>

	}

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000080c 	.word	0x2000080c
 80011a4:	20000168 	.word	0x20000168
 80011a8:	20000584 	.word	0x20000584
 80011ac:	20003b08 	.word	0x20003b08
 80011b0:	080096d0 	.word	0x080096d0
 80011b4:	20000160 	.word	0x20000160
 80011b8:	20003d48 	.word	0x20003d48
 80011bc:	2000016c 	.word	0x2000016c
 80011c0:	20003b3c 	.word	0x20003b3c
 80011c4:	2000058c 	.word	0x2000058c
 80011c8:	20003ab0 	.word	0x20003ab0
 80011cc:	20003c98 	.word	0x20003c98
 80011d0:	200007ac 	.word	0x200007ac
 80011d4:	20003aa4 	.word	0x20003aa4
 80011d8:	20000154 	.word	0x20000154
 80011dc:	20003b14 	.word	0x20003b14
 80011e0:	20000594 	.word	0x20000594
 80011e4:	200001d0 	.word	0x200001d0
 80011e8:	080096dc 	.word	0x080096dc

080011ec <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	82fb      	strh	r3, [r7, #22]
 8001206:	e01f      	b.n	8001248 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <uint32_TO_charmass+0x70>)
 800120c:	fba3 2301 	umull	r2, r3, r3, r1
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	1aca      	subs	r2, r1, r3
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	1e59      	subs	r1, r3, #1
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	1ac9      	subs	r1, r1, r3
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	440b      	add	r3, r1
 800122a:	4619      	mov	r1, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	440b      	add	r3, r1
 8001230:	3230      	adds	r2, #48	; 0x30
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <uint32_TO_charmass+0x70>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	3301      	adds	r3, #1
 8001246:	82fb      	strh	r3, [r7, #22]
 8001248:	8afa      	ldrh	r2, [r7, #22]
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3db      	bcc.n	8001208 <uint32_TO_charmass+0x1c>

	}
}
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	cccccccd 	.word	0xcccccccd

08001260 <SyncAccel>:


// Функция синхронизации

void SyncAccel(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	  // Синхронизация
	  if(readFlag==1)
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <SyncAccel+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d110      	bne.n	800128e <SyncAccel+0x2e>
	  {
		UsartCount=0;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <SyncAccel+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	  	readFlag=0;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <SyncAccel+0x88>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f002 f8f5 	bl	8003468 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 800127e:	481c      	ldr	r0, [pc, #112]	; (80012f0 <SyncAccel+0x90>)
 8001280:	f004 fce8 	bl	8005c54 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001284:	220e      	movs	r2, #14
 8001286:	491b      	ldr	r1, [pc, #108]	; (80012f4 <SyncAccel+0x94>)
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <SyncAccel+0x90>)
 800128a:	f004 fc63 	bl	8005b54 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag2==1)
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SyncAccel+0x98>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d110      	bne.n	80012b8 <SyncAccel+0x58>
	  {
		UsartCount=0;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <SyncAccel+0x8c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	  	readFlag2=0;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <SyncAccel+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f002 f8e0 	bl	8003468 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 80012a8:	4814      	ldr	r0, [pc, #80]	; (80012fc <SyncAccel+0x9c>)
 80012aa:	f004 fcd3 	bl	8005c54 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 80012ae:	220e      	movs	r2, #14
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <SyncAccel+0xa0>)
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <SyncAccel+0x9c>)
 80012b4:	f004 fc4e 	bl	8005b54 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag3==1)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <SyncAccel+0xa4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d110      	bne.n	80012e2 <SyncAccel+0x82>
	  {
		UsartCount=0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <SyncAccel+0x8c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	  	readFlag3=0;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <SyncAccel+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f002 f8cb 	bl	8003468 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <SyncAccel+0xa8>)
 80012d4:	f004 fcbe 	bl	8005c54 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 80012d8:	220e      	movs	r2, #14
 80012da:	490c      	ldr	r1, [pc, #48]	; (800130c <SyncAccel+0xac>)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <SyncAccel+0xa8>)
 80012de:	f004 fc39 	bl	8005b54 <HAL_UART_Receive_DMA>
	  }


}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20003b38 	.word	0x20003b38
 80012ec:	200000eb 	.word	0x200000eb
 80012f0:	200001d8 	.word	0x200001d8
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	20003b10 	.word	0x20003b10
 80012fc:	2000091c 	.word	0x2000091c
 8001300:	200000c0 	.word	0x200000c0
 8001304:	20000150 	.word	0x20000150
 8001308:	20000814 	.word	0x20000814
 800130c:	200000b2 	.word	0x200000b2

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f002 f835 	bl	8003384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f92b 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 fb85 	bl	8001a2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 fb3d 	bl	80019a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001326:	f000 f997 	bl	8001658 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800132a:	f000 fae5 	bl	80018f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800132e:	f000 fb0d 	bl	800194c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001332:	f000 fab7 	bl	80018a4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001336:	f005 fb63 	bl	8006a00 <MX_FATFS_Init>
  MX_SPI3_Init();
 800133a:	f000 f9c3 	bl	80016c4 <MX_SPI3_Init>
  MX_UART5_Init();
 800133e:	f000 fa87 	bl	8001850 <MX_UART5_Init>
  MX_TIM6_Init();
 8001342:	f000 f9f5 	bl	8001730 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001346:	f000 fa29 	bl	800179c <MX_TIM7_Init>
  MX_TIM10_Init();
 800134a:	f000 fa5d 	bl	8001808 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


    // Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 800134e:	f7ff fa40 	bl	80007d2 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8001352:	f7ff fa62 	bl	800081a <Rf96_Lora_TX_mode>

    // Запуск приема в дма с аксселерометров
    HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001356:	220e      	movs	r2, #14
 8001358:	496f      	ldr	r1, [pc, #444]	; (8001518 <main+0x208>)
 800135a:	4870      	ldr	r0, [pc, #448]	; (800151c <main+0x20c>)
 800135c:	f004 fbfa 	bl	8005b54 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001360:	220e      	movs	r2, #14
 8001362:	496f      	ldr	r1, [pc, #444]	; (8001520 <main+0x210>)
 8001364:	486f      	ldr	r0, [pc, #444]	; (8001524 <main+0x214>)
 8001366:	f004 fbf5 	bl	8005b54 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 800136a:	220e      	movs	r2, #14
 800136c:	496e      	ldr	r1, [pc, #440]	; (8001528 <main+0x218>)
 800136e:	486f      	ldr	r0, [pc, #444]	; (800152c <main+0x21c>)
 8001370:	f004 fbf0 	bl	8005b54 <HAL_UART_Receive_DMA>

    // Отправка первого нулевого пакета
	PacketToRadio();
 8001374:	f7ff fa78 	bl	8000868 <PacketToRadio>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	486c      	ldr	r0, [pc, #432]	; (8001530 <main+0x220>)
 800137e:	f002 ff5d 	bl	800423c <HAL_GPIO_WritePin>



	///ФЛЕШКА
	UINT bytesWrote;
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001382:	2201      	movs	r2, #1
 8001384:	496b      	ldr	r1, [pc, #428]	; (8001534 <main+0x224>)
 8001386:	486c      	ldr	r0, [pc, #432]	; (8001538 <main+0x228>)
 8001388:	f007 f8e0 	bl	800854c <f_mount>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <main+0x22c>)
 8001392:	701a      	strb	r2, [r3, #0]

	  if (fres != FR_OK) {
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <main+0x22c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d000      	beq.n	800139e <main+0x8e>
		while(1);
 800139c:	e7fe      	b.n	800139c <main+0x8c>
	  }
	  fres = f_open(&fil, "Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800139e:	220a      	movs	r2, #10
 80013a0:	4967      	ldr	r1, [pc, #412]	; (8001540 <main+0x230>)
 80013a2:	4868      	ldr	r0, [pc, #416]	; (8001544 <main+0x234>)
 80013a4:	f007 f918 	bl	80085d8 <f_open>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b63      	ldr	r3, [pc, #396]	; (800153c <main+0x22c>)
 80013ae:	701a      	strb	r2, [r3, #0]

    if(fres == FR_OK) {
 80013b0:	4b62      	ldr	r3, [pc, #392]	; (800153c <main+0x22c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d000      	beq.n	80013ba <main+0xaa>

    } else {
		while(1);
 80013b8:	e7fe      	b.n	80013b8 <main+0xa8>
    }
    HAL_TIM_Base_Start_IT(&htim6);
 80013ba:	4863      	ldr	r0, [pc, #396]	; (8001548 <main+0x238>)
 80013bc:	f004 f8cd 	bl	800555a <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 80013c0:	4862      	ldr	r0, [pc, #392]	; (800154c <main+0x23c>)
 80013c2:	f004 f8ca 	bl	800555a <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);
 80013c6:	4862      	ldr	r0, [pc, #392]	; (8001550 <main+0x240>)
 80013c8:	f004 f8c7 	bl	800555a <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 80013cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d0:	4857      	ldr	r0, [pc, #348]	; (8001530 <main+0x220>)
 80013d2:	f002 ff1b 	bl	800420c <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d110      	bne.n	80013fe <main+0xee>
	  {
		  //Close file, don't forget this!
		  //HAL_Delay(10);
		   f_close(&fil);
 80013dc:	4859      	ldr	r0, [pc, #356]	; (8001544 <main+0x234>)
 80013de:	f007 fcac 	bl	8008d3a <f_close>
		  // HAL_Delay(5);
		   //De-mount drive
		  f_mount(NULL, "", 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	4953      	ldr	r1, [pc, #332]	; (8001534 <main+0x224>)
 80013e6:	2000      	movs	r0, #0
 80013e8:	f007 f8b0 	bl	800854c <f_mount>
		  while(1)
		  {
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		  HAL_Delay(500);
 80013ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f0:	f002 f83a 	bl	8003468 <HAL_Delay>
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		  HAL_Delay(500);
 80013f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f8:	f002 f836 	bl	8003468 <HAL_Delay>
		  HAL_Delay(500);
 80013fc:	e7f6      	b.n	80013ec <main+0xdc>
		  }
	  }
	  // Синхронизация
	    SyncAccel();
 80013fe:	f7ff ff2f 	bl	8001260 <SyncAccel>

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 8001402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001406:	4853      	ldr	r0, [pc, #332]	; (8001554 <main+0x244>)
 8001408:	f002 ff00 	bl	800420c <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <main+0x106>
		{
			PacketToRadio();
 8001412:	f7ff fa29 	bl	8000868 <PacketToRadio>
		}

		// Запись на SD карту
		if(metka==1)
 8001416:	4b50      	ldr	r3, [pc, #320]	; (8001558 <main+0x248>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d1d6      	bne.n	80013cc <main+0xbc>
		{



			//HAL_UART_Transmit_IT(&huart2, "\n", 1);
			reciveTime2 = HAL_GetTick();
 800141e:	f002 f817 	bl	8003450 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	4b4d      	ldr	r3, [pc, #308]	; (800155c <main+0x24c>)
 8001426:	601a      	str	r2, [r3, #0]
			metka=0;
 8001428:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <main+0x248>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]


			if(z==0)
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <main+0x250>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11c      	bne.n	8001470 <main+0x160>
			{
				z=1;
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <main+0x250>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]

				memset(Buf_order,0,NumofPacket*36);
 800143c:	22fc      	movs	r2, #252	; 0xfc
 800143e:	2100      	movs	r1, #0
 8001440:	4848      	ldr	r0, [pc, #288]	; (8001564 <main+0x254>)
 8001442:	f007 fd2b 	bl	8008e9c <memset>
				for(uint8_t i=0;i<NumofPacket;i++)
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e00e      	b.n	800146a <main+0x15a>
				{
					uint32_TO_charmass(0, Buf_order, i*36, 8);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	00d2      	lsls	r2, r2, #3
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	b29a      	uxth	r2, r3
 800145a:	2308      	movs	r3, #8
 800145c:	4941      	ldr	r1, [pc, #260]	; (8001564 <main+0x254>)
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fec4 	bl	80011ec <uint32_TO_charmass>
				for(uint8_t i=0;i<NumofPacket;i++)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	3301      	adds	r3, #1
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b06      	cmp	r3, #6
 800146e:	d9ed      	bls.n	800144c <main+0x13c>
				}
			}
				transmit(&Buf_order[count_order_Point*252],Buff_str2);
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <main+0x258>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4613      	mov	r3, r2
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	461a      	mov	r2, r3
 8001480:	4b38      	ldr	r3, [pc, #224]	; (8001564 <main+0x254>)
 8001482:	4413      	add	r3, r2
 8001484:	4939      	ldr	r1, [pc, #228]	; (800156c <main+0x25c>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fa28 	bl	80008dc <transmit>
				count_order_Point++;
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <main+0x258>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b34      	ldr	r3, [pc, #208]	; (8001568 <main+0x258>)
 8001496:	701a      	strb	r2, [r3, #0]

				if(count_order_Point==NumOfOrder)
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <main+0x258>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b32      	cmp	r3, #50	; 0x32
 800149e:	d102      	bne.n	80014a6 <main+0x196>
				{
					count_order_Point=0;
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <main+0x258>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
				}

				Buff_str2[510]=';';
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <main+0x25c>)
 80014a8:	223b      	movs	r2, #59	; 0x3b
 80014aa:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str2[511]='\n';
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <main+0x25c>)
 80014b0:	220a      	movs	r2, #10
 80014b2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff


				// Запись на SD 2 буфера
				 fres = f_write(&fil, &Buff_str2, sizeof(Buff_str2), &bytesWrote);
 80014b6:	463b      	mov	r3, r7
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	492b      	ldr	r1, [pc, #172]	; (800156c <main+0x25c>)
 80014be:	4821      	ldr	r0, [pc, #132]	; (8001544 <main+0x234>)
 80014c0:	f007 fa48 	bl	8008954 <f_write>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <main+0x22c>)
 80014ca:	701a      	strb	r2, [r3, #0]
				 if (fres != FR_OK)
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <main+0x22c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00f      	beq.n	80014f4 <main+0x1e4>
				 {
					while(1)
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2102      	movs	r1, #2
 80014d8:	4815      	ldr	r0, [pc, #84]	; (8001530 <main+0x220>)
 80014da:	f002 feaf 	bl	800423c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2104      	movs	r1, #4
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <main+0x220>)
 80014e4:	f002 feaa 	bl	800423c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2108      	movs	r1, #8
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <main+0x220>)
 80014ee:	f002 fea5 	bl	800423c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014f2:	e7ef      	b.n	80014d4 <main+0x1c4>
					}
				 }
				 fres= f_sync(&fil);
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <main+0x234>)
 80014f6:	f007 fba2 	bl	8008c3e <f_sync>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <main+0x22c>)
 8001500:	701a      	strb	r2, [r3, #0]

				 reciveTime3 = HAL_GetTick();
 8001502:	f001 ffa5 	bl	8003450 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <main+0x260>)
 800150a:	601a      	str	r2, [r3, #0]
				 reciveTime3 = HAL_GetTick();
 800150c:	f001 ffa0 	bl	8003450 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <main+0x260>)
 8001514:	601a      	str	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 8001516:	e759      	b.n	80013cc <main+0xbc>
 8001518:	200000a4 	.word	0x200000a4
 800151c:	200001d8 	.word	0x200001d8
 8001520:	200000b2 	.word	0x200000b2
 8001524:	20000814 	.word	0x20000814
 8001528:	200000c0 	.word	0x200000c0
 800152c:	2000091c 	.word	0x2000091c
 8001530:	40020800 	.word	0x40020800
 8001534:	080096f0 	.word	0x080096f0
 8001538:	20000218 	.word	0x20000218
 800153c:	20003d4c 	.word	0x20003d4c
 8001540:	080096f4 	.word	0x080096f4
 8001544:	20003d54 	.word	0x20003d54
 8001548:	20003ac8 	.word	0x20003ac8
 800154c:	20003f84 	.word	0x20003f84
 8001550:	20000448 	.word	0x20000448
 8001554:	40020000 	.word	0x40020000
 8001558:	20000102 	.word	0x20000102
 800155c:	200000f8 	.word	0x200000f8
 8001560:	20000103 	.word	0x20000103
 8001564:	2000096c 	.word	0x2000096c
 8001568:	20000101 	.word	0x20000101
 800156c:	200005a0 	.word	0x200005a0
 8001570:	200000fc 	.word	0x200000fc

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	; 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2234      	movs	r2, #52	; 0x34
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f007 fc8a 	bl	8008e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <SystemClock_Config+0xdc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <SystemClock_Config+0xdc>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <SystemClock_Config+0xdc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <SystemClock_Config+0xe0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a25      	ldr	r2, [pc, #148]	; (8001654 <SystemClock_Config+0xe0>)
 80015be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <SystemClock_Config+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d8:	2310      	movs	r3, #16
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e4:	2308      	movs	r3, #8
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015e8:	23b4      	movs	r3, #180	; 0xb4
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 f941 	bl	8004884 <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001608:	f000 fcf4 	bl	8001ff4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800160c:	f002 fe30 	bl	8004270 <HAL_PWREx_EnableOverDrive>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001616:	f000 fced 	bl	8001ff4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	2302      	movs	r3, #2
 8001620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	2105      	movs	r1, #5
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fe69 	bl	8004310 <HAL_RCC_ClockConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001644:	f000 fcd6 	bl	8001ff4 <Error_Handler>
  }
}
 8001648:	bf00      	nop
 800164a:	3750      	adds	r7, #80	; 0x50
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000

08001658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_SPI1_Init+0x64>)
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <MX_SPI1_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_SPI1_Init+0x64>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_SPI1_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_SPI1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_SPI1_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_SPI1_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_SPI1_Init+0x64>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_SPI1_Init+0x64>)
 800168c:	2210      	movs	r2, #16
 800168e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_SPI1_Init+0x64>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_SPI1_Init+0x64>)
 80016aa:	f003 fb45 	bl	8004d38 <HAL_SPI_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b4:	f000 fc9e 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20003c3c 	.word	0x20003c3c
 80016c0:	40013000 	.word	0x40013000

080016c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_SPI3_Init+0x64>)
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <MX_SPI3_Init+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_SPI3_Init+0x64>)
 80016d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_SPI3_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_SPI3_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_SPI3_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_SPI3_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_SPI3_Init+0x64>)
 80016f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_SPI3_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_SPI3_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_SPI3_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_SPI3_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_SPI3_Init+0x64>)
 8001710:	220a      	movs	r2, #10
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_SPI3_Init+0x64>)
 8001716:	f003 fb0f 	bl	8004d38 <HAL_SPI_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001720:	f000 fc68 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200007b4 	.word	0x200007b4
 800172c:	40003c00 	.word	0x40003c00

08001730 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	463b      	mov	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_TIM6_Init+0x64>)
 8001740:	4a15      	ldr	r2, [pc, #84]	; (8001798 <MX_TIM6_Init+0x68>)
 8001742:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_TIM6_Init+0x64>)
 8001746:	f242 3227 	movw	r2, #8999	; 0x2327
 800174a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_TIM6_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_TIM6_Init+0x64>)
 8001754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001758:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_TIM6_Init+0x64>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <MX_TIM6_Init+0x64>)
 8001762:	f003 fecf 	bl	8005504 <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800176c:	f000 fc42 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_TIM6_Init+0x64>)
 800177e:	f004 f90b 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001788:	f000 fc34 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20003ac8 	.word	0x20003ac8
 8001798:	40001000 	.word	0x40001000

0800179c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_TIM7_Init+0x64>)
 80017ac:	4a15      	ldr	r2, [pc, #84]	; (8001804 <MX_TIM7_Init+0x68>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_TIM7_Init+0x64>)
 80017b2:	f242 3227 	movw	r2, #8999	; 0x2327
 80017b6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_TIM7_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_TIM7_Init+0x64>)
 80017c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_TIM7_Init+0x64>)
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_TIM7_Init+0x64>)
 80017ce:	f003 fe99 	bl	8005504 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017d8:	f000 fc0c 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_TIM7_Init+0x64>)
 80017ea:	f004 f8d5 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 fbfe 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20003f84 	.word	0x20003f84
 8001804:	40001400 	.word	0x40001400

08001808 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_TIM10_Init+0x40>)
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <MX_TIM10_Init+0x44>)
 8001810:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <MX_TIM10_Init+0x40>)
 8001814:	f242 3227 	movw	r2, #8999	; 0x2327
 8001818:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_TIM10_Init+0x40>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_TIM10_Init+0x40>)
 8001822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001826:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_TIM10_Init+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_TIM10_Init+0x40>)
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_TIM10_Init+0x40>)
 8001836:	f003 fe65 	bl	8005504 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001840:	f000 fbd8 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000448 	.word	0x20000448
 800184c:	40014400 	.word	0x40014400

08001850 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_UART5_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_UART5_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_UART5_Init+0x4c>)
 800185c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001860:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_UART5_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_UART5_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_UART5_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_UART5_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_UART5_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_UART5_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_UART5_Init+0x4c>)
 8001888:	f004 f916 	bl	8005ab8 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001892:	f000 fbaf 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000814 	.word	0x20000814
 80018a0:	40005000 	.word	0x40005000

080018a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_USART1_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80018b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018dc:	f004 f8ec 	bl	8005ab8 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f000 fb85 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000091c 	.word	0x2000091c
 80018f4:	40011000 	.word	0x40011000

080018f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <MX_USART2_UART_Init+0x50>)
 8001900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001904:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_USART2_UART_Init+0x4c>)
 8001930:	f004 f8c2 	bl	8005ab8 <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800193a:	f000 fb5b 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20003ca0 	.word	0x20003ca0
 8001948:	40004400 	.word	0x40004400

0800194c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_USART3_UART_Init+0x50>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001958:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_USART3_UART_Init+0x4c>)
 8001984:	f004 f898 	bl	8005ab8 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800198e:	f000 fb31 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001d8 	.word	0x200001d8
 800199c:	40004800 	.word	0x40004800

080019a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <MX_DMA_Init+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <MX_DMA_Init+0x88>)
 80019b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_DMA_Init+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_DMA_Init+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <MX_DMA_Init+0x88>)
 80019cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_DMA_Init+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	200b      	movs	r0, #11
 80019e4:	f001 fe3d 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019e8:	200b      	movs	r0, #11
 80019ea:	f001 fe56 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200c      	movs	r0, #12
 80019f4:	f001 fe35 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019f8:	200c      	movs	r0, #12
 80019fa:	f001 fe4e 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2011      	movs	r0, #17
 8001a04:	f001 fe2d 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f001 fe46 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	203a      	movs	r0, #58	; 0x3a
 8001a14:	f001 fe25 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a18:	203a      	movs	r0, #58	; 0x3a
 8001a1a:	f001 fe3e 	bl	800369a <HAL_NVIC_EnableIRQ>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a4a      	ldr	r2, [pc, #296]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001ab8:	4844      	ldr	r0, [pc, #272]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001aba:	f002 fbbf 	bl	800423c <HAL_GPIO_WritePin>
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	210e      	movs	r1, #14
 8001ac2:	4842      	ldr	r0, [pc, #264]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001ac4:	f002 fbba 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f248 0112 	movw	r1, #32786	; 0x8012
 8001ace:	4840      	ldr	r0, [pc, #256]	; (8001bd0 <MX_GPIO_Init+0x1a4>)
 8001ad0:	f002 fbb4 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f246 0142 	movw	r1, #24642	; 0x6042
 8001ada:	483e      	ldr	r0, [pc, #248]	; (8001bd4 <MX_GPIO_Init+0x1a8>)
 8001adc:	f002 fbae 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <MX_GPIO_Init+0x1ac>)
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4835      	ldr	r0, [pc, #212]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001af6:	f002 f9f7 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001afa:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001afe:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	482e      	ldr	r0, [pc, #184]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001b14:	f002 f9e8 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8001b18:	f240 4301 	movw	r3, #1025	; 0x401
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4828      	ldr	r0, [pc, #160]	; (8001bd0 <MX_GPIO_Init+0x1a4>)
 8001b2e:	f002 f9db 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001b32:	f248 0312 	movw	r3, #32786	; 0x8012
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4821      	ldr	r0, [pc, #132]	; (8001bd0 <MX_GPIO_Init+0x1a4>)
 8001b4c:	f002 f9cc 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b50:	2302      	movs	r3, #2
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	481b      	ldr	r0, [pc, #108]	; (8001bd4 <MX_GPIO_Init+0x1a8>)
 8001b68:	f002 f9be 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <MX_GPIO_Init+0x1a8>)
 8001b86:	f002 f9af 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8001b8a:	f244 0340 	movw	r3, #16448	; 0x4040
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_GPIO_Init+0x1a8>)
 8001ba4:	f002 f9a0 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ba8:	2338      	movs	r3, #56	; 0x38
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_GPIO_Init+0x1a8>)
 8001bbc:	f002 f994 	bl	8003ee8 <HAL_GPIO_Init>

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	10210000 	.word	0x10210000

08001bdc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]


if(huart==&huart3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4aa9      	ldr	r2, [pc, #676]	; (8001e8c <HAL_UART_RxCpltCallback+0x2b0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d12e      	bne.n	8001c4a <HAL_UART_RxCpltCallback+0x6e>
{
		HAL_TIM_Base_Stop_IT(&htim6);
 8001bec:	48a8      	ldr	r0, [pc, #672]	; (8001e90 <HAL_UART_RxCpltCallback+0x2b4>)
 8001bee:	f003 fcd8 	bl	80055a2 <HAL_TIM_Base_Stop_IT>
		TIM6->CNT=0;
 8001bf2:	4ba8      	ldr	r3, [pc, #672]	; (8001e94 <HAL_UART_RxCpltCallback+0x2b8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	48a6      	ldr	r0, [pc, #664]	; (8001e98 <HAL_UART_RxCpltCallback+0x2bc>)
 8001bfe:	f002 fb1d 	bl	800423c <HAL_GPIO_WritePin>
	if(package[0][0]!=0x68)
 8001c02:	4ba6      	ldr	r3, [pc, #664]	; (8001e9c <HAL_UART_RxCpltCallback+0x2c0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b68      	cmp	r3, #104	; 0x68
 8001c08:	d006      	beq.n	8001c18 <HAL_UART_RxCpltCallback+0x3c>
	{
		readFlag=1;
 8001c0a:	4ba5      	ldr	r3, [pc, #660]	; (8001ea0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001c10:	4ba4      	ldr	r3, [pc, #656]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e015      	b.n	8001c44 <HAL_UART_RxCpltCallback+0x68>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e009      	b.n	8001c32 <HAL_UART_RxCpltCallback+0x56>
		{
			packageCut[0][i]=package[0][i+4];
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	1d1a      	adds	r2, r3, #4
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	499d      	ldr	r1, [pc, #628]	; (8001e9c <HAL_UART_RxCpltCallback+0x2c0>)
 8001c26:	5c89      	ldrb	r1, [r1, r2]
 8001c28:	4a9f      	ldr	r2, [pc, #636]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001c2a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d9f2      	bls.n	8001c1e <HAL_UART_RxCpltCallback+0x42>
		}
		UsartCount++;
 8001c38:	4b9a      	ldr	r3, [pc, #616]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b98      	ldr	r3, [pc, #608]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001c42:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim6);
 8001c44:	4892      	ldr	r0, [pc, #584]	; (8001e90 <HAL_UART_RxCpltCallback+0x2b4>)
 8001c46:	f003 fc88 	bl	800555a <HAL_TIM_Base_Start_IT>
}
if(huart==&huart1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a97      	ldr	r2, [pc, #604]	; (8001eac <HAL_UART_RxCpltCallback+0x2d0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d131      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0xda>
{
	HAL_TIM_Base_Stop_IT(&htim7);
 8001c52:	4897      	ldr	r0, [pc, #604]	; (8001eb0 <HAL_UART_RxCpltCallback+0x2d4>)
 8001c54:	f003 fca5 	bl	80055a2 <HAL_TIM_Base_Stop_IT>
	TIM7->CNT=0;
 8001c58:	4b96      	ldr	r3, [pc, #600]	; (8001eb4 <HAL_UART_RxCpltCallback+0x2d8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2104      	movs	r1, #4
 8001c62:	488d      	ldr	r0, [pc, #564]	; (8001e98 <HAL_UART_RxCpltCallback+0x2bc>)
 8001c64:	f002 faea 	bl	800423c <HAL_GPIO_WritePin>
	if(package[2][0]!=0x68)
 8001c68:	4b8c      	ldr	r3, [pc, #560]	; (8001e9c <HAL_UART_RxCpltCallback+0x2c0>)
 8001c6a:	7f1b      	ldrb	r3, [r3, #28]
 8001c6c:	2b68      	cmp	r3, #104	; 0x68
 8001c6e:	d006      	beq.n	8001c7e <HAL_UART_RxCpltCallback+0xa2>
	{
		readFlag2=1;
 8001c70:	4b91      	ldr	r3, [pc, #580]	; (8001eb8 <HAL_UART_RxCpltCallback+0x2dc>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	e018      	b.n	8001cb0 <HAL_UART_RxCpltCallback+0xd4>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73bb      	strb	r3, [r7, #14]
 8001c82:	e00c      	b.n	8001c9e <HAL_UART_RxCpltCallback+0xc2>
		{
			packageCut[2][i]=package[2][i+4];
 8001c84:	7bbb      	ldrb	r3, [r7, #14]
 8001c86:	1d1a      	adds	r2, r3, #4
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	4984      	ldr	r1, [pc, #528]	; (8001e9c <HAL_UART_RxCpltCallback+0x2c0>)
 8001c8c:	440a      	add	r2, r1
 8001c8e:	7f11      	ldrb	r1, [r2, #28]
 8001c90:	4a85      	ldr	r2, [pc, #532]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001c92:	4413      	add	r3, r2
 8001c94:	460a      	mov	r2, r1
 8001c96:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 8001c98:	7bbb      	ldrb	r3, [r7, #14]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	73bb      	strb	r3, [r7, #14]
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d9ef      	bls.n	8001c84 <HAL_UART_RxCpltCallback+0xa8>
		}
		UsartCount++;
 8001ca4:	4b7f      	ldr	r3, [pc, #508]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	4b7d      	ldr	r3, [pc, #500]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001cae:	701a      	strb	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(&htim7);
 8001cb0:	487f      	ldr	r0, [pc, #508]	; (8001eb0 <HAL_UART_RxCpltCallback+0x2d4>)
 8001cb2:	f003 fc52 	bl	800555a <HAL_TIM_Base_Start_IT>

}

if(huart==&huart5)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a80      	ldr	r2, [pc, #512]	; (8001ebc <HAL_UART_RxCpltCallback+0x2e0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d131      	bne.n	8001d22 <HAL_UART_RxCpltCallback+0x146>
{
	HAL_TIM_Base_Stop_IT(&htim10);
 8001cbe:	4880      	ldr	r0, [pc, #512]	; (8001ec0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001cc0:	f003 fc6f 	bl	80055a2 <HAL_TIM_Base_Stop_IT>
	TIM10->CNT=0;
 8001cc4:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2108      	movs	r1, #8
 8001cce:	4872      	ldr	r0, [pc, #456]	; (8001e98 <HAL_UART_RxCpltCallback+0x2bc>)
 8001cd0:	f002 fab4 	bl	800423c <HAL_GPIO_WritePin>
	if(package[1][0]!=0x68)
 8001cd4:	4b71      	ldr	r3, [pc, #452]	; (8001e9c <HAL_UART_RxCpltCallback+0x2c0>)
 8001cd6:	7b9b      	ldrb	r3, [r3, #14]
 8001cd8:	2b68      	cmp	r3, #104	; 0x68
 8001cda:	d006      	beq.n	8001cea <HAL_UART_RxCpltCallback+0x10e>
	{
		readFlag3=1;
 8001cdc:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001ce2:	4b70      	ldr	r3, [pc, #448]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e018      	b.n	8001d1c <HAL_UART_RxCpltCallback+0x140>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	737b      	strb	r3, [r7, #13]
 8001cee:	e00c      	b.n	8001d0a <HAL_UART_RxCpltCallback+0x12e>
		{
			packageCut[1][i]=package[1][i+4];
 8001cf0:	7b7b      	ldrb	r3, [r7, #13]
 8001cf2:	1d1a      	adds	r2, r3, #4
 8001cf4:	7b7b      	ldrb	r3, [r7, #13]
 8001cf6:	4969      	ldr	r1, [pc, #420]	; (8001e9c <HAL_UART_RxCpltCallback+0x2c0>)
 8001cf8:	440a      	add	r2, r1
 8001cfa:	7b91      	ldrb	r1, [r2, #14]
 8001cfc:	4a6a      	ldr	r2, [pc, #424]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	460a      	mov	r2, r1
 8001d02:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	3301      	adds	r3, #1
 8001d08:	737b      	strb	r3, [r7, #13]
 8001d0a:	7b7b      	ldrb	r3, [r7, #13]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d9ef      	bls.n	8001cf0 <HAL_UART_RxCpltCallback+0x114>
		}
		UsartCount++;
 8001d10:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001d1a:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim10);
 8001d1c:	4868      	ldr	r0, [pc, #416]	; (8001ec0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001d1e:	f003 fc1c 	bl	800555a <HAL_TIM_Base_Start_IT>
}
if(UsartCount==3 && readFlag==0 && readFlag2==0 && readFlag3==0)  // Получено 1 измерение с каждого датчика
 8001d22:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	f040 80ab 	bne.w	8001e82 <HAL_UART_RxCpltCallback+0x2a6>
 8001d2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 80a6 	bne.w	8001e82 <HAL_UART_RxCpltCallback+0x2a6>
 8001d36:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 80a1 	bne.w	8001e82 <HAL_UART_RxCpltCallback+0x2a6>
 8001d40:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 809c 	bne.w	8001e82 <HAL_UART_RxCpltCallback+0x2a6>
{
	    UsartCount=0;
 8001d4a:	4b56      	ldr	r3, [pc, #344]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]


		reciveTime = HAL_GetTick();
 8001d50:	f001 fb7e 	bl	8003450 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_UART_RxCpltCallback+0x2f0>)
 8001d58:	601a      	str	r2, [r3, #0]

		uint32_TO_charmass(reciveTime, Buff_Top, CountOfAccel*36, 8);
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_UART_RxCpltCallback+0x2f0>)
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	00d2      	lsls	r2, r2, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	2308      	movs	r3, #8
 8001d70:	4958      	ldr	r1, [pc, #352]	; (8001ed4 <HAL_UART_RxCpltCallback+0x2f8>)
 8001d72:	f7ff fa3b 	bl	80011ec <uint32_TO_charmass>
		for(uint8_t i=0;i<9;i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	733b      	strb	r3, [r7, #12]
 8001d7a:	e012      	b.n	8001da2 <HAL_UART_RxCpltCallback+0x1c6>
		{
			Buff_Top[i+9+36*CountOfAccel]=packageCut[0][i];
 8001d7c:	7b3a      	ldrb	r2, [r7, #12]
 8001d7e:	7b3b      	ldrb	r3, [r7, #12]
 8001d80:	f103 0109 	add.w	r1, r3, #9
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4403      	add	r3, r0
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	4944      	ldr	r1, [pc, #272]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001d96:	5c89      	ldrb	r1, [r1, r2]
 8001d98:	4a4e      	ldr	r2, [pc, #312]	; (8001ed4 <HAL_UART_RxCpltCallback+0x2f8>)
 8001d9a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001d9c:	7b3b      	ldrb	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	733b      	strb	r3, [r7, #12]
 8001da2:	7b3b      	ldrb	r3, [r7, #12]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d9e9      	bls.n	8001d7c <HAL_UART_RxCpltCallback+0x1a0>

		}
		for(uint8_t i=0;i<9;i++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	72fb      	strb	r3, [r7, #11]
 8001dac:	e013      	b.n	8001dd6 <HAL_UART_RxCpltCallback+0x1fa>
		{
			Buff_Top[i+18+36*CountOfAccel]=packageCut[1][i];
 8001dae:	7afa      	ldrb	r2, [r7, #11]
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	f103 0112 	add.w	r1, r3, #18
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4403      	add	r3, r0
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	4938      	ldr	r1, [pc, #224]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001dc8:	440a      	add	r2, r1
 8001dca:	7a51      	ldrb	r1, [r2, #9]
 8001dcc:	4a41      	ldr	r2, [pc, #260]	; (8001ed4 <HAL_UART_RxCpltCallback+0x2f8>)
 8001dce:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	72fb      	strb	r3, [r7, #11]
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d9e8      	bls.n	8001dae <HAL_UART_RxCpltCallback+0x1d2>

		}
		for(uint8_t i=0;i<9;i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	72bb      	strb	r3, [r7, #10]
 8001de0:	e013      	b.n	8001e0a <HAL_UART_RxCpltCallback+0x22e>
		{
			Buff_Top[i+27+36*CountOfAccel]=packageCut[2][i];
 8001de2:	7aba      	ldrb	r2, [r7, #10]
 8001de4:	7abb      	ldrb	r3, [r7, #10]
 8001de6:	f103 011b 	add.w	r1, r3, #27
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4403      	add	r3, r0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	492b      	ldr	r1, [pc, #172]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001dfc:	440a      	add	r2, r1
 8001dfe:	7c91      	ldrb	r1, [r2, #18]
 8001e00:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_UART_RxCpltCallback+0x2f8>)
 8001e02:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001e04:	7abb      	ldrb	r3, [r7, #10]
 8001e06:	3301      	adds	r3, #1
 8001e08:	72bb      	strb	r3, [r7, #10]
 8001e0a:	7abb      	ldrb	r3, [r7, #10]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d9e8      	bls.n	8001de2 <HAL_UART_RxCpltCallback+0x206>

		}


		CountOfAccel++;
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e1a:	701a      	strb	r2, [r3, #0]


		if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b07      	cmp	r3, #7
 8001e22:	d12e      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0x2a6>
		{
			for(uint16_t i=0;i<252;i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	813b      	strh	r3, [r7, #8]
 8001e28:	e010      	b.n	8001e4c <HAL_UART_RxCpltCallback+0x270>
			{
				Buf_order[i+count_order*252]=Buff_Top[i];
 8001e2a:	893a      	ldrh	r2, [r7, #8]
 8001e2c:	8939      	ldrh	r1, [r7, #8]
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	019b      	lsls	r3, r3, #6
 8001e38:	1a1b      	subs	r3, r3, r0
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	4925      	ldr	r1, [pc, #148]	; (8001ed4 <HAL_UART_RxCpltCallback+0x2f8>)
 8001e40:	5c89      	ldrb	r1, [r1, r2]
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <HAL_UART_RxCpltCallback+0x300>)
 8001e44:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i=0;i<252;i++)
 8001e46:	893b      	ldrh	r3, [r7, #8]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	813b      	strh	r3, [r7, #8]
 8001e4c:	893b      	ldrh	r3, [r7, #8]
 8001e4e:	2bfb      	cmp	r3, #251	; 0xfb
 8001e50:	d9eb      	bls.n	8001e2a <HAL_UART_RxCpltCallback+0x24e>
			}
			count_order++;
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e5c:	701a      	strb	r2, [r3, #0]
			if(count_order==NumOfOrder)
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b32      	cmp	r3, #50	; 0x32
 8001e64:	d102      	bne.n	8001e6c <HAL_UART_RxCpltCallback+0x290>
			{
				count_order=0;
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]

			}

			CountOfAccel=0;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
			metka=1;
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_UART_RxCpltCallback+0x304>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			reciveTime1 = HAL_GetTick();
 8001e78:	f001 faea 	bl	8003450 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_UART_RxCpltCallback+0x308>)
 8001e80:	601a      	str	r2, [r3, #0]



}

}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200001d8 	.word	0x200001d8
 8001e90:	20003ac8 	.word	0x20003ac8
 8001e94:	40001000 	.word	0x40001000
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	200000a4 	.word	0x200000a4
 8001ea0:	20003b38 	.word	0x20003b38
 8001ea4:	200000eb 	.word	0x200000eb
 8001ea8:	200000d0 	.word	0x200000d0
 8001eac:	2000091c 	.word	0x2000091c
 8001eb0:	20003f84 	.word	0x20003f84
 8001eb4:	40001400 	.word	0x40001400
 8001eb8:	20003b10 	.word	0x20003b10
 8001ebc:	20000814 	.word	0x20000814
 8001ec0:	20000448 	.word	0x20000448
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	20000150 	.word	0x20000150
 8001ecc:	200000f0 	.word	0x200000f0
 8001ed0:	200000ec 	.word	0x200000ec
 8001ed4:	20003b40 	.word	0x20003b40
 8001ed8:	20000100 	.word	0x20000100
 8001edc:	2000096c 	.word	0x2000096c
 8001ee0:	20000102 	.word	0x20000102
 8001ee4:	200000f4 	.word	0x200000f4

08001ee8 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]


}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

	if(htim==&htim6)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d117      	bne.n	8001f3c <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		TIM6->CNT=0;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[0],0,9);
 8001f12:	2209      	movs	r2, #9
 8001f14:	2100      	movs	r1, #0
 8001f16:	4829      	ldr	r0, [pc, #164]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001f18:	f006 ffc0 	bl	8008e9c <memset>
		HAL_TIM_Base_Start_IT(&htim6);
 8001f1c:	4825      	ldr	r0, [pc, #148]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f1e:	f003 fb1c 	bl	800555a <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	2102      	movs	r1, #2
 8001f26:	4826      	ldr	r0, [pc, #152]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f28:	f002 f988 	bl	800423c <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart3);
 8001f2c:	4825      	ldr	r0, [pc, #148]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f2e:	f003 fe91 	bl	8005c54 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001f32:	220e      	movs	r2, #14
 8001f34:	4924      	ldr	r1, [pc, #144]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f36:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f38:	f003 fe0c 	bl	8005b54 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim7)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d117      	bne.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		TIM7->CNT=0;
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[2],0,9);
 8001f4a:	2209      	movs	r2, #9
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4821      	ldr	r0, [pc, #132]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f50:	f006 ffa4 	bl	8008e9c <memset>
		HAL_TIM_Base_Start_IT(&htim7);
 8001f54:	481d      	ldr	r0, [pc, #116]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f56:	f003 fb00 	bl	800555a <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f60:	f002 f96c 	bl	800423c <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart1);
 8001f64:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f66:	f003 fe75 	bl	8005c54 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8001f6a:	220e      	movs	r2, #14
 8001f6c:	491b      	ldr	r1, [pc, #108]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f6e:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f70:	f003 fdf0 	bl	8005b54 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim10)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d117      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		TIM10->CNT=0;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[1],0,9);
 8001f82:	2209      	movs	r2, #9
 8001f84:	2100      	movs	r1, #0
 8001f86:	4818      	ldr	r0, [pc, #96]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f88:	f006 ff88 	bl	8008e9c <memset>
		HAL_TIM_Base_Start_IT(&htim10);
 8001f8c:	4814      	ldr	r0, [pc, #80]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f8e:	f003 fae4 	bl	800555a <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	2108      	movs	r1, #8
 8001f96:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f98:	f002 f950 	bl	800423c <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart5);
 8001f9c:	4813      	ldr	r0, [pc, #76]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001f9e:	f003 fe59 	bl	8005c54 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001fa2:	220e      	movs	r2, #14
 8001fa4:	4912      	ldr	r1, [pc, #72]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001fa6:	4811      	ldr	r0, [pc, #68]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001fa8:	f003 fdd4 	bl	8005b54 <HAL_UART_Receive_DMA>
	}



}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20003ac8 	.word	0x20003ac8
 8001fb8:	40001000 	.word	0x40001000
 8001fbc:	200000d0 	.word	0x200000d0
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	200001d8 	.word	0x200001d8
 8001fc8:	200000a4 	.word	0x200000a4
 8001fcc:	20003f84 	.word	0x20003f84
 8001fd0:	40001400 	.word	0x40001400
 8001fd4:	200000e2 	.word	0x200000e2
 8001fd8:	2000091c 	.word	0x2000091c
 8001fdc:	200000c0 	.word	0x200000c0
 8001fe0:	20000448 	.word	0x20000448
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	200000d9 	.word	0x200000d9
 8001fec:	20000814 	.word	0x20000814
 8001ff0:	200000b2 	.word	0x200000b2

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800200e:	1df9      	adds	r1, r7, #7
 8002010:	230a      	movs	r3, #10
 8002012:	2201      	movs	r2, #1
 8002014:	4803      	ldr	r0, [pc, #12]	; (8002024 <SPICmd8bit+0x20>)
 8002016:	f002 fef3 	bl	8004e00 <HAL_SPI_Transmit>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20003c3c 	.word	0x20003c3c

08002028 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8002038:	2200      	movs	r2, #0
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	480b      	ldr	r0, [pc, #44]	; (800206c <SPIWrite+0x44>)
 800203e:	f002 f8fd 	bl	800423c <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ffda 	bl	8002004 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffd6 	bl	8002004 <SPICmd8bit>
	NSS_H();
 8002058:	2201      	movs	r2, #1
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <SPIWrite+0x44>)
 800205e:	f002 f8ed 	bl	800423c <HAL_GPIO_WritePin>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40020400 	.word	0x40020400

08002070 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d922      	bls.n	80020cc <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8002086:	2200      	movs	r2, #0
 8002088:	2140      	movs	r1, #64	; 0x40
 800208a:	4812      	ldr	r0, [pc, #72]	; (80020d4 <BurstWrite+0x64>)
 800208c:	f002 f8d6 	bl	800423c <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ffb3 	bl	8002004 <SPICmd8bit>
    for(i=0;i<length;i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e009      	b.n	80020b8 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ffa9 	bl	8002004 <SPICmd8bit>
    for(i=0;i<length;i++)
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	3301      	adds	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3f1      	bcc.n	80020a4 <BurstWrite+0x34>
    NSS_H();
 80020c0:	2201      	movs	r2, #1
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <BurstWrite+0x64>)
 80020c6:	f002 f8b9 	bl	800423c <HAL_GPIO_WritePin>
 80020ca:	e000      	b.n	80020ce <BurstWrite+0x5e>
    return;
 80020cc:	bf00      	nop
  }
}
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40020400 	.word	0x40020400

080020d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_MspInit+0x4c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_MspInit+0x4c>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_SPI_MspInit+0x148>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d12c      	bne.n	80021a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a48      	ldr	r2, [pc, #288]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 8002154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	4b42      	ldr	r3, [pc, #264]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a41      	ldr	r2, [pc, #260]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002182:	23e0      	movs	r3, #224	; 0xe0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002192:	2305      	movs	r3, #5
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4836      	ldr	r0, [pc, #216]	; (8002278 <HAL_SPI_MspInit+0x150>)
 800219e:	f001 fea3 	bl	8003ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021a2:	e060      	b.n	8002266 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a34      	ldr	r2, [pc, #208]	; (800227c <HAL_SPI_MspInit+0x154>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d15b      	bne.n	8002266 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b30      	ldr	r3, [pc, #192]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a28      	ldr	r2, [pc, #160]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a21      	ldr	r2, [pc, #132]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_SPI_MspInit+0x14c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002202:	2301      	movs	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800220a:	2301      	movs	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002212:	2307      	movs	r3, #7
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4818      	ldr	r0, [pc, #96]	; (8002280 <HAL_SPI_MspInit+0x158>)
 800221e:	f001 fe63 	bl	8003ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002234:	2306      	movs	r3, #6
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <HAL_SPI_MspInit+0x15c>)
 8002240:	f001 fe52 	bl	8003ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800224e:	2301      	movs	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002256:	2306      	movs	r3, #6
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4619      	mov	r1, r3
 8002260:	4808      	ldr	r0, [pc, #32]	; (8002284 <HAL_SPI_MspInit+0x15c>)
 8002262:	f001 fe41 	bl	8003ee8 <HAL_GPIO_Init>
}
 8002266:	bf00      	nop
 8002268:	3730      	adds	r7, #48	; 0x30
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40013000 	.word	0x40013000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000
 800227c:	40003c00 	.word	0x40003c00
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800

08002288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <HAL_TIM_Base_MspInit+0xb8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d116      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2036      	movs	r0, #54	; 0x36
 80022bc:	f001 f9d1 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022c0:	2036      	movs	r0, #54	; 0x36
 80022c2:	f001 f9ea 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80022c6:	e036      	b.n	8002336 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_TIM_Base_MspInit+0xc0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d116      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 80022dc:	f043 0320 	orr.w	r3, r3, #32
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2037      	movs	r0, #55	; 0x37
 80022f4:	f001 f9b5 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022f8:	2037      	movs	r0, #55	; 0x37
 80022fa:	f001 f9ce 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 80022fe:	e01a      	b.n	8002336 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_TIM_Base_MspInit+0xc4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d115      	bne.n	8002336 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_TIM_Base_MspInit+0xbc>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2019      	movs	r0, #25
 800232c:	f001 f999 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002330:	2019      	movs	r0, #25
 8002332:	f001 f9b2 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40001000 	.word	0x40001000
 8002344:	40023800 	.word	0x40023800
 8002348:	40001400 	.word	0x40001400
 800234c:	40014400 	.word	0x40014400

08002350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b092      	sub	sp, #72	; 0x48
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a87      	ldr	r2, [pc, #540]	; (800258c <HAL_UART_MspInit+0x23c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 8083 	bne.w	800247a <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
 8002378:	4b85      	ldr	r3, [pc, #532]	; (8002590 <HAL_UART_MspInit+0x240>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a84      	ldr	r2, [pc, #528]	; (8002590 <HAL_UART_MspInit+0x240>)
 800237e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
 8002384:	4b82      	ldr	r3, [pc, #520]	; (8002590 <HAL_UART_MspInit+0x240>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002394:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <HAL_UART_MspInit+0x240>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a7d      	ldr	r2, [pc, #500]	; (8002590 <HAL_UART_MspInit+0x240>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6313      	str	r3, [r2, #48]	; 0x30
 80023a0:	4b7b      	ldr	r3, [pc, #492]	; (8002590 <HAL_UART_MspInit+0x240>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b0:	4b77      	ldr	r3, [pc, #476]	; (8002590 <HAL_UART_MspInit+0x240>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a76      	ldr	r2, [pc, #472]	; (8002590 <HAL_UART_MspInit+0x240>)
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
 80023bc:	4b74      	ldr	r3, [pc, #464]	; (8002590 <HAL_UART_MspInit+0x240>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023da:	2308      	movs	r3, #8
 80023dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023e2:	4619      	mov	r1, r3
 80023e4:	486b      	ldr	r0, [pc, #428]	; (8002594 <HAL_UART_MspInit+0x244>)
 80023e6:	f001 fd7f 	bl	8003ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ea:	2304      	movs	r3, #4
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023fa:	2308      	movs	r3, #8
 80023fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002402:	4619      	mov	r1, r3
 8002404:	4864      	ldr	r0, [pc, #400]	; (8002598 <HAL_UART_MspInit+0x248>)
 8002406:	f001 fd6f 	bl	8003ee8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800240a:	4b64      	ldr	r3, [pc, #400]	; (800259c <HAL_UART_MspInit+0x24c>)
 800240c:	4a64      	ldr	r2, [pc, #400]	; (80025a0 <HAL_UART_MspInit+0x250>)
 800240e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002416:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_UART_MspInit+0x24c>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241e:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002424:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242c:	4b5b      	ldr	r3, [pc, #364]	; (800259c <HAL_UART_MspInit+0x24c>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002432:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002438:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_UART_MspInit+0x24c>)
 800243a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002440:	4b56      	ldr	r3, [pc, #344]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002446:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800244c:	4853      	ldr	r0, [pc, #332]	; (800259c <HAL_UART_MspInit+0x24c>)
 800244e:	f001 f93f 	bl	80036d0 <HAL_DMA_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002458:	f7ff fdcc 	bl	8001ff4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a4f      	ldr	r2, [pc, #316]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002460:	635a      	str	r2, [r3, #52]	; 0x34
 8002462:	4a4e      	ldr	r2, [pc, #312]	; (800259c <HAL_UART_MspInit+0x24c>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	2035      	movs	r0, #53	; 0x35
 800246e:	f001 f8f8 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002472:	2035      	movs	r0, #53	; 0x35
 8002474:	f001 f911 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002478:	e18e      	b.n	8002798 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a49      	ldr	r2, [pc, #292]	; (80025a4 <HAL_UART_MspInit+0x254>)
 8002480:	4293      	cmp	r3, r2
 8002482:	f040 8099 	bne.w	80025b8 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_UART_MspInit+0x240>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a40      	ldr	r2, [pc, #256]	; (8002590 <HAL_UART_MspInit+0x240>)
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_UART_MspInit+0x240>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <HAL_UART_MspInit+0x240>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a39      	ldr	r2, [pc, #228]	; (8002590 <HAL_UART_MspInit+0x240>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_UART_MspInit+0x240>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <HAL_UART_MspInit+0x240>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_UART_MspInit+0x240>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_UART_MspInit+0x240>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024ec:	2307      	movs	r3, #7
 80024ee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024f4:	4619      	mov	r1, r3
 80024f6:	482c      	ldr	r0, [pc, #176]	; (80025a8 <HAL_UART_MspInit+0x258>)
 80024f8:	f001 fcf6 	bl	8003ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800250c:	2307      	movs	r3, #7
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002514:	4619      	mov	r1, r3
 8002516:	4825      	ldr	r0, [pc, #148]	; (80025ac <HAL_UART_MspInit+0x25c>)
 8002518:	f001 fce6 	bl	8003ee8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_UART_MspInit+0x260>)
 800251e:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <HAL_UART_MspInit+0x264>)
 8002520:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002528:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_UART_MspInit+0x260>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_UART_MspInit+0x260>)
 800254c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002550:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_UART_MspInit+0x260>)
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002560:	f001 f8b6 	bl	80036d0 <HAL_DMA_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_UART_MspInit+0x21e>
      Error_Handler();
 800256a:	f7ff fd43 	bl	8001ff4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002572:	635a      	str	r2, [r3, #52]	; 0x34
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_UART_MspInit+0x260>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2025      	movs	r0, #37	; 0x25
 8002580:	f001 f86f 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002584:	2025      	movs	r0, #37	; 0x25
 8002586:	f001 f888 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 800258a:	e105      	b.n	8002798 <HAL_UART_MspInit+0x448>
 800258c:	40005000 	.word	0x40005000
 8002590:	40023800 	.word	0x40023800
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	20003ce0 	.word	0x20003ce0
 80025a0:	40026010 	.word	0x40026010
 80025a4:	40011000 	.word	0x40011000
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	20000858 	.word	0x20000858
 80025b4:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <HAL_UART_MspInit+0x450>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d162      	bne.n	8002688 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	4b77      	ldr	r3, [pc, #476]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a76      	ldr	r2, [pc, #472]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b74      	ldr	r3, [pc, #464]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a6f      	ldr	r2, [pc, #444]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025fa:	230c      	movs	r3, #12
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260a:	2307      	movs	r3, #7
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002612:	4619      	mov	r1, r3
 8002614:	4864      	ldr	r0, [pc, #400]	; (80027a8 <HAL_UART_MspInit+0x458>)
 8002616:	f001 fc67 	bl	8003ee8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800261a:	4b64      	ldr	r3, [pc, #400]	; (80027ac <HAL_UART_MspInit+0x45c>)
 800261c:	4a64      	ldr	r2, [pc, #400]	; (80027b0 <HAL_UART_MspInit+0x460>)
 800261e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002620:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_UART_MspInit+0x45c>)
 8002622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002626:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002628:	4b60      	ldr	r3, [pc, #384]	; (80027ac <HAL_UART_MspInit+0x45c>)
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_UART_MspInit+0x45c>)
 8002630:	2200      	movs	r2, #0
 8002632:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002634:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_UART_MspInit+0x45c>)
 8002636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263c:	4b5b      	ldr	r3, [pc, #364]	; (80027ac <HAL_UART_MspInit+0x45c>)
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002642:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <HAL_UART_MspInit+0x45c>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002648:	4b58      	ldr	r3, [pc, #352]	; (80027ac <HAL_UART_MspInit+0x45c>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800264e:	4b57      	ldr	r3, [pc, #348]	; (80027ac <HAL_UART_MspInit+0x45c>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002654:	4b55      	ldr	r3, [pc, #340]	; (80027ac <HAL_UART_MspInit+0x45c>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800265a:	4854      	ldr	r0, [pc, #336]	; (80027ac <HAL_UART_MspInit+0x45c>)
 800265c:	f001 f838 	bl	80036d0 <HAL_DMA_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002666:	f7ff fcc5 	bl	8001ff4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4f      	ldr	r2, [pc, #316]	; (80027ac <HAL_UART_MspInit+0x45c>)
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
 8002670:	4a4e      	ldr	r2, [pc, #312]	; (80027ac <HAL_UART_MspInit+0x45c>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2026      	movs	r0, #38	; 0x26
 800267c:	f000 fff1 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002680:	2026      	movs	r0, #38	; 0x26
 8002682:	f001 f80a 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 8002686:	e087      	b.n	8002798 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_UART_MspInit+0x464>)
 800268e:	4293      	cmp	r3, r2
 8002690:	f040 8082 	bne.w	8002798 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <HAL_UART_MspInit+0x454>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a41      	ldr	r2, [pc, #260]	; (80027a4 <HAL_UART_MspInit+0x454>)
 800269e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6313      	str	r3, [r2, #48]	; 0x30
 80026c0:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a33      	ldr	r2, [pc, #204]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_UART_MspInit+0x454>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026e8:	2320      	movs	r3, #32
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026f8:	2307      	movs	r3, #7
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002700:	4619      	mov	r1, r3
 8002702:	482d      	ldr	r0, [pc, #180]	; (80027b8 <HAL_UART_MspInit+0x468>)
 8002704:	f001 fbf0 	bl	8003ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800271a:	2307      	movs	r3, #7
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002722:	4619      	mov	r1, r3
 8002724:	4825      	ldr	r0, [pc, #148]	; (80027bc <HAL_UART_MspInit+0x46c>)
 8002726:	f001 fbdf 	bl	8003ee8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800272a:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_UART_MspInit+0x470>)
 800272c:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <HAL_UART_MspInit+0x474>)
 800272e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002736:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <HAL_UART_MspInit+0x470>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800274a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_UART_MspInit+0x470>)
 800274e:	2200      	movs	r2, #0
 8002750:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_UART_MspInit+0x470>)
 800275a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002762:	2200      	movs	r2, #0
 8002764:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002768:	2200      	movs	r2, #0
 800276a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800276c:	4814      	ldr	r0, [pc, #80]	; (80027c0 <HAL_UART_MspInit+0x470>)
 800276e:	f000 ffaf 	bl	80036d0 <HAL_DMA_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002778:	f7ff fc3c 	bl	8001ff4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002780:	635a      	str	r2, [r3, #52]	; 0x34
 8002782:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_UART_MspInit+0x470>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	2027      	movs	r0, #39	; 0x27
 800278e:	f000 ff68 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002792:	2027      	movs	r0, #39	; 0x27
 8002794:	f000 ff81 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 8002798:	bf00      	nop
 800279a:	3748      	adds	r7, #72	; 0x48
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40004400 	.word	0x40004400
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	200008b8 	.word	0x200008b8
 80027b0:	400260a0 	.word	0x400260a0
 80027b4:	40004800 	.word	0x40004800
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020400 	.word	0x40020400
 80027c0:	20000170 	.word	0x20000170
 80027c4:	40026028 	.word	0x40026028

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <MemManage_Handler+0x4>

080027e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <UsageFault_Handler+0x4>

080027ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281c:	f000 fe04 	bl	8003428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <DMA1_Stream0_IRQHandler+0x10>)
 800282a:	f001 f8e9 	bl	8003a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20003ce0 	.word	0x20003ce0

08002838 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <DMA1_Stream1_IRQHandler+0x10>)
 800283e:	f001 f8df 	bl	8003a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000170 	.word	0x20000170

0800284c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <DMA1_Stream6_IRQHandler+0x10>)
 8002852:	f001 f8d5 	bl	8003a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200008b8 	.word	0x200008b8

08002860 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002866:	f002 fec7 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000448 	.word	0x20000448

08002874 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <USART1_IRQHandler+0x10>)
 800287a:	f003 fa6d 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000091c 	.word	0x2000091c

08002888 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <USART2_IRQHandler+0x10>)
 800288e:	f003 fa63 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20003ca0 	.word	0x20003ca0

0800289c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <USART3_IRQHandler+0x10>)
 80028a2:	f003 fa59 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200001d8 	.word	0x200001d8

080028b0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <UART5_IRQHandler+0x10>)
 80028b6:	f003 fa4f 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000814 	.word	0x20000814

080028c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <TIM6_DAC_IRQHandler+0x10>)
 80028ca:	f002 fe95 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20003ac8 	.word	0x20003ac8

080028d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM7_IRQHandler+0x10>)
 80028de:	f002 fe8b 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20003f84 	.word	0x20003f84

080028ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <DMA2_Stream2_IRQHandler+0x10>)
 80028f2:	f001 f885 	bl	8003a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000858 	.word	0x20000858

08002900 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_sbrk+0x50>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <_sbrk+0x16>
		heap_end = &end;
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <_sbrk+0x50>)
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <_sbrk+0x54>)
 8002914:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <_sbrk+0x50>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <_sbrk+0x50>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	466a      	mov	r2, sp
 8002926:	4293      	cmp	r3, r2
 8002928:	d907      	bls.n	800293a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800292a:	f006 fa8d 	bl	8008e48 <__errno>
 800292e:	4602      	mov	r2, r0
 8002930:	230c      	movs	r3, #12
 8002932:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002938:	e006      	b.n	8002948 <_sbrk+0x48>
	}

	heap_end += incr;
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <_sbrk+0x50>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	4a03      	ldr	r2, [pc, #12]	; (8002950 <_sbrk+0x50>)
 8002944:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000104 	.word	0x20000104
 8002954:	20004448 	.word	0x20004448

08002958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <SystemInit+0x28>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <SystemInit+0x28>)
 8002964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <SystemInit+0x28>)
 800296e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002972:	609a      	str	r2, [r3, #8]
#endif
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800298c:	f000 fd60 	bl	8003450 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <SPI_Timer_On+0x20>)
 8002994:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <SPI_Timer_On+0x24>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20003fcc 	.word	0x20003fcc
 80029a8:	20003fd0 	.word	0x20003fd0

080029ac <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80029b0:	f000 fd4e 	bl	8003450 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <SPI_Timer_Status+0x24>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <SPI_Timer_Status+0x28>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	bf34      	ite	cc
 80029c4:	2301      	movcc	r3, #1
 80029c6:	2300      	movcs	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20003fcc 	.word	0x20003fcc
 80029d4:	20003fd0 	.word	0x20003fd0

080029d8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 80029e2:	f107 020f 	add.w	r2, r7, #15
 80029e6:	1df9      	adds	r1, r7, #7
 80029e8:	2332      	movs	r3, #50	; 0x32
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	4804      	ldr	r0, [pc, #16]	; (8002a00 <xchg_spi+0x28>)
 80029f0:	f002 fb3a 	bl	8005068 <HAL_SPI_TransmitReceive>
    return rxDat;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200007b4 	.word	0x200007b4

08002a04 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e00a      	b.n	8002a2a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	18d4      	adds	r4, r2, r3
 8002a1a:	20ff      	movs	r0, #255	; 0xff
 8002a1c:	f7ff ffdc 	bl	80029d8 <xchg_spi>
 8002a20:	4603      	mov	r3, r0
 8002a22:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d3f0      	bcc.n	8002a14 <rcvr_spi_multi+0x10>
	}
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd90      	pop	{r4, r7, pc}

08002a3a <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e009      	b.n	8002a5e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ffc0 	bl	80029d8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3f1      	bcc.n	8002a4a <xmit_spi_multi+0x10>
	}
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002a76:	f000 fceb 	bl	8003450 <HAL_GetTick>
 8002a7a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002a80:	20ff      	movs	r0, #255	; 0xff
 8002a82:	f7ff ffa9 	bl	80029d8 <xchg_spi>
 8002a86:	4603      	mov	r3, r0
 8002a88:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2bff      	cmp	r3, #255	; 0xff
 8002a8e:	d007      	beq.n	8002aa0 <wait_ready+0x32>
 8002a90:	f000 fcde 	bl	8003450 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d8ef      	bhi.n	8002a80 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2bff      	cmp	r3, #255	; 0xff
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002abe:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <despiselect+0x1c>)
 8002ac0:	f001 fbbc 	bl	800423c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002ac4:	20ff      	movs	r0, #255	; 0xff
 8002ac6:	f7ff ff87 	bl	80029d8 <xchg_spi>

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40020000 	.word	0x40020000

08002ad4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ade:	480a      	ldr	r0, [pc, #40]	; (8002b08 <spiselect+0x34>)
 8002ae0:	f001 fbac 	bl	800423c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002ae4:	20ff      	movs	r0, #255	; 0xff
 8002ae6:	f7ff ff77 	bl	80029d8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aee:	f7ff ffbe 	bl	8002a6e <wait_ready>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <spiselect+0x28>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e002      	b.n	8002b02 <spiselect+0x2e>

	despiselect();
 8002afc:	f7ff ffda 	bl	8002ab4 <despiselect>
	return 0;	/* Timeout */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40020000 	.word	0x40020000

08002b0c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002b16:	20c8      	movs	r0, #200	; 0xc8
 8002b18:	f7ff ff34 	bl	8002984 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002b1c:	20ff      	movs	r0, #255	; 0xff
 8002b1e:	f7ff ff5b 	bl	80029d8 <xchg_spi>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	2bff      	cmp	r3, #255	; 0xff
 8002b2a:	d104      	bne.n	8002b36 <rcvr_datablock+0x2a>
 8002b2c:	f7ff ff3e 	bl	80029ac <SPI_Timer_Status>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f2      	bne.n	8002b1c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2bfe      	cmp	r3, #254	; 0xfe
 8002b3a:	d001      	beq.n	8002b40 <rcvr_datablock+0x34>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e00a      	b.n	8002b56 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff5e 	bl	8002a04 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002b48:	20ff      	movs	r0, #255	; 0xff
 8002b4a:	f7ff ff45 	bl	80029d8 <xchg_spi>
 8002b4e:	20ff      	movs	r0, #255	; 0xff
 8002b50:	f7ff ff42 	bl	80029d8 <xchg_spi>

	return 1;						/* Function succeeded */
 8002b54:	2301      	movs	r3, #1
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b6e:	f7ff ff7e 	bl	8002a6e <wait_ready>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <xmit_datablock+0x1e>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e01e      	b.n	8002bba <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff2a 	bl	80029d8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	2bfd      	cmp	r3, #253	; 0xfd
 8002b88:	d016      	beq.n	8002bb8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff53 	bl	8002a3a <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002b94:	20ff      	movs	r0, #255	; 0xff
 8002b96:	f7ff ff1f 	bl	80029d8 <xchg_spi>
 8002b9a:	20ff      	movs	r0, #255	; 0xff
 8002b9c:	f7ff ff1c 	bl	80029d8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002ba0:	20ff      	movs	r0, #255	; 0xff
 8002ba2:	f7ff ff19 	bl	80029d8 <xchg_spi>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d001      	beq.n	8002bb8 <xmit_datablock+0x5a>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <xmit_datablock+0x5c>
	}
	return 1;
 8002bb8:	2301      	movs	r3, #1
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	6039      	str	r1, [r7, #0]
 8002bcc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0e      	bge.n	8002bf4 <send_cmd+0x32>
		cmd &= 0x7F;
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bdc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002bde:	2100      	movs	r1, #0
 8002be0:	2037      	movs	r0, #55	; 0x37
 8002be2:	f7ff ffee 	bl	8002bc2 <send_cmd>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d901      	bls.n	8002bf4 <send_cmd+0x32>
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	e051      	b.n	8002c98 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d008      	beq.n	8002c0c <send_cmd+0x4a>
		despiselect();
 8002bfa:	f7ff ff5b 	bl	8002ab4 <despiselect>
		if (!spiselect()) return 0xFF;
 8002bfe:	f7ff ff69 	bl	8002ad4 <spiselect>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <send_cmd+0x4a>
 8002c08:	23ff      	movs	r3, #255	; 0xff
 8002c0a:	e045      	b.n	8002c98 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fedf 	bl	80029d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	0e1b      	lsrs	r3, r3, #24
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fed9 	bl	80029d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fed3 	bl	80029d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fecd 	bl	80029d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fec8 	bl	80029d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <send_cmd+0x94>
 8002c52:	2395      	movs	r3, #149	; 0x95
 8002c54:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d101      	bne.n	8002c60 <send_cmd+0x9e>
 8002c5c:	2387      	movs	r3, #135	; 0x87
 8002c5e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff feb8 	bl	80029d8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d102      	bne.n	8002c74 <send_cmd+0xb2>
 8002c6e:	20ff      	movs	r0, #255	; 0xff
 8002c70:	f7ff feb2 	bl	80029d8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002c74:	230a      	movs	r3, #10
 8002c76:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002c78:	20ff      	movs	r0, #255	; 0xff
 8002c7a:	f7ff fead 	bl	80029d8 <xchg_spi>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da05      	bge.n	8002c96 <send_cmd+0xd4>
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <USER_SPI_initialize+0x14>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0cb      	b.n	8002e4c <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002cb4:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <USER_SPI_initialize+0x1b4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <USER_SPI_initialize+0x2a>
 8002cc2:	4b64      	ldr	r3, [pc, #400]	; (8002e54 <USER_SPI_initialize+0x1b4>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e0c0      	b.n	8002e4c <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <USER_SPI_initialize+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd2:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e005      	b.n	8002ce6 <USER_SPI_initialize+0x46>
 8002cda:	20ff      	movs	r0, #255	; 0xff
 8002cdc:	f7ff fe7c 	bl	80029d8 <xchg_spi>
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f6      	bne.n	8002cda <USER_SPI_initialize+0x3a>

	ty = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7ff ff65 	bl	8002bc2 <send_cmd>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	f040 808b 	bne.w	8002e16 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d04:	f7ff fe3e 	bl	8002984 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002d08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002d0c:	2008      	movs	r0, #8
 8002d0e:	f7ff ff58 	bl	8002bc2 <send_cmd>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d151      	bne.n	8002dbc <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e00d      	b.n	8002d3a <USER_SPI_initialize+0x9a>
 8002d1e:	7bfc      	ldrb	r4, [r7, #15]
 8002d20:	20ff      	movs	r0, #255	; 0xff
 8002d22:	f7ff fe59 	bl	80029d8 <xchg_spi>
 8002d26:	4603      	mov	r3, r0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4423      	add	r3, r4
 8002d30:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	3301      	adds	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d9ee      	bls.n	8002d1e <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002d40:	7abb      	ldrb	r3, [r7, #10]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d167      	bne.n	8002e16 <USER_SPI_initialize+0x176>
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	2baa      	cmp	r3, #170	; 0xaa
 8002d4a:	d164      	bne.n	8002e16 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002d4c:	bf00      	nop
 8002d4e:	f7ff fe2d 	bl	80029ac <SPI_Timer_Status>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <USER_SPI_initialize+0xc8>
 8002d58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d5c:	20a9      	movs	r0, #169	; 0xa9
 8002d5e:	f7ff ff30 	bl	8002bc2 <send_cmd>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f2      	bne.n	8002d4e <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002d68:	f7ff fe20 	bl	80029ac <SPI_Timer_Status>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d051      	beq.n	8002e16 <USER_SPI_initialize+0x176>
 8002d72:	2100      	movs	r1, #0
 8002d74:	203a      	movs	r0, #58	; 0x3a
 8002d76:	f7ff ff24 	bl	8002bc2 <send_cmd>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d14a      	bne.n	8002e16 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e00d      	b.n	8002da2 <USER_SPI_initialize+0x102>
 8002d86:	7bfc      	ldrb	r4, [r7, #15]
 8002d88:	20ff      	movs	r0, #255	; 0xff
 8002d8a:	f7ff fe25 	bl	80029d8 <xchg_spi>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	f107 0310 	add.w	r3, r7, #16
 8002d96:	4423      	add	r3, r4
 8002d98:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d9ee      	bls.n	8002d86 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002da8:	7a3b      	ldrb	r3, [r7, #8]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <USER_SPI_initialize+0x116>
 8002db2:	230c      	movs	r3, #12
 8002db4:	e000      	b.n	8002db8 <USER_SPI_initialize+0x118>
 8002db6:	2304      	movs	r3, #4
 8002db8:	737b      	strb	r3, [r7, #13]
 8002dba:	e02c      	b.n	8002e16 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	20a9      	movs	r0, #169	; 0xa9
 8002dc0:	f7ff feff 	bl	8002bc2 <send_cmd>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d804      	bhi.n	8002dd4 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002dca:	2302      	movs	r3, #2
 8002dcc:	737b      	strb	r3, [r7, #13]
 8002dce:	23a9      	movs	r3, #169	; 0xa9
 8002dd0:	73bb      	strb	r3, [r7, #14]
 8002dd2:	e003      	b.n	8002ddc <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	737b      	strb	r3, [r7, #13]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002ddc:	bf00      	nop
 8002dde:	f7ff fde5 	bl	80029ac <SPI_Timer_Status>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <USER_SPI_initialize+0x158>
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fee8 	bl	8002bc2 <send_cmd>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f2      	bne.n	8002dde <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002df8:	f7ff fdd8 	bl	80029ac <SPI_Timer_Status>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <USER_SPI_initialize+0x172>
 8002e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e06:	2010      	movs	r0, #16
 8002e08:	f7ff fedb 	bl	8002bc2 <send_cmd>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <USER_SPI_initialize+0x176>
				ty = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <USER_SPI_initialize+0x1bc>)
 8002e18:	7b7b      	ldrb	r3, [r7, #13]
 8002e1a:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002e1c:	f7ff fe4a 	bl	8002ab4 <despiselect>

	if (ty) {			/* OK */
 8002e20:	7b7b      	ldrb	r3, [r7, #13]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <USER_SPI_initialize+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <USER_SPI_initialize+0x1b4>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <USER_SPI_initialize+0x1b4>)
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e002      	b.n	8002e46 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <USER_SPI_initialize+0x1b4>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <USER_SPI_initialize+0x1b4>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd90      	pop	{r4, r7, pc}
 8002e54:	20000004 	.word	0x20000004
 8002e58:	200007b4 	.word	0x200007b4
 8002e5c:	20000108 	.word	0x20000108

08002e60 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <USER_SPI_status+0x14>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e002      	b.n	8002e7a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <USER_SPI_status+0x28>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000004 	.word	0x20000004

08002e8c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4603      	mov	r3, r0
 8002e9a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <USER_SPI_read+0x1c>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <USER_SPI_read+0x20>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	e04d      	b.n	8002f48 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <USER_SPI_read+0xc4>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <USER_SPI_read+0x32>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e044      	b.n	8002f48 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002ebe:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <USER_SPI_read+0xc8>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <USER_SPI_read+0x44>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	025b      	lsls	r3, r3, #9
 8002ece:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d111      	bne.n	8002efa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	2011      	movs	r0, #17
 8002eda:	f7ff fe72 	bl	8002bc2 <send_cmd>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d129      	bne.n	8002f38 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ee8:	68b8      	ldr	r0, [r7, #8]
 8002eea:	f7ff fe0f 	bl	8002b0c <rcvr_datablock>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <USER_SPI_read+0xac>
			count = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	e01e      	b.n	8002f38 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	2012      	movs	r0, #18
 8002efe:	f7ff fe60 	bl	8002bc2 <send_cmd>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d117      	bne.n	8002f38 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f0c:	68b8      	ldr	r0, [r7, #8]
 8002f0e:	f7ff fdfd 	bl	8002b0c <rcvr_datablock>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <USER_SPI_read+0xa2>
				buff += 512;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ed      	bne.n	8002f08 <USER_SPI_read+0x7c>
 8002f2c:	e000      	b.n	8002f30 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002f2e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002f30:	2100      	movs	r1, #0
 8002f32:	200c      	movs	r0, #12
 8002f34:	f7ff fe45 	bl	8002bc2 <send_cmd>
		}
	}
	despiselect();
 8002f38:	f7ff fdbc 	bl	8002ab4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bf14      	ite	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	2300      	moveq	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000004 	.word	0x20000004
 8002f54:	20000108 	.word	0x20000108

08002f58 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <USER_SPI_write+0x1c>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <USER_SPI_write+0x20>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e063      	b.n	8003040 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002f78:	4b33      	ldr	r3, [pc, #204]	; (8003048 <USER_SPI_write+0xf0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <USER_SPI_write+0x32>
 8002f86:	2303      	movs	r3, #3
 8002f88:	e05a      	b.n	8003040 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <USER_SPI_write+0xf0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <USER_SPI_write+0x44>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e051      	b.n	8003040 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <USER_SPI_write+0xf4>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <USER_SPI_write+0x56>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d110      	bne.n	8002fd6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	2018      	movs	r0, #24
 8002fb8:	f7ff fe03 	bl	8002bc2 <send_cmd>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d136      	bne.n	8003030 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002fc2:	21fe      	movs	r1, #254	; 0xfe
 8002fc4:	68b8      	ldr	r0, [r7, #8]
 8002fc6:	f7ff fdca 	bl	8002b5e <xmit_datablock>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02f      	beq.n	8003030 <USER_SPI_write+0xd8>
			count = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	e02c      	b.n	8003030 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <USER_SPI_write+0xf4>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	f003 0306 	and.w	r3, r3, #6
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <USER_SPI_write+0x92>
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	2097      	movs	r0, #151	; 0x97
 8002fe6:	f7ff fdec 	bl	8002bc2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	2019      	movs	r0, #25
 8002fee:	f7ff fde8 	bl	8002bc2 <send_cmd>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11b      	bne.n	8003030 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002ff8:	21fc      	movs	r1, #252	; 0xfc
 8002ffa:	68b8      	ldr	r0, [r7, #8]
 8002ffc:	f7ff fdaf 	bl	8002b5e <xmit_datablock>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <USER_SPI_write+0xc4>
				buff += 512;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800300c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	3b01      	subs	r3, #1
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ee      	bne.n	8002ff8 <USER_SPI_write+0xa0>
 800301a:	e000      	b.n	800301e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800301c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800301e:	21fd      	movs	r1, #253	; 0xfd
 8003020:	2000      	movs	r0, #0
 8003022:	f7ff fd9c 	bl	8002b5e <xmit_datablock>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <USER_SPI_write+0xd8>
 800302c:	2301      	movs	r3, #1
 800302e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003030:	f7ff fd40 	bl	8002ab4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000004 	.word	0x20000004
 800304c:	20000108 	.word	0x20000108

08003050 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	; 0x30
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	603a      	str	r2, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	460b      	mov	r3, r1
 800305e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <USER_SPI_ioctl+0x1a>
 8003066:	2304      	movs	r3, #4
 8003068:	e15a      	b.n	8003320 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800306a:	4baf      	ldr	r3, [pc, #700]	; (8003328 <USER_SPI_ioctl+0x2d8>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <USER_SPI_ioctl+0x2c>
 8003078:	2303      	movs	r3, #3
 800307a:	e151      	b.n	8003320 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003082:	79bb      	ldrb	r3, [r7, #6]
 8003084:	2b04      	cmp	r3, #4
 8003086:	f200 8136 	bhi.w	80032f6 <USER_SPI_ioctl+0x2a6>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <USER_SPI_ioctl+0x40>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030a5 	.word	0x080030a5
 8003094:	080030b9 	.word	0x080030b9
 8003098:	080032f7 	.word	0x080032f7
 800309c:	08003165 	.word	0x08003165
 80030a0:	0800325b 	.word	0x0800325b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80030a4:	f7ff fd16 	bl	8002ad4 <spiselect>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8127 	beq.w	80032fe <USER_SPI_ioctl+0x2ae>
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80030b6:	e122      	b.n	80032fe <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80030b8:	2100      	movs	r1, #0
 80030ba:	2009      	movs	r0, #9
 80030bc:	f7ff fd81 	bl	8002bc2 <send_cmd>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 811d 	bne.w	8003302 <USER_SPI_ioctl+0x2b2>
 80030c8:	f107 030c 	add.w	r3, r7, #12
 80030cc:	2110      	movs	r1, #16
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fd1c 	bl	8002b0c <rcvr_datablock>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8113 	beq.w	8003302 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80030dc:	7b3b      	ldrb	r3, [r7, #12]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d111      	bne.n	800310a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80030e6:	7d7b      	ldrb	r3, [r7, #21]
 80030e8:	461a      	mov	r2, r3
 80030ea:	7d3b      	ldrb	r3, [r7, #20]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	4413      	add	r3, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80030fa:	4413      	add	r3, r2
 80030fc:	3301      	adds	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	029a      	lsls	r2, r3, #10
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e028      	b.n	800315c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800310a:	7c7b      	ldrb	r3, [r7, #17]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	b2da      	uxtb	r2, r3
 8003112:	7dbb      	ldrb	r3, [r7, #22]
 8003114:	09db      	lsrs	r3, r3, #7
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4413      	add	r3, r2
 800311a:	b2da      	uxtb	r2, r3
 800311c:	7d7b      	ldrb	r3, [r7, #21]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 0306 	and.w	r3, r3, #6
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4413      	add	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3302      	adds	r3, #2
 800312e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003132:	7d3b      	ldrb	r3, [r7, #20]
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	441a      	add	r2, r3
 8003140:	7cbb      	ldrb	r3, [r7, #18]
 8003142:	029b      	lsls	r3, r3, #10
 8003144:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003148:	4413      	add	r3, r2
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800314e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003152:	3b09      	subs	r3, #9
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	409a      	lsls	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003162:	e0ce      	b.n	8003302 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003164:	4b71      	ldr	r3, [pc, #452]	; (800332c <USER_SPI_ioctl+0x2dc>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d031      	beq.n	80031d4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003170:	2100      	movs	r1, #0
 8003172:	208d      	movs	r0, #141	; 0x8d
 8003174:	f7ff fd25 	bl	8002bc2 <send_cmd>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 80c3 	bne.w	8003306 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003180:	20ff      	movs	r0, #255	; 0xff
 8003182:	f7ff fc29 	bl	80029d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003186:	f107 030c 	add.w	r3, r7, #12
 800318a:	2110      	movs	r1, #16
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fcbd 	bl	8002b0c <rcvr_datablock>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80b6 	beq.w	8003306 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800319a:	2330      	movs	r3, #48	; 0x30
 800319c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80031a0:	e007      	b.n	80031b2 <USER_SPI_ioctl+0x162>
 80031a2:	20ff      	movs	r0, #255	; 0xff
 80031a4:	f7ff fc18 	bl	80029d8 <xchg_spi>
 80031a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031ac:	3b01      	subs	r3, #1
 80031ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80031b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f3      	bne.n	80031a2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80031ba:	7dbb      	ldrb	r3, [r7, #22]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	2310      	movs	r3, #16
 80031c4:	fa03 f202 	lsl.w	r2, r3, r2
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80031d2:	e098      	b.n	8003306 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80031d4:	2100      	movs	r1, #0
 80031d6:	2009      	movs	r0, #9
 80031d8:	f7ff fcf3 	bl	8002bc2 <send_cmd>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8091 	bne.w	8003306 <USER_SPI_ioctl+0x2b6>
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	2110      	movs	r1, #16
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fc8e 	bl	8002b0c <rcvr_datablock>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8087 	beq.w	8003306 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80031f8:	4b4c      	ldr	r3, [pc, #304]	; (800332c <USER_SPI_ioctl+0x2dc>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d012      	beq.n	800322a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003204:	7dbb      	ldrb	r3, [r7, #22]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800320c:	7dfa      	ldrb	r2, [r7, #23]
 800320e:	09d2      	lsrs	r2, r2, #7
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	4413      	add	r3, r2
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	7e7b      	ldrb	r3, [r7, #25]
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	461a      	mov	r2, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e013      	b.n	8003252 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800322a:	7dbb      	ldrb	r3, [r7, #22]
 800322c:	109b      	asrs	r3, r3, #2
 800322e:	b29b      	uxth	r3, r3
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	3301      	adds	r3, #1
 8003236:	7dfa      	ldrb	r2, [r7, #23]
 8003238:	00d2      	lsls	r2, r2, #3
 800323a:	f002 0218 	and.w	r2, r2, #24
 800323e:	7df9      	ldrb	r1, [r7, #23]
 8003240:	0949      	lsrs	r1, r1, #5
 8003242:	b2c9      	uxtb	r1, r1
 8003244:	440a      	add	r2, r1
 8003246:	3201      	adds	r2, #1
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	461a      	mov	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003258:	e055      	b.n	8003306 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800325a:	4b34      	ldr	r3, [pc, #208]	; (800332c <USER_SPI_ioctl+0x2dc>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	f003 0306 	and.w	r3, r3, #6
 8003262:	2b00      	cmp	r3, #0
 8003264:	d051      	beq.n	800330a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003266:	f107 020c 	add.w	r2, r7, #12
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	210b      	movs	r1, #11
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff feee 	bl	8003050 <USER_SPI_ioctl>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d149      	bne.n	800330e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800327a:	7b3b      	ldrb	r3, [r7, #12]
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <USER_SPI_ioctl+0x23e>
 8003284:	7dbb      	ldrb	r3, [r7, #22]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d041      	beq.n	8003312 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <USER_SPI_ioctl+0x2dc>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	025b      	lsls	r3, r3, #9
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	025b      	lsls	r3, r3, #9
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80032b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b8:	2020      	movs	r0, #32
 80032ba:	f7ff fc82 	bl	8002bc2 <send_cmd>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d128      	bne.n	8003316 <USER_SPI_ioctl+0x2c6>
 80032c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c6:	2021      	movs	r0, #33	; 0x21
 80032c8:	f7ff fc7b 	bl	8002bc2 <send_cmd>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d121      	bne.n	8003316 <USER_SPI_ioctl+0x2c6>
 80032d2:	2100      	movs	r1, #0
 80032d4:	2026      	movs	r0, #38	; 0x26
 80032d6:	f7ff fc74 	bl	8002bc2 <send_cmd>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d11a      	bne.n	8003316 <USER_SPI_ioctl+0x2c6>
 80032e0:	f247 5030 	movw	r0, #30000	; 0x7530
 80032e4:	f7ff fbc3 	bl	8002a6e <wait_ready>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d013      	beq.n	8003316 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80032f4:	e00f      	b.n	8003316 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80032f6:	2304      	movs	r3, #4
 80032f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032fc:	e00c      	b.n	8003318 <USER_SPI_ioctl+0x2c8>
		break;
 80032fe:	bf00      	nop
 8003300:	e00a      	b.n	8003318 <USER_SPI_ioctl+0x2c8>
		break;
 8003302:	bf00      	nop
 8003304:	e008      	b.n	8003318 <USER_SPI_ioctl+0x2c8>
		break;
 8003306:	bf00      	nop
 8003308:	e006      	b.n	8003318 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800330a:	bf00      	nop
 800330c:	e004      	b.n	8003318 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <USER_SPI_ioctl+0x2c8>
		break;
 8003316:	bf00      	nop
	}

	despiselect();
 8003318:	f7ff fbcc 	bl	8002ab4 <despiselect>

	return res;
 800331c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003320:	4618      	mov	r0, r3
 8003322:	3730      	adds	r7, #48	; 0x30
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000004 	.word	0x20000004
 800332c:	20000108 	.word	0x20000108

08003330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003336:	e003      	b.n	8003340 <LoopCopyDataInit>

08003338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800333a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800333c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800333e:	3104      	adds	r1, #4

08003340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003348:	d3f6      	bcc.n	8003338 <CopyDataInit>
  ldr  r2, =_sbss
 800334a:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800334c:	e002      	b.n	8003354 <LoopFillZerobss>

0800334e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800334e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003350:	f842 3b04 	str.w	r3, [r2], #4

08003354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003358:	d3f9      	bcc.n	800334e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800335a:	f7ff fafd 	bl	8002958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800335e:	f005 fd79 	bl	8008e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003362:	f7fd ffd5 	bl	8001310 <main>
  bx  lr    
 8003366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003368:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800336c:	08009840 	.word	0x08009840
  ldr  r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003374:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8003378:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800337c:	20004444 	.word	0x20004444

08003380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003380:	e7fe      	b.n	8003380 <ADC_IRQHandler>
	...

08003384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_Init+0x40>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <HAL_Init+0x40>)
 800338e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_Init+0x40>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_Init+0x40>)
 800339a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_Init+0x40>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <HAL_Init+0x40>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ac:	2003      	movs	r0, #3
 80033ae:	f000 f94d 	bl	800364c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f000 f808 	bl	80033c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b8:	f7fe fe8e 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00

080033c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_InitTick+0x54>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_InitTick+0x58>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	4619      	mov	r1, r3
 80033da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033de:	fbb3 f3f1 	udiv	r3, r3, r1
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f965 	bl	80036b6 <HAL_SYSTICK_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e00e      	b.n	8003414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b0f      	cmp	r3, #15
 80033fa:	d80a      	bhi.n	8003412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033fc:	2200      	movs	r2, #0
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003404:	f000 f92d 	bl	8003662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <HAL_InitTick+0x5c>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000000 	.word	0x20000000
 8003420:	2000000c 	.word	0x2000000c
 8003424:	20000008 	.word	0x20000008

08003428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_IncTick+0x20>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_IncTick+0x24>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4413      	add	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_IncTick+0x24>)
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000000c 	.word	0x2000000c
 800344c:	20003fd4 	.word	0x20003fd4

08003450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return uwTick;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_GetTick+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20003fd4 	.word	0x20003fd4

08003468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff ffee 	bl	8003450 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003480:	d005      	beq.n	800348e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_Delay+0x40>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800348e:	bf00      	nop
 8003490:	f7ff ffde 	bl	8003450 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8f7      	bhi.n	8003490 <HAL_Delay+0x28>
  {
  }
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	2000000c 	.word	0x2000000c

080034ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <__NVIC_GetPriorityGrouping+0x18>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0307 	and.w	r3, r3, #7
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0b      	blt.n	800353a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4907      	ldr	r1, [pc, #28]	; (8003548 <__NVIC_EnableIRQ+0x38>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000e100 	.word	0xe000e100

0800354c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	2b00      	cmp	r3, #0
 800355e:	db0a      	blt.n	8003576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	490c      	ldr	r1, [pc, #48]	; (8003598 <__NVIC_SetPriority+0x4c>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	440b      	add	r3, r1
 8003570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003574:	e00a      	b.n	800358c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4908      	ldr	r1, [pc, #32]	; (800359c <__NVIC_SetPriority+0x50>)
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	3b04      	subs	r3, #4
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	440b      	add	r3, r1
 800358a:	761a      	strb	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000e100 	.word	0xe000e100
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f1c3 0307 	rsb	r3, r3, #7
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf28      	it	cs
 80035be:	2304      	movcs	r3, #4
 80035c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d902      	bls.n	80035d0 <NVIC_EncodePriority+0x30>
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3b03      	subs	r3, #3
 80035ce:	e000      	b.n	80035d2 <NVIC_EncodePriority+0x32>
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	401a      	ands	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43d9      	mvns	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	4313      	orrs	r3, r2
         );
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	; 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003618:	d301      	bcc.n	800361e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361a:	2301      	movs	r3, #1
 800361c:	e00f      	b.n	800363e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <SysTick_Config+0x40>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003626:	210f      	movs	r1, #15
 8003628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800362c:	f7ff ff8e 	bl	800354c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <SysTick_Config+0x40>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003636:	4b04      	ldr	r3, [pc, #16]	; (8003648 <SysTick_Config+0x40>)
 8003638:	2207      	movs	r2, #7
 800363a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000e010 	.word	0xe000e010

0800364c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff29 	bl	80034ac <__NVIC_SetPriorityGrouping>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003674:	f7ff ff3e 	bl	80034f4 <__NVIC_GetPriorityGrouping>
 8003678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff8e 	bl	80035a0 <NVIC_EncodePriority>
 8003684:	4602      	mov	r2, r0
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5d 	bl	800354c <__NVIC_SetPriority>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff31 	bl	8003510 <__NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffa2 	bl	8003608 <SysTick_Config>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7ff feb8 	bl	8003450 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e099      	b.n	8003820 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370c:	e00f      	b.n	800372e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800370e:	f7ff fe9f 	bl	8003450 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b05      	cmp	r3, #5
 800371a:	d908      	bls.n	800372e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e078      	b.n	8003820 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e8      	bne.n	800370e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4b38      	ldr	r3, [pc, #224]	; (8003828 <HAL_DMA_Init+0x158>)
 8003748:	4013      	ands	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2b04      	cmp	r3, #4
 8003786:	d107      	bne.n	8003798 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4313      	orrs	r3, r2
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0307 	bic.w	r3, r3, #7
 80037ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d117      	bne.n	80037f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb0d 	bl	8003df4 <DMA_CheckFifoParam>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ee:	2301      	movs	r3, #1
 80037f0:	e016      	b.n	8003820 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fac4 	bl	8003d88 <DMA_CalcBaseAndBitshift>
 8003800:	4603      	mov	r3, r0
 8003802:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	223f      	movs	r2, #63	; 0x3f
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	f010803f 	.word	0xf010803f

0800382c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_DMA_Start_IT+0x26>
 800384e:	2302      	movs	r3, #2
 8003850:	e040      	b.n	80038d4 <HAL_DMA_Start_IT+0xa8>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d12f      	bne.n	80038c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fa56 	bl	8003d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	223f      	movs	r2, #63	; 0x3f
 8003886:	409a      	lsls	r2, r3
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0216 	orr.w	r2, r2, #22
 800389a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0208 	orr.w	r2, r2, #8
 80038b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e005      	b.n	80038d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
 80038d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038ea:	f7ff fdb1 	bl	8003450 <HAL_GetTick>
 80038ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d008      	beq.n	800390e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e052      	b.n	80039b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0216 	bic.w	r2, r2, #22
 800391c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800392c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_DMA_Abort+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0208 	bic.w	r2, r2, #8
 800394c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395e:	e013      	b.n	8003988 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003960:	f7ff fd76 	bl	8003450 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b05      	cmp	r3, #5
 800396c:	d90c      	bls.n	8003988 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2203      	movs	r2, #3
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e015      	b.n	80039b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e4      	bne.n	8003960 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	223f      	movs	r2, #63	; 0x3f
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d004      	beq.n	80039da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00c      	b.n	80039f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2205      	movs	r2, #5
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a0c:	4b92      	ldr	r3, [pc, #584]	; (8003c58 <HAL_DMA_IRQHandler+0x258>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a92      	ldr	r2, [pc, #584]	; (8003c5c <HAL_DMA_IRQHandler+0x25c>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0a9b      	lsrs	r3, r3, #10
 8003a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01a      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2208      	movs	r2, #8
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2201      	movs	r2, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d012      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2201      	movs	r2, #1
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	2210      	movs	r2, #16
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d043      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03c      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	2210      	movs	r2, #16
 8003afc:	409a      	lsls	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d108      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d024      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
 8003b2e:	e01f      	b.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
 8003b40:	e016      	b.n	8003b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0208 	bic.w	r2, r2, #8
 8003b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	2220      	movs	r2, #32
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 808e 	beq.w	8003c9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8086 	beq.w	8003c9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2220      	movs	r2, #32
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d136      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0216 	bic.w	r2, r2, #22
 8003bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <HAL_DMA_IRQHandler+0x1da>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0208 	bic.w	r2, r2, #8
 8003be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	223f      	movs	r2, #63	; 0x3f
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d07d      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
        }
        return;
 8003c16:	e078      	b.n	8003d0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01c      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d030      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
 8003c44:	e02b      	b.n	8003c9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d027      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	e022      	b.n	8003c9e <HAL_DMA_IRQHandler+0x29e>
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10f      	bne.n	8003c8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0210 	bic.w	r2, r2, #16
 8003c7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d032      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d022      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2205      	movs	r2, #5
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d307      	bcc.n	8003ce6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f2      	bne.n	8003cca <HAL_DMA_IRQHandler+0x2ca>
 8003ce4:	e000      	b.n	8003ce8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ce6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
 8003d08:	e000      	b.n	8003d0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d0a:	bf00      	nop
    }
  }
}
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop

08003d14 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d108      	bne.n	8003d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d6a:	e007      	b.n	8003d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	60da      	str	r2, [r3, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	3b10      	subs	r3, #16
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <DMA_CalcBaseAndBitshift+0x64>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003da2:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <DMA_CalcBaseAndBitshift+0x68>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d909      	bls.n	8003dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8003dc8:	e007      	b.n	8003dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	aaaaaaab 	.word	0xaaaaaaab
 8003df0:	08009774 	.word	0x08009774

08003df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11f      	bne.n	8003e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d855      	bhi.n	8003ec0 <DMA_CheckFifoParam+0xcc>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <DMA_CheckFifoParam+0x28>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e2d 	.word	0x08003e2d
 8003e20:	08003e3f 	.word	0x08003e3f
 8003e24:	08003e2d 	.word	0x08003e2d
 8003e28:	08003ec1 	.word	0x08003ec1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d045      	beq.n	8003ec4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3c:	e042      	b.n	8003ec4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e46:	d13f      	bne.n	8003ec8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e03c      	b.n	8003ec8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e56:	d121      	bne.n	8003e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d836      	bhi.n	8003ecc <DMA_CheckFifoParam+0xd8>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <DMA_CheckFifoParam+0x70>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e7b 	.word	0x08003e7b
 8003e6c:	08003e75 	.word	0x08003e75
 8003e70:	08003e8d 	.word	0x08003e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e02f      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d024      	beq.n	8003ed0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8a:	e021      	b.n	8003ed0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e94:	d11e      	bne.n	8003ed4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e9a:	e01b      	b.n	8003ed4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <DMA_CheckFifoParam+0xb4>
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d003      	beq.n	8003eae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ea6:	e018      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003eac:	e015      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebe:	e00b      	b.n	8003ed8 <DMA_CheckFifoParam+0xe4>
      break;
 8003ec0:	bf00      	nop
 8003ec2:	e00a      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      break;
 8003ec4:	bf00      	nop
 8003ec6:	e008      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      break;
 8003ec8:	bf00      	nop
 8003eca:	e006      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      break;
 8003ecc:	bf00      	nop
 8003ece:	e004      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      break;
 8003ed0:	bf00      	nop
 8003ed2:	e002      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      break;   
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <DMA_CheckFifoParam+0xe6>
      break;
 8003ed8:	bf00      	nop
    }
  } 
  
  return status; 
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e165      	b.n	80041d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f04:	2201      	movs	r2, #1
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	f040 8154 	bne.w	80041ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d00b      	beq.n	8003f42 <HAL_GPIO_Init+0x5a>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d007      	beq.n	8003f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f36:	2b11      	cmp	r3, #17
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b12      	cmp	r3, #18
 8003f40:	d130      	bne.n	8003fa4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 0201 	and.w	r2, r3, #1
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0xfc>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b12      	cmp	r3, #18
 8003fe2:	d123      	bne.n	800402c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	08da      	lsrs	r2, r3, #3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3208      	adds	r2, #8
 8003fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	220f      	movs	r2, #15
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	08da      	lsrs	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3208      	adds	r2, #8
 8004026:	69b9      	ldr	r1, [r7, #24]
 8004028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2203      	movs	r2, #3
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0203 	and.w	r2, r3, #3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80ae 	beq.w	80041ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <HAL_GPIO_Init+0x2fc>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	4a5b      	ldr	r2, [pc, #364]	; (80041e4 <HAL_GPIO_Init+0x2fc>)
 8004078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800407c:	6453      	str	r3, [r2, #68]	; 0x44
 800407e:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_GPIO_Init+0x2fc>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800408a:	4a57      	ldr	r2, [pc, #348]	; (80041e8 <HAL_GPIO_Init+0x300>)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	089b      	lsrs	r3, r3, #2
 8004090:	3302      	adds	r3, #2
 8004092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	220f      	movs	r2, #15
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4e      	ldr	r2, [pc, #312]	; (80041ec <HAL_GPIO_Init+0x304>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d025      	beq.n	8004102 <HAL_GPIO_Init+0x21a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a4d      	ldr	r2, [pc, #308]	; (80041f0 <HAL_GPIO_Init+0x308>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <HAL_GPIO_Init+0x216>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <HAL_GPIO_Init+0x30c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d019      	beq.n	80040fa <HAL_GPIO_Init+0x212>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a4b      	ldr	r2, [pc, #300]	; (80041f8 <HAL_GPIO_Init+0x310>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_GPIO_Init+0x20e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a4a      	ldr	r2, [pc, #296]	; (80041fc <HAL_GPIO_Init+0x314>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00d      	beq.n	80040f2 <HAL_GPIO_Init+0x20a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a49      	ldr	r2, [pc, #292]	; (8004200 <HAL_GPIO_Init+0x318>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_GPIO_Init+0x206>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a48      	ldr	r2, [pc, #288]	; (8004204 <HAL_GPIO_Init+0x31c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_Init+0x202>
 80040e6:	2306      	movs	r3, #6
 80040e8:	e00c      	b.n	8004104 <HAL_GPIO_Init+0x21c>
 80040ea:	2307      	movs	r3, #7
 80040ec:	e00a      	b.n	8004104 <HAL_GPIO_Init+0x21c>
 80040ee:	2305      	movs	r3, #5
 80040f0:	e008      	b.n	8004104 <HAL_GPIO_Init+0x21c>
 80040f2:	2304      	movs	r3, #4
 80040f4:	e006      	b.n	8004104 <HAL_GPIO_Init+0x21c>
 80040f6:	2303      	movs	r3, #3
 80040f8:	e004      	b.n	8004104 <HAL_GPIO_Init+0x21c>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e002      	b.n	8004104 <HAL_GPIO_Init+0x21c>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <HAL_GPIO_Init+0x21c>
 8004102:	2300      	movs	r3, #0
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	f002 0203 	and.w	r2, r2, #3
 800410a:	0092      	lsls	r2, r2, #2
 800410c:	4093      	lsls	r3, r2
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004114:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_GPIO_Init+0x300>)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	3302      	adds	r3, #2
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_GPIO_Init+0x320>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004146:	4a30      	ldr	r2, [pc, #192]	; (8004208 <HAL_GPIO_Init+0x320>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800414c:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_GPIO_Init+0x320>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004170:	4a25      	ldr	r2, [pc, #148]	; (8004208 <HAL_GPIO_Init+0x320>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004176:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_GPIO_Init+0x320>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419a:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_GPIO_Init+0x320>)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_GPIO_Init+0x320>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c4:	4a10      	ldr	r2, [pc, #64]	; (8004208 <HAL_GPIO_Init+0x320>)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	f67f ae96 	bls.w	8003f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041d8:	bf00      	nop
 80041da:	3724      	adds	r7, #36	; 0x24
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40013800 	.word	0x40013800
 80041ec:	40020000 	.word	0x40020000
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40020800 	.word	0x40020800
 80041f8:	40020c00 	.word	0x40020c00
 80041fc:	40021000 	.word	0x40021000
 8004200:	40021400 	.word	0x40021400
 8004204:	40021800 	.word	0x40021800
 8004208:	40013c00 	.word	0x40013c00

0800420c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e001      	b.n	800422e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
 8004248:	4613      	mov	r3, r2
 800424a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800424c:	787b      	ldrb	r3, [r7, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004258:	e003      	b.n	8004262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800425a:	887b      	ldrh	r3, [r7, #2]
 800425c:	041a      	lsls	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	619a      	str	r2, [r3, #24]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_PWREx_EnableOverDrive+0x90>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_PWREx_EnableOverDrive+0x90>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_PWREx_EnableOverDrive+0x90>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_PWREx_EnableOverDrive+0x94>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800429c:	f7ff f8d8 	bl	8003450 <HAL_GetTick>
 80042a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042a2:	e009      	b.n	80042b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042a4:	f7ff f8d4 	bl	8003450 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042b2:	d901      	bls.n	80042b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e01f      	b.n	80042f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <HAL_PWREx_EnableOverDrive+0x98>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c4:	d1ee      	bne.n	80042a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042cc:	f7ff f8c0 	bl	8003450 <HAL_GetTick>
 80042d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042d2:	e009      	b.n	80042e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d4:	f7ff f8bc 	bl	8003450 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e2:	d901      	bls.n	80042e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e007      	b.n	80042f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_PWREx_EnableOverDrive+0x98>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f4:	d1ee      	bne.n	80042d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	420e0040 	.word	0x420e0040
 8004308:	40007000 	.word	0x40007000
 800430c:	420e0044 	.word	0x420e0044

08004310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0cc      	b.n	80044be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d90c      	bls.n	800434c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b65      	ldr	r3, [pc, #404]	; (80044c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	4b63      	ldr	r3, [pc, #396]	; (80044c8 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0b8      	b.n	80044be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d020      	beq.n	800439a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004364:	4b59      	ldr	r3, [pc, #356]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a58      	ldr	r2, [pc, #352]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800436e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800437c:	4b53      	ldr	r3, [pc, #332]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a52      	ldr	r2, [pc, #328]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004388:	4b50      	ldr	r3, [pc, #320]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	494d      	ldr	r1, [pc, #308]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d044      	beq.n	8004430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	4b47      	ldr	r3, [pc, #284]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d119      	bne.n	80043ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e07f      	b.n	80044be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d003      	beq.n	80043ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d107      	bne.n	80043de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ce:	4b3f      	ldr	r3, [pc, #252]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e06f      	b.n	80044be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043de:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e067      	b.n	80044be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ee:	4b37      	ldr	r3, [pc, #220]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 0203 	bic.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4934      	ldr	r1, [pc, #208]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004400:	f7ff f826 	bl	8003450 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	e00a      	b.n	800441e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004408:	f7ff f822 	bl	8003450 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e04f      	b.n	80044be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	4b2b      	ldr	r3, [pc, #172]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 020c 	and.w	r2, r3, #12
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	429a      	cmp	r2, r3
 800442e:	d1eb      	bne.n	8004408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004430:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d20c      	bcs.n	8004458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e032      	b.n	80044be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4916      	ldr	r1, [pc, #88]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	490e      	ldr	r1, [pc, #56]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004496:	f000 f855 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 800449a:	4601      	mov	r1, r0
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 80044a8:	5cd3      	ldrb	r3, [r2, r3]
 80044aa:	fa21 f303 	lsr.w	r3, r1, r3
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe ff86 	bl	80033c8 <HAL_InitTick>

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023c00 	.word	0x40023c00
 80044cc:	40023800 	.word	0x40023800
 80044d0:	0800975c 	.word	0x0800975c
 80044d4:	20000000 	.word	0x20000000
 80044d8:	20000008 	.word	0x20000008

080044dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000000 	.word	0x20000000

080044f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044f8:	f7ff fff0 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80044fc:	4601      	mov	r1, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0a9b      	lsrs	r3, r3, #10
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4a03      	ldr	r2, [pc, #12]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40023800 	.word	0x40023800
 8004518:	0800976c 	.word	0x0800976c

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004520:	f7ff ffdc 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004524:	4601      	mov	r1, r0
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0b5b      	lsrs	r3, r3, #13
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4a03      	ldr	r2, [pc, #12]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40023800 	.word	0x40023800
 8004540:	0800976c 	.word	0x0800976c

08004544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455e:	4bc6      	ldr	r3, [pc, #792]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b0c      	cmp	r3, #12
 8004568:	f200 817e 	bhi.w	8004868 <HAL_RCC_GetSysClockFreq+0x324>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_RCC_GetSysClockFreq+0x30>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	080045a9 	.word	0x080045a9
 8004578:	08004869 	.word	0x08004869
 800457c:	08004869 	.word	0x08004869
 8004580:	08004869 	.word	0x08004869
 8004584:	080045af 	.word	0x080045af
 8004588:	08004869 	.word	0x08004869
 800458c:	08004869 	.word	0x08004869
 8004590:	08004869 	.word	0x08004869
 8004594:	080045b5 	.word	0x080045b5
 8004598:	08004869 	.word	0x08004869
 800459c:	08004869 	.word	0x08004869
 80045a0:	08004869 	.word	0x08004869
 80045a4:	08004711 	.word	0x08004711
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a8:	4bb4      	ldr	r3, [pc, #720]	; (800487c <HAL_RCC_GetSysClockFreq+0x338>)
 80045aa:	613b      	str	r3, [r7, #16]
       break;
 80045ac:	e15f      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ae:	4bb4      	ldr	r3, [pc, #720]	; (8004880 <HAL_RCC_GetSysClockFreq+0x33c>)
 80045b0:	613b      	str	r3, [r7, #16]
      break;
 80045b2:	e15c      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b4:	4bb0      	ldr	r3, [pc, #704]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045bc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045be:	4bae      	ldr	r3, [pc, #696]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d04a      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ca:	4bab      	ldr	r3, [pc, #684]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	099b      	lsrs	r3, r3, #6
 80045d0:	f04f 0400 	mov.w	r4, #0
 80045d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	ea03 0501 	and.w	r5, r3, r1
 80045e0:	ea04 0602 	and.w	r6, r4, r2
 80045e4:	4629      	mov	r1, r5
 80045e6:	4632      	mov	r2, r6
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	f04f 0400 	mov.w	r4, #0
 80045f0:	0154      	lsls	r4, r2, #5
 80045f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045f6:	014b      	lsls	r3, r1, #5
 80045f8:	4619      	mov	r1, r3
 80045fa:	4622      	mov	r2, r4
 80045fc:	1b49      	subs	r1, r1, r5
 80045fe:	eb62 0206 	sbc.w	r2, r2, r6
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	f04f 0400 	mov.w	r4, #0
 800460a:	0194      	lsls	r4, r2, #6
 800460c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004610:	018b      	lsls	r3, r1, #6
 8004612:	1a5b      	subs	r3, r3, r1
 8004614:	eb64 0402 	sbc.w	r4, r4, r2
 8004618:	f04f 0100 	mov.w	r1, #0
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	00e2      	lsls	r2, r4, #3
 8004622:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004626:	00d9      	lsls	r1, r3, #3
 8004628:	460b      	mov	r3, r1
 800462a:	4614      	mov	r4, r2
 800462c:	195b      	adds	r3, r3, r5
 800462e:	eb44 0406 	adc.w	r4, r4, r6
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	0262      	lsls	r2, r4, #9
 800463c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004640:	0259      	lsls	r1, r3, #9
 8004642:	460b      	mov	r3, r1
 8004644:	4614      	mov	r4, r2
 8004646:	4618      	mov	r0, r3
 8004648:	4621      	mov	r1, r4
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f04f 0400 	mov.w	r4, #0
 8004650:	461a      	mov	r2, r3
 8004652:	4623      	mov	r3, r4
 8004654:	f7fb fe2c 	bl	80002b0 <__aeabi_uldivmod>
 8004658:	4603      	mov	r3, r0
 800465a:	460c      	mov	r4, r1
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e049      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004660:	4b85      	ldr	r3, [pc, #532]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	f04f 0400 	mov.w	r4, #0
 800466a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	ea03 0501 	and.w	r5, r3, r1
 8004676:	ea04 0602 	and.w	r6, r4, r2
 800467a:	4629      	mov	r1, r5
 800467c:	4632      	mov	r2, r6
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	f04f 0400 	mov.w	r4, #0
 8004686:	0154      	lsls	r4, r2, #5
 8004688:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800468c:	014b      	lsls	r3, r1, #5
 800468e:	4619      	mov	r1, r3
 8004690:	4622      	mov	r2, r4
 8004692:	1b49      	subs	r1, r1, r5
 8004694:	eb62 0206 	sbc.w	r2, r2, r6
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	0194      	lsls	r4, r2, #6
 80046a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046a6:	018b      	lsls	r3, r1, #6
 80046a8:	1a5b      	subs	r3, r3, r1
 80046aa:	eb64 0402 	sbc.w	r4, r4, r2
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	00e2      	lsls	r2, r4, #3
 80046b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046bc:	00d9      	lsls	r1, r3, #3
 80046be:	460b      	mov	r3, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	195b      	adds	r3, r3, r5
 80046c4:	eb44 0406 	adc.w	r4, r4, r6
 80046c8:	f04f 0100 	mov.w	r1, #0
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	02a2      	lsls	r2, r4, #10
 80046d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046d6:	0299      	lsls	r1, r3, #10
 80046d8:	460b      	mov	r3, r1
 80046da:	4614      	mov	r4, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	4621      	mov	r1, r4
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f04f 0400 	mov.w	r4, #0
 80046e6:	461a      	mov	r2, r3
 80046e8:	4623      	mov	r3, r4
 80046ea:	f7fb fde1 	bl	80002b0 <__aeabi_uldivmod>
 80046ee:	4603      	mov	r3, r0
 80046f0:	460c      	mov	r4, r1
 80046f2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046f4:	4b60      	ldr	r3, [pc, #384]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	3301      	adds	r3, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	613b      	str	r3, [r7, #16]
      break;
 800470e:	e0ae      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004710:	4b59      	ldr	r3, [pc, #356]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004718:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b57      	ldr	r3, [pc, #348]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04a      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b54      	ldr	r3, [pc, #336]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	f04f 0400 	mov.w	r4, #0
 8004730:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	ea03 0501 	and.w	r5, r3, r1
 800473c:	ea04 0602 	and.w	r6, r4, r2
 8004740:	4629      	mov	r1, r5
 8004742:	4632      	mov	r2, r6
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	0154      	lsls	r4, r2, #5
 800474e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004752:	014b      	lsls	r3, r1, #5
 8004754:	4619      	mov	r1, r3
 8004756:	4622      	mov	r2, r4
 8004758:	1b49      	subs	r1, r1, r5
 800475a:	eb62 0206 	sbc.w	r2, r2, r6
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	f04f 0400 	mov.w	r4, #0
 8004766:	0194      	lsls	r4, r2, #6
 8004768:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800476c:	018b      	lsls	r3, r1, #6
 800476e:	1a5b      	subs	r3, r3, r1
 8004770:	eb64 0402 	sbc.w	r4, r4, r2
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	00e2      	lsls	r2, r4, #3
 800477e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004782:	00d9      	lsls	r1, r3, #3
 8004784:	460b      	mov	r3, r1
 8004786:	4614      	mov	r4, r2
 8004788:	195b      	adds	r3, r3, r5
 800478a:	eb44 0406 	adc.w	r4, r4, r6
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	0262      	lsls	r2, r4, #9
 8004798:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800479c:	0259      	lsls	r1, r3, #9
 800479e:	460b      	mov	r3, r1
 80047a0:	4614      	mov	r4, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	4621      	mov	r1, r4
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f04f 0400 	mov.w	r4, #0
 80047ac:	461a      	mov	r2, r3
 80047ae:	4623      	mov	r3, r4
 80047b0:	f7fb fd7e 	bl	80002b0 <__aeabi_uldivmod>
 80047b4:	4603      	mov	r3, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e049      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047bc:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	f04f 0400 	mov.w	r4, #0
 80047c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	ea03 0501 	and.w	r5, r3, r1
 80047d2:	ea04 0602 	and.w	r6, r4, r2
 80047d6:	4629      	mov	r1, r5
 80047d8:	4632      	mov	r2, r6
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	f04f 0400 	mov.w	r4, #0
 80047e2:	0154      	lsls	r4, r2, #5
 80047e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047e8:	014b      	lsls	r3, r1, #5
 80047ea:	4619      	mov	r1, r3
 80047ec:	4622      	mov	r2, r4
 80047ee:	1b49      	subs	r1, r1, r5
 80047f0:	eb62 0206 	sbc.w	r2, r2, r6
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	f04f 0400 	mov.w	r4, #0
 80047fc:	0194      	lsls	r4, r2, #6
 80047fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004802:	018b      	lsls	r3, r1, #6
 8004804:	1a5b      	subs	r3, r3, r1
 8004806:	eb64 0402 	sbc.w	r4, r4, r2
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	00e2      	lsls	r2, r4, #3
 8004814:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004818:	00d9      	lsls	r1, r3, #3
 800481a:	460b      	mov	r3, r1
 800481c:	4614      	mov	r4, r2
 800481e:	195b      	adds	r3, r3, r5
 8004820:	eb44 0406 	adc.w	r4, r4, r6
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	02a2      	lsls	r2, r4, #10
 800482e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004832:	0299      	lsls	r1, r3, #10
 8004834:	460b      	mov	r3, r1
 8004836:	4614      	mov	r4, r2
 8004838:	4618      	mov	r0, r3
 800483a:	4621      	mov	r1, r4
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f04f 0400 	mov.w	r4, #0
 8004842:	461a      	mov	r2, r3
 8004844:	4623      	mov	r3, r4
 8004846:	f7fb fd33 	bl	80002b0 <__aeabi_uldivmod>
 800484a:	4603      	mov	r3, r0
 800484c:	460c      	mov	r4, r1
 800484e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_GetSysClockFreq+0x334>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	0f1b      	lsrs	r3, r3, #28
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
      break;
 8004866:	e002      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <HAL_RCC_GetSysClockFreq+0x338>)
 800486a:	613b      	str	r3, [r7, #16]
      break;
 800486c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486e:	693b      	ldr	r3, [r7, #16]
}
 8004870:	4618      	mov	r0, r3
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8083 	beq.w	80049a4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800489e:	4b95      	ldr	r3, [pc, #596]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d019      	beq.n	80048de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048aa:	4b92      	ldr	r3, [pc, #584]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d106      	bne.n	80048c4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048b6:	4b8f      	ldr	r3, [pc, #572]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c2:	d00c      	beq.n	80048de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c4:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d112      	bne.n	80048f6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d0:	4b88      	ldr	r3, [pc, #544]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d05b      	beq.n	80049a2 <HAL_RCC_OscConfig+0x11e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d157      	bne.n	80049a2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e216      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x8a>
 8004900:	4b7c      	ldr	r3, [pc, #496]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7b      	ldr	r2, [pc, #492]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e01d      	b.n	800494a <HAL_RCC_OscConfig+0xc6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004916:	d10c      	bne.n	8004932 <HAL_RCC_OscConfig+0xae>
 8004918:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a75      	ldr	r2, [pc, #468]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800491e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b73      	ldr	r3, [pc, #460]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a72      	ldr	r2, [pc, #456]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e00b      	b.n	800494a <HAL_RCC_OscConfig+0xc6>
 8004932:	4b70      	ldr	r3, [pc, #448]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6f      	ldr	r2, [pc, #444]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6c      	ldr	r2, [pc, #432]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d013      	beq.n	800497a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004952:	f7fe fd7d 	bl	8003450 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495a:	f7fe fd79 	bl	8003450 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	; 0x64
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e1db      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496c:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0xd6>
 8004978:	e014      	b.n	80049a4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fe fd69 	bl	8003450 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004982:	f7fe fd65 	bl	8003450 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b64      	cmp	r3, #100	; 0x64
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e1c7      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004994:	4b57      	ldr	r3, [pc, #348]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0xfe>
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d06f      	beq.n	8004a90 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049b0:	4b50      	ldr	r3, [pc, #320]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049bc:	4b4d      	ldr	r3, [pc, #308]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049c8:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d4:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	d11c      	bne.n	8004a1a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e0:	4b44      	ldr	r3, [pc, #272]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d116      	bne.n	8004a1a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ec:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_OscConfig+0x180>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e18f      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4938      	ldr	r1, [pc, #224]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a18:	e03a      	b.n	8004a90 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d020      	beq.n	8004a64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a22:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <HAL_RCC_OscConfig+0x274>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fe fd12 	bl	8003450 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a30:	f7fe fd0e 	bl	8003450 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e170      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4925      	ldr	r1, [pc, #148]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
 8004a62:	e015      	b.n	8004a90 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a64:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCC_OscConfig+0x274>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fe fcf1 	bl	8003450 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a72:	f7fe fced 	bl	8003450 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e14f      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a84:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d037      	beq.n	8004b0c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d016      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_RCC_OscConfig+0x278>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fe fcd1 	bl	8003450 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab2:	f7fe fccd 	bl	8003450 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e12f      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x22e>
 8004ad0:	e01c      	b.n	8004b0c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_RCC_OscConfig+0x278>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fe fcba 	bl	8003450 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ade:	e00f      	b.n	8004b00 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fe fcb6 	bl	8003450 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d908      	bls.n	8004b00 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e118      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470000 	.word	0x42470000
 8004afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b8a      	ldr	r3, [pc, #552]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e9      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8097 	beq.w	8004c48 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b83      	ldr	r3, [pc, #524]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b7f      	ldr	r3, [pc, #508]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a7e      	ldr	r2, [pc, #504]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b79      	ldr	r3, [pc, #484]	; (8004d30 <HAL_RCC_OscConfig+0x4ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d118      	bne.n	8004b88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b76      	ldr	r3, [pc, #472]	; (8004d30 <HAL_RCC_OscConfig+0x4ac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a75      	ldr	r2, [pc, #468]	; (8004d30 <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fe fc75 	bl	8003450 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fe fc71 	bl	8003450 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0d3      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	4b6c      	ldr	r3, [pc, #432]	; (8004d30 <HAL_RCC_OscConfig+0x4ac>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x31a>
 8004b90:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a65      	ldr	r2, [pc, #404]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	e01c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x354>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x33c>
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a60      	ldr	r2, [pc, #384]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	4b5e      	ldr	r3, [pc, #376]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a5d      	ldr	r2, [pc, #372]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x354>
 8004bc0:	4b5a      	ldr	r3, [pc, #360]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4a59      	ldr	r2, [pc, #356]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a56      	ldr	r2, [pc, #344]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fe fc36 	bl	8003450 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fe fc32 	bl	8003450 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e092      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ee      	beq.n	8004be8 <HAL_RCC_OscConfig+0x364>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fe fc20 	bl	8003450 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fe fc1c 	bl	8003450 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e07c      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	4a3a      	ldr	r2, [pc, #232]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d068      	beq.n	8004d22 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c50:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d060      	beq.n	8004d1e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d145      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c64:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <HAL_RCC_OscConfig+0x4b0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fe fbf1 	bl	8003450 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fe fbed 	bl	8003450 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e04f      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	019b      	lsls	r3, r3, #6
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	071b      	lsls	r3, r3, #28
 8004cbc:	491b      	ldr	r1, [pc, #108]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <HAL_RCC_OscConfig+0x4b0>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fbc2 	bl	8003450 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fe fbbe 	bl	8003450 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e020      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44c>
 8004cee:	e018      	b.n	8004d22 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf0:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <HAL_RCC_OscConfig+0x4b0>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fe fbab 	bl	8003450 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fe fba7 	bl	8003450 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e009      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_RCC_OscConfig+0x4a8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCC_OscConfig+0x47a>
 8004d1c:	e001      	b.n	8004d22 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40007000 	.word	0x40007000
 8004d34:	42470060 	.word	0x42470060

08004d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e056      	b.n	8004df8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fd f9df 	bl	8002128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	ea42 0103 	orr.w	r1, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	f003 0104 	and.w	r1, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_SPI_Transmit+0x22>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e11e      	b.n	8005060 <HAL_SPI_Transmit+0x260>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e2a:	f7fe fb11 	bl	8003450 <HAL_GetTick>
 8004e2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
 8004e42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e44:	e103      	b.n	800504e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_Transmit+0x52>
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e56:	e0fa      	b.n	800504e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9e:	d107      	bne.n	8004eb0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d007      	beq.n	8004ece <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed6:	d14b      	bne.n	8004f70 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_SPI_Transmit+0xe6>
 8004ee0:	8afb      	ldrh	r3, [r7, #22]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d13e      	bne.n	8004f64 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	881a      	ldrh	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	1c9a      	adds	r2, r3, #2
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f0a:	e02b      	b.n	8004f64 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d112      	bne.n	8004f40 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f3e:	e011      	b.n	8004f64 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f40:	f7fe fa86 	bl	8003450 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d803      	bhi.n	8004f58 <HAL_SPI_Transmit+0x158>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f56:	d102      	bne.n	8004f5e <HAL_SPI_Transmit+0x15e>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f62:	e074      	b.n	800504e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1ce      	bne.n	8004f0c <HAL_SPI_Transmit+0x10c>
 8004f6e:	e04c      	b.n	800500a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_Transmit+0x17e>
 8004f78:	8afb      	ldrh	r3, [r7, #22]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d140      	bne.n	8005000 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fa4:	e02c      	b.n	8005000 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d113      	bne.n	8004fdc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fda:	e011      	b.n	8005000 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fdc:	f7fe fa38 	bl	8003450 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d803      	bhi.n	8004ff4 <HAL_SPI_Transmit+0x1f4>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff2:	d102      	bne.n	8004ffa <HAL_SPI_Transmit+0x1fa>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ffe:	e026      	b.n	800504e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1cd      	bne.n	8004fa6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fa36 	bl	8005480 <SPI_EndRxTxTransaction>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e000      	b.n	800504e <HAL_SPI_Transmit+0x24e>
  }

error:
 800504c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800505e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08c      	sub	sp, #48	; 0x30
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005076:	2301      	movs	r3, #1
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_SPI_TransmitReceive+0x26>
 800508a:	2302      	movs	r3, #2
 800508c:	e18a      	b.n	80053a4 <HAL_SPI_TransmitReceive+0x33c>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005096:	f7fe f9db 	bl	8003450 <HAL_GetTick>
 800509a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050ac:	887b      	ldrh	r3, [r7, #2]
 80050ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d00f      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x70>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050be:	d107      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x68>
 80050c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d003      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050d6:	e15b      	b.n	8005390 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x82>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x82>
 80050e4:	887b      	ldrh	r3, [r7, #2]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050f0:	e14e      	b.n	8005390 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d003      	beq.n	8005106 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2205      	movs	r2, #5
 8005102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	887a      	ldrh	r2, [r7, #2]
 800512e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d007      	beq.n	800515a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005158:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005162:	d178      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x10a>
 800516c:	8b7b      	ldrh	r3, [r7, #26]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d166      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	881a      	ldrh	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005196:	e053      	b.n	8005240 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d11b      	bne.n	80051de <HAL_SPI_TransmitReceive+0x176>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d016      	beq.n	80051de <HAL_SPI_TransmitReceive+0x176>
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d113      	bne.n	80051de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	881a      	ldrh	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	1c9a      	adds	r2, r3, #2
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d119      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x1b8>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d014      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	b292      	uxth	r2, r2
 8005202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800521c:	2301      	movs	r3, #1
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005220:	f7fe f916 	bl	8003450 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522c:	429a      	cmp	r2, r3
 800522e:	d807      	bhi.n	8005240 <HAL_SPI_TransmitReceive+0x1d8>
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005236:	d003      	beq.n	8005240 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800523e:	e0a7      	b.n	8005390 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1a6      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x130>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1a1      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x130>
 8005254:	e07c      	b.n	8005350 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x1fc>
 800525e:	8b7b      	ldrh	r3, [r7, #26]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d16b      	bne.n	800533c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	7812      	ldrb	r2, [r2, #0]
 8005270:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528a:	e057      	b.n	800533c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d11c      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x26c>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d017      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x26c>
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d114      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	7812      	ldrb	r2, [r2, #0]
 80052b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d119      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x2ae>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d014      	beq.n	8005316 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005312:	2301      	movs	r3, #1
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005316:	f7fe f89b 	bl	8003450 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005322:	429a      	cmp	r2, r3
 8005324:	d803      	bhi.n	800532e <HAL_SPI_TransmitReceive+0x2c6>
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532c:	d102      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x2cc>
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d103      	bne.n	800533c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800533a:	e029      	b.n	8005390 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1a2      	bne.n	800528c <HAL_SPI_TransmitReceive+0x224>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d19d      	bne.n	800528c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f893 	bl	8005480 <SPI_EndRxTxTransaction>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d006      	beq.n	800536e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800536c:	e010      	b.n	8005390 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	e000      	b.n	8005390 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800538e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3730      	adds	r7, #48	; 0x30
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053bc:	e04c      	b.n	8005458 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c4:	d048      	beq.n	8005458 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053c6:	f7fe f843 	bl	8003450 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d902      	bls.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x30>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d13d      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f4:	d111      	bne.n	800541a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fe:	d004      	beq.n	800540a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d107      	bne.n	800541a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005418:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005422:	d10f      	bne.n	8005444 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005442:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e00f      	b.n	8005478 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	429a      	cmp	r2, r3
 8005474:	d1a3      	bne.n	80053be <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <SPI_EndRxTxTransaction+0x7c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <SPI_EndRxTxTransaction+0x80>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	0d5b      	lsrs	r3, r3, #21
 8005498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d112      	bne.n	80054d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2180      	movs	r1, #128	; 0x80
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff ff78 	bl	80053ac <SPI_WaitFlagStateUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e00f      	b.n	80054f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3b01      	subs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d0f2      	beq.n	80054d2 <SPI_EndRxTxTransaction+0x52>
 80054ec:	e000      	b.n	80054f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80054ee:	bf00      	nop
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000000 	.word	0x20000000
 8005500:	165e9f81 	.word	0x165e9f81

08005504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e01d      	b.n	8005552 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc feac 	bl	8002288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 f988 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d007      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <HAL_TIM_Base_Stop_IT+0x48>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	f240 4344 	movw	r3, #1092	; 0x444
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_Base_Stop_IT+0x48>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b02      	cmp	r3, #2
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0202 	mvn.w	r2, #2
 8005624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8ee 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8e0 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8f1 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0204 	mvn.w	r2, #4
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8c4 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8b6 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8c7 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0208 	mvn.w	r2, #8
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2204      	movs	r2, #4
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f89a 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f88c 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f89d 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0210 	mvn.w	r2, #16
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2208      	movs	r2, #8
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f870 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f862 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f873 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0201 	mvn.w	r2, #1
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc fbc0 	bl	8001efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f97e 	bl	8005aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f838 	bl	8005844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0220 	mvn.w	r2, #32
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f948 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a40      	ldr	r2, [pc, #256]	; (800596c <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00f      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <TIM_Base_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <TIM_Base_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3a      	ldr	r2, [pc, #232]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2f      	ldr	r2, [pc, #188]	; (800596c <TIM_Base_SetConfig+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d02b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d027      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_Base_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d023      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <TIM_Base_SetConfig+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	; (800597c <TIM_Base_SetConfig+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d017      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_Base_SetConfig+0x128>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a26      	ldr	r2, [pc, #152]	; (8005988 <TIM_Base_SetConfig+0x130>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a25      	ldr	r2, [pc, #148]	; (800598c <TIM_Base_SetConfig+0x134>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a24      	ldr	r2, [pc, #144]	; (8005990 <TIM_Base_SetConfig+0x138>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a23      	ldr	r2, [pc, #140]	; (8005994 <TIM_Base_SetConfig+0x13c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <TIM_Base_SetConfig+0x114>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <TIM_Base_SetConfig+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	40001800 	.word	0x40001800
 8005990:	40001c00 	.word	0x40001c00
 8005994:	40002000 	.word	0x40002000

08005998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e05a      	b.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d01d      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1a      	ldr	r2, [pc, #104]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e03f      	b.n	8005b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fc fc36 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	; 0x24
 8005ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fc03 	bl	8006308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d166      	bne.n	8005c3c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_UART_Receive_DMA+0x26>
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e05f      	b.n	8005c3e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Receive_DMA+0x38>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e058      	b.n	8005c3e <HAL_UART_Receive_DMA+0xea>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2222      	movs	r2, #34	; 0x22
 8005baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <HAL_UART_Receive_DMA+0xf4>)
 8005bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <HAL_UART_Receive_DMA+0xf8>)
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <HAL_UART_Receive_DMA+0xfc>)
 8005bc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	2200      	movs	r2, #0
 8005bcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	f7fd fe21 	bl	800382c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c16:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c36:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	08005f81 	.word	0x08005f81
 8005c4c:	08005fe9 	.word	0x08005fe9
 8005c50:	08006005 	.word	0x08006005

08005c54 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005c6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d124      	bne.n	8005cd4 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c98:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d018      	beq.n	8005cd4 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fd fe14 	bl	80038dc <HAL_DMA_Abort>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe f828 	bl	8003d14 <HAL_DMA_GetError>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d104      	bne.n	8005cd4 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e03d      	b.n	8005d50 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d124      	bne.n	8005d2c <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	2200      	movs	r2, #0
 8005d00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fd fde8 	bl	80038dc <HAL_DMA_Abort>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fd fffc 	bl	8003d14 <HAL_DMA_GetError>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d104      	bne.n	8005d2c <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2210      	movs	r2, #16
 8005d26:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e011      	b.n	8005d50 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10d      	bne.n	8005daa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_UART_IRQHandler+0x52>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa2e 	bl	8006204 <UART_Receive_IT>
      return;
 8005da8:	e0d1      	b.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80b0 	beq.w	8005f12 <HAL_UART_IRQHandler+0x1ba>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x70>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80a5 	beq.w	8005f12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_UART_IRQHandler+0x90>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_UART_IRQHandler+0xb0>
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	f043 0202 	orr.w	r2, r3, #2
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_UART_IRQHandler+0xd0>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	f043 0204 	orr.w	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <HAL_UART_IRQHandler+0xfa>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <HAL_UART_IRQHandler+0xee>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d078      	beq.n	8005f4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_UART_IRQHandler+0x11c>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f9c8 	bl	8006204 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <HAL_UART_IRQHandler+0x144>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d031      	beq.n	8005f00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f911 	bl	80060c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d123      	bne.n	8005ef8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ecc:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <HAL_UART_IRQHandler+0x1fc>)
 8005ece:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fd fd71 	bl	80039bc <HAL_DMA_Abort_IT>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eea:	4610      	mov	r0, r2
 8005eec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eee:	e00e      	b.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f83b 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef6:	e00a      	b.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f837 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efe:	e006      	b.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f833 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f0c:	e01e      	b.n	8005f4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0e:	bf00      	nop
    return;
 8005f10:	e01c      	b.n	8005f4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1d6>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8fe 	bl	8006128 <UART_Transmit_IT>
    return;
 8005f2c:	e00f      	b.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f946 	bl	80061d4 <UART_EndTransmit_IT>
    return;
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f4c:	bf00      	nop
  }
}
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	08006101 	.word	0x08006101

08005f58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d11e      	bne.n	8005fda <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7fb fdfe 	bl	8001bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff ffae 	bl	8005f58 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006020:	2b80      	cmp	r3, #128	; 0x80
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b21      	cmp	r3, #33	; 0x21
 8006036:	d108      	bne.n	800604a <UART_DMAError+0x46>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2200      	movs	r2, #0
 8006042:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006044:	68b8      	ldr	r0, [r7, #8]
 8006046:	f000 f827 	bl	8006098 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	bf0c      	ite	eq
 8006058:	2301      	moveq	r3, #1
 800605a:	2300      	movne	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b22      	cmp	r3, #34	; 0x22
 800606a:	d108      	bne.n	800607e <UART_DMAError+0x7a>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006078:	68b8      	ldr	r0, [r7, #8]
 800607a:	f000 f823 	bl	80060c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	f043 0210 	orr.w	r2, r3, #16
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800608a:	68b8      	ldr	r0, [r7, #8]
 800608c:	f7ff ff6e 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80060ae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff26 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b21      	cmp	r3, #33	; 0x21
 800613a:	d144      	bne.n	80061c6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006144:	d11a      	bne.n	800617c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	1c9a      	adds	r2, r3, #2
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]
 800616e:	e00e      	b.n	800618e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	621a      	str	r2, [r3, #32]
 800617a:	e008      	b.n	800618e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6211      	str	r1, [r2, #32]
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29b      	uxth	r3, r3
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	4619      	mov	r1, r3
 800619c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10f      	bne.n	80061c2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e000      	b.n	80061c8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061c6:	2302      	movs	r3, #2
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fb fe77 	bl	8001ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b22      	cmp	r3, #34	; 0x22
 8006216:	d171      	bne.n	80062fc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006220:	d123      	bne.n	800626a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10e      	bne.n	800624e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28
 800624c:	e029      	b.n	80062a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	b29b      	uxth	r3, r3
 8006256:	b2db      	uxtb	r3, r3
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
 8006268:	e01b      	b.n	80062a2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6858      	ldr	r0, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6291      	str	r1, [r2, #40]	; 0x28
 8006282:	b2c2      	uxtb	r2, r0
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e00c      	b.n	80062a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	1c58      	adds	r0, r3, #1
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	6288      	str	r0, [r1, #40]	; 0x28
 800629a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4619      	mov	r1, r3
 80062b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d120      	bne.n	80062f8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0220 	bic.w	r2, r2, #32
 80062c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb fc74 	bl	8001bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e002      	b.n	80062fe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e000      	b.n	80062fe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80062fc:	2302      	movs	r3, #2
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800634a:	f023 030c 	bic.w	r3, r3, #12
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	68f9      	ldr	r1, [r7, #12]
 8006354:	430b      	orrs	r3, r1
 8006356:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006376:	f040 818b 	bne.w	8006690 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4ac1      	ldr	r2, [pc, #772]	; (8006684 <UART_SetConfig+0x37c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d005      	beq.n	8006390 <UART_SetConfig+0x88>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4abf      	ldr	r2, [pc, #764]	; (8006688 <UART_SetConfig+0x380>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f040 80bd 	bne.w	800650a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006390:	f7fe f8c4 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8006394:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	461d      	mov	r5, r3
 800639a:	f04f 0600 	mov.w	r6, #0
 800639e:	46a8      	mov	r8, r5
 80063a0:	46b1      	mov	r9, r6
 80063a2:	eb18 0308 	adds.w	r3, r8, r8
 80063a6:	eb49 0409 	adc.w	r4, r9, r9
 80063aa:	4698      	mov	r8, r3
 80063ac:	46a1      	mov	r9, r4
 80063ae:	eb18 0805 	adds.w	r8, r8, r5
 80063b2:	eb49 0906 	adc.w	r9, r9, r6
 80063b6:	f04f 0100 	mov.w	r1, #0
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ca:	4688      	mov	r8, r1
 80063cc:	4691      	mov	r9, r2
 80063ce:	eb18 0005 	adds.w	r0, r8, r5
 80063d2:	eb49 0106 	adc.w	r1, r9, r6
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	461d      	mov	r5, r3
 80063dc:	f04f 0600 	mov.w	r6, #0
 80063e0:	196b      	adds	r3, r5, r5
 80063e2:	eb46 0406 	adc.w	r4, r6, r6
 80063e6:	461a      	mov	r2, r3
 80063e8:	4623      	mov	r3, r4
 80063ea:	f7f9 ff61 	bl	80002b0 <__aeabi_uldivmod>
 80063ee:	4603      	mov	r3, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	461a      	mov	r2, r3
 80063f4:	4ba5      	ldr	r3, [pc, #660]	; (800668c <UART_SetConfig+0x384>)
 80063f6:	fba3 2302 	umull	r2, r3, r3, r2
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	461d      	mov	r5, r3
 8006404:	f04f 0600 	mov.w	r6, #0
 8006408:	46a9      	mov	r9, r5
 800640a:	46b2      	mov	sl, r6
 800640c:	eb19 0309 	adds.w	r3, r9, r9
 8006410:	eb4a 040a 	adc.w	r4, sl, sl
 8006414:	4699      	mov	r9, r3
 8006416:	46a2      	mov	sl, r4
 8006418:	eb19 0905 	adds.w	r9, r9, r5
 800641c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006420:	f04f 0100 	mov.w	r1, #0
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800642c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006434:	4689      	mov	r9, r1
 8006436:	4692      	mov	sl, r2
 8006438:	eb19 0005 	adds.w	r0, r9, r5
 800643c:	eb4a 0106 	adc.w	r1, sl, r6
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	461d      	mov	r5, r3
 8006446:	f04f 0600 	mov.w	r6, #0
 800644a:	196b      	adds	r3, r5, r5
 800644c:	eb46 0406 	adc.w	r4, r6, r6
 8006450:	461a      	mov	r2, r3
 8006452:	4623      	mov	r3, r4
 8006454:	f7f9 ff2c 	bl	80002b0 <__aeabi_uldivmod>
 8006458:	4603      	mov	r3, r0
 800645a:	460c      	mov	r4, r1
 800645c:	461a      	mov	r2, r3
 800645e:	4b8b      	ldr	r3, [pc, #556]	; (800668c <UART_SetConfig+0x384>)
 8006460:	fba3 1302 	umull	r1, r3, r3, r2
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	2164      	movs	r1, #100	; 0x64
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	3332      	adds	r3, #50	; 0x32
 8006472:	4a86      	ldr	r2, [pc, #536]	; (800668c <UART_SetConfig+0x384>)
 8006474:	fba2 2303 	umull	r2, r3, r2, r3
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006480:	4498      	add	r8, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	461d      	mov	r5, r3
 8006486:	f04f 0600 	mov.w	r6, #0
 800648a:	46a9      	mov	r9, r5
 800648c:	46b2      	mov	sl, r6
 800648e:	eb19 0309 	adds.w	r3, r9, r9
 8006492:	eb4a 040a 	adc.w	r4, sl, sl
 8006496:	4699      	mov	r9, r3
 8006498:	46a2      	mov	sl, r4
 800649a:	eb19 0905 	adds.w	r9, r9, r5
 800649e:	eb4a 0a06 	adc.w	sl, sl, r6
 80064a2:	f04f 0100 	mov.w	r1, #0
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064b6:	4689      	mov	r9, r1
 80064b8:	4692      	mov	sl, r2
 80064ba:	eb19 0005 	adds.w	r0, r9, r5
 80064be:	eb4a 0106 	adc.w	r1, sl, r6
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	461d      	mov	r5, r3
 80064c8:	f04f 0600 	mov.w	r6, #0
 80064cc:	196b      	adds	r3, r5, r5
 80064ce:	eb46 0406 	adc.w	r4, r6, r6
 80064d2:	461a      	mov	r2, r3
 80064d4:	4623      	mov	r3, r4
 80064d6:	f7f9 feeb 	bl	80002b0 <__aeabi_uldivmod>
 80064da:	4603      	mov	r3, r0
 80064dc:	460c      	mov	r4, r1
 80064de:	461a      	mov	r2, r3
 80064e0:	4b6a      	ldr	r3, [pc, #424]	; (800668c <UART_SetConfig+0x384>)
 80064e2:	fba3 1302 	umull	r1, r3, r3, r2
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	2164      	movs	r1, #100	; 0x64
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	3332      	adds	r3, #50	; 0x32
 80064f4:	4a65      	ldr	r2, [pc, #404]	; (800668c <UART_SetConfig+0x384>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	f003 0207 	and.w	r2, r3, #7
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4442      	add	r2, r8
 8006506:	609a      	str	r2, [r3, #8]
 8006508:	e26f      	b.n	80069ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800650a:	f7fd fff3 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 800650e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	461d      	mov	r5, r3
 8006514:	f04f 0600 	mov.w	r6, #0
 8006518:	46a8      	mov	r8, r5
 800651a:	46b1      	mov	r9, r6
 800651c:	eb18 0308 	adds.w	r3, r8, r8
 8006520:	eb49 0409 	adc.w	r4, r9, r9
 8006524:	4698      	mov	r8, r3
 8006526:	46a1      	mov	r9, r4
 8006528:	eb18 0805 	adds.w	r8, r8, r5
 800652c:	eb49 0906 	adc.w	r9, r9, r6
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800653c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006540:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006544:	4688      	mov	r8, r1
 8006546:	4691      	mov	r9, r2
 8006548:	eb18 0005 	adds.w	r0, r8, r5
 800654c:	eb49 0106 	adc.w	r1, r9, r6
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	461d      	mov	r5, r3
 8006556:	f04f 0600 	mov.w	r6, #0
 800655a:	196b      	adds	r3, r5, r5
 800655c:	eb46 0406 	adc.w	r4, r6, r6
 8006560:	461a      	mov	r2, r3
 8006562:	4623      	mov	r3, r4
 8006564:	f7f9 fea4 	bl	80002b0 <__aeabi_uldivmod>
 8006568:	4603      	mov	r3, r0
 800656a:	460c      	mov	r4, r1
 800656c:	461a      	mov	r2, r3
 800656e:	4b47      	ldr	r3, [pc, #284]	; (800668c <UART_SetConfig+0x384>)
 8006570:	fba3 2302 	umull	r2, r3, r3, r2
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	461d      	mov	r5, r3
 800657e:	f04f 0600 	mov.w	r6, #0
 8006582:	46a9      	mov	r9, r5
 8006584:	46b2      	mov	sl, r6
 8006586:	eb19 0309 	adds.w	r3, r9, r9
 800658a:	eb4a 040a 	adc.w	r4, sl, sl
 800658e:	4699      	mov	r9, r3
 8006590:	46a2      	mov	sl, r4
 8006592:	eb19 0905 	adds.w	r9, r9, r5
 8006596:	eb4a 0a06 	adc.w	sl, sl, r6
 800659a:	f04f 0100 	mov.w	r1, #0
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065ae:	4689      	mov	r9, r1
 80065b0:	4692      	mov	sl, r2
 80065b2:	eb19 0005 	adds.w	r0, r9, r5
 80065b6:	eb4a 0106 	adc.w	r1, sl, r6
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	461d      	mov	r5, r3
 80065c0:	f04f 0600 	mov.w	r6, #0
 80065c4:	196b      	adds	r3, r5, r5
 80065c6:	eb46 0406 	adc.w	r4, r6, r6
 80065ca:	461a      	mov	r2, r3
 80065cc:	4623      	mov	r3, r4
 80065ce:	f7f9 fe6f 	bl	80002b0 <__aeabi_uldivmod>
 80065d2:	4603      	mov	r3, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	461a      	mov	r2, r3
 80065d8:	4b2c      	ldr	r3, [pc, #176]	; (800668c <UART_SetConfig+0x384>)
 80065da:	fba3 1302 	umull	r1, r3, r3, r2
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	2164      	movs	r1, #100	; 0x64
 80065e2:	fb01 f303 	mul.w	r3, r1, r3
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	3332      	adds	r3, #50	; 0x32
 80065ec:	4a27      	ldr	r2, [pc, #156]	; (800668c <UART_SetConfig+0x384>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065fa:	4498      	add	r8, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	461d      	mov	r5, r3
 8006600:	f04f 0600 	mov.w	r6, #0
 8006604:	46a9      	mov	r9, r5
 8006606:	46b2      	mov	sl, r6
 8006608:	eb19 0309 	adds.w	r3, r9, r9
 800660c:	eb4a 040a 	adc.w	r4, sl, sl
 8006610:	4699      	mov	r9, r3
 8006612:	46a2      	mov	sl, r4
 8006614:	eb19 0905 	adds.w	r9, r9, r5
 8006618:	eb4a 0a06 	adc.w	sl, sl, r6
 800661c:	f04f 0100 	mov.w	r1, #0
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800662c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006630:	4689      	mov	r9, r1
 8006632:	4692      	mov	sl, r2
 8006634:	eb19 0005 	adds.w	r0, r9, r5
 8006638:	eb4a 0106 	adc.w	r1, sl, r6
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	461d      	mov	r5, r3
 8006642:	f04f 0600 	mov.w	r6, #0
 8006646:	196b      	adds	r3, r5, r5
 8006648:	eb46 0406 	adc.w	r4, r6, r6
 800664c:	461a      	mov	r2, r3
 800664e:	4623      	mov	r3, r4
 8006650:	f7f9 fe2e 	bl	80002b0 <__aeabi_uldivmod>
 8006654:	4603      	mov	r3, r0
 8006656:	460c      	mov	r4, r1
 8006658:	461a      	mov	r2, r3
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <UART_SetConfig+0x384>)
 800665c:	fba3 1302 	umull	r1, r3, r3, r2
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	2164      	movs	r1, #100	; 0x64
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	3332      	adds	r3, #50	; 0x32
 800666e:	4a07      	ldr	r2, [pc, #28]	; (800668c <UART_SetConfig+0x384>)
 8006670:	fba2 2303 	umull	r2, r3, r2, r3
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	f003 0207 	and.w	r2, r3, #7
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4442      	add	r2, r8
 8006680:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006682:	e1b2      	b.n	80069ea <UART_SetConfig+0x6e2>
 8006684:	40011000 	.word	0x40011000
 8006688:	40011400 	.word	0x40011400
 800668c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4ad7      	ldr	r2, [pc, #860]	; (80069f4 <UART_SetConfig+0x6ec>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d005      	beq.n	80066a6 <UART_SetConfig+0x39e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4ad6      	ldr	r2, [pc, #856]	; (80069f8 <UART_SetConfig+0x6f0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	f040 80d1 	bne.w	8006848 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066a6:	f7fd ff39 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 80066aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	469a      	mov	sl, r3
 80066b0:	f04f 0b00 	mov.w	fp, #0
 80066b4:	46d0      	mov	r8, sl
 80066b6:	46d9      	mov	r9, fp
 80066b8:	eb18 0308 	adds.w	r3, r8, r8
 80066bc:	eb49 0409 	adc.w	r4, r9, r9
 80066c0:	4698      	mov	r8, r3
 80066c2:	46a1      	mov	r9, r4
 80066c4:	eb18 080a 	adds.w	r8, r8, sl
 80066c8:	eb49 090b 	adc.w	r9, r9, fp
 80066cc:	f04f 0100 	mov.w	r1, #0
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066e0:	4688      	mov	r8, r1
 80066e2:	4691      	mov	r9, r2
 80066e4:	eb1a 0508 	adds.w	r5, sl, r8
 80066e8:	eb4b 0609 	adc.w	r6, fp, r9
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4619      	mov	r1, r3
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	f04f 0400 	mov.w	r4, #0
 80066fe:	0094      	lsls	r4, r2, #2
 8006700:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006704:	008b      	lsls	r3, r1, #2
 8006706:	461a      	mov	r2, r3
 8006708:	4623      	mov	r3, r4
 800670a:	4628      	mov	r0, r5
 800670c:	4631      	mov	r1, r6
 800670e:	f7f9 fdcf 	bl	80002b0 <__aeabi_uldivmod>
 8006712:	4603      	mov	r3, r0
 8006714:	460c      	mov	r4, r1
 8006716:	461a      	mov	r2, r3
 8006718:	4bb8      	ldr	r3, [pc, #736]	; (80069fc <UART_SetConfig+0x6f4>)
 800671a:	fba3 2302 	umull	r2, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	469b      	mov	fp, r3
 8006728:	f04f 0c00 	mov.w	ip, #0
 800672c:	46d9      	mov	r9, fp
 800672e:	46e2      	mov	sl, ip
 8006730:	eb19 0309 	adds.w	r3, r9, r9
 8006734:	eb4a 040a 	adc.w	r4, sl, sl
 8006738:	4699      	mov	r9, r3
 800673a:	46a2      	mov	sl, r4
 800673c:	eb19 090b 	adds.w	r9, r9, fp
 8006740:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006744:	f04f 0100 	mov.w	r1, #0
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006758:	4689      	mov	r9, r1
 800675a:	4692      	mov	sl, r2
 800675c:	eb1b 0509 	adds.w	r5, fp, r9
 8006760:	eb4c 060a 	adc.w	r6, ip, sl
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	f04f 0400 	mov.w	r4, #0
 8006776:	0094      	lsls	r4, r2, #2
 8006778:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800677c:	008b      	lsls	r3, r1, #2
 800677e:	461a      	mov	r2, r3
 8006780:	4623      	mov	r3, r4
 8006782:	4628      	mov	r0, r5
 8006784:	4631      	mov	r1, r6
 8006786:	f7f9 fd93 	bl	80002b0 <__aeabi_uldivmod>
 800678a:	4603      	mov	r3, r0
 800678c:	460c      	mov	r4, r1
 800678e:	461a      	mov	r2, r3
 8006790:	4b9a      	ldr	r3, [pc, #616]	; (80069fc <UART_SetConfig+0x6f4>)
 8006792:	fba3 1302 	umull	r1, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	2164      	movs	r1, #100	; 0x64
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	3332      	adds	r3, #50	; 0x32
 80067a4:	4a95      	ldr	r2, [pc, #596]	; (80069fc <UART_SetConfig+0x6f4>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b0:	4498      	add	r8, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	469b      	mov	fp, r3
 80067b6:	f04f 0c00 	mov.w	ip, #0
 80067ba:	46d9      	mov	r9, fp
 80067bc:	46e2      	mov	sl, ip
 80067be:	eb19 0309 	adds.w	r3, r9, r9
 80067c2:	eb4a 040a 	adc.w	r4, sl, sl
 80067c6:	4699      	mov	r9, r3
 80067c8:	46a2      	mov	sl, r4
 80067ca:	eb19 090b 	adds.w	r9, r9, fp
 80067ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067d2:	f04f 0100 	mov.w	r1, #0
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067e6:	4689      	mov	r9, r1
 80067e8:	4692      	mov	sl, r2
 80067ea:	eb1b 0509 	adds.w	r5, fp, r9
 80067ee:	eb4c 060a 	adc.w	r6, ip, sl
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4619      	mov	r1, r3
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	f04f 0400 	mov.w	r4, #0
 8006804:	0094      	lsls	r4, r2, #2
 8006806:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800680a:	008b      	lsls	r3, r1, #2
 800680c:	461a      	mov	r2, r3
 800680e:	4623      	mov	r3, r4
 8006810:	4628      	mov	r0, r5
 8006812:	4631      	mov	r1, r6
 8006814:	f7f9 fd4c 	bl	80002b0 <__aeabi_uldivmod>
 8006818:	4603      	mov	r3, r0
 800681a:	460c      	mov	r4, r1
 800681c:	461a      	mov	r2, r3
 800681e:	4b77      	ldr	r3, [pc, #476]	; (80069fc <UART_SetConfig+0x6f4>)
 8006820:	fba3 1302 	umull	r1, r3, r3, r2
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	2164      	movs	r1, #100	; 0x64
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	3332      	adds	r3, #50	; 0x32
 8006832:	4a72      	ldr	r2, [pc, #456]	; (80069fc <UART_SetConfig+0x6f4>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4442      	add	r2, r8
 8006844:	609a      	str	r2, [r3, #8]
 8006846:	e0d0      	b.n	80069ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fd fe54 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 800684c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	469a      	mov	sl, r3
 8006852:	f04f 0b00 	mov.w	fp, #0
 8006856:	46d0      	mov	r8, sl
 8006858:	46d9      	mov	r9, fp
 800685a:	eb18 0308 	adds.w	r3, r8, r8
 800685e:	eb49 0409 	adc.w	r4, r9, r9
 8006862:	4698      	mov	r8, r3
 8006864:	46a1      	mov	r9, r4
 8006866:	eb18 080a 	adds.w	r8, r8, sl
 800686a:	eb49 090b 	adc.w	r9, r9, fp
 800686e:	f04f 0100 	mov.w	r1, #0
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800687a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800687e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006882:	4688      	mov	r8, r1
 8006884:	4691      	mov	r9, r2
 8006886:	eb1a 0508 	adds.w	r5, sl, r8
 800688a:	eb4b 0609 	adc.w	r6, fp, r9
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4619      	mov	r1, r3
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	f04f 0400 	mov.w	r4, #0
 80068a0:	0094      	lsls	r4, r2, #2
 80068a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068a6:	008b      	lsls	r3, r1, #2
 80068a8:	461a      	mov	r2, r3
 80068aa:	4623      	mov	r3, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	4631      	mov	r1, r6
 80068b0:	f7f9 fcfe 	bl	80002b0 <__aeabi_uldivmod>
 80068b4:	4603      	mov	r3, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b50      	ldr	r3, [pc, #320]	; (80069fc <UART_SetConfig+0x6f4>)
 80068bc:	fba3 2302 	umull	r2, r3, r3, r2
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	469b      	mov	fp, r3
 80068ca:	f04f 0c00 	mov.w	ip, #0
 80068ce:	46d9      	mov	r9, fp
 80068d0:	46e2      	mov	sl, ip
 80068d2:	eb19 0309 	adds.w	r3, r9, r9
 80068d6:	eb4a 040a 	adc.w	r4, sl, sl
 80068da:	4699      	mov	r9, r3
 80068dc:	46a2      	mov	sl, r4
 80068de:	eb19 090b 	adds.w	r9, r9, fp
 80068e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068e6:	f04f 0100 	mov.w	r1, #0
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068fa:	4689      	mov	r9, r1
 80068fc:	4692      	mov	sl, r2
 80068fe:	eb1b 0509 	adds.w	r5, fp, r9
 8006902:	eb4c 060a 	adc.w	r6, ip, sl
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4619      	mov	r1, r3
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	f04f 0400 	mov.w	r4, #0
 8006918:	0094      	lsls	r4, r2, #2
 800691a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800691e:	008b      	lsls	r3, r1, #2
 8006920:	461a      	mov	r2, r3
 8006922:	4623      	mov	r3, r4
 8006924:	4628      	mov	r0, r5
 8006926:	4631      	mov	r1, r6
 8006928:	f7f9 fcc2 	bl	80002b0 <__aeabi_uldivmod>
 800692c:	4603      	mov	r3, r0
 800692e:	460c      	mov	r4, r1
 8006930:	461a      	mov	r2, r3
 8006932:	4b32      	ldr	r3, [pc, #200]	; (80069fc <UART_SetConfig+0x6f4>)
 8006934:	fba3 1302 	umull	r1, r3, r3, r2
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	2164      	movs	r1, #100	; 0x64
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	3332      	adds	r3, #50	; 0x32
 8006946:	4a2d      	ldr	r2, [pc, #180]	; (80069fc <UART_SetConfig+0x6f4>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006952:	4498      	add	r8, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	469b      	mov	fp, r3
 8006958:	f04f 0c00 	mov.w	ip, #0
 800695c:	46d9      	mov	r9, fp
 800695e:	46e2      	mov	sl, ip
 8006960:	eb19 0309 	adds.w	r3, r9, r9
 8006964:	eb4a 040a 	adc.w	r4, sl, sl
 8006968:	4699      	mov	r9, r3
 800696a:	46a2      	mov	sl, r4
 800696c:	eb19 090b 	adds.w	r9, r9, fp
 8006970:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006974:	f04f 0100 	mov.w	r1, #0
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006988:	4689      	mov	r9, r1
 800698a:	4692      	mov	sl, r2
 800698c:	eb1b 0509 	adds.w	r5, fp, r9
 8006990:	eb4c 060a 	adc.w	r6, ip, sl
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4619      	mov	r1, r3
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	f04f 0400 	mov.w	r4, #0
 80069a6:	0094      	lsls	r4, r2, #2
 80069a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069ac:	008b      	lsls	r3, r1, #2
 80069ae:	461a      	mov	r2, r3
 80069b0:	4623      	mov	r3, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	4631      	mov	r1, r6
 80069b6:	f7f9 fc7b 	bl	80002b0 <__aeabi_uldivmod>
 80069ba:	4603      	mov	r3, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	461a      	mov	r2, r3
 80069c0:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <UART_SetConfig+0x6f4>)
 80069c2:	fba3 1302 	umull	r1, r3, r3, r2
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	2164      	movs	r1, #100	; 0x64
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	3332      	adds	r3, #50	; 0x32
 80069d4:	4a09      	ldr	r2, [pc, #36]	; (80069fc <UART_SetConfig+0x6f4>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4442      	add	r2, r8
 80069e6:	609a      	str	r2, [r3, #8]
}
 80069e8:	e7ff      	b.n	80069ea <UART_SetConfig+0x6e2>
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	40011000 	.word	0x40011000
 80069f8:	40011400 	.word	0x40011400
 80069fc:	51eb851f 	.word	0x51eb851f

08006a00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a04:	4904      	ldr	r1, [pc, #16]	; (8006a18 <MX_FATFS_Init+0x18>)
 8006a06:	4805      	ldr	r0, [pc, #20]	; (8006a1c <MX_FATFS_Init+0x1c>)
 8006a08:	f002 fa0e 	bl	8008e28 <FATFS_LinkDriver>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <MX_FATFS_Init+0x20>)
 8006a12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006a14:	bf00      	nop
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20003fd8 	.word	0x20003fd8
 8006a1c:	20000010 	.word	0x20000010
 8006a20:	20003fdc 	.word	0x20003fdc

08006a24 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fc f92d 	bl	8002ca0 <USER_SPI_initialize>
 8006a46:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fc f9ff 	bl	8002e60 <USER_SPI_status>
 8006a62:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006a7c:	7bf8      	ldrb	r0, [r7, #15]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	f7fc fa02 	bl	8002e8c <USER_SPI_read>
 8006a88:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006aa2:	7bf8      	ldrb	r0, [r7, #15]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	f7fc fa55 	bl	8002f58 <USER_SPI_write>
 8006aae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	603a      	str	r2, [r7, #0]
 8006ac2:	71fb      	strb	r3, [r7, #7]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006ac8:	79b9      	ldrb	r1, [r7, #6]
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fc fabe 	bl	8003050 <USER_SPI_ioctl>
 8006ad4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <disk_status+0x30>)
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	79fa      	ldrb	r2, [r7, #7]
 8006af8:	4905      	ldr	r1, [pc, #20]	; (8006b10 <disk_status+0x30>)
 8006afa:	440a      	add	r2, r1
 8006afc:	7a12      	ldrb	r2, [r2, #8]
 8006afe:	4610      	mov	r0, r2
 8006b00:	4798      	blx	r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20000134 	.word	0x20000134

08006b14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <disk_initialize+0x48>)
 8006b26:	5cd3      	ldrb	r3, [r2, r3]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d111      	bne.n	8006b50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <disk_initialize+0x48>)
 8006b30:	2101      	movs	r1, #1
 8006b32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <disk_initialize+0x48>)
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	79fa      	ldrb	r2, [r7, #7]
 8006b42:	4906      	ldr	r1, [pc, #24]	; (8006b5c <disk_initialize+0x48>)
 8006b44:	440a      	add	r2, r1
 8006b46:	7a12      	ldrb	r2, [r2, #8]
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000134 	.word	0x20000134

08006b60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <disk_read+0x3c>)
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	689c      	ldr	r4, [r3, #8]
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	4a07      	ldr	r2, [pc, #28]	; (8006b9c <disk_read+0x3c>)
 8006b80:	4413      	add	r3, r2
 8006b82:	7a18      	ldrb	r0, [r3, #8]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	47a0      	blx	r4
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd90      	pop	{r4, r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000134 	.word	0x20000134

08006ba0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <disk_write+0x3c>)
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68dc      	ldr	r4, [r3, #12]
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	4a07      	ldr	r2, [pc, #28]	; (8006bdc <disk_write+0x3c>)
 8006bc0:	4413      	add	r3, r2
 8006bc2:	7a18      	ldrb	r0, [r3, #8]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	47a0      	blx	r4
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]
  return res;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd90      	pop	{r4, r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000134 	.word	0x20000134

08006be0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	603a      	str	r2, [r7, #0]
 8006bea:	71fb      	strb	r3, [r7, #7]
 8006bec:	460b      	mov	r3, r1
 8006bee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <disk_ioctl+0x38>)
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	79fa      	ldrb	r2, [r7, #7]
 8006bfe:	4906      	ldr	r1, [pc, #24]	; (8006c18 <disk_ioctl+0x38>)
 8006c00:	440a      	add	r2, r1
 8006c02:	7a10      	ldrb	r0, [r2, #8]
 8006c04:	79b9      	ldrb	r1, [r7, #6]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4798      	blx	r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000134 	.word	0x20000134

08006c1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3301      	adds	r3, #1
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006c2c:	89fb      	ldrh	r3, [r7, #14]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	b21a      	sxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b21b      	sxth	r3, r3
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	b21b      	sxth	r3, r3
 8006c3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3303      	adds	r3, #3
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	3202      	adds	r2, #2
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	3201      	adds	r2, #1
 8006c72:	7812      	ldrb	r2, [r2, #0]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c84:	68fb      	ldr	r3, [r7, #12]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	887a      	ldrh	r2, [r7, #2]
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	887b      	ldrh	r3, [r7, #2]
 8006cac:	0a1b      	lsrs	r3, r3, #8
 8006cae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	887a      	ldrh	r2, [r7, #2]
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	1c53      	adds	r3, r2, #1
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	1c59      	adds	r1, r3, #1
 8006d44:	6179      	str	r1, [r7, #20]
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f1      	bne.n	8006d3a <mem_cpy+0x1a>
	}
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	617a      	str	r2, [r7, #20]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f3      	bne.n	8006d72 <mem_set+0x10>
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006d96:	b480      	push	{r7}
 8006d98:	b089      	sub	sp, #36	; 0x24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	61fa      	str	r2, [r7, #28]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	61ba      	str	r2, [r7, #24]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	1acb      	subs	r3, r1, r3
 8006dc2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	607b      	str	r3, [r7, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <mem_cmp+0x40>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0eb      	beq.n	8006dae <mem_cmp+0x18>

	return r;
 8006dd6:	697b      	ldr	r3, [r7, #20]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3724      	adds	r7, #36	; 0x24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006dee:	e002      	b.n	8006df6 <chk_chr+0x12>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3301      	adds	r3, #1
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <chk_chr+0x26>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d1f2      	bne.n	8006df0 <chk_chr+0xc>
	return *str;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e26:	2300      	movs	r3, #0
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e029      	b.n	8006e84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006e30:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <chk_lock+0xb4>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	4413      	add	r3, r2
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01d      	beq.n	8006e7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e3e:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <chk_lock+0xb4>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	4413      	add	r3, r2
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d116      	bne.n	8006e7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006e50:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <chk_lock+0xb4>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	4413      	add	r3, r2
 8006e58:	3304      	adds	r3, #4
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d10c      	bne.n	8006e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e64:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <chk_lock+0xb4>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d102      	bne.n	8006e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e78:	e007      	b.n	8006e8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d9d2      	bls.n	8006e30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d109      	bne.n	8006ea4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <chk_lock+0x80>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d101      	bne.n	8006ea0 <chk_lock+0x84>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e010      	b.n	8006ec2 <chk_lock+0xa6>
 8006ea0:	2312      	movs	r3, #18
 8006ea2:	e00e      	b.n	8006ec2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d108      	bne.n	8006ebc <chk_lock+0xa0>
 8006eaa:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <chk_lock+0xb4>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	4413      	add	r3, r2
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eba:	d101      	bne.n	8006ec0 <chk_lock+0xa4>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	e000      	b.n	8006ec2 <chk_lock+0xa6>
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000114 	.word	0x20000114

08006ed4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
 8006ede:	e002      	b.n	8006ee6 <enq_lock+0x12>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d806      	bhi.n	8006efa <enq_lock+0x26>
 8006eec:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <enq_lock+0x40>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4413      	add	r3, r2
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f2      	bne.n	8006ee0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000114 	.word	0x20000114

08006f18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e01f      	b.n	8006f68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006f28:	4a41      	ldr	r2, [pc, #260]	; (8007030 <inc_lock+0x118>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	4413      	add	r3, r2
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d113      	bne.n	8006f62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006f3a:	4a3d      	ldr	r2, [pc, #244]	; (8007030 <inc_lock+0x118>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	4413      	add	r3, r2
 8006f42:	3304      	adds	r3, #4
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d109      	bne.n	8006f62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006f4e:	4a38      	ldr	r2, [pc, #224]	; (8007030 <inc_lock+0x118>)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	4413      	add	r3, r2
 8006f56:	3308      	adds	r3, #8
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d006      	beq.n	8006f70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d9dc      	bls.n	8006f28 <inc_lock+0x10>
 8006f6e:	e000      	b.n	8006f72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d132      	bne.n	8006fde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e002      	b.n	8006f84 <inc_lock+0x6c>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d806      	bhi.n	8006f98 <inc_lock+0x80>
 8006f8a:	4a29      	ldr	r2, [pc, #164]	; (8007030 <inc_lock+0x118>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4413      	add	r3, r2
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f2      	bne.n	8006f7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d101      	bne.n	8006fa2 <inc_lock+0x8a>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e040      	b.n	8007024 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4922      	ldr	r1, [pc, #136]	; (8007030 <inc_lock+0x118>)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	440b      	add	r3, r1
 8006fae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	491e      	ldr	r1, [pc, #120]	; (8007030 <inc_lock+0x118>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	440b      	add	r3, r1
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695a      	ldr	r2, [r3, #20]
 8006fc4:	491a      	ldr	r1, [pc, #104]	; (8007030 <inc_lock+0x118>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	440b      	add	r3, r1
 8006fcc:	3308      	adds	r3, #8
 8006fce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006fd0:	4a17      	ldr	r2, [pc, #92]	; (8007030 <inc_lock+0x118>)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	4413      	add	r3, r2
 8006fd8:	330c      	adds	r3, #12
 8006fda:	2200      	movs	r2, #0
 8006fdc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <inc_lock+0xe0>
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <inc_lock+0x118>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	330c      	adds	r3, #12
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <inc_lock+0xe0>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e015      	b.n	8007024 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d108      	bne.n	8007010 <inc_lock+0xf8>
 8006ffe:	4a0c      	ldr	r2, [pc, #48]	; (8007030 <inc_lock+0x118>)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	4413      	add	r3, r2
 8007006:	330c      	adds	r3, #12
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	3301      	adds	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	e001      	b.n	8007014 <inc_lock+0xfc>
 8007010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007014:	4906      	ldr	r1, [pc, #24]	; (8007030 <inc_lock+0x118>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	440b      	add	r3, r1
 800701c:	330c      	adds	r3, #12
 800701e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	20000114 	.word	0x20000114

08007034 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3b01      	subs	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d825      	bhi.n	8007094 <dec_lock+0x60>
		n = Files[i].ctr;
 8007048:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <dec_lock+0x74>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	4413      	add	r3, r2
 8007050:	330c      	adds	r3, #12
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007056:	89fb      	ldrh	r3, [r7, #14]
 8007058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705c:	d101      	bne.n	8007062 <dec_lock+0x2e>
 800705e:	2300      	movs	r3, #0
 8007060:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007062:	89fb      	ldrh	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <dec_lock+0x3a>
 8007068:	89fb      	ldrh	r3, [r7, #14]
 800706a:	3b01      	subs	r3, #1
 800706c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800706e:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <dec_lock+0x74>)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	4413      	add	r3, r2
 8007076:	330c      	adds	r3, #12
 8007078:	89fa      	ldrh	r2, [r7, #14]
 800707a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800707c:	89fb      	ldrh	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <dec_lock+0x5a>
 8007082:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <dec_lock+0x74>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	4413      	add	r3, r2
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	737b      	strb	r3, [r7, #13]
 8007092:	e001      	b.n	8007098 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007094:	2302      	movs	r3, #2
 8007096:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007098:	7b7b      	ldrb	r3, [r7, #13]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000114 	.word	0x20000114

080070ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e010      	b.n	80070dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80070ba:	4a0d      	ldr	r2, [pc, #52]	; (80070f0 <clear_lock+0x44>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4413      	add	r3, r2
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d105      	bne.n	80070d6 <clear_lock+0x2a>
 80070ca:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <clear_lock+0x44>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d9eb      	bls.n	80070ba <clear_lock+0xe>
	}
}
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000114 	.word	0x20000114

080070f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	78db      	ldrb	r3, [r3, #3]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d034      	beq.n	8007172 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7858      	ldrb	r0, [r3, #1]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007118:	2301      	movs	r3, #1
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f7ff fd40 	bl	8006ba0 <disk_write>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007126:	2301      	movs	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	e022      	b.n	8007172 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	429a      	cmp	r2, r3
 8007140:	d217      	bcs.n	8007172 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	789b      	ldrb	r3, [r3, #2]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	e010      	b.n	800716c <sync_window+0x78>
					wsect += fs->fsize;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7858      	ldrb	r0, [r3, #1]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800715e:	2301      	movs	r3, #1
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	f7ff fd1d 	bl	8006ba0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3b01      	subs	r3, #1
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d8eb      	bhi.n	800714a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d01b      	beq.n	80071cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ffad 	bl	80070f4 <sync_window>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d113      	bne.n	80071cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7858      	ldrb	r0, [r3, #1]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071ae:	2301      	movs	r3, #1
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	f7ff fcd5 	bl	8006b60 <disk_read>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff87 	bl	80070f4 <sync_window>
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d158      	bne.n	80072a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d148      	bne.n	800728a <sync_fs+0xb2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d144      	bne.n	800728a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3330      	adds	r3, #48	; 0x30
 8007204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fda9 	bl	8006d62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3330      	adds	r3, #48	; 0x30
 8007214:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007218:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fd38 	bl	8006c92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3330      	adds	r3, #48	; 0x30
 8007226:	4921      	ldr	r1, [pc, #132]	; (80072ac <sync_fs+0xd4>)
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fd4d 	bl	8006cc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3330      	adds	r3, #48	; 0x30
 8007232:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007236:	491e      	ldr	r1, [pc, #120]	; (80072b0 <sync_fs+0xd8>)
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fd45 	bl	8006cc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3330      	adds	r3, #48	; 0x30
 8007242:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff fd3b 	bl	8006cc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3330      	adds	r3, #48	; 0x30
 8007256:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7ff fd31 	bl	8006cc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7858      	ldrb	r0, [r3, #1]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	2301      	movs	r3, #1
 8007280:	f7ff fc8e 	bl	8006ba0 <disk_write>
			fs->fsi_flag = 0;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2200      	movs	r2, #0
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff fca4 	bl	8006be0 <disk_ioctl>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <sync_fs+0xca>
 800729e:	2301      	movs	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	41615252 	.word	0x41615252
 80072b0:	61417272 	.word	0x61417272

080072b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3b02      	subs	r3, #2
 80072c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	3b02      	subs	r3, #2
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d301      	bcc.n	80072d4 <clust2sect+0x20>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e008      	b.n	80072e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	895b      	ldrh	r3, [r3, #10]
 80072d8:	461a      	mov	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	fb03 f202 	mul.w	r2, r3, r2
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	4413      	add	r3, r2
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d904      	bls.n	8007312 <get_fat+0x20>
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007312:	2301      	movs	r3, #1
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	e08c      	b.n	8007432 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800731c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d045      	beq.n	80073b2 <get_fat+0xc0>
 8007326:	2b03      	cmp	r3, #3
 8007328:	d05d      	beq.n	80073e6 <get_fat+0xf4>
 800732a:	2b01      	cmp	r3, #1
 800732c:	d177      	bne.n	800741e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	085b      	lsrs	r3, r3, #1
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	0a5b      	lsrs	r3, r3, #9
 8007344:	4413      	add	r3, r2
 8007346:	4619      	mov	r1, r3
 8007348:	6938      	ldr	r0, [r7, #16]
 800734a:	f7ff ff17 	bl	800717c <move_window>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d167      	bne.n	8007424 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	60fa      	str	r2, [r7, #12]
 800735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4413      	add	r3, r2
 8007362:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007366:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	0a5b      	lsrs	r3, r3, #9
 8007370:	4413      	add	r3, r2
 8007372:	4619      	mov	r1, r3
 8007374:	6938      	ldr	r0, [r7, #16]
 8007376:	f7ff ff01 	bl	800717c <move_window>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d153      	bne.n	8007428 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4413      	add	r3, r2
 800738a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	461a      	mov	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4313      	orrs	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <get_fat+0xb6>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	e002      	b.n	80073ae <get_fat+0xbc>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ae:	617b      	str	r3, [r7, #20]
			break;
 80073b0:	e03f      	b.n	8007432 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	0a1b      	lsrs	r3, r3, #8
 80073ba:	4413      	add	r3, r2
 80073bc:	4619      	mov	r1, r3
 80073be:	6938      	ldr	r0, [r7, #16]
 80073c0:	f7ff fedc 	bl	800717c <move_window>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d130      	bne.n	800742c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80073d8:	4413      	add	r3, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fc1e 	bl	8006c1c <ld_word>
 80073e0:	4603      	mov	r3, r0
 80073e2:	617b      	str	r3, [r7, #20]
			break;
 80073e4:	e025      	b.n	8007432 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6a1a      	ldr	r2, [r3, #32]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	09db      	lsrs	r3, r3, #7
 80073ee:	4413      	add	r3, r2
 80073f0:	4619      	mov	r1, r3
 80073f2:	6938      	ldr	r0, [r7, #16]
 80073f4:	f7ff fec2 	bl	800717c <move_window>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d118      	bne.n	8007430 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800740c:	4413      	add	r3, r2
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fc1c 	bl	8006c4c <ld_dword>
 8007414:	4603      	mov	r3, r0
 8007416:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800741a:	617b      	str	r3, [r7, #20]
			break;
 800741c:	e009      	b.n	8007432 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e006      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007430:	bf00      	nop
		}
	}

	return val;
 8007432:	697b      	ldr	r3, [r7, #20]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800743c:	b590      	push	{r4, r7, lr}
 800743e:	b089      	sub	sp, #36	; 0x24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007448:	2302      	movs	r3, #2
 800744a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b01      	cmp	r3, #1
 8007450:	f240 80d6 	bls.w	8007600 <put_fat+0x1c4>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	429a      	cmp	r2, r3
 800745c:	f080 80d0 	bcs.w	8007600 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d073      	beq.n	8007550 <put_fat+0x114>
 8007468:	2b03      	cmp	r3, #3
 800746a:	f000 8091 	beq.w	8007590 <put_fat+0x154>
 800746e:	2b01      	cmp	r3, #1
 8007470:	f040 80c6 	bne.w	8007600 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4413      	add	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	0a5b      	lsrs	r3, r3, #9
 800748a:	4413      	add	r3, r2
 800748c:	4619      	mov	r1, r3
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fe74 	bl	800717c <move_window>
 8007494:	4603      	mov	r3, r0
 8007496:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007498:	7ffb      	ldrb	r3, [r7, #31]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f040 80a9 	bne.w	80075f2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	61b9      	str	r1, [r7, #24]
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	4413      	add	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <put_fat+0x9e>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b25b      	sxtb	r3, r3
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	b25a      	sxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	4313      	orrs	r3, r2
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	e001      	b.n	80074de <put_fat+0xa2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	0a5b      	lsrs	r3, r3, #9
 80074f0:	4413      	add	r3, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7ff fe41 	bl	800717c <move_window>
 80074fa:	4603      	mov	r3, r0
 80074fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074fe:	7ffb      	ldrb	r3, [r7, #31]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d178      	bne.n	80075f6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <put_fat+0xea>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	091b      	lsrs	r3, r3, #4
 8007522:	b2db      	uxtb	r3, r3
 8007524:	e00e      	b.n	8007544 <put_fat+0x108>
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b25b      	sxtb	r3, r3
 800752c:	f023 030f 	bic.w	r3, r3, #15
 8007530:	b25a      	sxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	b25b      	sxtb	r3, r3
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	b25b      	sxtb	r3, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	b25b      	sxtb	r3, r3
 8007542:	b2db      	uxtb	r3, r3
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	70da      	strb	r2, [r3, #3]
			break;
 800754e:	e057      	b.n	8007600 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	4413      	add	r3, r2
 800755a:	4619      	mov	r1, r3
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff fe0d 	bl	800717c <move_window>
 8007562:	4603      	mov	r3, r0
 8007564:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007566:	7ffb      	ldrb	r3, [r7, #31]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d146      	bne.n	80075fa <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800757a:	4413      	add	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	b292      	uxth	r2, r2
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fb85 	bl	8006c92 <st_word>
			fs->wflag = 1;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	70da      	strb	r2, [r3, #3]
			break;
 800758e:	e037      	b.n	8007600 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	09db      	lsrs	r3, r3, #7
 8007598:	4413      	add	r3, r2
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff fded 	bl	800717c <move_window>
 80075a2:	4603      	mov	r3, r0
 80075a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d128      	bne.n	80075fe <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075c0:	4413      	add	r3, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff fb42 	bl	8006c4c <ld_dword>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075ce:	4323      	orrs	r3, r4
 80075d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075e0:	4413      	add	r3, r2
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fb6f 	bl	8006cc8 <st_dword>
			fs->wflag = 1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	70da      	strb	r2, [r3, #3]
			break;
 80075f0:	e006      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075f2:	bf00      	nop
 80075f4:	e004      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075f6:	bf00      	nop
 80075f8:	e002      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075fe:	bf00      	nop
		}
	}
	return res;
 8007600:	7ffb      	ldrb	r3, [r7, #31]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3724      	adds	r7, #36	; 0x24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd90      	pop	{r4, r7, pc}

0800760a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b088      	sub	sp, #32
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d904      	bls.n	8007630 <remove_chain+0x26>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d301      	bcc.n	8007634 <remove_chain+0x2a>
 8007630:	2302      	movs	r3, #2
 8007632:	e04b      	b.n	80076cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00c      	beq.n	8007654 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800763a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	69b8      	ldr	r0, [r7, #24]
 8007642:	f7ff fefb 	bl	800743c <put_fat>
 8007646:	4603      	mov	r3, r0
 8007648:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800764a:	7ffb      	ldrb	r3, [r7, #31]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <remove_chain+0x4a>
 8007650:	7ffb      	ldrb	r3, [r7, #31]
 8007652:	e03b      	b.n	80076cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fe4b 	bl	80072f2 <get_fat>
 800765c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d031      	beq.n	80076c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <remove_chain+0x64>
 800766a:	2302      	movs	r3, #2
 800766c:	e02e      	b.n	80076cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007674:	d101      	bne.n	800767a <remove_chain+0x70>
 8007676:	2301      	movs	r3, #1
 8007678:	e028      	b.n	80076cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800767a:	2200      	movs	r2, #0
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	69b8      	ldr	r0, [r7, #24]
 8007680:	f7ff fedc 	bl	800743c <put_fat>
 8007684:	4603      	mov	r3, r0
 8007686:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007688:	7ffb      	ldrb	r3, [r7, #31]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <remove_chain+0x88>
 800768e:	7ffb      	ldrb	r3, [r7, #31]
 8007690:	e01c      	b.n	80076cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	691a      	ldr	r2, [r3, #16]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	3b02      	subs	r3, #2
 800769c:	429a      	cmp	r2, r3
 800769e:	d20b      	bcs.n	80076b8 <remove_chain+0xae>
			fs->free_clst++;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	791b      	ldrb	r3, [r3, #4]
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d3c6      	bcc.n	8007654 <remove_chain+0x4a>
 80076c6:	e000      	b.n	80076ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80076c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10d      	bne.n	8007706 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <create_chain+0x2c>
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d31b      	bcc.n	8007738 <create_chain+0x64>
 8007700:	2301      	movs	r3, #1
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e018      	b.n	8007738 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff fdf2 	bl	80072f2 <get_fat>
 800770e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d801      	bhi.n	800771a <create_chain+0x46>
 8007716:	2301      	movs	r3, #1
 8007718:	e070      	b.n	80077fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007720:	d101      	bne.n	8007726 <create_chain+0x52>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	e06a      	b.n	80077fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	429a      	cmp	r2, r3
 800772e:	d201      	bcs.n	8007734 <create_chain+0x60>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	e063      	b.n	80077fc <create_chain+0x128>
		scl = clst;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3301      	adds	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	429a      	cmp	r2, r3
 800774a:	d307      	bcc.n	800775c <create_chain+0x88>
				ncl = 2;
 800774c:	2302      	movs	r3, #2
 800774e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	429a      	cmp	r2, r3
 8007756:	d901      	bls.n	800775c <create_chain+0x88>
 8007758:	2300      	movs	r3, #0
 800775a:	e04f      	b.n	80077fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800775c:	69f9      	ldr	r1, [r7, #28]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fdc7 	bl	80072f2 <get_fat>
 8007764:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00e      	beq.n	800778a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d003      	beq.n	800777a <create_chain+0xa6>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007778:	d101      	bne.n	800777e <create_chain+0xaa>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	e03e      	b.n	80077fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	429a      	cmp	r2, r3
 8007784:	d1da      	bne.n	800773c <create_chain+0x68>
 8007786:	2300      	movs	r3, #0
 8007788:	e038      	b.n	80077fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800778a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800778c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007790:	69f9      	ldr	r1, [r7, #28]
 8007792:	6938      	ldr	r0, [r7, #16]
 8007794:	f7ff fe52 	bl	800743c <put_fat>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <create_chain+0xe2>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6938      	ldr	r0, [r7, #16]
 80077ae:	f7ff fe45 	bl	800743c <put_fat>
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d116      	bne.n	80077ea <create_chain+0x116>
		fs->last_clst = ncl;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	691a      	ldr	r2, [r3, #16]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	3b02      	subs	r3, #2
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d804      	bhi.n	80077da <create_chain+0x106>
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	711a      	strb	r2, [r3, #4]
 80077e8:	e007      	b.n	80077fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d102      	bne.n	80077f6 <create_chain+0x122>
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077f4:	e000      	b.n	80077f8 <create_chain+0x124>
 80077f6:	2301      	movs	r3, #1
 80077f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80077fa:	69fb      	ldr	r3, [r7, #28]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	3304      	adds	r3, #4
 800781a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	0a5b      	lsrs	r3, r3, #9
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	8952      	ldrh	r2, [r2, #10]
 8007824:	fbb3 f3f2 	udiv	r3, r3, r2
 8007828:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1d1a      	adds	r2, r3, #4
 800782e:	613a      	str	r2, [r7, #16]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <clmt_clust+0x3a>
 800783a:	2300      	movs	r3, #0
 800783c:	e010      	b.n	8007860 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	d307      	bcc.n	8007856 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3304      	adds	r3, #4
 8007852:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007854:	e7e9      	b.n	800782a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007856:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007882:	d204      	bcs.n	800788e <dir_sdi+0x22>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <dir_sdi+0x26>
		return FR_INT_ERR;
 800788e:	2302      	movs	r3, #2
 8007890:	e063      	b.n	800795a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <dir_sdi+0x46>
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d902      	bls.n	80078b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10c      	bne.n	80078d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	8912      	ldrh	r2, [r2, #8]
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d301      	bcc.n	80078c8 <dir_sdi+0x5c>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e048      	b.n	800795a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	61da      	str	r2, [r3, #28]
 80078d0:	e029      	b.n	8007926 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	895b      	ldrh	r3, [r3, #10]
 80078d6:	025b      	lsls	r3, r3, #9
 80078d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078da:	e019      	b.n	8007910 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6979      	ldr	r1, [r7, #20]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fd06 	bl	80072f2 <get_fat>
 80078e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ee:	d101      	bne.n	80078f4 <dir_sdi+0x88>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e032      	b.n	800795a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d904      	bls.n	8007904 <dir_sdi+0x98>
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	429a      	cmp	r2, r3
 8007902:	d301      	bcc.n	8007908 <dir_sdi+0x9c>
 8007904:	2302      	movs	r3, #2
 8007906:	e028      	b.n	800795a <dir_sdi+0xee>
			ofs -= csz;
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	429a      	cmp	r2, r3
 8007916:	d2e1      	bcs.n	80078dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007918:	6979      	ldr	r1, [r7, #20]
 800791a:	6938      	ldr	r0, [r7, #16]
 800791c:	f7ff fcca 	bl	80072b4 <clust2sect>
 8007920:	4602      	mov	r2, r0
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <dir_sdi+0xcc>
 8007934:	2302      	movs	r3, #2
 8007936:	e010      	b.n	800795a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	0a5b      	lsrs	r3, r3, #9
 8007940:	441a      	add	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007952:	441a      	add	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	3320      	adds	r3, #32
 8007978:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <dir_next+0x28>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007988:	d301      	bcc.n	800798e <dir_next+0x2c>
 800798a:	2304      	movs	r3, #4
 800798c:	e0aa      	b.n	8007ae4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 8098 	bne.w	8007aca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	8912      	ldrh	r2, [r2, #8]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	f0c0 8088 	bcc.w	8007aca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	61da      	str	r2, [r3, #28]
 80079c0:	2304      	movs	r3, #4
 80079c2:	e08f      	b.n	8007ae4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	0a5b      	lsrs	r3, r3, #9
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	8952      	ldrh	r2, [r2, #10]
 80079cc:	3a01      	subs	r2, #1
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d17a      	bne.n	8007aca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7ff fc88 	bl	80072f2 <get_fat>
 80079e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d801      	bhi.n	80079ee <dir_next+0x8c>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e07a      	b.n	8007ae4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f4:	d101      	bne.n	80079fa <dir_next+0x98>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e074      	b.n	8007ae4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d358      	bcc.n	8007ab6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	61da      	str	r2, [r3, #28]
 8007a10:	2304      	movs	r3, #4
 8007a12:	e067      	b.n	8007ae4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f7ff fe59 	bl	80076d4 <create_chain>
 8007a22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <dir_next+0xcc>
 8007a2a:	2307      	movs	r3, #7
 8007a2c:	e05a      	b.n	8007ae4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <dir_next+0xd6>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e055      	b.n	8007ae4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a3e:	d101      	bne.n	8007a44 <dir_next+0xe2>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e04f      	b.n	8007ae4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff fb55 	bl	80070f4 <sync_window>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <dir_next+0xf2>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e047      	b.n	8007ae4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3330      	adds	r3, #48	; 0x30
 8007a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff f97f 	bl	8006d62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	6979      	ldr	r1, [r7, #20]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff fc22 	bl	80072b4 <clust2sect>
 8007a70:	4602      	mov	r2, r0
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a76:	e012      	b.n	8007a9e <dir_next+0x13c>
						fs->wflag = 1;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff fb38 	bl	80070f4 <sync_window>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <dir_next+0x12c>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e02a      	b.n	8007ae4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3301      	adds	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	895b      	ldrh	r3, [r3, #10]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d3e6      	bcc.n	8007a78 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad2      	subs	r2, r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007abc:	6979      	ldr	r1, [r7, #20]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fbf8 	bl	80072b4 <clust2sect>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007adc:	441a      	add	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007afc:	2100      	movs	r1, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff feb4 	bl	800786c <dir_sdi>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d12b      	bne.n	8007b66 <dir_alloc+0x7a>
		n = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4619      	mov	r1, r3
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff fb2f 	bl	800717c <move_window>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11d      	bne.n	8007b64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2be5      	cmp	r3, #229	; 0xe5
 8007b30:	d004      	beq.n	8007b3c <dir_alloc+0x50>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d102      	bne.n	8007b50 <dir_alloc+0x64>
 8007b4a:	e00c      	b.n	8007b66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff05 	bl	8007962 <dir_next>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0d7      	beq.n	8007b12 <dir_alloc+0x26>
 8007b62:	e000      	b.n	8007b66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007b64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d101      	bne.n	8007b70 <dir_alloc+0x84>
 8007b6c:	2307      	movs	r3, #7
 8007b6e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	331a      	adds	r3, #26
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff f847 	bl	8006c1c <ld_word>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d109      	bne.n	8007bae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff f83c 	bl	8006c1c <ld_word>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	331a      	adds	r3, #26
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff f85f 	bl	8006c92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d109      	bne.n	8007bf0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f103 0214 	add.w	r2, r3, #20
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7ff f851 	bl	8006c92 <st_word>
	}
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c06:	2100      	movs	r1, #0
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fe2f 	bl	800786c <dir_sdi>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <dir_find+0x24>
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	e03e      	b.n	8007c9a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6938      	ldr	r0, [r7, #16]
 8007c24:	f7ff faaa 	bl	800717c <move_window>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d12f      	bne.n	8007c92 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <dir_find+0x4e>
 8007c40:	2304      	movs	r3, #4
 8007c42:	75fb      	strb	r3, [r7, #23]
 8007c44:	e028      	b.n	8007c98 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	330b      	adds	r3, #11
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	330b      	adds	r3, #11
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <dir_find+0x86>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a18      	ldr	r0, [r3, #32]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3324      	adds	r3, #36	; 0x24
 8007c70:	220b      	movs	r2, #11
 8007c72:	4619      	mov	r1, r3
 8007c74:	f7ff f88f 	bl	8006d96 <mem_cmp>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fe6e 	bl	8007962 <dir_next>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0c5      	beq.n	8007c1c <dir_find+0x24>
 8007c90:	e002      	b.n	8007c98 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007c92:	bf00      	nop
 8007c94:	e000      	b.n	8007c98 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c96:	bf00      	nop

	return res;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff ff1a 	bl	8007aec <dir_alloc>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11c      	bne.n	8007cfc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	f7ff fa57 	bl	800717c <move_window>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d111      	bne.n	8007cfc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	2100      	movs	r1, #0
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff f83e 	bl	8006d62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a18      	ldr	r0, [r3, #32]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3324      	adds	r3, #36	; 0x24
 8007cee:	220b      	movs	r2, #11
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f7ff f815 	bl	8006d20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007d1e:	220b      	movs	r2, #11
 8007d20:	2120      	movs	r1, #32
 8007d22:	68b8      	ldr	r0, [r7, #8]
 8007d24:	f7ff f81d 	bl	8006d62 <mem_set>
	si = i = 0; ni = 8;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	2308      	movs	r3, #8
 8007d32:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	617a      	str	r2, [r7, #20]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d42:	7ffb      	ldrb	r3, [r7, #31]
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d94e      	bls.n	8007de6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007d48:	7ffb      	ldrb	r3, [r7, #31]
 8007d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8007d4c:	d006      	beq.n	8007d5c <create_name+0x54>
 8007d4e:	7ffb      	ldrb	r3, [r7, #31]
 8007d50:	2b5c      	cmp	r3, #92	; 0x5c
 8007d52:	d110      	bne.n	8007d76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d54:	e002      	b.n	8007d5c <create_name+0x54>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	4413      	add	r3, r2
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b2f      	cmp	r3, #47	; 0x2f
 8007d66:	d0f6      	beq.n	8007d56 <create_name+0x4e>
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b5c      	cmp	r3, #92	; 0x5c
 8007d72:	d0f0      	beq.n	8007d56 <create_name+0x4e>
			break;
 8007d74:	e038      	b.n	8007de8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d76:	7ffb      	ldrb	r3, [r7, #31]
 8007d78:	2b2e      	cmp	r3, #46	; 0x2e
 8007d7a:	d003      	beq.n	8007d84 <create_name+0x7c>
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d30c      	bcc.n	8007d9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b0b      	cmp	r3, #11
 8007d88:	d002      	beq.n	8007d90 <create_name+0x88>
 8007d8a:	7ffb      	ldrb	r3, [r7, #31]
 8007d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d8e:	d001      	beq.n	8007d94 <create_name+0x8c>
 8007d90:	2306      	movs	r3, #6
 8007d92:	e044      	b.n	8007e1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007d94:	2308      	movs	r3, #8
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	230b      	movs	r3, #11
 8007d9a:	61bb      	str	r3, [r7, #24]
			continue;
 8007d9c:	e022      	b.n	8007de4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	da04      	bge.n	8007db0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007da6:	7ffb      	ldrb	r3, [r7, #31]
 8007da8:	3b80      	subs	r3, #128	; 0x80
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <create_name+0x120>)
 8007dac:	5cd3      	ldrb	r3, [r2, r3]
 8007dae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007db0:	7ffb      	ldrb	r3, [r7, #31]
 8007db2:	4619      	mov	r1, r3
 8007db4:	481d      	ldr	r0, [pc, #116]	; (8007e2c <create_name+0x124>)
 8007db6:	f7ff f815 	bl	8006de4 <chk_chr>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <create_name+0xbc>
 8007dc0:	2306      	movs	r3, #6
 8007dc2:	e02c      	b.n	8007e1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007dc4:	7ffb      	ldrb	r3, [r7, #31]
 8007dc6:	2b60      	cmp	r3, #96	; 0x60
 8007dc8:	d905      	bls.n	8007dd6 <create_name+0xce>
 8007dca:	7ffb      	ldrb	r3, [r7, #31]
 8007dcc:	2b7a      	cmp	r3, #122	; 0x7a
 8007dce:	d802      	bhi.n	8007dd6 <create_name+0xce>
 8007dd0:	7ffb      	ldrb	r3, [r7, #31]
 8007dd2:	3b20      	subs	r3, #32
 8007dd4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	613a      	str	r2, [r7, #16]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4413      	add	r3, r2
 8007de0:	7ffa      	ldrb	r2, [r7, #31]
 8007de2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007de4:	e7a6      	b.n	8007d34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007de6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	441a      	add	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <create_name+0xf4>
 8007df8:	2306      	movs	r3, #6
 8007dfa:	e010      	b.n	8007e1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2be5      	cmp	r3, #229	; 0xe5
 8007e02:	d102      	bne.n	8007e0a <create_name+0x102>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2205      	movs	r2, #5
 8007e08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e0a:	7ffb      	ldrb	r3, [r7, #31]
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d801      	bhi.n	8007e14 <create_name+0x10c>
 8007e10:	2204      	movs	r2, #4
 8007e12:	e000      	b.n	8007e16 <create_name+0x10e>
 8007e14:	2200      	movs	r2, #0
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	330b      	adds	r3, #11
 8007e1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007e1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	0800977c 	.word	0x0800977c
 8007e2c:	08009700 	.word	0x08009700

08007e30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e44:	e002      	b.n	8007e4c <follow_path+0x1c>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b2f      	cmp	r3, #47	; 0x2f
 8007e52:	d0f8      	beq.n	8007e46 <follow_path+0x16>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b5c      	cmp	r3, #92	; 0x5c
 8007e5a:	d0f4      	beq.n	8007e46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b1f      	cmp	r3, #31
 8007e68:	d80a      	bhi.n	8007e80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2280      	movs	r2, #128	; 0x80
 8007e6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e72:	2100      	movs	r1, #0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff fcf9 	bl	800786c <dir_sdi>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75fb      	strb	r3, [r7, #23]
 8007e7e:	e043      	b.n	8007f08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e80:	463b      	mov	r3, r7
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff3f 	bl	8007d08 <create_name>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d134      	bne.n	8007efe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff feaf 	bl	8007bf8 <dir_find>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ea4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d127      	bne.n	8007f02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d122      	bne.n	8007f02 <follow_path+0xd2>
 8007ebc:	2305      	movs	r3, #5
 8007ebe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ec0:	e01f      	b.n	8007f02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ec2:	7afb      	ldrb	r3, [r7, #11]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d11c      	bne.n	8007f06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	799b      	ldrb	r3, [r3, #6]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ed8:	2305      	movs	r3, #5
 8007eda:	75fb      	strb	r3, [r7, #23]
 8007edc:	e014      	b.n	8007f08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eec:	4413      	add	r3, r2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff fe42 	bl	8007b7a <ld_clust>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007efc:	e7c0      	b.n	8007e80 <follow_path+0x50>
			if (res != FR_OK) break;
 8007efe:	bf00      	nop
 8007f00:	e002      	b.n	8007f08 <follow_path+0xd8>
				break;
 8007f02:	bf00      	nop
 8007f04:	e000      	b.n	8007f08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f06:	bf00      	nop
			}
		}
	}

	return res;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b087      	sub	sp, #28
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d031      	beq.n	8007f8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	e002      	b.n	8007f36 <get_ldnumber+0x24>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	3301      	adds	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	d903      	bls.n	8007f46 <get_ldnumber+0x34>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b3a      	cmp	r3, #58	; 0x3a
 8007f44:	d1f4      	bne.n	8007f30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b3a      	cmp	r3, #58	; 0x3a
 8007f4c:	d11c      	bne.n	8007f88 <get_ldnumber+0x76>
			tp = *path;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	60fa      	str	r2, [r7, #12]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	3b30      	subs	r3, #48	; 0x30
 8007f5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	d80e      	bhi.n	8007f84 <get_ldnumber+0x72>
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d10a      	bne.n	8007f84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d107      	bne.n	8007f84 <get_ldnumber+0x72>
					vol = (int)i;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	e002      	b.n	8007f8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f8c:	693b      	ldr	r3, [r7, #16]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
	...

08007f9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	70da      	strb	r2, [r3, #3]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff f8e0 	bl	800717c <move_window>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <check_fs+0x2a>
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	e038      	b.n	8008038 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3330      	adds	r3, #48	; 0x30
 8007fca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fe24 	bl	8006c1c <ld_word>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d001      	beq.n	8007fe4 <check_fs+0x48>
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e029      	b.n	8008038 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fea:	2be9      	cmp	r3, #233	; 0xe9
 8007fec:	d009      	beq.n	8008002 <check_fs+0x66>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ff4:	2beb      	cmp	r3, #235	; 0xeb
 8007ff6:	d11e      	bne.n	8008036 <check_fs+0x9a>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007ffe:	2b90      	cmp	r3, #144	; 0x90
 8008000:	d119      	bne.n	8008036 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3330      	adds	r3, #48	; 0x30
 8008006:	3336      	adds	r3, #54	; 0x36
 8008008:	4618      	mov	r0, r3
 800800a:	f7fe fe1f 	bl	8006c4c <ld_dword>
 800800e:	4603      	mov	r3, r0
 8008010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008014:	4a0a      	ldr	r2, [pc, #40]	; (8008040 <check_fs+0xa4>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d101      	bne.n	800801e <check_fs+0x82>
 800801a:	2300      	movs	r3, #0
 800801c:	e00c      	b.n	8008038 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3330      	adds	r3, #48	; 0x30
 8008022:	3352      	adds	r3, #82	; 0x52
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fe11 	bl	8006c4c <ld_dword>
 800802a:	4602      	mov	r2, r0
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <check_fs+0xa8>)
 800802e:	429a      	cmp	r2, r3
 8008030:	d101      	bne.n	8008036 <check_fs+0x9a>
 8008032:	2300      	movs	r3, #0
 8008034:	e000      	b.n	8008038 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008036:	2302      	movs	r3, #2
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	00544146 	.word	0x00544146
 8008044:	33544146 	.word	0x33544146

08008048 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b096      	sub	sp, #88	; 0x58
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7ff ff58 	bl	8007f12 <get_ldnumber>
 8008062:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008066:	2b00      	cmp	r3, #0
 8008068:	da01      	bge.n	800806e <find_volume+0x26>
 800806a:	230b      	movs	r3, #11
 800806c:	e22e      	b.n	80084cc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800806e:	4aa8      	ldr	r2, [pc, #672]	; (8008310 <find_volume+0x2c8>)
 8008070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008076:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <find_volume+0x3a>
 800807e:	230c      	movs	r3, #12
 8008080:	e224      	b.n	80084cc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008086:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01a      	beq.n	80080ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fd1f 	bl	8006ae0 <disk_status>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80080a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10c      	bne.n	80080ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <find_volume+0x82>
 80080ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80080c6:	230a      	movs	r3, #10
 80080c8:	e200      	b.n	80084cc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80080ca:	2300      	movs	r3, #0
 80080cc:	e1fe      	b.n	80084cc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe fd17 	bl	8006b14 <disk_initialize>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80080ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80080f8:	2303      	movs	r3, #3
 80080fa:	e1e7      	b.n	80084cc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <find_volume+0xca>
 8008102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800810e:	230a      	movs	r3, #10
 8008110:	e1dc      	b.n	80084cc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800811a:	f7ff ff3f 	bl	8007f9c <check_fs>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008128:	2b02      	cmp	r3, #2
 800812a:	d14b      	bne.n	80081c4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800812c:	2300      	movs	r3, #0
 800812e:	643b      	str	r3, [r7, #64]	; 0x40
 8008130:	e01f      	b.n	8008172 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008140:	4413      	add	r3, r2
 8008142:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	3304      	adds	r3, #4
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <find_volume+0x114>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	3308      	adds	r3, #8
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fd7a 	bl	8006c4c <ld_dword>
 8008158:	4602      	mov	r2, r0
 800815a:	e000      	b.n	800815e <find_volume+0x116>
 800815c:	2200      	movs	r2, #0
 800815e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008166:	440b      	add	r3, r1
 8008168:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	3301      	adds	r3, #1
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
 8008172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008174:	2b03      	cmp	r3, #3
 8008176:	d9dc      	bls.n	8008132 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008178:	2300      	movs	r3, #0
 800817a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800817c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <find_volume+0x140>
 8008182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008184:	3b01      	subs	r3, #1
 8008186:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008190:	4413      	add	r3, r2
 8008192:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008196:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <find_volume+0x162>
 800819e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081a2:	f7ff fefb 	bl	8007f9c <check_fs>
 80081a6:	4603      	mov	r3, r0
 80081a8:	e000      	b.n	80081ac <find_volume+0x164>
 80081aa:	2303      	movs	r3, #3
 80081ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80081b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d905      	bls.n	80081c4 <find_volume+0x17c>
 80081b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ba:	3301      	adds	r3, #1
 80081bc:	643b      	str	r3, [r7, #64]	; 0x40
 80081be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d9e1      	bls.n	8008188 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80081c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d101      	bne.n	80081d0 <find_volume+0x188>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e17d      	b.n	80084cc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80081d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d901      	bls.n	80081dc <find_volume+0x194>
 80081d8:	230d      	movs	r3, #13
 80081da:	e177      	b.n	80084cc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	3330      	adds	r3, #48	; 0x30
 80081e0:	330b      	adds	r3, #11
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fd1a 	bl	8006c1c <ld_word>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ee:	d001      	beq.n	80081f4 <find_volume+0x1ac>
 80081f0:	230d      	movs	r3, #13
 80081f2:	e16b      	b.n	80084cc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	3330      	adds	r3, #48	; 0x30
 80081f8:	3316      	adds	r3, #22
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fd0e 	bl	8006c1c <ld_word>
 8008200:	4603      	mov	r3, r0
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <find_volume+0x1d0>
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	3330      	adds	r3, #48	; 0x30
 800820e:	3324      	adds	r3, #36	; 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fd1b 	bl	8006c4c <ld_dword>
 8008216:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800821c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	789b      	ldrb	r3, [r3, #2]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d005      	beq.n	800823c <find_volume+0x1f4>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	789b      	ldrb	r3, [r3, #2]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d001      	beq.n	800823c <find_volume+0x1f4>
 8008238:	230d      	movs	r3, #13
 800823a:	e147      	b.n	80084cc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	789b      	ldrb	r3, [r3, #2]
 8008240:	461a      	mov	r2, r3
 8008242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008244:	fb02 f303 	mul.w	r3, r2, r3
 8008248:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008250:	b29a      	uxth	r2, r3
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	895b      	ldrh	r3, [r3, #10]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d008      	beq.n	8008270 <find_volume+0x228>
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	895b      	ldrh	r3, [r3, #10]
 8008262:	461a      	mov	r2, r3
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	895b      	ldrh	r3, [r3, #10]
 8008268:	3b01      	subs	r3, #1
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <find_volume+0x22c>
 8008270:	230d      	movs	r3, #13
 8008272:	e12b      	b.n	80084cc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	3330      	adds	r3, #48	; 0x30
 8008278:	3311      	adds	r3, #17
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fcce 	bl	8006c1c <ld_word>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	891b      	ldrh	r3, [r3, #8]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <find_volume+0x252>
 8008296:	230d      	movs	r3, #13
 8008298:	e118      	b.n	80084cc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	3330      	adds	r3, #48	; 0x30
 800829e:	3313      	adds	r3, #19
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe fcbb 	bl	8006c1c <ld_word>
 80082a6:	4603      	mov	r3, r0
 80082a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80082aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d106      	bne.n	80082be <find_volume+0x276>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	3330      	adds	r3, #48	; 0x30
 80082b4:	3320      	adds	r3, #32
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fcc8 	bl	8006c4c <ld_dword>
 80082bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	3330      	adds	r3, #48	; 0x30
 80082c2:	330e      	adds	r3, #14
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fca9 	bl	8006c1c <ld_word>
 80082ca:	4603      	mov	r3, r0
 80082cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80082ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <find_volume+0x290>
 80082d4:	230d      	movs	r3, #13
 80082d6:	e0f9      	b.n	80084cc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80082d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	4413      	add	r3, r2
 80082de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082e0:	8912      	ldrh	r2, [r2, #8]
 80082e2:	0912      	lsrs	r2, r2, #4
 80082e4:	b292      	uxth	r2, r2
 80082e6:	4413      	add	r3, r2
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80082ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d201      	bcs.n	80082f6 <find_volume+0x2ae>
 80082f2:	230d      	movs	r3, #13
 80082f4:	e0ea      	b.n	80084cc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80082f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082fe:	8952      	ldrh	r2, [r2, #10]
 8008300:	fbb3 f3f2 	udiv	r3, r3, r2
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <find_volume+0x2cc>
 800830c:	230d      	movs	r3, #13
 800830e:	e0dd      	b.n	80084cc <find_volume+0x484>
 8008310:	2000010c 	.word	0x2000010c
		fmt = FS_FAT32;
 8008314:	2303      	movs	r3, #3
 8008316:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008320:	4293      	cmp	r3, r2
 8008322:	d802      	bhi.n	800832a <find_volume+0x2e2>
 8008324:	2302      	movs	r3, #2
 8008326:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008330:	4293      	cmp	r3, r2
 8008332:	d802      	bhi.n	800833a <find_volume+0x2f2>
 8008334:	2301      	movs	r3, #1
 8008336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	1c9a      	adds	r2, r3, #2
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008346:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008348:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800834a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834c:	441a      	add	r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	441a      	add	r2, r3
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800835c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008360:	2b03      	cmp	r3, #3
 8008362:	d11e      	bne.n	80083a2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	3330      	adds	r3, #48	; 0x30
 8008368:	332a      	adds	r3, #42	; 0x2a
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fc56 	bl	8006c1c <ld_word>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <find_volume+0x332>
 8008376:	230d      	movs	r3, #13
 8008378:	e0a8      	b.n	80084cc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	891b      	ldrh	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <find_volume+0x33e>
 8008382:	230d      	movs	r3, #13
 8008384:	e0a2      	b.n	80084cc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	3330      	adds	r3, #48	; 0x30
 800838a:	332c      	adds	r3, #44	; 0x2c
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe fc5d 	bl	8006c4c <ld_dword>
 8008392:	4602      	mov	r2, r0
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	647b      	str	r3, [r7, #68]	; 0x44
 80083a0:	e01f      	b.n	80083e2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	891b      	ldrh	r3, [r3, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <find_volume+0x366>
 80083aa:	230d      	movs	r3, #13
 80083ac:	e08e      	b.n	80084cc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	6a1a      	ldr	r2, [r3, #32]
 80083b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b4:	441a      	add	r2, r3
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80083ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d103      	bne.n	80083ca <find_volume+0x382>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	e00a      	b.n	80083e0 <find_volume+0x398>
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	4613      	mov	r3, r2
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	085a      	lsrs	r2, r3, #1
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80083e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80083ec:	0a5b      	lsrs	r3, r3, #9
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d201      	bcs.n	80083f6 <find_volume+0x3ae>
 80083f2:	230d      	movs	r3, #13
 80083f4:	e06a      	b.n	80084cc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083fc:	611a      	str	r2, [r3, #16]
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800840c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008410:	2b03      	cmp	r3, #3
 8008412:	d149      	bne.n	80084a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	3330      	adds	r3, #48	; 0x30
 8008418:	3330      	adds	r3, #48	; 0x30
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fbfe 	bl	8006c1c <ld_word>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d140      	bne.n	80084a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008428:	3301      	adds	r3, #1
 800842a:	4619      	mov	r1, r3
 800842c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800842e:	f7fe fea5 	bl	800717c <move_window>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d137      	bne.n	80084a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	2200      	movs	r2, #0
 800843c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	3330      	adds	r3, #48	; 0x30
 8008442:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fbe8 	bl	8006c1c <ld_word>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008454:	429a      	cmp	r2, r3
 8008456:	d127      	bne.n	80084a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	3330      	adds	r3, #48	; 0x30
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fbf5 	bl	8006c4c <ld_dword>
 8008462:	4602      	mov	r2, r0
 8008464:	4b1b      	ldr	r3, [pc, #108]	; (80084d4 <find_volume+0x48c>)
 8008466:	429a      	cmp	r2, r3
 8008468:	d11e      	bne.n	80084a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	3330      	adds	r3, #48	; 0x30
 800846e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fbea 	bl	8006c4c <ld_dword>
 8008478:	4602      	mov	r2, r0
 800847a:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <find_volume+0x490>)
 800847c:	429a      	cmp	r2, r3
 800847e:	d113      	bne.n	80084a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	3330      	adds	r3, #48	; 0x30
 8008484:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fbdf 	bl	8006c4c <ld_dword>
 800848e:	4602      	mov	r2, r0
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	3330      	adds	r3, #48	; 0x30
 8008498:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fbd5 	bl	8006c4c <ld_dword>
 80084a2:	4602      	mov	r2, r0
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80084ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <find_volume+0x494>)
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <find_volume+0x494>)
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	4b07      	ldr	r3, [pc, #28]	; (80084dc <find_volume+0x494>)
 80084be:	881a      	ldrh	r2, [r3, #0]
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80084c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084c6:	f7fe fdf1 	bl	80070ac <clear_lock>
#endif
	return FR_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3758      	adds	r7, #88	; 0x58
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	41615252 	.word	0x41615252
 80084d8:	61417272 	.word	0x61417272
 80084dc:	20000110 	.word	0x20000110

080084e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084ea:	2309      	movs	r3, #9
 80084ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01c      	beq.n	800852e <validate+0x4e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d018      	beq.n	800852e <validate+0x4e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d013      	beq.n	800852e <validate+0x4e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	889a      	ldrh	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	88db      	ldrh	r3, [r3, #6]
 8008510:	429a      	cmp	r2, r3
 8008512:	d10c      	bne.n	800852e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fae0 	bl	8006ae0 <disk_status>
 8008520:	4603      	mov	r3, r0
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <validate+0x4e>
			res = FR_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <validate+0x5a>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	e000      	b.n	800853c <validate+0x5c>
 800853a:	2300      	movs	r3, #0
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	6013      	str	r3, [r2, #0]
	return res;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800855e:	f107 0310 	add.w	r3, r7, #16
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fcd5 	bl	8007f12 <get_ldnumber>
 8008568:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da01      	bge.n	8008574 <f_mount+0x28>
 8008570:	230b      	movs	r3, #11
 8008572:	e02b      	b.n	80085cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008574:	4a17      	ldr	r2, [pc, #92]	; (80085d4 <f_mount+0x88>)
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008584:	69b8      	ldr	r0, [r7, #24]
 8008586:	f7fe fd91 	bl	80070ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	490d      	ldr	r1, [pc, #52]	; (80085d4 <f_mount+0x88>)
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <f_mount+0x66>
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d001      	beq.n	80085b6 <f_mount+0x6a>
 80085b2:	2300      	movs	r3, #0
 80085b4:	e00a      	b.n	80085cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085b6:	f107 010c 	add.w	r1, r7, #12
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	2200      	movs	r2, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff fd41 	bl	8008048 <find_volume>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	2000010c 	.word	0x2000010c

080085d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b098      	sub	sp, #96	; 0x60
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <f_open+0x18>
 80085ec:	2309      	movs	r3, #9
 80085ee:	e1ad      	b.n	800894c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80085f8:	79fa      	ldrb	r2, [r7, #7]
 80085fa:	f107 0110 	add.w	r1, r7, #16
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff fd20 	bl	8008048 <find_volume>
 8008608:	4603      	mov	r3, r0
 800860a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800860e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008612:	2b00      	cmp	r3, #0
 8008614:	f040 8191 	bne.w	800893a <f_open+0x362>
		dj.obj.fs = fs;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	f107 0314 	add.w	r3, r7, #20
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff fc03 	bl	8007e30 <follow_path>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11a      	bne.n	800866e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008638:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800863c:	b25b      	sxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	da03      	bge.n	800864a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008642:	2306      	movs	r3, #6
 8008644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008648:	e011      	b.n	800866e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	bf14      	ite	ne
 8008654:	2301      	movne	r3, #1
 8008656:	2300      	moveq	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fbda 	bl	8006e1c <chk_lock>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	f003 031c 	and.w	r3, r3, #28
 8008674:	2b00      	cmp	r3, #0
 8008676:	d07f      	beq.n	8008778 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867c:	2b00      	cmp	r3, #0
 800867e:	d017      	beq.n	80086b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008684:	2b04      	cmp	r3, #4
 8008686:	d10e      	bne.n	80086a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008688:	f7fe fc24 	bl	8006ed4 <enq_lock>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d006      	beq.n	80086a0 <f_open+0xc8>
 8008692:	f107 0314 	add.w	r3, r7, #20
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fb03 	bl	8007ca2 <dir_register>
 800869c:	4603      	mov	r3, r0
 800869e:	e000      	b.n	80086a2 <f_open+0xca>
 80086a0:	2312      	movs	r3, #18
 80086a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	f043 0308 	orr.w	r3, r3, #8
 80086ac:	71fb      	strb	r3, [r7, #7]
 80086ae:	e010      	b.n	80086d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086b0:	7ebb      	ldrb	r3, [r7, #26]
 80086b2:	f003 0311 	and.w	r3, r3, #17
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <f_open+0xea>
					res = FR_DENIED;
 80086ba:	2307      	movs	r3, #7
 80086bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086c0:	e007      	b.n	80086d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <f_open+0xfa>
 80086cc:	2308      	movs	r3, #8
 80086ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d168      	bne.n	80087ac <f_open+0x1d4>
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d063      	beq.n	80087ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80086e4:	f7fe f99e 	bl	8006a24 <get_fattime>
 80086e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	330e      	adds	r3, #14
 80086ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fae9 	bl	8006cc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	3316      	adds	r3, #22
 80086fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fae3 	bl	8006cc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	330b      	adds	r3, #11
 8008706:	2220      	movs	r2, #32
 8008708:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870e:	4611      	mov	r1, r2
 8008710:	4618      	mov	r0, r3
 8008712:	f7ff fa32 	bl	8007b7a <ld_clust>
 8008716:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800871c:	2200      	movs	r2, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fa4a 	bl	8007bb8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	331c      	adds	r3, #28
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe facc 	bl	8006cc8 <st_dword>
					fs->wflag = 1;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	2201      	movs	r2, #1
 8008734:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d037      	beq.n	80087ac <f_open+0x1d4>
						dw = fs->winsect;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008742:	f107 0314 	add.w	r3, r7, #20
 8008746:	2200      	movs	r2, #0
 8008748:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe ff5d 	bl	800760a <remove_chain>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800875a:	2b00      	cmp	r3, #0
 800875c:	d126      	bne.n	80087ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fd0a 	bl	800717c <move_window>
 8008768:	4603      	mov	r3, r0
 800876a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008772:	3a01      	subs	r2, #1
 8008774:	60da      	str	r2, [r3, #12]
 8008776:	e019      	b.n	80087ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800877c:	2b00      	cmp	r3, #0
 800877e:	d115      	bne.n	80087ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008780:	7ebb      	ldrb	r3, [r7, #26]
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <f_open+0x1ba>
					res = FR_NO_FILE;
 800878a:	2304      	movs	r3, #4
 800878c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008790:	e00c      	b.n	80087ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d007      	beq.n	80087ac <f_open+0x1d4>
 800879c:	7ebb      	ldrb	r3, [r7, #26]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <f_open+0x1d4>
						res = FR_DENIED;
 80087a6:	2307      	movs	r3, #7
 80087a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80087ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d128      	bne.n	8008806 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80087ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	f023 0301 	bic.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bf14      	ite	ne
 80087de:	2301      	movne	r3, #1
 80087e0:	2300      	moveq	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fb93 	bl	8006f18 <inc_lock>
 80087f2:	4602      	mov	r2, r0
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <f_open+0x22e>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 8095 	bne.w	800893a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff f9af 	bl	8007b7a <ld_clust>
 800881c:	4602      	mov	r2, r0
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008824:	331c      	adds	r3, #28
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fa10 	bl	8006c4c <ld_dword>
 800882c:	4602      	mov	r2, r0
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	88da      	ldrh	r2, [r3, #6]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	79fa      	ldrb	r2, [r7, #7]
 800884a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3330      	adds	r3, #48	; 0x30
 8008862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fa7a 	bl	8006d62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	f003 0320 	and.w	r3, r3, #32
 8008874:	2b00      	cmp	r3, #0
 8008876:	d060      	beq.n	800893a <f_open+0x362>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d05c      	beq.n	800893a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	025b      	lsls	r3, r3, #9
 800888e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	657b      	str	r3, [r7, #84]	; 0x54
 800889c:	e016      	b.n	80088cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd25 	bl	80072f2 <get_fat>
 80088a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80088aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d802      	bhi.n	80088b6 <f_open+0x2de>
 80088b0:	2302      	movs	r3, #2
 80088b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80088b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088bc:	d102      	bne.n	80088c4 <f_open+0x2ec>
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	657b      	str	r3, [r7, #84]	; 0x54
 80088cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d103      	bne.n	80088dc <f_open+0x304>
 80088d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d8:	429a      	cmp	r2, r3
 80088da:	d8e0      	bhi.n	800889e <f_open+0x2c6>
				}
				fp->clust = clst;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80088e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d127      	bne.n	800893a <f_open+0x362>
 80088ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d022      	beq.n	800893a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe fcdb 	bl	80072b4 <clust2sect>
 80088fe:	6478      	str	r0, [r7, #68]	; 0x44
 8008900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <f_open+0x336>
						res = FR_INT_ERR;
 8008906:	2302      	movs	r3, #2
 8008908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800890c:	e015      	b.n	800893a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800890e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008910:	0a5a      	lsrs	r2, r3, #9
 8008912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008914:	441a      	add	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	7858      	ldrb	r0, [r3, #1]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a1a      	ldr	r2, [r3, #32]
 8008928:	2301      	movs	r3, #1
 800892a:	f7fe f919 	bl	8006b60 <disk_read>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <f_open+0x362>
 8008934:	2301      	movs	r3, #1
 8008936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800893a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <f_open+0x370>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800894c:	4618      	mov	r0, r3
 800894e:	3760      	adds	r7, #96	; 0x60
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08c      	sub	sp, #48	; 0x30
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f107 0210 	add.w	r2, r7, #16
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fdb3 	bl	80084e0 <validate>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008984:	2b00      	cmp	r3, #0
 8008986:	d107      	bne.n	8008998 <f_write+0x44>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	7d5b      	ldrb	r3, [r3, #21]
 800898c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <f_write+0x4a>
 8008998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800899c:	e14b      	b.n	8008c36 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	7d1b      	ldrb	r3, [r3, #20]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <f_write+0x5a>
 80089aa:	2307      	movs	r3, #7
 80089ac:	e143      	b.n	8008c36 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	699a      	ldr	r2, [r3, #24]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	441a      	add	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	f080 812d 	bcs.w	8008c1a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	43db      	mvns	r3, r3
 80089c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80089c8:	e127      	b.n	8008c1a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 80e3 	bne.w	8008b9e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	0a5b      	lsrs	r3, r3, #9
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	8952      	ldrh	r2, [r2, #10]
 80089e2:	3a01      	subs	r2, #1
 80089e4:	4013      	ands	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d143      	bne.n	8008a76 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10c      	bne.n	8008a10 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d11a      	bne.n	8008a38 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe fe64 	bl	80076d4 <create_chain>
 8008a0c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a0e:	e013      	b.n	8008a38 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7fe fef0 	bl	8007804 <clmt_clust>
 8008a24:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a26:	e007      	b.n	8008a38 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fe fe4f 	bl	80076d4 <create_chain>
 8008a36:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80f2 	beq.w	8008c24 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d104      	bne.n	8008a50 <f_write+0xfc>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	755a      	strb	r2, [r3, #21]
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e0f2      	b.n	8008c36 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a56:	d104      	bne.n	8008a62 <f_write+0x10e>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	755a      	strb	r2, [r3, #21]
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e0e9      	b.n	8008c36 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a66:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <f_write+0x122>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a74:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	7d1b      	ldrb	r3, [r3, #20]
 8008a7a:	b25b      	sxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da18      	bge.n	8008ab2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	7858      	ldrb	r0, [r3, #1]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1a      	ldr	r2, [r3, #32]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f7fe f886 	bl	8006ba0 <disk_write>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d004      	beq.n	8008aa4 <f_write+0x150>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	755a      	strb	r2, [r3, #21]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e0c8      	b.n	8008c36 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	7d1b      	ldrb	r3, [r3, #20]
 8008aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f7fe fbfa 	bl	80072b4 <clust2sect>
 8008ac0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <f_write+0x17e>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2202      	movs	r2, #2
 8008acc:	755a      	strb	r2, [r3, #21]
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e0b1      	b.n	8008c36 <f_write+0x2e2>
			sect += csect;
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	0a5b      	lsrs	r3, r3, #9
 8008ade:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d03c      	beq.n	8008b60 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	4413      	add	r3, r2
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	8952      	ldrh	r2, [r2, #10]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d905      	bls.n	8008b00 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	895b      	ldrh	r3, [r3, #10]
 8008af8:	461a      	mov	r2, r3
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	7858      	ldrb	r0, [r3, #1]
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	69f9      	ldr	r1, [r7, #28]
 8008b0a:	f7fe f849 	bl	8006ba0 <disk_write>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <f_write+0x1ca>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	755a      	strb	r2, [r3, #21]
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e08b      	b.n	8008c36 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1a      	ldr	r2, [r3, #32]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	6a3a      	ldr	r2, [r7, #32]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d915      	bls.n	8008b58 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a1a      	ldr	r2, [r3, #32]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	025b      	lsls	r3, r3, #9
 8008b3c:	69fa      	ldr	r2, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b44:	4619      	mov	r1, r3
 8008b46:	f7fe f8eb 	bl	8006d20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	7d1b      	ldrb	r3, [r3, #20]
 8008b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	025b      	lsls	r3, r3, #9
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b5e:	e03f      	b.n	8008be0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d016      	beq.n	8008b98 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d210      	bcs.n	8008b98 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	7858      	ldrb	r0, [r3, #1]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b80:	2301      	movs	r3, #1
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	f7fd ffec 	bl	8006b60 <disk_read>
 8008b88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	755a      	strb	r2, [r3, #21]
 8008b94:	2301      	movs	r3, #1
 8008b96:	e04e      	b.n	8008c36 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008baa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d901      	bls.n	8008bb8 <f_write+0x264>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	4413      	add	r3, r2
 8008bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bca:	69f9      	ldr	r1, [r7, #28]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe f8a7 	bl	8006d20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	7d1b      	ldrb	r3, [r3, #20]
 8008bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	4413      	add	r3, r2
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	441a      	add	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	619a      	str	r2, [r3, #24]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	bf38      	it	cc
 8008c00:	461a      	movcc	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	60da      	str	r2, [r3, #12]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	441a      	add	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f47f aed4 	bne.w	80089ca <f_write+0x76>
 8008c22:	e000      	b.n	8008c26 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c24:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	7d1b      	ldrb	r3, [r3, #20]
 8008c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3730      	adds	r7, #48	; 0x30
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f107 0208 	add.w	r2, r7, #8
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff fc46 	bl	80084e0 <validate>
 8008c54:	4603      	mov	r3, r0
 8008c56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d168      	bne.n	8008d30 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	7d1b      	ldrb	r3, [r3, #20]
 8008c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d062      	beq.n	8008d30 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7d1b      	ldrb	r3, [r3, #20]
 8008c6e:	b25b      	sxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	da15      	bge.n	8008ca0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	7858      	ldrb	r0, [r3, #1]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1a      	ldr	r2, [r3, #32]
 8008c82:	2301      	movs	r3, #1
 8008c84:	f7fd ff8c 	bl	8006ba0 <disk_write>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <f_sync+0x54>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e04f      	b.n	8008d32 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7d1b      	ldrb	r3, [r3, #20]
 8008c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ca0:	f7fd fec0 	bl	8006a24 <get_fattime>
 8008ca4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fe fa64 	bl	800717c <move_window>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d138      	bne.n	8008d30 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	330b      	adds	r3, #11
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	330b      	adds	r3, #11
 8008cce:	f042 0220 	orr.w	r2, r2, #32
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	68f9      	ldr	r1, [r7, #12]
 8008ce2:	f7fe ff69 	bl	8007bb8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f103 021c 	add.w	r2, r3, #28
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f7fd ffe8 	bl	8006cc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3316      	adds	r3, #22
 8008cfc:	6939      	ldr	r1, [r7, #16]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fd ffe2 	bl	8006cc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3312      	adds	r3, #18
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fd ffc1 	bl	8006c92 <st_word>
					fs->wflag = 1;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2201      	movs	r2, #1
 8008d14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe fa5d 	bl	80071d8 <sync_fs>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	7d1b      	ldrb	r3, [r3, #20]
 8008d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff ff7b 	bl	8008c3e <f_sync>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d118      	bne.n	8008d84 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f107 0208 	add.w	r2, r7, #8
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff fbc0 	bl	80084e0 <validate>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10c      	bne.n	8008d84 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe f960 	bl	8007034 <dec_lock>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008da6:	4b1f      	ldr	r3, [pc, #124]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008da8:	7a5b      	ldrb	r3, [r3, #9]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d131      	bne.n	8008e14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008db0:	4b1c      	ldr	r3, [pc, #112]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008db2:	7a5b      	ldrb	r3, [r3, #9]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dba:	2100      	movs	r1, #0
 8008dbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008dbe:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dc0:	7a5b      	ldrb	r3, [r3, #9]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4a17      	ldr	r2, [pc, #92]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008dce:	4b15      	ldr	r3, [pc, #84]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dd0:	7a5b      	ldrb	r3, [r3, #9]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dd8:	4413      	add	r3, r2
 8008dda:	79fa      	ldrb	r2, [r7, #7]
 8008ddc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008dde:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008de0:	7a5b      	ldrb	r3, [r3, #9]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	b2d1      	uxtb	r1, r2
 8008de8:	4a0e      	ldr	r2, [pc, #56]	; (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dea:	7251      	strb	r1, [r2, #9]
 8008dec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008dee:	7dbb      	ldrb	r3, [r7, #22]
 8008df0:	3330      	adds	r3, #48	; 0x30
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	223a      	movs	r2, #58	; 0x3a
 8008dfe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	3302      	adds	r3, #2
 8008e04:	222f      	movs	r2, #47	; 0x2f
 8008e06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	3303      	adds	r3, #3
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000134 	.word	0x20000134

08008e28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e32:	2200      	movs	r2, #0
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff ffaa 	bl	8008d90 <FATFS_LinkDriverEx>
 8008e3c:	4603      	mov	r3, r0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <__errno>:
 8008e48:	4b01      	ldr	r3, [pc, #4]	; (8008e50 <__errno+0x8>)
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000024 	.word	0x20000024

08008e54 <__libc_init_array>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4e0d      	ldr	r6, [pc, #52]	; (8008e8c <__libc_init_array+0x38>)
 8008e58:	4c0d      	ldr	r4, [pc, #52]	; (8008e90 <__libc_init_array+0x3c>)
 8008e5a:	1ba4      	subs	r4, r4, r6
 8008e5c:	10a4      	asrs	r4, r4, #2
 8008e5e:	2500      	movs	r5, #0
 8008e60:	42a5      	cmp	r5, r4
 8008e62:	d109      	bne.n	8008e78 <__libc_init_array+0x24>
 8008e64:	4e0b      	ldr	r6, [pc, #44]	; (8008e94 <__libc_init_array+0x40>)
 8008e66:	4c0c      	ldr	r4, [pc, #48]	; (8008e98 <__libc_init_array+0x44>)
 8008e68:	f000 fc26 	bl	80096b8 <_init>
 8008e6c:	1ba4      	subs	r4, r4, r6
 8008e6e:	10a4      	asrs	r4, r4, #2
 8008e70:	2500      	movs	r5, #0
 8008e72:	42a5      	cmp	r5, r4
 8008e74:	d105      	bne.n	8008e82 <__libc_init_array+0x2e>
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e7c:	4798      	blx	r3
 8008e7e:	3501      	adds	r5, #1
 8008e80:	e7ee      	b.n	8008e60 <__libc_init_array+0xc>
 8008e82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e86:	4798      	blx	r3
 8008e88:	3501      	adds	r5, #1
 8008e8a:	e7f2      	b.n	8008e72 <__libc_init_array+0x1e>
 8008e8c:	08009838 	.word	0x08009838
 8008e90:	08009838 	.word	0x08009838
 8008e94:	08009838 	.word	0x08009838
 8008e98:	0800983c 	.word	0x0800983c

08008e9c <memset>:
 8008e9c:	4402      	add	r2, r0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d100      	bne.n	8008ea6 <memset+0xa>
 8008ea4:	4770      	bx	lr
 8008ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eaa:	e7f9      	b.n	8008ea0 <memset+0x4>

08008eac <siprintf>:
 8008eac:	b40e      	push	{r1, r2, r3}
 8008eae:	b500      	push	{lr}
 8008eb0:	b09c      	sub	sp, #112	; 0x70
 8008eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8008eb4:	9002      	str	r0, [sp, #8]
 8008eb6:	9006      	str	r0, [sp, #24]
 8008eb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ebc:	4809      	ldr	r0, [pc, #36]	; (8008ee4 <siprintf+0x38>)
 8008ebe:	9107      	str	r1, [sp, #28]
 8008ec0:	9104      	str	r1, [sp, #16]
 8008ec2:	4909      	ldr	r1, [pc, #36]	; (8008ee8 <siprintf+0x3c>)
 8008ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec8:	9105      	str	r1, [sp, #20]
 8008eca:	6800      	ldr	r0, [r0, #0]
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	a902      	add	r1, sp, #8
 8008ed0:	f000 f866 	bl	8008fa0 <_svfiprintf_r>
 8008ed4:	9b02      	ldr	r3, [sp, #8]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	b01c      	add	sp, #112	; 0x70
 8008edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ee0:	b003      	add	sp, #12
 8008ee2:	4770      	bx	lr
 8008ee4:	20000024 	.word	0x20000024
 8008ee8:	ffff0208 	.word	0xffff0208

08008eec <__ssputs_r>:
 8008eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef0:	688e      	ldr	r6, [r1, #8]
 8008ef2:	429e      	cmp	r6, r3
 8008ef4:	4682      	mov	sl, r0
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	4690      	mov	r8, r2
 8008efa:	4699      	mov	r9, r3
 8008efc:	d837      	bhi.n	8008f6e <__ssputs_r+0x82>
 8008efe:	898a      	ldrh	r2, [r1, #12]
 8008f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f04:	d031      	beq.n	8008f6a <__ssputs_r+0x7e>
 8008f06:	6825      	ldr	r5, [r4, #0]
 8008f08:	6909      	ldr	r1, [r1, #16]
 8008f0a:	1a6f      	subs	r7, r5, r1
 8008f0c:	6965      	ldr	r5, [r4, #20]
 8008f0e:	2302      	movs	r3, #2
 8008f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f14:	fb95 f5f3 	sdiv	r5, r5, r3
 8008f18:	f109 0301 	add.w	r3, r9, #1
 8008f1c:	443b      	add	r3, r7
 8008f1e:	429d      	cmp	r5, r3
 8008f20:	bf38      	it	cc
 8008f22:	461d      	movcc	r5, r3
 8008f24:	0553      	lsls	r3, r2, #21
 8008f26:	d530      	bpl.n	8008f8a <__ssputs_r+0x9e>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f000 fb2b 	bl	8009584 <_malloc_r>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	b950      	cbnz	r0, 8008f48 <__ssputs_r+0x5c>
 8008f32:	230c      	movs	r3, #12
 8008f34:	f8ca 3000 	str.w	r3, [sl]
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f48:	463a      	mov	r2, r7
 8008f4a:	6921      	ldr	r1, [r4, #16]
 8008f4c:	f000 faa8 	bl	80094a0 <memcpy>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	6126      	str	r6, [r4, #16]
 8008f5e:	6165      	str	r5, [r4, #20]
 8008f60:	443e      	add	r6, r7
 8008f62:	1bed      	subs	r5, r5, r7
 8008f64:	6026      	str	r6, [r4, #0]
 8008f66:	60a5      	str	r5, [r4, #8]
 8008f68:	464e      	mov	r6, r9
 8008f6a:	454e      	cmp	r6, r9
 8008f6c:	d900      	bls.n	8008f70 <__ssputs_r+0x84>
 8008f6e:	464e      	mov	r6, r9
 8008f70:	4632      	mov	r2, r6
 8008f72:	4641      	mov	r1, r8
 8008f74:	6820      	ldr	r0, [r4, #0]
 8008f76:	f000 fa9e 	bl	80094b6 <memmove>
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	1b9b      	subs	r3, r3, r6
 8008f7e:	60a3      	str	r3, [r4, #8]
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	441e      	add	r6, r3
 8008f84:	6026      	str	r6, [r4, #0]
 8008f86:	2000      	movs	r0, #0
 8008f88:	e7dc      	b.n	8008f44 <__ssputs_r+0x58>
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	f000 fb54 	bl	8009638 <_realloc_r>
 8008f90:	4606      	mov	r6, r0
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d1e2      	bne.n	8008f5c <__ssputs_r+0x70>
 8008f96:	6921      	ldr	r1, [r4, #16]
 8008f98:	4650      	mov	r0, sl
 8008f9a:	f000 faa5 	bl	80094e8 <_free_r>
 8008f9e:	e7c8      	b.n	8008f32 <__ssputs_r+0x46>

08008fa0 <_svfiprintf_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	461d      	mov	r5, r3
 8008fa6:	898b      	ldrh	r3, [r1, #12]
 8008fa8:	061f      	lsls	r7, r3, #24
 8008faa:	b09d      	sub	sp, #116	; 0x74
 8008fac:	4680      	mov	r8, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	4616      	mov	r6, r2
 8008fb2:	d50f      	bpl.n	8008fd4 <_svfiprintf_r+0x34>
 8008fb4:	690b      	ldr	r3, [r1, #16]
 8008fb6:	b96b      	cbnz	r3, 8008fd4 <_svfiprintf_r+0x34>
 8008fb8:	2140      	movs	r1, #64	; 0x40
 8008fba:	f000 fae3 	bl	8009584 <_malloc_r>
 8008fbe:	6020      	str	r0, [r4, #0]
 8008fc0:	6120      	str	r0, [r4, #16]
 8008fc2:	b928      	cbnz	r0, 8008fd0 <_svfiprintf_r+0x30>
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	f8c8 3000 	str.w	r3, [r8]
 8008fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fce:	e0c8      	b.n	8009162 <_svfiprintf_r+0x1c2>
 8008fd0:	2340      	movs	r3, #64	; 0x40
 8008fd2:	6163      	str	r3, [r4, #20]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fde:	2330      	movs	r3, #48	; 0x30
 8008fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fe4:	9503      	str	r5, [sp, #12]
 8008fe6:	f04f 0b01 	mov.w	fp, #1
 8008fea:	4637      	mov	r7, r6
 8008fec:	463d      	mov	r5, r7
 8008fee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ff2:	b10b      	cbz	r3, 8008ff8 <_svfiprintf_r+0x58>
 8008ff4:	2b25      	cmp	r3, #37	; 0x25
 8008ff6:	d13e      	bne.n	8009076 <_svfiprintf_r+0xd6>
 8008ff8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ffc:	d00b      	beq.n	8009016 <_svfiprintf_r+0x76>
 8008ffe:	4653      	mov	r3, sl
 8009000:	4632      	mov	r2, r6
 8009002:	4621      	mov	r1, r4
 8009004:	4640      	mov	r0, r8
 8009006:	f7ff ff71 	bl	8008eec <__ssputs_r>
 800900a:	3001      	adds	r0, #1
 800900c:	f000 80a4 	beq.w	8009158 <_svfiprintf_r+0x1b8>
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	4453      	add	r3, sl
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	783b      	ldrb	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 809d 	beq.w	8009158 <_svfiprintf_r+0x1b8>
 800901e:	2300      	movs	r3, #0
 8009020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009030:	931a      	str	r3, [sp, #104]	; 0x68
 8009032:	462f      	mov	r7, r5
 8009034:	2205      	movs	r2, #5
 8009036:	f817 1b01 	ldrb.w	r1, [r7], #1
 800903a:	4850      	ldr	r0, [pc, #320]	; (800917c <_svfiprintf_r+0x1dc>)
 800903c:	f7f7 f8e8 	bl	8000210 <memchr>
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	b9d0      	cbnz	r0, 800907a <_svfiprintf_r+0xda>
 8009044:	06d9      	lsls	r1, r3, #27
 8009046:	bf44      	itt	mi
 8009048:	2220      	movmi	r2, #32
 800904a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800904e:	071a      	lsls	r2, r3, #28
 8009050:	bf44      	itt	mi
 8009052:	222b      	movmi	r2, #43	; 0x2b
 8009054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009058:	782a      	ldrb	r2, [r5, #0]
 800905a:	2a2a      	cmp	r2, #42	; 0x2a
 800905c:	d015      	beq.n	800908a <_svfiprintf_r+0xea>
 800905e:	9a07      	ldr	r2, [sp, #28]
 8009060:	462f      	mov	r7, r5
 8009062:	2000      	movs	r0, #0
 8009064:	250a      	movs	r5, #10
 8009066:	4639      	mov	r1, r7
 8009068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906c:	3b30      	subs	r3, #48	; 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d94d      	bls.n	800910e <_svfiprintf_r+0x16e>
 8009072:	b1b8      	cbz	r0, 80090a4 <_svfiprintf_r+0x104>
 8009074:	e00f      	b.n	8009096 <_svfiprintf_r+0xf6>
 8009076:	462f      	mov	r7, r5
 8009078:	e7b8      	b.n	8008fec <_svfiprintf_r+0x4c>
 800907a:	4a40      	ldr	r2, [pc, #256]	; (800917c <_svfiprintf_r+0x1dc>)
 800907c:	1a80      	subs	r0, r0, r2
 800907e:	fa0b f000 	lsl.w	r0, fp, r0
 8009082:	4318      	orrs	r0, r3
 8009084:	9004      	str	r0, [sp, #16]
 8009086:	463d      	mov	r5, r7
 8009088:	e7d3      	b.n	8009032 <_svfiprintf_r+0x92>
 800908a:	9a03      	ldr	r2, [sp, #12]
 800908c:	1d11      	adds	r1, r2, #4
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	9103      	str	r1, [sp, #12]
 8009092:	2a00      	cmp	r2, #0
 8009094:	db01      	blt.n	800909a <_svfiprintf_r+0xfa>
 8009096:	9207      	str	r2, [sp, #28]
 8009098:	e004      	b.n	80090a4 <_svfiprintf_r+0x104>
 800909a:	4252      	negs	r2, r2
 800909c:	f043 0302 	orr.w	r3, r3, #2
 80090a0:	9207      	str	r2, [sp, #28]
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	783b      	ldrb	r3, [r7, #0]
 80090a6:	2b2e      	cmp	r3, #46	; 0x2e
 80090a8:	d10c      	bne.n	80090c4 <_svfiprintf_r+0x124>
 80090aa:	787b      	ldrb	r3, [r7, #1]
 80090ac:	2b2a      	cmp	r3, #42	; 0x2a
 80090ae:	d133      	bne.n	8009118 <_svfiprintf_r+0x178>
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	9203      	str	r2, [sp, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bfb8      	it	lt
 80090bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090c0:	3702      	adds	r7, #2
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	4d2e      	ldr	r5, [pc, #184]	; (8009180 <_svfiprintf_r+0x1e0>)
 80090c6:	7839      	ldrb	r1, [r7, #0]
 80090c8:	2203      	movs	r2, #3
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7f7 f8a0 	bl	8000210 <memchr>
 80090d0:	b138      	cbz	r0, 80090e2 <_svfiprintf_r+0x142>
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	1b40      	subs	r0, r0, r5
 80090d6:	fa03 f000 	lsl.w	r0, r3, r0
 80090da:	9b04      	ldr	r3, [sp, #16]
 80090dc:	4303      	orrs	r3, r0
 80090de:	3701      	adds	r7, #1
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	7839      	ldrb	r1, [r7, #0]
 80090e4:	4827      	ldr	r0, [pc, #156]	; (8009184 <_svfiprintf_r+0x1e4>)
 80090e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ea:	2206      	movs	r2, #6
 80090ec:	1c7e      	adds	r6, r7, #1
 80090ee:	f7f7 f88f 	bl	8000210 <memchr>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d038      	beq.n	8009168 <_svfiprintf_r+0x1c8>
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <_svfiprintf_r+0x1e8>)
 80090f8:	bb13      	cbnz	r3, 8009140 <_svfiprintf_r+0x1a0>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	3307      	adds	r3, #7
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	3308      	adds	r3, #8
 8009104:	9303      	str	r3, [sp, #12]
 8009106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009108:	444b      	add	r3, r9
 800910a:	9309      	str	r3, [sp, #36]	; 0x24
 800910c:	e76d      	b.n	8008fea <_svfiprintf_r+0x4a>
 800910e:	fb05 3202 	mla	r2, r5, r2, r3
 8009112:	2001      	movs	r0, #1
 8009114:	460f      	mov	r7, r1
 8009116:	e7a6      	b.n	8009066 <_svfiprintf_r+0xc6>
 8009118:	2300      	movs	r3, #0
 800911a:	3701      	adds	r7, #1
 800911c:	9305      	str	r3, [sp, #20]
 800911e:	4619      	mov	r1, r3
 8009120:	250a      	movs	r5, #10
 8009122:	4638      	mov	r0, r7
 8009124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009128:	3a30      	subs	r2, #48	; 0x30
 800912a:	2a09      	cmp	r2, #9
 800912c:	d903      	bls.n	8009136 <_svfiprintf_r+0x196>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0c8      	beq.n	80090c4 <_svfiprintf_r+0x124>
 8009132:	9105      	str	r1, [sp, #20]
 8009134:	e7c6      	b.n	80090c4 <_svfiprintf_r+0x124>
 8009136:	fb05 2101 	mla	r1, r5, r1, r2
 800913a:	2301      	movs	r3, #1
 800913c:	4607      	mov	r7, r0
 800913e:	e7f0      	b.n	8009122 <_svfiprintf_r+0x182>
 8009140:	ab03      	add	r3, sp, #12
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	4622      	mov	r2, r4
 8009146:	4b11      	ldr	r3, [pc, #68]	; (800918c <_svfiprintf_r+0x1ec>)
 8009148:	a904      	add	r1, sp, #16
 800914a:	4640      	mov	r0, r8
 800914c:	f3af 8000 	nop.w
 8009150:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009154:	4681      	mov	r9, r0
 8009156:	d1d6      	bne.n	8009106 <_svfiprintf_r+0x166>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	065b      	lsls	r3, r3, #25
 800915c:	f53f af35 	bmi.w	8008fca <_svfiprintf_r+0x2a>
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	b01d      	add	sp, #116	; 0x74
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	ab03      	add	r3, sp, #12
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	4622      	mov	r2, r4
 800916e:	4b07      	ldr	r3, [pc, #28]	; (800918c <_svfiprintf_r+0x1ec>)
 8009170:	a904      	add	r1, sp, #16
 8009172:	4640      	mov	r0, r8
 8009174:	f000 f882 	bl	800927c <_printf_i>
 8009178:	e7ea      	b.n	8009150 <_svfiprintf_r+0x1b0>
 800917a:	bf00      	nop
 800917c:	080097fc 	.word	0x080097fc
 8009180:	08009802 	.word	0x08009802
 8009184:	08009806 	.word	0x08009806
 8009188:	00000000 	.word	0x00000000
 800918c:	08008eed 	.word	0x08008eed

08009190 <_printf_common>:
 8009190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009194:	4691      	mov	r9, r2
 8009196:	461f      	mov	r7, r3
 8009198:	688a      	ldr	r2, [r1, #8]
 800919a:	690b      	ldr	r3, [r1, #16]
 800919c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091a0:	4293      	cmp	r3, r2
 80091a2:	bfb8      	it	lt
 80091a4:	4613      	movlt	r3, r2
 80091a6:	f8c9 3000 	str.w	r3, [r9]
 80091aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091ae:	4606      	mov	r6, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	b112      	cbz	r2, 80091ba <_printf_common+0x2a>
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8c9 3000 	str.w	r3, [r9]
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	0699      	lsls	r1, r3, #26
 80091be:	bf42      	ittt	mi
 80091c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80091c4:	3302      	addmi	r3, #2
 80091c6:	f8c9 3000 	strmi.w	r3, [r9]
 80091ca:	6825      	ldr	r5, [r4, #0]
 80091cc:	f015 0506 	ands.w	r5, r5, #6
 80091d0:	d107      	bne.n	80091e2 <_printf_common+0x52>
 80091d2:	f104 0a19 	add.w	sl, r4, #25
 80091d6:	68e3      	ldr	r3, [r4, #12]
 80091d8:	f8d9 2000 	ldr.w	r2, [r9]
 80091dc:	1a9b      	subs	r3, r3, r2
 80091de:	42ab      	cmp	r3, r5
 80091e0:	dc28      	bgt.n	8009234 <_printf_common+0xa4>
 80091e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	3300      	adds	r3, #0
 80091ea:	bf18      	it	ne
 80091ec:	2301      	movne	r3, #1
 80091ee:	0692      	lsls	r2, r2, #26
 80091f0:	d42d      	bmi.n	800924e <_printf_common+0xbe>
 80091f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091f6:	4639      	mov	r1, r7
 80091f8:	4630      	mov	r0, r6
 80091fa:	47c0      	blx	r8
 80091fc:	3001      	adds	r0, #1
 80091fe:	d020      	beq.n	8009242 <_printf_common+0xb2>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	68e5      	ldr	r5, [r4, #12]
 8009204:	f8d9 2000 	ldr.w	r2, [r9]
 8009208:	f003 0306 	and.w	r3, r3, #6
 800920c:	2b04      	cmp	r3, #4
 800920e:	bf08      	it	eq
 8009210:	1aad      	subeq	r5, r5, r2
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	6922      	ldr	r2, [r4, #16]
 8009216:	bf0c      	ite	eq
 8009218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800921c:	2500      	movne	r5, #0
 800921e:	4293      	cmp	r3, r2
 8009220:	bfc4      	itt	gt
 8009222:	1a9b      	subgt	r3, r3, r2
 8009224:	18ed      	addgt	r5, r5, r3
 8009226:	f04f 0900 	mov.w	r9, #0
 800922a:	341a      	adds	r4, #26
 800922c:	454d      	cmp	r5, r9
 800922e:	d11a      	bne.n	8009266 <_printf_common+0xd6>
 8009230:	2000      	movs	r0, #0
 8009232:	e008      	b.n	8009246 <_printf_common+0xb6>
 8009234:	2301      	movs	r3, #1
 8009236:	4652      	mov	r2, sl
 8009238:	4639      	mov	r1, r7
 800923a:	4630      	mov	r0, r6
 800923c:	47c0      	blx	r8
 800923e:	3001      	adds	r0, #1
 8009240:	d103      	bne.n	800924a <_printf_common+0xba>
 8009242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924a:	3501      	adds	r5, #1
 800924c:	e7c3      	b.n	80091d6 <_printf_common+0x46>
 800924e:	18e1      	adds	r1, r4, r3
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	2030      	movs	r0, #48	; 0x30
 8009254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009258:	4422      	add	r2, r4
 800925a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800925e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009262:	3302      	adds	r3, #2
 8009264:	e7c5      	b.n	80091f2 <_printf_common+0x62>
 8009266:	2301      	movs	r3, #1
 8009268:	4622      	mov	r2, r4
 800926a:	4639      	mov	r1, r7
 800926c:	4630      	mov	r0, r6
 800926e:	47c0      	blx	r8
 8009270:	3001      	adds	r0, #1
 8009272:	d0e6      	beq.n	8009242 <_printf_common+0xb2>
 8009274:	f109 0901 	add.w	r9, r9, #1
 8009278:	e7d8      	b.n	800922c <_printf_common+0x9c>
	...

0800927c <_printf_i>:
 800927c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009284:	460c      	mov	r4, r1
 8009286:	7e09      	ldrb	r1, [r1, #24]
 8009288:	b085      	sub	sp, #20
 800928a:	296e      	cmp	r1, #110	; 0x6e
 800928c:	4617      	mov	r7, r2
 800928e:	4606      	mov	r6, r0
 8009290:	4698      	mov	r8, r3
 8009292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009294:	f000 80b3 	beq.w	80093fe <_printf_i+0x182>
 8009298:	d822      	bhi.n	80092e0 <_printf_i+0x64>
 800929a:	2963      	cmp	r1, #99	; 0x63
 800929c:	d036      	beq.n	800930c <_printf_i+0x90>
 800929e:	d80a      	bhi.n	80092b6 <_printf_i+0x3a>
 80092a0:	2900      	cmp	r1, #0
 80092a2:	f000 80b9 	beq.w	8009418 <_printf_i+0x19c>
 80092a6:	2958      	cmp	r1, #88	; 0x58
 80092a8:	f000 8083 	beq.w	80093b2 <_printf_i+0x136>
 80092ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80092b4:	e032      	b.n	800931c <_printf_i+0xa0>
 80092b6:	2964      	cmp	r1, #100	; 0x64
 80092b8:	d001      	beq.n	80092be <_printf_i+0x42>
 80092ba:	2969      	cmp	r1, #105	; 0x69
 80092bc:	d1f6      	bne.n	80092ac <_printf_i+0x30>
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	6813      	ldr	r3, [r2, #0]
 80092c2:	0605      	lsls	r5, r0, #24
 80092c4:	f103 0104 	add.w	r1, r3, #4
 80092c8:	d52a      	bpl.n	8009320 <_printf_i+0xa4>
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6011      	str	r1, [r2, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	da03      	bge.n	80092da <_printf_i+0x5e>
 80092d2:	222d      	movs	r2, #45	; 0x2d
 80092d4:	425b      	negs	r3, r3
 80092d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80092da:	486f      	ldr	r0, [pc, #444]	; (8009498 <_printf_i+0x21c>)
 80092dc:	220a      	movs	r2, #10
 80092de:	e039      	b.n	8009354 <_printf_i+0xd8>
 80092e0:	2973      	cmp	r1, #115	; 0x73
 80092e2:	f000 809d 	beq.w	8009420 <_printf_i+0x1a4>
 80092e6:	d808      	bhi.n	80092fa <_printf_i+0x7e>
 80092e8:	296f      	cmp	r1, #111	; 0x6f
 80092ea:	d020      	beq.n	800932e <_printf_i+0xb2>
 80092ec:	2970      	cmp	r1, #112	; 0x70
 80092ee:	d1dd      	bne.n	80092ac <_printf_i+0x30>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	f043 0320 	orr.w	r3, r3, #32
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	e003      	b.n	8009302 <_printf_i+0x86>
 80092fa:	2975      	cmp	r1, #117	; 0x75
 80092fc:	d017      	beq.n	800932e <_printf_i+0xb2>
 80092fe:	2978      	cmp	r1, #120	; 0x78
 8009300:	d1d4      	bne.n	80092ac <_printf_i+0x30>
 8009302:	2378      	movs	r3, #120	; 0x78
 8009304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009308:	4864      	ldr	r0, [pc, #400]	; (800949c <_printf_i+0x220>)
 800930a:	e055      	b.n	80093b8 <_printf_i+0x13c>
 800930c:	6813      	ldr	r3, [r2, #0]
 800930e:	1d19      	adds	r1, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6011      	str	r1, [r2, #0]
 8009314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800931c:	2301      	movs	r3, #1
 800931e:	e08c      	b.n	800943a <_printf_i+0x1be>
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6011      	str	r1, [r2, #0]
 8009324:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009328:	bf18      	it	ne
 800932a:	b21b      	sxthne	r3, r3
 800932c:	e7cf      	b.n	80092ce <_printf_i+0x52>
 800932e:	6813      	ldr	r3, [r2, #0]
 8009330:	6825      	ldr	r5, [r4, #0]
 8009332:	1d18      	adds	r0, r3, #4
 8009334:	6010      	str	r0, [r2, #0]
 8009336:	0628      	lsls	r0, r5, #24
 8009338:	d501      	bpl.n	800933e <_printf_i+0xc2>
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	e002      	b.n	8009344 <_printf_i+0xc8>
 800933e:	0668      	lsls	r0, r5, #25
 8009340:	d5fb      	bpl.n	800933a <_printf_i+0xbe>
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	4854      	ldr	r0, [pc, #336]	; (8009498 <_printf_i+0x21c>)
 8009346:	296f      	cmp	r1, #111	; 0x6f
 8009348:	bf14      	ite	ne
 800934a:	220a      	movne	r2, #10
 800934c:	2208      	moveq	r2, #8
 800934e:	2100      	movs	r1, #0
 8009350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009354:	6865      	ldr	r5, [r4, #4]
 8009356:	60a5      	str	r5, [r4, #8]
 8009358:	2d00      	cmp	r5, #0
 800935a:	f2c0 8095 	blt.w	8009488 <_printf_i+0x20c>
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	f021 0104 	bic.w	r1, r1, #4
 8009364:	6021      	str	r1, [r4, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d13d      	bne.n	80093e6 <_printf_i+0x16a>
 800936a:	2d00      	cmp	r5, #0
 800936c:	f040 808e 	bne.w	800948c <_printf_i+0x210>
 8009370:	4665      	mov	r5, ip
 8009372:	2a08      	cmp	r2, #8
 8009374:	d10b      	bne.n	800938e <_printf_i+0x112>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	07db      	lsls	r3, r3, #31
 800937a:	d508      	bpl.n	800938e <_printf_i+0x112>
 800937c:	6923      	ldr	r3, [r4, #16]
 800937e:	6862      	ldr	r2, [r4, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	bfde      	ittt	le
 8009384:	2330      	movle	r3, #48	; 0x30
 8009386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800938a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800938e:	ebac 0305 	sub.w	r3, ip, r5
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	f8cd 8000 	str.w	r8, [sp]
 8009398:	463b      	mov	r3, r7
 800939a:	aa03      	add	r2, sp, #12
 800939c:	4621      	mov	r1, r4
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff fef6 	bl	8009190 <_printf_common>
 80093a4:	3001      	adds	r0, #1
 80093a6:	d14d      	bne.n	8009444 <_printf_i+0x1c8>
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ac:	b005      	add	sp, #20
 80093ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093b2:	4839      	ldr	r0, [pc, #228]	; (8009498 <_printf_i+0x21c>)
 80093b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80093b8:	6813      	ldr	r3, [r2, #0]
 80093ba:	6821      	ldr	r1, [r4, #0]
 80093bc:	1d1d      	adds	r5, r3, #4
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6015      	str	r5, [r2, #0]
 80093c2:	060a      	lsls	r2, r1, #24
 80093c4:	d50b      	bpl.n	80093de <_printf_i+0x162>
 80093c6:	07ca      	lsls	r2, r1, #31
 80093c8:	bf44      	itt	mi
 80093ca:	f041 0120 	orrmi.w	r1, r1, #32
 80093ce:	6021      	strmi	r1, [r4, #0]
 80093d0:	b91b      	cbnz	r3, 80093da <_printf_i+0x15e>
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	f022 0220 	bic.w	r2, r2, #32
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	2210      	movs	r2, #16
 80093dc:	e7b7      	b.n	800934e <_printf_i+0xd2>
 80093de:	064d      	lsls	r5, r1, #25
 80093e0:	bf48      	it	mi
 80093e2:	b29b      	uxthmi	r3, r3
 80093e4:	e7ef      	b.n	80093c6 <_printf_i+0x14a>
 80093e6:	4665      	mov	r5, ip
 80093e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ec:	fb02 3311 	mls	r3, r2, r1, r3
 80093f0:	5cc3      	ldrb	r3, [r0, r3]
 80093f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80093f6:	460b      	mov	r3, r1
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d1f5      	bne.n	80093e8 <_printf_i+0x16c>
 80093fc:	e7b9      	b.n	8009372 <_printf_i+0xf6>
 80093fe:	6813      	ldr	r3, [r2, #0]
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	6961      	ldr	r1, [r4, #20]
 8009404:	1d18      	adds	r0, r3, #4
 8009406:	6010      	str	r0, [r2, #0]
 8009408:	0628      	lsls	r0, r5, #24
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	d501      	bpl.n	8009412 <_printf_i+0x196>
 800940e:	6019      	str	r1, [r3, #0]
 8009410:	e002      	b.n	8009418 <_printf_i+0x19c>
 8009412:	066a      	lsls	r2, r5, #25
 8009414:	d5fb      	bpl.n	800940e <_printf_i+0x192>
 8009416:	8019      	strh	r1, [r3, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	6123      	str	r3, [r4, #16]
 800941c:	4665      	mov	r5, ip
 800941e:	e7b9      	b.n	8009394 <_printf_i+0x118>
 8009420:	6813      	ldr	r3, [r2, #0]
 8009422:	1d19      	adds	r1, r3, #4
 8009424:	6011      	str	r1, [r2, #0]
 8009426:	681d      	ldr	r5, [r3, #0]
 8009428:	6862      	ldr	r2, [r4, #4]
 800942a:	2100      	movs	r1, #0
 800942c:	4628      	mov	r0, r5
 800942e:	f7f6 feef 	bl	8000210 <memchr>
 8009432:	b108      	cbz	r0, 8009438 <_printf_i+0x1bc>
 8009434:	1b40      	subs	r0, r0, r5
 8009436:	6060      	str	r0, [r4, #4]
 8009438:	6863      	ldr	r3, [r4, #4]
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	2300      	movs	r3, #0
 800943e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009442:	e7a7      	b.n	8009394 <_printf_i+0x118>
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	462a      	mov	r2, r5
 8009448:	4639      	mov	r1, r7
 800944a:	4630      	mov	r0, r6
 800944c:	47c0      	blx	r8
 800944e:	3001      	adds	r0, #1
 8009450:	d0aa      	beq.n	80093a8 <_printf_i+0x12c>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	079b      	lsls	r3, r3, #30
 8009456:	d413      	bmi.n	8009480 <_printf_i+0x204>
 8009458:	68e0      	ldr	r0, [r4, #12]
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	4298      	cmp	r0, r3
 800945e:	bfb8      	it	lt
 8009460:	4618      	movlt	r0, r3
 8009462:	e7a3      	b.n	80093ac <_printf_i+0x130>
 8009464:	2301      	movs	r3, #1
 8009466:	464a      	mov	r2, r9
 8009468:	4639      	mov	r1, r7
 800946a:	4630      	mov	r0, r6
 800946c:	47c0      	blx	r8
 800946e:	3001      	adds	r0, #1
 8009470:	d09a      	beq.n	80093a8 <_printf_i+0x12c>
 8009472:	3501      	adds	r5, #1
 8009474:	68e3      	ldr	r3, [r4, #12]
 8009476:	9a03      	ldr	r2, [sp, #12]
 8009478:	1a9b      	subs	r3, r3, r2
 800947a:	42ab      	cmp	r3, r5
 800947c:	dcf2      	bgt.n	8009464 <_printf_i+0x1e8>
 800947e:	e7eb      	b.n	8009458 <_printf_i+0x1dc>
 8009480:	2500      	movs	r5, #0
 8009482:	f104 0919 	add.w	r9, r4, #25
 8009486:	e7f5      	b.n	8009474 <_printf_i+0x1f8>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1ac      	bne.n	80093e6 <_printf_i+0x16a>
 800948c:	7803      	ldrb	r3, [r0, #0]
 800948e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009496:	e76c      	b.n	8009372 <_printf_i+0xf6>
 8009498:	0800980d 	.word	0x0800980d
 800949c:	0800981e 	.word	0x0800981e

080094a0 <memcpy>:
 80094a0:	b510      	push	{r4, lr}
 80094a2:	1e43      	subs	r3, r0, #1
 80094a4:	440a      	add	r2, r1
 80094a6:	4291      	cmp	r1, r2
 80094a8:	d100      	bne.n	80094ac <memcpy+0xc>
 80094aa:	bd10      	pop	{r4, pc}
 80094ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094b4:	e7f7      	b.n	80094a6 <memcpy+0x6>

080094b6 <memmove>:
 80094b6:	4288      	cmp	r0, r1
 80094b8:	b510      	push	{r4, lr}
 80094ba:	eb01 0302 	add.w	r3, r1, r2
 80094be:	d807      	bhi.n	80094d0 <memmove+0x1a>
 80094c0:	1e42      	subs	r2, r0, #1
 80094c2:	4299      	cmp	r1, r3
 80094c4:	d00a      	beq.n	80094dc <memmove+0x26>
 80094c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094ce:	e7f8      	b.n	80094c2 <memmove+0xc>
 80094d0:	4283      	cmp	r3, r0
 80094d2:	d9f5      	bls.n	80094c0 <memmove+0xa>
 80094d4:	1881      	adds	r1, r0, r2
 80094d6:	1ad2      	subs	r2, r2, r3
 80094d8:	42d3      	cmn	r3, r2
 80094da:	d100      	bne.n	80094de <memmove+0x28>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80094e6:	e7f7      	b.n	80094d8 <memmove+0x22>

080094e8 <_free_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4605      	mov	r5, r0
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d045      	beq.n	800957c <_free_r+0x94>
 80094f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f4:	1f0c      	subs	r4, r1, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfb8      	it	lt
 80094fa:	18e4      	addlt	r4, r4, r3
 80094fc:	f000 f8d2 	bl	80096a4 <__malloc_lock>
 8009500:	4a1f      	ldr	r2, [pc, #124]	; (8009580 <_free_r+0x98>)
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	4610      	mov	r0, r2
 8009506:	b933      	cbnz	r3, 8009516 <_free_r+0x2e>
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	6014      	str	r4, [r2, #0]
 800950c:	4628      	mov	r0, r5
 800950e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009512:	f000 b8c8 	b.w	80096a6 <__malloc_unlock>
 8009516:	42a3      	cmp	r3, r4
 8009518:	d90c      	bls.n	8009534 <_free_r+0x4c>
 800951a:	6821      	ldr	r1, [r4, #0]
 800951c:	1862      	adds	r2, r4, r1
 800951e:	4293      	cmp	r3, r2
 8009520:	bf04      	itt	eq
 8009522:	681a      	ldreq	r2, [r3, #0]
 8009524:	685b      	ldreq	r3, [r3, #4]
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	bf04      	itt	eq
 800952a:	1852      	addeq	r2, r2, r1
 800952c:	6022      	streq	r2, [r4, #0]
 800952e:	6004      	str	r4, [r0, #0]
 8009530:	e7ec      	b.n	800950c <_free_r+0x24>
 8009532:	4613      	mov	r3, r2
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	b10a      	cbz	r2, 800953c <_free_r+0x54>
 8009538:	42a2      	cmp	r2, r4
 800953a:	d9fa      	bls.n	8009532 <_free_r+0x4a>
 800953c:	6819      	ldr	r1, [r3, #0]
 800953e:	1858      	adds	r0, r3, r1
 8009540:	42a0      	cmp	r0, r4
 8009542:	d10b      	bne.n	800955c <_free_r+0x74>
 8009544:	6820      	ldr	r0, [r4, #0]
 8009546:	4401      	add	r1, r0
 8009548:	1858      	adds	r0, r3, r1
 800954a:	4282      	cmp	r2, r0
 800954c:	6019      	str	r1, [r3, #0]
 800954e:	d1dd      	bne.n	800950c <_free_r+0x24>
 8009550:	6810      	ldr	r0, [r2, #0]
 8009552:	6852      	ldr	r2, [r2, #4]
 8009554:	605a      	str	r2, [r3, #4]
 8009556:	4401      	add	r1, r0
 8009558:	6019      	str	r1, [r3, #0]
 800955a:	e7d7      	b.n	800950c <_free_r+0x24>
 800955c:	d902      	bls.n	8009564 <_free_r+0x7c>
 800955e:	230c      	movs	r3, #12
 8009560:	602b      	str	r3, [r5, #0]
 8009562:	e7d3      	b.n	800950c <_free_r+0x24>
 8009564:	6820      	ldr	r0, [r4, #0]
 8009566:	1821      	adds	r1, r4, r0
 8009568:	428a      	cmp	r2, r1
 800956a:	bf04      	itt	eq
 800956c:	6811      	ldreq	r1, [r2, #0]
 800956e:	6852      	ldreq	r2, [r2, #4]
 8009570:	6062      	str	r2, [r4, #4]
 8009572:	bf04      	itt	eq
 8009574:	1809      	addeq	r1, r1, r0
 8009576:	6021      	streq	r1, [r4, #0]
 8009578:	605c      	str	r4, [r3, #4]
 800957a:	e7c7      	b.n	800950c <_free_r+0x24>
 800957c:	bd38      	pop	{r3, r4, r5, pc}
 800957e:	bf00      	nop
 8009580:	20000140 	.word	0x20000140

08009584 <_malloc_r>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	1ccd      	adds	r5, r1, #3
 8009588:	f025 0503 	bic.w	r5, r5, #3
 800958c:	3508      	adds	r5, #8
 800958e:	2d0c      	cmp	r5, #12
 8009590:	bf38      	it	cc
 8009592:	250c      	movcc	r5, #12
 8009594:	2d00      	cmp	r5, #0
 8009596:	4606      	mov	r6, r0
 8009598:	db01      	blt.n	800959e <_malloc_r+0x1a>
 800959a:	42a9      	cmp	r1, r5
 800959c:	d903      	bls.n	80095a6 <_malloc_r+0x22>
 800959e:	230c      	movs	r3, #12
 80095a0:	6033      	str	r3, [r6, #0]
 80095a2:	2000      	movs	r0, #0
 80095a4:	bd70      	pop	{r4, r5, r6, pc}
 80095a6:	f000 f87d 	bl	80096a4 <__malloc_lock>
 80095aa:	4a21      	ldr	r2, [pc, #132]	; (8009630 <_malloc_r+0xac>)
 80095ac:	6814      	ldr	r4, [r2, #0]
 80095ae:	4621      	mov	r1, r4
 80095b0:	b991      	cbnz	r1, 80095d8 <_malloc_r+0x54>
 80095b2:	4c20      	ldr	r4, [pc, #128]	; (8009634 <_malloc_r+0xb0>)
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	b91b      	cbnz	r3, 80095c0 <_malloc_r+0x3c>
 80095b8:	4630      	mov	r0, r6
 80095ba:	f000 f863 	bl	8009684 <_sbrk_r>
 80095be:	6020      	str	r0, [r4, #0]
 80095c0:	4629      	mov	r1, r5
 80095c2:	4630      	mov	r0, r6
 80095c4:	f000 f85e 	bl	8009684 <_sbrk_r>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d124      	bne.n	8009616 <_malloc_r+0x92>
 80095cc:	230c      	movs	r3, #12
 80095ce:	6033      	str	r3, [r6, #0]
 80095d0:	4630      	mov	r0, r6
 80095d2:	f000 f868 	bl	80096a6 <__malloc_unlock>
 80095d6:	e7e4      	b.n	80095a2 <_malloc_r+0x1e>
 80095d8:	680b      	ldr	r3, [r1, #0]
 80095da:	1b5b      	subs	r3, r3, r5
 80095dc:	d418      	bmi.n	8009610 <_malloc_r+0x8c>
 80095de:	2b0b      	cmp	r3, #11
 80095e0:	d90f      	bls.n	8009602 <_malloc_r+0x7e>
 80095e2:	600b      	str	r3, [r1, #0]
 80095e4:	50cd      	str	r5, [r1, r3]
 80095e6:	18cc      	adds	r4, r1, r3
 80095e8:	4630      	mov	r0, r6
 80095ea:	f000 f85c 	bl	80096a6 <__malloc_unlock>
 80095ee:	f104 000b 	add.w	r0, r4, #11
 80095f2:	1d23      	adds	r3, r4, #4
 80095f4:	f020 0007 	bic.w	r0, r0, #7
 80095f8:	1ac3      	subs	r3, r0, r3
 80095fa:	d0d3      	beq.n	80095a4 <_malloc_r+0x20>
 80095fc:	425a      	negs	r2, r3
 80095fe:	50e2      	str	r2, [r4, r3]
 8009600:	e7d0      	b.n	80095a4 <_malloc_r+0x20>
 8009602:	428c      	cmp	r4, r1
 8009604:	684b      	ldr	r3, [r1, #4]
 8009606:	bf16      	itet	ne
 8009608:	6063      	strne	r3, [r4, #4]
 800960a:	6013      	streq	r3, [r2, #0]
 800960c:	460c      	movne	r4, r1
 800960e:	e7eb      	b.n	80095e8 <_malloc_r+0x64>
 8009610:	460c      	mov	r4, r1
 8009612:	6849      	ldr	r1, [r1, #4]
 8009614:	e7cc      	b.n	80095b0 <_malloc_r+0x2c>
 8009616:	1cc4      	adds	r4, r0, #3
 8009618:	f024 0403 	bic.w	r4, r4, #3
 800961c:	42a0      	cmp	r0, r4
 800961e:	d005      	beq.n	800962c <_malloc_r+0xa8>
 8009620:	1a21      	subs	r1, r4, r0
 8009622:	4630      	mov	r0, r6
 8009624:	f000 f82e 	bl	8009684 <_sbrk_r>
 8009628:	3001      	adds	r0, #1
 800962a:	d0cf      	beq.n	80095cc <_malloc_r+0x48>
 800962c:	6025      	str	r5, [r4, #0]
 800962e:	e7db      	b.n	80095e8 <_malloc_r+0x64>
 8009630:	20000140 	.word	0x20000140
 8009634:	20000144 	.word	0x20000144

08009638 <_realloc_r>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	4607      	mov	r7, r0
 800963c:	4614      	mov	r4, r2
 800963e:	460e      	mov	r6, r1
 8009640:	b921      	cbnz	r1, 800964c <_realloc_r+0x14>
 8009642:	4611      	mov	r1, r2
 8009644:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009648:	f7ff bf9c 	b.w	8009584 <_malloc_r>
 800964c:	b922      	cbnz	r2, 8009658 <_realloc_r+0x20>
 800964e:	f7ff ff4b 	bl	80094e8 <_free_r>
 8009652:	4625      	mov	r5, r4
 8009654:	4628      	mov	r0, r5
 8009656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009658:	f000 f826 	bl	80096a8 <_malloc_usable_size_r>
 800965c:	42a0      	cmp	r0, r4
 800965e:	d20f      	bcs.n	8009680 <_realloc_r+0x48>
 8009660:	4621      	mov	r1, r4
 8009662:	4638      	mov	r0, r7
 8009664:	f7ff ff8e 	bl	8009584 <_malloc_r>
 8009668:	4605      	mov	r5, r0
 800966a:	2800      	cmp	r0, #0
 800966c:	d0f2      	beq.n	8009654 <_realloc_r+0x1c>
 800966e:	4631      	mov	r1, r6
 8009670:	4622      	mov	r2, r4
 8009672:	f7ff ff15 	bl	80094a0 <memcpy>
 8009676:	4631      	mov	r1, r6
 8009678:	4638      	mov	r0, r7
 800967a:	f7ff ff35 	bl	80094e8 <_free_r>
 800967e:	e7e9      	b.n	8009654 <_realloc_r+0x1c>
 8009680:	4635      	mov	r5, r6
 8009682:	e7e7      	b.n	8009654 <_realloc_r+0x1c>

08009684 <_sbrk_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4c06      	ldr	r4, [pc, #24]	; (80096a0 <_sbrk_r+0x1c>)
 8009688:	2300      	movs	r3, #0
 800968a:	4605      	mov	r5, r0
 800968c:	4608      	mov	r0, r1
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	f7f9 f936 	bl	8002900 <_sbrk>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_sbrk_r+0x1a>
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	b103      	cbz	r3, 800969e <_sbrk_r+0x1a>
 800969c:	602b      	str	r3, [r5, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	20004440 	.word	0x20004440

080096a4 <__malloc_lock>:
 80096a4:	4770      	bx	lr

080096a6 <__malloc_unlock>:
 80096a6:	4770      	bx	lr

080096a8 <_malloc_usable_size_r>:
 80096a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ac:	1f18      	subs	r0, r3, #4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfbc      	itt	lt
 80096b2:	580b      	ldrlt	r3, [r1, r0]
 80096b4:	18c0      	addlt	r0, r0, r3
 80096b6:	4770      	bx	lr

080096b8 <_init>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr

080096c4 <_fini>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	bf00      	nop
 80096c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ca:	bc08      	pop	{r3}
 80096cc:	469e      	mov	lr, r3
 80096ce:	4770      	bx	lr
