
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08008bc4  08008bc4  00018bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f34  08008f34  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08008f34  08008f34  00018f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f3c  08008f3c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f40  08008f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  20000024  08008f68  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e78  08008f68  00020e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abc2  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032a1  00000000  00000000  0003ac16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c79  00000000  00000000  00064b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2ba5  00000000  00000000  00075817  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001483bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a8  00000000  00000000  00148438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008bac 	.word	0x08008bac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08008bac 	.word	0x08008bac

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 f96c 	bl	80017e8 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 f964 	bl	80017e8 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 f95c 	bl	80017e8 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 f954 	bl	80017e8 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 f998 	bl	8001894 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08008c18 	.word	0x08008c18

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <Rf96_OutPower+0x28>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	4619      	mov	r1, r3
 8000582:	2009      	movs	r0, #9
 8000584:	f001 f930 	bl	80017e8 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000588:	2187      	movs	r1, #135	; 0x87
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f001 f92c 	bl	80017e8 <SPIWrite>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08008c24 	.word	0x08008c24

0800059c <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Rf96_OCP+0x20>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	200b      	movs	r0, #11
 80005b0:	f001 f91a 	bl	80017e8 <SPIWrite>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	08008c28 	.word	0x08008c28

080005c0 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <Rf96_LNA+0x20>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	4619      	mov	r1, r3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 f908 	bl	80017e8 <SPIWrite>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08008c2c 	.word	0x08008c2c

080005e4 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005f6:	210e      	movs	r1, #14
 80005f8:	201d      	movs	r0, #29
 80005fa:	f001 f8f5 	bl	80017e8 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xC4);  // SF=12
 8000618:	21c4      	movs	r1, #196	; 0xc4
 800061a:	201e      	movs	r0, #30
 800061c:	f001 f8e4 	bl	80017e8 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	201f      	movs	r0, #31
 8000628:	f001 f8de 	bl	80017e8 <SPIWrite>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2020      	movs	r0, #32
 800064a:	f001 f8cd 	bl	80017e8 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2021      	movs	r0, #33	; 0x21
 8000656:	f001 f8c7 	bl	80017e8 <SPIWrite>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	4604      	mov	r4, r0
 800066a:	4608      	mov	r0, r1
 800066c:	4611      	mov	r1, r2
 800066e:	461a      	mov	r2, r3
 8000670:	4623      	mov	r3, r4
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
 8000678:	460b      	mov	r3, r1
 800067a:	717b      	strb	r3, [r7, #5]
 800067c:	4613      	mov	r3, r2
 800067e:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b2da      	uxtb	r2, r3
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b2da      	uxtb	r2, r3
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f001 f8a0 	bl	80017e8 <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006b4:	21f7      	movs	r1, #247	; 0xf7
 80006b6:	2011      	movs	r0, #17
 80006b8:	f001 f896 	bl	80017e8 <SPIWrite>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006c4:	213f      	movs	r1, #63	; 0x3f
 80006c6:	2011      	movs	r0, #17
 80006c8:	f001 f88e 	bl	80017e8 <SPIWrite>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	2022      	movs	r0, #34	; 0x22
 80006e0:	f001 f882 	bl	80017e8 <SPIWrite>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4619      	mov	r1, r3
 80006fa:	200e      	movs	r0, #14
 80006fc:	f001 f874 	bl	80017e8 <SPIWrite>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	200f      	movs	r0, #15
 8000718:	f001 f866 	bl	80017e8 <SPIWrite>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4619      	mov	r1, r3
 8000732:	200d      	movs	r0, #13
 8000734:	f001 f858 	bl	80017e8 <SPIWrite>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 8000744:	2185      	movs	r1, #133	; 0x85
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f84e 	bl	80017e8 <SPIWrite>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 8000754:	2183      	movs	r1, #131	; 0x83
 8000756:	2001      	movs	r0, #1
 8000758:	f001 f846 	bl	80017e8 <SPIWrite>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	2000      	movs	r0, #0
 8000774:	f001 f88e 	bl	8001894 <BurstWrite>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000788:	2010      	movs	r0, #16
 800078a:	f001 f80f 	bl	80017ac <SPIRead>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4619      	mov	r1, r3
 8000796:	200d      	movs	r0, #13
 8000798:	f001 f826 	bl	80017e8 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079c:	2013      	movs	r0, #19
 800079e:	f001 f805 	bl	80017ac <SPIRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	461a      	mov	r2, r3
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 f83f 	bl	8001830 <SPIBurstRead>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007be:	f7ff feb1 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c2:	f7ff feb7 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff febc 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fecf 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fee2 	bl	800059c <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fef1 	bl	80005c0 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	2007      	movs	r0, #7
 80007e4:	f7ff fefe 	bl	80005e4 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007ec:	2101      	movs	r1, #1
 80007ee:	2006      	movs	r0, #6
 80007f0:	f7ff ff09 	bl	8000606 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff ff1d 	bl	8000634 <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007fa:	210a      	movs	r1, #10
 80007fc:	2037      	movs	r0, #55	; 0x37
 80007fe:	f000 fff3 	bl	80017e8 <SPIWrite>
	SPIWrite(0x31,0xA3);
 8000802:	21a3      	movs	r1, #163	; 0xa3
 8000804:	2031      	movs	r0, #49	; 0x31
 8000806:	f000 ffef 	bl	80017e8 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 800080a:	f7ff fe83 	bl	8000514 <Rf96_Standby>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 8000816:	2100      	movs	r1, #0
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f000 ffe5 	bl	80017e8 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800081e:	2302      	movs	r3, #2
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff ff1c 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800082a:	f7ff fe6b 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082e:	f7ff ff3f 	bl	80006b0 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000832:	202a      	movs	r0, #42	; 0x2a
 8000834:	f7ff ff4c 	bl	80006d0 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000838:	2080      	movs	r0, #128	; 0x80
 800083a:	f7ff ff57 	bl	80006ec <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	f7ff ff70 	bl	8000724 <Rf96_FIFO_point>

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800084c:	2100      	movs	r1, #0
 800084e:	2024      	movs	r0, #36	; 0x24
 8000850:	f000 ffca 	bl	80017e8 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000854:	2302      	movs	r3, #2
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff01 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000860:	f7ff ff2e 	bl	80006c0 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000864:	f7ff fe4e 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000868:	202a      	movs	r0, #42	; 0x2a
 800086a:	f7ff ff31 	bl	80006d0 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff ff4a 	bl	8000708 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff55 	bl	8000724 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 800087a:	f7ff ff61 	bl	8000740 <Rf96_RX_Continuous_mode>

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}

08000882 <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff64 	bl	8000760 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000898:	f7ff ff5a 	bl	8000750 <Rf96_TX_mode>
		}
	}
	*/


}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b4:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008b6:	e012      	b.n	80008de <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b21a      	sxth	r2, r3
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1c59      	adds	r1, r3, #1
 80008ca:	6079      	str	r1, [r7, #4]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4043      	eors	r3, r0
 80008d0:	4909      	ldr	r1, [pc, #36]	; (80008f8 <Crc16+0x54>)
 80008d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4053      	eors	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	807a      	strh	r2, [r7, #2]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1e7      	bne.n	80008b8 <Crc16+0x14>

    return crc;
 80008e8:	89fb      	ldrh	r3, [r7, #14]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	08008c94 	.word	0x08008c94

080008fc <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 8000906:	f7ff ff84 	bl	8000812 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e006      	b.n	800091e <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <CommandToRadio+0x7c>)
 8000914:	2100      	movs	r1, #0
 8000916:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	3301      	adds	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2b29      	cmp	r3, #41	; 0x29
 8000922:	d9f5      	bls.n	8000910 <CommandToRadio+0x14>
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <CommandToRadio+0x7c>)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 800092a:	2128      	movs	r1, #40	; 0x28
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <CommandToRadio+0x7c>)
 800092e:	f7ff ffb9 	bl	80008a4 <Crc16>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <CommandToRadio+0x80>)
 8000938:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <CommandToRadio+0x80>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <CommandToRadio+0x7c>)
 8000946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <CommandToRadio+0x80>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <CommandToRadio+0x7c>)
 8000952:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000956:	2080      	movs	r0, #128	; 0x80
 8000958:	f7ff fec8 	bl	80006ec <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 800095c:	2080      	movs	r0, #128	; 0x80
 800095e:	f7ff fee1 	bl	8000724 <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 8000962:	f7ff fdcf 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000966:	212a      	movs	r1, #42	; 0x2a
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <CommandToRadio+0x7c>)
 800096a:	f7ff ff8a 	bl	8000882 <Rf96_LoRaTxPacket>
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000394 	.word	0x20000394
 800097c:	20000044 	.word	0x20000044

08000980 <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	4611      	mov	r1, r2
 800098c:	461a      	mov	r2, r3
 800098e:	460b      	mov	r3, r1
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	82fb      	strh	r3, [r7, #22]
 800099a:	e01f      	b.n	80009dc <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 800099c:	68f9      	ldr	r1, [r7, #12]
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <uint32_TO_charmass+0x70>)
 80009a0:	fba3 2301 	umull	r2, r3, r3, r1
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	1aca      	subs	r2, r1, r3
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	1e59      	subs	r1, r3, #1
 80009b6:	8afb      	ldrh	r3, [r7, #22]
 80009b8:	1ac9      	subs	r1, r1, r3
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	440b      	add	r3, r1
 80009be:	4619      	mov	r1, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	440b      	add	r3, r1
 80009c4:	3230      	adds	r2, #48	; 0x30
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <uint32_TO_charmass+0x70>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	3301      	adds	r3, #1
 80009da:	82fb      	strh	r3, [r7, #22]
 80009dc:	8afa      	ldrh	r2, [r7, #22]
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3db      	bcc.n	800099c <uint32_TO_charmass+0x1c>
	}
}
 80009e4:	bf00      	nop
 80009e6:	371c      	adds	r7, #28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	cccccccd 	.word	0xcccccccd

080009f4 <SyncCKT>:


// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <SyncCKT+0x2c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10d      	bne.n	8000a1c <SyncCKT+0x28>
	{
		readFlag=0;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <SyncCKT+0x2c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f002 f926 	bl	8002c58 <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <SyncCKT+0x30>)
 8000a0e:	f004 ffa7 	bl	8005960 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000a12:	222b      	movs	r2, #43	; 0x2b
 8000a14:	4904      	ldr	r1, [pc, #16]	; (8000a28 <SyncCKT+0x34>)
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <SyncCKT+0x30>)
 8000a18:	f004 ff22 	bl	8005860 <HAL_UART_Receive_DMA>
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000694 	.word	0x20000694
 8000a24:	20000444 	.word	0x20000444
 8000a28:	200003c0 	.word	0x200003c0

08000a2c <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    // Запись в память номера файла, на котором мы находимся

	//CountFileNow=Flash_Read_single8bit(FilesAdr);
	if(CountFileNow==0xFF || CountFileNow>=9 ) // Максимальное количество создаваемых файлов =9
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <RXCommande1+0x9c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d003      	beq.n	8000a40 <RXCommande1+0x14>
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <RXCommande1+0x9c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d902      	bls.n	8000a46 <RXCommande1+0x1a>
	{
		CountFileNow=0;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <RXCommande1+0x9c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
	}
	CountFileNow++;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <RXCommande1+0x9c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <RXCommande1+0x9c>)
 8000a50:	701a      	strb	r2, [r3, #0]
	//flashErasePage(FLASH_SECTOR_6);
	//Flash_Write_single8bit(FilesAdr,CountFileNow);
	///ФЛЕШКА
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000a52:	2201      	movs	r2, #1
 8000a54:	491d      	ldr	r1, [pc, #116]	; (8000acc <RXCommande1+0xa0>)
 8000a56:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <RXCommande1+0xa4>)
 8000a58:	f007 fbfe 	bl	8008258 <f_mount>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <RXCommande1+0xa8>)
 8000a62:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <RXCommande1+0xa8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d005      	beq.n	8000a78 <RXCommande1+0x4c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <RXCommande1+0xac>)
 8000a72:	f002 ffdb 	bl	8003a2c <HAL_GPIO_WritePin>
			while(1);
 8000a76:	e7fe      	b.n	8000a76 <RXCommande1+0x4a>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_CREATE_ALWAYS | FA_WRITE);
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <RXCommande1+0x9c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <RXCommande1+0xb0>)
 8000a88:	4413      	add	r3, r2
 8000a8a:	220a      	movs	r2, #10
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <RXCommande1+0xb4>)
 8000a90:	f007 fc28 	bl	80082e4 <f_open>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <RXCommande1+0xa8>)
 8000a9a:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <RXCommande1+0xa8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d005      	beq.n	8000ab0 <RXCommande1+0x84>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <RXCommande1+0xac>)
 8000aaa:	f002 ffbf 	bl	8003a2c <HAL_GPIO_WritePin>
			while(1);
 8000aae:	e7fe      	b.n	8000aae <RXCommande1+0x82>
		}
	    ResolveSDWrite=1; // Открываем доступ к записи на SD
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <RXCommande1+0xb8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
	    ModeRadio=1;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <RXCommande1+0xbc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
    CommandToRadio(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff ff1d 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
   // Rf96_Lora_RX_mode();
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000049 	.word	0x20000049
 8000acc:	08008bc4 	.word	0x08008bc4
 8000ad0:	20000120 	.word	0x20000120
 8000ad4:	20000790 	.word	0x20000790
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	08008c30 	.word	0x08008c30
 8000ae0:	20000794 	.word	0x20000794
 8000ae4:	20000046 	.word	0x20000046
 8000ae8:	2000004a 	.word	0x2000004a

08000aec <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <RXCommande2+0x20>)
 8000af8:	f002 ff98 	bl	8003a2c <HAL_GPIO_WritePin>
	// Отсылаем ответ
	ModeRadio=1;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <RXCommande2+0x24>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
    CommandToRadio(2);
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fefa 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
   // Rf96_Lora_RX_mode();
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	2000004a 	.word	0x2000004a

08000b14 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <RXCommande3+0x34>)
 8000b20:	f002 ff84 	bl	8003a2c <HAL_GPIO_WritePin>
	// Ждем 5 секунд
	HAL_Delay(5000);
 8000b24:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b28:	f002 f896 	bl	8002c58 <HAL_Delay>
	// Убираем единицу с двигателя
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <RXCommande3+0x34>)
 8000b34:	f002 ff7a 	bl	8003a2c <HAL_GPIO_WritePin>
	// Отсылаем ответ
	ModeRadio=1;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <RXCommande3+0x38>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
    CommandToRadio(3);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f7ff fedc 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
    //Rf96_Lora_RX_mode();
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	2000004a 	.word	0x2000004a

08000b50 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

	RadioIrq=1;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <RXCommande4+0x14>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]

}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20000048 	.word	0x20000048

08000b68 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	///ФЛЕШКА
    // Закрываем файл
	fres=f_close(&fil);
 8000b6c:	4817      	ldr	r0, [pc, #92]	; (8000bcc <RXCommande5+0x64>)
 8000b6e:	f007 ff6a 	bl	8008a46 <f_close>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <RXCommande5+0x68>)
 8000b78:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <RXCommande5+0x68>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <RXCommande5+0x26>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2102      	movs	r1, #2
 8000b86:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <RXCommande5+0x6c>)
 8000b88:	f002 ff50 	bl	8003a2c <HAL_GPIO_WritePin>
		while(1);
 8000b8c:	e7fe      	b.n	8000b8c <RXCommande5+0x24>
	}
	fres=f_mount(NULL, "", 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4911      	ldr	r1, [pc, #68]	; (8000bd8 <RXCommande5+0x70>)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f007 fb60 	bl	8008258 <f_mount>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <RXCommande5+0x68>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <RXCommande5+0x68>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <RXCommande5+0x4c>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <RXCommande5+0x6c>)
 8000bae:	f002 ff3d 	bl	8003a2c <HAL_GPIO_WritePin>
		while(1);
 8000bb2:	e7fe      	b.n	8000bb2 <RXCommande5+0x4a>
	}
    ResolveSDWrite=0; // Закрываем доступ к записи на SD
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <RXCommande5+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
    ModeRadio=1;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <RXCommande5+0x78>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
    CommandToRadio(5);
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f7ff fe9b 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
   // Rf96_Lora_RX_mode();
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000794 	.word	0x20000794
 8000bd0:	20000790 	.word	0x20000790
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	08008bc4 	.word	0x08008bc4
 8000bdc:	20000046 	.word	0x20000046
 8000be0:	2000004a 	.word	0x2000004a

08000be4 <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <RXCommande6+0x20>)
 8000bf0:	f002 ff1c 	bl	8003a2c <HAL_GPIO_WritePin>
	// Отсылаем ответ
	ModeRadio=1;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <RXCommande6+0x24>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
    CommandToRadio(6);
 8000bfa:	2006      	movs	r0, #6
 8000bfc:	f7ff fe7e 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
   // Rf96_Lora_RX_mode();
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020400 	.word	0x40020400
 8000c08:	2000004a 	.word	0x2000004a

08000c0c <CheckSD>:

// Проверка SD карты на работоспособность
void CheckSD(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000c10:	2201      	movs	r2, #1
 8000c12:	4928      	ldr	r1, [pc, #160]	; (8000cb4 <CheckSD+0xa8>)
 8000c14:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <CheckSD+0xac>)
 8000c16:	f007 fb1f 	bl	8008258 <f_mount>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <CheckSD+0xb0>)
 8000c20:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <CheckSD+0xb0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <CheckSD+0x2a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <CheckSD+0xb4>)
 8000c30:	f002 fefc 	bl	8003a2c <HAL_GPIO_WritePin>
			while(1);
 8000c34:	e7fe      	b.n	8000c34 <CheckSD+0x28>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, "CheckSD.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000c36:	220a      	movs	r2, #10
 8000c38:	4922      	ldr	r1, [pc, #136]	; (8000cc4 <CheckSD+0xb8>)
 8000c3a:	4823      	ldr	r0, [pc, #140]	; (8000cc8 <CheckSD+0xbc>)
 8000c3c:	f007 fb52 	bl	80082e4 <f_open>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <CheckSD+0xb0>)
 8000c46:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <CheckSD+0xb0>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d005      	beq.n	8000c5c <CheckSD+0x50>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2102      	movs	r1, #2
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <CheckSD+0xb4>)
 8000c56:	f002 fee9 	bl	8003a2c <HAL_GPIO_WritePin>
			while(1);
 8000c5a:	e7fe      	b.n	8000c5a <CheckSD+0x4e>
		}
	    fres=f_close(&fil);
 8000c5c:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <CheckSD+0xbc>)
 8000c5e:	f007 fef2 	bl	8008a46 <f_close>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <CheckSD+0xb0>)
 8000c68:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <CheckSD+0xb0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <CheckSD+0x72>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <CheckSD+0xb4>)
 8000c78:	f002 fed8 	bl	8003a2c <HAL_GPIO_WritePin>
			while(1);
 8000c7c:	e7fe      	b.n	8000c7c <CheckSD+0x70>
		}
	    fres=f_mount(NULL, "", 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <CheckSD+0xa8>)
 8000c82:	2000      	movs	r0, #0
 8000c84:	f007 fae8 	bl	8008258 <f_mount>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <CheckSD+0xb0>)
 8000c8e:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <CheckSD+0xb0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <CheckSD+0x98>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <CheckSD+0xb4>)
 8000c9e:	f002 fec5 	bl	8003a2c <HAL_GPIO_WritePin>
			while(1);
 8000ca2:	e7fe      	b.n	8000ca2 <CheckSD+0x96>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <CheckSD+0xb4>)
 8000caa:	f002 febf 	bl	8003a2c <HAL_GPIO_WritePin>

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08008bc4 	.word	0x08008bc4
 8000cb8:	20000120 	.word	0x20000120
 8000cbc:	20000790 	.word	0x20000790
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	08008bc8 	.word	0x08008bc8
 8000cc8:	20000794 	.word	0x20000794

08000ccc <DataConv>:

// Парсер
void DataConv(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <DataConv+0x60>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4915      	ldr	r1, [pc, #84]	; (8000d30 <DataConv+0x64>)
 8000cdc:	f7ff fe50 	bl	8000980 <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	e017      	b.n	8000d16 <DataConv+0x4a>
	{
		uint32_TO_charmass(BuffMidW[i+4], SDbufWrite, 9+i*4, 3);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <DataConv+0x68>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	3309      	adds	r3, #9
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	490c      	ldr	r1, [pc, #48]	; (8000d30 <DataConv+0x64>)
 8000d00:	f7ff fe3e 	bl	8000980 <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	3302      	adds	r3, #2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <DataConv+0x64>)
 8000d0c:	212c      	movs	r1, #44	; 0x2c
 8000d0e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	3301      	adds	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b25      	cmp	r3, #37	; 0x25
 8000d1a:	d9e4      	bls.n	8000ce6 <DataConv+0x1a>
	}
	SDbufWrite[160]='\n';
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <DataConv+0x64>)
 8000d1e:	220a      	movs	r2, #10
 8000d20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000040 	.word	0x20000040
 8000d30:	20000584 	.word	0x20000584
 8000d34:	20000628 	.word	0x20000628

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f001 ff19 	bl	8002b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f937 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fb93 	bl	8001470 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d4a:	f000 fb4b 	bl	80013e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d4e:	f000 f9a3 	bl	8001098 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d52:	f000 faf3 	bl	800133c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d56:	f000 fb1b 	bl	8001390 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000d5a:	f000 fac5 	bl	80012e8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000d5e:	f005 fcd5 	bl	800670c <MX_FATFS_Init>
  MX_SPI3_Init();
 8000d62:	f000 f9cf 	bl	8001104 <MX_SPI3_Init>
  MX_UART5_Init();
 8000d66:	f000 fa93 	bl	8001290 <MX_UART5_Init>
  MX_TIM6_Init();
 8000d6a:	f000 fa01 	bl	8001170 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d6e:	f000 fa35 	bl	80011dc <MX_TIM7_Init>
  MX_TIM10_Init();
 8000d72:	f000 fa69 	bl	8001248 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	487e      	ldr	r0, [pc, #504]	; (8000f74 <main+0x23c>)
 8000d7c:	f002 fe56 	bl	8003a2c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000d80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d84:	f001 ff68 	bl	8002c58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	4879      	ldr	r0, [pc, #484]	; (8000f74 <main+0x23c>)
 8000d8e:	f002 fe4d 	bl	8003a2c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000d92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d96:	f001 ff5f 	bl	8002c58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	4875      	ldr	r0, [pc, #468]	; (8000f74 <main+0x23c>)
 8000da0:	f002 fe44 	bl	8003a2c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000da4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000da8:	f001 ff56 	bl	8002c58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2102      	movs	r1, #2
 8000db0:	4870      	ldr	r0, [pc, #448]	; (8000f74 <main+0x23c>)
 8000db2:	f002 fe3b 	bl	8003a2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2104      	movs	r1, #4
 8000dba:	486e      	ldr	r0, [pc, #440]	; (8000f74 <main+0x23c>)
 8000dbc:	f002 fe36 	bl	8003a2c <HAL_GPIO_WritePin>
	//Проверка SD карты
	CheckSD();
 8000dc0:	f7ff ff24 	bl	8000c0c <CheckSD>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8000dc4:	f7ff fcf9 	bl	80007ba <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 8000dc8:	f7ff fd3e 	bl	8000848 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8000dcc:	222b      	movs	r2, #43	; 0x2b
 8000dce:	496a      	ldr	r1, [pc, #424]	; (8000f78 <main+0x240>)
 8000dd0:	486a      	ldr	r0, [pc, #424]	; (8000f7c <main+0x244>)
 8000dd2:	f004 fd45 	bl	8005860 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 8000dd6:	486a      	ldr	r0, [pc, #424]	; (8000f80 <main+0x248>)
 8000dd8:	f004 fa45 	bl	8005266 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 8000ddc:	f7ff fe0a 	bl	80009f4 <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	4867      	ldr	r0, [pc, #412]	; (8000f84 <main+0x24c>)
 8000de6:	f002 fe09 	bl	80039fc <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d055      	beq.n	8000e9c <main+0x164>
		{
			if(ModeRadio==0) // если прерывание по приему
 8000df0:	4b65      	ldr	r3, [pc, #404]	; (8000f88 <main+0x250>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d144      	bne.n	8000e82 <main+0x14a>
			{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000df8:	4864      	ldr	r0, [pc, #400]	; (8000f8c <main+0x254>)
 8000dfa:	f7ff fcc1 	bl	8000780 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000dfe:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <main+0x254>)
 8000e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <main+0x254>)
 8000e0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <main+0x258>)
 8000e18:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 8000e1a:	f7ff fb73 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 8000e1e:	2128      	movs	r1, #40	; 0x28
 8000e20:	485a      	ldr	r0, [pc, #360]	; (8000f8c <main+0x254>)
 8000e22:	f7ff fd3f 	bl	80008a4 <Crc16>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <main+0x258>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d134      	bne.n	8000e9c <main+0x164>
			{
				switch(TX_RX_Radio[CommIndex])
 8000e32:	4b56      	ldr	r3, [pc, #344]	; (8000f8c <main+0x254>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d82f      	bhi.n	8000e9c <main+0x164>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <main+0x10c>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e63 	.word	0x08000e63
 8000e4c:	08000e69 	.word	0x08000e69
 8000e50:	08000e6f 	.word	0x08000e6f
 8000e54:	08000e75 	.word	0x08000e75
 8000e58:	08000e7b 	.word	0x08000e7b
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 8000e5c:	f7ff fde6 	bl	8000a2c <RXCommande1>
					break;
 8000e60:	e01c      	b.n	8000e9c <main+0x164>
				case 2:   // Команда открытия клапана
					RXCommande2();
 8000e62:	f7ff fe43 	bl	8000aec <RXCommande2>
					break;
 8000e66:	e019      	b.n	8000e9c <main+0x164>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 8000e68:	f7ff fe54 	bl	8000b14 <RXCommande3>
					break;
 8000e6c:	e016      	b.n	8000e9c <main+0x164>
				case 4:   // Команда запроса данных
					RXCommande4();
 8000e6e:	f7ff fe6f 	bl	8000b50 <RXCommande4>
					break;
 8000e72:	e013      	b.n	8000e9c <main+0x164>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 8000e74:	f7ff fe78 	bl	8000b68 <RXCommande5>
					break;
 8000e78:	e010      	b.n	8000e9c <main+0x164>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 8000e7a:	f7ff feb3 	bl	8000be4 <RXCommande6>
					break;
 8000e7e:	bf00      	nop
 8000e80:	e00c      	b.n	8000e9c <main+0x164>
				}
			}
			} else if(ModeRadio==1) // если прерывание по передаче
 8000e82:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <main+0x250>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d108      	bne.n	8000e9c <main+0x164>
			{
				ModeRadio=0;
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <main+0x250>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
				// Сбрасываем флаги
				Rf96_LoRaClearIrq();
 8000e90:	f7ff fb38 	bl	8000504 <Rf96_LoRaClearIrq>
	            // Заходим в Standby
				Rf96_Standby();
 8000e94:	f7ff fb3e 	bl	8000514 <Rf96_Standby>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 8000e98:	f7ff fcd6 	bl	8000848 <Rf96_Lora_RX_mode>

			}
		}

		if(ResolveSDWrite==1 && ReadyToWrite==1) //  Если разрешена запись на Sd карту и если есть что записывать
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <main+0x25c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d19b      	bne.n	8000ddc <main+0xa4>
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <main+0x260>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d197      	bne.n	8000ddc <main+0xa4>
		{
			// Запись на SD
			DataConv();
 8000eac:	f7ff ff0e 	bl	8000ccc <DataConv>
			fres = f_write(&fil, SDbufWrite, 161, &bytesWrote);
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <main+0x264>)
 8000eb2:	22a1      	movs	r2, #161	; 0xa1
 8000eb4:	493a      	ldr	r1, [pc, #232]	; (8000fa0 <main+0x268>)
 8000eb6:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <main+0x26c>)
 8000eb8:	f007 fbd2 	bl	8008660 <f_write>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <main+0x270>)
 8000ec2:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <main+0x270>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <main+0x1a0>
			{
				while(1)
				{
					// Выключение 1 светодиода, если какая-то проблема с записью на SD
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <main+0x23c>)
 8000ed2:	f002 fdab 	bl	8003a2c <HAL_GPIO_WritePin>
 8000ed6:	e7f9      	b.n	8000ecc <main+0x194>

				}
			}
			if(RadioIrq==1)  // Если пришел запрос на отправку измерений по радио
 8000ed8:	4b34      	ldr	r3, [pc, #208]	; (8000fac <main+0x274>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d13d      	bne.n	8000f5c <main+0x224>
			{
				for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	e00a      	b.n	8000efc <main+0x1c4>
				{
					TX_RX_Radio[i+1]=BuffMidW[i+4];
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	1d1a      	adds	r2, r3, #4
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4930      	ldr	r1, [pc, #192]	; (8000fb0 <main+0x278>)
 8000ef0:	5c89      	ldrb	r1, [r1, r2]
 8000ef2:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <main+0x254>)
 8000ef4:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b26      	cmp	r3, #38	; 0x26
 8000f00:	d9f1      	bls.n	8000ee6 <main+0x1ae>
				}
				// заносим в 1 элемент 4 команду
				TX_RX_Radio[0]=4;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <main+0x254>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	701a      	strb	r2, [r3, #0]
				// Отсылаем ответ
			    Rf96_Lora_TX_mode();
 8000f08:	f7ff fc83 	bl	8000812 <Rf96_Lora_TX_mode>
				//Подсчет CRC16
				CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000f0c:	2128      	movs	r1, #40	; 0x28
 8000f0e:	481f      	ldr	r0, [pc, #124]	; (8000f8c <main+0x254>)
 8000f10:	f7ff fcc8 	bl	80008a4 <Crc16>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <main+0x258>)
 8000f1a:	801a      	strh	r2, [r3, #0]
				TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <main+0x258>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <main+0x254>)
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <main+0x258>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <main+0x254>)
 8000f34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				// Установка адреса TX в буфере FIFO
				Rf96_TX_FifoAdr(0x80);
 8000f38:	2080      	movs	r0, #128	; 0x80
 8000f3a:	f7ff fbd7 	bl	80006ec <Rf96_TX_FifoAdr>
				// Устанавливает указатель на адрес начала массива TX в FIFO
				Rf96_FIFO_point(0x80);
 8000f3e:	2080      	movs	r0, #128	; 0x80
 8000f40:	f7ff fbf0 	bl	8000724 <Rf96_FIFO_point>
			    // Очистка флагов
				Rf96_LoRaClearIrq();
 8000f44:	f7ff fade 	bl	8000504 <Rf96_LoRaClearIrq>
			    // Отправка посылки
				Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000f48:	212a      	movs	r1, #42	; 0x2a
 8000f4a:	4810      	ldr	r0, [pc, #64]	; (8000f8c <main+0x254>)
 8000f4c:	f7ff fc99 	bl	8000882 <Rf96_LoRaTxPacket>
                // Запрещаем передачу по радио
				RadioIrq=0;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <main+0x274>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
				// следующее Прерывание будет по передаче
				ModeRadio=1;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <main+0x250>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
			}
			// Синхронизация файла и sd карты
			fres = f_sync(&fil);
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <main+0x26c>)
 8000f5e:	f007 fcf4 	bl	800894a <f_sync>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <main+0x270>)
 8000f68:	701a      	strb	r2, [r3, #0]
			ReadyToWrite=0;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <main+0x260>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 8000f70:	e734      	b.n	8000ddc <main+0xa4>
 8000f72:	bf00      	nop
 8000f74:	40020800 	.word	0x40020800
 8000f78:	200003c0 	.word	0x200003c0
 8000f7c:	20000444 	.word	0x20000444
 8000f80:	20000350 	.word	0x20000350
 8000f84:	40020000 	.word	0x40020000
 8000f88:	2000004a 	.word	0x2000004a
 8000f8c:	20000394 	.word	0x20000394
 8000f90:	20000044 	.word	0x20000044
 8000f94:	20000046 	.word	0x20000046
 8000f98:	20000047 	.word	0x20000047
 8000f9c:	20000390 	.word	0x20000390
 8000fa0:	20000584 	.word	0x20000584
 8000fa4:	20000794 	.word	0x20000794
 8000fa8:	20000790 	.word	0x20000790
 8000fac:	20000048 	.word	0x20000048
 8000fb0:	20000628 	.word	0x20000628

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2234      	movs	r2, #52	; 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 fdea 	bl	8008b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <SystemClock_Config+0xdc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	; (8001090 <SystemClock_Config+0xdc>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <SystemClock_Config+0xdc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <SystemClock_Config+0xe0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <SystemClock_Config+0xe0>)
 8000ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <SystemClock_Config+0xe0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001024:	2308      	movs	r3, #8
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001028:	23b4      	movs	r3, #180	; 0xb4
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4618      	mov	r0, r3
 800103e:	f003 f819 	bl	8004074 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001048:	f000 fb84 	bl	8001754 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800104c:	f002 fd08 	bl	8003a60 <HAL_PWREx_EnableOverDrive>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001056:	f000 fb7d 	bl	8001754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001066:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800106a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2105      	movs	r1, #5
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fd41 	bl	8003b00 <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001084:	f000 fb66 	bl	8001754 <Error_Handler>
  }
}
 8001088:	bf00      	nop
 800108a:	3750      	adds	r7, #80	; 0x50
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_SPI1_Init+0x64>)
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <MX_SPI1_Init+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI1_Init+0x64>)
 80010a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI1_Init+0x64>)
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI1_Init+0x64>)
 80010cc:	2210      	movs	r2, #16
 80010ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_SPI1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI1_Init+0x64>)
 80010e4:	220a      	movs	r2, #10
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_SPI1_Init+0x64>)
 80010ea:	f003 fa1d 	bl	8004528 <HAL_SPI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010f4:	f000 fb2e 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000698 	.word	0x20000698
 8001100:	40013000 	.word	0x40013000

08001104 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_SPI3_Init+0x64>)
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <MX_SPI3_Init+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_SPI3_Init+0x64>)
 8001110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001114:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_SPI3_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_SPI3_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_SPI3_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_SPI3_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_SPI3_Init+0x64>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_SPI3_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_SPI3_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_SPI3_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_SPI3_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_SPI3_Init+0x64>)
 8001150:	220a      	movs	r2, #10
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_SPI3_Init+0x64>)
 8001156:	f003 f9e7 	bl	8004528 <HAL_SPI_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001160:	f000 faf8 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200003ec 	.word	0x200003ec
 800116c:	40003c00 	.word	0x40003c00

08001170 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM6_Init+0x64>)
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <MX_TIM6_Init+0x68>)
 8001182:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_TIM6_Init+0x64>)
 8001186:	f242 3227 	movw	r2, #8999	; 0x2327
 800118a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_TIM6_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_TIM6_Init+0x64>)
 8001194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001198:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_TIM6_Init+0x64>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <MX_TIM6_Init+0x64>)
 80011a2:	f004 f835 	bl	8005210 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011ac:	f000 fad2 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_TIM6_Init+0x64>)
 80011be:	f004 fa71 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 fac4 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000654 	.word	0x20000654
 80011d8:	40001000 	.word	0x40001000

080011dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_TIM7_Init+0x64>)
 80011ec:	4a15      	ldr	r2, [pc, #84]	; (8001244 <MX_TIM7_Init+0x68>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_TIM7_Init+0x64>)
 80011f2:	f242 3227 	movw	r2, #8999	; 0x2327
 80011f6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_TIM7_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_TIM7_Init+0x64>)
 8001200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001204:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_TIM7_Init+0x64>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_TIM7_Init+0x64>)
 800120e:	f003 ffff 	bl	8005210 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001218:	f000 fa9c 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_TIM7_Init+0x64>)
 800122a:	f004 fa3b 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001234:	f000 fa8e 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200009c4 	.word	0x200009c4
 8001244:	40001400 	.word	0x40001400

08001248 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_TIM10_Init+0x40>)
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <MX_TIM10_Init+0x44>)
 8001250:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <MX_TIM10_Init+0x40>)
 8001254:	f242 3227 	movw	r2, #8999	; 0x2327
 8001258:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_TIM10_Init+0x40>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_TIM10_Init+0x40>)
 8001262:	f242 7210 	movw	r2, #10000	; 0x2710
 8001266:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_TIM10_Init+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_TIM10_Init+0x40>)
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_TIM10_Init+0x40>)
 8001276:	f003 ffcb 	bl	8005210 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001280:	f000 fa68 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000350 	.word	0x20000350
 800128c:	40014400 	.word	0x40014400

08001290 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_UART5_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <MX_UART5_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_UART5_Init+0x50>)
 800129c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_UART5_Init+0x50>)
 80012a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a8:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_UART5_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_UART5_Init+0x50>)
 80012b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_UART5_Init+0x50>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_UART5_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_UART5_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_UART5_Init+0x50>)
 80012cc:	f004 fa7a 	bl	80057c4 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 80012d6:	f000 fa3d 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000444 	.word	0x20000444
 80012e4:	40005000 	.word	0x40005000

080012e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <MX_USART1_UART_Init+0x50>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 80012f4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80012f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_USART1_UART_Init+0x4c>)
 8001320:	f004 fa50 	bl	80057c4 <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800132a:	f000 fa13 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000544 	.word	0x20000544
 8001338:	40011000 	.word	0x40011000

0800133c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <MX_USART2_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001348:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800134c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_USART2_UART_Init+0x4c>)
 8001374:	f004 fa26 	bl	80057c4 <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800137e:	f000 f9e9 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200006f0 	.word	0x200006f0
 800138c:	40004400 	.word	0x40004400

08001390 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART3_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 800139c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80013a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART3_UART_Init+0x4c>)
 80013c8:	f004 f9fc 	bl	80057c4 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f000 f9bf 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000e0 	.word	0x200000e0
 80013e0:	40004800 	.word	0x40004800

080013e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_DMA_Init+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <MX_DMA_Init+0x88>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_DMA_Init+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_DMA_Init+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <MX_DMA_Init+0x88>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_DMA_Init+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	200b      	movs	r0, #11
 8001428:	f001 fd13 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800142c:	200b      	movs	r0, #11
 800142e:	f001 fd2c 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	200c      	movs	r0, #12
 8001438:	f001 fd0b 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800143c:	200c      	movs	r0, #12
 800143e:	f001 fd24 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2011      	movs	r0, #17
 8001448:	f001 fd03 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800144c:	2011      	movs	r0, #17
 800144e:	f001 fd1c 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	203a      	movs	r0, #58	; 0x3a
 8001458:	f001 fcfb 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800145c:	203a      	movs	r0, #58	; 0x3a
 800145e:	f001 fd14 	bl	8002e8a <HAL_NVIC_EnableIRQ>

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <MX_GPIO_Init+0x1b8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a66      	ldr	r2, [pc, #408]	; (8001628 <MX_GPIO_Init+0x1b8>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b64      	ldr	r3, [pc, #400]	; (8001628 <MX_GPIO_Init+0x1b8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b60      	ldr	r3, [pc, #384]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a5f      	ldr	r2, [pc, #380]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b5d      	ldr	r3, [pc, #372]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a58      	ldr	r2, [pc, #352]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b52      	ldr	r3, [pc, #328]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a51      	ldr	r2, [pc, #324]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <MX_GPIO_Init+0x1b8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	210e      	movs	r1, #14
 80014fa:	484c      	ldr	r0, [pc, #304]	; (800162c <MX_GPIO_Init+0x1bc>)
 80014fc:	f002 fa96 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f248 0112 	movw	r1, #32786	; 0x8012
 8001506:	484a      	ldr	r0, [pc, #296]	; (8001630 <MX_GPIO_Init+0x1c0>)
 8001508:	f002 fa90 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001512:	4846      	ldr	r0, [pc, #280]	; (800162c <MX_GPIO_Init+0x1bc>)
 8001514:	f002 fa8a 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 8001518:	2200      	movs	r2, #0
 800151a:	f24f 0142 	movw	r1, #61506	; 0xf042
 800151e:	4845      	ldr	r0, [pc, #276]	; (8001634 <MX_GPIO_Init+0x1c4>)
 8001520:	f002 fa84 	bl	8003a2c <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800152a:	4b43      	ldr	r3, [pc, #268]	; (8001638 <MX_GPIO_Init+0x1c8>)
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	483c      	ldr	r0, [pc, #240]	; (800162c <MX_GPIO_Init+0x1bc>)
 800153a:	f002 f8cd 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800153e:	230e      	movs	r3, #14
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4835      	ldr	r0, [pc, #212]	; (800162c <MX_GPIO_Init+0x1bc>)
 8001556:	f002 f8bf 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800155a:	f240 4301 	movw	r3, #1025	; 0x401
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4830      	ldr	r0, [pc, #192]	; (8001630 <MX_GPIO_Init+0x1c0>)
 8001570:	f002 f8b2 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001574:	f248 0312 	movw	r3, #32786	; 0x8012
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4828      	ldr	r0, [pc, #160]	; (8001630 <MX_GPIO_Init+0x1c0>)
 800158e:	f002 f8a3 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 8001592:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4820      	ldr	r0, [pc, #128]	; (800162c <MX_GPIO_Init+0x1bc>)
 80015ac:	f002 f894 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015b0:	2302      	movs	r3, #2
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	481b      	ldr	r0, [pc, #108]	; (8001634 <MX_GPIO_Init+0x1c4>)
 80015c8:	f002 f886 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 80015cc:	f24d 0340 	movw	r3, #53312	; 0xd040
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <MX_GPIO_Init+0x1c4>)
 80015e6:	f002 f877 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_GPIO_Init+0x1c4>)
 8001604:	f002 f868 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001608:	2338      	movs	r3, #56	; 0x38
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_GPIO_Init+0x1c4>)
 800161c:	f002 f85c 	bl	80036d8 <HAL_GPIO_Init>

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40020800 	.word	0x40020800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	10210000 	.word	0x10210000

0800163c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <HAL_UART_RxCpltCallback+0x8c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d138      	bne.n	80016be <HAL_UART_RxCpltCallback+0x82>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <HAL_UART_RxCpltCallback+0x90>)
 800164e:	f003 fe2e 	bl	80052ae <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_UART_RxCpltCallback+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2104      	movs	r1, #4
 800165c:	481d      	ldr	r0, [pc, #116]	; (80016d4 <HAL_UART_RxCpltCallback+0x98>)
 800165e:	f002 f9e5 	bl	8003a2c <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_UART_RxCpltCallback+0x9c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b7c      	cmp	r3, #124	; 0x7c
 8001668:	d123      	bne.n	80016b2 <HAL_UART_RxCpltCallback+0x76>
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_UART_RxCpltCallback+0x9c>)
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	2b6e      	cmp	r3, #110	; 0x6e
 8001670:	d11f      	bne.n	80016b2 <HAL_UART_RxCpltCallback+0x76>
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_UART_RxCpltCallback+0x9c>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	2ba1      	cmp	r3, #161	; 0xa1
 8001678:	d11b      	bne.n	80016b2 <HAL_UART_RxCpltCallback+0x76>
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_UART_RxCpltCallback+0x9c>)
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	2b2c      	cmp	r3, #44	; 0x2c
 8001680:	d117      	bne.n	80016b2 <HAL_UART_RxCpltCallback+0x76>
		{
			// Готов к записи
			ReadyToWrite=1;
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_UART_RxCpltCallback+0xa0>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
			//  Время в мс, когда пришли данные
			reciveTime = HAL_GetTick();
 8001688:	f001 fada 	bl	8002c40 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_UART_RxCpltCallback+0xa4>)
 8001690:	601a      	str	r2, [r3, #0]
			// Перезаписываем данные в массив посредник
			for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	e008      	b.n	80016aa <HAL_UART_RxCpltCallback+0x6e>
			{
				BuffMidW[i]=BuffCkt[i];
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_UART_RxCpltCallback+0x9c>)
 800169e:	5c89      	ldrb	r1, [r1, r2]
 80016a0:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_UART_RxCpltCallback+0xa8>)
 80016a2:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	3301      	adds	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b2a      	cmp	r3, #42	; 0x2a
 80016ae:	d9f3      	bls.n	8001698 <HAL_UART_RxCpltCallback+0x5c>
 80016b0:	e002      	b.n	80016b8 <HAL_UART_RxCpltCallback+0x7c>
			}
		} else  // Если данные не синхронизированы
		{
			readFlag=1;
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_UART_RxCpltCallback+0xac>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
		}
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <HAL_UART_RxCpltCallback+0x90>)
 80016ba:	f003 fdd4 	bl	8005266 <HAL_TIM_Base_Start_IT>
	}

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000444 	.word	0x20000444
 80016cc:	20000350 	.word	0x20000350
 80016d0:	40014400 	.word	0x40014400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	200003c0 	.word	0x200003c0
 80016dc:	20000047 	.word	0x20000047
 80016e0:	20000040 	.word	0x20000040
 80016e4:	20000628 	.word	0x20000628
 80016e8:	20000694 	.word	0x20000694

080016ec <HAL_UART_TxCpltCallback>:
// Обработчик прерываний Usartа по передаче
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]


}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d112      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 8001716:	480a      	ldr	r0, [pc, #40]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001718:	f003 fda5 	bl	8005266 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2104      	movs	r1, #4
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001722:	f002 f983 	bl	8003a2c <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001728:	f004 f91a 	bl	8005960 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 800172c:	222b      	movs	r2, #43	; 0x2b
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001732:	f004 f895 	bl	8005860 <HAL_UART_Receive_DMA>
	}
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000350 	.word	0x20000350
 8001744:	40014400 	.word	0x40014400
 8001748:	40020800 	.word	0x40020800
 800174c:	20000444 	.word	0x20000444
 8001750:	200003c0 	.word	0x200003c0

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800176e:	1df9      	adds	r1, r7, #7
 8001770:	230a      	movs	r3, #10
 8001772:	2201      	movs	r2, #1
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <SPICmd8bit+0x20>)
 8001776:	f002 ff3b 	bl	80045f0 <HAL_SPI_Transmit>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000698 	.word	0x20000698

08001788 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001792:	1df9      	adds	r1, r7, #7
 8001794:	230a      	movs	r3, #10
 8001796:	2201      	movs	r2, #1
 8001798:	4803      	ldr	r0, [pc, #12]	; (80017a8 <SPIRead8bit+0x20>)
 800179a:	f003 f85d 	bl	8004858 <HAL_SPI_Receive>

  return(RdPara);
 800179e:	79fb      	ldrb	r3, [r7, #7]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000698 	.word	0x20000698

080017ac <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 80017b6:	2200      	movs	r2, #0
 80017b8:	2140      	movs	r1, #64	; 0x40
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <SPIRead+0x38>)
 80017bc:	f002 f936 	bl	8003a2c <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ffce 	bl	8001764 <SPICmd8bit>
  tmp = SPIRead8bit();
 80017c8:	f7ff ffde 	bl	8001788 <SPIRead8bit>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 80017d0:	2201      	movs	r2, #1
 80017d2:	2140      	movs	r1, #64	; 0x40
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <SPIRead+0x38>)
 80017d6:	f002 f929 	bl	8003a2c <HAL_GPIO_WritePin>
  return(tmp);
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40020400 	.word	0x40020400

080017e8 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80017f8:	2200      	movs	r2, #0
 80017fa:	2140      	movs	r1, #64	; 0x40
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <SPIWrite+0x44>)
 80017fe:	f002 f915 	bl	8003a2c <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001808:	b2db      	uxtb	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ffaa 	bl	8001764 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffa6 	bl	8001764 <SPICmd8bit>
	NSS_H();
 8001818:	2201      	movs	r2, #1
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <SPIWrite+0x44>)
 800181e:	f002 f905 	bl	8003a2c <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40020400 	.word	0x40020400

08001830 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d91f      	bls.n	8001886 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001846:	2200      	movs	r2, #0
 8001848:	2140      	movs	r1, #64	; 0x40
 800184a:	4811      	ldr	r0, [pc, #68]	; (8001890 <SPIBurstRead+0x60>)
 800184c:	f002 f8ee 	bl	8003a2c <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff86 	bl	8001764 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e009      	b.n	8001872 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	18d4      	adds	r4, r2, r3
 8001864:	f7ff ff90 	bl	8001788 <SPIRead8bit>
 8001868:	4603      	mov	r3, r0
 800186a:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	3301      	adds	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	429a      	cmp	r2, r3
 8001878:	d3f1      	bcc.n	800185e <SPIBurstRead+0x2e>
      NSS_H();
 800187a:	2201      	movs	r2, #1
 800187c:	2140      	movs	r1, #64	; 0x40
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <SPIBurstRead+0x60>)
 8001880:	f002 f8d4 	bl	8003a2c <HAL_GPIO_WritePin>
 8001884:	e000      	b.n	8001888 <SPIBurstRead+0x58>
    return;
 8001886:	bf00      	nop
  }
}
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	40020400 	.word	0x40020400

08001894 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	4613      	mov	r3, r2
 80018a2:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d922      	bls.n	80018f0 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 80018aa:	2200      	movs	r2, #0
 80018ac:	2140      	movs	r1, #64	; 0x40
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <BurstWrite+0x64>)
 80018b0:	f002 f8bc 	bl	8003a2c <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff51 	bl	8001764 <SPICmd8bit>
    for(i=0;i<length;i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e009      	b.n	80018dc <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff47 	bl	8001764 <SPICmd8bit>
    for(i=0;i<length;i++)
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d3f1      	bcc.n	80018c8 <BurstWrite+0x34>
    NSS_H();
 80018e4:	2201      	movs	r2, #1
 80018e6:	2140      	movs	r1, #64	; 0x40
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <BurstWrite+0x64>)
 80018ea:	f002 f89f 	bl	8003a2c <HAL_GPIO_WritePin>
 80018ee:	e000      	b.n	80018f2 <BurstWrite+0x5e>
    return;
 80018f0:	bf00      	nop
  }
}
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020400 	.word	0x40020400

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a4e      	ldr	r2, [pc, #312]	; (8001aa4 <HAL_SPI_MspInit+0x158>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12c      	bne.n	80019c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019a6:	23e0      	movs	r3, #224	; 0xe0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b6:	2305      	movs	r3, #5
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	483a      	ldr	r0, [pc, #232]	; (8001aac <HAL_SPI_MspInit+0x160>)
 80019c2:	f001 fe89 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019c6:	e068      	b.n	8001a9a <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_SPI_MspInit+0x164>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d163      	bne.n	8001a9a <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 80019dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a2c      	ldr	r2, [pc, #176]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_SPI_MspInit+0x15c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a36:	2307      	movs	r3, #7
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <HAL_SPI_MspInit+0x168>)
 8001a42:	f001 fe49 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a58:	2306      	movs	r3, #6
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <HAL_SPI_MspInit+0x16c>)
 8001a64:	f001 fe38 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <HAL_SPI_MspInit+0x16c>)
 8001a86:	f001 fe27 	bl	80036d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2033      	movs	r0, #51	; 0x33
 8001a90:	f001 f9df 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a94:	2033      	movs	r0, #51	; 0x33
 8001a96:	f001 f9f8 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3730      	adds	r7, #48	; 0x30
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013000 	.word	0x40013000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40003c00 	.word	0x40003c00
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800

08001abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_TIM_Base_MspInit+0xb8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d116      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2036      	movs	r0, #54	; 0x36
 8001af0:	f001 f9af 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af4:	2036      	movs	r0, #54	; 0x36
 8001af6:	f001 f9c8 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001afa:	e036      	b.n	8001b6a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_TIM_Base_MspInit+0xc0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d116      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001b10:	f043 0320 	orr.w	r3, r3, #32
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2037      	movs	r0, #55	; 0x37
 8001b28:	f001 f993 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b2c:	2037      	movs	r0, #55	; 0x37
 8001b2e:	f001 f9ac 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8001b32:	e01a      	b.n	8001b6a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_TIM_Base_MspInit+0xc4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d115      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_TIM_Base_MspInit+0xbc>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2019      	movs	r0, #25
 8001b60:	f001 f977 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b64:	2019      	movs	r0, #25
 8001b66:	f001 f990 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40001000 	.word	0x40001000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40001400 	.word	0x40001400
 8001b80:	40014400 	.word	0x40014400

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b092      	sub	sp, #72	; 0x48
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a87      	ldr	r2, [pc, #540]	; (8001dc0 <HAL_UART_MspInit+0x23c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	f040 8083 	bne.w	8001cae <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
 8001bac:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a84      	ldr	r2, [pc, #528]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc8:	4b7e      	ldr	r3, [pc, #504]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4a7d      	ldr	r2, [pc, #500]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd4:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be4:	4b77      	ldr	r3, [pc, #476]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a76      	ldr	r2, [pc, #472]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c0e:	2308      	movs	r3, #8
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c16:	4619      	mov	r1, r3
 8001c18:	486b      	ldr	r0, [pc, #428]	; (8001dc8 <HAL_UART_MspInit+0x244>)
 8001c1a:	f001 fd5d 	bl	80036d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c2e:	2308      	movs	r3, #8
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	4619      	mov	r1, r3
 8001c38:	4864      	ldr	r0, [pc, #400]	; (8001dcc <HAL_UART_MspInit+0x248>)
 8001c3a:	f001 fd4d 	bl	80036d8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001c3e:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c40:	4a64      	ldr	r2, [pc, #400]	; (8001dd4 <HAL_UART_MspInit+0x250>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001c44:	4b62      	ldr	r3, [pc, #392]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4c:	4b60      	ldr	r3, [pc, #384]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c72:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c74:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7a:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001c80:	4853      	ldr	r0, [pc, #332]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c82:	f001 f91d 	bl	8002ec0 <HAL_DMA_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001c8c:	f7ff fd62 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4f      	ldr	r2, [pc, #316]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
 8001c96:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <HAL_UART_MspInit+0x24c>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2035      	movs	r0, #53	; 0x35
 8001ca2:	f001 f8d6 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ca6:	2035      	movs	r0, #53	; 0x35
 8001ca8:	f001 f8ef 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cac:	e18e      	b.n	8001fcc <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a49      	ldr	r2, [pc, #292]	; (8001dd8 <HAL_UART_MspInit+0x254>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	f040 8099 	bne.w	8001dec <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a32      	ldr	r2, [pc, #200]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_UART_MspInit+0x240>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d20:	2307      	movs	r3, #7
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d28:	4619      	mov	r1, r3
 8001d2a:	482c      	ldr	r0, [pc, #176]	; (8001ddc <HAL_UART_MspInit+0x258>)
 8001d2c:	f001 fcd4 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d40:	2307      	movs	r3, #7
 8001d42:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4825      	ldr	r0, [pc, #148]	; (8001de0 <HAL_UART_MspInit+0x25c>)
 8001d4c:	f001 fcc4 	bl	80036d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d52:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <HAL_UART_MspInit+0x264>)
 8001d54:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d5c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d70:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d84:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001d94:	f001 f894 	bl	8002ec0 <HAL_DMA_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001d9e:	f7ff fcd9 	bl	8001754 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_UART_MspInit+0x260>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2025      	movs	r0, #37	; 0x25
 8001db4:	f001 f84d 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001db8:	2025      	movs	r0, #37	; 0x25
 8001dba:	f001 f866 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8001dbe:	e105      	b.n	8001fcc <HAL_UART_MspInit+0x448>
 8001dc0:	40005000 	.word	0x40005000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	20000730 	.word	0x20000730
 8001dd4:	40026010 	.word	0x40026010
 8001dd8:	40011000 	.word	0x40011000
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020400 	.word	0x40020400
 8001de4:	20000484 	.word	0x20000484
 8001de8:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a78      	ldr	r2, [pc, #480]	; (8001fd4 <HAL_UART_MspInit+0x450>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d162      	bne.n	8001ebc <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	4b77      	ldr	r3, [pc, #476]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a76      	ldr	r2, [pc, #472]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a6f      	ldr	r2, [pc, #444]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e2e:	230c      	movs	r3, #12
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3e:	2307      	movs	r3, #7
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e46:	4619      	mov	r1, r3
 8001e48:	4864      	ldr	r0, [pc, #400]	; (8001fdc <HAL_UART_MspInit+0x458>)
 8001e4a:	f001 fc45 	bl	80036d8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e50:	4a64      	ldr	r2, [pc, #400]	; (8001fe4 <HAL_UART_MspInit+0x460>)
 8001e52:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e54:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e5c:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e70:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e76:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e7c:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e8e:	4854      	ldr	r0, [pc, #336]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001e90:	f001 f816 	bl	8002ec0 <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8001e9a:	f7ff fc5b 	bl	8001754 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4f      	ldr	r2, [pc, #316]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_UART_MspInit+0x45c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2026      	movs	r0, #38	; 0x26
 8001eb0:	f000 ffcf 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb4:	2026      	movs	r0, #38	; 0x26
 8001eb6:	f000 ffe8 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8001eba:	e087      	b.n	8001fcc <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a49      	ldr	r2, [pc, #292]	; (8001fe8 <HAL_UART_MspInit+0x464>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	f040 8082 	bne.w	8001fcc <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4a3a      	ldr	r2, [pc, #232]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_UART_MspInit+0x454>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f34:	4619      	mov	r1, r3
 8001f36:	482d      	ldr	r0, [pc, #180]	; (8001fec <HAL_UART_MspInit+0x468>)
 8001f38:	f001 fbce 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f56:	4619      	mov	r1, r3
 8001f58:	4825      	ldr	r0, [pc, #148]	; (8001ff0 <HAL_UART_MspInit+0x46c>)
 8001f5a:	f001 fbbd 	bl	80036d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f60:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_UART_MspInit+0x474>)
 8001f62:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f6a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f92:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001fa0:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001fa2:	f000 ff8d 	bl	8002ec0 <HAL_DMA_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001fac:	f7ff fbd2 	bl	8001754 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <HAL_UART_MspInit+0x470>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2027      	movs	r0, #39	; 0x27
 8001fc2:	f000 ff46 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fc6:	2027      	movs	r0, #39	; 0x27
 8001fc8:	f000 ff5f 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8001fcc:	bf00      	nop
 8001fce:	3748      	adds	r7, #72	; 0x48
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	200004e4 	.word	0x200004e4
 8001fe4:	400260a0 	.word	0x400260a0
 8001fe8:	40004800 	.word	0x40004800
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	20000080 	.word	0x20000080
 8001ff8:	40026028 	.word	0x40026028

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 fde2 	bl	8002c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <DMA1_Stream0_IRQHandler+0x10>)
 800205e:	f001 f8c7 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000730 	.word	0x20000730

0800206c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <DMA1_Stream1_IRQHandler+0x10>)
 8002072:	f001 f8bd 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000080 	.word	0x20000080

08002080 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <DMA1_Stream6_IRQHandler+0x10>)
 8002086:	f001 f8b3 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200004e4 	.word	0x200004e4

08002094 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800209a:	f003 f933 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000350 	.word	0x20000350

080020a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <USART1_IRQHandler+0x10>)
 80020ae:	f003 fcd9 	bl	8005a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000544 	.word	0x20000544

080020bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <USART2_IRQHandler+0x10>)
 80020c2:	f003 fccf 	bl	8005a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200006f0 	.word	0x200006f0

080020d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <USART3_IRQHandler+0x10>)
 80020d6:	f003 fcc5 	bl	8005a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200000e0 	.word	0x200000e0

080020e4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <SPI3_IRQHandler+0x10>)
 80020ea:	f002 fe61 	bl	8004db0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003ec 	.word	0x200003ec

080020f8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <UART5_IRQHandler+0x10>)
 80020fe:	f003 fcb1 	bl	8005a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000444 	.word	0x20000444

0800210c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <TIM6_DAC_IRQHandler+0x10>)
 8002112:	f003 f8f7 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000654 	.word	0x20000654

08002120 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <TIM7_IRQHandler+0x10>)
 8002126:	f003 f8ed 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200009c4 	.word	0x200009c4

08002134 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA2_Stream2_IRQHandler+0x10>)
 800213a:	f001 f859 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000484 	.word	0x20000484

08002148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <SystemInit+0x28>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <SystemInit+0x28>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SystemInit+0x28>)
 800215e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002162:	609a      	str	r2, [r3, #8]
#endif
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800217c:	f000 fd60 	bl	8002c40 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SPI_Timer_On+0x20>)
 8002184:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <SPI_Timer_On+0x24>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000a04 	.word	0x20000a04
 8002198:	20000a08 	.word	0x20000a08

0800219c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80021a0:	f000 fd4e 	bl	8002c40 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SPI_Timer_Status+0x24>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SPI_Timer_Status+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	bf34      	ite	cc
 80021b4:	2301      	movcc	r3, #1
 80021b6:	2300      	movcs	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000a04 	.word	0x20000a04
 80021c4:	20000a08 	.word	0x20000a08

080021c8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 80021d2:	f107 020f 	add.w	r2, r7, #15
 80021d6:	1df9      	adds	r1, r7, #7
 80021d8:	2332      	movs	r3, #50	; 0x32
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2301      	movs	r3, #1
 80021de:	4804      	ldr	r0, [pc, #16]	; (80021f0 <xchg_spi+0x28>)
 80021e0:	f002 fc43 	bl	8004a6a <HAL_SPI_TransmitReceive>
    return rxDat;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200003ec 	.word	0x200003ec

080021f4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e00a      	b.n	800221a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	18d4      	adds	r4, r2, r3
 800220a:	20ff      	movs	r0, #255	; 0xff
 800220c:	f7ff ffdc 	bl	80021c8 <xchg_spi>
 8002210:	4603      	mov	r3, r0
 8002212:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d3f0      	bcc.n	8002204 <rcvr_spi_multi+0x10>
	}
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e009      	b.n	800224e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ffc0 	bl	80021c8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d3f1      	bcc.n	800223a <xmit_spi_multi+0x10>
	}
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002266:	f000 fceb 	bl	8002c40 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002270:	20ff      	movs	r0, #255	; 0xff
 8002272:	f7ff ffa9 	bl	80021c8 <xchg_spi>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2bff      	cmp	r3, #255	; 0xff
 800227e:	d007      	beq.n	8002290 <wait_ready+0x32>
 8002280:	f000 fcde 	bl	8002c40 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8ef      	bhi.n	8002270 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2bff      	cmp	r3, #255	; 0xff
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <despiselect+0x1c>)
 80022b0:	f001 fbbc 	bl	8003a2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80022b4:	20ff      	movs	r0, #255	; 0xff
 80022b6:	f7ff ff87 	bl	80021c8 <xchg_spi>

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40020000 	.word	0x40020000

080022c4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80022c8:	2200      	movs	r2, #0
 80022ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ce:	480a      	ldr	r0, [pc, #40]	; (80022f8 <spiselect+0x34>)
 80022d0:	f001 fbac 	bl	8003a2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80022d4:	20ff      	movs	r0, #255	; 0xff
 80022d6:	f7ff ff77 	bl	80021c8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80022da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022de:	f7ff ffbe 	bl	800225e <wait_ready>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <spiselect+0x28>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e002      	b.n	80022f2 <spiselect+0x2e>

	despiselect();
 80022ec:	f7ff ffda 	bl	80022a4 <despiselect>
	return 0;	/* Timeout */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40020000 	.word	0x40020000

080022fc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002306:	20c8      	movs	r0, #200	; 0xc8
 8002308:	f7ff ff34 	bl	8002174 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800230c:	20ff      	movs	r0, #255	; 0xff
 800230e:	f7ff ff5b 	bl	80021c8 <xchg_spi>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2bff      	cmp	r3, #255	; 0xff
 800231a:	d104      	bne.n	8002326 <rcvr_datablock+0x2a>
 800231c:	f7ff ff3e 	bl	800219c <SPI_Timer_Status>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f2      	bne.n	800230c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2bfe      	cmp	r3, #254	; 0xfe
 800232a:	d001      	beq.n	8002330 <rcvr_datablock+0x34>
 800232c:	2300      	movs	r3, #0
 800232e:	e00a      	b.n	8002346 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff5e 	bl	80021f4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002338:	20ff      	movs	r0, #255	; 0xff
 800233a:	f7ff ff45 	bl	80021c8 <xchg_spi>
 800233e:	20ff      	movs	r0, #255	; 0xff
 8002340:	f7ff ff42 	bl	80021c8 <xchg_spi>

	return 1;						/* Function succeeded */
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800235a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800235e:	f7ff ff7e 	bl	800225e <wait_ready>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <xmit_datablock+0x1e>
 8002368:	2300      	movs	r3, #0
 800236a:	e01e      	b.n	80023aa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff2a 	bl	80021c8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2bfd      	cmp	r3, #253	; 0xfd
 8002378:	d016      	beq.n	80023a8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800237a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff53 	bl	800222a <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002384:	20ff      	movs	r0, #255	; 0xff
 8002386:	f7ff ff1f 	bl	80021c8 <xchg_spi>
 800238a:	20ff      	movs	r0, #255	; 0xff
 800238c:	f7ff ff1c 	bl	80021c8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002390:	20ff      	movs	r0, #255	; 0xff
 8002392:	f7ff ff19 	bl	80021c8 <xchg_spi>
 8002396:	4603      	mov	r3, r0
 8002398:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d001      	beq.n	80023a8 <xmit_datablock+0x5a>
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <xmit_datablock+0x5c>
	}
	return 1;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	6039      	str	r1, [r7, #0]
 80023bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da0e      	bge.n	80023e4 <send_cmd+0x32>
		cmd &= 0x7F;
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023cc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80023ce:	2100      	movs	r1, #0
 80023d0:	2037      	movs	r0, #55	; 0x37
 80023d2:	f7ff ffee 	bl	80023b2 <send_cmd>
 80023d6:	4603      	mov	r3, r0
 80023d8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80023da:	7bbb      	ldrb	r3, [r7, #14]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d901      	bls.n	80023e4 <send_cmd+0x32>
 80023e0:	7bbb      	ldrb	r3, [r7, #14]
 80023e2:	e051      	b.n	8002488 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d008      	beq.n	80023fc <send_cmd+0x4a>
		despiselect();
 80023ea:	f7ff ff5b 	bl	80022a4 <despiselect>
		if (!spiselect()) return 0xFF;
 80023ee:	f7ff ff69 	bl	80022c4 <spiselect>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <send_cmd+0x4a>
 80023f8:	23ff      	movs	r3, #255	; 0xff
 80023fa:	e045      	b.n	8002488 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fedf 	bl	80021c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	0e1b      	lsrs	r3, r3, #24
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fed9 	bl	80021c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fed3 	bl	80021c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fecd 	bl	80021c8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fec8 	bl	80021c8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <send_cmd+0x94>
 8002442:	2395      	movs	r3, #149	; 0x95
 8002444:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d101      	bne.n	8002450 <send_cmd+0x9e>
 800244c:	2387      	movs	r3, #135	; 0x87
 800244e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff feb8 	bl	80021c8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d102      	bne.n	8002464 <send_cmd+0xb2>
 800245e:	20ff      	movs	r0, #255	; 0xff
 8002460:	f7ff feb2 	bl	80021c8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002464:	230a      	movs	r3, #10
 8002466:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002468:	20ff      	movs	r0, #255	; 0xff
 800246a:	f7ff fead 	bl	80021c8 <xchg_spi>
 800246e:	4603      	mov	r3, r0
 8002470:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002476:	2b00      	cmp	r3, #0
 8002478:	da05      	bge.n	8002486 <send_cmd+0xd4>
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	3b01      	subs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002486:	7bbb      	ldrb	r3, [r7, #14]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <USER_SPI_initialize+0x14>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0cb      	b.n	800263c <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80024a4:	4b67      	ldr	r3, [pc, #412]	; (8002644 <USER_SPI_initialize+0x1b4>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <USER_SPI_initialize+0x2a>
 80024b2:	4b64      	ldr	r3, [pc, #400]	; (8002644 <USER_SPI_initialize+0x1b4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	e0c0      	b.n	800263c <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <USER_SPI_initialize+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c2:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80024c4:	230a      	movs	r3, #10
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e005      	b.n	80024d6 <USER_SPI_initialize+0x46>
 80024ca:	20ff      	movs	r0, #255	; 0xff
 80024cc:	f7ff fe7c 	bl	80021c8 <xchg_spi>
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f6      	bne.n	80024ca <USER_SPI_initialize+0x3a>

	ty = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80024e0:	2100      	movs	r1, #0
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff ff65 	bl	80023b2 <send_cmd>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f040 808b 	bne.w	8002606 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80024f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f4:	f7ff fe3e 	bl	8002174 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80024f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80024fc:	2008      	movs	r0, #8
 80024fe:	f7ff ff58 	bl	80023b2 <send_cmd>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d151      	bne.n	80025ac <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e00d      	b.n	800252a <USER_SPI_initialize+0x9a>
 800250e:	7bfc      	ldrb	r4, [r7, #15]
 8002510:	20ff      	movs	r0, #255	; 0xff
 8002512:	f7ff fe59 	bl	80021c8 <xchg_spi>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4423      	add	r3, r4
 8002520:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	3301      	adds	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d9ee      	bls.n	800250e <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002530:	7abb      	ldrb	r3, [r7, #10]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d167      	bne.n	8002606 <USER_SPI_initialize+0x176>
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	2baa      	cmp	r3, #170	; 0xaa
 800253a:	d164      	bne.n	8002606 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800253c:	bf00      	nop
 800253e:	f7ff fe2d 	bl	800219c <SPI_Timer_Status>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <USER_SPI_initialize+0xc8>
 8002548:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800254c:	20a9      	movs	r0, #169	; 0xa9
 800254e:	f7ff ff30 	bl	80023b2 <send_cmd>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f2      	bne.n	800253e <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002558:	f7ff fe20 	bl	800219c <SPI_Timer_Status>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d051      	beq.n	8002606 <USER_SPI_initialize+0x176>
 8002562:	2100      	movs	r1, #0
 8002564:	203a      	movs	r0, #58	; 0x3a
 8002566:	f7ff ff24 	bl	80023b2 <send_cmd>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d14a      	bne.n	8002606 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e00d      	b.n	8002592 <USER_SPI_initialize+0x102>
 8002576:	7bfc      	ldrb	r4, [r7, #15]
 8002578:	20ff      	movs	r0, #255	; 0xff
 800257a:	f7ff fe25 	bl	80021c8 <xchg_spi>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4423      	add	r3, r4
 8002588:	f803 2c08 	strb.w	r2, [r3, #-8]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d9ee      	bls.n	8002576 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002598:	7a3b      	ldrb	r3, [r7, #8]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <USER_SPI_initialize+0x116>
 80025a2:	230c      	movs	r3, #12
 80025a4:	e000      	b.n	80025a8 <USER_SPI_initialize+0x118>
 80025a6:	2304      	movs	r3, #4
 80025a8:	737b      	strb	r3, [r7, #13]
 80025aa:	e02c      	b.n	8002606 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80025ac:	2100      	movs	r1, #0
 80025ae:	20a9      	movs	r0, #169	; 0xa9
 80025b0:	f7ff feff 	bl	80023b2 <send_cmd>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d804      	bhi.n	80025c4 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80025ba:	2302      	movs	r3, #2
 80025bc:	737b      	strb	r3, [r7, #13]
 80025be:	23a9      	movs	r3, #169	; 0xa9
 80025c0:	73bb      	strb	r3, [r7, #14]
 80025c2:	e003      	b.n	80025cc <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80025c4:	2301      	movs	r3, #1
 80025c6:	737b      	strb	r3, [r7, #13]
 80025c8:	2301      	movs	r3, #1
 80025ca:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80025cc:	bf00      	nop
 80025ce:	f7ff fde5 	bl	800219c <SPI_Timer_Status>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <USER_SPI_initialize+0x158>
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fee8 	bl	80023b2 <send_cmd>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f2      	bne.n	80025ce <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80025e8:	f7ff fdd8 	bl	800219c <SPI_Timer_Status>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <USER_SPI_initialize+0x172>
 80025f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f6:	2010      	movs	r0, #16
 80025f8:	f7ff fedb 	bl	80023b2 <send_cmd>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <USER_SPI_initialize+0x176>
				ty = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8002606:	4a11      	ldr	r2, [pc, #68]	; (800264c <USER_SPI_initialize+0x1bc>)
 8002608:	7b7b      	ldrb	r3, [r7, #13]
 800260a:	7013      	strb	r3, [r2, #0]
	despiselect();
 800260c:	f7ff fe4a 	bl	80022a4 <despiselect>

	if (ty) {			/* OK */
 8002610:	7b7b      	ldrb	r3, [r7, #13]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <USER_SPI_initialize+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2210      	movs	r2, #16
 800261c:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <USER_SPI_initialize+0x1b4>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <USER_SPI_initialize+0x1b4>)
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e002      	b.n	8002636 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <USER_SPI_initialize+0x1b4>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002636:	4b03      	ldr	r3, [pc, #12]	; (8002644 <USER_SPI_initialize+0x1b4>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b2db      	uxtb	r3, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	20000004 	.word	0x20000004
 8002648:	200003ec 	.word	0x200003ec
 800264c:	2000004b 	.word	0x2000004b

08002650 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <USER_SPI_status+0x14>
 8002660:	2301      	movs	r3, #1
 8002662:	e002      	b.n	800266a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <USER_SPI_status+0x28>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	b2db      	uxtb	r3, r3
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000004 	.word	0x20000004

0800267c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <USER_SPI_read+0x1c>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <USER_SPI_read+0x20>
 8002698:	2304      	movs	r3, #4
 800269a:	e04d      	b.n	8002738 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800269c:	4b28      	ldr	r3, [pc, #160]	; (8002740 <USER_SPI_read+0xc4>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <USER_SPI_read+0x32>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e044      	b.n	8002738 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80026ae:	4b25      	ldr	r3, [pc, #148]	; (8002744 <USER_SPI_read+0xc8>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <USER_SPI_read+0x44>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	025b      	lsls	r3, r3, #9
 80026be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d111      	bne.n	80026ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	2011      	movs	r0, #17
 80026ca:	f7ff fe72 	bl	80023b2 <send_cmd>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d129      	bne.n	8002728 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80026d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026d8:	68b8      	ldr	r0, [r7, #8]
 80026da:	f7ff fe0f 	bl	80022fc <rcvr_datablock>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d021      	beq.n	8002728 <USER_SPI_read+0xac>
			count = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	e01e      	b.n	8002728 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	2012      	movs	r0, #18
 80026ee:	f7ff fe60 	bl	80023b2 <send_cmd>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d117      	bne.n	8002728 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80026f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	f7ff fdfd 	bl	80022fc <rcvr_datablock>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <USER_SPI_read+0xa2>
				buff += 512;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800270e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3b01      	subs	r3, #1
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ed      	bne.n	80026f8 <USER_SPI_read+0x7c>
 800271c:	e000      	b.n	8002720 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800271e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002720:	2100      	movs	r1, #0
 8002722:	200c      	movs	r0, #12
 8002724:	f7ff fe45 	bl	80023b2 <send_cmd>
		}
	}
	despiselect();
 8002728:	f7ff fdbc 	bl	80022a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000004 	.word	0x20000004
 8002744:	2000004b 	.word	0x2000004b

08002748 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4603      	mov	r3, r0
 8002756:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <USER_SPI_write+0x1c>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <USER_SPI_write+0x20>
 8002764:	2304      	movs	r3, #4
 8002766:	e063      	b.n	8002830 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002768:	4b33      	ldr	r3, [pc, #204]	; (8002838 <USER_SPI_write+0xf0>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <USER_SPI_write+0x32>
 8002776:	2303      	movs	r3, #3
 8002778:	e05a      	b.n	8002830 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800277a:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <USER_SPI_write+0xf0>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <USER_SPI_write+0x44>
 8002788:	2302      	movs	r3, #2
 800278a:	e051      	b.n	8002830 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <USER_SPI_write+0xf4>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <USER_SPI_write+0x56>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	025b      	lsls	r3, r3, #9
 800279c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d110      	bne.n	80027c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	2018      	movs	r0, #24
 80027a8:	f7ff fe03 	bl	80023b2 <send_cmd>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d136      	bne.n	8002820 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80027b2:	21fe      	movs	r1, #254	; 0xfe
 80027b4:	68b8      	ldr	r0, [r7, #8]
 80027b6:	f7ff fdca 	bl	800234e <xmit_datablock>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02f      	beq.n	8002820 <USER_SPI_write+0xd8>
			count = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	e02c      	b.n	8002820 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <USER_SPI_write+0xf4>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f003 0306 	and.w	r3, r3, #6
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <USER_SPI_write+0x92>
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	2097      	movs	r0, #151	; 0x97
 80027d6:	f7ff fdec 	bl	80023b2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	2019      	movs	r0, #25
 80027de:	f7ff fde8 	bl	80023b2 <send_cmd>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d11b      	bne.n	8002820 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80027e8:	21fc      	movs	r1, #252	; 0xfc
 80027ea:	68b8      	ldr	r0, [r7, #8]
 80027ec:	f7ff fdaf 	bl	800234e <xmit_datablock>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <USER_SPI_write+0xc4>
				buff += 512;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ee      	bne.n	80027e8 <USER_SPI_write+0xa0>
 800280a:	e000      	b.n	800280e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800280c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800280e:	21fd      	movs	r1, #253	; 0xfd
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff fd9c 	bl	800234e <xmit_datablock>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <USER_SPI_write+0xd8>
 800281c:	2301      	movs	r3, #1
 800281e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002820:	f7ff fd40 	bl	80022a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000004 	.word	0x20000004
 800283c:	2000004b 	.word	0x2000004b

08002840 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08c      	sub	sp, #48	; 0x30
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	603a      	str	r2, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
 800284c:	460b      	mov	r3, r1
 800284e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <USER_SPI_ioctl+0x1a>
 8002856:	2304      	movs	r3, #4
 8002858:	e15a      	b.n	8002b10 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800285a:	4baf      	ldr	r3, [pc, #700]	; (8002b18 <USER_SPI_ioctl+0x2d8>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <USER_SPI_ioctl+0x2c>
 8002868:	2303      	movs	r3, #3
 800286a:	e151      	b.n	8002b10 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002872:	79bb      	ldrb	r3, [r7, #6]
 8002874:	2b04      	cmp	r3, #4
 8002876:	f200 8136 	bhi.w	8002ae6 <USER_SPI_ioctl+0x2a6>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <USER_SPI_ioctl+0x40>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002895 	.word	0x08002895
 8002884:	080028a9 	.word	0x080028a9
 8002888:	08002ae7 	.word	0x08002ae7
 800288c:	08002955 	.word	0x08002955
 8002890:	08002a4b 	.word	0x08002a4b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002894:	f7ff fd16 	bl	80022c4 <spiselect>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8127 	beq.w	8002aee <USER_SPI_ioctl+0x2ae>
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80028a6:	e122      	b.n	8002aee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80028a8:	2100      	movs	r1, #0
 80028aa:	2009      	movs	r0, #9
 80028ac:	f7ff fd81 	bl	80023b2 <send_cmd>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 811d 	bne.w	8002af2 <USER_SPI_ioctl+0x2b2>
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2110      	movs	r1, #16
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fd1c 	bl	80022fc <rcvr_datablock>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8113 	beq.w	8002af2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80028cc:	7b3b      	ldrb	r3, [r7, #12]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d111      	bne.n	80028fa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80028d6:	7d7b      	ldrb	r3, [r7, #21]
 80028d8:	461a      	mov	r2, r3
 80028da:	7d3b      	ldrb	r3, [r7, #20]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	4413      	add	r3, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80028ea:	4413      	add	r3, r2
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	029a      	lsls	r2, r3, #10
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e028      	b.n	800294c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80028fa:	7c7b      	ldrb	r3, [r7, #17]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	b2da      	uxtb	r2, r3
 8002902:	7dbb      	ldrb	r3, [r7, #22]
 8002904:	09db      	lsrs	r3, r3, #7
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4413      	add	r3, r2
 800290a:	b2da      	uxtb	r2, r3
 800290c:	7d7b      	ldrb	r3, [r7, #21]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0306 	and.w	r3, r3, #6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4413      	add	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3302      	adds	r3, #2
 800291e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002922:	7d3b      	ldrb	r3, [r7, #20]
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	7cbb      	ldrb	r3, [r7, #18]
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002938:	4413      	add	r3, r2
 800293a:	3301      	adds	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800293e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002942:	3b09      	subs	r3, #9
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	409a      	lsls	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002952:	e0ce      	b.n	8002af2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002954:	4b71      	ldr	r3, [pc, #452]	; (8002b1c <USER_SPI_ioctl+0x2dc>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d031      	beq.n	80029c4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002960:	2100      	movs	r1, #0
 8002962:	208d      	movs	r0, #141	; 0x8d
 8002964:	f7ff fd25 	bl	80023b2 <send_cmd>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80c3 	bne.w	8002af6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002970:	20ff      	movs	r0, #255	; 0xff
 8002972:	f7ff fc29 	bl	80021c8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2110      	movs	r1, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fcbd 	bl	80022fc <rcvr_datablock>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80b6 	beq.w	8002af6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800298a:	2330      	movs	r3, #48	; 0x30
 800298c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002990:	e007      	b.n	80029a2 <USER_SPI_ioctl+0x162>
 8002992:	20ff      	movs	r0, #255	; 0xff
 8002994:	f7ff fc18 	bl	80021c8 <xchg_spi>
 8002998:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800299c:	3b01      	subs	r3, #1
 800299e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80029a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f3      	bne.n	8002992 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80029aa:	7dbb      	ldrb	r3, [r7, #22]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	2310      	movs	r3, #16
 80029b4:	fa03 f202 	lsl.w	r2, r3, r2
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80029c2:	e098      	b.n	8002af6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80029c4:	2100      	movs	r1, #0
 80029c6:	2009      	movs	r0, #9
 80029c8:	f7ff fcf3 	bl	80023b2 <send_cmd>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 8091 	bne.w	8002af6 <USER_SPI_ioctl+0x2b6>
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	2110      	movs	r1, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fc8e 	bl	80022fc <rcvr_datablock>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8087 	beq.w	8002af6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <USER_SPI_ioctl+0x2dc>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80029f4:	7dbb      	ldrb	r3, [r7, #22]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80029fc:	7dfa      	ldrb	r2, [r7, #23]
 80029fe:	09d2      	lsrs	r2, r2, #7
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4413      	add	r3, r2
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	7e7b      	ldrb	r3, [r7, #25]
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e013      	b.n	8002a42 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002a1a:	7dbb      	ldrb	r3, [r7, #22]
 8002a1c:	109b      	asrs	r3, r3, #2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	3301      	adds	r3, #1
 8002a26:	7dfa      	ldrb	r2, [r7, #23]
 8002a28:	00d2      	lsls	r2, r2, #3
 8002a2a:	f002 0218 	and.w	r2, r2, #24
 8002a2e:	7df9      	ldrb	r1, [r7, #23]
 8002a30:	0949      	lsrs	r1, r1, #5
 8002a32:	b2c9      	uxtb	r1, r1
 8002a34:	440a      	add	r2, r1
 8002a36:	3201      	adds	r2, #1
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002a48:	e055      	b.n	8002af6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002a4a:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <USER_SPI_ioctl+0x2dc>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d051      	beq.n	8002afa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002a56:	f107 020c 	add.w	r2, r7, #12
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	210b      	movs	r1, #11
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff feee 	bl	8002840 <USER_SPI_ioctl>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d149      	bne.n	8002afe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002a6a:	7b3b      	ldrb	r3, [r7, #12]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <USER_SPI_ioctl+0x23e>
 8002a74:	7dbb      	ldrb	r3, [r7, #22]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d041      	beq.n	8002b02 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <USER_SPI_ioctl+0x2dc>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	025b      	lsls	r3, r3, #9
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	025b      	lsls	r3, r3, #9
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa8:	2020      	movs	r0, #32
 8002aaa:	f7ff fc82 	bl	80023b2 <send_cmd>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d128      	bne.n	8002b06 <USER_SPI_ioctl+0x2c6>
 8002ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab6:	2021      	movs	r0, #33	; 0x21
 8002ab8:	f7ff fc7b 	bl	80023b2 <send_cmd>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d121      	bne.n	8002b06 <USER_SPI_ioctl+0x2c6>
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2026      	movs	r0, #38	; 0x26
 8002ac6:	f7ff fc74 	bl	80023b2 <send_cmd>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11a      	bne.n	8002b06 <USER_SPI_ioctl+0x2c6>
 8002ad0:	f247 5030 	movw	r0, #30000	; 0x7530
 8002ad4:	f7ff fbc3 	bl	800225e <wait_ready>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d013      	beq.n	8002b06 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002ae4:	e00f      	b.n	8002b06 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002aec:	e00c      	b.n	8002b08 <USER_SPI_ioctl+0x2c8>
		break;
 8002aee:	bf00      	nop
 8002af0:	e00a      	b.n	8002b08 <USER_SPI_ioctl+0x2c8>
		break;
 8002af2:	bf00      	nop
 8002af4:	e008      	b.n	8002b08 <USER_SPI_ioctl+0x2c8>
		break;
 8002af6:	bf00      	nop
 8002af8:	e006      	b.n	8002b08 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002afa:	bf00      	nop
 8002afc:	e004      	b.n	8002b08 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002afe:	bf00      	nop
 8002b00:	e002      	b.n	8002b08 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <USER_SPI_ioctl+0x2c8>
		break;
 8002b06:	bf00      	nop
	}

	despiselect();
 8002b08:	f7ff fbcc 	bl	80022a4 <despiselect>

	return res;
 8002b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	2000004b 	.word	0x2000004b

08002b20 <Reset_Handler>:
 8002b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b58 <LoopFillZerobss+0x14>
 8002b24:	2100      	movs	r1, #0
 8002b26:	e003      	b.n	8002b30 <LoopCopyDataInit>

08002b28 <CopyDataInit>:
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <LoopFillZerobss+0x18>)
 8002b2a:	585b      	ldr	r3, [r3, r1]
 8002b2c:	5043      	str	r3, [r0, r1]
 8002b2e:	3104      	adds	r1, #4

08002b30 <LoopCopyDataInit>:
 8002b30:	480b      	ldr	r0, [pc, #44]	; (8002b60 <LoopFillZerobss+0x1c>)
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <LoopFillZerobss+0x20>)
 8002b34:	1842      	adds	r2, r0, r1
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3f6      	bcc.n	8002b28 <CopyDataInit>
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <LoopFillZerobss+0x24>)
 8002b3c:	e002      	b.n	8002b44 <LoopFillZerobss>

08002b3e <FillZerobss>:
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f842 3b04 	str.w	r3, [r2], #4

08002b44 <LoopFillZerobss>:
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <LoopFillZerobss+0x28>)
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3f9      	bcc.n	8002b3e <FillZerobss>
 8002b4a:	f7ff fafd 	bl	8002148 <SystemInit>
 8002b4e:	f006 f801 	bl	8008b54 <__libc_init_array>
 8002b52:	f7fe f8f1 	bl	8000d38 <main>
 8002b56:	4770      	bx	lr
 8002b58:	20020000 	.word	0x20020000
 8002b5c:	08008f44 	.word	0x08008f44
 8002b60:	20000000 	.word	0x20000000
 8002b64:	20000024 	.word	0x20000024
 8002b68:	20000024 	.word	0x20000024
 8002b6c:	20000e78 	.word	0x20000e78

08002b70 <ADC_IRQHandler>:
 8002b70:	e7fe      	b.n	8002b70 <ADC_IRQHandler>
	...

08002b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <HAL_Init+0x40>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_Init+0x40>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_Init+0x40>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f000 f94d 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f808 	bl	8002bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba8:	f7fe fea8 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x54>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_InitTick+0x58>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f965 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00e      	b.n	8002c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d80a      	bhi.n	8002c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bec:	2200      	movs	r2, #0
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf4:	f000 f92d 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf8:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <HAL_InitTick+0x5c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	2000000c 	.word	0x2000000c
 8002c14:	20000008 	.word	0x20000008

08002c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_IncTick+0x24>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_IncTick+0x24>)
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	2000000c 	.word	0x2000000c
 8002c3c:	20000a0c 	.word	0x20000a0c

08002c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_GetTick+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000a0c 	.word	0x20000a0c

08002c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff ffee 	bl	8002c40 <HAL_GetTick>
 8002c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d005      	beq.n	8002c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_Delay+0x40>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7e:	bf00      	nop
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f7      	bhi.n	8002c80 <HAL_Delay+0x28>
  {
  }
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff3e 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff8e 	bl	8002d90 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5d 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff31 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff feb8 	bl	8002c40 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e099      	b.n	8003010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efc:	e00f      	b.n	8002f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002efe:	f7ff fe9f 	bl	8002c40 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d908      	bls.n	8002f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e078      	b.n	8003010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e8      	bne.n	8002efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_DMA_Init+0x158>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d107      	bne.n	8002f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4313      	orrs	r3, r2
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0307 	bic.w	r3, r3, #7
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d117      	bne.n	8002fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fb0d 	bl	80035e4 <DMA_CheckFifoParam>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2240      	movs	r2, #64	; 0x40
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e016      	b.n	8003010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fac4 	bl	8003578 <DMA_CalcBaseAndBitshift>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	223f      	movs	r2, #63	; 0x3f
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	f010803f 	.word	0xf010803f

0800301c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Start_IT+0x26>
 800303e:	2302      	movs	r3, #2
 8003040:	e040      	b.n	80030c4 <HAL_DMA_Start_IT+0xa8>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d12f      	bne.n	80030b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fa56 	bl	800351c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	223f      	movs	r2, #63	; 0x3f
 8003076:	409a      	lsls	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0216 	orr.w	r2, r2, #22
 800308a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0208 	orr.w	r2, r2, #8
 80030a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e005      	b.n	80030c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030da:	f7ff fdb1 	bl	8002c40 <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d008      	beq.n	80030fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e052      	b.n	80031a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0216 	bic.w	r2, r2, #22
 800310c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_DMA_Abort+0x62>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0208 	bic.w	r2, r2, #8
 800313c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314e:	e013      	b.n	8003178 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003150:	f7ff fd76 	bl	8002c40 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b05      	cmp	r3, #5
 800315c:	d90c      	bls.n	8003178 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2203      	movs	r2, #3
 8003170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e015      	b.n	80031a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e4      	bne.n	8003150 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	223f      	movs	r2, #63	; 0x3f
 800318c:	409a      	lsls	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d004      	beq.n	80031ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00c      	b.n	80031e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2205      	movs	r2, #5
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031fc:	4b92      	ldr	r3, [pc, #584]	; (8003448 <HAL_DMA_IRQHandler+0x258>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a92      	ldr	r2, [pc, #584]	; (800344c <HAL_DMA_IRQHandler+0x25c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	2208      	movs	r2, #8
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01a      	beq.n	800325c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2208      	movs	r2, #8
 800324a:	409a      	lsls	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	2201      	movs	r2, #1
 8003280:	409a      	lsls	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2204      	movs	r2, #4
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d012      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	2204      	movs	r2, #4
 80032b6:	409a      	lsls	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2210      	movs	r2, #16
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d043      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03c      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	2210      	movs	r2, #16
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d018      	beq.n	8003332 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d024      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	e01f      	b.n	8003360 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
 8003330:	e016      	b.n	8003360 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0208 	bic.w	r2, r2, #8
 800334e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2220      	movs	r2, #32
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 808e 	beq.w	800348e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8086 	beq.w	800348e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	2220      	movs	r2, #32
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b05      	cmp	r3, #5
 8003398:	d136      	bne.n	8003408 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0216 	bic.w	r2, r2, #22
 80033a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_DMA_IRQHandler+0x1da>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0208 	bic.w	r2, r2, #8
 80033d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	223f      	movs	r2, #63	; 0x3f
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d07d      	beq.n	80034fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
        }
        return;
 8003406:	e078      	b.n	80034fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01c      	beq.n	8003450 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d108      	bne.n	8003436 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	2b00      	cmp	r3, #0
 800342a:	d030      	beq.n	800348e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
 8003434:	e02b      	b.n	800348e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d027      	beq.n	800348e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
 8003446:	e022      	b.n	800348e <HAL_DMA_IRQHandler+0x29e>
 8003448:	20000000 	.word	0x20000000
 800344c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0210 	bic.w	r2, r2, #16
 800346c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	2b00      	cmp	r3, #0
 8003494:	d032      	beq.n	80034fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d022      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2205      	movs	r2, #5
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d307      	bcc.n	80034d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f2      	bne.n	80034ba <HAL_DMA_IRQHandler+0x2ca>
 80034d4:	e000      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e000      	b.n	80034fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80034fa:	bf00      	nop
    }
  }
}
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop

08003504 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d108      	bne.n	800355c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355a:	e007      	b.n	800356c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3b10      	subs	r3, #16
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <DMA_CalcBaseAndBitshift+0x64>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003592:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d909      	bls.n	80035ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	1d1a      	adds	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	659a      	str	r2, [r3, #88]	; 0x58
 80035b8:	e007      	b.n	80035ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	aaaaaaab 	.word	0xaaaaaaab
 80035e0:	08008eac 	.word	0x08008eac

080035e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d855      	bhi.n	80036b0 <DMA_CheckFifoParam+0xcc>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <DMA_CheckFifoParam+0x28>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362f 	.word	0x0800362f
 8003614:	0800361d 	.word	0x0800361d
 8003618:	080036b1 	.word	0x080036b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d045      	beq.n	80036b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e042      	b.n	80036b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003636:	d13f      	bne.n	80036b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e03c      	b.n	80036b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	d121      	bne.n	800368c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d836      	bhi.n	80036bc <DMA_CheckFifoParam+0xd8>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <DMA_CheckFifoParam+0x70>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366b 	.word	0x0800366b
 800365c:	08003665 	.word	0x08003665
 8003660:	0800367d 	.word	0x0800367d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e02f      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d024      	beq.n	80036c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367a:	e021      	b.n	80036c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003684:	d11e      	bne.n	80036c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368a:	e01b      	b.n	80036c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <DMA_CheckFifoParam+0xb4>
 8003692:	2b03      	cmp	r3, #3
 8003694:	d003      	beq.n	800369e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003696:	e018      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e015      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      break;
 80036ae:	e00b      	b.n	80036c8 <DMA_CheckFifoParam+0xe4>
      break;
 80036b0:	bf00      	nop
 80036b2:	e00a      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b4:	bf00      	nop
 80036b6:	e008      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b8:	bf00      	nop
 80036ba:	e006      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036bc:	bf00      	nop
 80036be:	e004      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036c0:	bf00      	nop
 80036c2:	e002      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;   
 80036c4:	bf00      	nop
 80036c6:	e000      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036c8:	bf00      	nop
    }
  } 
  
  return status; 
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e165      	b.n	80039c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	f040 8154 	bne.w	80039ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d00b      	beq.n	8003732 <HAL_GPIO_Init+0x5a>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d007      	beq.n	8003732 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003726:	2b11      	cmp	r3, #17
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b12      	cmp	r3, #18
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0xfc>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b12      	cmp	r3, #18
 80037d2:	d123      	bne.n	800381c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	08da      	lsrs	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3208      	adds	r2, #8
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	220f      	movs	r2, #15
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80ae 	beq.w	80039ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_GPIO_Init+0x2fc>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a5b      	ldr	r2, [pc, #364]	; (80039d4 <HAL_GPIO_Init+0x2fc>)
 8003868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_GPIO_Init+0x2fc>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387a:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_GPIO_Init+0x300>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <HAL_GPIO_Init+0x304>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d025      	beq.n	80038f2 <HAL_GPIO_Init+0x21a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4d      	ldr	r2, [pc, #308]	; (80039e0 <HAL_GPIO_Init+0x308>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <HAL_GPIO_Init+0x216>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4c      	ldr	r2, [pc, #304]	; (80039e4 <HAL_GPIO_Init+0x30c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x212>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4b      	ldr	r2, [pc, #300]	; (80039e8 <HAL_GPIO_Init+0x310>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x20e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4a      	ldr	r2, [pc, #296]	; (80039ec <HAL_GPIO_Init+0x314>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x20a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a49      	ldr	r2, [pc, #292]	; (80039f0 <HAL_GPIO_Init+0x318>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x206>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a48      	ldr	r2, [pc, #288]	; (80039f4 <HAL_GPIO_Init+0x31c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x202>
 80038d6:	2306      	movs	r3, #6
 80038d8:	e00c      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038da:	2307      	movs	r3, #7
 80038dc:	e00a      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038de:	2305      	movs	r3, #5
 80038e0:	e008      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e006      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038e6:	2303      	movs	r3, #3
 80038e8:	e004      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e002      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038f2:	2300      	movs	r3, #0
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f002 0203 	and.w	r2, r2, #3
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	4093      	lsls	r3, r2
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003904:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_GPIO_Init+0x300>)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_GPIO_Init+0x320>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003936:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <HAL_GPIO_Init+0x320>)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800393c:	4b2e      	ldr	r3, [pc, #184]	; (80039f8 <HAL_GPIO_Init+0x320>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003960:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <HAL_GPIO_Init+0x320>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_GPIO_Init+0x320>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800398a:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_GPIO_Init+0x320>)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_GPIO_Init+0x320>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b4:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_GPIO_Init+0x320>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b0f      	cmp	r3, #15
 80039c4:	f67f ae96 	bls.w	80036f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3724      	adds	r7, #36	; 0x24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021800 	.word	0x40021800
 80039f8:	40013c00 	.word	0x40013c00

080039fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e001      	b.n	8003a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a3c:	787b      	ldrb	r3, [r7, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a48:	e003      	b.n	8003a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	041a      	lsls	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	619a      	str	r2, [r3, #24]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8c:	f7ff f8d8 	bl	8002c40 <HAL_GetTick>
 8003a90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a92:	e009      	b.n	8003aa8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a94:	f7ff f8d4 	bl	8002c40 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa2:	d901      	bls.n	8003aa8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e01f      	b.n	8003ae8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab4:	d1ee      	bne.n	8003a94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003abc:	f7ff f8c0 	bl	8002c40 <HAL_GetTick>
 8003ac0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ac2:	e009      	b.n	8003ad8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ac4:	f7ff f8bc 	bl	8002c40 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad2:	d901      	bls.n	8003ad8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e007      	b.n	8003ae8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae4:	d1ee      	bne.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	420e0040 	.word	0x420e0040
 8003af8:	40007000 	.word	0x40007000
 8003afc:	420e0044 	.word	0x420e0044

08003b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0cc      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b68      	ldr	r3, [pc, #416]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d90c      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b8      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	494d      	ldr	r1, [pc, #308]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d044      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d119      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e06f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bce:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e067      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bde:	4b37      	ldr	r3, [pc, #220]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4934      	ldr	r1, [pc, #208]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf0:	f7ff f826 	bl	8002c40 <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7ff f822 	bl	8002c40 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e04f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 020c 	and.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1eb      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d20c      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e032      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4916      	ldr	r1, [pc, #88]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	490e      	ldr	r1, [pc, #56]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c86:	f000 f855 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	5cd3      	ldrb	r3, [r2, r3]
 8003c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe ff86 	bl	8002bb8 <HAL_InitTick>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023c00 	.word	0x40023c00
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	08008e94 	.word	0x08008e94
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000008 	.word	0x20000008

08003ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000000 	.word	0x20000000

08003ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ce8:	f7ff fff0 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003cec:	4601      	mov	r1, r0
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0a9b      	lsrs	r3, r3, #10
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4a03      	ldr	r2, [pc, #12]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	08008ea4 	.word	0x08008ea4

08003d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d10:	f7ff ffdc 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d14:	4601      	mov	r1, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0b5b      	lsrs	r3, r3, #13
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4a03      	ldr	r2, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d22:	5cd3      	ldrb	r3, [r2, r3]
 8003d24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	08008ea4 	.word	0x08008ea4

08003d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d4e:	4bc6      	ldr	r3, [pc, #792]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	f200 817e 	bhi.w	8004058 <HAL_RCC_GetSysClockFreq+0x324>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_RCC_GetSysClockFreq+0x30>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d99 	.word	0x08003d99
 8003d68:	08004059 	.word	0x08004059
 8003d6c:	08004059 	.word	0x08004059
 8003d70:	08004059 	.word	0x08004059
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08004059 	.word	0x08004059
 8003d7c:	08004059 	.word	0x08004059
 8003d80:	08004059 	.word	0x08004059
 8003d84:	08003da5 	.word	0x08003da5
 8003d88:	08004059 	.word	0x08004059
 8003d8c:	08004059 	.word	0x08004059
 8003d90:	08004059 	.word	0x08004059
 8003d94:	08003f01 	.word	0x08003f01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4bb4      	ldr	r3, [pc, #720]	; (800406c <HAL_RCC_GetSysClockFreq+0x338>)
 8003d9a:	613b      	str	r3, [r7, #16]
       break;
 8003d9c:	e15f      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9e:	4bb4      	ldr	r3, [pc, #720]	; (8004070 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003da0:	613b      	str	r3, [r7, #16]
      break;
 8003da2:	e15c      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da4:	4bb0      	ldr	r3, [pc, #704]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dae:	4bae      	ldr	r3, [pc, #696]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04a      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dba:	4bab      	ldr	r3, [pc, #684]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	f04f 0400 	mov.w	r4, #0
 8003dc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	ea03 0501 	and.w	r5, r3, r1
 8003dd0:	ea04 0602 	and.w	r6, r4, r2
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	f04f 0400 	mov.w	r4, #0
 8003de0:	0154      	lsls	r4, r2, #5
 8003de2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003de6:	014b      	lsls	r3, r1, #5
 8003de8:	4619      	mov	r1, r3
 8003dea:	4622      	mov	r2, r4
 8003dec:	1b49      	subs	r1, r1, r5
 8003dee:	eb62 0206 	sbc.w	r2, r2, r6
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	f04f 0400 	mov.w	r4, #0
 8003dfa:	0194      	lsls	r4, r2, #6
 8003dfc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e00:	018b      	lsls	r3, r1, #6
 8003e02:	1a5b      	subs	r3, r3, r1
 8003e04:	eb64 0402 	sbc.w	r4, r4, r2
 8003e08:	f04f 0100 	mov.w	r1, #0
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	00e2      	lsls	r2, r4, #3
 8003e12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e16:	00d9      	lsls	r1, r3, #3
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	195b      	adds	r3, r3, r5
 8003e1e:	eb44 0406 	adc.w	r4, r4, r6
 8003e22:	f04f 0100 	mov.w	r1, #0
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	0262      	lsls	r2, r4, #9
 8003e2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e30:	0259      	lsls	r1, r3, #9
 8003e32:	460b      	mov	r3, r1
 8003e34:	4614      	mov	r4, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	4621      	mov	r1, r4
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f04f 0400 	mov.w	r4, #0
 8003e40:	461a      	mov	r2, r3
 8003e42:	4623      	mov	r3, r4
 8003e44:	f7fc f9de 	bl	8000204 <__aeabi_uldivmod>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e049      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e50:	4b85      	ldr	r3, [pc, #532]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	f04f 0400 	mov.w	r4, #0
 8003e5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	ea03 0501 	and.w	r5, r3, r1
 8003e66:	ea04 0602 	and.w	r6, r4, r2
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4632      	mov	r2, r6
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	f04f 0400 	mov.w	r4, #0
 8003e76:	0154      	lsls	r4, r2, #5
 8003e78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e7c:	014b      	lsls	r3, r1, #5
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4622      	mov	r2, r4
 8003e82:	1b49      	subs	r1, r1, r5
 8003e84:	eb62 0206 	sbc.w	r2, r2, r6
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	f04f 0400 	mov.w	r4, #0
 8003e90:	0194      	lsls	r4, r2, #6
 8003e92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	1a5b      	subs	r3, r3, r1
 8003e9a:	eb64 0402 	sbc.w	r4, r4, r2
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003eac:	00d9      	lsls	r1, r3, #3
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	195b      	adds	r3, r3, r5
 8003eb4:	eb44 0406 	adc.w	r4, r4, r6
 8003eb8:	f04f 0100 	mov.w	r1, #0
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	02a2      	lsls	r2, r4, #10
 8003ec2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ec6:	0299      	lsls	r1, r3, #10
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4614      	mov	r4, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	4621      	mov	r1, r4
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f04f 0400 	mov.w	r4, #0
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4623      	mov	r3, r4
 8003eda:	f7fc f993 	bl	8000204 <__aeabi_uldivmod>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ee4:	4b60      	ldr	r3, [pc, #384]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	613b      	str	r3, [r7, #16]
      break;
 8003efe:	e0ae      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f00:	4b59      	ldr	r3, [pc, #356]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f08:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f0a:	4b57      	ldr	r3, [pc, #348]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04a      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f16:	4b54      	ldr	r3, [pc, #336]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	f04f 0400 	mov.w	r4, #0
 8003f20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	ea03 0501 	and.w	r5, r3, r1
 8003f2c:	ea04 0602 	and.w	r6, r4, r2
 8003f30:	4629      	mov	r1, r5
 8003f32:	4632      	mov	r2, r6
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	f04f 0400 	mov.w	r4, #0
 8003f3c:	0154      	lsls	r4, r2, #5
 8003f3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f42:	014b      	lsls	r3, r1, #5
 8003f44:	4619      	mov	r1, r3
 8003f46:	4622      	mov	r2, r4
 8003f48:	1b49      	subs	r1, r1, r5
 8003f4a:	eb62 0206 	sbc.w	r2, r2, r6
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	0194      	lsls	r4, r2, #6
 8003f58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f5c:	018b      	lsls	r3, r1, #6
 8003f5e:	1a5b      	subs	r3, r3, r1
 8003f60:	eb64 0402 	sbc.w	r4, r4, r2
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	00e2      	lsls	r2, r4, #3
 8003f6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f72:	00d9      	lsls	r1, r3, #3
 8003f74:	460b      	mov	r3, r1
 8003f76:	4614      	mov	r4, r2
 8003f78:	195b      	adds	r3, r3, r5
 8003f7a:	eb44 0406 	adc.w	r4, r4, r6
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	0262      	lsls	r2, r4, #9
 8003f88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f8c:	0259      	lsls	r1, r3, #9
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4614      	mov	r4, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	4621      	mov	r1, r4
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f04f 0400 	mov.w	r4, #0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	f7fc f930 	bl	8000204 <__aeabi_uldivmod>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e049      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fac:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	f04f 0400 	mov.w	r4, #0
 8003fb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	ea03 0501 	and.w	r5, r3, r1
 8003fc2:	ea04 0602 	and.w	r6, r4, r2
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4632      	mov	r2, r6
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	f04f 0400 	mov.w	r4, #0
 8003fd2:	0154      	lsls	r4, r2, #5
 8003fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fd8:	014b      	lsls	r3, r1, #5
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4622      	mov	r2, r4
 8003fde:	1b49      	subs	r1, r1, r5
 8003fe0:	eb62 0206 	sbc.w	r2, r2, r6
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	f04f 0400 	mov.w	r4, #0
 8003fec:	0194      	lsls	r4, r2, #6
 8003fee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ff2:	018b      	lsls	r3, r1, #6
 8003ff4:	1a5b      	subs	r3, r3, r1
 8003ff6:	eb64 0402 	sbc.w	r4, r4, r2
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004008:	00d9      	lsls	r1, r3, #3
 800400a:	460b      	mov	r3, r1
 800400c:	4614      	mov	r4, r2
 800400e:	195b      	adds	r3, r3, r5
 8004010:	eb44 0406 	adc.w	r4, r4, r6
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	02a2      	lsls	r2, r4, #10
 800401e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004022:	0299      	lsls	r1, r3, #10
 8004024:	460b      	mov	r3, r1
 8004026:	4614      	mov	r4, r2
 8004028:	4618      	mov	r0, r3
 800402a:	4621      	mov	r1, r4
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	461a      	mov	r2, r3
 8004034:	4623      	mov	r3, r4
 8004036:	f7fc f8e5 	bl	8000204 <__aeabi_uldivmod>
 800403a:	4603      	mov	r3, r0
 800403c:	460c      	mov	r4, r1
 800403e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_GetSysClockFreq+0x334>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	0f1b      	lsrs	r3, r3, #28
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	613b      	str	r3, [r7, #16]
      break;
 8004056:	e002      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_RCC_GetSysClockFreq+0x338>)
 800405a:	613b      	str	r3, [r7, #16]
      break;
 800405c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405e:	693b      	ldr	r3, [r7, #16]
}
 8004060:	4618      	mov	r0, r3
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	00f42400 	.word	0x00f42400
 8004070:	007a1200 	.word	0x007a1200

08004074 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8083 	beq.w	8004194 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800408e:	4b95      	ldr	r3, [pc, #596]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b04      	cmp	r3, #4
 8004098:	d019      	beq.n	80040ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800409a:	4b92      	ldr	r3, [pc, #584]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a6:	4b8f      	ldr	r3, [pc, #572]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b2:	d00c      	beq.n	80040ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b4:	4b8b      	ldr	r3, [pc, #556]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d112      	bne.n	80040e6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c0:	4b88      	ldr	r3, [pc, #544]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ce:	4b85      	ldr	r3, [pc, #532]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d05b      	beq.n	8004192 <HAL_RCC_OscConfig+0x11e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d157      	bne.n	8004192 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e216      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x8a>
 80040f0:	4b7c      	ldr	r3, [pc, #496]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7b      	ldr	r2, [pc, #492]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e01d      	b.n	800413a <HAL_RCC_OscConfig+0xc6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004106:	d10c      	bne.n	8004122 <HAL_RCC_OscConfig+0xae>
 8004108:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a75      	ldr	r2, [pc, #468]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800410e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a72      	ldr	r2, [pc, #456]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e00b      	b.n	800413a <HAL_RCC_OscConfig+0xc6>
 8004122:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6f      	ldr	r2, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b6d      	ldr	r3, [pc, #436]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6c      	ldr	r2, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe fd7d 	bl	8002c40 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414a:	f7fe fd79 	bl	8002c40 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1db      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415c:	4b61      	ldr	r3, [pc, #388]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0xd6>
 8004168:	e014      	b.n	8004194 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe fd69 	bl	8002c40 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004172:	f7fe fd65 	bl	8002c40 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1c7      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004184:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0xfe>
 8004190:	e000      	b.n	8004194 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004192:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d06f      	beq.n	8004280 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d017      	beq.n	80041dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ac:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041b8:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c4:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041cc:	2b0c      	cmp	r3, #12
 80041ce:	d11c      	bne.n	800420a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d0:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d116      	bne.n	800420a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041dc:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_OscConfig+0x180>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e18f      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4938      	ldr	r1, [pc, #224]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004208:	e03a      	b.n	8004280 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d020      	beq.n	8004254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004212:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fe fd12 	bl	8002c40 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004220:	f7fe fd0e 	bl	8002c40 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e170      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4925      	ldr	r1, [pc, #148]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
 8004252:	e015      	b.n	8004280 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fe fcf1 	bl	8002c40 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004262:	f7fe fced 	bl	8002c40 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e14f      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d037      	beq.n	80042fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d016      	beq.n	80042c2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004294:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_RCC_OscConfig+0x278>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fe fcd1 	bl	8002c40 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a2:	f7fe fccd 	bl	8002c40 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e12f      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80042b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x22e>
 80042c0:	e01c      	b.n	80042fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_RCC_OscConfig+0x278>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fe fcba 	bl	8002c40 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ce:	e00f      	b.n	80042f0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fe fcb6 	bl	8002c40 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d908      	bls.n	80042f0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e118      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	42470000 	.word	0x42470000
 80042ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b8a      	ldr	r3, [pc, #552]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e9      	bne.n	80042d0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8097 	beq.w	8004438 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b83      	ldr	r3, [pc, #524]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b7f      	ldr	r3, [pc, #508]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a7e      	ldr	r2, [pc, #504]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b7c      	ldr	r3, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b79      	ldr	r3, [pc, #484]	; (8004520 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a75      	ldr	r2, [pc, #468]	; (8004520 <HAL_RCC_OscConfig+0x4ac>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fe fc75 	bl	8002c40 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fe fc71 	bl	8002c40 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0d3      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_RCC_OscConfig+0x4ac>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x31a>
 8004380:	4b66      	ldr	r3, [pc, #408]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a65      	ldr	r2, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e01c      	b.n	80043c8 <HAL_RCC_OscConfig+0x354>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x33c>
 8004396:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a60      	ldr	r2, [pc, #384]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	4b5e      	ldr	r3, [pc, #376]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a5d      	ldr	r2, [pc, #372]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0x354>
 80043b0:	4b5a      	ldr	r3, [pc, #360]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	4a59      	ldr	r2, [pc, #356]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	; 0x70
 80043bc:	4b57      	ldr	r3, [pc, #348]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a56      	ldr	r2, [pc, #344]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe fc36 	bl	8002c40 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fe fc32 	bl	8002c40 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e092      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	4b4b      	ldr	r3, [pc, #300]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ee      	beq.n	80043d8 <HAL_RCC_OscConfig+0x364>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fe fc20 	bl	8002c40 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fe fc1c 	bl	8002c40 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e07c      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	4b40      	ldr	r3, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ee      	bne.n	8004404 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d068      	beq.n	8004512 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004440:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d060      	beq.n	800450e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d145      	bne.n	80044e0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004454:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x4b0>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fe fbf1 	bl	8002c40 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004462:	f7fe fbed 	bl	8002c40 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e04f      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	019b      	lsls	r3, r3, #6
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	071b      	lsls	r3, r3, #28
 80044ac:	491b      	ldr	r1, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <HAL_RCC_OscConfig+0x4b0>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe fbc2 	bl	8002c40 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe fbbe 	bl	8002c40 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e020      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x44c>
 80044de:	e018      	b.n	8004512 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x4b0>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fe fbab 	bl	8002c40 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ee:	f7fe fba7 	bl	8002c40 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e009      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x4a8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x47a>
 800450c:	e001      	b.n	8004512 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800
 8004520:	40007000 	.word	0x40007000
 8004524:	42470060 	.word	0x42470060

08004528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e056      	b.n	80045e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fd f9f9 	bl	800194c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004570:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	ea42 0103 	orr.w	r1, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	f003 0104 	and.w	r1, r3, #4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_SPI_Transmit+0x22>
 800460e:	2302      	movs	r3, #2
 8004610:	e11e      	b.n	8004850 <HAL_SPI_Transmit+0x260>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800461a:	f7fe fb11 	bl	8002c40 <HAL_GetTick>
 800461e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d002      	beq.n	8004636 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004630:	2302      	movs	r3, #2
 8004632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004634:	e103      	b.n	800483e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_SPI_Transmit+0x52>
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004646:	e0fa      	b.n	800483e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2203      	movs	r2, #3
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d107      	bne.n	80046a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d007      	beq.n	80046be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c6:	d14b      	bne.n	8004760 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_SPI_Transmit+0xe6>
 80046d0:	8afb      	ldrh	r3, [r7, #22]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d13e      	bne.n	8004754 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	1c9a      	adds	r2, r3, #2
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046fa:	e02b      	b.n	8004754 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d112      	bne.n	8004730 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	86da      	strh	r2, [r3, #54]	; 0x36
 800472e:	e011      	b.n	8004754 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004730:	f7fe fa86 	bl	8002c40 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d803      	bhi.n	8004748 <HAL_SPI_Transmit+0x158>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004746:	d102      	bne.n	800474e <HAL_SPI_Transmit+0x15e>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004752:	e074      	b.n	800483e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ce      	bne.n	80046fc <HAL_SPI_Transmit+0x10c>
 800475e:	e04c      	b.n	80047fa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Transmit+0x17e>
 8004768:	8afb      	ldrh	r3, [r7, #22]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d140      	bne.n	80047f0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004794:	e02c      	b.n	80047f0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d113      	bne.n	80047cc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80047ca:	e011      	b.n	80047f0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047cc:	f7fe fa38 	bl	8002c40 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d803      	bhi.n	80047e4 <HAL_SPI_Transmit+0x1f4>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e2:	d102      	bne.n	80047ea <HAL_SPI_Transmit+0x1fa>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047ee:	e026      	b.n	800483e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1cd      	bne.n	8004796 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fcc4 	bl	800518c <SPI_EndRxTxTransaction>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	e000      	b.n	800483e <HAL_SPI_Transmit+0x24e>
  }

error:
 800483c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800484e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004874:	d112      	bne.n	800489c <HAL_SPI_Receive+0x44>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10e      	bne.n	800489c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2204      	movs	r2, #4
 8004882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f8e9 	bl	8004a6a <HAL_SPI_TransmitReceive>
 8004898:	4603      	mov	r3, r0
 800489a:	e0e2      	b.n	8004a62 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_SPI_Receive+0x52>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e0db      	b.n	8004a62 <HAL_SPI_Receive+0x20a>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b2:	f7fe f9c5 	bl	8002c40 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
 80048c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048c8:	e0c2      	b.n	8004a50 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_SPI_Receive+0x7e>
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048da:	e0b9      	b.n	8004a50 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2204      	movs	r2, #4
 80048e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004922:	d107      	bne.n	8004934 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004932:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d007      	beq.n	8004952 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004950:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d162      	bne.n	8004a20 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800495a:	e02e      	b.n	80049ba <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d115      	bne.n	8004996 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f103 020c 	add.w	r2, r3, #12
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	7812      	ldrb	r2, [r2, #0]
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004994:	e011      	b.n	80049ba <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004996:	f7fe f953 	bl	8002c40 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d803      	bhi.n	80049ae <HAL_SPI_Receive+0x156>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ac:	d102      	bne.n	80049b4 <HAL_SPI_Receive+0x15c>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049b8:	e04a      	b.n	8004a50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1cb      	bne.n	800495c <HAL_SPI_Receive+0x104>
 80049c4:	e031      	b.n	8004a2a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d113      	bne.n	80049fc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	b292      	uxth	r2, r2
 80049e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	1c9a      	adds	r2, r3, #2
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049fa:	e011      	b.n	8004a20 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049fc:	f7fe f920 	bl	8002c40 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d803      	bhi.n	8004a14 <HAL_SPI_Receive+0x1bc>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_Receive+0x1c2>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a1e:	e017      	b.n	8004a50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1cd      	bne.n	80049c6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fb46 	bl	80050c0 <SPI_EndRxTransaction>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
 8004a4c:	e000      	b.n	8004a50 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b08c      	sub	sp, #48	; 0x30
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_TransmitReceive+0x26>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e18a      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x33c>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a98:	f7fe f8d2 	bl	8002c40 <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d00f      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x70>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac0:	d107      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x68>
 8004aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ad8:	e15b      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x82>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x82>
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004af2:	e14e      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d003      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2205      	movs	r2, #5
 8004b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	887a      	ldrh	r2, [r7, #2]
 8004b1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	887a      	ldrh	r2, [r7, #2]
 8004b2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d007      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b64:	d178      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x10a>
 8004b6e:	8b7b      	ldrh	r3, [r7, #26]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d166      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b98:	e053      	b.n	8004c42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d11b      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x176>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d016      	beq.n	8004be0 <HAL_SPI_TransmitReceive+0x176>
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d113      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	881a      	ldrh	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d119      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x1b8>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d014      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	b292      	uxth	r2, r2
 8004c04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c22:	f7fe f80d 	bl	8002c40 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d807      	bhi.n	8004c42 <HAL_SPI_TransmitReceive+0x1d8>
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c38:	d003      	beq.n	8004c42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c40:	e0a7      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1a6      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x130>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1a1      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x130>
 8004c56:	e07c      	b.n	8004d52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_TransmitReceive+0x1fc>
 8004c60:	8b7b      	ldrh	r3, [r7, #26]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d16b      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c8c:	e057      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d11c      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x26c>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d017      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x26c>
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d114      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	7812      	ldrb	r2, [r2, #0]
 8004cb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d119      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x2ae>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d014      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d14:	2301      	movs	r3, #1
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d18:	f7fd ff92 	bl	8002c40 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d803      	bhi.n	8004d30 <HAL_SPI_TransmitReceive+0x2c6>
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d2e:	d102      	bne.n	8004d36 <HAL_SPI_TransmitReceive+0x2cc>
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d3c:	e029      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1a2      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x224>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d19d      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fa18 	bl	800518c <SPI_EndRxTxTransaction>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d6e:	e010      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	e000      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3730      	adds	r7, #48	; 0x30
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	099b      	lsrs	r3, r3, #6
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
    return;
 8004df2:	e0d8      	b.n	8004fa6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_SPI_IRQHandler+0x66>
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	09db      	lsrs	r3, r3, #7
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
    return;
 8004e14:	e0c7      	b.n	8004fa6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_SPI_IRQHandler+0x8c>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80b5 	beq.w	8004fa6 <HAL_SPI_IRQHandler+0x1f6>
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80ae 	beq.w	8004fa6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	099b      	lsrs	r3, r3, #6
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d023      	beq.n	8004e9e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d011      	beq.n	8004e86 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0204 	orr.w	r2, r3, #4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	e00b      	b.n	8004e9e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
        return;
 8004e9c:	e083      	b.n	8004fa6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d014      	beq.n	8004ed4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	f043 0201 	orr.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00c      	beq.n	8004efa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f043 0208 	orr.w	r2, r3, #8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d050      	beq.n	8004fa4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f10:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <HAL_SPI_IRQHandler+0x17e>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d034      	beq.n	8004f98 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0203 	bic.w	r2, r2, #3
 8004f3c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d011      	beq.n	8004f6a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4a:	4a18      	ldr	r2, [pc, #96]	; (8004fac <HAL_SPI_IRQHandler+0x1fc>)
 8004f4c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe f92a 	bl	80031ac <HAL_DMA_Abort_IT>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f76:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <HAL_SPI_IRQHandler+0x1fc>)
 8004f78:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe f914 	bl	80031ac <HAL_DMA_Abort_IT>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f96:	e003      	b.n	8004fa0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f809 	bl	8004fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f9e:	e000      	b.n	8004fa2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004fa0:	bf00      	nop
    return;
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
  }
}
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	08004fc5 	.word	0x08004fc5

08004fb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff ffe6 	bl	8004fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffc:	e04c      	b.n	8005098 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005004:	d048      	beq.n	8005098 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005006:	f7fd fe1b 	bl	8002c40 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d902      	bls.n	800501c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d13d      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800502a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005034:	d111      	bne.n	800505a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503e:	d004      	beq.n	800504a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005048:	d107      	bne.n	800505a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005058:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005062:	d10f      	bne.n	8005084 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005082:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e00f      	b.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4013      	ands	r3, r2
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d1a3      	bne.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d4:	d111      	bne.n	80050fa <SPI_EndRxTransaction+0x3a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050de:	d004      	beq.n	80050ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e8:	d107      	bne.n	80050fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005102:	d12a      	bne.n	800515a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510c:	d012      	beq.n	8005134 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2200      	movs	r2, #0
 8005116:	2180      	movs	r1, #128	; 0x80
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff67 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02d      	beq.n	8005180 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e026      	b.n	8005182 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2200      	movs	r2, #0
 800513c:	2101      	movs	r1, #1
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff ff54 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01a      	beq.n	8005180 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e013      	b.n	8005182 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2200      	movs	r2, #0
 8005162:	2101      	movs	r1, #1
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff ff41 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	f043 0220 	orr.w	r2, r3, #32
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e000      	b.n	8005182 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <SPI_EndRxTxTransaction+0x7c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <SPI_EndRxTxTransaction+0x80>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0d5b      	lsrs	r3, r3, #21
 80051a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b6:	d112      	bne.n	80051de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7ff ff12 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d016      	beq.n	80051fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	f043 0220 	orr.w	r2, r3, #32
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e00f      	b.n	80051fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b80      	cmp	r3, #128	; 0x80
 80051f6:	d0f2      	beq.n	80051de <SPI_EndRxTxTransaction+0x52>
 80051f8:	e000      	b.n	80051fc <SPI_EndRxTxTransaction+0x70>
        break;
 80051fa:	bf00      	nop
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000
 800520c:	165e9f81 	.word	0x165e9f81

08005210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e01d      	b.n	800525e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fc fc40 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 f988 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10f      	bne.n	80052f6 <HAL_TIM_Base_Stop_IT+0x48>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	f240 4344 	movw	r3, #1092	; 0x444
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <HAL_TIM_Base_Stop_IT+0x48>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0202 	mvn.w	r2, #2
 8005330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8ee 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f8e0 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8f1 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0204 	mvn.w	r2, #4
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8c4 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8b6 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8c7 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0208 	mvn.w	r2, #8
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f89a 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f88c 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f89d 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b10      	cmp	r3, #16
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b10      	cmp	r3, #16
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0210 	mvn.w	r2, #16
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2208      	movs	r2, #8
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f870 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f862 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f873 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10e      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0201 	mvn.w	r2, #1
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fc f93c 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d10e      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d107      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f97e 	bl	80057b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d10e      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d107      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f838 	bl	8005550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d10e      	bne.n	800550c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d107      	bne.n	800550c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0220 	mvn.w	r2, #32
 8005504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f948 	bl	800579c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a40      	ldr	r2, [pc, #256]	; (8005678 <TIM_Base_SetConfig+0x114>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d00f      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a3d      	ldr	r2, [pc, #244]	; (800567c <TIM_Base_SetConfig+0x118>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00b      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a3c      	ldr	r2, [pc, #240]	; (8005680 <TIM_Base_SetConfig+0x11c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d007      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <TIM_Base_SetConfig+0x120>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3a      	ldr	r2, [pc, #232]	; (8005688 <TIM_Base_SetConfig+0x124>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d108      	bne.n	80055b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2f      	ldr	r2, [pc, #188]	; (8005678 <TIM_Base_SetConfig+0x114>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d02b      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c4:	d027      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2c      	ldr	r2, [pc, #176]	; (800567c <TIM_Base_SetConfig+0x118>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d023      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2b      	ldr	r2, [pc, #172]	; (8005680 <TIM_Base_SetConfig+0x11c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01f      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2a      	ldr	r2, [pc, #168]	; (8005684 <TIM_Base_SetConfig+0x120>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01b      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a29      	ldr	r2, [pc, #164]	; (8005688 <TIM_Base_SetConfig+0x124>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a28      	ldr	r2, [pc, #160]	; (800568c <TIM_Base_SetConfig+0x128>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a27      	ldr	r2, [pc, #156]	; (8005690 <TIM_Base_SetConfig+0x12c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a26      	ldr	r2, [pc, #152]	; (8005694 <TIM_Base_SetConfig+0x130>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a25      	ldr	r2, [pc, #148]	; (8005698 <TIM_Base_SetConfig+0x134>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a24      	ldr	r2, [pc, #144]	; (800569c <TIM_Base_SetConfig+0x138>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a23      	ldr	r2, [pc, #140]	; (80056a0 <TIM_Base_SetConfig+0x13c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <TIM_Base_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_Base_SetConfig+0xf8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a0c      	ldr	r2, [pc, #48]	; (8005688 <TIM_Base_SetConfig+0x124>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d103      	bne.n	8005664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	615a      	str	r2, [r3, #20]
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40010400 	.word	0x40010400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800
 8005698:	40001800 	.word	0x40001800
 800569c:	40001c00 	.word	0x40001c00
 80056a0:	40002000 	.word	0x40002000

080056a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e05a      	b.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d01d      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1a      	ldr	r2, [pc, #104]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a17      	ldr	r2, [pc, #92]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10c      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800574c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40010400 	.word	0x40010400
 8005794:	40014000 	.word	0x40014000
 8005798:	40001800 	.word	0x40001800

0800579c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e03f      	b.n	8005856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fc f9ca 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	; 0x24
 80057f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fc03 	bl	8006014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800581c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800582c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800583c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b20      	cmp	r3, #32
 8005878:	d166      	bne.n	8005948 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_UART_Receive_DMA+0x26>
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e05f      	b.n	800594a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_UART_Receive_DMA+0x38>
 8005894:	2302      	movs	r3, #2
 8005896:	e058      	b.n	800594a <HAL_UART_Receive_DMA+0xea>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2222      	movs	r2, #34	; 0x22
 80058b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058be:	4a25      	ldr	r2, [pc, #148]	; (8005954 <HAL_UART_Receive_DMA+0xf4>)
 80058c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c6:	4a24      	ldr	r2, [pc, #144]	; (8005958 <HAL_UART_Receive_DMA+0xf8>)
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	4a23      	ldr	r2, [pc, #140]	; (800595c <HAL_UART_Receive_DMA+0xfc>)
 80058d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	2200      	movs	r2, #0
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4619      	mov	r1, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	f7fd fb93 	bl	800301c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005922:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005942:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	08005c8d 	.word	0x08005c8d
 8005958:	08005cf5 	.word	0x08005cf5
 800595c:	08005d11 	.word	0x08005d11

08005960 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005976:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d124      	bne.n	80059e0 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d018      	beq.n	80059e0 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	2200      	movs	r2, #0
 80059b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fb86 	bl	80030cc <HAL_DMA_Abort>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00c      	beq.n	80059e0 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fd fd9a 	bl	8003504 <HAL_DMA_GetError>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d104      	bne.n	80059e0 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2210      	movs	r2, #16
 80059da:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e03d      	b.n	8005a5c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d124      	bne.n	8005a38 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d018      	beq.n	8005a38 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fb5a 	bl	80030cc <HAL_DMA_Abort>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00c      	beq.n	8005a38 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd fd6e 	bl	8003504 <HAL_DMA_GetError>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d104      	bne.n	8005a38 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2210      	movs	r2, #16
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e011      	b.n	8005a5c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10d      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x52>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa2e 	bl	8005f10 <UART_Receive_IT>
      return;
 8005ab4:	e0d1      	b.n	8005c5a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80b0 	beq.w	8005c1e <HAL_UART_IRQHandler+0x1ba>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x70>
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80a5 	beq.w	8005c1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_UART_IRQHandler+0x90>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_UART_IRQHandler+0xb0>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0c:	f043 0202 	orr.w	r2, r3, #2
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <HAL_UART_IRQHandler+0xd0>
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	f043 0204 	orr.w	r2, r3, #4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00f      	beq.n	8005b5e <HAL_UART_IRQHandler+0xfa>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_UART_IRQHandler+0xee>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	f043 0208 	orr.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d078      	beq.n	8005c58 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_UART_IRQHandler+0x11c>
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9c8 	bl	8005f10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x144>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d031      	beq.n	8005c0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f911 	bl	8005dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d123      	bne.n	8005c04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <HAL_UART_IRQHandler+0x1fc>)
 8005bda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fd fae3 	bl	80031ac <HAL_DMA_Abort_IT>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d016      	beq.n	8005c1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfa:	e00e      	b.n	8005c1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f83b 	bl	8005c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c02:	e00a      	b.n	8005c1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f837 	bl	8005c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0a:	e006      	b.n	8005c1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f833 	bl	8005c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005c18:	e01e      	b.n	8005c58 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1a:	bf00      	nop
    return;
 8005c1c:	e01c      	b.n	8005c58 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_UART_IRQHandler+0x1d6>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f8fe 	bl	8005e34 <UART_Transmit_IT>
    return;
 8005c38:	e00f      	b.n	8005c5a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_UART_IRQHandler+0x1f6>
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f946 	bl	8005ee0 <UART_EndTransmit_IT>
    return;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005c58:	bf00      	nop
  }
}
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	08005e0d 	.word	0x08005e0d

08005c64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d11e      	bne.n	8005ce6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cbc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7fb fca8 	bl	800163c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff ffae 	bl	8005c64 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2c:	2b80      	cmp	r3, #128	; 0x80
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b21      	cmp	r3, #33	; 0x21
 8005d42:	d108      	bne.n	8005d56 <UART_DMAError+0x46>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d50:	68b8      	ldr	r0, [r7, #8]
 8005d52:	f000 f827 	bl	8005da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b22      	cmp	r3, #34	; 0x22
 8005d76:	d108      	bne.n	8005d8a <UART_DMAError+0x7a>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d84:	68b8      	ldr	r0, [r7, #8]
 8005d86:	f000 f823 	bl	8005dd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	f043 0210 	orr.w	r2, r3, #16
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d96:	68b8      	ldr	r0, [r7, #8]
 8005d98:	f7ff ff6e 	bl	8005c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005dba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005de6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0201 	bic.w	r2, r2, #1
 8005df6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f7ff ff26 	bl	8005c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b21      	cmp	r3, #33	; 0x21
 8005e46:	d144      	bne.n	8005ed2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e50:	d11a      	bne.n	8005e88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	1c9a      	adds	r2, r3, #2
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]
 8005e7a:	e00e      	b.n	8005e9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]
 8005e86:	e008      	b.n	8005e9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	1c59      	adds	r1, r3, #1
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6211      	str	r1, [r2, #32]
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e000      	b.n	8005ed4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fb fbf3 	bl	80016ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b22      	cmp	r3, #34	; 0x22
 8005f22:	d171      	bne.n	8006008 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2c:	d123      	bne.n	8005f76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10e      	bne.n	8005f5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28
 8005f58:	e029      	b.n	8005fae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
 8005f74:	e01b      	b.n	8005fae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6858      	ldr	r0, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6291      	str	r1, [r2, #40]	; 0x28
 8005f8e:	b2c2      	uxtb	r2, r0
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e00c      	b.n	8005fae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	1c58      	adds	r0, r3, #1
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	6288      	str	r0, [r1, #40]	; 0x28
 8005fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d120      	bne.n	8006004 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0220 	bic.w	r2, r2, #32
 8005fd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fb fb1e 	bl	800163c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e002      	b.n	800600a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006056:	f023 030c 	bic.w	r3, r3, #12
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	430b      	orrs	r3, r1
 8006062:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	f040 818b 	bne.w	800639c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4ac1      	ldr	r2, [pc, #772]	; (8006390 <UART_SetConfig+0x37c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d005      	beq.n	800609c <UART_SetConfig+0x88>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4abf      	ldr	r2, [pc, #764]	; (8006394 <UART_SetConfig+0x380>)
 8006096:	4293      	cmp	r3, r2
 8006098:	f040 80bd 	bne.w	8006216 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fd fe36 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 80060a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	461d      	mov	r5, r3
 80060a6:	f04f 0600 	mov.w	r6, #0
 80060aa:	46a8      	mov	r8, r5
 80060ac:	46b1      	mov	r9, r6
 80060ae:	eb18 0308 	adds.w	r3, r8, r8
 80060b2:	eb49 0409 	adc.w	r4, r9, r9
 80060b6:	4698      	mov	r8, r3
 80060b8:	46a1      	mov	r9, r4
 80060ba:	eb18 0805 	adds.w	r8, r8, r5
 80060be:	eb49 0906 	adc.w	r9, r9, r6
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060d6:	4688      	mov	r8, r1
 80060d8:	4691      	mov	r9, r2
 80060da:	eb18 0005 	adds.w	r0, r8, r5
 80060de:	eb49 0106 	adc.w	r1, r9, r6
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	461d      	mov	r5, r3
 80060e8:	f04f 0600 	mov.w	r6, #0
 80060ec:	196b      	adds	r3, r5, r5
 80060ee:	eb46 0406 	adc.w	r4, r6, r6
 80060f2:	461a      	mov	r2, r3
 80060f4:	4623      	mov	r3, r4
 80060f6:	f7fa f885 	bl	8000204 <__aeabi_uldivmod>
 80060fa:	4603      	mov	r3, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	461a      	mov	r2, r3
 8006100:	4ba5      	ldr	r3, [pc, #660]	; (8006398 <UART_SetConfig+0x384>)
 8006102:	fba3 2302 	umull	r2, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	461d      	mov	r5, r3
 8006110:	f04f 0600 	mov.w	r6, #0
 8006114:	46a9      	mov	r9, r5
 8006116:	46b2      	mov	sl, r6
 8006118:	eb19 0309 	adds.w	r3, r9, r9
 800611c:	eb4a 040a 	adc.w	r4, sl, sl
 8006120:	4699      	mov	r9, r3
 8006122:	46a2      	mov	sl, r4
 8006124:	eb19 0905 	adds.w	r9, r9, r5
 8006128:	eb4a 0a06 	adc.w	sl, sl, r6
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006138:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800613c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006140:	4689      	mov	r9, r1
 8006142:	4692      	mov	sl, r2
 8006144:	eb19 0005 	adds.w	r0, r9, r5
 8006148:	eb4a 0106 	adc.w	r1, sl, r6
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	461d      	mov	r5, r3
 8006152:	f04f 0600 	mov.w	r6, #0
 8006156:	196b      	adds	r3, r5, r5
 8006158:	eb46 0406 	adc.w	r4, r6, r6
 800615c:	461a      	mov	r2, r3
 800615e:	4623      	mov	r3, r4
 8006160:	f7fa f850 	bl	8000204 <__aeabi_uldivmod>
 8006164:	4603      	mov	r3, r0
 8006166:	460c      	mov	r4, r1
 8006168:	461a      	mov	r2, r3
 800616a:	4b8b      	ldr	r3, [pc, #556]	; (8006398 <UART_SetConfig+0x384>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	; 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	3332      	adds	r3, #50	; 0x32
 800617e:	4a86      	ldr	r2, [pc, #536]	; (8006398 <UART_SetConfig+0x384>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800618c:	4498      	add	r8, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	461d      	mov	r5, r3
 8006192:	f04f 0600 	mov.w	r6, #0
 8006196:	46a9      	mov	r9, r5
 8006198:	46b2      	mov	sl, r6
 800619a:	eb19 0309 	adds.w	r3, r9, r9
 800619e:	eb4a 040a 	adc.w	r4, sl, sl
 80061a2:	4699      	mov	r9, r3
 80061a4:	46a2      	mov	sl, r4
 80061a6:	eb19 0905 	adds.w	r9, r9, r5
 80061aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80061ae:	f04f 0100 	mov.w	r1, #0
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061c2:	4689      	mov	r9, r1
 80061c4:	4692      	mov	sl, r2
 80061c6:	eb19 0005 	adds.w	r0, r9, r5
 80061ca:	eb4a 0106 	adc.w	r1, sl, r6
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	461d      	mov	r5, r3
 80061d4:	f04f 0600 	mov.w	r6, #0
 80061d8:	196b      	adds	r3, r5, r5
 80061da:	eb46 0406 	adc.w	r4, r6, r6
 80061de:	461a      	mov	r2, r3
 80061e0:	4623      	mov	r3, r4
 80061e2:	f7fa f80f 	bl	8000204 <__aeabi_uldivmod>
 80061e6:	4603      	mov	r3, r0
 80061e8:	460c      	mov	r4, r1
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b6a      	ldr	r3, [pc, #424]	; (8006398 <UART_SetConfig+0x384>)
 80061ee:	fba3 1302 	umull	r1, r3, r3, r2
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2164      	movs	r1, #100	; 0x64
 80061f6:	fb01 f303 	mul.w	r3, r1, r3
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	3332      	adds	r3, #50	; 0x32
 8006200:	4a65      	ldr	r2, [pc, #404]	; (8006398 <UART_SetConfig+0x384>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f003 0207 	and.w	r2, r3, #7
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4442      	add	r2, r8
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	e26f      	b.n	80066f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006216:	f7fd fd65 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 800621a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	461d      	mov	r5, r3
 8006220:	f04f 0600 	mov.w	r6, #0
 8006224:	46a8      	mov	r8, r5
 8006226:	46b1      	mov	r9, r6
 8006228:	eb18 0308 	adds.w	r3, r8, r8
 800622c:	eb49 0409 	adc.w	r4, r9, r9
 8006230:	4698      	mov	r8, r3
 8006232:	46a1      	mov	r9, r4
 8006234:	eb18 0805 	adds.w	r8, r8, r5
 8006238:	eb49 0906 	adc.w	r9, r9, r6
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006248:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800624c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006250:	4688      	mov	r8, r1
 8006252:	4691      	mov	r9, r2
 8006254:	eb18 0005 	adds.w	r0, r8, r5
 8006258:	eb49 0106 	adc.w	r1, r9, r6
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	461d      	mov	r5, r3
 8006262:	f04f 0600 	mov.w	r6, #0
 8006266:	196b      	adds	r3, r5, r5
 8006268:	eb46 0406 	adc.w	r4, r6, r6
 800626c:	461a      	mov	r2, r3
 800626e:	4623      	mov	r3, r4
 8006270:	f7f9 ffc8 	bl	8000204 <__aeabi_uldivmod>
 8006274:	4603      	mov	r3, r0
 8006276:	460c      	mov	r4, r1
 8006278:	461a      	mov	r2, r3
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <UART_SetConfig+0x384>)
 800627c:	fba3 2302 	umull	r2, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	461d      	mov	r5, r3
 800628a:	f04f 0600 	mov.w	r6, #0
 800628e:	46a9      	mov	r9, r5
 8006290:	46b2      	mov	sl, r6
 8006292:	eb19 0309 	adds.w	r3, r9, r9
 8006296:	eb4a 040a 	adc.w	r4, sl, sl
 800629a:	4699      	mov	r9, r3
 800629c:	46a2      	mov	sl, r4
 800629e:	eb19 0905 	adds.w	r9, r9, r5
 80062a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ba:	4689      	mov	r9, r1
 80062bc:	4692      	mov	sl, r2
 80062be:	eb19 0005 	adds.w	r0, r9, r5
 80062c2:	eb4a 0106 	adc.w	r1, sl, r6
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	461d      	mov	r5, r3
 80062cc:	f04f 0600 	mov.w	r6, #0
 80062d0:	196b      	adds	r3, r5, r5
 80062d2:	eb46 0406 	adc.w	r4, r6, r6
 80062d6:	461a      	mov	r2, r3
 80062d8:	4623      	mov	r3, r4
 80062da:	f7f9 ff93 	bl	8000204 <__aeabi_uldivmod>
 80062de:	4603      	mov	r3, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	461a      	mov	r2, r3
 80062e4:	4b2c      	ldr	r3, [pc, #176]	; (8006398 <UART_SetConfig+0x384>)
 80062e6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	2164      	movs	r1, #100	; 0x64
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	3332      	adds	r3, #50	; 0x32
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <UART_SetConfig+0x384>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006306:	4498      	add	r8, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	461d      	mov	r5, r3
 800630c:	f04f 0600 	mov.w	r6, #0
 8006310:	46a9      	mov	r9, r5
 8006312:	46b2      	mov	sl, r6
 8006314:	eb19 0309 	adds.w	r3, r9, r9
 8006318:	eb4a 040a 	adc.w	r4, sl, sl
 800631c:	4699      	mov	r9, r3
 800631e:	46a2      	mov	sl, r4
 8006320:	eb19 0905 	adds.w	r9, r9, r5
 8006324:	eb4a 0a06 	adc.w	sl, sl, r6
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800633c:	4689      	mov	r9, r1
 800633e:	4692      	mov	sl, r2
 8006340:	eb19 0005 	adds.w	r0, r9, r5
 8006344:	eb4a 0106 	adc.w	r1, sl, r6
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	461d      	mov	r5, r3
 800634e:	f04f 0600 	mov.w	r6, #0
 8006352:	196b      	adds	r3, r5, r5
 8006354:	eb46 0406 	adc.w	r4, r6, r6
 8006358:	461a      	mov	r2, r3
 800635a:	4623      	mov	r3, r4
 800635c:	f7f9 ff52 	bl	8000204 <__aeabi_uldivmod>
 8006360:	4603      	mov	r3, r0
 8006362:	460c      	mov	r4, r1
 8006364:	461a      	mov	r2, r3
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <UART_SetConfig+0x384>)
 8006368:	fba3 1302 	umull	r1, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	2164      	movs	r1, #100	; 0x64
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	3332      	adds	r3, #50	; 0x32
 800637a:	4a07      	ldr	r2, [pc, #28]	; (8006398 <UART_SetConfig+0x384>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	f003 0207 	and.w	r2, r3, #7
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4442      	add	r2, r8
 800638c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800638e:	e1b2      	b.n	80066f6 <UART_SetConfig+0x6e2>
 8006390:	40011000 	.word	0x40011000
 8006394:	40011400 	.word	0x40011400
 8006398:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4ad7      	ldr	r2, [pc, #860]	; (8006700 <UART_SetConfig+0x6ec>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d005      	beq.n	80063b2 <UART_SetConfig+0x39e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4ad6      	ldr	r2, [pc, #856]	; (8006704 <UART_SetConfig+0x6f0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	f040 80d1 	bne.w	8006554 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063b2:	f7fd fcab 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 80063b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	469a      	mov	sl, r3
 80063bc:	f04f 0b00 	mov.w	fp, #0
 80063c0:	46d0      	mov	r8, sl
 80063c2:	46d9      	mov	r9, fp
 80063c4:	eb18 0308 	adds.w	r3, r8, r8
 80063c8:	eb49 0409 	adc.w	r4, r9, r9
 80063cc:	4698      	mov	r8, r3
 80063ce:	46a1      	mov	r9, r4
 80063d0:	eb18 080a 	adds.w	r8, r8, sl
 80063d4:	eb49 090b 	adc.w	r9, r9, fp
 80063d8:	f04f 0100 	mov.w	r1, #0
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ec:	4688      	mov	r8, r1
 80063ee:	4691      	mov	r9, r2
 80063f0:	eb1a 0508 	adds.w	r5, sl, r8
 80063f4:	eb4b 0609 	adc.w	r6, fp, r9
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4619      	mov	r1, r3
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	f04f 0400 	mov.w	r4, #0
 800640a:	0094      	lsls	r4, r2, #2
 800640c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006410:	008b      	lsls	r3, r1, #2
 8006412:	461a      	mov	r2, r3
 8006414:	4623      	mov	r3, r4
 8006416:	4628      	mov	r0, r5
 8006418:	4631      	mov	r1, r6
 800641a:	f7f9 fef3 	bl	8000204 <__aeabi_uldivmod>
 800641e:	4603      	mov	r3, r0
 8006420:	460c      	mov	r4, r1
 8006422:	461a      	mov	r2, r3
 8006424:	4bb8      	ldr	r3, [pc, #736]	; (8006708 <UART_SetConfig+0x6f4>)
 8006426:	fba3 2302 	umull	r2, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	469b      	mov	fp, r3
 8006434:	f04f 0c00 	mov.w	ip, #0
 8006438:	46d9      	mov	r9, fp
 800643a:	46e2      	mov	sl, ip
 800643c:	eb19 0309 	adds.w	r3, r9, r9
 8006440:	eb4a 040a 	adc.w	r4, sl, sl
 8006444:	4699      	mov	r9, r3
 8006446:	46a2      	mov	sl, r4
 8006448:	eb19 090b 	adds.w	r9, r9, fp
 800644c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006450:	f04f 0100 	mov.w	r1, #0
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800645c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006464:	4689      	mov	r9, r1
 8006466:	4692      	mov	sl, r2
 8006468:	eb1b 0509 	adds.w	r5, fp, r9
 800646c:	eb4c 060a 	adc.w	r6, ip, sl
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4619      	mov	r1, r3
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f04f 0300 	mov.w	r3, #0
 800647e:	f04f 0400 	mov.w	r4, #0
 8006482:	0094      	lsls	r4, r2, #2
 8006484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006488:	008b      	lsls	r3, r1, #2
 800648a:	461a      	mov	r2, r3
 800648c:	4623      	mov	r3, r4
 800648e:	4628      	mov	r0, r5
 8006490:	4631      	mov	r1, r6
 8006492:	f7f9 feb7 	bl	8000204 <__aeabi_uldivmod>
 8006496:	4603      	mov	r3, r0
 8006498:	460c      	mov	r4, r1
 800649a:	461a      	mov	r2, r3
 800649c:	4b9a      	ldr	r3, [pc, #616]	; (8006708 <UART_SetConfig+0x6f4>)
 800649e:	fba3 1302 	umull	r1, r3, r3, r2
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2164      	movs	r1, #100	; 0x64
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	3332      	adds	r3, #50	; 0x32
 80064b0:	4a95      	ldr	r2, [pc, #596]	; (8006708 <UART_SetConfig+0x6f4>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064bc:	4498      	add	r8, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	469b      	mov	fp, r3
 80064c2:	f04f 0c00 	mov.w	ip, #0
 80064c6:	46d9      	mov	r9, fp
 80064c8:	46e2      	mov	sl, ip
 80064ca:	eb19 0309 	adds.w	r3, r9, r9
 80064ce:	eb4a 040a 	adc.w	r4, sl, sl
 80064d2:	4699      	mov	r9, r3
 80064d4:	46a2      	mov	sl, r4
 80064d6:	eb19 090b 	adds.w	r9, r9, fp
 80064da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064f2:	4689      	mov	r9, r1
 80064f4:	4692      	mov	sl, r2
 80064f6:	eb1b 0509 	adds.w	r5, fp, r9
 80064fa:	eb4c 060a 	adc.w	r6, ip, sl
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4619      	mov	r1, r3
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	f04f 0400 	mov.w	r4, #0
 8006510:	0094      	lsls	r4, r2, #2
 8006512:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006516:	008b      	lsls	r3, r1, #2
 8006518:	461a      	mov	r2, r3
 800651a:	4623      	mov	r3, r4
 800651c:	4628      	mov	r0, r5
 800651e:	4631      	mov	r1, r6
 8006520:	f7f9 fe70 	bl	8000204 <__aeabi_uldivmod>
 8006524:	4603      	mov	r3, r0
 8006526:	460c      	mov	r4, r1
 8006528:	461a      	mov	r2, r3
 800652a:	4b77      	ldr	r3, [pc, #476]	; (8006708 <UART_SetConfig+0x6f4>)
 800652c:	fba3 1302 	umull	r1, r3, r3, r2
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	2164      	movs	r1, #100	; 0x64
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	3332      	adds	r3, #50	; 0x32
 800653e:	4a72      	ldr	r2, [pc, #456]	; (8006708 <UART_SetConfig+0x6f4>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4442      	add	r2, r8
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	e0d0      	b.n	80066f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fd fbc6 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 8006558:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	469a      	mov	sl, r3
 800655e:	f04f 0b00 	mov.w	fp, #0
 8006562:	46d0      	mov	r8, sl
 8006564:	46d9      	mov	r9, fp
 8006566:	eb18 0308 	adds.w	r3, r8, r8
 800656a:	eb49 0409 	adc.w	r4, r9, r9
 800656e:	4698      	mov	r8, r3
 8006570:	46a1      	mov	r9, r4
 8006572:	eb18 080a 	adds.w	r8, r8, sl
 8006576:	eb49 090b 	adc.w	r9, r9, fp
 800657a:	f04f 0100 	mov.w	r1, #0
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006586:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800658a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800658e:	4688      	mov	r8, r1
 8006590:	4691      	mov	r9, r2
 8006592:	eb1a 0508 	adds.w	r5, sl, r8
 8006596:	eb4b 0609 	adc.w	r6, fp, r9
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4619      	mov	r1, r3
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f04f 0400 	mov.w	r4, #0
 80065ac:	0094      	lsls	r4, r2, #2
 80065ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065b2:	008b      	lsls	r3, r1, #2
 80065b4:	461a      	mov	r2, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	4628      	mov	r0, r5
 80065ba:	4631      	mov	r1, r6
 80065bc:	f7f9 fe22 	bl	8000204 <__aeabi_uldivmod>
 80065c0:	4603      	mov	r3, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b50      	ldr	r3, [pc, #320]	; (8006708 <UART_SetConfig+0x6f4>)
 80065c8:	fba3 2302 	umull	r2, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	469b      	mov	fp, r3
 80065d6:	f04f 0c00 	mov.w	ip, #0
 80065da:	46d9      	mov	r9, fp
 80065dc:	46e2      	mov	sl, ip
 80065de:	eb19 0309 	adds.w	r3, r9, r9
 80065e2:	eb4a 040a 	adc.w	r4, sl, sl
 80065e6:	4699      	mov	r9, r3
 80065e8:	46a2      	mov	sl, r4
 80065ea:	eb19 090b 	adds.w	r9, r9, fp
 80065ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065f2:	f04f 0100 	mov.w	r1, #0
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006602:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006606:	4689      	mov	r9, r1
 8006608:	4692      	mov	sl, r2
 800660a:	eb1b 0509 	adds.w	r5, fp, r9
 800660e:	eb4c 060a 	adc.w	r6, ip, sl
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4619      	mov	r1, r3
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	f04f 0400 	mov.w	r4, #0
 8006624:	0094      	lsls	r4, r2, #2
 8006626:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800662a:	008b      	lsls	r3, r1, #2
 800662c:	461a      	mov	r2, r3
 800662e:	4623      	mov	r3, r4
 8006630:	4628      	mov	r0, r5
 8006632:	4631      	mov	r1, r6
 8006634:	f7f9 fde6 	bl	8000204 <__aeabi_uldivmod>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	461a      	mov	r2, r3
 800663e:	4b32      	ldr	r3, [pc, #200]	; (8006708 <UART_SetConfig+0x6f4>)
 8006640:	fba3 1302 	umull	r1, r3, r3, r2
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	2164      	movs	r1, #100	; 0x64
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	3332      	adds	r3, #50	; 0x32
 8006652:	4a2d      	ldr	r2, [pc, #180]	; (8006708 <UART_SetConfig+0x6f4>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800665e:	4498      	add	r8, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	469b      	mov	fp, r3
 8006664:	f04f 0c00 	mov.w	ip, #0
 8006668:	46d9      	mov	r9, fp
 800666a:	46e2      	mov	sl, ip
 800666c:	eb19 0309 	adds.w	r3, r9, r9
 8006670:	eb4a 040a 	adc.w	r4, sl, sl
 8006674:	4699      	mov	r9, r3
 8006676:	46a2      	mov	sl, r4
 8006678:	eb19 090b 	adds.w	r9, r9, fp
 800667c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006680:	f04f 0100 	mov.w	r1, #0
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800668c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006690:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006694:	4689      	mov	r9, r1
 8006696:	4692      	mov	sl, r2
 8006698:	eb1b 0509 	adds.w	r5, fp, r9
 800669c:	eb4c 060a 	adc.w	r6, ip, sl
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4619      	mov	r1, r3
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	f04f 0400 	mov.w	r4, #0
 80066b2:	0094      	lsls	r4, r2, #2
 80066b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066b8:	008b      	lsls	r3, r1, #2
 80066ba:	461a      	mov	r2, r3
 80066bc:	4623      	mov	r3, r4
 80066be:	4628      	mov	r0, r5
 80066c0:	4631      	mov	r1, r6
 80066c2:	f7f9 fd9f 	bl	8000204 <__aeabi_uldivmod>
 80066c6:	4603      	mov	r3, r0
 80066c8:	460c      	mov	r4, r1
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <UART_SetConfig+0x6f4>)
 80066ce:	fba3 1302 	umull	r1, r3, r3, r2
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2164      	movs	r1, #100	; 0x64
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	3332      	adds	r3, #50	; 0x32
 80066e0:	4a09      	ldr	r2, [pc, #36]	; (8006708 <UART_SetConfig+0x6f4>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4442      	add	r2, r8
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	e7ff      	b.n	80066f6 <UART_SetConfig+0x6e2>
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006700:	40011000 	.word	0x40011000
 8006704:	40011400 	.word	0x40011400
 8006708:	51eb851f 	.word	0x51eb851f

0800670c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006710:	4904      	ldr	r1, [pc, #16]	; (8006724 <MX_FATFS_Init+0x18>)
 8006712:	4805      	ldr	r0, [pc, #20]	; (8006728 <MX_FATFS_Init+0x1c>)
 8006714:	f002 fa0e 	bl	8008b34 <FATFS_LinkDriver>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <MX_FATFS_Init+0x20>)
 800671e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000a10 	.word	0x20000a10
 8006728:	20000010 	.word	0x20000010
 800672c:	20000a14 	.word	0x20000a14

08006730 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006734:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006736:	4618      	mov	r0, r3
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	4618      	mov	r0, r3
 800674e:	f7fb fe9f 	bl	8002490 <USER_SPI_initialize>
 8006752:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	4618      	mov	r0, r3
 800676a:	f7fb ff71 	bl	8002650 <USER_SPI_status>
 800676e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006788:	7bf8      	ldrb	r0, [r7, #15]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	f7fb ff74 	bl	800267c <USER_SPI_read>
 8006794:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 80067ae:	7bf8      	ldrb	r0, [r7, #15]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	f7fb ffc7 	bl	8002748 <USER_SPI_write>
 80067ba:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	603a      	str	r2, [r7, #0]
 80067ce:	71fb      	strb	r3, [r7, #7]
 80067d0:	460b      	mov	r3, r1
 80067d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80067d4:	79b9      	ldrb	r1, [r7, #6]
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fc f830 	bl	8002840 <USER_SPI_ioctl>
 80067e0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	4a08      	ldr	r2, [pc, #32]	; (800681c <disk_status+0x30>)
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	79fa      	ldrb	r2, [r7, #7]
 8006804:	4905      	ldr	r1, [pc, #20]	; (800681c <disk_status+0x30>)
 8006806:	440a      	add	r2, r1
 8006808:	7a12      	ldrb	r2, [r2, #8]
 800680a:	4610      	mov	r0, r2
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000074 	.word	0x20000074

08006820 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	4a0d      	ldr	r2, [pc, #52]	; (8006868 <disk_initialize+0x48>)
 8006832:	5cd3      	ldrb	r3, [r2, r3]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d111      	bne.n	800685c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <disk_initialize+0x48>)
 800683c:	2101      	movs	r1, #1
 800683e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	4a09      	ldr	r2, [pc, #36]	; (8006868 <disk_initialize+0x48>)
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	79fa      	ldrb	r2, [r7, #7]
 800684e:	4906      	ldr	r1, [pc, #24]	; (8006868 <disk_initialize+0x48>)
 8006850:	440a      	add	r2, r1
 8006852:	7a12      	ldrb	r2, [r2, #8]
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000074 	.word	0x20000074

0800686c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <disk_read+0x3c>)
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	689c      	ldr	r4, [r3, #8]
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <disk_read+0x3c>)
 800688c:	4413      	add	r3, r2
 800688e:	7a18      	ldrb	r0, [r3, #8]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	47a0      	blx	r4
 8006898:	4603      	mov	r3, r0
 800689a:	75fb      	strb	r3, [r7, #23]
  return res;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd90      	pop	{r4, r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000074 	.word	0x20000074

080068ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <disk_write+0x3c>)
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	68dc      	ldr	r4, [r3, #12]
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <disk_write+0x3c>)
 80068cc:	4413      	add	r3, r2
 80068ce:	7a18      	ldrb	r0, [r3, #8]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	47a0      	blx	r4
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]
  return res;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd90      	pop	{r4, r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000074 	.word	0x20000074

080068ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	603a      	str	r2, [r7, #0]
 80068f6:	71fb      	strb	r3, [r7, #7]
 80068f8:	460b      	mov	r3, r1
 80068fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <disk_ioctl+0x38>)
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	79fa      	ldrb	r2, [r7, #7]
 800690a:	4906      	ldr	r1, [pc, #24]	; (8006924 <disk_ioctl+0x38>)
 800690c:	440a      	add	r2, r1
 800690e:	7a10      	ldrb	r0, [r2, #8]
 8006910:	79b9      	ldrb	r1, [r7, #6]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	4798      	blx	r3
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]
  return res;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000074 	.word	0x20000074

08006928 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3301      	adds	r3, #1
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	b21a      	sxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b21b      	sxth	r3, r3
 8006944:	4313      	orrs	r3, r2
 8006946:	b21b      	sxth	r3, r3
 8006948:	81fb      	strh	r3, [r7, #14]
	return rv;
 800694a:	89fb      	ldrh	r3, [r7, #14]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3303      	adds	r3, #3
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	3202      	adds	r2, #2
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	3201      	adds	r2, #1
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	021b      	lsls	r3, r3, #8
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006990:	68fb      	ldr	r3, [r7, #12]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	887a      	ldrh	r2, [r7, #2]
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	887b      	ldrh	r3, [r7, #2]
 80069b8:	0a1b      	lsrs	r3, r3, #8
 80069ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	887a      	ldrh	r2, [r7, #2]
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	0a1b      	lsrs	r3, r3, #8
 80069ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	0a1b      	lsrs	r3, r3, #8
 8006a00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00d      	beq.n	8006a62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	1c53      	adds	r3, r2, #1
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	1c59      	adds	r1, r3, #1
 8006a50:	6179      	str	r1, [r7, #20]
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f1      	bne.n	8006a46 <mem_cpy+0x1a>
	}
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	617a      	str	r2, [r7, #20]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f3      	bne.n	8006a7e <mem_set+0x10>
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006aa2:	b480      	push	{r7}
 8006aa4:	b089      	sub	sp, #36	; 0x24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	61fa      	str	r2, [r7, #28]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	61ba      	str	r2, [r7, #24]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	1acb      	subs	r3, r1, r3
 8006ace:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <mem_cmp+0x40>
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0eb      	beq.n	8006aba <mem_cmp+0x18>

	return r;
 8006ae2:	697b      	ldr	r3, [r7, #20]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3724      	adds	r7, #36	; 0x24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006afa:	e002      	b.n	8006b02 <chk_chr+0x12>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3301      	adds	r3, #1
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <chk_chr+0x26>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d1f2      	bne.n	8006afc <chk_chr+0xc>
	return *str;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	781b      	ldrb	r3, [r3, #0]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	e029      	b.n	8006b90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006b3c:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <chk_lock+0xb4>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	4413      	add	r3, r2
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01d      	beq.n	8006b86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b4a:	4a24      	ldr	r2, [pc, #144]	; (8006bdc <chk_lock+0xb4>)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	4413      	add	r3, r2
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d116      	bne.n	8006b8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	; (8006bdc <chk_lock+0xb4>)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	4413      	add	r3, r2
 8006b64:	3304      	adds	r3, #4
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d10c      	bne.n	8006b8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b70:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <chk_lock+0xb4>)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	4413      	add	r3, r2
 8006b78:	3308      	adds	r3, #8
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d102      	bne.n	8006b8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b84:	e007      	b.n	8006b96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006b86:	2301      	movs	r3, #1
 8006b88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d9d2      	bls.n	8006b3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d109      	bne.n	8006bb0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <chk_lock+0x80>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d101      	bne.n	8006bac <chk_lock+0x84>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e010      	b.n	8006bce <chk_lock+0xa6>
 8006bac:	2312      	movs	r3, #18
 8006bae:	e00e      	b.n	8006bce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d108      	bne.n	8006bc8 <chk_lock+0xa0>
 8006bb6:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <chk_lock+0xb4>)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	4413      	add	r3, r2
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc6:	d101      	bne.n	8006bcc <chk_lock+0xa4>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	e000      	b.n	8006bce <chk_lock+0xa6>
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	20000054 	.word	0x20000054

08006be0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
 8006bea:	e002      	b.n	8006bf2 <enq_lock+0x12>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d806      	bhi.n	8006c06 <enq_lock+0x26>
 8006bf8:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <enq_lock+0x40>)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	4413      	add	r3, r2
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f2      	bne.n	8006bec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000054 	.word	0x20000054

08006c24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e01f      	b.n	8006c74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006c34:	4a41      	ldr	r2, [pc, #260]	; (8006d3c <inc_lock+0x118>)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	4413      	add	r3, r2
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d113      	bne.n	8006c6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006c46:	4a3d      	ldr	r2, [pc, #244]	; (8006d3c <inc_lock+0x118>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3304      	adds	r3, #4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d109      	bne.n	8006c6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006c5a:	4a38      	ldr	r2, [pc, #224]	; (8006d3c <inc_lock+0x118>)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	4413      	add	r3, r2
 8006c62:	3308      	adds	r3, #8
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d006      	beq.n	8006c7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d9dc      	bls.n	8006c34 <inc_lock+0x10>
 8006c7a:	e000      	b.n	8006c7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006c7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d132      	bne.n	8006cea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e002      	b.n	8006c90 <inc_lock+0x6c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d806      	bhi.n	8006ca4 <inc_lock+0x80>
 8006c96:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <inc_lock+0x118>)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	4413      	add	r3, r2
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1f2      	bne.n	8006c8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d101      	bne.n	8006cae <inc_lock+0x8a>
 8006caa:	2300      	movs	r3, #0
 8006cac:	e040      	b.n	8006d30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4922      	ldr	r1, [pc, #136]	; (8006d3c <inc_lock+0x118>)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	440b      	add	r3, r1
 8006cba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	491e      	ldr	r1, [pc, #120]	; (8006d3c <inc_lock+0x118>)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3304      	adds	r3, #4
 8006cca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	695a      	ldr	r2, [r3, #20]
 8006cd0:	491a      	ldr	r1, [pc, #104]	; (8006d3c <inc_lock+0x118>)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3308      	adds	r3, #8
 8006cda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006cdc:	4a17      	ldr	r2, [pc, #92]	; (8006d3c <inc_lock+0x118>)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d009      	beq.n	8006d04 <inc_lock+0xe0>
 8006cf0:	4a12      	ldr	r2, [pc, #72]	; (8006d3c <inc_lock+0x118>)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	4413      	add	r3, r2
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <inc_lock+0xe0>
 8006d00:	2300      	movs	r3, #0
 8006d02:	e015      	b.n	8006d30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <inc_lock+0xf8>
 8006d0a:	4a0c      	ldr	r2, [pc, #48]	; (8006d3c <inc_lock+0x118>)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	4413      	add	r3, r2
 8006d12:	330c      	adds	r3, #12
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	3301      	adds	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	e001      	b.n	8006d20 <inc_lock+0xfc>
 8006d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d20:	4906      	ldr	r1, [pc, #24]	; (8006d3c <inc_lock+0x118>)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	440b      	add	r3, r1
 8006d28:	330c      	adds	r3, #12
 8006d2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20000054 	.word	0x20000054

08006d40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d825      	bhi.n	8006da0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006d54:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <dec_lock+0x74>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	4413      	add	r3, r2
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006d62:	89fb      	ldrh	r3, [r7, #14]
 8006d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d68:	d101      	bne.n	8006d6e <dec_lock+0x2e>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006d6e:	89fb      	ldrh	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <dec_lock+0x3a>
 8006d74:	89fb      	ldrh	r3, [r7, #14]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006d7a:	4a0e      	ldr	r2, [pc, #56]	; (8006db4 <dec_lock+0x74>)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	4413      	add	r3, r2
 8006d82:	330c      	adds	r3, #12
 8006d84:	89fa      	ldrh	r2, [r7, #14]
 8006d86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006d88:	89fb      	ldrh	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <dec_lock+0x5a>
 8006d8e:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <dec_lock+0x74>)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	4413      	add	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	737b      	strb	r3, [r7, #13]
 8006d9e:	e001      	b.n	8006da4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006da0:	2302      	movs	r3, #2
 8006da2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006da4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000054 	.word	0x20000054

08006db8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e010      	b.n	8006de8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006dc6:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <clear_lock+0x44>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	4413      	add	r3, r2
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d105      	bne.n	8006de2 <clear_lock+0x2a>
 8006dd6:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <clear_lock+0x44>)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	4413      	add	r3, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d9eb      	bls.n	8006dc6 <clear_lock+0xe>
	}
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	20000054 	.word	0x20000054

08006e00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	78db      	ldrb	r3, [r3, #3]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d034      	beq.n	8006e7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7858      	ldrb	r0, [r3, #1]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e24:	2301      	movs	r3, #1
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	f7ff fd40 	bl	80068ac <disk_write>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
 8006e36:	e022      	b.n	8006e7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	1ad2      	subs	r2, r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d217      	bcs.n	8006e7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	789b      	ldrb	r3, [r3, #2]
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	e010      	b.n	8006e78 <sync_window+0x78>
					wsect += fs->fsize;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7858      	ldrb	r0, [r3, #1]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	f7ff fd1d 	bl	80068ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d8eb      	bhi.n	8006e56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d01b      	beq.n	8006ed8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff ffad 	bl	8006e00 <sync_window>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d113      	bne.n	8006ed8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7858      	ldrb	r0, [r3, #1]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006eba:	2301      	movs	r3, #1
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	f7ff fcd5 	bl	800686c <disk_read>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ecc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ff87 	bl	8006e00 <sync_window>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d158      	bne.n	8006fae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d148      	bne.n	8006f96 <sync_fs+0xb2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	791b      	ldrb	r3, [r3, #4]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d144      	bne.n	8006f96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3330      	adds	r3, #48	; 0x30
 8006f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f14:	2100      	movs	r1, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff fda9 	bl	8006a6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3330      	adds	r3, #48	; 0x30
 8006f20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fd38 	bl	800699e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3330      	adds	r3, #48	; 0x30
 8006f32:	4921      	ldr	r1, [pc, #132]	; (8006fb8 <sync_fs+0xd4>)
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fd4d 	bl	80069d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3330      	adds	r3, #48	; 0x30
 8006f3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006f42:	491e      	ldr	r1, [pc, #120]	; (8006fbc <sync_fs+0xd8>)
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fd45 	bl	80069d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3330      	adds	r3, #48	; 0x30
 8006f4e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7ff fd3b 	bl	80069d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3330      	adds	r3, #48	; 0x30
 8006f62:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7ff fd31 	bl	80069d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7858      	ldrb	r0, [r3, #1]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f7ff fc8e 	bl	80068ac <disk_write>
			fs->fsi_flag = 0;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fca4 	bl	80068ec <disk_ioctl>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <sync_fs+0xca>
 8006faa:	2301      	movs	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	41615252 	.word	0x41615252
 8006fbc:	61417272 	.word	0x61417272

08006fc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	3b02      	subs	r3, #2
 8006fce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	3b02      	subs	r3, #2
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d301      	bcc.n	8006fe0 <clust2sect+0x20>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e008      	b.n	8006ff2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	895b      	ldrh	r3, [r3, #10]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	fb03 f202 	mul.w	r2, r3, r2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	4413      	add	r3, r2
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b086      	sub	sp, #24
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d904      	bls.n	800701e <get_fat+0x20>
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d302      	bcc.n	8007024 <get_fat+0x26>
		val = 1;	/* Internal error */
 800701e:	2301      	movs	r3, #1
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e08c      	b.n	800713e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007028:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d045      	beq.n	80070be <get_fat+0xc0>
 8007032:	2b03      	cmp	r3, #3
 8007034:	d05d      	beq.n	80070f2 <get_fat+0xf4>
 8007036:	2b01      	cmp	r3, #1
 8007038:	d177      	bne.n	800712a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	0a5b      	lsrs	r3, r3, #9
 8007050:	4413      	add	r3, r2
 8007052:	4619      	mov	r1, r3
 8007054:	6938      	ldr	r0, [r7, #16]
 8007056:	f7ff ff17 	bl	8006e88 <move_window>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d167      	bne.n	8007130 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	60fa      	str	r2, [r7, #12]
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4413      	add	r3, r2
 800706e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007072:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	6a1a      	ldr	r2, [r3, #32]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	0a5b      	lsrs	r3, r3, #9
 800707c:	4413      	add	r3, r2
 800707e:	4619      	mov	r1, r3
 8007080:	6938      	ldr	r0, [r7, #16]
 8007082:	f7ff ff01 	bl	8006e88 <move_window>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d153      	bne.n	8007134 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4413      	add	r3, r2
 8007096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	461a      	mov	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <get_fat+0xb6>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	e002      	b.n	80070ba <get_fat+0xbc>
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ba:	617b      	str	r3, [r7, #20]
			break;
 80070bc:	e03f      	b.n	800713e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6a1a      	ldr	r2, [r3, #32]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	0a1b      	lsrs	r3, r3, #8
 80070c6:	4413      	add	r3, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	6938      	ldr	r0, [r7, #16]
 80070cc:	f7ff fedc 	bl	8006e88 <move_window>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d130      	bne.n	8007138 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80070e4:	4413      	add	r3, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fc1e 	bl	8006928 <ld_word>
 80070ec:	4603      	mov	r3, r0
 80070ee:	617b      	str	r3, [r7, #20]
			break;
 80070f0:	e025      	b.n	800713e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6a1a      	ldr	r2, [r3, #32]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	09db      	lsrs	r3, r3, #7
 80070fa:	4413      	add	r3, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	6938      	ldr	r0, [r7, #16]
 8007100:	f7ff fec2 	bl	8006e88 <move_window>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d118      	bne.n	800713c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007118:	4413      	add	r3, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fc1c 	bl	8006958 <ld_dword>
 8007120:	4603      	mov	r3, r0
 8007122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007126:	617b      	str	r3, [r7, #20]
			break;
 8007128:	e009      	b.n	800713e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800712a:	2301      	movs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	e006      	b.n	800713e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007130:	bf00      	nop
 8007132:	e004      	b.n	800713e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007134:	bf00      	nop
 8007136:	e002      	b.n	800713e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007138:	bf00      	nop
 800713a:	e000      	b.n	800713e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800713c:	bf00      	nop
		}
	}

	return val;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b089      	sub	sp, #36	; 0x24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007154:	2302      	movs	r3, #2
 8007156:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b01      	cmp	r3, #1
 800715c:	f240 80d6 	bls.w	800730c <put_fat+0x1c4>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	f080 80d0 	bcs.w	800730c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d073      	beq.n	800725c <put_fat+0x114>
 8007174:	2b03      	cmp	r3, #3
 8007176:	f000 8091 	beq.w	800729c <put_fat+0x154>
 800717a:	2b01      	cmp	r3, #1
 800717c:	f040 80c6 	bne.w	800730c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4413      	add	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a1a      	ldr	r2, [r3, #32]
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	0a5b      	lsrs	r3, r3, #9
 8007196:	4413      	add	r3, r2
 8007198:	4619      	mov	r1, r3
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fe74 	bl	8006e88 <move_window>
 80071a0:	4603      	mov	r3, r0
 80071a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071a4:	7ffb      	ldrb	r3, [r7, #31]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 80a9 	bne.w	80072fe <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	61b9      	str	r1, [r7, #24]
 80071b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071bc:	4413      	add	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00d      	beq.n	80071e6 <put_fat+0x9e>
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b25b      	sxtb	r3, r3
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	b25a      	sxtb	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	b25b      	sxtb	r3, r3
 80071de:	4313      	orrs	r3, r2
 80071e0:	b25b      	sxtb	r3, r3
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	e001      	b.n	80071ea <put_fat+0xa2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1a      	ldr	r2, [r3, #32]
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	0a5b      	lsrs	r3, r3, #9
 80071fc:	4413      	add	r3, r2
 80071fe:	4619      	mov	r1, r3
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff fe41 	bl	8006e88 <move_window>
 8007206:	4603      	mov	r3, r0
 8007208:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800720a:	7ffb      	ldrb	r3, [r7, #31]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d178      	bne.n	8007302 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721c:	4413      	add	r3, r2
 800721e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <put_fat+0xea>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	091b      	lsrs	r3, r3, #4
 800722e:	b2db      	uxtb	r3, r3
 8007230:	e00e      	b.n	8007250 <put_fat+0x108>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	b25b      	sxtb	r3, r3
 8007238:	f023 030f 	bic.w	r3, r3, #15
 800723c:	b25a      	sxtb	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	b25b      	sxtb	r3, r3
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	b25b      	sxtb	r3, r3
 800724a:	4313      	orrs	r3, r2
 800724c:	b25b      	sxtb	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	70da      	strb	r2, [r3, #3]
			break;
 800725a:	e057      	b.n	800730c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1a      	ldr	r2, [r3, #32]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	4413      	add	r3, r2
 8007266:	4619      	mov	r1, r3
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f7ff fe0d 	bl	8006e88 <move_window>
 800726e:	4603      	mov	r3, r0
 8007270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007272:	7ffb      	ldrb	r3, [r7, #31]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d146      	bne.n	8007306 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007286:	4413      	add	r3, r2
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	b292      	uxth	r2, r2
 800728c:	4611      	mov	r1, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fb85 	bl	800699e <st_word>
			fs->wflag = 1;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	70da      	strb	r2, [r3, #3]
			break;
 800729a:	e037      	b.n	800730c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1a      	ldr	r2, [r3, #32]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	09db      	lsrs	r3, r3, #7
 80072a4:	4413      	add	r3, r2
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fded 	bl	8006e88 <move_window>
 80072ae:	4603      	mov	r3, r0
 80072b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072b2:	7ffb      	ldrb	r3, [r7, #31]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d128      	bne.n	800730a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80072cc:	4413      	add	r3, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fb42 	bl	8006958 <ld_dword>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80072da:	4323      	orrs	r3, r4
 80072dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80072ec:	4413      	add	r3, r2
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fb6f 	bl	80069d4 <st_dword>
			fs->wflag = 1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	70da      	strb	r2, [r3, #3]
			break;
 80072fc:	e006      	b.n	800730c <put_fat+0x1c4>
			if (res != FR_OK) break;
 80072fe:	bf00      	nop
 8007300:	e004      	b.n	800730c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007302:	bf00      	nop
 8007304:	e002      	b.n	800730c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800730a:	bf00      	nop
		}
	}
	return res;
 800730c:	7ffb      	ldrb	r3, [r7, #31]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3724      	adds	r7, #36	; 0x24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd90      	pop	{r4, r7, pc}

08007316 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b088      	sub	sp, #32
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d904      	bls.n	800733c <remove_chain+0x26>
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	429a      	cmp	r2, r3
 800733a:	d301      	bcc.n	8007340 <remove_chain+0x2a>
 800733c:	2302      	movs	r3, #2
 800733e:	e04b      	b.n	80073d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00c      	beq.n	8007360 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	69b8      	ldr	r0, [r7, #24]
 800734e:	f7ff fefb 	bl	8007148 <put_fat>
 8007352:	4603      	mov	r3, r0
 8007354:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007356:	7ffb      	ldrb	r3, [r7, #31]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <remove_chain+0x4a>
 800735c:	7ffb      	ldrb	r3, [r7, #31]
 800735e:	e03b      	b.n	80073d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff fe4b 	bl	8006ffe <get_fat>
 8007368:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d031      	beq.n	80073d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <remove_chain+0x64>
 8007376:	2302      	movs	r3, #2
 8007378:	e02e      	b.n	80073d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007380:	d101      	bne.n	8007386 <remove_chain+0x70>
 8007382:	2301      	movs	r3, #1
 8007384:	e028      	b.n	80073d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007386:	2200      	movs	r2, #0
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	69b8      	ldr	r0, [r7, #24]
 800738c:	f7ff fedc 	bl	8007148 <put_fat>
 8007390:	4603      	mov	r3, r0
 8007392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007394:	7ffb      	ldrb	r3, [r7, #31]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <remove_chain+0x88>
 800739a:	7ffb      	ldrb	r3, [r7, #31]
 800739c:	e01c      	b.n	80073d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	3b02      	subs	r3, #2
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d20b      	bcs.n	80073c4 <remove_chain+0xae>
			fs->free_clst++;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	791b      	ldrb	r3, [r3, #4]
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d3c6      	bcc.n	8007360 <remove_chain+0x4a>
 80073d2:	e000      	b.n	80073d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80073d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3720      	adds	r7, #32
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <create_chain+0x2c>
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	429a      	cmp	r2, r3
 800740a:	d31b      	bcc.n	8007444 <create_chain+0x64>
 800740c:	2301      	movs	r3, #1
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	e018      	b.n	8007444 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff fdf2 	bl	8006ffe <get_fat>
 800741a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d801      	bhi.n	8007426 <create_chain+0x46>
 8007422:	2301      	movs	r3, #1
 8007424:	e070      	b.n	8007508 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800742c:	d101      	bne.n	8007432 <create_chain+0x52>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	e06a      	b.n	8007508 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	429a      	cmp	r2, r3
 800743a:	d201      	bcs.n	8007440 <create_chain+0x60>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e063      	b.n	8007508 <create_chain+0x128>
		scl = clst;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	3301      	adds	r3, #1
 800744c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	429a      	cmp	r2, r3
 8007456:	d307      	bcc.n	8007468 <create_chain+0x88>
				ncl = 2;
 8007458:	2302      	movs	r3, #2
 800745a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	429a      	cmp	r2, r3
 8007462:	d901      	bls.n	8007468 <create_chain+0x88>
 8007464:	2300      	movs	r3, #0
 8007466:	e04f      	b.n	8007508 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007468:	69f9      	ldr	r1, [r7, #28]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fdc7 	bl	8006ffe <get_fat>
 8007470:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00e      	beq.n	8007496 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d003      	beq.n	8007486 <create_chain+0xa6>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007484:	d101      	bne.n	800748a <create_chain+0xaa>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	e03e      	b.n	8007508 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	429a      	cmp	r2, r3
 8007490:	d1da      	bne.n	8007448 <create_chain+0x68>
 8007492:	2300      	movs	r3, #0
 8007494:	e038      	b.n	8007508 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007496:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800749c:	69f9      	ldr	r1, [r7, #28]
 800749e:	6938      	ldr	r0, [r7, #16]
 80074a0:	f7ff fe52 	bl	8007148 <put_fat>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <create_chain+0xe2>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d006      	beq.n	80074c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6938      	ldr	r0, [r7, #16]
 80074ba:	f7ff fe45 	bl	8007148 <put_fat>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d116      	bne.n	80074f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	3b02      	subs	r3, #2
 80074d8:	429a      	cmp	r2, r3
 80074da:	d804      	bhi.n	80074e6 <create_chain+0x106>
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	1e5a      	subs	r2, r3, #1
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	791b      	ldrb	r3, [r3, #4]
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	711a      	strb	r2, [r3, #4]
 80074f4:	e007      	b.n	8007506 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d102      	bne.n	8007502 <create_chain+0x122>
 80074fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007500:	e000      	b.n	8007504 <create_chain+0x124>
 8007502:	2301      	movs	r3, #1
 8007504:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007506:	69fb      	ldr	r3, [r7, #28]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	3304      	adds	r3, #4
 8007526:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	0a5b      	lsrs	r3, r3, #9
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	8952      	ldrh	r2, [r2, #10]
 8007530:	fbb3 f3f2 	udiv	r3, r3, r2
 8007534:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1d1a      	adds	r2, r3, #4
 800753a:	613a      	str	r2, [r7, #16]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <clmt_clust+0x3a>
 8007546:	2300      	movs	r3, #0
 8007548:	e010      	b.n	800756c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	d307      	bcc.n	8007562 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	3304      	adds	r3, #4
 800755e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007560:	e7e9      	b.n	8007536 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007562:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	4413      	add	r3, r2
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800758e:	d204      	bcs.n	800759a <dir_sdi+0x22>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <dir_sdi+0x26>
		return FR_INT_ERR;
 800759a:	2302      	movs	r3, #2
 800759c:	e063      	b.n	8007666 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <dir_sdi+0x46>
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d902      	bls.n	80075be <dir_sdi+0x46>
		clst = fs->dirbase;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	8912      	ldrh	r2, [r2, #8]
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d301      	bcc.n	80075d4 <dir_sdi+0x5c>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e048      	b.n	8007666 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	61da      	str	r2, [r3, #28]
 80075dc:	e029      	b.n	8007632 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	895b      	ldrh	r3, [r3, #10]
 80075e2:	025b      	lsls	r3, r3, #9
 80075e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80075e6:	e019      	b.n	800761c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6979      	ldr	r1, [r7, #20]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fd06 	bl	8006ffe <get_fat>
 80075f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075fa:	d101      	bne.n	8007600 <dir_sdi+0x88>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e032      	b.n	8007666 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d904      	bls.n	8007610 <dir_sdi+0x98>
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	d301      	bcc.n	8007614 <dir_sdi+0x9c>
 8007610:	2302      	movs	r3, #2
 8007612:	e028      	b.n	8007666 <dir_sdi+0xee>
			ofs -= csz;
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	429a      	cmp	r2, r3
 8007622:	d2e1      	bcs.n	80075e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007624:	6979      	ldr	r1, [r7, #20]
 8007626:	6938      	ldr	r0, [r7, #16]
 8007628:	f7ff fcca 	bl	8006fc0 <clust2sect>
 800762c:	4602      	mov	r2, r0
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <dir_sdi+0xcc>
 8007640:	2302      	movs	r3, #2
 8007642:	e010      	b.n	8007666 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	0a5b      	lsrs	r3, r3, #9
 800764c:	441a      	add	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765e:	441a      	add	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	3320      	adds	r3, #32
 8007684:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <dir_next+0x28>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007694:	d301      	bcc.n	800769a <dir_next+0x2c>
 8007696:	2304      	movs	r3, #4
 8007698:	e0aa      	b.n	80077f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 8098 	bne.w	80077d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	8912      	ldrh	r2, [r2, #8]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	f0c0 8088 	bcc.w	80077d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	61da      	str	r2, [r3, #28]
 80076cc:	2304      	movs	r3, #4
 80076ce:	e08f      	b.n	80077f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	0a5b      	lsrs	r3, r3, #9
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	8952      	ldrh	r2, [r2, #10]
 80076d8:	3a01      	subs	r2, #1
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d17a      	bne.n	80077d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7ff fc88 	bl	8006ffe <get_fat>
 80076ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d801      	bhi.n	80076fa <dir_next+0x8c>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e07a      	b.n	80077f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007700:	d101      	bne.n	8007706 <dir_next+0x98>
 8007702:	2301      	movs	r3, #1
 8007704:	e074      	b.n	80077f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	429a      	cmp	r2, r3
 800770e:	d358      	bcc.n	80077c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	61da      	str	r2, [r3, #28]
 800771c:	2304      	movs	r3, #4
 800771e:	e067      	b.n	80077f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7ff fe59 	bl	80073e0 <create_chain>
 800772e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <dir_next+0xcc>
 8007736:	2307      	movs	r3, #7
 8007738:	e05a      	b.n	80077f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <dir_next+0xd6>
 8007740:	2302      	movs	r3, #2
 8007742:	e055      	b.n	80077f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774a:	d101      	bne.n	8007750 <dir_next+0xe2>
 800774c:	2301      	movs	r3, #1
 800774e:	e04f      	b.n	80077f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fb55 	bl	8006e00 <sync_window>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <dir_next+0xf2>
 800775c:	2301      	movs	r3, #1
 800775e:	e047      	b.n	80077f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3330      	adds	r3, #48	; 0x30
 8007764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff f97f 	bl	8006a6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	6979      	ldr	r1, [r7, #20]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fc22 	bl	8006fc0 <clust2sect>
 800777c:	4602      	mov	r2, r0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	62da      	str	r2, [r3, #44]	; 0x2c
 8007782:	e012      	b.n	80077aa <dir_next+0x13c>
						fs->wflag = 1;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff fb38 	bl	8006e00 <sync_window>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <dir_next+0x12c>
 8007796:	2301      	movs	r3, #1
 8007798:	e02a      	b.n	80077f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3301      	adds	r3, #1
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	895b      	ldrh	r3, [r3, #10]
 80077ae:	461a      	mov	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d3e6      	bcc.n	8007784 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad2      	subs	r2, r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80077c8:	6979      	ldr	r1, [r7, #20]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fbf8 	bl	8006fc0 <clust2sect>
 80077d0:	4602      	mov	r2, r0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e8:	441a      	add	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff feb4 	bl	8007578 <dir_sdi>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d12b      	bne.n	8007872 <dir_alloc+0x7a>
		n = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	4619      	mov	r1, r3
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff fb2f 	bl	8006e88 <move_window>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d11d      	bne.n	8007870 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2be5      	cmp	r3, #229	; 0xe5
 800783c:	d004      	beq.n	8007848 <dir_alloc+0x50>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d107      	bne.n	8007858 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	3301      	adds	r3, #1
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d102      	bne.n	800785c <dir_alloc+0x64>
 8007856:	e00c      	b.n	8007872 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007858:	2300      	movs	r3, #0
 800785a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800785c:	2101      	movs	r1, #1
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff ff05 	bl	800766e <dir_next>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0d7      	beq.n	800781e <dir_alloc+0x26>
 800786e:	e000      	b.n	8007872 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007870:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d101      	bne.n	800787c <dir_alloc+0x84>
 8007878:	2307      	movs	r3, #7
 800787a:	75fb      	strb	r3, [r7, #23]
	return res;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	331a      	adds	r3, #26
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff f847 	bl	8006928 <ld_word>
 800789a:	4603      	mov	r3, r0
 800789c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d109      	bne.n	80078ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	3314      	adds	r3, #20
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff f83c 	bl	8006928 <ld_word>
 80078b0:	4603      	mov	r3, r0
 80078b2:	041b      	lsls	r3, r3, #16
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	331a      	adds	r3, #26
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	b292      	uxth	r2, r2
 80078d8:	4611      	mov	r1, r2
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff f85f 	bl	800699e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d109      	bne.n	80078fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f103 0214 	add.w	r2, r3, #20
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7ff f851 	bl	800699e <st_word>
	}
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007912:	2100      	movs	r1, #0
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fe2f 	bl	8007578 <dir_sdi>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <dir_find+0x24>
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	e03e      	b.n	80079a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	4619      	mov	r1, r3
 800792e:	6938      	ldr	r0, [r7, #16]
 8007930:	f7ff faaa 	bl	8006e88 <move_window>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d12f      	bne.n	800799e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d102      	bne.n	8007952 <dir_find+0x4e>
 800794c:	2304      	movs	r3, #4
 800794e:	75fb      	strb	r3, [r7, #23]
 8007950:	e028      	b.n	80079a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	330b      	adds	r3, #11
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800795e:	b2da      	uxtb	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	330b      	adds	r3, #11
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	f003 0308 	and.w	r3, r3, #8
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <dir_find+0x86>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a18      	ldr	r0, [r3, #32]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3324      	adds	r3, #36	; 0x24
 800797c:	220b      	movs	r2, #11
 800797e:	4619      	mov	r1, r3
 8007980:	f7ff f88f 	bl	8006aa2 <mem_cmp>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00b      	beq.n	80079a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800798a:	2100      	movs	r1, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fe6e 	bl	800766e <dir_next>
 8007992:	4603      	mov	r3, r0
 8007994:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0c5      	beq.n	8007928 <dir_find+0x24>
 800799c:	e002      	b.n	80079a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800799e:	bf00      	nop
 80079a0:	e000      	b.n	80079a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079a2:	bf00      	nop

	return res;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80079bc:	2101      	movs	r1, #1
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff ff1a 	bl	80077f8 <dir_alloc>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d11c      	bne.n	8007a08 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	4619      	mov	r1, r3
 80079d4:	68b8      	ldr	r0, [r7, #8]
 80079d6:	f7ff fa57 	bl	8006e88 <move_window>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d111      	bne.n	8007a08 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	2220      	movs	r2, #32
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff f83e 	bl	8006a6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a18      	ldr	r0, [r3, #32]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3324      	adds	r3, #36	; 0x24
 80079fa:	220b      	movs	r2, #11
 80079fc:	4619      	mov	r1, r3
 80079fe:	f7ff f815 	bl	8006a2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2201      	movs	r2, #1
 8007a06:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3324      	adds	r3, #36	; 0x24
 8007a28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007a2a:	220b      	movs	r2, #11
 8007a2c:	2120      	movs	r1, #32
 8007a2e:	68b8      	ldr	r0, [r7, #8]
 8007a30:	f7ff f81d 	bl	8006a6e <mem_set>
	si = i = 0; ni = 8;
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	617a      	str	r2, [r7, #20]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a4e:	7ffb      	ldrb	r3, [r7, #31]
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	d94e      	bls.n	8007af2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007a54:	7ffb      	ldrb	r3, [r7, #31]
 8007a56:	2b2f      	cmp	r3, #47	; 0x2f
 8007a58:	d006      	beq.n	8007a68 <create_name+0x54>
 8007a5a:	7ffb      	ldrb	r3, [r7, #31]
 8007a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8007a5e:	d110      	bne.n	8007a82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a60:	e002      	b.n	8007a68 <create_name+0x54>
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	3301      	adds	r3, #1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b2f      	cmp	r3, #47	; 0x2f
 8007a72:	d0f6      	beq.n	8007a62 <create_name+0x4e>
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b5c      	cmp	r3, #92	; 0x5c
 8007a7e:	d0f0      	beq.n	8007a62 <create_name+0x4e>
			break;
 8007a80:	e038      	b.n	8007af4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007a82:	7ffb      	ldrb	r3, [r7, #31]
 8007a84:	2b2e      	cmp	r3, #46	; 0x2e
 8007a86:	d003      	beq.n	8007a90 <create_name+0x7c>
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d30c      	bcc.n	8007aaa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b0b      	cmp	r3, #11
 8007a94:	d002      	beq.n	8007a9c <create_name+0x88>
 8007a96:	7ffb      	ldrb	r3, [r7, #31]
 8007a98:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9a:	d001      	beq.n	8007aa0 <create_name+0x8c>
 8007a9c:	2306      	movs	r3, #6
 8007a9e:	e044      	b.n	8007b2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	613b      	str	r3, [r7, #16]
 8007aa4:	230b      	movs	r3, #11
 8007aa6:	61bb      	str	r3, [r7, #24]
			continue;
 8007aa8:	e022      	b.n	8007af0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da04      	bge.n	8007abc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ab2:	7ffb      	ldrb	r3, [r7, #31]
 8007ab4:	3b80      	subs	r3, #128	; 0x80
 8007ab6:	4a1f      	ldr	r2, [pc, #124]	; (8007b34 <create_name+0x120>)
 8007ab8:	5cd3      	ldrb	r3, [r2, r3]
 8007aba:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007abc:	7ffb      	ldrb	r3, [r7, #31]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	481d      	ldr	r0, [pc, #116]	; (8007b38 <create_name+0x124>)
 8007ac2:	f7ff f815 	bl	8006af0 <chk_chr>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <create_name+0xbc>
 8007acc:	2306      	movs	r3, #6
 8007ace:	e02c      	b.n	8007b2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007ad0:	7ffb      	ldrb	r3, [r7, #31]
 8007ad2:	2b60      	cmp	r3, #96	; 0x60
 8007ad4:	d905      	bls.n	8007ae2 <create_name+0xce>
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	2b7a      	cmp	r3, #122	; 0x7a
 8007ada:	d802      	bhi.n	8007ae2 <create_name+0xce>
 8007adc:	7ffb      	ldrb	r3, [r7, #31]
 8007ade:	3b20      	subs	r3, #32
 8007ae0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	613a      	str	r2, [r7, #16]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	4413      	add	r3, r2
 8007aec:	7ffa      	ldrb	r2, [r7, #31]
 8007aee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007af0:	e7a6      	b.n	8007a40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007af2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	441a      	add	r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <create_name+0xf4>
 8007b04:	2306      	movs	r3, #6
 8007b06:	e010      	b.n	8007b2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2be5      	cmp	r3, #229	; 0xe5
 8007b0e:	d102      	bne.n	8007b16 <create_name+0x102>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2205      	movs	r2, #5
 8007b14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b16:	7ffb      	ldrb	r3, [r7, #31]
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d801      	bhi.n	8007b20 <create_name+0x10c>
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	e000      	b.n	8007b22 <create_name+0x10e>
 8007b20:	2200      	movs	r2, #0
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	330b      	adds	r3, #11
 8007b26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007b28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3720      	adds	r7, #32
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	08008eb4 	.word	0x08008eb4
 8007b38:	08008bd4 	.word	0x08008bd4

08007b3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b50:	e002      	b.n	8007b58 <follow_path+0x1c>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b2f      	cmp	r3, #47	; 0x2f
 8007b5e:	d0f8      	beq.n	8007b52 <follow_path+0x16>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b5c      	cmp	r3, #92	; 0x5c
 8007b66:	d0f4      	beq.n	8007b52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b1f      	cmp	r3, #31
 8007b74:	d80a      	bhi.n	8007b8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2280      	movs	r2, #128	; 0x80
 8007b7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007b7e:	2100      	movs	r1, #0
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff fcf9 	bl	8007578 <dir_sdi>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75fb      	strb	r3, [r7, #23]
 8007b8a:	e043      	b.n	8007c14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff ff3f 	bl	8007a14 <create_name>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d134      	bne.n	8007c0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff feaf 	bl	8007904 <dir_find>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007bb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d127      	bne.n	8007c0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	f003 0304 	and.w	r3, r3, #4
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d122      	bne.n	8007c0e <follow_path+0xd2>
 8007bc8:	2305      	movs	r3, #5
 8007bca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007bcc:	e01f      	b.n	8007c0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bce:	7afb      	ldrb	r3, [r7, #11]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11c      	bne.n	8007c12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	799b      	ldrb	r3, [r3, #6]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007be4:	2305      	movs	r3, #5
 8007be6:	75fb      	strb	r3, [r7, #23]
 8007be8:	e014      	b.n	8007c14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fe42 	bl	8007886 <ld_clust>
 8007c02:	4602      	mov	r2, r0
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c08:	e7c0      	b.n	8007b8c <follow_path+0x50>
			if (res != FR_OK) break;
 8007c0a:	bf00      	nop
 8007c0c:	e002      	b.n	8007c14 <follow_path+0xd8>
				break;
 8007c0e:	bf00      	nop
 8007c10:	e000      	b.n	8007c14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c12:	bf00      	nop
			}
		}
	}

	return res;
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b087      	sub	sp, #28
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d031      	beq.n	8007c98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	e002      	b.n	8007c42 <get_ldnumber+0x24>
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d903      	bls.n	8007c52 <get_ldnumber+0x34>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b3a      	cmp	r3, #58	; 0x3a
 8007c50:	d1f4      	bne.n	8007c3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b3a      	cmp	r3, #58	; 0x3a
 8007c58:	d11c      	bne.n	8007c94 <get_ldnumber+0x76>
			tp = *path;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	60fa      	str	r2, [r7, #12]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	3b30      	subs	r3, #48	; 0x30
 8007c6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d80e      	bhi.n	8007c90 <get_ldnumber+0x72>
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d10a      	bne.n	8007c90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d107      	bne.n	8007c90 <get_ldnumber+0x72>
					vol = (int)i;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	3301      	adds	r3, #1
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	e002      	b.n	8007c9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c94:	2300      	movs	r3, #0
 8007c96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c98:	693b      	ldr	r3, [r7, #16]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	70da      	strb	r2, [r3, #3]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cbe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff f8e0 	bl	8006e88 <move_window>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <check_fs+0x2a>
 8007cce:	2304      	movs	r3, #4
 8007cd0:	e038      	b.n	8007d44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3330      	adds	r3, #48	; 0x30
 8007cd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fe24 	bl	8006928 <ld_word>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d001      	beq.n	8007cf0 <check_fs+0x48>
 8007cec:	2303      	movs	r3, #3
 8007cee:	e029      	b.n	8007d44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cf6:	2be9      	cmp	r3, #233	; 0xe9
 8007cf8:	d009      	beq.n	8007d0e <check_fs+0x66>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d00:	2beb      	cmp	r3, #235	; 0xeb
 8007d02:	d11e      	bne.n	8007d42 <check_fs+0x9a>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d0a:	2b90      	cmp	r3, #144	; 0x90
 8007d0c:	d119      	bne.n	8007d42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3330      	adds	r3, #48	; 0x30
 8007d12:	3336      	adds	r3, #54	; 0x36
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fe1f 	bl	8006958 <ld_dword>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d20:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <check_fs+0xa4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d101      	bne.n	8007d2a <check_fs+0x82>
 8007d26:	2300      	movs	r3, #0
 8007d28:	e00c      	b.n	8007d44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3330      	adds	r3, #48	; 0x30
 8007d2e:	3352      	adds	r3, #82	; 0x52
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fe11 	bl	8006958 <ld_dword>
 8007d36:	4602      	mov	r2, r0
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <check_fs+0xa8>)
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d101      	bne.n	8007d42 <check_fs+0x9a>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e000      	b.n	8007d44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d42:	2302      	movs	r3, #2
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	00544146 	.word	0x00544146
 8007d50:	33544146 	.word	0x33544146

08007d54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b096      	sub	sp, #88	; 0x58
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff ff58 	bl	8007c1e <get_ldnumber>
 8007d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	da01      	bge.n	8007d7a <find_volume+0x26>
 8007d76:	230b      	movs	r3, #11
 8007d78:	e22e      	b.n	80081d8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d7a:	4aa8      	ldr	r2, [pc, #672]	; (800801c <find_volume+0x2c8>)
 8007d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <find_volume+0x3a>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	e224      	b.n	80081d8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	f023 0301 	bic.w	r3, r3, #1
 8007d9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01a      	beq.n	8007dda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fd1f 	bl	80067ec <disk_status>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10c      	bne.n	8007dda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <find_volume+0x82>
 8007dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dca:	f003 0304 	and.w	r3, r3, #4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007dd2:	230a      	movs	r3, #10
 8007dd4:	e200      	b.n	80081d8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e1fe      	b.n	80081d8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe fd17 	bl	8006820 <disk_initialize>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e04:	2303      	movs	r3, #3
 8007e06:	e1e7      	b.n	80081d8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <find_volume+0xca>
 8007e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007e1a:	230a      	movs	r3, #10
 8007e1c:	e1dc      	b.n	80081d8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e26:	f7ff ff3f 	bl	8007ca8 <check_fs>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d14b      	bne.n	8007ed0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e38:	2300      	movs	r3, #0
 8007e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e3c:	e01f      	b.n	8007e7e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e4c:	4413      	add	r3, r2
 8007e4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	3304      	adds	r3, #4
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d006      	beq.n	8007e68 <find_volume+0x114>
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fd7a 	bl	8006958 <ld_dword>
 8007e64:	4602      	mov	r2, r0
 8007e66:	e000      	b.n	8007e6a <find_volume+0x116>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007e72:	440b      	add	r3, r1
 8007e74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d9dc      	bls.n	8007e3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007e84:	2300      	movs	r3, #0
 8007e86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <find_volume+0x140>
 8007e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e90:	3b01      	subs	r3, #1
 8007e92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ea2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <find_volume+0x162>
 8007eaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eae:	f7ff fefb 	bl	8007ca8 <check_fs>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	e000      	b.n	8007eb8 <find_volume+0x164>
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d905      	bls.n	8007ed0 <find_volume+0x17c>
 8007ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8007eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d9e1      	bls.n	8007e94 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d101      	bne.n	8007edc <find_volume+0x188>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e17d      	b.n	80081d8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007edc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d901      	bls.n	8007ee8 <find_volume+0x194>
 8007ee4:	230d      	movs	r3, #13
 8007ee6:	e177      	b.n	80081d8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	3330      	adds	r3, #48	; 0x30
 8007eec:	330b      	adds	r3, #11
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fd1a 	bl	8006928 <ld_word>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efa:	d001      	beq.n	8007f00 <find_volume+0x1ac>
 8007efc:	230d      	movs	r3, #13
 8007efe:	e16b      	b.n	80081d8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	3330      	adds	r3, #48	; 0x30
 8007f04:	3316      	adds	r3, #22
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fd0e 	bl	8006928 <ld_word>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <find_volume+0x1d0>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	3330      	adds	r3, #48	; 0x30
 8007f1a:	3324      	adds	r3, #36	; 0x24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fd1b 	bl	8006958 <ld_dword>
 8007f22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f28:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	789b      	ldrb	r3, [r3, #2]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d005      	beq.n	8007f48 <find_volume+0x1f4>
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	789b      	ldrb	r3, [r3, #2]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d001      	beq.n	8007f48 <find_volume+0x1f4>
 8007f44:	230d      	movs	r3, #13
 8007f46:	e147      	b.n	80081d8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	789b      	ldrb	r3, [r3, #2]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f50:	fb02 f303 	mul.w	r3, r2, r3
 8007f54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	895b      	ldrh	r3, [r3, #10]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <find_volume+0x228>
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	895b      	ldrh	r3, [r3, #10]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	895b      	ldrh	r3, [r3, #10]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	4013      	ands	r3, r2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <find_volume+0x22c>
 8007f7c:	230d      	movs	r3, #13
 8007f7e:	e12b      	b.n	80081d8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	3330      	adds	r3, #48	; 0x30
 8007f84:	3311      	adds	r3, #17
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe fcce 	bl	8006928 <ld_word>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	891b      	ldrh	r3, [r3, #8]
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <find_volume+0x252>
 8007fa2:	230d      	movs	r3, #13
 8007fa4:	e118      	b.n	80081d8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	3330      	adds	r3, #48	; 0x30
 8007faa:	3313      	adds	r3, #19
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fcbb 	bl	8006928 <ld_word>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <find_volume+0x276>
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	3330      	adds	r3, #48	; 0x30
 8007fc0:	3320      	adds	r3, #32
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fcc8 	bl	8006958 <ld_dword>
 8007fc8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	3330      	adds	r3, #48	; 0x30
 8007fce:	330e      	adds	r3, #14
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fca9 	bl	8006928 <ld_word>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007fda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <find_volume+0x290>
 8007fe0:	230d      	movs	r3, #13
 8007fe2:	e0f9      	b.n	80081d8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007fe4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe8:	4413      	add	r3, r2
 8007fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fec:	8912      	ldrh	r2, [r2, #8]
 8007fee:	0912      	lsrs	r2, r2, #4
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d201      	bcs.n	8008002 <find_volume+0x2ae>
 8007ffe:	230d      	movs	r3, #13
 8008000:	e0ea      	b.n	80081d8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800800a:	8952      	ldrh	r2, [r2, #10]
 800800c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d103      	bne.n	8008020 <find_volume+0x2cc>
 8008018:	230d      	movs	r3, #13
 800801a:	e0dd      	b.n	80081d8 <find_volume+0x484>
 800801c:	2000004c 	.word	0x2000004c
		fmt = FS_FAT32;
 8008020:	2303      	movs	r3, #3
 8008022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800802c:	4293      	cmp	r3, r2
 800802e:	d802      	bhi.n	8008036 <find_volume+0x2e2>
 8008030:	2302      	movs	r3, #2
 8008032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	f640 72f5 	movw	r2, #4085	; 0xff5
 800803c:	4293      	cmp	r3, r2
 800803e:	d802      	bhi.n	8008046 <find_volume+0x2f2>
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	1c9a      	adds	r2, r3, #2
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008052:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008054:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008058:	441a      	add	r2, r3
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800805e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	441a      	add	r2, r3
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008068:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800806c:	2b03      	cmp	r3, #3
 800806e:	d11e      	bne.n	80080ae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	3330      	adds	r3, #48	; 0x30
 8008074:	332a      	adds	r3, #42	; 0x2a
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fc56 	bl	8006928 <ld_word>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <find_volume+0x332>
 8008082:	230d      	movs	r3, #13
 8008084:	e0a8      	b.n	80081d8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	891b      	ldrh	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <find_volume+0x33e>
 800808e:	230d      	movs	r3, #13
 8008090:	e0a2      	b.n	80081d8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	3330      	adds	r3, #48	; 0x30
 8008096:	332c      	adds	r3, #44	; 0x2c
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fc5d 	bl	8006958 <ld_dword>
 800809e:	4602      	mov	r2, r0
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	647b      	str	r3, [r7, #68]	; 0x44
 80080ac:	e01f      	b.n	80080ee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	891b      	ldrh	r3, [r3, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <find_volume+0x366>
 80080b6:	230d      	movs	r3, #13
 80080b8:	e08e      	b.n	80081d8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	6a1a      	ldr	r2, [r3, #32]
 80080be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c0:	441a      	add	r2, r3
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80080c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d103      	bne.n	80080d6 <find_volume+0x382>
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	e00a      	b.n	80080ec <find_volume+0x398>
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	4613      	mov	r3, r2
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	4413      	add	r3, r2
 80080e0:	085a      	lsrs	r2, r3, #1
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80080ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80080f8:	0a5b      	lsrs	r3, r3, #9
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d201      	bcs.n	8008102 <find_volume+0x3ae>
 80080fe:	230d      	movs	r3, #13
 8008100:	e06a      	b.n	80081d8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008108:	611a      	str	r2, [r3, #16]
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	691a      	ldr	r2, [r3, #16]
 800810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008110:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	2280      	movs	r2, #128	; 0x80
 8008116:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800811c:	2b03      	cmp	r3, #3
 800811e:	d149      	bne.n	80081b4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	3330      	adds	r3, #48	; 0x30
 8008124:	3330      	adds	r3, #48	; 0x30
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fbfe 	bl	8006928 <ld_word>
 800812c:	4603      	mov	r3, r0
 800812e:	2b01      	cmp	r3, #1
 8008130:	d140      	bne.n	80081b4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008134:	3301      	adds	r3, #1
 8008136:	4619      	mov	r1, r3
 8008138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800813a:	f7fe fea5 	bl	8006e88 <move_window>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d137      	bne.n	80081b4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	2200      	movs	r2, #0
 8008148:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	3330      	adds	r3, #48	; 0x30
 800814e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fbe8 	bl	8006928 <ld_word>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008160:	429a      	cmp	r2, r3
 8008162:	d127      	bne.n	80081b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	3330      	adds	r3, #48	; 0x30
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe fbf5 	bl	8006958 <ld_dword>
 800816e:	4602      	mov	r2, r0
 8008170:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <find_volume+0x48c>)
 8008172:	429a      	cmp	r2, r3
 8008174:	d11e      	bne.n	80081b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	3330      	adds	r3, #48	; 0x30
 800817a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fbea 	bl	8006958 <ld_dword>
 8008184:	4602      	mov	r2, r0
 8008186:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <find_volume+0x490>)
 8008188:	429a      	cmp	r2, r3
 800818a:	d113      	bne.n	80081b4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	3330      	adds	r3, #48	; 0x30
 8008190:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe fbdf 	bl	8006958 <ld_dword>
 800819a:	4602      	mov	r2, r0
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	3330      	adds	r3, #48	; 0x30
 80081a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fbd5 	bl	8006958 <ld_dword>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80081ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <find_volume+0x494>)
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <find_volume+0x494>)
 80081c6:	801a      	strh	r2, [r3, #0]
 80081c8:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <find_volume+0x494>)
 80081ca:	881a      	ldrh	r2, [r3, #0]
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80081d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081d2:	f7fe fdf1 	bl	8006db8 <clear_lock>
#endif
	return FR_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3758      	adds	r7, #88	; 0x58
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	41615252 	.word	0x41615252
 80081e4:	61417272 	.word	0x61417272
 80081e8:	20000050 	.word	0x20000050

080081ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80081f6:	2309      	movs	r3, #9
 80081f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01c      	beq.n	800823a <validate+0x4e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d018      	beq.n	800823a <validate+0x4e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d013      	beq.n	800823a <validate+0x4e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	889a      	ldrh	r2, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	88db      	ldrh	r3, [r3, #6]
 800821c:	429a      	cmp	r2, r3
 800821e:	d10c      	bne.n	800823a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe fae0 	bl	80067ec <disk_status>
 800822c:	4603      	mov	r3, r0
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <validate+0x4e>
			res = FR_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <validate+0x5a>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	e000      	b.n	8008248 <validate+0x5c>
 8008246:	2300      	movs	r3, #0
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	6013      	str	r3, [r2, #0]
	return res;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800826a:	f107 0310 	add.w	r3, r7, #16
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff fcd5 	bl	8007c1e <get_ldnumber>
 8008274:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2b00      	cmp	r3, #0
 800827a:	da01      	bge.n	8008280 <f_mount+0x28>
 800827c:	230b      	movs	r3, #11
 800827e:	e02b      	b.n	80082d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008280:	4a17      	ldr	r2, [pc, #92]	; (80082e0 <f_mount+0x88>)
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008288:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008290:	69b8      	ldr	r0, [r7, #24]
 8008292:	f7fe fd91 	bl	8006db8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	490d      	ldr	r1, [pc, #52]	; (80082e0 <f_mount+0x88>)
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <f_mount+0x66>
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d001      	beq.n	80082c2 <f_mount+0x6a>
 80082be:	2300      	movs	r3, #0
 80082c0:	e00a      	b.n	80082d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80082c2:	f107 010c 	add.w	r1, r7, #12
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	2200      	movs	r2, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fd41 	bl	8007d54 <find_volume>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	2000004c 	.word	0x2000004c

080082e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b098      	sub	sp, #96	; 0x60
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4613      	mov	r3, r2
 80082f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <f_open+0x18>
 80082f8:	2309      	movs	r3, #9
 80082fa:	e1ad      	b.n	8008658 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008302:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008304:	79fa      	ldrb	r2, [r7, #7]
 8008306:	f107 0110 	add.w	r1, r7, #16
 800830a:	f107 0308 	add.w	r3, r7, #8
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fd20 	bl	8007d54 <find_volume>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800831a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800831e:	2b00      	cmp	r3, #0
 8008320:	f040 8191 	bne.w	8008646 <f_open+0x362>
		dj.obj.fs = fs;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	f107 0314 	add.w	r3, r7, #20
 800832e:	4611      	mov	r1, r2
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff fc03 	bl	8007b3c <follow_path>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800833c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008340:	2b00      	cmp	r3, #0
 8008342:	d11a      	bne.n	800837a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008344:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008348:	b25b      	sxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	da03      	bge.n	8008356 <f_open+0x72>
				res = FR_INVALID_NAME;
 800834e:	2306      	movs	r3, #6
 8008350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008354:	e011      	b.n	800837a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf14      	ite	ne
 8008360:	2301      	movne	r3, #1
 8008362:	2300      	moveq	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	f107 0314 	add.w	r3, r7, #20
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fbda 	bl	8006b28 <chk_lock>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	f003 031c 	and.w	r3, r3, #28
 8008380:	2b00      	cmp	r3, #0
 8008382:	d07f      	beq.n	8008484 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008388:	2b00      	cmp	r3, #0
 800838a:	d017      	beq.n	80083bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800838c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008390:	2b04      	cmp	r3, #4
 8008392:	d10e      	bne.n	80083b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008394:	f7fe fc24 	bl	8006be0 <enq_lock>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d006      	beq.n	80083ac <f_open+0xc8>
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff fb03 	bl	80079ae <dir_register>
 80083a8:	4603      	mov	r3, r0
 80083aa:	e000      	b.n	80083ae <f_open+0xca>
 80083ac:	2312      	movs	r3, #18
 80083ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	f043 0308 	orr.w	r3, r3, #8
 80083b8:	71fb      	strb	r3, [r7, #7]
 80083ba:	e010      	b.n	80083de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80083bc:	7ebb      	ldrb	r3, [r7, #26]
 80083be:	f003 0311 	and.w	r3, r3, #17
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <f_open+0xea>
					res = FR_DENIED;
 80083c6:	2307      	movs	r3, #7
 80083c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083cc:	e007      	b.n	80083de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <f_open+0xfa>
 80083d8:	2308      	movs	r3, #8
 80083da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80083de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d168      	bne.n	80084b8 <f_open+0x1d4>
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d063      	beq.n	80084b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80083f0:	f7fe f99e 	bl	8006730 <get_fattime>
 80083f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f8:	330e      	adds	r3, #14
 80083fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fae9 	bl	80069d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	3316      	adds	r3, #22
 8008406:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fae3 	bl	80069d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800840e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008410:	330b      	adds	r3, #11
 8008412:	2220      	movs	r2, #32
 8008414:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fa32 	bl	8007886 <ld_clust>
 8008422:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008428:	2200      	movs	r2, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff fa4a 	bl	80078c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	331c      	adds	r3, #28
 8008434:	2100      	movs	r1, #0
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe facc 	bl	80069d4 <st_dword>
					fs->wflag = 1;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2201      	movs	r2, #1
 8008440:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d037      	beq.n	80084b8 <f_open+0x1d4>
						dw = fs->winsect;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800844e:	f107 0314 	add.w	r3, r7, #20
 8008452:	2200      	movs	r2, #0
 8008454:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe ff5d 	bl	8007316 <remove_chain>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008466:	2b00      	cmp	r3, #0
 8008468:	d126      	bne.n	80084b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fd0a 	bl	8006e88 <move_window>
 8008474:	4603      	mov	r3, r0
 8008476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800847e:	3a01      	subs	r2, #1
 8008480:	60da      	str	r2, [r3, #12]
 8008482:	e019      	b.n	80084b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008488:	2b00      	cmp	r3, #0
 800848a:	d115      	bne.n	80084b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800848c:	7ebb      	ldrb	r3, [r7, #26]
 800848e:	f003 0310 	and.w	r3, r3, #16
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008496:	2304      	movs	r3, #4
 8008498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800849c:	e00c      	b.n	80084b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d007      	beq.n	80084b8 <f_open+0x1d4>
 80084a8:	7ebb      	ldrb	r3, [r7, #26]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <f_open+0x1d4>
						res = FR_DENIED;
 80084b2:	2307      	movs	r3, #7
 80084b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80084b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d128      	bne.n	8008512 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80084da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2301      	movne	r3, #1
 80084ec:	2300      	moveq	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	f107 0314 	add.w	r3, r7, #20
 80084f6:	4611      	mov	r1, r2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe fb93 	bl	8006c24 <inc_lock>
 80084fe:	4602      	mov	r2, r0
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <f_open+0x22e>
 800850c:	2302      	movs	r3, #2
 800850e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 8095 	bne.w	8008646 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff f9af 	bl	8007886 <ld_clust>
 8008528:	4602      	mov	r2, r0
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008530:	331c      	adds	r3, #28
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fa10 	bl	8006958 <ld_dword>
 8008538:	4602      	mov	r2, r0
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	88da      	ldrh	r2, [r3, #6]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	79fa      	ldrb	r2, [r7, #7]
 8008556:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3330      	adds	r3, #48	; 0x30
 800856e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008572:	2100      	movs	r1, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fa7a 	bl	8006a6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800857a:	79fb      	ldrb	r3, [r7, #7]
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d060      	beq.n	8008646 <f_open+0x362>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d05c      	beq.n	8008646 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	895b      	ldrh	r3, [r3, #10]
 8008598:	025b      	lsls	r3, r3, #9
 800859a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	657b      	str	r3, [r7, #84]	; 0x54
 80085a8:	e016      	b.n	80085d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fd25 	bl	8006ffe <get_fat>
 80085b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80085b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d802      	bhi.n	80085c2 <f_open+0x2de>
 80085bc:	2302      	movs	r3, #2
 80085be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c8:	d102      	bne.n	80085d0 <f_open+0x2ec>
 80085ca:	2301      	movs	r3, #1
 80085cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	657b      	str	r3, [r7, #84]	; 0x54
 80085d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d103      	bne.n	80085e8 <f_open+0x304>
 80085e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d8e0      	bhi.n	80085aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80085ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d127      	bne.n	8008646 <f_open+0x362>
 80085f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d022      	beq.n	8008646 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fcdb 	bl	8006fc0 <clust2sect>
 800860a:	6478      	str	r0, [r7, #68]	; 0x44
 800860c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <f_open+0x336>
						res = FR_INT_ERR;
 8008612:	2302      	movs	r3, #2
 8008614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008618:	e015      	b.n	8008646 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800861a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800861c:	0a5a      	lsrs	r2, r3, #9
 800861e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	7858      	ldrb	r0, [r3, #1]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1a      	ldr	r2, [r3, #32]
 8008634:	2301      	movs	r3, #1
 8008636:	f7fe f919 	bl	800686c <disk_read>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <f_open+0x362>
 8008640:	2301      	movs	r3, #1
 8008642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <f_open+0x370>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008658:	4618      	mov	r0, r3
 800865a:	3760      	adds	r7, #96	; 0x60
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08c      	sub	sp, #48	; 0x30
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f107 0210 	add.w	r2, r7, #16
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff fdb3 	bl	80081ec <validate>
 8008686:	4603      	mov	r3, r0
 8008688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800868c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008690:	2b00      	cmp	r3, #0
 8008692:	d107      	bne.n	80086a4 <f_write+0x44>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	7d5b      	ldrb	r3, [r3, #21]
 8008698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800869c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <f_write+0x4a>
 80086a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086a8:	e14b      	b.n	8008942 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	7d1b      	ldrb	r3, [r3, #20]
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <f_write+0x5a>
 80086b6:	2307      	movs	r3, #7
 80086b8:	e143      	b.n	8008942 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f080 812d 	bcs.w	8008926 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	43db      	mvns	r3, r3
 80086d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80086d4:	e127      	b.n	8008926 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 80e3 	bne.w	80088aa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	0a5b      	lsrs	r3, r3, #9
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	8952      	ldrh	r2, [r2, #10]
 80086ee:	3a01      	subs	r2, #1
 80086f0:	4013      	ands	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d143      	bne.n	8008782 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10c      	bne.n	800871c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	d11a      	bne.n	8008744 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fe64 	bl	80073e0 <create_chain>
 8008718:	62b8      	str	r0, [r7, #40]	; 0x28
 800871a:	e013      	b.n	8008744 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d007      	beq.n	8008734 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	4619      	mov	r1, r3
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7fe fef0 	bl	8007510 <clmt_clust>
 8008730:	62b8      	str	r0, [r7, #40]	; 0x28
 8008732:	e007      	b.n	8008744 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	4619      	mov	r1, r3
 800873c:	4610      	mov	r0, r2
 800873e:	f7fe fe4f 	bl	80073e0 <create_chain>
 8008742:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 80f2 	beq.w	8008930 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	2b01      	cmp	r3, #1
 8008750:	d104      	bne.n	800875c <f_write+0xfc>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2202      	movs	r2, #2
 8008756:	755a      	strb	r2, [r3, #21]
 8008758:	2302      	movs	r3, #2
 800875a:	e0f2      	b.n	8008942 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008762:	d104      	bne.n	800876e <f_write+0x10e>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2201      	movs	r2, #1
 8008768:	755a      	strb	r2, [r3, #21]
 800876a:	2301      	movs	r3, #1
 800876c:	e0e9      	b.n	8008942 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008772:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <f_write+0x122>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008780:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	7d1b      	ldrb	r3, [r3, #20]
 8008786:	b25b      	sxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	da18      	bge.n	80087be <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	7858      	ldrb	r0, [r3, #1]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6a1a      	ldr	r2, [r3, #32]
 800879a:	2301      	movs	r3, #1
 800879c:	f7fe f886 	bl	80068ac <disk_write>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <f_write+0x150>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	755a      	strb	r2, [r3, #21]
 80087ac:	2301      	movs	r3, #1
 80087ae:	e0c8      	b.n	8008942 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	7d1b      	ldrb	r3, [r3, #20]
 80087b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	4619      	mov	r1, r3
 80087c6:	4610      	mov	r0, r2
 80087c8:	f7fe fbfa 	bl	8006fc0 <clust2sect>
 80087cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d104      	bne.n	80087de <f_write+0x17e>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2202      	movs	r2, #2
 80087d8:	755a      	strb	r2, [r3, #21]
 80087da:	2302      	movs	r3, #2
 80087dc:	e0b1      	b.n	8008942 <f_write+0x2e2>
			sect += csect;
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	4413      	add	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	0a5b      	lsrs	r3, r3, #9
 80087ea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d03c      	beq.n	800886c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	4413      	add	r3, r2
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	8952      	ldrh	r2, [r2, #10]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d905      	bls.n	800880c <f_write+0x1ac>
					cc = fs->csize - csect;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	895b      	ldrh	r3, [r3, #10]
 8008804:	461a      	mov	r2, r3
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	7858      	ldrb	r0, [r3, #1]
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	69f9      	ldr	r1, [r7, #28]
 8008816:	f7fe f849 	bl	80068ac <disk_write>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <f_write+0x1ca>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	755a      	strb	r2, [r3, #21]
 8008826:	2301      	movs	r3, #1
 8008828:	e08b      	b.n	8008942 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1a      	ldr	r2, [r3, #32]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	429a      	cmp	r2, r3
 8008836:	d915      	bls.n	8008864 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6a1a      	ldr	r2, [r3, #32]
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	025b      	lsls	r3, r3, #9
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008850:	4619      	mov	r1, r3
 8008852:	f7fe f8eb 	bl	8006a2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	7d1b      	ldrb	r3, [r3, #20]
 800885a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885e:	b2da      	uxtb	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	025b      	lsls	r3, r3, #9
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800886a:	e03f      	b.n	80088ec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	429a      	cmp	r2, r3
 8008874:	d016      	beq.n	80088a4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800887e:	429a      	cmp	r2, r3
 8008880:	d210      	bcs.n	80088a4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	7858      	ldrb	r0, [r3, #1]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800888c:	2301      	movs	r3, #1
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	f7fd ffec 	bl	800686c <disk_read>
 8008894:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008896:	2b00      	cmp	r3, #0
 8008898:	d004      	beq.n	80088a4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	755a      	strb	r2, [r3, #21]
 80088a0:	2301      	movs	r3, #1
 80088a2:	e04e      	b.n	8008942 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d901      	bls.n	80088c4 <f_write+0x264>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	4413      	add	r3, r2
 80088d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d6:	69f9      	ldr	r1, [r7, #28]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe f8a7 	bl	8006a2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	7d1b      	ldrb	r3, [r3, #20]
 80088e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	4413      	add	r3, r2
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	441a      	add	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	619a      	str	r2, [r3, #24]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	429a      	cmp	r2, r3
 800890a:	bf38      	it	cc
 800890c:	461a      	movcc	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	60da      	str	r2, [r3, #12]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	441a      	add	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f47f aed4 	bne.w	80086d6 <f_write+0x76>
 800892e:	e000      	b.n	8008932 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008930:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	7d1b      	ldrb	r3, [r3, #20]
 8008936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893a:	b2da      	uxtb	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3730      	adds	r7, #48	; 0x30
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b086      	sub	sp, #24
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f107 0208 	add.w	r2, r7, #8
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff fc46 	bl	80081ec <validate>
 8008960:	4603      	mov	r3, r0
 8008962:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d168      	bne.n	8008a3c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	7d1b      	ldrb	r3, [r3, #20]
 800896e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d062      	beq.n	8008a3c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7d1b      	ldrb	r3, [r3, #20]
 800897a:	b25b      	sxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	da15      	bge.n	80089ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	7858      	ldrb	r0, [r3, #1]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1a      	ldr	r2, [r3, #32]
 800898e:	2301      	movs	r3, #1
 8008990:	f7fd ff8c 	bl	80068ac <disk_write>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <f_sync+0x54>
 800899a:	2301      	movs	r3, #1
 800899c:	e04f      	b.n	8008a3e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	7d1b      	ldrb	r3, [r3, #20]
 80089a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80089ac:	f7fd fec0 	bl	8006730 <get_fattime>
 80089b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f7fe fa64 	bl	8006e88 <move_window>
 80089c0:	4603      	mov	r3, r0
 80089c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d138      	bne.n	8008a3c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	330b      	adds	r3, #11
 80089d4:	781a      	ldrb	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	330b      	adds	r3, #11
 80089da:	f042 0220 	orr.w	r2, r2, #32
 80089de:	b2d2      	uxtb	r2, r2
 80089e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68f9      	ldr	r1, [r7, #12]
 80089ee:	f7fe ff69 	bl	80078c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f103 021c 	add.w	r2, r3, #28
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7fd ffe8 	bl	80069d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3316      	adds	r3, #22
 8008a08:	6939      	ldr	r1, [r7, #16]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd ffe2 	bl	80069d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3312      	adds	r3, #18
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fd ffc1 	bl	800699e <st_word>
					fs->wflag = 1;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe fa5d 	bl	8006ee4 <sync_fs>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7d1b      	ldrb	r3, [r3, #20]
 8008a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff ff7b 	bl	800894a <f_sync>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d118      	bne.n	8008a90 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f107 0208 	add.w	r2, r7, #8
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff fbc0 	bl	80081ec <validate>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10c      	bne.n	8008a90 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe f960 	bl	8006d40 <dec_lock>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d102      	bne.n	8008a90 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ab2:	4b1f      	ldr	r3, [pc, #124]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008ab4:	7a5b      	ldrb	r3, [r3, #9]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d131      	bne.n	8008b20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008abc:	4b1c      	ldr	r3, [pc, #112]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008abe:	7a5b      	ldrb	r3, [r3, #9]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008aca:	4b19      	ldr	r3, [pc, #100]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008acc:	7a5b      	ldrb	r3, [r3, #9]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008ada:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008adc:	7a5b      	ldrb	r3, [r3, #9]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008ae4:	4413      	add	r3, r2
 8008ae6:	79fa      	ldrb	r2, [r7, #7]
 8008ae8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008aea:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008aec:	7a5b      	ldrb	r3, [r3, #9]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	b2d1      	uxtb	r1, r2
 8008af4:	4a0e      	ldr	r2, [pc, #56]	; (8008b30 <FATFS_LinkDriverEx+0x94>)
 8008af6:	7251      	strb	r1, [r2, #9]
 8008af8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008afa:	7dbb      	ldrb	r3, [r7, #22]
 8008afc:	3330      	adds	r3, #48	; 0x30
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	3301      	adds	r3, #1
 8008b08:	223a      	movs	r2, #58	; 0x3a
 8008b0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	3302      	adds	r3, #2
 8008b10:	222f      	movs	r2, #47	; 0x2f
 8008b12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	3303      	adds	r3, #3
 8008b18:	2200      	movs	r2, #0
 8008b1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20000074 	.word	0x20000074

08008b34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b3e:	2200      	movs	r2, #0
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff ffaa 	bl	8008a9c <FATFS_LinkDriverEx>
 8008b48:	4603      	mov	r3, r0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <__libc_init_array>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4e0d      	ldr	r6, [pc, #52]	; (8008b8c <__libc_init_array+0x38>)
 8008b58:	4c0d      	ldr	r4, [pc, #52]	; (8008b90 <__libc_init_array+0x3c>)
 8008b5a:	1ba4      	subs	r4, r4, r6
 8008b5c:	10a4      	asrs	r4, r4, #2
 8008b5e:	2500      	movs	r5, #0
 8008b60:	42a5      	cmp	r5, r4
 8008b62:	d109      	bne.n	8008b78 <__libc_init_array+0x24>
 8008b64:	4e0b      	ldr	r6, [pc, #44]	; (8008b94 <__libc_init_array+0x40>)
 8008b66:	4c0c      	ldr	r4, [pc, #48]	; (8008b98 <__libc_init_array+0x44>)
 8008b68:	f000 f820 	bl	8008bac <_init>
 8008b6c:	1ba4      	subs	r4, r4, r6
 8008b6e:	10a4      	asrs	r4, r4, #2
 8008b70:	2500      	movs	r5, #0
 8008b72:	42a5      	cmp	r5, r4
 8008b74:	d105      	bne.n	8008b82 <__libc_init_array+0x2e>
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b7c:	4798      	blx	r3
 8008b7e:	3501      	adds	r5, #1
 8008b80:	e7ee      	b.n	8008b60 <__libc_init_array+0xc>
 8008b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b86:	4798      	blx	r3
 8008b88:	3501      	adds	r5, #1
 8008b8a:	e7f2      	b.n	8008b72 <__libc_init_array+0x1e>
 8008b8c:	08008f3c 	.word	0x08008f3c
 8008b90:	08008f3c 	.word	0x08008f3c
 8008b94:	08008f3c 	.word	0x08008f3c
 8008b98:	08008f40 	.word	0x08008f40

08008b9c <memset>:
 8008b9c:	4402      	add	r2, r0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d100      	bne.n	8008ba6 <memset+0xa>
 8008ba4:	4770      	bx	lr
 8008ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8008baa:	e7f9      	b.n	8008ba0 <memset+0x4>

08008bac <_init>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr

08008bb8 <_fini>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr
