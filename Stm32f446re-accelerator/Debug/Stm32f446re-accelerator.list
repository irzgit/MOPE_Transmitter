
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007594  08007594  00017594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007650  08007650  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007658  08007658  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b0  20000088  080076e8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001138  080076e8  00021138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018451  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003244  00000000  00000000  00038509  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  0003c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d54  00000000  00000000  0003d498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eec4  00000000  00000000  000611ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc810  00000000  00000000  000700b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c8c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004044  00000000  00000000  0013c93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800757c 	.word	0x0800757c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800757c 	.word	0x0800757c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
 80005b8:	f001 fa64 	bl	8001a84 <SPIWrite>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 fa5c 	bl	8001a84 <SPIWrite>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 fa54 	bl	8001a84 <SPIWrite>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 fa4c 	bl	8001a84 <SPIWrite>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
 800060c:	f001 fa5e 	bl	8001acc <BurstWrite>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080075b4 	.word	0x080075b4

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f001 fa28 	bl	8001a84 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f001 fa24 	bl	8001a84 <SPIWrite>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	080075c0 	.word	0x080075c0

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
 800065c:	f001 fa12 	bl	8001a84 <SPIWrite>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	080075c4 	.word	0x080075c4

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
 8000680:	f001 fa00 	bl	8001a84 <SPIWrite>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	080075c8 	.word	0x080075c8

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C);
	SPIWrite(LR_RegModemConfig1,0x8E);
 80006a2:	218e      	movs	r1, #142	; 0x8e
 80006a4:	201d      	movs	r0, #29
 80006a6:	f001 f9ed 	bl	8001a84 <SPIWrite>
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
 80006c8:	f001 f9dc 	bl	8001a84 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
 80006d4:	f001 f9d6 	bl	8001a84 <SPIWrite>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f001 f9c5 	bl	8001a84 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f001 f9bf 	bl	8001a84 <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	460a      	mov	r2, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	b2da      	uxtb	r2, r3
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2040      	movs	r0, #64	; 0x40
 8000732:	f001 f9a7 	bl	8001a84 <SPIWrite>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000742:	21f7      	movs	r1, #247	; 0xf7
 8000744:	2011      	movs	r0, #17
 8000746:	f001 f99d 	bl	8001a84 <SPIWrite>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4619      	mov	r1, r3
 800075c:	2022      	movs	r0, #34	; 0x22
 800075e:	f001 f991 	bl	8001a84 <SPIWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
 800077a:	f001 f983 	bl	8001a84 <SPIWrite>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4619      	mov	r1, r3
 8000794:	200d      	movs	r0, #13
 8000796:	f001 f975 	bl	8001a84 <SPIWrite>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80007a6:	2183      	movs	r1, #131	; 0x83
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 f96b 	bl	8001a84 <SPIWrite>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 f981 	bl	8001acc <BurstWrite>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007d6:	f7ff fefb 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007da:	f7ff ff01 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff06 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff19 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff2c 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff3b 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	2007      	movs	r0, #7
 80007fc:	f7ff ff48 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000800:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000804:	2101      	movs	r1, #1
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ff53 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 800080c:	2008      	movs	r0, #8
 800080e:	f7ff ff67 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000812:	f7ff fed5 	bl	80005c0 <Rf96_Standby>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1(1,0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff74 	bl	800070e <Rf96_PinOut_Di0_Di1>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000826:	f7ff fec3 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082a:	f7ff ff88 	bl	800073e <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 800082e:	201b      	movs	r0, #27
 8000830:	f7ff ff8d 	bl	800074e <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	f7ff ff98 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ffa3 	bl	8000786 <Rf96_FIFO_point>

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffac 	bl	80007b2 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800085a:	f7ff ffa2 	bl	80007a2 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <PacketToRadio>:

    return crc;
}

void PacketToRadio(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e01c      	b.n	80008ae <PacketToRadio+0x46>
	{
		for(uint8_t i=0;i<27;i++)
 8000874:	2300      	movs	r3, #0
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	e013      	b.n	80008a2 <PacketToRadio+0x3a>
		   RadioBuff[i+j*9]=packageCut[j][i];
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	79b8      	ldrb	r0, [r7, #6]
 800087e:	79bc      	ldrb	r4, [r7, #6]
 8000880:	79f9      	ldrb	r1, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	18e1      	adds	r1, r4, r3
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <PacketToRadio+0x6c>)
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	4423      	add	r3, r4
 8000894:	4403      	add	r3, r0
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <PacketToRadio+0x70>)
 800089a:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<27;i++)
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	3301      	adds	r3, #1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b1a      	cmp	r3, #26
 80008a6:	d9e8      	bls.n	800087a <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3301      	adds	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d9df      	bls.n	8000874 <PacketToRadio+0xc>
	}
	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f7ff ff58 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	f7ff ff63 	bl	8000786 <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 80008c0:	f7ff fe76 	bl	80005b0 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 80008c4:	211b      	movs	r1, #27
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <PacketToRadio+0x70>)
 80008c8:	f7ff ffbc 	bl	8000844 <Rf96_LoRaTxPacket>
	//  srtAll[0]='1';
	//  srtAll[1]='\n';
	//  HAL_UART_Transmit_IT(&huart2, srtAll,2);

}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	200000d0 	.word	0x200000d0
 80008d8:	200008b4 	.word	0x200008b4

080008dc <transmit>:


void transmit(uint8_t str[3][9])
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b087      	sub	sp, #28
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 3; i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e142      	b.n	8000b70 <transmit+0x294>
			//str[1] - длина команды в байтах
			//0x68 - команда возврата данных с акселерометра
//			if(str[i][3] == 0x84)
//			{
				// Ось Х
				xIntSum = (str[i][0] & 0x0F) * 10 + (str[i][1] >> 4); // целочисленная сумма X
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	f003 020f 	and.w	r2, r3, #15
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4619      	mov	r1, r3
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4613      	mov	r3, r2
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	4413      	add	r3, r2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	091b      	lsrs	r3, r3, #4
 8000916:	b2db      	uxtb	r3, r3
 8000918:	440b      	add	r3, r1
 800091a:	4a99      	ldr	r2, [pc, #612]	; (8000b80 <transmit+0x2a4>)
 800091c:	6013      	str	r3, [r2, #0]
				x5 = str[i][1] & 0x0F; //перевод правого бита 5го байта
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4413      	add	r3, r2
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	4a94      	ldr	r2, [pc, #592]	; (8000b84 <transmit+0x2a8>)
 8000932:	6013      	str	r3, [r2, #0]
				x60 = str[i][2] >> 4; //перевод левого бита 6го байта
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	4613      	mov	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4413      	add	r3, r2
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	4b8f      	ldr	r3, [pc, #572]	; (8000b88 <transmit+0x2ac>)
 800094a:	601a      	str	r2, [r3, #0]
				x65 = str[i][2] & 0x0F; //перевод правого бита 6го байта
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4613      	mov	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4413      	add	r3, r2
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	4a8b      	ldr	r2, [pc, #556]	; (8000b8c <transmit+0x2b0>)
 8000960:	6013      	str	r3, [r2, #0]
				sprintf(xval[i], "+%02d.%d%d;",xIntSum, x5, x60);
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4613      	mov	r3, r2
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	4a89      	ldr	r2, [pc, #548]	; (8000b90 <transmit+0x2b4>)
 800096c:	1898      	adds	r0, r3, r2
 800096e:	4b84      	ldr	r3, [pc, #528]	; (8000b80 <transmit+0x2a4>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4b84      	ldr	r3, [pc, #528]	; (8000b84 <transmit+0x2a8>)
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	4b84      	ldr	r3, [pc, #528]	; (8000b88 <transmit+0x2ac>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	460b      	mov	r3, r1
 800097e:	4985      	ldr	r1, [pc, #532]	; (8000b94 <transmit+0x2b8>)
 8000980:	f006 f9f6 	bl	8006d70 <siprintf>
				if((str[i][0] >> 4) == 0x01)
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	4613      	mov	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4413      	add	r3, r2
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	091b      	lsrs	r3, r3, #4
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b01      	cmp	r3, #1
 8000998:	d107      	bne.n	80009aa <transmit+0xce>
					xval[i][0] = '-';
 800099a:	497d      	ldr	r1, [pc, #500]	; (8000b90 <transmit+0x2b4>)
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	222d      	movs	r2, #45	; 0x2d
 80009a8:	701a      	strb	r2, [r3, #0]


				// Ось Y
				yIntSum = (str[i][3] & 0x0F) * 10 + (str[i][4] >> 4);	// целочисленная сумма Y
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4613      	mov	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	4413      	add	r3, r2
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	f003 020f 	and.w	r2, r3, #15
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4613      	mov	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	4413      	add	r3, r2
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	091b      	lsrs	r3, r3, #4
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	440b      	add	r3, r1
 80009da:	4a6f      	ldr	r2, [pc, #444]	; (8000b98 <transmit+0x2bc>)
 80009dc:	6013      	str	r3, [r2, #0]
				y8 = str[i][4] & 0x0F; //перевод правого бита 8го байта
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4613      	mov	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	4413      	add	r3, r2
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	4a6a      	ldr	r2, [pc, #424]	; (8000b9c <transmit+0x2c0>)
 80009f2:	6013      	str	r3, [r2, #0]
				y90 = str[i][5] >> 4; //перевод левого бита 9го байта
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4613      	mov	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4413      	add	r3, r2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	795b      	ldrb	r3, [r3, #5]
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <transmit+0x2c4>)
 8000a0a:	601a      	str	r2, [r3, #0]
				y95 = str[i][5] & 0x0F; //перевод правого бита 9го байта
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	4413      	add	r3, r2
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	4a61      	ldr	r2, [pc, #388]	; (8000ba4 <transmit+0x2c8>)
 8000a20:	6013      	str	r3, [r2, #0]
				sprintf(yval[i], "+%02d.%d%d;", yIntSum, y8, y90);
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4613      	mov	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ba8 <transmit+0x2cc>)
 8000a2c:	1898      	adds	r0, r3, r2
 8000a2e:	4b5a      	ldr	r3, [pc, #360]	; (8000b98 <transmit+0x2bc>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <transmit+0x2c0>)
 8000a34:	6819      	ldr	r1, [r3, #0]
 8000a36:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <transmit+0x2c4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4955      	ldr	r1, [pc, #340]	; (8000b94 <transmit+0x2b8>)
 8000a40:	f006 f996 	bl	8006d70 <siprintf>
				if((str[i][3] >> 4) == 0x01)
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	78db      	ldrb	r3, [r3, #3]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d107      	bne.n	8000a6a <transmit+0x18e>
					yval[i][0] = '-';
 8000a5a:	4953      	ldr	r1, [pc, #332]	; (8000ba8 <transmit+0x2cc>)
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	1a9b      	subs	r3, r3, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	222d      	movs	r2, #45	; 0x2d
 8000a68:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSum = (str[i][6] & 0x0F) * 10 + (str[i][7] >> 4); //целочисленная сумма Z
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4413      	add	r3, r2
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	799b      	ldrb	r3, [r3, #6]
 8000a78:	f003 020f 	and.w	r2, r3, #15
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4619      	mov	r1, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	79db      	ldrb	r3, [r3, #7]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	440b      	add	r3, r1
 8000a9a:	4a44      	ldr	r2, [pc, #272]	; (8000bac <transmit+0x2d0>)
 8000a9c:	6013      	str	r3, [r2, #0]
				z11 = str[i][7] & 0x0F; //перевод правого бита 11го байта
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	79db      	ldrb	r3, [r3, #7]
 8000aac:	f003 030f 	and.w	r3, r3, #15
 8000ab0:	4a3f      	ldr	r2, [pc, #252]	; (8000bb0 <transmit+0x2d4>)
 8000ab2:	6013      	str	r3, [r2, #0]
				z120 = str[i][8] >> 4; //перевод левого бита 12го байта
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	7a1b      	ldrb	r3, [r3, #8]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <transmit+0x2d8>)
 8000aca:	601a      	str	r2, [r3, #0]
				z125 = str[i][8] & 0x0F; //перевод правого бита 12го байта
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	7a1b      	ldrb	r3, [r3, #8]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <transmit+0x2dc>)
 8000ae0:	6013      	str	r3, [r2, #0]
				sprintf(zval[i], "+%02d.%d%d;", zIntSum, z11, z120);
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	4a34      	ldr	r2, [pc, #208]	; (8000bbc <transmit+0x2e0>)
 8000aec:	1898      	adds	r0, r3, r2
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <transmit+0x2d0>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <transmit+0x2d4>)
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <transmit+0x2d8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	460b      	mov	r3, r1
 8000afe:	4925      	ldr	r1, [pc, #148]	; (8000b94 <transmit+0x2b8>)
 8000b00:	f006 f936 	bl	8006d70 <siprintf>
				if((str[i][6] >> 4) == 0x01)
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4613      	mov	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	799b      	ldrb	r3, [r3, #6]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d107      	bne.n	8000b2a <transmit+0x24e>
					zval[i][0] = '-';
 8000b1a:	4928      	ldr	r1, [pc, #160]	; (8000bbc <transmit+0x2e0>)
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	222d      	movs	r2, #45	; 0x2d
 8000b28:	701a      	strb	r2, [r3, #0]
//			}
//		}
		sprintf(str1[i], "%s%s%s", xval[i], yval[i], zval[i]);
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00da      	lsls	r2, r3, #3
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <transmit+0x2e4>)
 8000b38:	18d0      	adds	r0, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	1a9b      	subs	r3, r3, r2
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <transmit+0x2b4>)
 8000b44:	1899      	adds	r1, r3, r2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <transmit+0x2cc>)
 8000b50:	189c      	adds	r4, r3, r2
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4613      	mov	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <transmit+0x2e0>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	4623      	mov	r3, r4
 8000b62:	460a      	mov	r2, r1
 8000b64:	4917      	ldr	r1, [pc, #92]	; (8000bc4 <transmit+0x2e8>)
 8000b66:	f006 f903 	bl	8006d70 <siprintf>
	for(int i = 0; i < 3; i++)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	f77f aeb9 	ble.w	80008ea <transmit+0xe>


	//HAL_UART_Transmit_IT(&huart2,"\n",1);


}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	200009e8 	.word	0x200009e8
 8000b84:	20000664 	.word	0x20000664
 8000b88:	20000710 	.word	0x20000710
 8000b8c:	200009f0 	.word	0x200009f0
 8000b90:	2000089c 	.word	0x2000089c
 8000b94:	08007594 	.word	0x08007594
 8000b98:	20000610 	.word	0x20000610
 8000b9c:	20000644 	.word	0x20000644
 8000ba0:	20000894 	.word	0x20000894
 8000ba4:	200006b4 	.word	0x200006b4
 8000ba8:	20000648 	.word	0x20000648
 8000bac:	20000cbc 	.word	0x20000cbc
 8000bb0:	20000898 	.word	0x20000898
 8000bb4:	20000138 	.word	0x20000138
 8000bb8:	20000660 	.word	0x20000660
 8000bbc:	200008d4 	.word	0x200008d4
 8000bc0:	20000854 	.word	0x20000854
 8000bc4:	080075a0 	.word	0x080075a0

08000bc8 <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	82fb      	strh	r3, [r7, #22]
 8000be2:	e01f      	b.n	8000c24 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000be4:	68f9      	ldr	r1, [r7, #12]
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <uint32_TO_charmass+0x70>)
 8000be8:	fba3 2301 	umull	r2, r3, r3, r1
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	1aca      	subs	r2, r1, r3
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	1e59      	subs	r1, r3, #1
 8000bfe:	8afb      	ldrh	r3, [r7, #22]
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	440b      	add	r3, r1
 8000c06:	4619      	mov	r1, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	440b      	add	r3, r1
 8000c0c:	3230      	adds	r2, #48	; 0x30
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <uint32_TO_charmass+0x70>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	3301      	adds	r3, #1
 8000c22:	82fb      	strh	r3, [r7, #22]
 8000c24:	8afa      	ldrh	r2, [r7, #22]
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3db      	bcc.n	8000be4 <uint32_TO_charmass+0x1c>

	}
}
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	cccccccd 	.word	0xcccccccd

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f002 f84b 	bl	8002cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f965 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f000 fb2f 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4e:	f000 fae7 	bl	8001220 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c52:	f000 f9d1 	bl	8000ff8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c56:	f000 fa8f 	bl	8001178 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c5a:	f000 fab7 	bl	80011cc <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000c5e:	f000 fa61 	bl	8001124 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000c62:	f005 f8e3 	bl	8005e2c <MX_FATFS_Init>
  MX_SPI3_Init();
 8000c66:	f000 f9fd 	bl	8001064 <MX_SPI3_Init>
  MX_UART5_Init();
 8000c6a:	f000 fa31 	bl	80010d0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  int kolZapis = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c



	Rf96_Lora_init();
 8000c72:	f7ff fdae 	bl	80007d2 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8000c76:	f7ff fdd0 	bl	800081a <Rf96_Lora_TX_mode>
	  BYTE readBuf[30];


	  ///////////////////////////////
	  int code;
	    code = SDCARD_Init();
 8000c7a:	f000 fd1d 	bl	80016b8 <SDCARD_Init>
 8000c7e:	6238      	str	r0, [r7, #32]


	  code = SDCARD_GetBlocksNumber(&blocksNum);
 8000c80:	488d      	ldr	r0, [pc, #564]	; (8000eb8 <main+0x27c>)
 8000c82:	f000 fe05 	bl	8001890 <SDCARD_GetBlocksNumber>
 8000c86:	6238      	str	r0, [r7, #32]





		HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8000c88:	220e      	movs	r2, #14
 8000c8a:	498c      	ldr	r1, [pc, #560]	; (8000ebc <main+0x280>)
 8000c8c:	488c      	ldr	r0, [pc, #560]	; (8000ec0 <main+0x284>)
 8000c8e:	f004 f977 	bl	8004f80 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8000c92:	220e      	movs	r2, #14
 8000c94:	498b      	ldr	r1, [pc, #556]	; (8000ec4 <main+0x288>)
 8000c96:	488c      	ldr	r0, [pc, #560]	; (8000ec8 <main+0x28c>)
 8000c98:	f004 f972 	bl	8004f80 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8000c9c:	220e      	movs	r2, #14
 8000c9e:	498b      	ldr	r1, [pc, #556]	; (8000ecc <main+0x290>)
 8000ca0:	488b      	ldr	r0, [pc, #556]	; (8000ed0 <main+0x294>)
 8000ca2:	f004 f96d 	bl	8004f80 <HAL_UART_Receive_DMA>


        //Rf96_LoRaTxPacket((char*)packageCut,27);


		PacketToRadio();
 8000ca6:	f7ff fddf 	bl	8000868 <PacketToRadio>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 8000caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cae:	4889      	ldr	r0, [pc, #548]	; (8000ed4 <main+0x298>)
 8000cb0:	f002 ff58 	bl	8003b64 <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d110      	bne.n	8000cdc <main+0xa0>
	  {
		  //Close file, don't forget this!
		  //HAL_Delay(10);
		   f_close(&fil);
 8000cba:	4887      	ldr	r0, [pc, #540]	; (8000ed8 <main+0x29c>)
 8000cbc:	f005 ffa0 	bl	8006c00 <f_close>
		  // HAL_Delay(5);
		   //De-mount drive
		  f_mount(NULL, "", 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4986      	ldr	r1, [pc, #536]	; (8000edc <main+0x2a0>)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f005 fed7 	bl	8006a78 <f_mount>
		  while(1)
		  {
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		  HAL_Delay(500);
 8000cca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cce:	f002 f877 	bl	8002dc0 <HAL_Delay>
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		  HAL_Delay(500);
 8000cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd6:	f002 f873 	bl	8002dc0 <HAL_Delay>
		  HAL_Delay(500);
 8000cda:	e7f6      	b.n	8000cca <main+0x8e>
		  }
	  }

	  if(readFlag==1)
 8000cdc:	4b80      	ldr	r3, [pc, #512]	; (8000ee0 <main+0x2a4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10d      	bne.n	8000d00 <main+0xc4>
	  {
	  	readFlag=0;
 8000ce4:	4b7e      	ldr	r3, [pc, #504]	; (8000ee0 <main+0x2a4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f002 f868 	bl	8002dc0 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 8000cf0:	4873      	ldr	r0, [pc, #460]	; (8000ec0 <main+0x284>)
 8000cf2:	f004 f9c5 	bl	8005080 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8000cf6:	220e      	movs	r2, #14
 8000cf8:	4970      	ldr	r1, [pc, #448]	; (8000ebc <main+0x280>)
 8000cfa:	4871      	ldr	r0, [pc, #452]	; (8000ec0 <main+0x284>)
 8000cfc:	f004 f940 	bl	8004f80 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag2==1)
 8000d00:	4b78      	ldr	r3, [pc, #480]	; (8000ee4 <main+0x2a8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10d      	bne.n	8000d24 <main+0xe8>
	  {
	  	readFlag2=0;
 8000d08:	4b76      	ldr	r3, [pc, #472]	; (8000ee4 <main+0x2a8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f002 f856 	bl	8002dc0 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 8000d14:	486e      	ldr	r0, [pc, #440]	; (8000ed0 <main+0x294>)
 8000d16:	f004 f9b3 	bl	8005080 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8000d1a:	220e      	movs	r2, #14
 8000d1c:	496b      	ldr	r1, [pc, #428]	; (8000ecc <main+0x290>)
 8000d1e:	486c      	ldr	r0, [pc, #432]	; (8000ed0 <main+0x294>)
 8000d20:	f004 f92e 	bl	8004f80 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag3==1)
 8000d24:	4b70      	ldr	r3, [pc, #448]	; (8000ee8 <main+0x2ac>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d10d      	bne.n	8000d48 <main+0x10c>
	  {
	  	readFlag3=0;
 8000d2c:	4b6e      	ldr	r3, [pc, #440]	; (8000ee8 <main+0x2ac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f002 f844 	bl	8002dc0 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 8000d38:	4863      	ldr	r0, [pc, #396]	; (8000ec8 <main+0x28c>)
 8000d3a:	f004 f9a1 	bl	8005080 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8000d3e:	220e      	movs	r2, #14
 8000d40:	4960      	ldr	r1, [pc, #384]	; (8000ec4 <main+0x288>)
 8000d42:	4861      	ldr	r0, [pc, #388]	; (8000ec8 <main+0x28c>)
 8000d44:	f004 f91c 	bl	8004f80 <HAL_UART_Receive_DMA>
	  }

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 8000d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4c:	4867      	ldr	r0, [pc, #412]	; (8000eec <main+0x2b0>)
 8000d4e:	f002 ff09 	bl	8003b64 <HAL_GPIO_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <main+0x120>
		{
			PacketToRadio();
 8000d58:	f7ff fd86 	bl	8000868 <PacketToRadio>
		}
		if(UsartCount==4)
 8000d5c:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <main+0x2b4>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d1a2      	bne.n	8000caa <main+0x6e>
		{

			transmit(packageCut);
 8000d64:	4863      	ldr	r0, [pc, #396]	; (8000ef4 <main+0x2b8>)
 8000d66:	f7ff fdb9 	bl	80008dc <transmit>
			//HAL_UART_Transmit_IT(&huart2, "\n",1);



			  //fres = f_write(&fil, packageCut, 27, &bytesWrote);
			  reciveTime = HAL_GetTick();
 8000d6a:	f002 f81d 	bl	8002da8 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	4b61      	ldr	r3, [pc, #388]	; (8000ef8 <main+0x2bc>)
 8000d72:	601a      	str	r2, [r3, #0]
			  uint32_TO_charmass(reciveTime, SD_Buff, 0, 8);
 8000d74:	4b60      	ldr	r3, [pc, #384]	; (8000ef8 <main+0x2bc>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	2308      	movs	r3, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	495f      	ldr	r1, [pc, #380]	; (8000efc <main+0x2c0>)
 8000d7e:	f7ff ff23 	bl	8000bc8 <uint32_TO_charmass>

			  SD_Buff[8]=';';
 8000d82:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <main+0x2c0>)
 8000d84:	223b      	movs	r2, #59	; 0x3b
 8000d86:	721a      	strb	r2, [r3, #8]
			  for(uint8_t i=0;i<21;i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000d8e:	e00d      	b.n	8000dac <main+0x170>
						  {
							  SD_Buff[i+9]=str1[0][i];
 8000d90:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d98:	3309      	adds	r3, #9
 8000d9a:	4959      	ldr	r1, [pc, #356]	; (8000f00 <main+0x2c4>)
 8000d9c:	5c89      	ldrb	r1, [r1, r2]
 8000d9e:	4a57      	ldr	r2, [pc, #348]	; (8000efc <main+0x2c0>)
 8000da0:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i=0;i<21;i++)
 8000da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000da6:	3301      	adds	r3, #1
 8000da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000dac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000db0:	2b14      	cmp	r3, #20
 8000db2:	d9ed      	bls.n	8000d90 <main+0x154>

						  }
			  for(uint8_t i=0;i<21;i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000dba:	e00e      	b.n	8000dda <main+0x19e>
						  {
							  SD_Buff[i+30]=str1[1][i];
 8000dbc:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000dc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dc4:	331e      	adds	r3, #30
 8000dc6:	494e      	ldr	r1, [pc, #312]	; (8000f00 <main+0x2c4>)
 8000dc8:	440a      	add	r2, r1
 8000dca:	7d51      	ldrb	r1, [r2, #21]
 8000dcc:	4a4b      	ldr	r2, [pc, #300]	; (8000efc <main+0x2c0>)
 8000dce:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i=0;i<21;i++)
 8000dd0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000dda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dde:	2b14      	cmp	r3, #20
 8000de0:	d9ec      	bls.n	8000dbc <main+0x180>

						  }
			  for(uint8_t i=0;i<21;i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000de8:	e00f      	b.n	8000e0a <main+0x1ce>
						  {
							  SD_Buff[i+51]=str1[2][i];
 8000dea:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000dee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000df2:	3333      	adds	r3, #51	; 0x33
 8000df4:	4942      	ldr	r1, [pc, #264]	; (8000f00 <main+0x2c4>)
 8000df6:	440a      	add	r2, r1
 8000df8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8000dfc:	4a3f      	ldr	r2, [pc, #252]	; (8000efc <main+0x2c0>)
 8000dfe:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i=0;i<21;i++)
 8000e00:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e04:	3301      	adds	r3, #1
 8000e06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e0a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e0e:	2b14      	cmp	r3, #20
 8000e10:	d9eb      	bls.n	8000dea <main+0x1ae>

						  }

			  SD_Buff[72]='\n';
 8000e12:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <main+0x2c0>)
 8000e14:	220a      	movs	r2, #10
 8000e16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48


			  if(kolZapis==7)
 8000e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1c:	2b07      	cmp	r3, #7
 8000e1e:	d11a      	bne.n	8000e56 <main+0x21a>
			  {
				  kolZapis=0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
				  block[510]=';';
 8000e24:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <main+0x2c8>)
 8000e26:	223b      	movs	r2, #59	; 0x3b
 8000e28:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				  block[511]='\n';
 8000e2c:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <main+0x2c8>)
 8000e2e:	220a      	movs	r2, #10
 8000e30:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
				  code = SDCARD_WriteSingleBlock(blockAddr++, block);
 8000e34:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <main+0x2cc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	4933      	ldr	r1, [pc, #204]	; (8000f08 <main+0x2cc>)
 8000e3c:	600a      	str	r2, [r1, #0]
 8000e3e:	4931      	ldr	r1, [pc, #196]	; (8000f04 <main+0x2c8>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fd95 	bl	8001970 <SDCARD_WriteSingleBlock>
 8000e46:	6238      	str	r0, [r7, #32]
				  memset(block, 0, sizeof(block));
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	482d      	ldr	r0, [pc, #180]	; (8000f04 <main+0x2c8>)
 8000e50:	f005 ff86 	bl	8006d60 <memset>
 8000e54:	e026      	b.n	8000ea4 <main+0x268>

			  }
			  else
			  {
				  uint8_t j=0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                  for(uint16_t i=73*kolZapis;i<73+kolZapis*73;i++)
 8000e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	00d2      	lsls	r2, r2, #3
 8000e64:	441a      	add	r2, r3
 8000e66:	00d2      	lsls	r2, r2, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e6c:	e00d      	b.n	8000e8a <main+0x24e>
                  {
                	  block[i]=SD_Buff[j++];
 8000e6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <main+0x2c0>)
 8000e7e:	5c51      	ldrb	r1, [r2, r1]
 8000e80:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <main+0x2c8>)
 8000e82:	54d1      	strb	r1, [r2, r3]
                  for(uint16_t i=73*kolZapis;i<73+kolZapis*73;i++)
 8000e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e86:	3301      	adds	r3, #1
 8000e88:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e8a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	4613      	mov	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4413      	add	r3, r2
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	dbe7      	blt.n	8000e6e <main+0x232>
                  }
                  kolZapis++;
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
						 */
					  }



			  HAL_UART_Transmit_IT(&huart2, "\n", 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4919      	ldr	r1, [pc, #100]	; (8000f0c <main+0x2d0>)
 8000ea8:	4819      	ldr	r0, [pc, #100]	; (8000f10 <main+0x2d4>)
 8000eaa:	f004 f824 	bl	8004ef6 <HAL_UART_Transmit_IT>
			//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
	//	HAL_UART_Transmit_DMA(&huart3, &accelSelect[0][0], 5);
	//	HAL_UART_Transmit_DMA(&huart1, &accelSelect[2][0], 5);
	//	HAL_UART_Transmit_DMA(&huart5, &accelSelect[1][0], 5);

		UsartCount=0;
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <main+0x2b4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 8000eb4:	e6f9      	b.n	8000caa <main+0x6e>
 8000eb6:	bf00      	nop
 8000eb8:	200008d0 	.word	0x200008d0
 8000ebc:	200000a4 	.word	0x200000a4
 8000ec0:	200003a0 	.word	0x200003a0
 8000ec4:	200000b2 	.word	0x200000b2
 8000ec8:	20000714 	.word	0x20000714
 8000ecc:	200000c0 	.word	0x200000c0
 8000ed0:	20000814 	.word	0x20000814
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	200009f4 	.word	0x200009f4
 8000edc:	080075a8 	.word	0x080075a8
 8000ee0:	200008e9 	.word	0x200008e9
 8000ee4:	200008b1 	.word	0x200008b1
 8000ee8:	2000013c 	.word	0x2000013c
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	200000f0 	.word	0x200000f0
 8000ef4:	200000d0 	.word	0x200000d0
 8000ef8:	200008ec 	.word	0x200008ec
 8000efc:	20000668 	.word	0x20000668
 8000f00:	20000854 	.word	0x20000854
 8000f04:	20000140 	.word	0x20000140
 8000f08:	200000ec 	.word	0x200000ec
 8000f0c:	080075ac 	.word	0x080075ac
 8000f10:	20000948 	.word	0x20000948

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2234      	movs	r2, #52	; 0x34
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 ff1c 	bl	8006d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <SystemClock_Config+0xdc>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <SystemClock_Config+0xdc>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <SystemClock_Config+0xdc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <SystemClock_Config+0xe0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <SystemClock_Config+0xe0>)
 8000f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <SystemClock_Config+0xe0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f84:	2308      	movs	r3, #8
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f88:	23b4      	movs	r3, #180	; 0xb4
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 f91d 	bl	80041dc <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa8:	f000 faee 	bl	8001588 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fac:	f002 fe0c 	bl	8003bc8 <HAL_PWREx_EnableOverDrive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb6:	f000 fae7 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fe45 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fe4:	f000 fad0 	bl	8001588 <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	; 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_SPI1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_SPI1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_SPI1_Init+0x64>)
 8001004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_SPI1_Init+0x64>)
 8001024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001028:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_SPI1_Init+0x64>)
 800102c:	2210      	movs	r2, #16
 800102e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_SPI1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_SPI1_Init+0x64>)
 8001044:	220a      	movs	r2, #10
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_SPI1_Init+0x64>)
 800104a:	f003 fb21 	bl	8004690 <HAL_SPI_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fa98 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200008f0 	.word	0x200008f0
 8001060:	40013000 	.word	0x40013000

08001064 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_SPI3_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <MX_SPI3_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_SPI3_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SPI3_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SPI3_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SPI3_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_SPI3_Init+0x64>)
 80010b6:	f003 faeb 	bl	8004690 <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80010c0:	f000 fa62 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200006b8 	.word	0x200006b8
 80010cc:	40003c00 	.word	0x40003c00

080010d0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_UART5_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_UART5_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_UART5_Init+0x4c>)
 80010dc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80010e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_UART5_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_UART5_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_UART5_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_UART5_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_UART5_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_UART5_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_UART5_Init+0x4c>)
 8001108:	f003 fea8 	bl	8004e5c <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 fa39 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000714 	.word	0x20000714
 8001120:	40005000 	.word	0x40005000

08001124 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_USART1_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001130:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART1_UART_Init+0x4c>)
 800115c:	f003 fe7e 	bl	8004e5c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 fa0f 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000814 	.word	0x20000814
 8001174:	40011000 	.word	0x40011000

08001178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 8001184:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART2_UART_Init+0x4c>)
 80011b0:	f003 fe54 	bl	8004e5c <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ba:	f000 f9e5 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000948 	.word	0x20000948
 80011c8:	40004400 	.word	0x40004400

080011cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART3_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011d8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80011dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 8001204:	f003 fe2a 	bl	8004e5c <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f9bb 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200003a0 	.word	0x200003a0
 800121c:	40004800 	.word	0x40004800

08001220 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_DMA_Init+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <MX_DMA_Init+0x88>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_DMA_Init+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_DMA_Init+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <MX_DMA_Init+0x88>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_DMA_Init+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200b      	movs	r0, #11
 8001264:	f001 fea9 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001268:	200b      	movs	r0, #11
 800126a:	f001 fec2 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	200c      	movs	r0, #12
 8001274:	f001 fea1 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001278:	200c      	movs	r0, #12
 800127a:	f001 feba 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2011      	movs	r0, #17
 8001284:	f001 fe99 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001288:	2011      	movs	r0, #17
 800128a:	f001 feb2 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	203a      	movs	r0, #58	; 0x3a
 8001294:	f001 fe91 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001298:	203a      	movs	r0, #58	; 0x3a
 800129a:	f001 feaa 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <MX_GPIO_Init+0x194>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a5d      	ldr	r2, [pc, #372]	; (8001440 <MX_GPIO_Init+0x194>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <MX_GPIO_Init+0x194>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <MX_GPIO_Init+0x194>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a56      	ldr	r2, [pc, #344]	; (8001440 <MX_GPIO_Init+0x194>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b54      	ldr	r3, [pc, #336]	; (8001440 <MX_GPIO_Init+0x194>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b50      	ldr	r3, [pc, #320]	; (8001440 <MX_GPIO_Init+0x194>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a4f      	ldr	r2, [pc, #316]	; (8001440 <MX_GPIO_Init+0x194>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <MX_GPIO_Init+0x194>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <MX_GPIO_Init+0x194>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a48      	ldr	r2, [pc, #288]	; (8001440 <MX_GPIO_Init+0x194>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <MX_GPIO_Init+0x194>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001338:	4842      	ldr	r0, [pc, #264]	; (8001444 <MX_GPIO_Init+0x198>)
 800133a:	f002 fc2b 	bl	8003b94 <HAL_GPIO_WritePin>
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f248 0112 	movw	r1, #32786	; 0x8012
 8001344:	4840      	ldr	r0, [pc, #256]	; (8001448 <MX_GPIO_Init+0x19c>)
 8001346:	f002 fc25 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f246 0142 	movw	r1, #24642	; 0x6042
 8001350:	483e      	ldr	r0, [pc, #248]	; (800144c <MX_GPIO_Init+0x1a0>)
 8001352:	f002 fc1f 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <MX_GPIO_Init+0x1a4>)
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4836      	ldr	r0, [pc, #216]	; (8001444 <MX_GPIO_Init+0x198>)
 800136c:	f002 fa68 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001370:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001374:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	482e      	ldr	r0, [pc, #184]	; (8001444 <MX_GPIO_Init+0x198>)
 800138a:	f002 fa59 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800138e:	f240 4301 	movw	r3, #1025	; 0x401
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4829      	ldr	r0, [pc, #164]	; (8001448 <MX_GPIO_Init+0x19c>)
 80013a4:	f002 fa4c 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 80013a8:	f248 0312 	movw	r3, #32786	; 0x8012
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <MX_GPIO_Init+0x19c>)
 80013c2:	f002 fa3d 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013c6:	2302      	movs	r3, #2
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	481b      	ldr	r0, [pc, #108]	; (800144c <MX_GPIO_Init+0x1a0>)
 80013de:	f002 fa2f 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80013e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_GPIO_Init+0x1a0>)
 80013fc:	f002 fa20 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8001400:	f244 0340 	movw	r3, #16448	; 0x4040
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_GPIO_Init+0x1a0>)
 800141a:	f002 fa11 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800141e:	2338      	movs	r3, #56	; 0x38
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_GPIO_Init+0x1a0>)
 8001432:	f002 fa05 	bl	8003840 <HAL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40020800 	.word	0x40020800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	10210000 	.word	0x10210000

08001454 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]



if(huart==&huart3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3c      	ldr	r2, [pc, #240]	; (8001550 <HAL_UART_RxCpltCallback+0xfc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d11d      	bne.n	80014a0 <HAL_UART_RxCpltCallback+0x4c>
{

if(package[0][0]!=0x68)
 8001464:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_UART_RxCpltCallback+0x100>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b68      	cmp	r3, #104	; 0x68
 800146a:	d003      	beq.n	8001474 <HAL_UART_RxCpltCallback+0x20>
{
	readFlag=1;
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_UART_RxCpltCallback+0x104>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e015      	b.n	80014a0 <HAL_UART_RxCpltCallback+0x4c>
	//HAL_UART_Abort(&huart3);

}else
{
	for(uint8_t i=0;i<9;i++)
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e009      	b.n	800148e <HAL_UART_RxCpltCallback+0x3a>
	{
		packageCut[0][i]=package[0][i+4];
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	1d1a      	adds	r2, r3, #4
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	4934      	ldr	r1, [pc, #208]	; (8001554 <HAL_UART_RxCpltCallback+0x100>)
 8001482:	5c89      	ldrb	r1, [r1, r2]
 8001484:	4a35      	ldr	r2, [pc, #212]	; (800155c <HAL_UART_RxCpltCallback+0x108>)
 8001486:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d9f2      	bls.n	800147a <HAL_UART_RxCpltCallback+0x26>
	}
	UsartCount++;
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 800149e:	701a      	strb	r2, [r3, #0]

}
}
if(huart==&huart1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_UART_RxCpltCallback+0x110>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d120      	bne.n	80014ea <HAL_UART_RxCpltCallback+0x96>
{

	if(package[2][0]!=0x68)
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_UART_RxCpltCallback+0x100>)
 80014aa:	7f1b      	ldrb	r3, [r3, #28]
 80014ac:	2b68      	cmp	r3, #104	; 0x68
 80014ae:	d003      	beq.n	80014b8 <HAL_UART_RxCpltCallback+0x64>
	{
		readFlag2=1;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_UART_RxCpltCallback+0x114>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e018      	b.n	80014ea <HAL_UART_RxCpltCallback+0x96>
		//HAL_UART_Abort(&huart3);

	}else
	{
		for(uint8_t i=0;i<9;i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	73bb      	strb	r3, [r7, #14]
 80014bc:	e00c      	b.n	80014d8 <HAL_UART_RxCpltCallback+0x84>
		{
			packageCut[2][i]=package[2][i+4];
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	1d1a      	adds	r2, r3, #4
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	4923      	ldr	r1, [pc, #140]	; (8001554 <HAL_UART_RxCpltCallback+0x100>)
 80014c6:	440a      	add	r2, r1
 80014c8:	7f11      	ldrb	r1, [r2, #28]
 80014ca:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_UART_RxCpltCallback+0x108>)
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73bb      	strb	r3, [r7, #14]
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d9ef      	bls.n	80014be <HAL_UART_RxCpltCallback+0x6a>
		}
		UsartCount++;
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 80014e8:	701a      	strb	r2, [r3, #0]
	}

}

if(huart==&huart5)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_UART_RxCpltCallback+0x118>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d120      	bne.n	8001534 <HAL_UART_RxCpltCallback+0xe0>
{

	if(package[1][0]!=0x68)
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_UART_RxCpltCallback+0x100>)
 80014f4:	7b9b      	ldrb	r3, [r3, #14]
 80014f6:	2b68      	cmp	r3, #104	; 0x68
 80014f8:	d003      	beq.n	8001502 <HAL_UART_RxCpltCallback+0xae>
	{
		readFlag3=1;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_UART_RxCpltCallback+0x11c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	e018      	b.n	8001534 <HAL_UART_RxCpltCallback+0xe0>
		//HAL_UART_Abort(&huart3);

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001502:	2300      	movs	r3, #0
 8001504:	737b      	strb	r3, [r7, #13]
 8001506:	e00c      	b.n	8001522 <HAL_UART_RxCpltCallback+0xce>
		{
			packageCut[1][i]=package[1][i+4];
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	1d1a      	adds	r2, r3, #4
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	4911      	ldr	r1, [pc, #68]	; (8001554 <HAL_UART_RxCpltCallback+0x100>)
 8001510:	440a      	add	r2, r1
 8001512:	7b91      	ldrb	r1, [r2, #14]
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_UART_RxCpltCallback+0x108>)
 8001516:	4413      	add	r3, r2
 8001518:	460a      	mov	r2, r1
 800151a:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	3301      	adds	r3, #1
 8001520:	737b      	strb	r3, [r7, #13]
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d9ef      	bls.n	8001508 <HAL_UART_RxCpltCallback+0xb4>
		}
		UsartCount++;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 8001532:	701a      	strb	r2, [r3, #0]

	}

}
if(UsartCount==3)
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d102      	bne.n	8001542 <HAL_UART_RxCpltCallback+0xee>
{
	UsartCount=4;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_UART_RxCpltCallback+0x10c>)
 800153e:	2204      	movs	r2, #4
 8001540:	701a      	strb	r2, [r3, #0]

}

}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200003a0 	.word	0x200003a0
 8001554:	200000a4 	.word	0x200000a4
 8001558:	200008e9 	.word	0x200008e9
 800155c:	200000d0 	.word	0x200000d0
 8001560:	200000f0 	.word	0x200000f0
 8001564:	20000814 	.word	0x20000814
 8001568:	200008b1 	.word	0x200008b1
 800156c:	20000714 	.word	0x20000714
 8001570:	2000013c 	.word	0x2000013c

08001574 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]


}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <SDCARD_Select+0x14>)
 80015a4:	f002 faf6 	bl	8003b94 <HAL_GPIO_WritePin>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000

080015b0 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <SDCARD_Unselect+0x14>)
 80015bc:	f002 faea 	bl	8003b94 <HAL_GPIO_WritePin>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020000 	.word	0x40020000

080015c8 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 80015d2:	1dfa      	adds	r2, r7, #7
 80015d4:	1db9      	adds	r1, r7, #6
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <SDCARD_ReadR1+0x34>)
 80015e0:	f003 f9ee 	bl	80049c0 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da00      	bge.n	80015ee <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 80015ec:	e7f1      	b.n	80015d2 <SDCARD_ReadR1+0xa>
            break;
 80015ee:	bf00      	nop
    }
    return r1;
 80015f0:	79fb      	ldrb	r3, [r7, #7]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200006b8 	.word	0x200006b8

08001600 <SDCARD_WaitDataToken>:
#define DATA_TOKEN_CMD17 0xFE
#define DATA_TOKEN_CMD18 0xFE
#define DATA_TOKEN_CMD24 0xFE
#define DATA_TOKEN_CMD25 0xFC

static int SDCARD_WaitDataToken(uint8_t token) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
    uint8_t fb;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	73bb      	strb	r3, [r7, #14]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 800160e:	f107 020f 	add.w	r2, r7, #15
 8001612:	f107 010e 	add.w	r1, r7, #14
 8001616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <SDCARD_WaitDataToken+0x44>)
 8001620:	f003 f9ce 	bl	80049c0 <HAL_SPI_TransmitReceive>
        if(fb == token)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	429a      	cmp	r2, r3
 800162a:	d005      	beq.n	8001638 <SDCARD_WaitDataToken+0x38>
            break;

        if(fb != 0xFF)
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d0ed      	beq.n	800160e <SDCARD_WaitDataToken+0xe>
            return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001636:	e001      	b.n	800163c <SDCARD_WaitDataToken+0x3c>
            break;
 8001638:	bf00      	nop
    }
    return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200006b8 	.word	0x200006b8

08001648 <SDCARD_ReadBytes>:

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8001652:	23ff      	movs	r3, #255	; 0xff
 8001654:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 8001656:	e00f      	b.n	8001678 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8001658:	f107 010f 	add.w	r1, r7, #15
 800165c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2301      	movs	r3, #1
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4808      	ldr	r0, [pc, #32]	; (8001688 <SDCARD_ReadBytes+0x40>)
 8001668:	f003 f9aa 	bl	80049c0 <HAL_SPI_TransmitReceive>
        buff++;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3301      	adds	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
        buff_size--;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ec      	bne.n	8001658 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200006b8 	.word	0x200006b8

0800168c <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	2101      	movs	r1, #1
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ffd6 	bl	8001648 <SDCARD_ReadBytes>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da02      	bge.n	80016a8 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a6:	e003      	b.n	80016b0 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	d1f1      	bne.n	8001692 <SDCARD_WaitNotBusy+0x6>

    return 0;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <SDCARD_Init>:
 
int SDCARD_Init() {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 80016be:	f7ff ff77 	bl	80015b0 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 80016c2:	23ff      	movs	r3, #255	; 0xff
 80016c4:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e00a      	b.n	80016e2 <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 80016cc:	f107 010a 	add.w	r1, r7, #10
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d4:	2201      	movs	r2, #1
 80016d6:	4868      	ldr	r0, [pc, #416]	; (8001878 <SDCARD_Init+0x1c0>)
 80016d8:	f003 f83e 	bl	8004758 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	ddf1      	ble.n	80016cc <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 80016e8:	f7ff ff56 	bl	8001598 <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80016ec:	f7ff ffce 	bl	800168c <SDCARD_WaitNotBusy>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da04      	bge.n	8001700 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 80016f6:	f7ff ff5b 	bl	80015b0 <SDCARD_Unselect>
        return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fe:	e0b6      	b.n	800186e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001704:	2206      	movs	r2, #6
 8001706:	495d      	ldr	r1, [pc, #372]	; (800187c <SDCARD_Init+0x1c4>)
 8001708:	485b      	ldr	r0, [pc, #364]	; (8001878 <SDCARD_Init+0x1c0>)
 800170a:	f003 f825 	bl	8004758 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 800170e:	f7ff ff5b 	bl	80015c8 <SDCARD_ReadR1>
 8001712:	4603      	mov	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d004      	beq.n	8001722 <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 8001718:	f7ff ff4a 	bl	80015b0 <SDCARD_Unselect>
        return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001720:	e0a5      	b.n	800186e <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001722:	f7ff ffb3 	bl	800168c <SDCARD_WaitNotBusy>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	da04      	bge.n	8001736 <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 800172c:	f7ff ff40 	bl	80015b0 <SDCARD_Unselect>
        return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001734:	e09b      	b.n	800186e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173a:	2206      	movs	r2, #6
 800173c:	4950      	ldr	r1, [pc, #320]	; (8001880 <SDCARD_Init+0x1c8>)
 800173e:	484e      	ldr	r0, [pc, #312]	; (8001878 <SDCARD_Init+0x1c0>)
 8001740:	f003 f80a 	bl	8004758 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8001744:	f7ff ff40 	bl	80015c8 <SDCARD_ReadR1>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d004      	beq.n	8001758 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 800174e:	f7ff ff2f 	bl	80015b0 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8001752:	f06f 0301 	mvn.w	r3, #1
 8001756:	e08a      	b.n	800186e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2104      	movs	r1, #4
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff73 	bl	8001648 <SDCARD_ReadBytes>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	da04      	bge.n	8001772 <SDCARD_Init+0xba>
            SDCARD_Unselect();
 8001768:	f7ff ff22 	bl	80015b0 <SDCARD_Unselect>
            return -3;
 800176c:	f06f 0302 	mvn.w	r3, #2
 8001770:	e07d      	b.n	800186e <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <SDCARD_Init+0xca>
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2baa      	cmp	r3, #170	; 0xaa
 8001780:	d004      	beq.n	800178c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8001782:	f7ff ff15 	bl	80015b0 <SDCARD_Unselect>
            return -4;
 8001786:	f06f 0303 	mvn.w	r3, #3
 800178a:	e070      	b.n	800186e <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800178c:	f7ff ff7e 	bl	800168c <SDCARD_WaitNotBusy>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	da04      	bge.n	80017a0 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 8001796:	f7ff ff0b 	bl	80015b0 <SDCARD_Unselect>
            return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179e:	e066      	b.n	800186e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a4:	2206      	movs	r2, #6
 80017a6:	4937      	ldr	r1, [pc, #220]	; (8001884 <SDCARD_Init+0x1cc>)
 80017a8:	4833      	ldr	r0, [pc, #204]	; (8001878 <SDCARD_Init+0x1c0>)
 80017aa:	f002 ffd5 	bl	8004758 <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 80017ae:	f7ff ff0b 	bl	80015c8 <SDCARD_ReadR1>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d004      	beq.n	80017c2 <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 80017b8:	f7ff fefa 	bl	80015b0 <SDCARD_Unselect>
            return -5;
 80017bc:	f06f 0304 	mvn.w	r3, #4
 80017c0:	e055      	b.n	800186e <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80017c2:	f7ff ff63 	bl	800168c <SDCARD_WaitNotBusy>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da04      	bge.n	80017d6 <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 80017cc:	f7ff fef0 	bl	80015b0 <SDCARD_Unselect>
            return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d4:	e04b      	b.n	800186e <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017da:	2206      	movs	r2, #6
 80017dc:	492a      	ldr	r1, [pc, #168]	; (8001888 <SDCARD_Init+0x1d0>)
 80017de:	4826      	ldr	r0, [pc, #152]	; (8001878 <SDCARD_Init+0x1c0>)
 80017e0:	f002 ffba 	bl	8004758 <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 80017e4:	f7ff fef0 	bl	80015c8 <SDCARD_ReadR1>
 80017e8:	4603      	mov	r3, r0
 80017ea:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 80017ec:	7afb      	ldrb	r3, [r7, #11]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d0c9      	beq.n	800178c <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 80017f8:	f7ff feda 	bl	80015b0 <SDCARD_Unselect>
            return -6;
 80017fc:	f06f 0305 	mvn.w	r3, #5
 8001800:	e035      	b.n	800186e <SDCARD_Init+0x1b6>
            break;
 8001802:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8001804:	f7ff ff42 	bl	800168c <SDCARD_WaitNotBusy>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	da04      	bge.n	8001818 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 800180e:	f7ff fecf 	bl	80015b0 <SDCARD_Unselect>
        return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001816:	e02a      	b.n	800186e <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181c:	2206      	movs	r2, #6
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <SDCARD_Init+0x1d4>)
 8001820:	4815      	ldr	r0, [pc, #84]	; (8001878 <SDCARD_Init+0x1c0>)
 8001822:	f002 ff99 	bl	8004758 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 8001826:	f7ff fecf 	bl	80015c8 <SDCARD_ReadR1>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <SDCARD_Init+0x182>
        SDCARD_Unselect();
 8001830:	f7ff febe 	bl	80015b0 <SDCARD_Unselect>
        return -7;
 8001834:	f06f 0306 	mvn.w	r3, #6
 8001838:	e019      	b.n	800186e <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 800183a:	463b      	mov	r3, r7
 800183c:	2104      	movs	r1, #4
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff02 	bl	8001648 <SDCARD_ReadBytes>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	da04      	bge.n	8001854 <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 800184a:	f7ff feb1 	bl	80015b0 <SDCARD_Unselect>
            return -8;
 800184e:	f06f 0307 	mvn.w	r3, #7
 8001852:	e00c      	b.n	800186e <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 8001854:	783b      	ldrb	r3, [r7, #0]
 8001856:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800185a:	2bc0      	cmp	r3, #192	; 0xc0
 800185c:	d004      	beq.n	8001868 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 800185e:	f7ff fea7 	bl	80015b0 <SDCARD_Unselect>
            return -9;
 8001862:	f06f 0308 	mvn.w	r3, #8
 8001866:	e002      	b.n	800186e <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 8001868:	f7ff fea2 	bl	80015b0 <SDCARD_Unselect>
    return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200006b8 	.word	0x200006b8
 800187c:	080075cc 	.word	0x080075cc
 8001880:	080075d4 	.word	0x080075d4
 8001884:	080075dc 	.word	0x080075dc
 8001888:	080075e4 	.word	0x080075e4
 800188c:	080075ec 	.word	0x080075ec

08001890 <SDCARD_GetBlocksNumber>:


int SDCARD_GetBlocksNumber(uint32_t* num) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    uint8_t csd[16];
    uint8_t crc[2];

    SDCARD_Select();
 8001898:	f7ff fe7e 	bl	8001598 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800189c:	f7ff fef6 	bl	800168c <SDCARD_WaitNotBusy>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da04      	bge.n	80018b0 <SDCARD_GetBlocksNumber+0x20>
        SDCARD_Unselect();
 80018a6:	f7ff fe83 	bl	80015b0 <SDCARD_Unselect>
        return -1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ae:	e057      	b.n	8001960 <SDCARD_GetBlocksNumber+0xd0>

    /* CMD9 (SEND_CSD) command */
    {
        static const uint8_t cmd[] =
            { 0x40 | 0x09 /* CMD9 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b4:	2206      	movs	r2, #6
 80018b6:	492c      	ldr	r1, [pc, #176]	; (8001968 <SDCARD_GetBlocksNumber+0xd8>)
 80018b8:	482c      	ldr	r0, [pc, #176]	; (800196c <SDCARD_GetBlocksNumber+0xdc>)
 80018ba:	f002 ff4d 	bl	8004758 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 80018be:	f7ff fe83 	bl	80015c8 <SDCARD_ReadR1>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <SDCARD_GetBlocksNumber+0x42>
        SDCARD_Unselect();
 80018c8:	f7ff fe72 	bl	80015b0 <SDCARD_Unselect>
        return -2;
 80018cc:	f06f 0301 	mvn.w	r3, #1
 80018d0:	e046      	b.n	8001960 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD9) < 0) {
 80018d2:	20fe      	movs	r0, #254	; 0xfe
 80018d4:	f7ff fe94 	bl	8001600 <SDCARD_WaitDataToken>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	da04      	bge.n	80018e8 <SDCARD_GetBlocksNumber+0x58>
        SDCARD_Unselect();
 80018de:	f7ff fe67 	bl	80015b0 <SDCARD_Unselect>
        return -3;
 80018e2:	f06f 0302 	mvn.w	r3, #2
 80018e6:	e03b      	b.n	8001960 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(csd, sizeof(csd)) < 0) {
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2110      	movs	r1, #16
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff feaa 	bl	8001648 <SDCARD_ReadBytes>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da04      	bge.n	8001904 <SDCARD_GetBlocksNumber+0x74>
        SDCARD_Unselect();
 80018fa:	f7ff fe59 	bl	80015b0 <SDCARD_Unselect>
        return -4;
 80018fe:	f06f 0303 	mvn.w	r3, #3
 8001902:	e02d      	b.n	8001960 <SDCARD_GetBlocksNumber+0xd0>
    }

    if(SDCARD_ReadBytes(crc, sizeof(crc)) < 0) {
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	2102      	movs	r1, #2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fe9c 	bl	8001648 <SDCARD_ReadBytes>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	da04      	bge.n	8001920 <SDCARD_GetBlocksNumber+0x90>
        SDCARD_Unselect();
 8001916:	f7ff fe4b 	bl	80015b0 <SDCARD_Unselect>
        return -5;
 800191a:	f06f 0304 	mvn.w	r3, #4
 800191e:	e01f      	b.n	8001960 <SDCARD_GetBlocksNumber+0xd0>
    }

    SDCARD_Unselect();
 8001920:	f7ff fe46 	bl	80015b0 <SDCARD_Unselect>

    // first byte is VVxxxxxxxx where VV is csd.version
    if((csd[0] & 0xC0) != 0x40) // csd.version != 1
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800192a:	2b40      	cmp	r3, #64	; 0x40
 800192c:	d002      	beq.n	8001934 <SDCARD_GetBlocksNumber+0xa4>
        return -6;
 800192e:	f06f 0305 	mvn.w	r3, #5
 8001932:	e015      	b.n	8001960 <SDCARD_GetBlocksNumber+0xd0>

    uint32_t tmp = csd[7] & 0x3F; // two bits are reserved
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193a:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[8];
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	7d3a      	ldrb	r2, [r7, #20]
 8001942:	4313      	orrs	r3, r2
 8001944:	61fb      	str	r3, [r7, #28]
    tmp = (tmp << 8) | csd[9];
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	7d7a      	ldrb	r2, [r7, #21]
 800194c:	4313      	orrs	r3, r2
 800194e:	61fb      	str	r3, [r7, #28]
    // Full volume: (C_SIZE+1)*512KByte == (C_SIZE+1)<<19
    // Block size: 512Byte == 1<<9
    // Blocks number: CARD_SIZE/BLOCK_SIZE = (C_SIZE+1)*(1<<19) / (1<<9) = (C_SIZE+1)*(1<<10)
    tmp = (tmp + 1) << 10;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3301      	adds	r3, #1
 8001954:	029b      	lsls	r3, r3, #10
 8001956:	61fb      	str	r3, [r7, #28]
    *num = tmp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	601a      	str	r2, [r3, #0]

    return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	080075f4 	.word	0x080075f4
 800196c:	200006b8 	.word	0x200006b8

08001970 <SDCARD_WriteSingleBlock>:
    SDCARD_Unselect();
    return 0;
}


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 800197a:	f7ff fe0d 	bl	8001598 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800197e:	f7ff fe85 	bl	800168c <SDCARD_WaitNotBusy>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	da04      	bge.n	8001992 <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8001988:	f7ff fe12 	bl	80015b0 <SDCARD_Unselect>
        return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001990:	e05e      	b.n	8001a50 <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 8001992:	2358      	movs	r3, #88	; 0x58
 8001994:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 800199a:	b2db      	uxtb	r3, r3
 800199c:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	74fb      	strb	r3, [r7, #19]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	753b      	strb	r3, [r7, #20]
 80019b4:	23ff      	movs	r3, #255	; 0xff
 80019b6:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80019b8:	f107 0110 	add.w	r1, r7, #16
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c0:	2206      	movs	r2, #6
 80019c2:	4825      	ldr	r0, [pc, #148]	; (8001a58 <SDCARD_WriteSingleBlock+0xe8>)
 80019c4:	f002 fec8 	bl	8004758 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 80019c8:	f7ff fdfe 	bl	80015c8 <SDCARD_ReadR1>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 80019d2:	f7ff fded 	bl	80015b0 <SDCARD_Unselect>
        return -2;
 80019d6:	f06f 0301 	mvn.w	r3, #1
 80019da:	e039      	b.n	8001a50 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 80019dc:	23fe      	movs	r3, #254	; 0xfe
 80019de:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <SDCARD_WriteSingleBlock+0xec>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 80019e6:	f107 010f 	add.w	r1, r7, #15
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ee:	2201      	movs	r2, #1
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <SDCARD_WriteSingleBlock+0xe8>)
 80019f2:	f002 feb1 	bl	8004758 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	4815      	ldr	r0, [pc, #84]	; (8001a58 <SDCARD_WriteSingleBlock+0xe8>)
 8001a02:	f002 fea9 	bl	8004758 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 8001a06:	f107 010c 	add.w	r1, r7, #12
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <SDCARD_WriteSingleBlock+0xe8>)
 8001a12:	f002 fea1 	bl	8004758 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 8001a16:	f107 030b 	add.w	r3, r7, #11
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fe13 	bl	8001648 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d004      	beq.n	8001a36 <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 8001a2c:	f7ff fdc0 	bl	80015b0 <SDCARD_Unselect>
        return -3;
 8001a30:	f06f 0302 	mvn.w	r3, #2
 8001a34:	e00c      	b.n	8001a50 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 8001a36:	f7ff fe29 	bl	800168c <SDCARD_WaitNotBusy>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da04      	bge.n	8001a4a <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 8001a40:	f7ff fdb6 	bl	80015b0 <SDCARD_Unselect>
        return -4;
 8001a44:	f06f 0303 	mvn.w	r3, #3
 8001a48:	e002      	b.n	8001a50 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 8001a4a:	f7ff fdb1 	bl	80015b0 <SDCARD_Unselect>
    return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200006b8 	.word	0x200006b8
 8001a5c:	080075b0 	.word	0x080075b0

08001a60 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8001a6a:	1df9      	adds	r1, r7, #7
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <SPICmd8bit+0x20>)
 8001a72:	f002 fe71 	bl	8004758 <HAL_SPI_Transmit>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200008f0 	.word	0x200008f0

08001a84 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	4613      	mov	r3, r2
 8001a92:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001a94:	2200      	movs	r2, #0
 8001a96:	2140      	movs	r1, #64	; 0x40
 8001a98:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <SPIWrite+0x44>)
 8001a9a:	f002 f87b 	bl	8003b94 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ffda 	bl	8001a60 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ffd6 	bl	8001a60 <SPICmd8bit>
	NSS_H();
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2140      	movs	r1, #64	; 0x40
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <SPIWrite+0x44>)
 8001aba:	f002 f86b 	bl	8003b94 <HAL_GPIO_WritePin>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020400 	.word	0x40020400

08001acc <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d922      	bls.n	8001b28 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <BurstWrite+0x64>)
 8001ae8:	f002 f854 	bl	8003b94 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ffb3 	bl	8001a60 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e009      	b.n	8001b14 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ffa9 	bl	8001a60 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	3301      	adds	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3f1      	bcc.n	8001b00 <BurstWrite+0x34>
    NSS_H();
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <BurstWrite+0x64>)
 8001b22:	f002 f837 	bl	8003b94 <HAL_GPIO_WritePin>
 8001b26:	e000      	b.n	8001b2a <BurstWrite+0x5e>
    return;
 8001b28:	bf00      	nop
  }
}
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40020400 	.word	0x40020400

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b72:	2007      	movs	r0, #7
 8001b74:	f001 fa16 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	; (8001ccc <HAL_SPI_MspInit+0x148>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12c      	bne.n	8001c00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a48      	ldr	r2, [pc, #288]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a41      	ldr	r2, [pc, #260]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bde:	23e0      	movs	r3, #224	; 0xe0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4836      	ldr	r0, [pc, #216]	; (8001cd4 <HAL_SPI_MspInit+0x150>)
 8001bfa:	f001 fe21 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bfe:	e060      	b.n	8001cc2 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_SPI_MspInit+0x154>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d15b      	bne.n	8001cc2 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_SPI_MspInit+0x14c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c6e:	2307      	movs	r3, #7
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4818      	ldr	r0, [pc, #96]	; (8001cdc <HAL_SPI_MspInit+0x158>)
 8001c7a:	f001 fde1 	bl	8003840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c90:	2306      	movs	r3, #6
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <HAL_SPI_MspInit+0x15c>)
 8001c9c:	f001 fdd0 	bl	8003840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <HAL_SPI_MspInit+0x15c>)
 8001cbe:	f001 fdbf 	bl	8003840 <HAL_GPIO_Init>
}
 8001cc2:	bf00      	nop
 8001cc4:	3730      	adds	r7, #48	; 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40013000 	.word	0x40013000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40003c00 	.word	0x40003c00
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b092      	sub	sp, #72	; 0x48
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a87      	ldr	r2, [pc, #540]	; (8001f20 <HAL_UART_MspInit+0x23c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f040 8083 	bne.w	8001e0e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d0c:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	4a84      	ldr	r2, [pc, #528]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d16:	6413      	str	r3, [r2, #64]	; 0x40
 8001d18:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d28:	4b7e      	ldr	r3, [pc, #504]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a7d      	ldr	r2, [pc, #500]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d44:	4b77      	ldr	r3, [pc, #476]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a76      	ldr	r2, [pc, #472]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b74      	ldr	r3, [pc, #464]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d76:	4619      	mov	r1, r3
 8001d78:	486b      	ldr	r0, [pc, #428]	; (8001f28 <HAL_UART_MspInit+0x244>)
 8001d7a:	f001 fd61 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d8e:	2308      	movs	r3, #8
 8001d90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d96:	4619      	mov	r1, r3
 8001d98:	4864      	ldr	r0, [pc, #400]	; (8001f2c <HAL_UART_MspInit+0x248>)
 8001d9a:	f001 fd51 	bl	8003840 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001da0:	4a64      	ldr	r2, [pc, #400]	; (8001f34 <HAL_UART_MspInit+0x250>)
 8001da2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001daa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dac:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dbe:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc0:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001dcc:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd4:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001de0:	4853      	ldr	r0, [pc, #332]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001de2:	f001 f921 	bl	8003028 <HAL_DMA_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001dec:	f7ff fbcc 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4f      	ldr	r2, [pc, #316]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
 8001df6:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <HAL_UART_MspInit+0x24c>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2035      	movs	r0, #53	; 0x35
 8001e02:	f001 f8da 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e06:	2035      	movs	r0, #53	; 0x35
 8001e08:	f001 f8f3 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e0c:	e18e      	b.n	800212c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <HAL_UART_MspInit+0x254>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f040 8099 	bne.w	8001f4c <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a40      	ldr	r2, [pc, #256]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a39      	ldr	r2, [pc, #228]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a32      	ldr	r2, [pc, #200]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_UART_MspInit+0x240>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e80:	2307      	movs	r3, #7
 8001e82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e88:	4619      	mov	r1, r3
 8001e8a:	482c      	ldr	r0, [pc, #176]	; (8001f3c <HAL_UART_MspInit+0x258>)
 8001e8c:	f001 fcd8 	bl	8003840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4825      	ldr	r0, [pc, #148]	; (8001f40 <HAL_UART_MspInit+0x25c>)
 8001eac:	f001 fcc8 	bl	8003840 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001eb2:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <HAL_UART_MspInit+0x264>)
 8001eb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001eb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ebc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ef2:	4814      	ldr	r0, [pc, #80]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001ef4:	f001 f898 	bl	8003028 <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001efe:	f7ff fb43 	bl	8001588 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001f06:	635a      	str	r2, [r3, #52]	; 0x34
 8001f08:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_UART_MspInit+0x260>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2025      	movs	r0, #37	; 0x25
 8001f14:	f001 f851 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f18:	2025      	movs	r0, #37	; 0x25
 8001f1a:	f001 f86a 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8001f1e:	e105      	b.n	800212c <HAL_UART_MspInit+0x448>
 8001f20:	40005000 	.word	0x40005000
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	20000988 	.word	0x20000988
 8001f34:	40026010 	.word	0x40026010
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	20000754 	.word	0x20000754
 8001f48:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a78      	ldr	r2, [pc, #480]	; (8002134 <HAL_UART_MspInit+0x450>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d162      	bne.n	800201c <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_UART_MspInit+0x454>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a76      	ldr	r2, [pc, #472]	; (8002138 <HAL_UART_MspInit+0x454>)
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b74      	ldr	r3, [pc, #464]	; (8002138 <HAL_UART_MspInit+0x454>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	4b70      	ldr	r3, [pc, #448]	; (8002138 <HAL_UART_MspInit+0x454>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a6f      	ldr	r2, [pc, #444]	; (8002138 <HAL_UART_MspInit+0x454>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_UART_MspInit+0x454>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f8e:	230c      	movs	r3, #12
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4864      	ldr	r0, [pc, #400]	; (800213c <HAL_UART_MspInit+0x458>)
 8001faa:	f001 fc49 	bl	8003840 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fb0:	4a64      	ldr	r2, [pc, #400]	; (8002144 <HAL_UART_MspInit+0x460>)
 8001fb2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001fb4:	4b62      	ldr	r3, [pc, #392]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fbc:	4b60      	ldr	r3, [pc, #384]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fbe:	2240      	movs	r2, #64	; 0x40
 8001fc0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc8:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fdc:	4b58      	ldr	r3, [pc, #352]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe8:	4b55      	ldr	r3, [pc, #340]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fee:	4854      	ldr	r0, [pc, #336]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8001ff0:	f001 f81a 	bl	8003028 <HAL_DMA_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8001ffa:	f7ff fac5 	bl	8001588 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4f      	ldr	r2, [pc, #316]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_UART_MspInit+0x45c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2026      	movs	r0, #38	; 0x26
 8002010:	f000 ffd3 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002014:	2026      	movs	r0, #38	; 0x26
 8002016:	f000 ffec 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 800201a:	e087      	b.n	800212c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_UART_MspInit+0x464>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f040 8082 	bne.w	800212c <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_UART_MspInit+0x454>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a41      	ldr	r2, [pc, #260]	; (8002138 <HAL_UART_MspInit+0x454>)
 8002032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <HAL_UART_MspInit+0x454>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_UART_MspInit+0x454>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_UART_MspInit+0x454>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_UART_MspInit+0x454>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_UART_MspInit+0x454>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	4a33      	ldr	r2, [pc, #204]	; (8002138 <HAL_UART_MspInit+0x454>)
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	6313      	str	r3, [r2, #48]	; 0x30
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_UART_MspInit+0x454>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800207c:	2320      	movs	r3, #32
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800208c:	2307      	movs	r3, #7
 800208e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002090:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002094:	4619      	mov	r1, r3
 8002096:	482d      	ldr	r0, [pc, #180]	; (800214c <HAL_UART_MspInit+0x468>)
 8002098:	f001 fbd2 	bl	8003840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800209c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ae:	2307      	movs	r3, #7
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b6:	4619      	mov	r1, r3
 80020b8:	4825      	ldr	r0, [pc, #148]	; (8002150 <HAL_UART_MspInit+0x46c>)
 80020ba:	f001 fbc1 	bl	8003840 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <HAL_UART_MspInit+0x474>)
 80020c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_UART_MspInit+0x470>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002100:	4814      	ldr	r0, [pc, #80]	; (8002154 <HAL_UART_MspInit+0x470>)
 8002102:	f000 ff91 	bl	8003028 <HAL_DMA_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 800210c:	f7ff fa3c 	bl	8001588 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_UART_MspInit+0x470>)
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
 8002116:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <HAL_UART_MspInit+0x470>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2027      	movs	r0, #39	; 0x27
 8002122:	f000 ff4a 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002126:	2027      	movs	r0, #39	; 0x27
 8002128:	f000 ff63 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 800212c:	bf00      	nop
 800212e:	3748      	adds	r7, #72	; 0x48
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40004400 	.word	0x40004400
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000
 8002140:	200007b4 	.word	0x200007b4
 8002144:	400260a0 	.word	0x400260a0
 8002148:	40004800 	.word	0x40004800
 800214c:	40020800 	.word	0x40020800
 8002150:	40020400 	.word	0x40020400
 8002154:	20000340 	.word	0x20000340
 8002158:	40026028 	.word	0x40026028

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b0:	f000 fde6 	bl	8002d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA1_Stream0_IRQHandler+0x10>)
 80021be:	f001 f8cb 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000988 	.word	0x20000988

080021cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <DMA1_Stream1_IRQHandler+0x10>)
 80021d2:	f001 f8c1 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000340 	.word	0x20000340

080021e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA1_Stream6_IRQHandler+0x10>)
 80021e6:	f001 f8b7 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200007b4 	.word	0x200007b4

080021f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <USART1_IRQHandler+0x10>)
 80021fa:	f002 ffc3 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000814 	.word	0x20000814

08002208 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <USART2_IRQHandler+0x10>)
 800220e:	f002 ffb9 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000948 	.word	0x20000948

0800221c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <USART3_IRQHandler+0x10>)
 8002222:	f002 ffaf 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200003a0 	.word	0x200003a0

08002230 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <UART5_IRQHandler+0x10>)
 8002236:	f002 ffa5 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000714 	.word	0x20000714

08002244 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <DMA2_Stream2_IRQHandler+0x10>)
 800224a:	f001 f885 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000754 	.word	0x20000754

08002258 <_sbrk>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <_sbrk+0x50>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <_sbrk+0x16>
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <_sbrk+0x50>)
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <_sbrk+0x54>)
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <_sbrk+0x50>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <_sbrk+0x50>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	466a      	mov	r2, sp
 800227e:	4293      	cmp	r3, r2
 8002280:	d907      	bls.n	8002292 <_sbrk+0x3a>
 8002282:	f004 fd43 	bl	8006d0c <__errno>
 8002286:	4602      	mov	r2, r0
 8002288:	230c      	movs	r3, #12
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002290:	e006      	b.n	80022a0 <_sbrk+0x48>
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <_sbrk+0x50>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <_sbrk+0x50>)
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200000f4 	.word	0x200000f4
 80022ac:	20001138 	.word	0x20001138

080022b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <SystemInit+0x28>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <SystemInit+0x28>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SystemInit+0x28>)
 80022c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ca:	609a      	str	r2, [r3, #8]
#endif
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80022e4:	f000 fd60 	bl	8002da8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SPI_Timer_On+0x20>)
 80022ec:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80022ee:	4a04      	ldr	r2, [pc, #16]	; (8002300 <SPI_Timer_On+0x24>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000cc0 	.word	0x20000cc0
 8002300:	20000cc4 	.word	0x20000cc4

08002304 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002308:	f000 fd4e 	bl	8002da8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <SPI_Timer_Status+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <SPI_Timer_Status+0x28>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	bf34      	ite	cc
 800231c:	2301      	movcc	r3, #1
 800231e:	2300      	movcs	r3, #0
 8002320:	b2db      	uxtb	r3, r3
}
 8002322:	4618      	mov	r0, r3
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000cc0 	.word	0x20000cc0
 800232c:	20000cc4 	.word	0x20000cc4

08002330 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 800233a:	f107 020f 	add.w	r2, r7, #15
 800233e:	1df9      	adds	r1, r7, #7
 8002340:	2332      	movs	r3, #50	; 0x32
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <xchg_spi+0x28>)
 8002348:	f002 fb3a 	bl	80049c0 <HAL_SPI_TransmitReceive>
    return rxDat;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200006b8 	.word	0x200006b8

0800235c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e00a      	b.n	8002382 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	18d4      	adds	r4, r2, r3
 8002372:	20ff      	movs	r0, #255	; 0xff
 8002374:	f7ff ffdc 	bl	8002330 <xchg_spi>
 8002378:	4603      	mov	r3, r0
 800237a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3301      	adds	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d3f0      	bcc.n	800236c <rcvr_spi_multi+0x10>
	}
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}

08002392 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e009      	b.n	80023b6 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ffc0 	bl	8002330 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d3f1      	bcc.n	80023a2 <xmit_spi_multi+0x10>
	}
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80023ce:	f000 fceb 	bl	8002da8 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80023d8:	20ff      	movs	r0, #255	; 0xff
 80023da:	f7ff ffa9 	bl	8002330 <xchg_spi>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2bff      	cmp	r3, #255	; 0xff
 80023e6:	d007      	beq.n	80023f8 <wait_ready+0x32>
 80023e8:	f000 fcde 	bl	8002da8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8ef      	bhi.n	80023d8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002416:	4804      	ldr	r0, [pc, #16]	; (8002428 <despiselect+0x1c>)
 8002418:	f001 fbbc 	bl	8003b94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800241c:	20ff      	movs	r0, #255	; 0xff
 800241e:	f7ff ff87 	bl	8002330 <xchg_spi>

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40020000 	.word	0x40020000

0800242c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002436:	480a      	ldr	r0, [pc, #40]	; (8002460 <spiselect+0x34>)
 8002438:	f001 fbac 	bl	8003b94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800243c:	20ff      	movs	r0, #255	; 0xff
 800243e:	f7ff ff77 	bl	8002330 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002446:	f7ff ffbe 	bl	80023c6 <wait_ready>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <spiselect+0x28>
 8002450:	2301      	movs	r3, #1
 8002452:	e002      	b.n	800245a <spiselect+0x2e>

	despiselect();
 8002454:	f7ff ffda 	bl	800240c <despiselect>
	return 0;	/* Timeout */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40020000 	.word	0x40020000

08002464 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800246e:	20c8      	movs	r0, #200	; 0xc8
 8002470:	f7ff ff34 	bl	80022dc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002474:	20ff      	movs	r0, #255	; 0xff
 8002476:	f7ff ff5b 	bl	8002330 <xchg_spi>
 800247a:	4603      	mov	r3, r0
 800247c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2bff      	cmp	r3, #255	; 0xff
 8002482:	d104      	bne.n	800248e <rcvr_datablock+0x2a>
 8002484:	f7ff ff3e 	bl	8002304 <SPI_Timer_Status>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f2      	bne.n	8002474 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2bfe      	cmp	r3, #254	; 0xfe
 8002492:	d001      	beq.n	8002498 <rcvr_datablock+0x34>
 8002494:	2300      	movs	r3, #0
 8002496:	e00a      	b.n	80024ae <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff5e 	bl	800235c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80024a0:	20ff      	movs	r0, #255	; 0xff
 80024a2:	f7ff ff45 	bl	8002330 <xchg_spi>
 80024a6:	20ff      	movs	r0, #255	; 0xff
 80024a8:	f7ff ff42 	bl	8002330 <xchg_spi>

	return 1;						/* Function succeeded */
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80024c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c6:	f7ff ff7e 	bl	80023c6 <wait_ready>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <xmit_datablock+0x1e>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e01e      	b.n	8002512 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff2a 	bl	8002330 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	2bfd      	cmp	r3, #253	; 0xfd
 80024e0:	d016      	beq.n	8002510 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80024e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff53 	bl	8002392 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80024ec:	20ff      	movs	r0, #255	; 0xff
 80024ee:	f7ff ff1f 	bl	8002330 <xchg_spi>
 80024f2:	20ff      	movs	r0, #255	; 0xff
 80024f4:	f7ff ff1c 	bl	8002330 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80024f8:	20ff      	movs	r0, #255	; 0xff
 80024fa:	f7ff ff19 	bl	8002330 <xchg_spi>
 80024fe:	4603      	mov	r3, r0
 8002500:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b05      	cmp	r3, #5
 800250a:	d001      	beq.n	8002510 <xmit_datablock+0x5a>
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <xmit_datablock+0x5c>
	}
	return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	6039      	str	r1, [r7, #0]
 8002524:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da0e      	bge.n	800254c <send_cmd+0x32>
		cmd &= 0x7F;
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002534:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002536:	2100      	movs	r1, #0
 8002538:	2037      	movs	r0, #55	; 0x37
 800253a:	f7ff ffee 	bl	800251a <send_cmd>
 800253e:	4603      	mov	r3, r0
 8002540:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d901      	bls.n	800254c <send_cmd+0x32>
 8002548:	7bbb      	ldrb	r3, [r7, #14]
 800254a:	e051      	b.n	80025f0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d008      	beq.n	8002564 <send_cmd+0x4a>
		despiselect();
 8002552:	f7ff ff5b 	bl	800240c <despiselect>
		if (!spiselect()) return 0xFF;
 8002556:	f7ff ff69 	bl	800242c <spiselect>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <send_cmd+0x4a>
 8002560:	23ff      	movs	r3, #255	; 0xff
 8002562:	e045      	b.n	80025f0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fedf 	bl	8002330 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	0e1b      	lsrs	r3, r3, #24
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fed9 	bl	8002330 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fed3 	bl	8002330 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fecd 	bl	8002330 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fec8 	bl	8002330 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <send_cmd+0x94>
 80025aa:	2395      	movs	r3, #149	; 0x95
 80025ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d101      	bne.n	80025b8 <send_cmd+0x9e>
 80025b4:	2387      	movs	r3, #135	; 0x87
 80025b6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff feb8 	bl	8002330 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d102      	bne.n	80025cc <send_cmd+0xb2>
 80025c6:	20ff      	movs	r0, #255	; 0xff
 80025c8:	f7ff feb2 	bl	8002330 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80025cc:	230a      	movs	r3, #10
 80025ce:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80025d0:	20ff      	movs	r0, #255	; 0xff
 80025d2:	f7ff fead 	bl	8002330 <xchg_spi>
 80025d6:	4603      	mov	r3, r0
 80025d8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80025da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da05      	bge.n	80025ee <send_cmd+0xd4>
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <USER_SPI_initialize+0x14>
 8002608:	2301      	movs	r3, #1
 800260a:	e0cb      	b.n	80027a4 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800260c:	4b67      	ldr	r3, [pc, #412]	; (80027ac <USER_SPI_initialize+0x1b4>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <USER_SPI_initialize+0x2a>
 800261a:	4b64      	ldr	r3, [pc, #400]	; (80027ac <USER_SPI_initialize+0x1b4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e0c0      	b.n	80027a4 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <USER_SPI_initialize+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262a:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800262c:	230a      	movs	r3, #10
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e005      	b.n	800263e <USER_SPI_initialize+0x46>
 8002632:	20ff      	movs	r0, #255	; 0xff
 8002634:	f7ff fe7c 	bl	8002330 <xchg_spi>
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3b01      	subs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f6      	bne.n	8002632 <USER_SPI_initialize+0x3a>

	ty = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002648:	2100      	movs	r1, #0
 800264a:	2000      	movs	r0, #0
 800264c:	f7ff ff65 	bl	800251a <send_cmd>
 8002650:	4603      	mov	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 808b 	bne.w	800276e <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800265c:	f7ff fe3e 	bl	80022dc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002660:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002664:	2008      	movs	r0, #8
 8002666:	f7ff ff58 	bl	800251a <send_cmd>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d151      	bne.n	8002714 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e00d      	b.n	8002692 <USER_SPI_initialize+0x9a>
 8002676:	7bfc      	ldrb	r4, [r7, #15]
 8002678:	20ff      	movs	r0, #255	; 0xff
 800267a:	f7ff fe59 	bl	8002330 <xchg_spi>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	4423      	add	r3, r4
 8002688:	f803 2c08 	strb.w	r2, [r3, #-8]
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	3301      	adds	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d9ee      	bls.n	8002676 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002698:	7abb      	ldrb	r3, [r7, #10]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d167      	bne.n	800276e <USER_SPI_initialize+0x176>
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	2baa      	cmp	r3, #170	; 0xaa
 80026a2:	d164      	bne.n	800276e <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80026a4:	bf00      	nop
 80026a6:	f7ff fe2d 	bl	8002304 <SPI_Timer_Status>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <USER_SPI_initialize+0xc8>
 80026b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026b4:	20a9      	movs	r0, #169	; 0xa9
 80026b6:	f7ff ff30 	bl	800251a <send_cmd>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f2      	bne.n	80026a6 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80026c0:	f7ff fe20 	bl	8002304 <SPI_Timer_Status>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d051      	beq.n	800276e <USER_SPI_initialize+0x176>
 80026ca:	2100      	movs	r1, #0
 80026cc:	203a      	movs	r0, #58	; 0x3a
 80026ce:	f7ff ff24 	bl	800251a <send_cmd>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d14a      	bne.n	800276e <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e00d      	b.n	80026fa <USER_SPI_initialize+0x102>
 80026de:	7bfc      	ldrb	r4, [r7, #15]
 80026e0:	20ff      	movs	r0, #255	; 0xff
 80026e2:	f7ff fe25 	bl	8002330 <xchg_spi>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	4423      	add	r3, r4
 80026f0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	3301      	adds	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d9ee      	bls.n	80026de <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002700:	7a3b      	ldrb	r3, [r7, #8]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <USER_SPI_initialize+0x116>
 800270a:	230c      	movs	r3, #12
 800270c:	e000      	b.n	8002710 <USER_SPI_initialize+0x118>
 800270e:	2304      	movs	r3, #4
 8002710:	737b      	strb	r3, [r7, #13]
 8002712:	e02c      	b.n	800276e <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002714:	2100      	movs	r1, #0
 8002716:	20a9      	movs	r0, #169	; 0xa9
 8002718:	f7ff feff 	bl	800251a <send_cmd>
 800271c:	4603      	mov	r3, r0
 800271e:	2b01      	cmp	r3, #1
 8002720:	d804      	bhi.n	800272c <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002722:	2302      	movs	r3, #2
 8002724:	737b      	strb	r3, [r7, #13]
 8002726:	23a9      	movs	r3, #169	; 0xa9
 8002728:	73bb      	strb	r3, [r7, #14]
 800272a:	e003      	b.n	8002734 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800272c:	2301      	movs	r3, #1
 800272e:	737b      	strb	r3, [r7, #13]
 8002730:	2301      	movs	r3, #1
 8002732:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002734:	bf00      	nop
 8002736:	f7ff fde5 	bl	8002304 <SPI_Timer_Status>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <USER_SPI_initialize+0x158>
 8002740:	7bbb      	ldrb	r3, [r7, #14]
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fee8 	bl	800251a <send_cmd>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f2      	bne.n	8002736 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002750:	f7ff fdd8 	bl	8002304 <SPI_Timer_Status>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <USER_SPI_initialize+0x172>
 800275a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275e:	2010      	movs	r0, #16
 8002760:	f7ff fedb 	bl	800251a <send_cmd>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <USER_SPI_initialize+0x176>
				ty = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800276e:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <USER_SPI_initialize+0x1bc>)
 8002770:	7b7b      	ldrb	r3, [r7, #13]
 8002772:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002774:	f7ff fe4a 	bl	800240c <despiselect>

	if (ty) {			/* OK */
 8002778:	7b7b      	ldrb	r3, [r7, #13]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <USER_SPI_initialize+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <USER_SPI_initialize+0x1b4>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <USER_SPI_initialize+0x1b4>)
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e002      	b.n	800279e <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <USER_SPI_initialize+0x1b4>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800279e:	4b03      	ldr	r3, [pc, #12]	; (80027ac <USER_SPI_initialize+0x1b4>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b2db      	uxtb	r3, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	20000004 	.word	0x20000004
 80027b0:	200006b8 	.word	0x200006b8
 80027b4:	200000f8 	.word	0x200000f8

080027b8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <USER_SPI_status+0x14>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e002      	b.n	80027d2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <USER_SPI_status+0x28>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000004 	.word	0x20000004

080027e4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <USER_SPI_read+0x1c>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <USER_SPI_read+0x20>
 8002800:	2304      	movs	r3, #4
 8002802:	e04d      	b.n	80028a0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <USER_SPI_read+0xc4>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <USER_SPI_read+0x32>
 8002812:	2303      	movs	r3, #3
 8002814:	e044      	b.n	80028a0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <USER_SPI_read+0xc8>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <USER_SPI_read+0x44>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	025b      	lsls	r3, r3, #9
 8002826:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d111      	bne.n	8002852 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	2011      	movs	r0, #17
 8002832:	f7ff fe72 	bl	800251a <send_cmd>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d129      	bne.n	8002890 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800283c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002840:	68b8      	ldr	r0, [r7, #8]
 8002842:	f7ff fe0f 	bl	8002464 <rcvr_datablock>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d021      	beq.n	8002890 <USER_SPI_read+0xac>
			count = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	e01e      	b.n	8002890 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	2012      	movs	r0, #18
 8002856:	f7ff fe60 	bl	800251a <send_cmd>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d117      	bne.n	8002890 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002864:	68b8      	ldr	r0, [r7, #8]
 8002866:	f7ff fdfd 	bl	8002464 <rcvr_datablock>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <USER_SPI_read+0xa2>
				buff += 512;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002876:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ed      	bne.n	8002860 <USER_SPI_read+0x7c>
 8002884:	e000      	b.n	8002888 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002886:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002888:	2100      	movs	r1, #0
 800288a:	200c      	movs	r0, #12
 800288c:	f7ff fe45 	bl	800251a <send_cmd>
		}
	}
	despiselect();
 8002890:	f7ff fdbc 	bl	800240c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2db      	uxtb	r3, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000004 	.word	0x20000004
 80028ac:	200000f8 	.word	0x200000f8

080028b0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <USER_SPI_write+0x1c>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <USER_SPI_write+0x20>
 80028cc:	2304      	movs	r3, #4
 80028ce:	e063      	b.n	8002998 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <USER_SPI_write+0xf0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <USER_SPI_write+0x32>
 80028de:	2303      	movs	r3, #3
 80028e0:	e05a      	b.n	8002998 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <USER_SPI_write+0xf0>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <USER_SPI_write+0x44>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e051      	b.n	8002998 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <USER_SPI_write+0xf4>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <USER_SPI_write+0x56>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	025b      	lsls	r3, r3, #9
 8002904:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d110      	bne.n	800292e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	2018      	movs	r0, #24
 8002910:	f7ff fe03 	bl	800251a <send_cmd>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d136      	bne.n	8002988 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800291a:	21fe      	movs	r1, #254	; 0xfe
 800291c:	68b8      	ldr	r0, [r7, #8]
 800291e:	f7ff fdca 	bl	80024b6 <xmit_datablock>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02f      	beq.n	8002988 <USER_SPI_write+0xd8>
			count = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	e02c      	b.n	8002988 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <USER_SPI_write+0xf4>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f003 0306 	and.w	r3, r3, #6
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <USER_SPI_write+0x92>
 800293a:	6839      	ldr	r1, [r7, #0]
 800293c:	2097      	movs	r0, #151	; 0x97
 800293e:	f7ff fdec 	bl	800251a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	2019      	movs	r0, #25
 8002946:	f7ff fde8 	bl	800251a <send_cmd>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11b      	bne.n	8002988 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002950:	21fc      	movs	r1, #252	; 0xfc
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	f7ff fdaf 	bl	80024b6 <xmit_datablock>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <USER_SPI_write+0xc4>
				buff += 512;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002964:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <USER_SPI_write+0xa0>
 8002972:	e000      	b.n	8002976 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002974:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002976:	21fd      	movs	r1, #253	; 0xfd
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fd9c 	bl	80024b6 <xmit_datablock>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <USER_SPI_write+0xd8>
 8002984:	2301      	movs	r3, #1
 8002986:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002988:	f7ff fd40 	bl	800240c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000004 	.word	0x20000004
 80029a4:	200000f8 	.word	0x200000f8

080029a8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	603a      	str	r2, [r7, #0]
 80029b2:	71fb      	strb	r3, [r7, #7]
 80029b4:	460b      	mov	r3, r1
 80029b6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <USER_SPI_ioctl+0x1a>
 80029be:	2304      	movs	r3, #4
 80029c0:	e15a      	b.n	8002c78 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80029c2:	4baf      	ldr	r3, [pc, #700]	; (8002c80 <USER_SPI_ioctl+0x2d8>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <USER_SPI_ioctl+0x2c>
 80029d0:	2303      	movs	r3, #3
 80029d2:	e151      	b.n	8002c78 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	f200 8136 	bhi.w	8002c4e <USER_SPI_ioctl+0x2a6>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <USER_SPI_ioctl+0x40>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029fd 	.word	0x080029fd
 80029ec:	08002a11 	.word	0x08002a11
 80029f0:	08002c4f 	.word	0x08002c4f
 80029f4:	08002abd 	.word	0x08002abd
 80029f8:	08002bb3 	.word	0x08002bb3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80029fc:	f7ff fd16 	bl	800242c <spiselect>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8127 	beq.w	8002c56 <USER_SPI_ioctl+0x2ae>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002a0e:	e122      	b.n	8002c56 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002a10:	2100      	movs	r1, #0
 8002a12:	2009      	movs	r0, #9
 8002a14:	f7ff fd81 	bl	800251a <send_cmd>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 811d 	bne.w	8002c5a <USER_SPI_ioctl+0x2b2>
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2110      	movs	r1, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fd1c 	bl	8002464 <rcvr_datablock>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8113 	beq.w	8002c5a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002a34:	7b3b      	ldrb	r3, [r7, #12]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d111      	bne.n	8002a62 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002a3e:	7d7b      	ldrb	r3, [r7, #21]
 8002a40:	461a      	mov	r2, r3
 8002a42:	7d3b      	ldrb	r3, [r7, #20]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	4413      	add	r3, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002a52:	4413      	add	r3, r2
 8002a54:	3301      	adds	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	029a      	lsls	r2, r3, #10
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e028      	b.n	8002ab4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002a62:	7c7b      	ldrb	r3, [r7, #17]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	7dbb      	ldrb	r3, [r7, #22]
 8002a6c:	09db      	lsrs	r3, r3, #7
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	7d7b      	ldrb	r3, [r7, #21]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 0306 	and.w	r3, r3, #6
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3302      	adds	r3, #2
 8002a86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002a8a:	7d3b      	ldrb	r3, [r7, #20]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	441a      	add	r2, r3
 8002a98:	7cbb      	ldrb	r3, [r7, #18]
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002aaa:	3b09      	subs	r3, #9
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002aba:	e0ce      	b.n	8002c5a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002abc:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <USER_SPI_ioctl+0x2dc>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d031      	beq.n	8002b2c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002ac8:	2100      	movs	r1, #0
 8002aca:	208d      	movs	r0, #141	; 0x8d
 8002acc:	f7ff fd25 	bl	800251a <send_cmd>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80c3 	bne.w	8002c5e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002ad8:	20ff      	movs	r0, #255	; 0xff
 8002ada:	f7ff fc29 	bl	8002330 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fcbd 	bl	8002464 <rcvr_datablock>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80b6 	beq.w	8002c5e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002af2:	2330      	movs	r3, #48	; 0x30
 8002af4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002af8:	e007      	b.n	8002b0a <USER_SPI_ioctl+0x162>
 8002afa:	20ff      	movs	r0, #255	; 0xff
 8002afc:	f7ff fc18 	bl	8002330 <xchg_spi>
 8002b00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b04:	3b01      	subs	r3, #1
 8002b06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002b0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f3      	bne.n	8002afa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002b12:	7dbb      	ldrb	r3, [r7, #22]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	fa03 f202 	lsl.w	r2, r3, r2
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002b2a:	e098      	b.n	8002c5e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2009      	movs	r0, #9
 8002b30:	f7ff fcf3 	bl	800251a <send_cmd>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 8091 	bne.w	8002c5e <USER_SPI_ioctl+0x2b6>
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	2110      	movs	r1, #16
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fc8e 	bl	8002464 <rcvr_datablock>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <USER_SPI_ioctl+0x2dc>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d012      	beq.n	8002b82 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002b5c:	7dbb      	ldrb	r3, [r7, #22]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002b64:	7dfa      	ldrb	r2, [r7, #23]
 8002b66:	09d2      	lsrs	r2, r2, #7
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	7e7b      	ldrb	r3, [r7, #25]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e013      	b.n	8002baa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002b82:	7dbb      	ldrb	r3, [r7, #22]
 8002b84:	109b      	asrs	r3, r3, #2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	7dfa      	ldrb	r2, [r7, #23]
 8002b90:	00d2      	lsls	r2, r2, #3
 8002b92:	f002 0218 	and.w	r2, r2, #24
 8002b96:	7df9      	ldrb	r1, [r7, #23]
 8002b98:	0949      	lsrs	r1, r1, #5
 8002b9a:	b2c9      	uxtb	r1, r1
 8002b9c:	440a      	add	r2, r1
 8002b9e:	3201      	adds	r2, #1
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002bb0:	e055      	b.n	8002c5e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <USER_SPI_ioctl+0x2dc>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f003 0306 	and.w	r3, r3, #6
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d051      	beq.n	8002c62 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002bbe:	f107 020c 	add.w	r2, r7, #12
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	210b      	movs	r1, #11
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff feee 	bl	80029a8 <USER_SPI_ioctl>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d149      	bne.n	8002c66 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002bd2:	7b3b      	ldrb	r3, [r7, #12]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <USER_SPI_ioctl+0x23e>
 8002bdc:	7dbb      	ldrb	r3, [r7, #22]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d041      	beq.n	8002c6a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <USER_SPI_ioctl+0x2dc>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	025b      	lsls	r3, r3, #9
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c10:	2020      	movs	r0, #32
 8002c12:	f7ff fc82 	bl	800251a <send_cmd>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d128      	bne.n	8002c6e <USER_SPI_ioctl+0x2c6>
 8002c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1e:	2021      	movs	r0, #33	; 0x21
 8002c20:	f7ff fc7b 	bl	800251a <send_cmd>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <USER_SPI_ioctl+0x2c6>
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	2026      	movs	r0, #38	; 0x26
 8002c2e:	f7ff fc74 	bl	800251a <send_cmd>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11a      	bne.n	8002c6e <USER_SPI_ioctl+0x2c6>
 8002c38:	f247 5030 	movw	r0, #30000	; 0x7530
 8002c3c:	f7ff fbc3 	bl	80023c6 <wait_ready>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002c4c:	e00f      	b.n	8002c6e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002c54:	e00c      	b.n	8002c70 <USER_SPI_ioctl+0x2c8>
		break;
 8002c56:	bf00      	nop
 8002c58:	e00a      	b.n	8002c70 <USER_SPI_ioctl+0x2c8>
		break;
 8002c5a:	bf00      	nop
 8002c5c:	e008      	b.n	8002c70 <USER_SPI_ioctl+0x2c8>
		break;
 8002c5e:	bf00      	nop
 8002c60:	e006      	b.n	8002c70 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002c62:	bf00      	nop
 8002c64:	e004      	b.n	8002c70 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <USER_SPI_ioctl+0x2c8>
		break;
 8002c6e:	bf00      	nop
	}

	despiselect();
 8002c70:	f7ff fbcc 	bl	800240c <despiselect>

	return res;
 8002c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3730      	adds	r7, #48	; 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000004 	.word	0x20000004
 8002c84:	200000f8 	.word	0x200000f8

08002c88 <Reset_Handler>:
 8002c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc0 <LoopFillZerobss+0x14>
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	e003      	b.n	8002c98 <LoopCopyDataInit>

08002c90 <CopyDataInit>:
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <LoopFillZerobss+0x18>)
 8002c92:	585b      	ldr	r3, [r3, r1]
 8002c94:	5043      	str	r3, [r0, r1]
 8002c96:	3104      	adds	r1, #4

08002c98 <LoopCopyDataInit>:
 8002c98:	480b      	ldr	r0, [pc, #44]	; (8002cc8 <LoopFillZerobss+0x1c>)
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <LoopFillZerobss+0x20>)
 8002c9c:	1842      	adds	r2, r0, r1
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3f6      	bcc.n	8002c90 <CopyDataInit>
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <LoopFillZerobss+0x24>)
 8002ca4:	e002      	b.n	8002cac <LoopFillZerobss>

08002ca6 <FillZerobss>:
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f842 3b04 	str.w	r3, [r2], #4

08002cac <LoopFillZerobss>:
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <LoopFillZerobss+0x28>)
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d3f9      	bcc.n	8002ca6 <FillZerobss>
 8002cb2:	f7ff fafd 	bl	80022b0 <SystemInit>
 8002cb6:	f004 f82f 	bl	8006d18 <__libc_init_array>
 8002cba:	f7fd ffbf 	bl	8000c3c <main>
 8002cbe:	4770      	bx	lr
 8002cc0:	20020000 	.word	0x20020000
 8002cc4:	08007660 	.word	0x08007660
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000088 	.word	0x20000088
 8002cd0:	20000088 	.word	0x20000088
 8002cd4:	20001138 	.word	0x20001138

08002cd8 <ADC_IRQHandler>:
 8002cd8:	e7fe      	b.n	8002cd8 <ADC_IRQHandler>
	...

08002cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <HAL_Init+0x40>)
 8002ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_Init+0x40>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_Init+0x40>)
 8002cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_Init+0x40>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <HAL_Init+0x40>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f000 f94d 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f000 f808 	bl	8002d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d10:	f7fe ff10 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_InitTick+0x54>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_InitTick+0x58>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f965 	bl	800300e <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00e      	b.n	8002d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d80a      	bhi.n	8002d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d5c:	f000 f92d 	bl	8002fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <HAL_InitTick+0x5c>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000000 	.word	0x20000000
 8002d78:	2000000c 	.word	0x2000000c
 8002d7c:	20000008 	.word	0x20000008

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	2000000c 	.word	0x2000000c
 8002da4:	20000cc8 	.word	0x20000cc8

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000cc8 	.word	0x20000cc8

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d005      	beq.n	8002de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_Delay+0x40>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002de6:	bf00      	nop
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8f7      	bhi.n	8002de8 <HAL_Delay+0x28>
  {
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	2000000c 	.word	0x2000000c

08002e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e36:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <__NVIC_GetPriorityGrouping+0x18>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f003 0307 	and.w	r3, r3, #7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	db0b      	blt.n	8002e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4907      	ldr	r1, [pc, #28]	; (8002ea0 <__NVIC_EnableIRQ+0x38>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2001      	movs	r0, #1
 8002e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	; (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f84:	f7ff ff8e 	bl	8002ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff29 	bl	8002e04 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff3e 	bl	8002e4c <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff8e 	bl	8002ef8 <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5d 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff31 	bl	8002e68 <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa2 	bl	8002f60 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff feb8 	bl	8002da8 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e099      	b.n	8003178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003064:	e00f      	b.n	8003086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003066:	f7ff fe9f 	bl	8002da8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b05      	cmp	r3, #5
 8003072:	d908      	bls.n	8003086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e078      	b.n	8003178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e8      	bne.n	8003066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4b38      	ldr	r3, [pc, #224]	; (8003180 <HAL_DMA_Init+0x158>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0307 	bic.w	r3, r3, #7
 8003106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b04      	cmp	r3, #4
 8003118:	d117      	bne.n	800314a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fb0d 	bl	800374c <DMA_CheckFifoParam>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003146:	2301      	movs	r3, #1
 8003148:	e016      	b.n	8003178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fac4 	bl	80036e0 <DMA_CalcBaseAndBitshift>
 8003158:	4603      	mov	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	223f      	movs	r2, #63	; 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	f010803f 	.word	0xf010803f

08003184 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Start_IT+0x26>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e040      	b.n	800322c <HAL_DMA_Start_IT+0xa8>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d12f      	bne.n	800321e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa56 	bl	8003684 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	223f      	movs	r2, #63	; 0x3f
 80031de:	409a      	lsls	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0216 	orr.w	r2, r2, #22
 80031f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e005      	b.n	800322a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003242:	f7ff fdb1 	bl	8002da8 <HAL_GetTick>
 8003246:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d008      	beq.n	8003266 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e052      	b.n	800330c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0216 	bic.w	r2, r2, #22
 8003274:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003284:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_DMA_Abort+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0208 	bic.w	r2, r2, #8
 80032a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b6:	e013      	b.n	80032e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b8:	f7ff fd76 	bl	8002da8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d90c      	bls.n	80032e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e015      	b.n	800330c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	223f      	movs	r2, #63	; 0x3f
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d004      	beq.n	8003332 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00c      	b.n	800334c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2205      	movs	r2, #5
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003364:	4b92      	ldr	r3, [pc, #584]	; (80035b0 <HAL_DMA_IRQHandler+0x258>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a92      	ldr	r2, [pc, #584]	; (80035b4 <HAL_DMA_IRQHandler+0x25c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2208      	movs	r2, #8
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2204      	movs	r2, #4
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	2204      	movs	r2, #4
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	2210      	movs	r2, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d043      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	2210      	movs	r2, #16
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d024      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e01f      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e016      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2220      	movs	r2, #32
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 808e 	beq.w	80035f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8086 	beq.w	80035f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2220      	movs	r2, #32
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d136      	bne.n	8003570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_IRQHandler+0x1da>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	223f      	movs	r2, #63	; 0x3f
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07d      	beq.n	8003662 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
        }
        return;
 800356e:	e078      	b.n	8003662 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01c      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	2b00      	cmp	r3, #0
 8003592:	d030      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e02b      	b.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
 80035ae:	e022      	b.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
 80035b0:	20000000 	.word	0x20000000
 80035b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0210 	bic.w	r2, r2, #16
 80035d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d032      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d022      	beq.n	8003650 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2205      	movs	r2, #5
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	429a      	cmp	r2, r3
 800362c:	d307      	bcc.n	800363e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f2      	bne.n	8003622 <HAL_DMA_IRQHandler+0x2ca>
 800363c:	e000      	b.n	8003640 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800363e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
 8003660:	e000      	b.n	8003664 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003662:	bf00      	nop
    }
  }
}
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop

0800366c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d108      	bne.n	80036c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036c2:	e007      	b.n	80036d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3b10      	subs	r3, #16
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <DMA_CalcBaseAndBitshift+0x64>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <DMA_CalcBaseAndBitshift+0x68>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d909      	bls.n	8003722 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	659a      	str	r2, [r3, #88]	; 0x58
 8003720:	e007      	b.n	8003732 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	aaaaaaab 	.word	0xaaaaaaab
 8003748:	08007614 	.word	0x08007614

0800374c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11f      	bne.n	80037a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d855      	bhi.n	8003818 <DMA_CheckFifoParam+0xcc>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <DMA_CheckFifoParam+0x28>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003785 	.word	0x08003785
 8003778:	08003797 	.word	0x08003797
 800377c:	08003785 	.word	0x08003785
 8003780:	08003819 	.word	0x08003819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d045      	beq.n	800381c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003794:	e042      	b.n	800381c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800379e:	d13f      	bne.n	8003820 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a4:	e03c      	b.n	8003820 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ae:	d121      	bne.n	80037f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d836      	bhi.n	8003824 <DMA_CheckFifoParam+0xd8>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <DMA_CheckFifoParam+0x70>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d3 	.word	0x080037d3
 80037c4:	080037cd 	.word	0x080037cd
 80037c8:	080037e5 	.word	0x080037e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	e02f      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d024      	beq.n	8003828 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e2:	e021      	b.n	8003828 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ec:	d11e      	bne.n	800382c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037f2:	e01b      	b.n	800382c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <DMA_CheckFifoParam+0xb4>
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d003      	beq.n	8003806 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037fe:	e018      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e015      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      break;
 8003816:	e00b      	b.n	8003830 <DMA_CheckFifoParam+0xe4>
      break;
 8003818:	bf00      	nop
 800381a:	e00a      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;
 800381c:	bf00      	nop
 800381e:	e008      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;
 8003820:	bf00      	nop
 8003822:	e006      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;
 8003824:	bf00      	nop
 8003826:	e004      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;
 8003828:	bf00      	nop
 800382a:	e002      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;   
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;
 8003830:	bf00      	nop
    }
  } 
  
  return status; 
 8003832:	7bfb      	ldrb	r3, [r7, #15]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e165      	b.n	8003b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 8154 	bne.w	8003b22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d00b      	beq.n	800389a <HAL_GPIO_Init+0x5a>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d007      	beq.n	800389a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800388e:	2b11      	cmp	r3, #17
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b12      	cmp	r3, #18
 8003898:	d130      	bne.n	80038fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	2203      	movs	r2, #3
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d0:	2201      	movs	r2, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 0201 	and.w	r2, r3, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0xfc>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b12      	cmp	r3, #18
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80ae 	beq.w	8003b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_GPIO_Init+0x2fc>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	4a5b      	ldr	r2, [pc, #364]	; (8003b3c <HAL_GPIO_Init+0x2fc>)
 80039d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d4:	6453      	str	r3, [r2, #68]	; 0x44
 80039d6:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_GPIO_Init+0x2fc>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a57      	ldr	r2, [pc, #348]	; (8003b40 <HAL_GPIO_Init+0x300>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4e      	ldr	r2, [pc, #312]	; (8003b44 <HAL_GPIO_Init+0x304>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d025      	beq.n	8003a5a <HAL_GPIO_Init+0x21a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <HAL_GPIO_Init+0x308>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01f      	beq.n	8003a56 <HAL_GPIO_Init+0x216>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4c      	ldr	r2, [pc, #304]	; (8003b4c <HAL_GPIO_Init+0x30c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d019      	beq.n	8003a52 <HAL_GPIO_Init+0x212>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4b      	ldr	r2, [pc, #300]	; (8003b50 <HAL_GPIO_Init+0x310>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_GPIO_Init+0x20e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <HAL_GPIO_Init+0x314>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00d      	beq.n	8003a4a <HAL_GPIO_Init+0x20a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a49      	ldr	r2, [pc, #292]	; (8003b58 <HAL_GPIO_Init+0x318>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <HAL_GPIO_Init+0x206>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a48      	ldr	r2, [pc, #288]	; (8003b5c <HAL_GPIO_Init+0x31c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <HAL_GPIO_Init+0x202>
 8003a3e:	2306      	movs	r3, #6
 8003a40:	e00c      	b.n	8003a5c <HAL_GPIO_Init+0x21c>
 8003a42:	2307      	movs	r3, #7
 8003a44:	e00a      	b.n	8003a5c <HAL_GPIO_Init+0x21c>
 8003a46:	2305      	movs	r3, #5
 8003a48:	e008      	b.n	8003a5c <HAL_GPIO_Init+0x21c>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x21c>
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e004      	b.n	8003a5c <HAL_GPIO_Init+0x21c>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_Init+0x21c>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x21c>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f002 0203 	and.w	r2, r2, #3
 8003a62:	0092      	lsls	r2, r2, #2
 8003a64:	4093      	lsls	r3, r2
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a6c:	4934      	ldr	r1, [pc, #208]	; (8003b40 <HAL_GPIO_Init+0x300>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	3302      	adds	r3, #2
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7a:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a9e:	4a30      	ldr	r2, [pc, #192]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac8:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af2:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b1c:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	f67f ae96 	bls.w	800385c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	3724      	adds	r7, #36	; 0x24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40021400 	.word	0x40021400
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	40013c00 	.word	0x40013c00

08003b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e001      	b.n	8003b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bb0:	e003      	b.n	8003bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	041a      	lsls	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	619a      	str	r2, [r3, #24]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bee:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <HAL_PWREx_EnableOverDrive+0x94>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf4:	f7ff f8d8 	bl	8002da8 <HAL_GetTick>
 8003bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bfa:	e009      	b.n	8003c10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bfc:	f7ff f8d4 	bl	8002da8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0a:	d901      	bls.n	8003c10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e01f      	b.n	8003c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d1ee      	bne.n	8003bfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c24:	f7ff f8c0 	bl	8002da8 <HAL_GetTick>
 8003c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c2a:	e009      	b.n	8003c40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c2c:	f7ff f8bc 	bl	8002da8 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3a:	d901      	bls.n	8003c40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e007      	b.n	8003c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	420e0040 	.word	0x420e0040
 8003c60:	40007000 	.word	0x40007000
 8003c64:	420e0044 	.word	0x420e0044

08003c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0cc      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d90c      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0b8      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cbc:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd4:	4b53      	ldr	r3, [pc, #332]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	494d      	ldr	r1, [pc, #308]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d044      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d119      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e067      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4934      	ldr	r1, [pc, #208]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7ff f826 	bl	8002da8 <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7ff f822 	bl	8002da8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d20c      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e032      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4916      	ldr	r1, [pc, #88]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	490e      	ldr	r1, [pc, #56]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dee:	f000 f855 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003df2:	4601      	mov	r1, r0
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	fa21 f303 	lsr.w	r3, r1, r3
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe ff86 	bl	8002d20 <HAL_InitTick>

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023c00 	.word	0x40023c00
 8003e24:	40023800 	.word	0x40023800
 8003e28:	080075fc 	.word	0x080075fc
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	20000008 	.word	0x20000008

08003e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000000 	.word	0x20000000

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff0 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e54:	4601      	mov	r1, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4a03      	ldr	r2, [pc, #12]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5cd3      	ldrb	r3, [r2, r3]
 8003e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	0800760c 	.word	0x0800760c

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e78:	f7ff ffdc 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0b5b      	lsrs	r3, r3, #13
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8a:	5cd3      	ldrb	r3, [r2, r3]
 8003e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800760c 	.word	0x0800760c

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb6:	4bc6      	ldr	r3, [pc, #792]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	f200 817e 	bhi.w	80041c0 <HAL_RCC_GetSysClockFreq+0x324>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_RCC_GetSysClockFreq+0x30>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	080041c1 	.word	0x080041c1
 8003ed4:	080041c1 	.word	0x080041c1
 8003ed8:	080041c1 	.word	0x080041c1
 8003edc:	08003f07 	.word	0x08003f07
 8003ee0:	080041c1 	.word	0x080041c1
 8003ee4:	080041c1 	.word	0x080041c1
 8003ee8:	080041c1 	.word	0x080041c1
 8003eec:	08003f0d 	.word	0x08003f0d
 8003ef0:	080041c1 	.word	0x080041c1
 8003ef4:	080041c1 	.word	0x080041c1
 8003ef8:	080041c1 	.word	0x080041c1
 8003efc:	08004069 	.word	0x08004069
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4bb4      	ldr	r3, [pc, #720]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x338>)
 8003f02:	613b      	str	r3, [r7, #16]
       break;
 8003f04:	e15f      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f06:	4bb4      	ldr	r3, [pc, #720]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003f08:	613b      	str	r3, [r7, #16]
      break;
 8003f0a:	e15c      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0c:	4bb0      	ldr	r3, [pc, #704]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f14:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f16:	4bae      	ldr	r3, [pc, #696]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04a      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	4bab      	ldr	r3, [pc, #684]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	f04f 0400 	mov.w	r4, #0
 8003f2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	ea03 0501 	and.w	r5, r3, r1
 8003f38:	ea04 0602 	and.w	r6, r4, r2
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4632      	mov	r2, r6
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	f04f 0400 	mov.w	r4, #0
 8003f48:	0154      	lsls	r4, r2, #5
 8003f4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f4e:	014b      	lsls	r3, r1, #5
 8003f50:	4619      	mov	r1, r3
 8003f52:	4622      	mov	r2, r4
 8003f54:	1b49      	subs	r1, r1, r5
 8003f56:	eb62 0206 	sbc.w	r2, r2, r6
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	f04f 0400 	mov.w	r4, #0
 8003f62:	0194      	lsls	r4, r2, #6
 8003f64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f68:	018b      	lsls	r3, r1, #6
 8003f6a:	1a5b      	subs	r3, r3, r1
 8003f6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	00e2      	lsls	r2, r4, #3
 8003f7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f7e:	00d9      	lsls	r1, r3, #3
 8003f80:	460b      	mov	r3, r1
 8003f82:	4614      	mov	r4, r2
 8003f84:	195b      	adds	r3, r3, r5
 8003f86:	eb44 0406 	adc.w	r4, r4, r6
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	0262      	lsls	r2, r4, #9
 8003f94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f98:	0259      	lsls	r1, r3, #9
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	f7fc f980 	bl	80002b0 <__aeabi_uldivmod>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e049      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb8:	4b85      	ldr	r3, [pc, #532]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	f04f 0400 	mov.w	r4, #0
 8003fc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	ea03 0501 	and.w	r5, r3, r1
 8003fce:	ea04 0602 	and.w	r6, r4, r2
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	f04f 0400 	mov.w	r4, #0
 8003fde:	0154      	lsls	r4, r2, #5
 8003fe0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fe4:	014b      	lsls	r3, r1, #5
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4622      	mov	r2, r4
 8003fea:	1b49      	subs	r1, r1, r5
 8003fec:	eb62 0206 	sbc.w	r2, r2, r6
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	0194      	lsls	r4, r2, #6
 8003ffa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ffe:	018b      	lsls	r3, r1, #6
 8004000:	1a5b      	subs	r3, r3, r1
 8004002:	eb64 0402 	sbc.w	r4, r4, r2
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	00e2      	lsls	r2, r4, #3
 8004010:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004014:	00d9      	lsls	r1, r3, #3
 8004016:	460b      	mov	r3, r1
 8004018:	4614      	mov	r4, r2
 800401a:	195b      	adds	r3, r3, r5
 800401c:	eb44 0406 	adc.w	r4, r4, r6
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	02a2      	lsls	r2, r4, #10
 800402a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800402e:	0299      	lsls	r1, r3, #10
 8004030:	460b      	mov	r3, r1
 8004032:	4614      	mov	r4, r2
 8004034:	4618      	mov	r0, r3
 8004036:	4621      	mov	r1, r4
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f04f 0400 	mov.w	r4, #0
 800403e:	461a      	mov	r2, r3
 8004040:	4623      	mov	r3, r4
 8004042:	f7fc f935 	bl	80002b0 <__aeabi_uldivmod>
 8004046:	4603      	mov	r3, r0
 8004048:	460c      	mov	r4, r1
 800404a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800404c:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	613b      	str	r3, [r7, #16]
      break;
 8004066:	e0ae      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004072:	4b57      	ldr	r3, [pc, #348]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d04a      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	f240 11ff 	movw	r1, #511	; 0x1ff
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	ea03 0501 	and.w	r5, r3, r1
 8004094:	ea04 0602 	and.w	r6, r4, r2
 8004098:	4629      	mov	r1, r5
 800409a:	4632      	mov	r2, r6
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	f04f 0400 	mov.w	r4, #0
 80040a4:	0154      	lsls	r4, r2, #5
 80040a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040aa:	014b      	lsls	r3, r1, #5
 80040ac:	4619      	mov	r1, r3
 80040ae:	4622      	mov	r2, r4
 80040b0:	1b49      	subs	r1, r1, r5
 80040b2:	eb62 0206 	sbc.w	r2, r2, r6
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	f04f 0400 	mov.w	r4, #0
 80040be:	0194      	lsls	r4, r2, #6
 80040c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040c4:	018b      	lsls	r3, r1, #6
 80040c6:	1a5b      	subs	r3, r3, r1
 80040c8:	eb64 0402 	sbc.w	r4, r4, r2
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	00e2      	lsls	r2, r4, #3
 80040d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040da:	00d9      	lsls	r1, r3, #3
 80040dc:	460b      	mov	r3, r1
 80040de:	4614      	mov	r4, r2
 80040e0:	195b      	adds	r3, r3, r5
 80040e2:	eb44 0406 	adc.w	r4, r4, r6
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	0262      	lsls	r2, r4, #9
 80040f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040f4:	0259      	lsls	r1, r3, #9
 80040f6:	460b      	mov	r3, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	4621      	mov	r1, r4
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f04f 0400 	mov.w	r4, #0
 8004104:	461a      	mov	r2, r3
 8004106:	4623      	mov	r3, r4
 8004108:	f7fc f8d2 	bl	80002b0 <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e049      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004114:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	f04f 0400 	mov.w	r4, #0
 800411e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	ea03 0501 	and.w	r5, r3, r1
 800412a:	ea04 0602 	and.w	r6, r4, r2
 800412e:	4629      	mov	r1, r5
 8004130:	4632      	mov	r2, r6
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	f04f 0400 	mov.w	r4, #0
 800413a:	0154      	lsls	r4, r2, #5
 800413c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004140:	014b      	lsls	r3, r1, #5
 8004142:	4619      	mov	r1, r3
 8004144:	4622      	mov	r2, r4
 8004146:	1b49      	subs	r1, r1, r5
 8004148:	eb62 0206 	sbc.w	r2, r2, r6
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	f04f 0400 	mov.w	r4, #0
 8004154:	0194      	lsls	r4, r2, #6
 8004156:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800415a:	018b      	lsls	r3, r1, #6
 800415c:	1a5b      	subs	r3, r3, r1
 800415e:	eb64 0402 	sbc.w	r4, r4, r2
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	00e2      	lsls	r2, r4, #3
 800416c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004170:	00d9      	lsls	r1, r3, #3
 8004172:	460b      	mov	r3, r1
 8004174:	4614      	mov	r4, r2
 8004176:	195b      	adds	r3, r3, r5
 8004178:	eb44 0406 	adc.w	r4, r4, r6
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	02a2      	lsls	r2, r4, #10
 8004186:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800418a:	0299      	lsls	r1, r3, #10
 800418c:	460b      	mov	r3, r1
 800418e:	4614      	mov	r4, r2
 8004190:	4618      	mov	r0, r3
 8004192:	4621      	mov	r1, r4
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f04f 0400 	mov.w	r4, #0
 800419a:	461a      	mov	r2, r3
 800419c:	4623      	mov	r3, r4
 800419e:	f7fc f887 	bl	80002b0 <__aeabi_uldivmod>
 80041a2:	4603      	mov	r3, r0
 80041a4:	460c      	mov	r4, r1
 80041a6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x334>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0f1b      	lsrs	r3, r3, #28
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	613b      	str	r3, [r7, #16]
      break;
 80041be:	e002      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x338>)
 80041c2:	613b      	str	r3, [r7, #16]
      break;
 80041c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c6:	693b      	ldr	r3, [r7, #16]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	007a1200 	.word	0x007a1200

080041dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8083 	beq.w	80042fc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041f6:	4b95      	ldr	r3, [pc, #596]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d019      	beq.n	8004236 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004202:	4b92      	ldr	r3, [pc, #584]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800420e:	4b8f      	ldr	r3, [pc, #572]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d00c      	beq.n	8004236 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421c:	4b8b      	ldr	r3, [pc, #556]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d112      	bne.n	800424e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004228:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004234:	d10b      	bne.n	800424e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d05b      	beq.n	80042fa <HAL_RCC_OscConfig+0x11e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d157      	bne.n	80042fa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e216      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x8a>
 8004258:	4b7c      	ldr	r3, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a7b      	ldr	r2, [pc, #492]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800425e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e01d      	b.n	80042a2 <HAL_RCC_OscConfig+0xc6>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800426e:	d10c      	bne.n	800428a <HAL_RCC_OscConfig+0xae>
 8004270:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a75      	ldr	r2, [pc, #468]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b73      	ldr	r3, [pc, #460]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a72      	ldr	r2, [pc, #456]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e00b      	b.n	80042a2 <HAL_RCC_OscConfig+0xc6>
 800428a:	4b70      	ldr	r3, [pc, #448]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6f      	ldr	r2, [pc, #444]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6c      	ldr	r2, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800429c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d013      	beq.n	80042d2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fe fd7d 	bl	8002da8 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b2:	f7fe fd79 	bl	8002da8 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e1db      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0xd6>
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fe fd69 	bl	8002da8 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042da:	f7fe fd65 	bl	8002da8 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b64      	cmp	r3, #100	; 0x64
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1c7      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ec:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0xfe>
 80042f8:	e000      	b.n	80042fc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d06f      	beq.n	80043e8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004314:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800431c:	2b08      	cmp	r3, #8
 800431e:	d105      	bne.n	800432c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004320:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432c:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d11c      	bne.n	8004372 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004338:	4b44      	ldr	r3, [pc, #272]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d116      	bne.n	8004372 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_OscConfig+0x270>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_OscConfig+0x180>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d001      	beq.n	800435c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e18f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4938      	ldr	r1, [pc, #224]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004370:	e03a      	b.n	80043e8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d020      	beq.n	80043bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437a:	4b35      	ldr	r3, [pc, #212]	; (8004450 <HAL_RCC_OscConfig+0x274>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fe fd12 	bl	8002da8 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004388:	f7fe fd0e 	bl	8002da8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e170      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	4b2c      	ldr	r3, [pc, #176]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4925      	ldr	r1, [pc, #148]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
 80043ba:	e015      	b.n	80043e8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x274>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fe fcf1 	bl	8002da8 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fe fced 	bl	8002da8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e14f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x270>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d037      	beq.n	8004464 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d016      	beq.n	800442a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fc:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x278>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fe fcd1 	bl	8002da8 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440a:	f7fe fccd 	bl	8002da8 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e12f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_OscConfig+0x270>)
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x22e>
 8004428:	e01c      	b.n	8004464 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_OscConfig+0x278>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fe fcba 	bl	8002da8 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004436:	e00f      	b.n	8004458 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004438:	f7fe fcb6 	bl	8002da8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d908      	bls.n	8004458 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e118      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	42470000 	.word	0x42470000
 8004454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b8a      	ldr	r3, [pc, #552]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e9      	bne.n	8004438 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8097 	beq.w	80045a0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b83      	ldr	r3, [pc, #524]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b79      	ldr	r3, [pc, #484]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a75      	ldr	r2, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fe fc75 	bl	8002da8 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fe fc71 	bl	8002da8 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0d3      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x31a>
 80044e8:	4b66      	ldr	r3, [pc, #408]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a65      	ldr	r2, [pc, #404]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
 80044f4:	e01c      	b.n	8004530 <HAL_RCC_OscConfig+0x354>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x33c>
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a60      	ldr	r2, [pc, #384]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a5d      	ldr	r2, [pc, #372]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0x354>
 8004518:	4b5a      	ldr	r3, [pc, #360]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a59      	ldr	r2, [pc, #356]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a56      	ldr	r2, [pc, #344]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800452a:	f023 0304 	bic.w	r3, r3, #4
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fe fc36 	bl	8002da8 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe fc32 	bl	8002da8 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e092      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ee      	beq.n	8004540 <HAL_RCC_OscConfig+0x364>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe fc20 	bl	8002da8 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fe fc1c 	bl	8002da8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e07c      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ee      	bne.n	800456c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	4a3a      	ldr	r2, [pc, #232]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d068      	beq.n	800467a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a8:	4b36      	ldr	r3, [pc, #216]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d060      	beq.n	8004676 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d145      	bne.n	8004648 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_RCC_OscConfig+0x4b0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fe fbf1 	bl	8002da8 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fe fbed 	bl	8002da8 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e04f      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045dc:	4b29      	ldr	r3, [pc, #164]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	019b      	lsls	r3, r3, #6
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	071b      	lsls	r3, r3, #28
 8004614:	491b      	ldr	r1, [pc, #108]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800461a:	4b1c      	ldr	r3, [pc, #112]	; (800468c <HAL_RCC_OscConfig+0x4b0>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fe fbc2 	bl	8002da8 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004628:	f7fe fbbe 	bl	8002da8 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e020      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x44c>
 8004646:	e018      	b.n	800467a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCC_OscConfig+0x4b0>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fe fbab 	bl	8002da8 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004656:	f7fe fba7 	bl	8002da8 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e009      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCC_OscConfig+0x4a8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x47a>
 8004674:	e001      	b.n	800467a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	40007000 	.word	0x40007000
 800468c:	42470060 	.word	0x42470060

08004690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e056      	b.n	8004750 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fd fa61 	bl	8001b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	ea42 0103 	orr.w	r1, r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	f003 0104 	and.w	r1, r3, #4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_SPI_Transmit+0x22>
 8004776:	2302      	movs	r3, #2
 8004778:	e11e      	b.n	80049b8 <HAL_SPI_Transmit+0x260>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004782:	f7fe fb11 	bl	8002da8 <HAL_GetTick>
 8004786:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d002      	beq.n	800479e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004798:	2302      	movs	r3, #2
 800479a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800479c:	e103      	b.n	80049a6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_Transmit+0x52>
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ae:	e0fa      	b.n	80049a6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2203      	movs	r2, #3
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	88fa      	ldrh	r2, [r7, #6]
 80047ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f6:	d107      	bne.n	8004808 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004806:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	d007      	beq.n	8004826 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482e:	d14b      	bne.n	80048c8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_SPI_Transmit+0xe6>
 8004838:	8afb      	ldrh	r3, [r7, #22]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d13e      	bne.n	80048bc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	881a      	ldrh	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	1c9a      	adds	r2, r3, #2
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004862:	e02b      	b.n	80048bc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d112      	bne.n	8004898 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	881a      	ldrh	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	1c9a      	adds	r2, r3, #2
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	86da      	strh	r2, [r3, #54]	; 0x36
 8004896:	e011      	b.n	80048bc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004898:	f7fe fa86 	bl	8002da8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d803      	bhi.n	80048b0 <HAL_SPI_Transmit+0x158>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ae:	d102      	bne.n	80048b6 <HAL_SPI_Transmit+0x15e>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ba:	e074      	b.n	80049a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ce      	bne.n	8004864 <HAL_SPI_Transmit+0x10c>
 80048c6:	e04c      	b.n	8004962 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_SPI_Transmit+0x17e>
 80048d0:	8afb      	ldrh	r3, [r7, #22]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d140      	bne.n	8004958 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	7812      	ldrb	r2, [r2, #0]
 80048e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048fc:	e02c      	b.n	8004958 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	d113      	bne.n	8004934 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	86da      	strh	r2, [r3, #54]	; 0x36
 8004932:	e011      	b.n	8004958 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004934:	f7fe fa38 	bl	8002da8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d803      	bhi.n	800494c <HAL_SPI_Transmit+0x1f4>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800494a:	d102      	bne.n	8004952 <HAL_SPI_Transmit+0x1fa>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004956:	e026      	b.n	80049a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1cd      	bne.n	80048fe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fa36 	bl	8004dd8 <SPI_EndRxTxTransaction>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e000      	b.n	80049a6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80049a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08c      	sub	sp, #48	; 0x30
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049ce:	2301      	movs	r3, #1
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x26>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e18a      	b.n	8004cfc <HAL_SPI_TransmitReceive+0x33c>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ee:	f7fe f9db 	bl	8002da8 <HAL_GetTick>
 80049f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d00f      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x70>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a16:	d107      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x68>
 8004a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d003      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a2e:	e15b      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x82>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x82>
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a48:	e14e      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2205      	movs	r2, #5
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	887a      	ldrh	r2, [r7, #2]
 8004a86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d007      	beq.n	8004ab2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aba:	d178      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x10a>
 8004ac4:	8b7b      	ldrh	r3, [r7, #26]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d166      	bne.n	8004b98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	881a      	ldrh	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aee:	e053      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d11b      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x176>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d016      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x176>
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d113      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	1c9a      	adds	r2, r3, #2
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d119      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x1b8>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d014      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	1c9a      	adds	r2, r3, #2
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b74:	2301      	movs	r3, #1
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b78:	f7fe f916 	bl	8002da8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d807      	bhi.n	8004b98 <HAL_SPI_TransmitReceive+0x1d8>
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8e:	d003      	beq.n	8004b98 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b96:	e0a7      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1a6      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x130>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1a1      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x130>
 8004bac:	e07c      	b.n	8004ca8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x1fc>
 8004bb6:	8b7b      	ldrh	r3, [r7, #26]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d16b      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be2:	e057      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d11c      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x26c>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d017      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x26c>
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d114      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d119      	bne.n	8004c6e <HAL_SPI_TransmitReceive+0x2ae>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d014      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c6e:	f7fe f89b 	bl	8002da8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d803      	bhi.n	8004c86 <HAL_SPI_TransmitReceive+0x2c6>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x2cc>
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d103      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c92:	e029      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1a2      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x224>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d19d      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f893 	bl	8004dd8 <SPI_EndRxTxTransaction>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cc4:	e010      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	e000      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3730      	adds	r7, #48	; 0x30
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d14:	e04c      	b.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d1c:	d048      	beq.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d1e:	f7fe f843 	bl	8002da8 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d902      	bls.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d13d      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4c:	d111      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d56:	d004      	beq.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d107      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7a:	d10f      	bne.n	8004d9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e00f      	b.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d1a3      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004de4:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <SPI_EndRxTxTransaction+0x7c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <SPI_EndRxTxTransaction+0x80>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0d5b      	lsrs	r3, r3, #21
 8004df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004df4:	fb02 f303 	mul.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e02:	d112      	bne.n	8004e2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff ff78 	bl	8004d04 <SPI_WaitFlagStateUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e00f      	b.n	8004e4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d0f2      	beq.n	8004e2a <SPI_EndRxTxTransaction+0x52>
 8004e44:	e000      	b.n	8004e48 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e46:	bf00      	nop
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000000 	.word	0x20000000
 8004e58:	165e9f81 	.word	0x165e9f81

08004e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e03f      	b.n	8004eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fc ff2e 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2224      	movs	r2, #36	; 0x24
 8004e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fc47 	bl	8005734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d130      	bne.n	8004f72 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_UART_Transmit_IT+0x26>
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e029      	b.n	8004f74 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Transmit_IT+0x38>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e022      	b.n	8004f74 <HAL_UART_Transmit_IT+0x7e>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	88fa      	ldrh	r2, [r7, #6]
 8004f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2221      	movs	r2, #33	; 0x21
 8004f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f6c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e000      	b.n	8004f74 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d166      	bne.n	8005068 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_UART_Receive_DMA+0x26>
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e05f      	b.n	800506a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_UART_Receive_DMA+0x38>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e058      	b.n	800506a <HAL_UART_Receive_DMA+0xea>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	88fa      	ldrh	r2, [r7, #6]
 8004fca:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2222      	movs	r2, #34	; 0x22
 8004fd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	4a25      	ldr	r2, [pc, #148]	; (8005074 <HAL_UART_Receive_DMA+0xf4>)
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	4a24      	ldr	r2, [pc, #144]	; (8005078 <HAL_UART_Receive_DMA+0xf8>)
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	4a23      	ldr	r2, [pc, #140]	; (800507c <HAL_UART_Receive_DMA+0xfc>)
 8004ff0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3304      	adds	r3, #4
 800500a:	4619      	mov	r1, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	f7fe f8b7 	bl	8003184 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005042:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005062:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e000      	b.n	800506a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
  }
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	080053ad 	.word	0x080053ad
 8005078:	08005415 	.word	0x08005415
 800507c:	08005431 	.word	0x08005431

08005080 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005096:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d124      	bne.n	8005100 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050c4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	2200      	movs	r2, #0
 80050d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe f8aa 	bl	8003234 <HAL_DMA_Abort>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe fabe 	bl	800366c <HAL_DMA_GetError>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d104      	bne.n	8005100 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2210      	movs	r2, #16
 80050fa:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e03d      	b.n	800517c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d124      	bne.n	8005158 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	2200      	movs	r2, #0
 800512c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe f87e 	bl	8003234 <HAL_DMA_Abort>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fa92 	bl	800366c <HAL_DMA_GetError>
 8005148:	4603      	mov	r3, r0
 800514a:	2b20      	cmp	r3, #32
 800514c:	d104      	bne.n	8005158 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2210      	movs	r2, #16
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e011      	b.n	800517c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_UART_IRQHandler+0x52>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa2e 	bl	8005630 <UART_Receive_IT>
      return;
 80051d4:	e0d1      	b.n	800537a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80b0 	beq.w	800533e <HAL_UART_IRQHandler+0x1ba>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_UART_IRQHandler+0x70>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80a5 	beq.w	800533e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_UART_IRQHandler+0x90>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_UART_IRQHandler+0xb0>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	f043 0202 	orr.w	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_UART_IRQHandler+0xd0>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00f      	beq.n	800527e <HAL_UART_IRQHandler+0xfa>
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_UART_IRQHandler+0xee>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	f043 0208 	orr.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d078      	beq.n	8005378 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_UART_IRQHandler+0x11c>
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9c8 	bl	8005630 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <HAL_UART_IRQHandler+0x144>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d031      	beq.n	800532c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f911 	bl	80054f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d123      	bne.n	8005324 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d013      	beq.n	800531c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	4a21      	ldr	r2, [pc, #132]	; (8005380 <HAL_UART_IRQHandler+0x1fc>)
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe f807 	bl	8003314 <HAL_DMA_Abort_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d016      	beq.n	800533a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005316:	4610      	mov	r0, r2
 8005318:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531a:	e00e      	b.n	800533a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f83b 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005322:	e00a      	b.n	800533a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f837 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532a:	e006      	b.n	800533a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f833 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005338:	e01e      	b.n	8005378 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533a:	bf00      	nop
    return;
 800533c:	e01c      	b.n	8005378 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_UART_IRQHandler+0x1d6>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8fe 	bl	8005554 <UART_Transmit_IT>
    return;
 8005358:	e00f      	b.n	800537a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_UART_IRQHandler+0x1f6>
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f946 	bl	8005600 <UART_EndTransmit_IT>
    return;
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005378:	bf00      	nop
  }
}
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	0800552d 	.word	0x0800552d

08005384 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11e      	bne.n	8005406 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053dc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7fc f824 	bl	8001454 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff ffae 	bl	8005384 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	2b80      	cmp	r3, #128	; 0x80
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b21      	cmp	r3, #33	; 0x21
 8005462:	d108      	bne.n	8005476 <UART_DMAError+0x46>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005470:	68b8      	ldr	r0, [r7, #8]
 8005472:	f000 f827 	bl	80054c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b22      	cmp	r3, #34	; 0x22
 8005496:	d108      	bne.n	80054aa <UART_DMAError+0x7a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2200      	movs	r2, #0
 80054a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80054a4:	68b8      	ldr	r0, [r7, #8]
 80054a6:	f000 f823 	bl	80054f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	f043 0210 	orr.w	r2, r3, #16
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b6:	68b8      	ldr	r0, [r7, #8]
 80054b8:	f7ff ff6e 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80054da:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005506:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ff26 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b21      	cmp	r3, #33	; 0x21
 8005566:	d144      	bne.n	80055f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005570:	d11a      	bne.n	80055a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005586:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]
 800559a:	e00e      	b.n	80055ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]
 80055a6:	e008      	b.n	80055ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6211      	str	r1, [r2, #32]
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4619      	mov	r1, r3
 80055c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10f      	bne.n	80055ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005616:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fb ffa7 	bl	8001574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b22      	cmp	r3, #34	; 0x22
 8005642:	d171      	bne.n	8005728 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564c:	d123      	bne.n	8005696 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10e      	bne.n	800567a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	; 0x28
 8005678:	e029      	b.n	80056ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	b29b      	uxth	r3, r3
 8005682:	b2db      	uxtb	r3, r3
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
 8005694:	e01b      	b.n	80056ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6858      	ldr	r0, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	1c59      	adds	r1, r3, #1
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6291      	str	r1, [r2, #40]	; 0x28
 80056ae:	b2c2      	uxtb	r2, r0
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e00c      	b.n	80056ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	1c58      	adds	r0, r3, #1
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	6288      	str	r0, [r1, #40]	; 0x28
 80056c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4619      	mov	r1, r3
 80056dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d120      	bne.n	8005724 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0220 	bic.w	r2, r2, #32
 80056f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb fe9a 	bl	8001454 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e002      	b.n	800572a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e000      	b.n	800572a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005776:	f023 030c 	bic.w	r3, r3, #12
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	430b      	orrs	r3, r1
 8005782:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a2:	f040 818b 	bne.w	8005abc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4ac1      	ldr	r2, [pc, #772]	; (8005ab0 <UART_SetConfig+0x37c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d005      	beq.n	80057bc <UART_SetConfig+0x88>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4abf      	ldr	r2, [pc, #764]	; (8005ab4 <UART_SetConfig+0x380>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f040 80bd 	bne.w	8005936 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057bc:	f7fe fb5a 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 80057c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	461d      	mov	r5, r3
 80057c6:	f04f 0600 	mov.w	r6, #0
 80057ca:	46a8      	mov	r8, r5
 80057cc:	46b1      	mov	r9, r6
 80057ce:	eb18 0308 	adds.w	r3, r8, r8
 80057d2:	eb49 0409 	adc.w	r4, r9, r9
 80057d6:	4698      	mov	r8, r3
 80057d8:	46a1      	mov	r9, r4
 80057da:	eb18 0805 	adds.w	r8, r8, r5
 80057de:	eb49 0906 	adc.w	r9, r9, r6
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057f6:	4688      	mov	r8, r1
 80057f8:	4691      	mov	r9, r2
 80057fa:	eb18 0005 	adds.w	r0, r8, r5
 80057fe:	eb49 0106 	adc.w	r1, r9, r6
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	461d      	mov	r5, r3
 8005808:	f04f 0600 	mov.w	r6, #0
 800580c:	196b      	adds	r3, r5, r5
 800580e:	eb46 0406 	adc.w	r4, r6, r6
 8005812:	461a      	mov	r2, r3
 8005814:	4623      	mov	r3, r4
 8005816:	f7fa fd4b 	bl	80002b0 <__aeabi_uldivmod>
 800581a:	4603      	mov	r3, r0
 800581c:	460c      	mov	r4, r1
 800581e:	461a      	mov	r2, r3
 8005820:	4ba5      	ldr	r3, [pc, #660]	; (8005ab8 <UART_SetConfig+0x384>)
 8005822:	fba3 2302 	umull	r2, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	461d      	mov	r5, r3
 8005830:	f04f 0600 	mov.w	r6, #0
 8005834:	46a9      	mov	r9, r5
 8005836:	46b2      	mov	sl, r6
 8005838:	eb19 0309 	adds.w	r3, r9, r9
 800583c:	eb4a 040a 	adc.w	r4, sl, sl
 8005840:	4699      	mov	r9, r3
 8005842:	46a2      	mov	sl, r4
 8005844:	eb19 0905 	adds.w	r9, r9, r5
 8005848:	eb4a 0a06 	adc.w	sl, sl, r6
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005858:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800585c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005860:	4689      	mov	r9, r1
 8005862:	4692      	mov	sl, r2
 8005864:	eb19 0005 	adds.w	r0, r9, r5
 8005868:	eb4a 0106 	adc.w	r1, sl, r6
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	461d      	mov	r5, r3
 8005872:	f04f 0600 	mov.w	r6, #0
 8005876:	196b      	adds	r3, r5, r5
 8005878:	eb46 0406 	adc.w	r4, r6, r6
 800587c:	461a      	mov	r2, r3
 800587e:	4623      	mov	r3, r4
 8005880:	f7fa fd16 	bl	80002b0 <__aeabi_uldivmod>
 8005884:	4603      	mov	r3, r0
 8005886:	460c      	mov	r4, r1
 8005888:	461a      	mov	r2, r3
 800588a:	4b8b      	ldr	r3, [pc, #556]	; (8005ab8 <UART_SetConfig+0x384>)
 800588c:	fba3 1302 	umull	r1, r3, r3, r2
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	2164      	movs	r1, #100	; 0x64
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	3332      	adds	r3, #50	; 0x32
 800589e:	4a86      	ldr	r2, [pc, #536]	; (8005ab8 <UART_SetConfig+0x384>)
 80058a0:	fba2 2303 	umull	r2, r3, r2, r3
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058ac:	4498      	add	r8, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	461d      	mov	r5, r3
 80058b2:	f04f 0600 	mov.w	r6, #0
 80058b6:	46a9      	mov	r9, r5
 80058b8:	46b2      	mov	sl, r6
 80058ba:	eb19 0309 	adds.w	r3, r9, r9
 80058be:	eb4a 040a 	adc.w	r4, sl, sl
 80058c2:	4699      	mov	r9, r3
 80058c4:	46a2      	mov	sl, r4
 80058c6:	eb19 0905 	adds.w	r9, r9, r5
 80058ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80058ce:	f04f 0100 	mov.w	r1, #0
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058e2:	4689      	mov	r9, r1
 80058e4:	4692      	mov	sl, r2
 80058e6:	eb19 0005 	adds.w	r0, r9, r5
 80058ea:	eb4a 0106 	adc.w	r1, sl, r6
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	461d      	mov	r5, r3
 80058f4:	f04f 0600 	mov.w	r6, #0
 80058f8:	196b      	adds	r3, r5, r5
 80058fa:	eb46 0406 	adc.w	r4, r6, r6
 80058fe:	461a      	mov	r2, r3
 8005900:	4623      	mov	r3, r4
 8005902:	f7fa fcd5 	bl	80002b0 <__aeabi_uldivmod>
 8005906:	4603      	mov	r3, r0
 8005908:	460c      	mov	r4, r1
 800590a:	461a      	mov	r2, r3
 800590c:	4b6a      	ldr	r3, [pc, #424]	; (8005ab8 <UART_SetConfig+0x384>)
 800590e:	fba3 1302 	umull	r1, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2164      	movs	r1, #100	; 0x64
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	3332      	adds	r3, #50	; 0x32
 8005920:	4a65      	ldr	r2, [pc, #404]	; (8005ab8 <UART_SetConfig+0x384>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f003 0207 	and.w	r2, r3, #7
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4442      	add	r2, r8
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	e26f      	b.n	8005e16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005936:	f7fe fa89 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 800593a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	461d      	mov	r5, r3
 8005940:	f04f 0600 	mov.w	r6, #0
 8005944:	46a8      	mov	r8, r5
 8005946:	46b1      	mov	r9, r6
 8005948:	eb18 0308 	adds.w	r3, r8, r8
 800594c:	eb49 0409 	adc.w	r4, r9, r9
 8005950:	4698      	mov	r8, r3
 8005952:	46a1      	mov	r9, r4
 8005954:	eb18 0805 	adds.w	r8, r8, r5
 8005958:	eb49 0906 	adc.w	r9, r9, r6
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005968:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800596c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005970:	4688      	mov	r8, r1
 8005972:	4691      	mov	r9, r2
 8005974:	eb18 0005 	adds.w	r0, r8, r5
 8005978:	eb49 0106 	adc.w	r1, r9, r6
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	461d      	mov	r5, r3
 8005982:	f04f 0600 	mov.w	r6, #0
 8005986:	196b      	adds	r3, r5, r5
 8005988:	eb46 0406 	adc.w	r4, r6, r6
 800598c:	461a      	mov	r2, r3
 800598e:	4623      	mov	r3, r4
 8005990:	f7fa fc8e 	bl	80002b0 <__aeabi_uldivmod>
 8005994:	4603      	mov	r3, r0
 8005996:	460c      	mov	r4, r1
 8005998:	461a      	mov	r2, r3
 800599a:	4b47      	ldr	r3, [pc, #284]	; (8005ab8 <UART_SetConfig+0x384>)
 800599c:	fba3 2302 	umull	r2, r3, r3, r2
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	461d      	mov	r5, r3
 80059aa:	f04f 0600 	mov.w	r6, #0
 80059ae:	46a9      	mov	r9, r5
 80059b0:	46b2      	mov	sl, r6
 80059b2:	eb19 0309 	adds.w	r3, r9, r9
 80059b6:	eb4a 040a 	adc.w	r4, sl, sl
 80059ba:	4699      	mov	r9, r3
 80059bc:	46a2      	mov	sl, r4
 80059be:	eb19 0905 	adds.w	r9, r9, r5
 80059c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059da:	4689      	mov	r9, r1
 80059dc:	4692      	mov	sl, r2
 80059de:	eb19 0005 	adds.w	r0, r9, r5
 80059e2:	eb4a 0106 	adc.w	r1, sl, r6
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	461d      	mov	r5, r3
 80059ec:	f04f 0600 	mov.w	r6, #0
 80059f0:	196b      	adds	r3, r5, r5
 80059f2:	eb46 0406 	adc.w	r4, r6, r6
 80059f6:	461a      	mov	r2, r3
 80059f8:	4623      	mov	r3, r4
 80059fa:	f7fa fc59 	bl	80002b0 <__aeabi_uldivmod>
 80059fe:	4603      	mov	r3, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b2c      	ldr	r3, [pc, #176]	; (8005ab8 <UART_SetConfig+0x384>)
 8005a06:	fba3 1302 	umull	r1, r3, r3, r2
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2164      	movs	r1, #100	; 0x64
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	3332      	adds	r3, #50	; 0x32
 8005a18:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <UART_SetConfig+0x384>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a26:	4498      	add	r8, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	f04f 0600 	mov.w	r6, #0
 8005a30:	46a9      	mov	r9, r5
 8005a32:	46b2      	mov	sl, r6
 8005a34:	eb19 0309 	adds.w	r3, r9, r9
 8005a38:	eb4a 040a 	adc.w	r4, sl, sl
 8005a3c:	4699      	mov	r9, r3
 8005a3e:	46a2      	mov	sl, r4
 8005a40:	eb19 0905 	adds.w	r9, r9, r5
 8005a44:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a5c:	4689      	mov	r9, r1
 8005a5e:	4692      	mov	sl, r2
 8005a60:	eb19 0005 	adds.w	r0, r9, r5
 8005a64:	eb4a 0106 	adc.w	r1, sl, r6
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	461d      	mov	r5, r3
 8005a6e:	f04f 0600 	mov.w	r6, #0
 8005a72:	196b      	adds	r3, r5, r5
 8005a74:	eb46 0406 	adc.w	r4, r6, r6
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	f7fa fc18 	bl	80002b0 <__aeabi_uldivmod>
 8005a80:	4603      	mov	r3, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <UART_SetConfig+0x384>)
 8005a88:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	2164      	movs	r1, #100	; 0x64
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	3332      	adds	r3, #50	; 0x32
 8005a9a:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <UART_SetConfig+0x384>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	f003 0207 	and.w	r2, r3, #7
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4442      	add	r2, r8
 8005aac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005aae:	e1b2      	b.n	8005e16 <UART_SetConfig+0x6e2>
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	40011400 	.word	0x40011400
 8005ab8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4ad7      	ldr	r2, [pc, #860]	; (8005e20 <UART_SetConfig+0x6ec>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d005      	beq.n	8005ad2 <UART_SetConfig+0x39e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4ad6      	ldr	r2, [pc, #856]	; (8005e24 <UART_SetConfig+0x6f0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	f040 80d1 	bne.w	8005c74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ad2:	f7fe f9cf 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 8005ad6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	469a      	mov	sl, r3
 8005adc:	f04f 0b00 	mov.w	fp, #0
 8005ae0:	46d0      	mov	r8, sl
 8005ae2:	46d9      	mov	r9, fp
 8005ae4:	eb18 0308 	adds.w	r3, r8, r8
 8005ae8:	eb49 0409 	adc.w	r4, r9, r9
 8005aec:	4698      	mov	r8, r3
 8005aee:	46a1      	mov	r9, r4
 8005af0:	eb18 080a 	adds.w	r8, r8, sl
 8005af4:	eb49 090b 	adc.w	r9, r9, fp
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b0c:	4688      	mov	r8, r1
 8005b0e:	4691      	mov	r9, r2
 8005b10:	eb1a 0508 	adds.w	r5, sl, r8
 8005b14:	eb4b 0609 	adc.w	r6, fp, r9
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	0094      	lsls	r4, r2, #2
 8005b2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b30:	008b      	lsls	r3, r1, #2
 8005b32:	461a      	mov	r2, r3
 8005b34:	4623      	mov	r3, r4
 8005b36:	4628      	mov	r0, r5
 8005b38:	4631      	mov	r1, r6
 8005b3a:	f7fa fbb9 	bl	80002b0 <__aeabi_uldivmod>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	461a      	mov	r2, r3
 8005b44:	4bb8      	ldr	r3, [pc, #736]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005b46:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	469b      	mov	fp, r3
 8005b54:	f04f 0c00 	mov.w	ip, #0
 8005b58:	46d9      	mov	r9, fp
 8005b5a:	46e2      	mov	sl, ip
 8005b5c:	eb19 0309 	adds.w	r3, r9, r9
 8005b60:	eb4a 040a 	adc.w	r4, sl, sl
 8005b64:	4699      	mov	r9, r3
 8005b66:	46a2      	mov	sl, r4
 8005b68:	eb19 090b 	adds.w	r9, r9, fp
 8005b6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b84:	4689      	mov	r9, r1
 8005b86:	4692      	mov	sl, r2
 8005b88:	eb1b 0509 	adds.w	r5, fp, r9
 8005b8c:	eb4c 060a 	adc.w	r6, ip, sl
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	f04f 0400 	mov.w	r4, #0
 8005ba2:	0094      	lsls	r4, r2, #2
 8005ba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ba8:	008b      	lsls	r3, r1, #2
 8005baa:	461a      	mov	r2, r3
 8005bac:	4623      	mov	r3, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	f7fa fb7d 	bl	80002b0 <__aeabi_uldivmod>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b9a      	ldr	r3, [pc, #616]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2164      	movs	r1, #100	; 0x64
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	3332      	adds	r3, #50	; 0x32
 8005bd0:	4a95      	ldr	r2, [pc, #596]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bdc:	4498      	add	r8, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	469b      	mov	fp, r3
 8005be2:	f04f 0c00 	mov.w	ip, #0
 8005be6:	46d9      	mov	r9, fp
 8005be8:	46e2      	mov	sl, ip
 8005bea:	eb19 0309 	adds.w	r3, r9, r9
 8005bee:	eb4a 040a 	adc.w	r4, sl, sl
 8005bf2:	4699      	mov	r9, r3
 8005bf4:	46a2      	mov	sl, r4
 8005bf6:	eb19 090b 	adds.w	r9, r9, fp
 8005bfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c12:	4689      	mov	r9, r1
 8005c14:	4692      	mov	sl, r2
 8005c16:	eb1b 0509 	adds.w	r5, fp, r9
 8005c1a:	eb4c 060a 	adc.w	r6, ip, sl
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4619      	mov	r1, r3
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	f04f 0400 	mov.w	r4, #0
 8005c30:	0094      	lsls	r4, r2, #2
 8005c32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c36:	008b      	lsls	r3, r1, #2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	4631      	mov	r1, r6
 8005c40:	f7fa fb36 	bl	80002b0 <__aeabi_uldivmod>
 8005c44:	4603      	mov	r3, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b77      	ldr	r3, [pc, #476]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	2164      	movs	r1, #100	; 0x64
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	3332      	adds	r3, #50	; 0x32
 8005c5e:	4a72      	ldr	r2, [pc, #456]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	f003 020f 	and.w	r2, r3, #15
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4442      	add	r2, r8
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	e0d0      	b.n	8005e16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c74:	f7fe f8ea 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8005c78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	469a      	mov	sl, r3
 8005c7e:	f04f 0b00 	mov.w	fp, #0
 8005c82:	46d0      	mov	r8, sl
 8005c84:	46d9      	mov	r9, fp
 8005c86:	eb18 0308 	adds.w	r3, r8, r8
 8005c8a:	eb49 0409 	adc.w	r4, r9, r9
 8005c8e:	4698      	mov	r8, r3
 8005c90:	46a1      	mov	r9, r4
 8005c92:	eb18 080a 	adds.w	r8, r8, sl
 8005c96:	eb49 090b 	adc.w	r9, r9, fp
 8005c9a:	f04f 0100 	mov.w	r1, #0
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ca6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005caa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cae:	4688      	mov	r8, r1
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	eb1a 0508 	adds.w	r5, sl, r8
 8005cb6:	eb4b 0609 	adc.w	r6, fp, r9
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	f04f 0400 	mov.w	r4, #0
 8005ccc:	0094      	lsls	r4, r2, #2
 8005cce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cd2:	008b      	lsls	r3, r1, #2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	4628      	mov	r0, r5
 8005cda:	4631      	mov	r1, r6
 8005cdc:	f7fa fae8 	bl	80002b0 <__aeabi_uldivmod>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b50      	ldr	r3, [pc, #320]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	469b      	mov	fp, r3
 8005cf6:	f04f 0c00 	mov.w	ip, #0
 8005cfa:	46d9      	mov	r9, fp
 8005cfc:	46e2      	mov	sl, ip
 8005cfe:	eb19 0309 	adds.w	r3, r9, r9
 8005d02:	eb4a 040a 	adc.w	r4, sl, sl
 8005d06:	4699      	mov	r9, r3
 8005d08:	46a2      	mov	sl, r4
 8005d0a:	eb19 090b 	adds.w	r9, r9, fp
 8005d0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d12:	f04f 0100 	mov.w	r1, #0
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d26:	4689      	mov	r9, r1
 8005d28:	4692      	mov	sl, r2
 8005d2a:	eb1b 0509 	adds.w	r5, fp, r9
 8005d2e:	eb4c 060a 	adc.w	r6, ip, sl
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4619      	mov	r1, r3
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	f04f 0400 	mov.w	r4, #0
 8005d44:	0094      	lsls	r4, r2, #2
 8005d46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d4a:	008b      	lsls	r3, r1, #2
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4623      	mov	r3, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	4631      	mov	r1, r6
 8005d54:	f7fa faac 	bl	80002b0 <__aeabi_uldivmod>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4b32      	ldr	r3, [pc, #200]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005d60:	fba3 1302 	umull	r1, r3, r3, r2
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	2164      	movs	r1, #100	; 0x64
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	3332      	adds	r3, #50	; 0x32
 8005d72:	4a2d      	ldr	r2, [pc, #180]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d7e:	4498      	add	r8, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	469b      	mov	fp, r3
 8005d84:	f04f 0c00 	mov.w	ip, #0
 8005d88:	46d9      	mov	r9, fp
 8005d8a:	46e2      	mov	sl, ip
 8005d8c:	eb19 0309 	adds.w	r3, r9, r9
 8005d90:	eb4a 040a 	adc.w	r4, sl, sl
 8005d94:	4699      	mov	r9, r3
 8005d96:	46a2      	mov	sl, r4
 8005d98:	eb19 090b 	adds.w	r9, r9, fp
 8005d9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db4:	4689      	mov	r9, r1
 8005db6:	4692      	mov	sl, r2
 8005db8:	eb1b 0509 	adds.w	r5, fp, r9
 8005dbc:	eb4c 060a 	adc.w	r6, ip, sl
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	f04f 0400 	mov.w	r4, #0
 8005dd2:	0094      	lsls	r4, r2, #2
 8005dd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dd8:	008b      	lsls	r3, r1, #2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4623      	mov	r3, r4
 8005dde:	4628      	mov	r0, r5
 8005de0:	4631      	mov	r1, r6
 8005de2:	f7fa fa65 	bl	80002b0 <__aeabi_uldivmod>
 8005de6:	4603      	mov	r3, r0
 8005de8:	460c      	mov	r4, r1
 8005dea:	461a      	mov	r2, r3
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005dee:	fba3 1302 	umull	r1, r3, r3, r2
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	2164      	movs	r1, #100	; 0x64
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	3332      	adds	r3, #50	; 0x32
 8005e00:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <UART_SetConfig+0x6f4>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	f003 020f 	and.w	r2, r3, #15
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4442      	add	r2, r8
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	e7ff      	b.n	8005e16 <UART_SetConfig+0x6e2>
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e20:	40011000 	.word	0x40011000
 8005e24:	40011400 	.word	0x40011400
 8005e28:	51eb851f 	.word	0x51eb851f

08005e2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005e30:	4904      	ldr	r1, [pc, #16]	; (8005e44 <MX_FATFS_Init+0x18>)
 8005e32:	4805      	ldr	r0, [pc, #20]	; (8005e48 <MX_FATFS_Init+0x1c>)
 8005e34:	f000 ff5a 	bl	8006cec <FATFS_LinkDriver>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <MX_FATFS_Init+0x20>)
 8005e3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000ccc 	.word	0x20000ccc
 8005e48:	20000010 	.word	0x20000010
 8005e4c:	20000cd0 	.word	0x20000cd0

08005e50 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fc fbc3 	bl	80025f8 <USER_SPI_initialize>
 8005e72:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fc fc95 	bl	80027b8 <USER_SPI_status>
 8005e8e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005ea8:	7bf8      	ldrb	r0, [r7, #15]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	f7fc fc98 	bl	80027e4 <USER_SPI_read>
 8005eb4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005ece:	7bf8      	ldrb	r0, [r7, #15]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	f7fc fceb 	bl	80028b0 <USER_SPI_write>
 8005eda:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	603a      	str	r2, [r7, #0]
 8005eee:	71fb      	strb	r3, [r7, #7]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005ef4:	79b9      	ldrb	r1, [r7, #6]
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fc fd54 	bl	80029a8 <USER_SPI_ioctl>
 8005f00:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <disk_status+0x30>)
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	79fa      	ldrb	r2, [r7, #7]
 8005f24:	4905      	ldr	r1, [pc, #20]	; (8005f3c <disk_status+0x30>)
 8005f26:	440a      	add	r2, r1
 8005f28:	7a12      	ldrb	r2, [r2, #8]
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	4798      	blx	r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000124 	.word	0x20000124

08005f40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	4a0d      	ldr	r2, [pc, #52]	; (8005f88 <disk_initialize+0x48>)
 8005f52:	5cd3      	ldrb	r3, [r2, r3]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d111      	bne.n	8005f7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	4a0b      	ldr	r2, [pc, #44]	; (8005f88 <disk_initialize+0x48>)
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <disk_initialize+0x48>)
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	79fa      	ldrb	r2, [r7, #7]
 8005f6e:	4906      	ldr	r1, [pc, #24]	; (8005f88 <disk_initialize+0x48>)
 8005f70:	440a      	add	r2, r1
 8005f72:	7a12      	ldrb	r2, [r2, #8]
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000124 	.word	0x20000124

08005f8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <disk_read+0x3c>)
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	689c      	ldr	r4, [r3, #8]
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <disk_read+0x3c>)
 8005fac:	4413      	add	r3, r2
 8005fae:	7a18      	ldrb	r0, [r3, #8]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	47a0      	blx	r4
 8005fb8:	4603      	mov	r3, r0
 8005fba:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd90      	pop	{r4, r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000124 	.word	0x20000124

08005fcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	4a0a      	ldr	r2, [pc, #40]	; (8006008 <disk_write+0x3c>)
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68dc      	ldr	r4, [r3, #12]
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	4a07      	ldr	r2, [pc, #28]	; (8006008 <disk_write+0x3c>)
 8005fec:	4413      	add	r3, r2
 8005fee:	7a18      	ldrb	r0, [r3, #8]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	47a0      	blx	r4
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	bd90      	pop	{r4, r7, pc}
 8006006:	bf00      	nop
 8006008:	20000124 	.word	0x20000124

0800600c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	603a      	str	r2, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
 8006018:	460b      	mov	r3, r1
 800601a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <disk_ioctl+0x38>)
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	79fa      	ldrb	r2, [r7, #7]
 800602a:	4906      	ldr	r1, [pc, #24]	; (8006044 <disk_ioctl+0x38>)
 800602c:	440a      	add	r2, r1
 800602e:	7a10      	ldrb	r0, [r2, #8]
 8006030:	79b9      	ldrb	r1, [r7, #6]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4798      	blx	r3
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
  return res;
 800603a:	7bfb      	ldrb	r3, [r7, #15]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000124 	.word	0x20000124

08006048 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3301      	adds	r3, #1
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006058:	89fb      	ldrh	r3, [r7, #14]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	b21a      	sxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	b21b      	sxth	r3, r3
 8006064:	4313      	orrs	r3, r2
 8006066:	b21b      	sxth	r3, r3
 8006068:	81fb      	strh	r3, [r7, #14]
	return rv;
 800606a:	89fb      	ldrh	r3, [r7, #14]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3303      	adds	r3, #3
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	3202      	adds	r2, #2
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	3201      	adds	r2, #1
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	7812      	ldrb	r2, [r2, #0]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80060b0:	68fb      	ldr	r3, [r7, #12]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	887a      	ldrh	r2, [r7, #2]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	607a      	str	r2, [r7, #4]
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	0a1b      	lsrs	r3, r3, #8
 800610e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	0a1b      	lsrs	r3, r3, #8
 8006132:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	617a      	str	r2, [r7, #20]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3b01      	subs	r3, #1
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f3      	bne.n	800615c <mem_set+0x10>
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3b01      	subs	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d825      	bhi.n	80061e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006194:	4a17      	ldr	r2, [pc, #92]	; (80061f4 <dec_lock+0x74>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	4413      	add	r3, r2
 800619c:	330c      	adds	r3, #12
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80061a2:	89fb      	ldrh	r3, [r7, #14]
 80061a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a8:	d101      	bne.n	80061ae <dec_lock+0x2e>
 80061aa:	2300      	movs	r3, #0
 80061ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <dec_lock+0x3a>
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80061ba:	4a0e      	ldr	r2, [pc, #56]	; (80061f4 <dec_lock+0x74>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	4413      	add	r3, r2
 80061c2:	330c      	adds	r3, #12
 80061c4:	89fa      	ldrh	r2, [r7, #14]
 80061c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d105      	bne.n	80061da <dec_lock+0x5a>
 80061ce:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <dec_lock+0x74>)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	4413      	add	r3, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	737b      	strb	r3, [r7, #13]
 80061de:	e001      	b.n	80061e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80061e0:	2302      	movs	r3, #2
 80061e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80061e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000104 	.word	0x20000104

080061f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e010      	b.n	8006228 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006206:	4a0d      	ldr	r2, [pc, #52]	; (800623c <clear_lock+0x44>)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	4413      	add	r3, r2
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d105      	bne.n	8006222 <clear_lock+0x2a>
 8006216:	4a09      	ldr	r2, [pc, #36]	; (800623c <clear_lock+0x44>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	4413      	add	r3, r2
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d9eb      	bls.n	8006206 <clear_lock+0xe>
	}
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000104 	.word	0x20000104

08006240 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	78db      	ldrb	r3, [r3, #3]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d034      	beq.n	80062be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7858      	ldrb	r0, [r3, #1]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006264:	2301      	movs	r3, #1
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	f7ff feb0 	bl	8005fcc <disk_write>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	e022      	b.n	80062be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	1ad2      	subs	r2, r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	429a      	cmp	r2, r3
 800628c:	d217      	bcs.n	80062be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	789b      	ldrb	r3, [r3, #2]
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	e010      	b.n	80062b8 <sync_window+0x78>
					wsect += fs->fsize;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7858      	ldrb	r0, [r3, #1]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062aa:	2301      	movs	r3, #1
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	f7ff fe8d 	bl	8005fcc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d8eb      	bhi.n	8006296 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d01b      	beq.n	8006318 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ffad 	bl	8006240 <sync_window>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d113      	bne.n	8006318 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	7858      	ldrb	r0, [r3, #1]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062fa:	2301      	movs	r3, #1
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	f7ff fe45 	bl	8005f8c <disk_read>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800630c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff87 	bl	8006240 <sync_window>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d158      	bne.n	80063ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d148      	bne.n	80063d6 <sync_fs+0xb2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d144      	bne.n	80063d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3330      	adds	r3, #48	; 0x30
 8006350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff fef8 	bl	800614c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3330      	adds	r3, #48	; 0x30
 8006360:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006364:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fea8 	bl	80060be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3330      	adds	r3, #48	; 0x30
 8006372:	4921      	ldr	r1, [pc, #132]	; (80063f8 <sync_fs+0xd4>)
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff febd 	bl	80060f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3330      	adds	r3, #48	; 0x30
 800637e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006382:	491e      	ldr	r1, [pc, #120]	; (80063fc <sync_fs+0xd8>)
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff feb5 	bl	80060f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3330      	adds	r3, #48	; 0x30
 800638e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7ff feab 	bl	80060f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3330      	adds	r3, #48	; 0x30
 80063a2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f7ff fea1 	bl	80060f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	7858      	ldrb	r0, [r3, #1]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	2301      	movs	r3, #1
 80063cc:	f7ff fdfe 	bl	8005fcc <disk_write>
			fs->fsi_flag = 0;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2200      	movs	r2, #0
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff fe14 	bl	800600c <disk_ioctl>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <sync_fs+0xca>
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	41615252 	.word	0x41615252
 80063fc:	61417272 	.word	0x61417272

08006400 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	331a      	adds	r3, #26
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	b292      	uxth	r2, r2
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fe51 	bl	80060be <st_word>
	if (fs->fs_type == FS_FAT32) {
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d109      	bne.n	8006438 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f103 0214 	add.w	r2, r3, #20
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	b29b      	uxth	r3, r3
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7ff fe43 	bl	80060be <st_word>
	}
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d031      	beq.n	80064ba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e002      	b.n	8006464 <get_ldnumber+0x24>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	3301      	adds	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b20      	cmp	r3, #32
 800646a:	d903      	bls.n	8006474 <get_ldnumber+0x34>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b3a      	cmp	r3, #58	; 0x3a
 8006472:	d1f4      	bne.n	800645e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b3a      	cmp	r3, #58	; 0x3a
 800647a:	d11c      	bne.n	80064b6 <get_ldnumber+0x76>
			tp = *path;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	60fa      	str	r2, [r7, #12]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	3b30      	subs	r3, #48	; 0x30
 800648c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b09      	cmp	r3, #9
 8006492:	d80e      	bhi.n	80064b2 <get_ldnumber+0x72>
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	429a      	cmp	r2, r3
 800649a:	d10a      	bne.n	80064b2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <get_ldnumber+0x72>
					vol = (int)i;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3301      	adds	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	e002      	b.n	80064bc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80064ba:	693b      	ldr	r3, [r7, #16]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	70da      	strb	r2, [r3, #3]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064de:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff fef0 	bl	80062c8 <move_window>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <check_fs+0x2a>
 80064ee:	2304      	movs	r3, #4
 80064f0:	e038      	b.n	8006564 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3330      	adds	r3, #48	; 0x30
 80064f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fda4 	bl	8006048 <ld_word>
 8006500:	4603      	mov	r3, r0
 8006502:	461a      	mov	r2, r3
 8006504:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006508:	429a      	cmp	r2, r3
 800650a:	d001      	beq.n	8006510 <check_fs+0x48>
 800650c:	2303      	movs	r3, #3
 800650e:	e029      	b.n	8006564 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006516:	2be9      	cmp	r3, #233	; 0xe9
 8006518:	d009      	beq.n	800652e <check_fs+0x66>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006520:	2beb      	cmp	r3, #235	; 0xeb
 8006522:	d11e      	bne.n	8006562 <check_fs+0x9a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800652a:	2b90      	cmp	r3, #144	; 0x90
 800652c:	d119      	bne.n	8006562 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3330      	adds	r3, #48	; 0x30
 8006532:	3336      	adds	r3, #54	; 0x36
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fd9f 	bl	8006078 <ld_dword>
 800653a:	4603      	mov	r3, r0
 800653c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006540:	4a0a      	ldr	r2, [pc, #40]	; (800656c <check_fs+0xa4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <check_fs+0x82>
 8006546:	2300      	movs	r3, #0
 8006548:	e00c      	b.n	8006564 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3330      	adds	r3, #48	; 0x30
 800654e:	3352      	adds	r3, #82	; 0x52
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fd91 	bl	8006078 <ld_dword>
 8006556:	4602      	mov	r2, r0
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <check_fs+0xa8>)
 800655a:	429a      	cmp	r2, r3
 800655c:	d101      	bne.n	8006562 <check_fs+0x9a>
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006562:	2302      	movs	r3, #2
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	00544146 	.word	0x00544146
 8006570:	33544146 	.word	0x33544146

08006574 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b096      	sub	sp, #88	; 0x58
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff ff59 	bl	8006440 <get_ldnumber>
 800658e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006592:	2b00      	cmp	r3, #0
 8006594:	da01      	bge.n	800659a <find_volume+0x26>
 8006596:	230b      	movs	r3, #11
 8006598:	e22e      	b.n	80069f8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800659a:	4aa8      	ldr	r2, [pc, #672]	; (800683c <find_volume+0x2c8>)
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <find_volume+0x3a>
 80065aa:	230c      	movs	r3, #12
 80065ac:	e224      	b.n	80069f8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01a      	beq.n	80065fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fc9f 	bl	8005f0c <disk_status>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10c      	bne.n	80065fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <find_volume+0x82>
 80065e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80065f2:	230a      	movs	r3, #10
 80065f4:	e200      	b.n	80069f8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80065f6:	2300      	movs	r3, #0
 80065f8:	e1fe      	b.n	80069f8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006602:	b2da      	uxtb	r2, r3
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fc97 	bl	8005f40 <disk_initialize>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006624:	2303      	movs	r3, #3
 8006626:	e1e7      	b.n	80069f8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <find_volume+0xca>
 800662e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800663a:	230a      	movs	r3, #10
 800663c:	e1dc      	b.n	80069f8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006642:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006646:	f7ff ff3f 	bl	80064c8 <check_fs>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006654:	2b02      	cmp	r3, #2
 8006656:	d14b      	bne.n	80066f0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006658:	2300      	movs	r3, #0
 800665a:	643b      	str	r3, [r7, #64]	; 0x40
 800665c:	e01f      	b.n	800669e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800666c:	4413      	add	r3, r2
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	3304      	adds	r3, #4
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <find_volume+0x114>
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	3308      	adds	r3, #8
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fcfa 	bl	8006078 <ld_dword>
 8006684:	4602      	mov	r2, r0
 8006686:	e000      	b.n	800668a <find_volume+0x116>
 8006688:	2200      	movs	r2, #0
 800668a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006692:	440b      	add	r3, r1
 8006694:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669a:	3301      	adds	r3, #1
 800669c:	643b      	str	r3, [r7, #64]	; 0x40
 800669e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d9dc      	bls.n	800665e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80066a4:	2300      	movs	r3, #0
 80066a6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80066a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <find_volume+0x140>
 80066ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b0:	3b01      	subs	r3, #1
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80066b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80066bc:	4413      	add	r3, r2
 80066be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80066c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80066c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <find_volume+0x162>
 80066ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066ce:	f7ff fefb 	bl	80064c8 <check_fs>
 80066d2:	4603      	mov	r3, r0
 80066d4:	e000      	b.n	80066d8 <find_volume+0x164>
 80066d6:	2303      	movs	r3, #3
 80066d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80066dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d905      	bls.n	80066f0 <find_volume+0x17c>
 80066e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e6:	3301      	adds	r3, #1
 80066e8:	643b      	str	r3, [r7, #64]	; 0x40
 80066ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d9e1      	bls.n	80066b4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80066f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d101      	bne.n	80066fc <find_volume+0x188>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e17d      	b.n	80069f8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80066fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006700:	2b01      	cmp	r3, #1
 8006702:	d901      	bls.n	8006708 <find_volume+0x194>
 8006704:	230d      	movs	r3, #13
 8006706:	e177      	b.n	80069f8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	3330      	adds	r3, #48	; 0x30
 800670c:	330b      	adds	r3, #11
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fc9a 	bl	8006048 <ld_word>
 8006714:	4603      	mov	r3, r0
 8006716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671a:	d001      	beq.n	8006720 <find_volume+0x1ac>
 800671c:	230d      	movs	r3, #13
 800671e:	e16b      	b.n	80069f8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	3330      	adds	r3, #48	; 0x30
 8006724:	3316      	adds	r3, #22
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fc8e 	bl	8006048 <ld_word>
 800672c:	4603      	mov	r3, r0
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <find_volume+0x1d0>
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	3330      	adds	r3, #48	; 0x30
 800673a:	3324      	adds	r3, #36	; 0x24
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fc9b 	bl	8006078 <ld_dword>
 8006742:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006748:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	789b      	ldrb	r3, [r3, #2]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d005      	beq.n	8006768 <find_volume+0x1f4>
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	789b      	ldrb	r3, [r3, #2]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d001      	beq.n	8006768 <find_volume+0x1f4>
 8006764:	230d      	movs	r3, #13
 8006766:	e147      	b.n	80069f8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	789b      	ldrb	r3, [r3, #2]
 800676c:	461a      	mov	r2, r3
 800676e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006770:	fb02 f303 	mul.w	r3, r2, r3
 8006774:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b29a      	uxth	r2, r3
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	895b      	ldrh	r3, [r3, #10]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <find_volume+0x228>
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	895b      	ldrh	r3, [r3, #10]
 800678e:	461a      	mov	r2, r3
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	895b      	ldrh	r3, [r3, #10]
 8006794:	3b01      	subs	r3, #1
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <find_volume+0x22c>
 800679c:	230d      	movs	r3, #13
 800679e:	e12b      	b.n	80069f8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	3330      	adds	r3, #48	; 0x30
 80067a4:	3311      	adds	r3, #17
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fc4e 	bl	8006048 <ld_word>
 80067ac:	4603      	mov	r3, r0
 80067ae:	461a      	mov	r2, r3
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	891b      	ldrh	r3, [r3, #8]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <find_volume+0x252>
 80067c2:	230d      	movs	r3, #13
 80067c4:	e118      	b.n	80069f8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	3330      	adds	r3, #48	; 0x30
 80067ca:	3313      	adds	r3, #19
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fc3b 	bl	8006048 <ld_word>
 80067d2:	4603      	mov	r3, r0
 80067d4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80067d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d106      	bne.n	80067ea <find_volume+0x276>
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	3330      	adds	r3, #48	; 0x30
 80067e0:	3320      	adds	r3, #32
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fc48 	bl	8006078 <ld_dword>
 80067e8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	3330      	adds	r3, #48	; 0x30
 80067ee:	330e      	adds	r3, #14
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fc29 	bl	8006048 <ld_word>
 80067f6:	4603      	mov	r3, r0
 80067f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80067fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <find_volume+0x290>
 8006800:	230d      	movs	r3, #13
 8006802:	e0f9      	b.n	80069f8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006804:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006808:	4413      	add	r3, r2
 800680a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800680c:	8912      	ldrh	r2, [r2, #8]
 800680e:	0912      	lsrs	r2, r2, #4
 8006810:	b292      	uxth	r2, r2
 8006812:	4413      	add	r3, r2
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	429a      	cmp	r2, r3
 800681c:	d201      	bcs.n	8006822 <find_volume+0x2ae>
 800681e:	230d      	movs	r3, #13
 8006820:	e0ea      	b.n	80069f8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682a:	8952      	ldrh	r2, [r2, #10]
 800682c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <find_volume+0x2cc>
 8006838:	230d      	movs	r3, #13
 800683a:	e0dd      	b.n	80069f8 <find_volume+0x484>
 800683c:	200000fc 	.word	0x200000fc
		fmt = FS_FAT32;
 8006840:	2303      	movs	r3, #3
 8006842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800684c:	4293      	cmp	r3, r2
 800684e:	d802      	bhi.n	8006856 <find_volume+0x2e2>
 8006850:	2302      	movs	r3, #2
 8006852:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	f640 72f5 	movw	r2, #4085	; 0xff5
 800685c:	4293      	cmp	r3, r2
 800685e:	d802      	bhi.n	8006866 <find_volume+0x2f2>
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006872:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006874:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006878:	441a      	add	r2, r3
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800687e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	441a      	add	r2, r3
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800688c:	2b03      	cmp	r3, #3
 800688e:	d11e      	bne.n	80068ce <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	3330      	adds	r3, #48	; 0x30
 8006894:	332a      	adds	r3, #42	; 0x2a
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fbd6 	bl	8006048 <ld_word>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <find_volume+0x332>
 80068a2:	230d      	movs	r3, #13
 80068a4:	e0a8      	b.n	80069f8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	891b      	ldrh	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <find_volume+0x33e>
 80068ae:	230d      	movs	r3, #13
 80068b0:	e0a2      	b.n	80069f8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	3330      	adds	r3, #48	; 0x30
 80068b6:	332c      	adds	r3, #44	; 0x2c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fbdd 	bl	8006078 <ld_dword>
 80068be:	4602      	mov	r2, r0
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	647b      	str	r3, [r7, #68]	; 0x44
 80068cc:	e01f      	b.n	800690e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	891b      	ldrh	r3, [r3, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <find_volume+0x366>
 80068d6:	230d      	movs	r3, #13
 80068d8:	e08e      	b.n	80069f8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e0:	441a      	add	r2, r3
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80068e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d103      	bne.n	80068f6 <find_volume+0x382>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	e00a      	b.n	800690c <find_volume+0x398>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	4613      	mov	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4413      	add	r3, r2
 8006900:	085a      	lsrs	r2, r3, #1
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800690c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006918:	0a5b      	lsrs	r3, r3, #9
 800691a:	429a      	cmp	r2, r3
 800691c:	d201      	bcs.n	8006922 <find_volume+0x3ae>
 800691e:	230d      	movs	r3, #13
 8006920:	e06a      	b.n	80069f8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006928:	611a      	str	r2, [r3, #16]
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	2280      	movs	r2, #128	; 0x80
 8006936:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800693c:	2b03      	cmp	r3, #3
 800693e:	d149      	bne.n	80069d4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	3330      	adds	r3, #48	; 0x30
 8006944:	3330      	adds	r3, #48	; 0x30
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fb7e 	bl	8006048 <ld_word>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d140      	bne.n	80069d4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006954:	3301      	adds	r3, #1
 8006956:	4619      	mov	r1, r3
 8006958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800695a:	f7ff fcb5 	bl	80062c8 <move_window>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d137      	bne.n	80069d4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	2200      	movs	r2, #0
 8006968:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	3330      	adds	r3, #48	; 0x30
 800696e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fb68 	bl	8006048 <ld_word>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006980:	429a      	cmp	r2, r3
 8006982:	d127      	bne.n	80069d4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	3330      	adds	r3, #48	; 0x30
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fb75 	bl	8006078 <ld_dword>
 800698e:	4602      	mov	r2, r0
 8006990:	4b1b      	ldr	r3, [pc, #108]	; (8006a00 <find_volume+0x48c>)
 8006992:	429a      	cmp	r2, r3
 8006994:	d11e      	bne.n	80069d4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	3330      	adds	r3, #48	; 0x30
 800699a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fb6a 	bl	8006078 <ld_dword>
 80069a4:	4602      	mov	r2, r0
 80069a6:	4b17      	ldr	r3, [pc, #92]	; (8006a04 <find_volume+0x490>)
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d113      	bne.n	80069d4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	3330      	adds	r3, #48	; 0x30
 80069b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fb5f 	bl	8006078 <ld_dword>
 80069ba:	4602      	mov	r2, r0
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	3330      	adds	r3, #48	; 0x30
 80069c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fb55 	bl	8006078 <ld_dword>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80069da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <find_volume+0x494>)
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <find_volume+0x494>)
 80069e6:	801a      	strh	r2, [r3, #0]
 80069e8:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <find_volume+0x494>)
 80069ea:	881a      	ldrh	r2, [r3, #0]
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80069f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069f2:	f7ff fc01 	bl	80061f8 <clear_lock>
#endif
	return FR_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3758      	adds	r7, #88	; 0x58
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	41615252 	.word	0x41615252
 8006a04:	61417272 	.word	0x61417272
 8006a08:	20000100 	.word	0x20000100

08006a0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006a16:	2309      	movs	r3, #9
 8006a18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01c      	beq.n	8006a5a <validate+0x4e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d018      	beq.n	8006a5a <validate+0x4e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d013      	beq.n	8006a5a <validate+0x4e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	889a      	ldrh	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	88db      	ldrh	r3, [r3, #6]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d10c      	bne.n	8006a5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fa60 	bl	8005f0c <disk_status>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <validate+0x4e>
			res = FR_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <validate+0x5a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	e000      	b.n	8006a68 <validate+0x5c>
 8006a66:	2300      	movs	r3, #0
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	6013      	str	r3, [r2, #0]
	return res;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fcd6 	bl	8006440 <get_ldnumber>
 8006a94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da01      	bge.n	8006aa0 <f_mount+0x28>
 8006a9c:	230b      	movs	r3, #11
 8006a9e:	e02b      	b.n	8006af8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006aa0:	4a17      	ldr	r2, [pc, #92]	; (8006b00 <f_mount+0x88>)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ab0:	69b8      	ldr	r0, [r7, #24]
 8006ab2:	f7ff fba1 	bl	80061f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	490d      	ldr	r1, [pc, #52]	; (8006b00 <f_mount+0x88>)
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <f_mount+0x66>
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d001      	beq.n	8006ae2 <f_mount+0x6a>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e00a      	b.n	8006af8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ae2:	f107 010c 	add.w	r1, r7, #12
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	2200      	movs	r2, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fd41 	bl	8006574 <find_volume>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	200000fc 	.word	0x200000fc

08006b04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f107 0208 	add.w	r2, r7, #8
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff79 	bl	8006a0c <validate>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d168      	bne.n	8006bf6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	7d1b      	ldrb	r3, [r3, #20]
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d062      	beq.n	8006bf6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7d1b      	ldrb	r3, [r3, #20]
 8006b34:	b25b      	sxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da15      	bge.n	8006b66 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	7858      	ldrb	r0, [r3, #1]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f7ff fa3f 	bl	8005fcc <disk_write>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <f_sync+0x54>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e04f      	b.n	8006bf8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7d1b      	ldrb	r3, [r3, #20]
 8006b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006b66:	f7ff f973 	bl	8005e50 <get_fattime>
 8006b6a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f7ff fba7 	bl	80062c8 <move_window>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d138      	bne.n	8006bf6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	330b      	adds	r3, #11
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	330b      	adds	r3, #11
 8006b94:	f042 0220 	orr.w	r2, r2, #32
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	f7ff fc2a 	bl	8006400 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f103 021c 	add.w	r2, r3, #28
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7ff fa9b 	bl	80060f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3316      	adds	r3, #22
 8006bc2:	6939      	ldr	r1, [r7, #16]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff fa95 	bl	80060f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3312      	adds	r3, #18
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fa74 	bl	80060be <st_word>
					fs->wflag = 1;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fba0 	bl	8006324 <sync_fs>
 8006be4:	4603      	mov	r3, r0
 8006be6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7d1b      	ldrb	r3, [r3, #20]
 8006bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ff7b 	bl	8006b04 <f_sync>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d118      	bne.n	8006c4a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f107 0208 	add.w	r2, r7, #8
 8006c1e:	4611      	mov	r1, r2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fef3 	bl	8006a0c <validate>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10c      	bne.n	8006c4a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff faa3 	bl	8006180 <dec_lock>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006c6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006c6c:	7a5b      	ldrb	r3, [r3, #9]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d131      	bne.n	8006cd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006c74:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006c76:	7a5b      	ldrb	r3, [r3, #9]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006c7e:	2100      	movs	r1, #0
 8006c80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006c82:	4b19      	ldr	r3, [pc, #100]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006c84:	7a5b      	ldrb	r3, [r3, #9]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006c92:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006c94:	7a5b      	ldrb	r3, [r3, #9]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	79fa      	ldrb	r2, [r7, #7]
 8006ca0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006ca4:	7a5b      	ldrb	r3, [r3, #9]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	b2d1      	uxtb	r1, r2
 8006cac:	4a0e      	ldr	r2, [pc, #56]	; (8006ce8 <FATFS_LinkDriverEx+0x94>)
 8006cae:	7251      	strb	r1, [r2, #9]
 8006cb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006cb2:	7dbb      	ldrb	r3, [r7, #22]
 8006cb4:	3330      	adds	r3, #48	; 0x30
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	223a      	movs	r2, #58	; 0x3a
 8006cc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	222f      	movs	r2, #47	; 0x2f
 8006cca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3303      	adds	r3, #3
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000124 	.word	0x20000124

08006cec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff ffaa 	bl	8006c54 <FATFS_LinkDriverEx>
 8006d00:	4603      	mov	r3, r0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <__errno>:
 8006d0c:	4b01      	ldr	r3, [pc, #4]	; (8006d14 <__errno+0x8>)
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000024 	.word	0x20000024

08006d18 <__libc_init_array>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4e0d      	ldr	r6, [pc, #52]	; (8006d50 <__libc_init_array+0x38>)
 8006d1c:	4c0d      	ldr	r4, [pc, #52]	; (8006d54 <__libc_init_array+0x3c>)
 8006d1e:	1ba4      	subs	r4, r4, r6
 8006d20:	10a4      	asrs	r4, r4, #2
 8006d22:	2500      	movs	r5, #0
 8006d24:	42a5      	cmp	r5, r4
 8006d26:	d109      	bne.n	8006d3c <__libc_init_array+0x24>
 8006d28:	4e0b      	ldr	r6, [pc, #44]	; (8006d58 <__libc_init_array+0x40>)
 8006d2a:	4c0c      	ldr	r4, [pc, #48]	; (8006d5c <__libc_init_array+0x44>)
 8006d2c:	f000 fc26 	bl	800757c <_init>
 8006d30:	1ba4      	subs	r4, r4, r6
 8006d32:	10a4      	asrs	r4, r4, #2
 8006d34:	2500      	movs	r5, #0
 8006d36:	42a5      	cmp	r5, r4
 8006d38:	d105      	bne.n	8006d46 <__libc_init_array+0x2e>
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d40:	4798      	blx	r3
 8006d42:	3501      	adds	r5, #1
 8006d44:	e7ee      	b.n	8006d24 <__libc_init_array+0xc>
 8006d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d4a:	4798      	blx	r3
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	e7f2      	b.n	8006d36 <__libc_init_array+0x1e>
 8006d50:	08007658 	.word	0x08007658
 8006d54:	08007658 	.word	0x08007658
 8006d58:	08007658 	.word	0x08007658
 8006d5c:	0800765c 	.word	0x0800765c

08006d60 <memset>:
 8006d60:	4402      	add	r2, r0
 8006d62:	4603      	mov	r3, r0
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d100      	bne.n	8006d6a <memset+0xa>
 8006d68:	4770      	bx	lr
 8006d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6e:	e7f9      	b.n	8006d64 <memset+0x4>

08006d70 <siprintf>:
 8006d70:	b40e      	push	{r1, r2, r3}
 8006d72:	b500      	push	{lr}
 8006d74:	b09c      	sub	sp, #112	; 0x70
 8006d76:	ab1d      	add	r3, sp, #116	; 0x74
 8006d78:	9002      	str	r0, [sp, #8]
 8006d7a:	9006      	str	r0, [sp, #24]
 8006d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d80:	4809      	ldr	r0, [pc, #36]	; (8006da8 <siprintf+0x38>)
 8006d82:	9107      	str	r1, [sp, #28]
 8006d84:	9104      	str	r1, [sp, #16]
 8006d86:	4909      	ldr	r1, [pc, #36]	; (8006dac <siprintf+0x3c>)
 8006d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d8c:	9105      	str	r1, [sp, #20]
 8006d8e:	6800      	ldr	r0, [r0, #0]
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	a902      	add	r1, sp, #8
 8006d94:	f000 f866 	bl	8006e64 <_svfiprintf_r>
 8006d98:	9b02      	ldr	r3, [sp, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	b01c      	add	sp, #112	; 0x70
 8006da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006da4:	b003      	add	sp, #12
 8006da6:	4770      	bx	lr
 8006da8:	20000024 	.word	0x20000024
 8006dac:	ffff0208 	.word	0xffff0208

08006db0 <__ssputs_r>:
 8006db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	688e      	ldr	r6, [r1, #8]
 8006db6:	429e      	cmp	r6, r3
 8006db8:	4682      	mov	sl, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4690      	mov	r8, r2
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	d837      	bhi.n	8006e32 <__ssputs_r+0x82>
 8006dc2:	898a      	ldrh	r2, [r1, #12]
 8006dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dc8:	d031      	beq.n	8006e2e <__ssputs_r+0x7e>
 8006dca:	6825      	ldr	r5, [r4, #0]
 8006dcc:	6909      	ldr	r1, [r1, #16]
 8006dce:	1a6f      	subs	r7, r5, r1
 8006dd0:	6965      	ldr	r5, [r4, #20]
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ddc:	f109 0301 	add.w	r3, r9, #1
 8006de0:	443b      	add	r3, r7
 8006de2:	429d      	cmp	r5, r3
 8006de4:	bf38      	it	cc
 8006de6:	461d      	movcc	r5, r3
 8006de8:	0553      	lsls	r3, r2, #21
 8006dea:	d530      	bpl.n	8006e4e <__ssputs_r+0x9e>
 8006dec:	4629      	mov	r1, r5
 8006dee:	f000 fb2b 	bl	8007448 <_malloc_r>
 8006df2:	4606      	mov	r6, r0
 8006df4:	b950      	cbnz	r0, 8006e0c <__ssputs_r+0x5c>
 8006df6:	230c      	movs	r3, #12
 8006df8:	f8ca 3000 	str.w	r3, [sl]
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0c:	463a      	mov	r2, r7
 8006e0e:	6921      	ldr	r1, [r4, #16]
 8006e10:	f000 faa8 	bl	8007364 <memcpy>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	6126      	str	r6, [r4, #16]
 8006e22:	6165      	str	r5, [r4, #20]
 8006e24:	443e      	add	r6, r7
 8006e26:	1bed      	subs	r5, r5, r7
 8006e28:	6026      	str	r6, [r4, #0]
 8006e2a:	60a5      	str	r5, [r4, #8]
 8006e2c:	464e      	mov	r6, r9
 8006e2e:	454e      	cmp	r6, r9
 8006e30:	d900      	bls.n	8006e34 <__ssputs_r+0x84>
 8006e32:	464e      	mov	r6, r9
 8006e34:	4632      	mov	r2, r6
 8006e36:	4641      	mov	r1, r8
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	f000 fa9e 	bl	800737a <memmove>
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	1b9b      	subs	r3, r3, r6
 8006e42:	60a3      	str	r3, [r4, #8]
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	441e      	add	r6, r3
 8006e48:	6026      	str	r6, [r4, #0]
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e7dc      	b.n	8006e08 <__ssputs_r+0x58>
 8006e4e:	462a      	mov	r2, r5
 8006e50:	f000 fb54 	bl	80074fc <_realloc_r>
 8006e54:	4606      	mov	r6, r0
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d1e2      	bne.n	8006e20 <__ssputs_r+0x70>
 8006e5a:	6921      	ldr	r1, [r4, #16]
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	f000 faa5 	bl	80073ac <_free_r>
 8006e62:	e7c8      	b.n	8006df6 <__ssputs_r+0x46>

08006e64 <_svfiprintf_r>:
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	461d      	mov	r5, r3
 8006e6a:	898b      	ldrh	r3, [r1, #12]
 8006e6c:	061f      	lsls	r7, r3, #24
 8006e6e:	b09d      	sub	sp, #116	; 0x74
 8006e70:	4680      	mov	r8, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4616      	mov	r6, r2
 8006e76:	d50f      	bpl.n	8006e98 <_svfiprintf_r+0x34>
 8006e78:	690b      	ldr	r3, [r1, #16]
 8006e7a:	b96b      	cbnz	r3, 8006e98 <_svfiprintf_r+0x34>
 8006e7c:	2140      	movs	r1, #64	; 0x40
 8006e7e:	f000 fae3 	bl	8007448 <_malloc_r>
 8006e82:	6020      	str	r0, [r4, #0]
 8006e84:	6120      	str	r0, [r4, #16]
 8006e86:	b928      	cbnz	r0, 8006e94 <_svfiprintf_r+0x30>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	f8c8 3000 	str.w	r3, [r8]
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e92:	e0c8      	b.n	8007026 <_svfiprintf_r+0x1c2>
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	6163      	str	r3, [r4, #20]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ea2:	2330      	movs	r3, #48	; 0x30
 8006ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ea8:	9503      	str	r5, [sp, #12]
 8006eaa:	f04f 0b01 	mov.w	fp, #1
 8006eae:	4637      	mov	r7, r6
 8006eb0:	463d      	mov	r5, r7
 8006eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006eb6:	b10b      	cbz	r3, 8006ebc <_svfiprintf_r+0x58>
 8006eb8:	2b25      	cmp	r3, #37	; 0x25
 8006eba:	d13e      	bne.n	8006f3a <_svfiprintf_r+0xd6>
 8006ebc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ec0:	d00b      	beq.n	8006eda <_svfiprintf_r+0x76>
 8006ec2:	4653      	mov	r3, sl
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4640      	mov	r0, r8
 8006eca:	f7ff ff71 	bl	8006db0 <__ssputs_r>
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f000 80a4 	beq.w	800701c <_svfiprintf_r+0x1b8>
 8006ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed6:	4453      	add	r3, sl
 8006ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eda:	783b      	ldrb	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 809d 	beq.w	800701c <_svfiprintf_r+0x1b8>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ef6:	462f      	mov	r7, r5
 8006ef8:	2205      	movs	r2, #5
 8006efa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006efe:	4850      	ldr	r0, [pc, #320]	; (8007040 <_svfiprintf_r+0x1dc>)
 8006f00:	f7f9 f986 	bl	8000210 <memchr>
 8006f04:	9b04      	ldr	r3, [sp, #16]
 8006f06:	b9d0      	cbnz	r0, 8006f3e <_svfiprintf_r+0xda>
 8006f08:	06d9      	lsls	r1, r3, #27
 8006f0a:	bf44      	itt	mi
 8006f0c:	2220      	movmi	r2, #32
 8006f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f12:	071a      	lsls	r2, r3, #28
 8006f14:	bf44      	itt	mi
 8006f16:	222b      	movmi	r2, #43	; 0x2b
 8006f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f1c:	782a      	ldrb	r2, [r5, #0]
 8006f1e:	2a2a      	cmp	r2, #42	; 0x2a
 8006f20:	d015      	beq.n	8006f4e <_svfiprintf_r+0xea>
 8006f22:	9a07      	ldr	r2, [sp, #28]
 8006f24:	462f      	mov	r7, r5
 8006f26:	2000      	movs	r0, #0
 8006f28:	250a      	movs	r5, #10
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f30:	3b30      	subs	r3, #48	; 0x30
 8006f32:	2b09      	cmp	r3, #9
 8006f34:	d94d      	bls.n	8006fd2 <_svfiprintf_r+0x16e>
 8006f36:	b1b8      	cbz	r0, 8006f68 <_svfiprintf_r+0x104>
 8006f38:	e00f      	b.n	8006f5a <_svfiprintf_r+0xf6>
 8006f3a:	462f      	mov	r7, r5
 8006f3c:	e7b8      	b.n	8006eb0 <_svfiprintf_r+0x4c>
 8006f3e:	4a40      	ldr	r2, [pc, #256]	; (8007040 <_svfiprintf_r+0x1dc>)
 8006f40:	1a80      	subs	r0, r0, r2
 8006f42:	fa0b f000 	lsl.w	r0, fp, r0
 8006f46:	4318      	orrs	r0, r3
 8006f48:	9004      	str	r0, [sp, #16]
 8006f4a:	463d      	mov	r5, r7
 8006f4c:	e7d3      	b.n	8006ef6 <_svfiprintf_r+0x92>
 8006f4e:	9a03      	ldr	r2, [sp, #12]
 8006f50:	1d11      	adds	r1, r2, #4
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	9103      	str	r1, [sp, #12]
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	db01      	blt.n	8006f5e <_svfiprintf_r+0xfa>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e004      	b.n	8006f68 <_svfiprintf_r+0x104>
 8006f5e:	4252      	negs	r2, r2
 8006f60:	f043 0302 	orr.w	r3, r3, #2
 8006f64:	9207      	str	r2, [sp, #28]
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	783b      	ldrb	r3, [r7, #0]
 8006f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f6c:	d10c      	bne.n	8006f88 <_svfiprintf_r+0x124>
 8006f6e:	787b      	ldrb	r3, [r7, #1]
 8006f70:	2b2a      	cmp	r3, #42	; 0x2a
 8006f72:	d133      	bne.n	8006fdc <_svfiprintf_r+0x178>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	1d1a      	adds	r2, r3, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	9203      	str	r2, [sp, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bfb8      	it	lt
 8006f80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f84:	3702      	adds	r7, #2
 8006f86:	9305      	str	r3, [sp, #20]
 8006f88:	4d2e      	ldr	r5, [pc, #184]	; (8007044 <_svfiprintf_r+0x1e0>)
 8006f8a:	7839      	ldrb	r1, [r7, #0]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f7f9 f93e 	bl	8000210 <memchr>
 8006f94:	b138      	cbz	r0, 8006fa6 <_svfiprintf_r+0x142>
 8006f96:	2340      	movs	r3, #64	; 0x40
 8006f98:	1b40      	subs	r0, r0, r5
 8006f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	4303      	orrs	r3, r0
 8006fa2:	3701      	adds	r7, #1
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	7839      	ldrb	r1, [r7, #0]
 8006fa8:	4827      	ldr	r0, [pc, #156]	; (8007048 <_svfiprintf_r+0x1e4>)
 8006faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fae:	2206      	movs	r2, #6
 8006fb0:	1c7e      	adds	r6, r7, #1
 8006fb2:	f7f9 f92d 	bl	8000210 <memchr>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d038      	beq.n	800702c <_svfiprintf_r+0x1c8>
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <_svfiprintf_r+0x1e8>)
 8006fbc:	bb13      	cbnz	r3, 8007004 <_svfiprintf_r+0x1a0>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	3307      	adds	r3, #7
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	444b      	add	r3, r9
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	e76d      	b.n	8006eae <_svfiprintf_r+0x4a>
 8006fd2:	fb05 3202 	mla	r2, r5, r2, r3
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	460f      	mov	r7, r1
 8006fda:	e7a6      	b.n	8006f2a <_svfiprintf_r+0xc6>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	3701      	adds	r7, #1
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	250a      	movs	r5, #10
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fec:	3a30      	subs	r2, #48	; 0x30
 8006fee:	2a09      	cmp	r2, #9
 8006ff0:	d903      	bls.n	8006ffa <_svfiprintf_r+0x196>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0c8      	beq.n	8006f88 <_svfiprintf_r+0x124>
 8006ff6:	9105      	str	r1, [sp, #20]
 8006ff8:	e7c6      	b.n	8006f88 <_svfiprintf_r+0x124>
 8006ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8006ffe:	2301      	movs	r3, #1
 8007000:	4607      	mov	r7, r0
 8007002:	e7f0      	b.n	8006fe6 <_svfiprintf_r+0x182>
 8007004:	ab03      	add	r3, sp, #12
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	4622      	mov	r2, r4
 800700a:	4b11      	ldr	r3, [pc, #68]	; (8007050 <_svfiprintf_r+0x1ec>)
 800700c:	a904      	add	r1, sp, #16
 800700e:	4640      	mov	r0, r8
 8007010:	f3af 8000 	nop.w
 8007014:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007018:	4681      	mov	r9, r0
 800701a:	d1d6      	bne.n	8006fca <_svfiprintf_r+0x166>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	065b      	lsls	r3, r3, #25
 8007020:	f53f af35 	bmi.w	8006e8e <_svfiprintf_r+0x2a>
 8007024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007026:	b01d      	add	sp, #116	; 0x74
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4622      	mov	r2, r4
 8007032:	4b07      	ldr	r3, [pc, #28]	; (8007050 <_svfiprintf_r+0x1ec>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4640      	mov	r0, r8
 8007038:	f000 f882 	bl	8007140 <_printf_i>
 800703c:	e7ea      	b.n	8007014 <_svfiprintf_r+0x1b0>
 800703e:	bf00      	nop
 8007040:	0800761c 	.word	0x0800761c
 8007044:	08007622 	.word	0x08007622
 8007048:	08007626 	.word	0x08007626
 800704c:	00000000 	.word	0x00000000
 8007050:	08006db1 	.word	0x08006db1

08007054 <_printf_common>:
 8007054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	4691      	mov	r9, r2
 800705a:	461f      	mov	r7, r3
 800705c:	688a      	ldr	r2, [r1, #8]
 800705e:	690b      	ldr	r3, [r1, #16]
 8007060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007064:	4293      	cmp	r3, r2
 8007066:	bfb8      	it	lt
 8007068:	4613      	movlt	r3, r2
 800706a:	f8c9 3000 	str.w	r3, [r9]
 800706e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007072:	4606      	mov	r6, r0
 8007074:	460c      	mov	r4, r1
 8007076:	b112      	cbz	r2, 800707e <_printf_common+0x2a>
 8007078:	3301      	adds	r3, #1
 800707a:	f8c9 3000 	str.w	r3, [r9]
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	0699      	lsls	r1, r3, #26
 8007082:	bf42      	ittt	mi
 8007084:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007088:	3302      	addmi	r3, #2
 800708a:	f8c9 3000 	strmi.w	r3, [r9]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	f015 0506 	ands.w	r5, r5, #6
 8007094:	d107      	bne.n	80070a6 <_printf_common+0x52>
 8007096:	f104 0a19 	add.w	sl, r4, #25
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	f8d9 2000 	ldr.w	r2, [r9]
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	42ab      	cmp	r3, r5
 80070a4:	dc28      	bgt.n	80070f8 <_printf_common+0xa4>
 80070a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	3300      	adds	r3, #0
 80070ae:	bf18      	it	ne
 80070b0:	2301      	movne	r3, #1
 80070b2:	0692      	lsls	r2, r2, #26
 80070b4:	d42d      	bmi.n	8007112 <_printf_common+0xbe>
 80070b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070ba:	4639      	mov	r1, r7
 80070bc:	4630      	mov	r0, r6
 80070be:	47c0      	blx	r8
 80070c0:	3001      	adds	r0, #1
 80070c2:	d020      	beq.n	8007106 <_printf_common+0xb2>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	68e5      	ldr	r5, [r4, #12]
 80070c8:	f8d9 2000 	ldr.w	r2, [r9]
 80070cc:	f003 0306 	and.w	r3, r3, #6
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	bf08      	it	eq
 80070d4:	1aad      	subeq	r5, r5, r2
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	6922      	ldr	r2, [r4, #16]
 80070da:	bf0c      	ite	eq
 80070dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e0:	2500      	movne	r5, #0
 80070e2:	4293      	cmp	r3, r2
 80070e4:	bfc4      	itt	gt
 80070e6:	1a9b      	subgt	r3, r3, r2
 80070e8:	18ed      	addgt	r5, r5, r3
 80070ea:	f04f 0900 	mov.w	r9, #0
 80070ee:	341a      	adds	r4, #26
 80070f0:	454d      	cmp	r5, r9
 80070f2:	d11a      	bne.n	800712a <_printf_common+0xd6>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e008      	b.n	800710a <_printf_common+0xb6>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4652      	mov	r2, sl
 80070fc:	4639      	mov	r1, r7
 80070fe:	4630      	mov	r0, r6
 8007100:	47c0      	blx	r8
 8007102:	3001      	adds	r0, #1
 8007104:	d103      	bne.n	800710e <_printf_common+0xba>
 8007106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800710a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710e:	3501      	adds	r5, #1
 8007110:	e7c3      	b.n	800709a <_printf_common+0x46>
 8007112:	18e1      	adds	r1, r4, r3
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	2030      	movs	r0, #48	; 0x30
 8007118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800711c:	4422      	add	r2, r4
 800711e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007122:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007126:	3302      	adds	r3, #2
 8007128:	e7c5      	b.n	80070b6 <_printf_common+0x62>
 800712a:	2301      	movs	r3, #1
 800712c:	4622      	mov	r2, r4
 800712e:	4639      	mov	r1, r7
 8007130:	4630      	mov	r0, r6
 8007132:	47c0      	blx	r8
 8007134:	3001      	adds	r0, #1
 8007136:	d0e6      	beq.n	8007106 <_printf_common+0xb2>
 8007138:	f109 0901 	add.w	r9, r9, #1
 800713c:	e7d8      	b.n	80070f0 <_printf_common+0x9c>
	...

08007140 <_printf_i>:
 8007140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007144:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007148:	460c      	mov	r4, r1
 800714a:	7e09      	ldrb	r1, [r1, #24]
 800714c:	b085      	sub	sp, #20
 800714e:	296e      	cmp	r1, #110	; 0x6e
 8007150:	4617      	mov	r7, r2
 8007152:	4606      	mov	r6, r0
 8007154:	4698      	mov	r8, r3
 8007156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007158:	f000 80b3 	beq.w	80072c2 <_printf_i+0x182>
 800715c:	d822      	bhi.n	80071a4 <_printf_i+0x64>
 800715e:	2963      	cmp	r1, #99	; 0x63
 8007160:	d036      	beq.n	80071d0 <_printf_i+0x90>
 8007162:	d80a      	bhi.n	800717a <_printf_i+0x3a>
 8007164:	2900      	cmp	r1, #0
 8007166:	f000 80b9 	beq.w	80072dc <_printf_i+0x19c>
 800716a:	2958      	cmp	r1, #88	; 0x58
 800716c:	f000 8083 	beq.w	8007276 <_printf_i+0x136>
 8007170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007174:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007178:	e032      	b.n	80071e0 <_printf_i+0xa0>
 800717a:	2964      	cmp	r1, #100	; 0x64
 800717c:	d001      	beq.n	8007182 <_printf_i+0x42>
 800717e:	2969      	cmp	r1, #105	; 0x69
 8007180:	d1f6      	bne.n	8007170 <_printf_i+0x30>
 8007182:	6820      	ldr	r0, [r4, #0]
 8007184:	6813      	ldr	r3, [r2, #0]
 8007186:	0605      	lsls	r5, r0, #24
 8007188:	f103 0104 	add.w	r1, r3, #4
 800718c:	d52a      	bpl.n	80071e4 <_printf_i+0xa4>
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6011      	str	r1, [r2, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	da03      	bge.n	800719e <_printf_i+0x5e>
 8007196:	222d      	movs	r2, #45	; 0x2d
 8007198:	425b      	negs	r3, r3
 800719a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800719e:	486f      	ldr	r0, [pc, #444]	; (800735c <_printf_i+0x21c>)
 80071a0:	220a      	movs	r2, #10
 80071a2:	e039      	b.n	8007218 <_printf_i+0xd8>
 80071a4:	2973      	cmp	r1, #115	; 0x73
 80071a6:	f000 809d 	beq.w	80072e4 <_printf_i+0x1a4>
 80071aa:	d808      	bhi.n	80071be <_printf_i+0x7e>
 80071ac:	296f      	cmp	r1, #111	; 0x6f
 80071ae:	d020      	beq.n	80071f2 <_printf_i+0xb2>
 80071b0:	2970      	cmp	r1, #112	; 0x70
 80071b2:	d1dd      	bne.n	8007170 <_printf_i+0x30>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	f043 0320 	orr.w	r3, r3, #32
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	e003      	b.n	80071c6 <_printf_i+0x86>
 80071be:	2975      	cmp	r1, #117	; 0x75
 80071c0:	d017      	beq.n	80071f2 <_printf_i+0xb2>
 80071c2:	2978      	cmp	r1, #120	; 0x78
 80071c4:	d1d4      	bne.n	8007170 <_printf_i+0x30>
 80071c6:	2378      	movs	r3, #120	; 0x78
 80071c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071cc:	4864      	ldr	r0, [pc, #400]	; (8007360 <_printf_i+0x220>)
 80071ce:	e055      	b.n	800727c <_printf_i+0x13c>
 80071d0:	6813      	ldr	r3, [r2, #0]
 80071d2:	1d19      	adds	r1, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6011      	str	r1, [r2, #0]
 80071d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e0:	2301      	movs	r3, #1
 80071e2:	e08c      	b.n	80072fe <_printf_i+0x1be>
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6011      	str	r1, [r2, #0]
 80071e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071ec:	bf18      	it	ne
 80071ee:	b21b      	sxthne	r3, r3
 80071f0:	e7cf      	b.n	8007192 <_printf_i+0x52>
 80071f2:	6813      	ldr	r3, [r2, #0]
 80071f4:	6825      	ldr	r5, [r4, #0]
 80071f6:	1d18      	adds	r0, r3, #4
 80071f8:	6010      	str	r0, [r2, #0]
 80071fa:	0628      	lsls	r0, r5, #24
 80071fc:	d501      	bpl.n	8007202 <_printf_i+0xc2>
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	e002      	b.n	8007208 <_printf_i+0xc8>
 8007202:	0668      	lsls	r0, r5, #25
 8007204:	d5fb      	bpl.n	80071fe <_printf_i+0xbe>
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	4854      	ldr	r0, [pc, #336]	; (800735c <_printf_i+0x21c>)
 800720a:	296f      	cmp	r1, #111	; 0x6f
 800720c:	bf14      	ite	ne
 800720e:	220a      	movne	r2, #10
 8007210:	2208      	moveq	r2, #8
 8007212:	2100      	movs	r1, #0
 8007214:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007218:	6865      	ldr	r5, [r4, #4]
 800721a:	60a5      	str	r5, [r4, #8]
 800721c:	2d00      	cmp	r5, #0
 800721e:	f2c0 8095 	blt.w	800734c <_printf_i+0x20c>
 8007222:	6821      	ldr	r1, [r4, #0]
 8007224:	f021 0104 	bic.w	r1, r1, #4
 8007228:	6021      	str	r1, [r4, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d13d      	bne.n	80072aa <_printf_i+0x16a>
 800722e:	2d00      	cmp	r5, #0
 8007230:	f040 808e 	bne.w	8007350 <_printf_i+0x210>
 8007234:	4665      	mov	r5, ip
 8007236:	2a08      	cmp	r2, #8
 8007238:	d10b      	bne.n	8007252 <_printf_i+0x112>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	07db      	lsls	r3, r3, #31
 800723e:	d508      	bpl.n	8007252 <_printf_i+0x112>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	6862      	ldr	r2, [r4, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	bfde      	ittt	le
 8007248:	2330      	movle	r3, #48	; 0x30
 800724a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800724e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007252:	ebac 0305 	sub.w	r3, ip, r5
 8007256:	6123      	str	r3, [r4, #16]
 8007258:	f8cd 8000 	str.w	r8, [sp]
 800725c:	463b      	mov	r3, r7
 800725e:	aa03      	add	r2, sp, #12
 8007260:	4621      	mov	r1, r4
 8007262:	4630      	mov	r0, r6
 8007264:	f7ff fef6 	bl	8007054 <_printf_common>
 8007268:	3001      	adds	r0, #1
 800726a:	d14d      	bne.n	8007308 <_printf_i+0x1c8>
 800726c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007270:	b005      	add	sp, #20
 8007272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007276:	4839      	ldr	r0, [pc, #228]	; (800735c <_printf_i+0x21c>)
 8007278:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	6821      	ldr	r1, [r4, #0]
 8007280:	1d1d      	adds	r5, r3, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6015      	str	r5, [r2, #0]
 8007286:	060a      	lsls	r2, r1, #24
 8007288:	d50b      	bpl.n	80072a2 <_printf_i+0x162>
 800728a:	07ca      	lsls	r2, r1, #31
 800728c:	bf44      	itt	mi
 800728e:	f041 0120 	orrmi.w	r1, r1, #32
 8007292:	6021      	strmi	r1, [r4, #0]
 8007294:	b91b      	cbnz	r3, 800729e <_printf_i+0x15e>
 8007296:	6822      	ldr	r2, [r4, #0]
 8007298:	f022 0220 	bic.w	r2, r2, #32
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	2210      	movs	r2, #16
 80072a0:	e7b7      	b.n	8007212 <_printf_i+0xd2>
 80072a2:	064d      	lsls	r5, r1, #25
 80072a4:	bf48      	it	mi
 80072a6:	b29b      	uxthmi	r3, r3
 80072a8:	e7ef      	b.n	800728a <_printf_i+0x14a>
 80072aa:	4665      	mov	r5, ip
 80072ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80072b0:	fb02 3311 	mls	r3, r2, r1, r3
 80072b4:	5cc3      	ldrb	r3, [r0, r3]
 80072b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072ba:	460b      	mov	r3, r1
 80072bc:	2900      	cmp	r1, #0
 80072be:	d1f5      	bne.n	80072ac <_printf_i+0x16c>
 80072c0:	e7b9      	b.n	8007236 <_printf_i+0xf6>
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	6825      	ldr	r5, [r4, #0]
 80072c6:	6961      	ldr	r1, [r4, #20]
 80072c8:	1d18      	adds	r0, r3, #4
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	0628      	lsls	r0, r5, #24
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	d501      	bpl.n	80072d6 <_printf_i+0x196>
 80072d2:	6019      	str	r1, [r3, #0]
 80072d4:	e002      	b.n	80072dc <_printf_i+0x19c>
 80072d6:	066a      	lsls	r2, r5, #25
 80072d8:	d5fb      	bpl.n	80072d2 <_printf_i+0x192>
 80072da:	8019      	strh	r1, [r3, #0]
 80072dc:	2300      	movs	r3, #0
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	4665      	mov	r5, ip
 80072e2:	e7b9      	b.n	8007258 <_printf_i+0x118>
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	1d19      	adds	r1, r3, #4
 80072e8:	6011      	str	r1, [r2, #0]
 80072ea:	681d      	ldr	r5, [r3, #0]
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	2100      	movs	r1, #0
 80072f0:	4628      	mov	r0, r5
 80072f2:	f7f8 ff8d 	bl	8000210 <memchr>
 80072f6:	b108      	cbz	r0, 80072fc <_printf_i+0x1bc>
 80072f8:	1b40      	subs	r0, r0, r5
 80072fa:	6060      	str	r0, [r4, #4]
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	2300      	movs	r3, #0
 8007302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007306:	e7a7      	b.n	8007258 <_printf_i+0x118>
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	462a      	mov	r2, r5
 800730c:	4639      	mov	r1, r7
 800730e:	4630      	mov	r0, r6
 8007310:	47c0      	blx	r8
 8007312:	3001      	adds	r0, #1
 8007314:	d0aa      	beq.n	800726c <_printf_i+0x12c>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	079b      	lsls	r3, r3, #30
 800731a:	d413      	bmi.n	8007344 <_printf_i+0x204>
 800731c:	68e0      	ldr	r0, [r4, #12]
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	4298      	cmp	r0, r3
 8007322:	bfb8      	it	lt
 8007324:	4618      	movlt	r0, r3
 8007326:	e7a3      	b.n	8007270 <_printf_i+0x130>
 8007328:	2301      	movs	r3, #1
 800732a:	464a      	mov	r2, r9
 800732c:	4639      	mov	r1, r7
 800732e:	4630      	mov	r0, r6
 8007330:	47c0      	blx	r8
 8007332:	3001      	adds	r0, #1
 8007334:	d09a      	beq.n	800726c <_printf_i+0x12c>
 8007336:	3501      	adds	r5, #1
 8007338:	68e3      	ldr	r3, [r4, #12]
 800733a:	9a03      	ldr	r2, [sp, #12]
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	42ab      	cmp	r3, r5
 8007340:	dcf2      	bgt.n	8007328 <_printf_i+0x1e8>
 8007342:	e7eb      	b.n	800731c <_printf_i+0x1dc>
 8007344:	2500      	movs	r5, #0
 8007346:	f104 0919 	add.w	r9, r4, #25
 800734a:	e7f5      	b.n	8007338 <_printf_i+0x1f8>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1ac      	bne.n	80072aa <_printf_i+0x16a>
 8007350:	7803      	ldrb	r3, [r0, #0]
 8007352:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007356:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735a:	e76c      	b.n	8007236 <_printf_i+0xf6>
 800735c:	0800762d 	.word	0x0800762d
 8007360:	0800763e 	.word	0x0800763e

08007364 <memcpy>:
 8007364:	b510      	push	{r4, lr}
 8007366:	1e43      	subs	r3, r0, #1
 8007368:	440a      	add	r2, r1
 800736a:	4291      	cmp	r1, r2
 800736c:	d100      	bne.n	8007370 <memcpy+0xc>
 800736e:	bd10      	pop	{r4, pc}
 8007370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007378:	e7f7      	b.n	800736a <memcpy+0x6>

0800737a <memmove>:
 800737a:	4288      	cmp	r0, r1
 800737c:	b510      	push	{r4, lr}
 800737e:	eb01 0302 	add.w	r3, r1, r2
 8007382:	d807      	bhi.n	8007394 <memmove+0x1a>
 8007384:	1e42      	subs	r2, r0, #1
 8007386:	4299      	cmp	r1, r3
 8007388:	d00a      	beq.n	80073a0 <memmove+0x26>
 800738a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800738e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007392:	e7f8      	b.n	8007386 <memmove+0xc>
 8007394:	4283      	cmp	r3, r0
 8007396:	d9f5      	bls.n	8007384 <memmove+0xa>
 8007398:	1881      	adds	r1, r0, r2
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	42d3      	cmn	r3, r2
 800739e:	d100      	bne.n	80073a2 <memmove+0x28>
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80073aa:	e7f7      	b.n	800739c <memmove+0x22>

080073ac <_free_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4605      	mov	r5, r0
 80073b0:	2900      	cmp	r1, #0
 80073b2:	d045      	beq.n	8007440 <_free_r+0x94>
 80073b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b8:	1f0c      	subs	r4, r1, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bfb8      	it	lt
 80073be:	18e4      	addlt	r4, r4, r3
 80073c0:	f000 f8d2 	bl	8007568 <__malloc_lock>
 80073c4:	4a1f      	ldr	r2, [pc, #124]	; (8007444 <_free_r+0x98>)
 80073c6:	6813      	ldr	r3, [r2, #0]
 80073c8:	4610      	mov	r0, r2
 80073ca:	b933      	cbnz	r3, 80073da <_free_r+0x2e>
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	6014      	str	r4, [r2, #0]
 80073d0:	4628      	mov	r0, r5
 80073d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d6:	f000 b8c8 	b.w	800756a <__malloc_unlock>
 80073da:	42a3      	cmp	r3, r4
 80073dc:	d90c      	bls.n	80073f8 <_free_r+0x4c>
 80073de:	6821      	ldr	r1, [r4, #0]
 80073e0:	1862      	adds	r2, r4, r1
 80073e2:	4293      	cmp	r3, r2
 80073e4:	bf04      	itt	eq
 80073e6:	681a      	ldreq	r2, [r3, #0]
 80073e8:	685b      	ldreq	r3, [r3, #4]
 80073ea:	6063      	str	r3, [r4, #4]
 80073ec:	bf04      	itt	eq
 80073ee:	1852      	addeq	r2, r2, r1
 80073f0:	6022      	streq	r2, [r4, #0]
 80073f2:	6004      	str	r4, [r0, #0]
 80073f4:	e7ec      	b.n	80073d0 <_free_r+0x24>
 80073f6:	4613      	mov	r3, r2
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	b10a      	cbz	r2, 8007400 <_free_r+0x54>
 80073fc:	42a2      	cmp	r2, r4
 80073fe:	d9fa      	bls.n	80073f6 <_free_r+0x4a>
 8007400:	6819      	ldr	r1, [r3, #0]
 8007402:	1858      	adds	r0, r3, r1
 8007404:	42a0      	cmp	r0, r4
 8007406:	d10b      	bne.n	8007420 <_free_r+0x74>
 8007408:	6820      	ldr	r0, [r4, #0]
 800740a:	4401      	add	r1, r0
 800740c:	1858      	adds	r0, r3, r1
 800740e:	4282      	cmp	r2, r0
 8007410:	6019      	str	r1, [r3, #0]
 8007412:	d1dd      	bne.n	80073d0 <_free_r+0x24>
 8007414:	6810      	ldr	r0, [r2, #0]
 8007416:	6852      	ldr	r2, [r2, #4]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	4401      	add	r1, r0
 800741c:	6019      	str	r1, [r3, #0]
 800741e:	e7d7      	b.n	80073d0 <_free_r+0x24>
 8007420:	d902      	bls.n	8007428 <_free_r+0x7c>
 8007422:	230c      	movs	r3, #12
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	e7d3      	b.n	80073d0 <_free_r+0x24>
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	1821      	adds	r1, r4, r0
 800742c:	428a      	cmp	r2, r1
 800742e:	bf04      	itt	eq
 8007430:	6811      	ldreq	r1, [r2, #0]
 8007432:	6852      	ldreq	r2, [r2, #4]
 8007434:	6062      	str	r2, [r4, #4]
 8007436:	bf04      	itt	eq
 8007438:	1809      	addeq	r1, r1, r0
 800743a:	6021      	streq	r1, [r4, #0]
 800743c:	605c      	str	r4, [r3, #4]
 800743e:	e7c7      	b.n	80073d0 <_free_r+0x24>
 8007440:	bd38      	pop	{r3, r4, r5, pc}
 8007442:	bf00      	nop
 8007444:	20000130 	.word	0x20000130

08007448 <_malloc_r>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	1ccd      	adds	r5, r1, #3
 800744c:	f025 0503 	bic.w	r5, r5, #3
 8007450:	3508      	adds	r5, #8
 8007452:	2d0c      	cmp	r5, #12
 8007454:	bf38      	it	cc
 8007456:	250c      	movcc	r5, #12
 8007458:	2d00      	cmp	r5, #0
 800745a:	4606      	mov	r6, r0
 800745c:	db01      	blt.n	8007462 <_malloc_r+0x1a>
 800745e:	42a9      	cmp	r1, r5
 8007460:	d903      	bls.n	800746a <_malloc_r+0x22>
 8007462:	230c      	movs	r3, #12
 8007464:	6033      	str	r3, [r6, #0]
 8007466:	2000      	movs	r0, #0
 8007468:	bd70      	pop	{r4, r5, r6, pc}
 800746a:	f000 f87d 	bl	8007568 <__malloc_lock>
 800746e:	4a21      	ldr	r2, [pc, #132]	; (80074f4 <_malloc_r+0xac>)
 8007470:	6814      	ldr	r4, [r2, #0]
 8007472:	4621      	mov	r1, r4
 8007474:	b991      	cbnz	r1, 800749c <_malloc_r+0x54>
 8007476:	4c20      	ldr	r4, [pc, #128]	; (80074f8 <_malloc_r+0xb0>)
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	b91b      	cbnz	r3, 8007484 <_malloc_r+0x3c>
 800747c:	4630      	mov	r0, r6
 800747e:	f000 f863 	bl	8007548 <_sbrk_r>
 8007482:	6020      	str	r0, [r4, #0]
 8007484:	4629      	mov	r1, r5
 8007486:	4630      	mov	r0, r6
 8007488:	f000 f85e 	bl	8007548 <_sbrk_r>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d124      	bne.n	80074da <_malloc_r+0x92>
 8007490:	230c      	movs	r3, #12
 8007492:	6033      	str	r3, [r6, #0]
 8007494:	4630      	mov	r0, r6
 8007496:	f000 f868 	bl	800756a <__malloc_unlock>
 800749a:	e7e4      	b.n	8007466 <_malloc_r+0x1e>
 800749c:	680b      	ldr	r3, [r1, #0]
 800749e:	1b5b      	subs	r3, r3, r5
 80074a0:	d418      	bmi.n	80074d4 <_malloc_r+0x8c>
 80074a2:	2b0b      	cmp	r3, #11
 80074a4:	d90f      	bls.n	80074c6 <_malloc_r+0x7e>
 80074a6:	600b      	str	r3, [r1, #0]
 80074a8:	50cd      	str	r5, [r1, r3]
 80074aa:	18cc      	adds	r4, r1, r3
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 f85c 	bl	800756a <__malloc_unlock>
 80074b2:	f104 000b 	add.w	r0, r4, #11
 80074b6:	1d23      	adds	r3, r4, #4
 80074b8:	f020 0007 	bic.w	r0, r0, #7
 80074bc:	1ac3      	subs	r3, r0, r3
 80074be:	d0d3      	beq.n	8007468 <_malloc_r+0x20>
 80074c0:	425a      	negs	r2, r3
 80074c2:	50e2      	str	r2, [r4, r3]
 80074c4:	e7d0      	b.n	8007468 <_malloc_r+0x20>
 80074c6:	428c      	cmp	r4, r1
 80074c8:	684b      	ldr	r3, [r1, #4]
 80074ca:	bf16      	itet	ne
 80074cc:	6063      	strne	r3, [r4, #4]
 80074ce:	6013      	streq	r3, [r2, #0]
 80074d0:	460c      	movne	r4, r1
 80074d2:	e7eb      	b.n	80074ac <_malloc_r+0x64>
 80074d4:	460c      	mov	r4, r1
 80074d6:	6849      	ldr	r1, [r1, #4]
 80074d8:	e7cc      	b.n	8007474 <_malloc_r+0x2c>
 80074da:	1cc4      	adds	r4, r0, #3
 80074dc:	f024 0403 	bic.w	r4, r4, #3
 80074e0:	42a0      	cmp	r0, r4
 80074e2:	d005      	beq.n	80074f0 <_malloc_r+0xa8>
 80074e4:	1a21      	subs	r1, r4, r0
 80074e6:	4630      	mov	r0, r6
 80074e8:	f000 f82e 	bl	8007548 <_sbrk_r>
 80074ec:	3001      	adds	r0, #1
 80074ee:	d0cf      	beq.n	8007490 <_malloc_r+0x48>
 80074f0:	6025      	str	r5, [r4, #0]
 80074f2:	e7db      	b.n	80074ac <_malloc_r+0x64>
 80074f4:	20000130 	.word	0x20000130
 80074f8:	20000134 	.word	0x20000134

080074fc <_realloc_r>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	4607      	mov	r7, r0
 8007500:	4614      	mov	r4, r2
 8007502:	460e      	mov	r6, r1
 8007504:	b921      	cbnz	r1, 8007510 <_realloc_r+0x14>
 8007506:	4611      	mov	r1, r2
 8007508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800750c:	f7ff bf9c 	b.w	8007448 <_malloc_r>
 8007510:	b922      	cbnz	r2, 800751c <_realloc_r+0x20>
 8007512:	f7ff ff4b 	bl	80073ac <_free_r>
 8007516:	4625      	mov	r5, r4
 8007518:	4628      	mov	r0, r5
 800751a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800751c:	f000 f826 	bl	800756c <_malloc_usable_size_r>
 8007520:	42a0      	cmp	r0, r4
 8007522:	d20f      	bcs.n	8007544 <_realloc_r+0x48>
 8007524:	4621      	mov	r1, r4
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff ff8e 	bl	8007448 <_malloc_r>
 800752c:	4605      	mov	r5, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	d0f2      	beq.n	8007518 <_realloc_r+0x1c>
 8007532:	4631      	mov	r1, r6
 8007534:	4622      	mov	r2, r4
 8007536:	f7ff ff15 	bl	8007364 <memcpy>
 800753a:	4631      	mov	r1, r6
 800753c:	4638      	mov	r0, r7
 800753e:	f7ff ff35 	bl	80073ac <_free_r>
 8007542:	e7e9      	b.n	8007518 <_realloc_r+0x1c>
 8007544:	4635      	mov	r5, r6
 8007546:	e7e7      	b.n	8007518 <_realloc_r+0x1c>

08007548 <_sbrk_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4c06      	ldr	r4, [pc, #24]	; (8007564 <_sbrk_r+0x1c>)
 800754c:	2300      	movs	r3, #0
 800754e:	4605      	mov	r5, r0
 8007550:	4608      	mov	r0, r1
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	f7fa fe80 	bl	8002258 <_sbrk>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_sbrk_r+0x1a>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	b103      	cbz	r3, 8007562 <_sbrk_r+0x1a>
 8007560:	602b      	str	r3, [r5, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	20001134 	.word	0x20001134

08007568 <__malloc_lock>:
 8007568:	4770      	bx	lr

0800756a <__malloc_unlock>:
 800756a:	4770      	bx	lr

0800756c <_malloc_usable_size_r>:
 800756c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007570:	1f18      	subs	r0, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	bfbc      	itt	lt
 8007576:	580b      	ldrlt	r3, [r1, r0]
 8007578:	18c0      	addlt	r0, r0, r3
 800757a:	4770      	bx	lr

0800757c <_init>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr

08007588 <_fini>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr
