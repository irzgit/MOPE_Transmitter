
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08008b74  08008b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ee4  08008ee4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eec  08008eec  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef0  08008ef0  00018ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e28  20000024  08008f18  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e4c  08008f18  00020e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abd1  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032a1  00000000  00000000  0003ac25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003dec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003f308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  000405d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c62  00000000  00000000  00064bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2b9b  00000000  00000000  00075810  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001483ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a8  00000000  00000000  00148428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008b5c 	.word	0x08008b5c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08008b5c 	.word	0x08008b5c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 f944 	bl	8001798 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 f93c 	bl	8001798 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 f934 	bl	8001798 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 f92c 	bl	8001798 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 f970 	bl	8001844 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08008bc8 	.word	0x08008bc8

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <Rf96_OutPower+0x28>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	4619      	mov	r1, r3
 8000582:	2009      	movs	r0, #9
 8000584:	f001 f908 	bl	8001798 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000588:	2187      	movs	r1, #135	; 0x87
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f001 f904 	bl	8001798 <SPIWrite>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08008bd4 	.word	0x08008bd4

0800059c <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Rf96_OCP+0x20>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	200b      	movs	r0, #11
 80005b0:	f001 f8f2 	bl	8001798 <SPIWrite>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	08008bd8 	.word	0x08008bd8

080005c0 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <Rf96_LNA+0x20>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	4619      	mov	r1, r3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 f8e0 	bl	8001798 <SPIWrite>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08008bdc 	.word	0x08008bdc

080005e4 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005f6:	210e      	movs	r1, #14
 80005f8:	201d      	movs	r0, #29
 80005fa:	f001 f8cd 	bl	8001798 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xC4);  // SF=12
 8000618:	21c4      	movs	r1, #196	; 0xc4
 800061a:	201e      	movs	r0, #30
 800061c:	f001 f8bc 	bl	8001798 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	201f      	movs	r0, #31
 8000628:	f001 f8b6 	bl	8001798 <SPIWrite>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2020      	movs	r0, #32
 800064a:	f001 f8a5 	bl	8001798 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2021      	movs	r0, #33	; 0x21
 8000656:	f001 f89f 	bl	8001798 <SPIWrite>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	4604      	mov	r4, r0
 800066a:	4608      	mov	r0, r1
 800066c:	4611      	mov	r1, r2
 800066e:	461a      	mov	r2, r3
 8000670:	4623      	mov	r3, r4
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
 8000678:	460b      	mov	r3, r1
 800067a:	717b      	strb	r3, [r7, #5]
 800067c:	4613      	mov	r3, r2
 800067e:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b2da      	uxtb	r2, r3
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b2da      	uxtb	r2, r3
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f001 f878 	bl	8001798 <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006b4:	21f7      	movs	r1, #247	; 0xf7
 80006b6:	2011      	movs	r0, #17
 80006b8:	f001 f86e 	bl	8001798 <SPIWrite>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006c4:	213f      	movs	r1, #63	; 0x3f
 80006c6:	2011      	movs	r0, #17
 80006c8:	f001 f866 	bl	8001798 <SPIWrite>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	2022      	movs	r0, #34	; 0x22
 80006e0:	f001 f85a 	bl	8001798 <SPIWrite>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4619      	mov	r1, r3
 80006fa:	200e      	movs	r0, #14
 80006fc:	f001 f84c 	bl	8001798 <SPIWrite>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	200f      	movs	r0, #15
 8000718:	f001 f83e 	bl	8001798 <SPIWrite>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4619      	mov	r1, r3
 8000732:	200d      	movs	r0, #13
 8000734:	f001 f830 	bl	8001798 <SPIWrite>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 8000744:	2185      	movs	r1, #133	; 0x85
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f826 	bl	8001798 <SPIWrite>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 8000754:	2183      	movs	r1, #131	; 0x83
 8000756:	2001      	movs	r0, #1
 8000758:	f001 f81e 	bl	8001798 <SPIWrite>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	2000      	movs	r0, #0
 8000774:	f001 f866 	bl	8001844 <BurstWrite>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000788:	2010      	movs	r0, #16
 800078a:	f000 ffe7 	bl	800175c <SPIRead>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4619      	mov	r1, r3
 8000796:	200d      	movs	r0, #13
 8000798:	f000 fffe 	bl	8001798 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079c:	2013      	movs	r0, #19
 800079e:	f000 ffdd 	bl	800175c <SPIRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	461a      	mov	r2, r3
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 f817 	bl	80017e0 <SPIBurstRead>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007be:	f7ff feb1 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c2:	f7ff feb7 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff febc 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fecf 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fee2 	bl	800059c <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fef1 	bl	80005c0 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	2007      	movs	r0, #7
 80007e4:	f7ff fefe 	bl	80005e4 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007ec:	2101      	movs	r1, #1
 80007ee:	2006      	movs	r0, #6
 80007f0:	f7ff ff09 	bl	8000606 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff ff1d 	bl	8000634 <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007fa:	210a      	movs	r1, #10
 80007fc:	2037      	movs	r0, #55	; 0x37
 80007fe:	f000 ffcb 	bl	8001798 <SPIWrite>
	SPIWrite(0x31,0xA3);
 8000802:	21a3      	movs	r1, #163	; 0xa3
 8000804:	2031      	movs	r0, #49	; 0x31
 8000806:	f000 ffc7 	bl	8001798 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 800080a:	f7ff fe83 	bl	8000514 <Rf96_Standby>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 8000816:	2100      	movs	r1, #0
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f000 ffbd 	bl	8001798 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800081e:	2302      	movs	r3, #2
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff ff1c 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800082a:	f7ff fe6b 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082e:	f7ff ff3f 	bl	80006b0 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000832:	202a      	movs	r0, #42	; 0x2a
 8000834:	f7ff ff4c 	bl	80006d0 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000838:	2080      	movs	r0, #128	; 0x80
 800083a:	f7ff ff57 	bl	80006ec <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	f7ff ff70 	bl	8000724 <Rf96_FIFO_point>

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800084c:	2100      	movs	r1, #0
 800084e:	2024      	movs	r0, #36	; 0x24
 8000850:	f000 ffa2 	bl	8001798 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000854:	2302      	movs	r3, #2
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff01 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000860:	f7ff ff2e 	bl	80006c0 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000864:	f7ff fe4e 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000868:	202a      	movs	r0, #42	; 0x2a
 800086a:	f7ff ff31 	bl	80006d0 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff ff4a 	bl	8000708 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff55 	bl	8000724 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 800087a:	f7ff ff61 	bl	8000740 <Rf96_RX_Continuous_mode>

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	4619      	mov	r1, r3
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff63 	bl	8000760 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800089a:	f7ff ff59 	bl	8000750 <Rf96_TX_mode>

	// Ждем пока появится прерывание

	while(1)
	{
		if(Get_NIRQ_Di0())
 800089e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <Rf96_LoRaTxPacket+0x3c>)
 80008a4:	f003 f882 	bl	80039ac <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f7      	beq.n	800089e <Rf96_LoRaTxPacket+0x1a>
		{
			// Сбрасываем флаги
			Rf96_LoRaClearIrq();
 80008ae:	f7ff fe29 	bl	8000504 <Rf96_LoRaClearIrq>
            // Заходим в Standby
			Rf96_Standby();
 80008b2:	f7ff fe2f 	bl	8000514 <Rf96_Standby>

			break;
 80008b6:	bf00      	nop
		}
	}


}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40020000 	.word	0x40020000

080008c4 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d4:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008d6:	e012      	b.n	80008fe <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008d8:	89fb      	ldrh	r3, [r7, #14]
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b21a      	sxth	r2, r3
 80008de:	89fb      	ldrh	r3, [r7, #14]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	1c59      	adds	r1, r3, #1
 80008ea:	6079      	str	r1, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4043      	eors	r3, r0
 80008f0:	4909      	ldr	r1, [pc, #36]	; (8000918 <Crc16+0x54>)
 80008f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	4053      	eors	r3, r2
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	1e5a      	subs	r2, r3, #1
 8000902:	807a      	strh	r2, [r7, #2]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1e7      	bne.n	80008d8 <Crc16+0x14>

    return crc;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	08008c44 	.word	0x08008c44

0800091c <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 8000926:	f7ff ff74 	bl	8000812 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e006      	b.n	800093e <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	4a19      	ldr	r2, [pc, #100]	; (8000998 <CommandToRadio+0x7c>)
 8000934:	2100      	movs	r1, #0
 8000936:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	3301      	adds	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b29      	cmp	r3, #41	; 0x29
 8000942:	d9f5      	bls.n	8000930 <CommandToRadio+0x14>
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <CommandToRadio+0x7c>)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 800094a:	2128      	movs	r1, #40	; 0x28
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <CommandToRadio+0x7c>)
 800094e:	f7ff ffb9 	bl	80008c4 <Crc16>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <CommandToRadio+0x80>)
 8000958:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <CommandToRadio+0x80>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	b29b      	uxth	r3, r3
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <CommandToRadio+0x7c>)
 8000966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <CommandToRadio+0x80>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <CommandToRadio+0x7c>)
 8000972:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000976:	2080      	movs	r0, #128	; 0x80
 8000978:	f7ff feb8 	bl	80006ec <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	f7ff fed1 	bl	8000724 <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 8000982:	f7ff fdbf 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000986:	212a      	movs	r1, #42	; 0x2a
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <CommandToRadio+0x7c>)
 800098a:	f7ff ff7b 	bl	8000884 <Rf96_LoRaTxPacket>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000394 	.word	0x20000394
 800099c:	20000044 	.word	0x20000044

080009a0 <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	460b      	mov	r3, r1
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4613      	mov	r3, r2
 80009b4:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	82fb      	strh	r3, [r7, #22]
 80009ba:	e01f      	b.n	80009fc <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 80009bc:	68f9      	ldr	r1, [r7, #12]
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <uint32_TO_charmass+0x70>)
 80009c0:	fba3 2301 	umull	r2, r3, r3, r1
 80009c4:	08da      	lsrs	r2, r3, #3
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	1aca      	subs	r2, r1, r3
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	1e59      	subs	r1, r3, #1
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	1ac9      	subs	r1, r1, r3
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	440b      	add	r3, r1
 80009de:	4619      	mov	r1, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	440b      	add	r3, r1
 80009e4:	3230      	adds	r2, #48	; 0x30
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <uint32_TO_charmass+0x70>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 80009f6:	8afb      	ldrh	r3, [r7, #22]
 80009f8:	3301      	adds	r3, #1
 80009fa:	82fb      	strh	r3, [r7, #22]
 80009fc:	8afa      	ldrh	r2, [r7, #22]
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3db      	bcc.n	80009bc <uint32_TO_charmass+0x1c>
	}
}
 8000a04:	bf00      	nop
 8000a06:	371c      	adds	r7, #28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	cccccccd 	.word	0xcccccccd

08000a14 <SyncCKT>:


// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <SyncCKT+0x2c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10d      	bne.n	8000a3c <SyncCKT+0x28>
	{
		readFlag=0;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <SyncCKT+0x2c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f002 f8ee 	bl	8002c08 <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <SyncCKT+0x30>)
 8000a2e:	f004 ff6f 	bl	8005910 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000a32:	222b      	movs	r2, #43	; 0x2b
 8000a34:	4904      	ldr	r1, [pc, #16]	; (8000a48 <SyncCKT+0x34>)
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <SyncCKT+0x30>)
 8000a38:	f004 feea 	bl	8005810 <HAL_UART_Receive_DMA>
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000668 	.word	0x20000668
 8000a44:	20000444 	.word	0x20000444
 8000a48:	200003c0 	.word	0x200003c0

08000a4c <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    // Запись в память номера файла, на котором мы находимся

	//CountFileNow=Flash_Read_single8bit(FilesAdr);
	if(CountFileNow==0xFF || CountFileNow>=9 ) // Максимальное количество создаваемых файлов =9
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <RXCommande1+0x98>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2bff      	cmp	r3, #255	; 0xff
 8000a56:	d003      	beq.n	8000a60 <RXCommande1+0x14>
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <RXCommande1+0x98>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d902      	bls.n	8000a66 <RXCommande1+0x1a>
	{
		CountFileNow=0;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <RXCommande1+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
	}
	CountFileNow++;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <RXCommande1+0x98>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <RXCommande1+0x98>)
 8000a70:	701a      	strb	r2, [r3, #0]
	//flashErasePage(FLASH_SECTOR_6);
	//Flash_Write_single8bit(FilesAdr,CountFileNow);
	///ФЛЕШКА
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000a72:	2201      	movs	r2, #1
 8000a74:	491c      	ldr	r1, [pc, #112]	; (8000ae8 <RXCommande1+0x9c>)
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <RXCommande1+0xa0>)
 8000a78:	f007 fbc6 	bl	8008208 <f_mount>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <RXCommande1+0xa4>)
 8000a82:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <RXCommande1+0xa4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <RXCommande1+0x4c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4818      	ldr	r0, [pc, #96]	; (8000af4 <RXCommande1+0xa8>)
 8000a92:	f002 ffa3 	bl	80039dc <HAL_GPIO_WritePin>
			while(1);
 8000a96:	e7fe      	b.n	8000a96 <RXCommande1+0x4a>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_CREATE_ALWAYS | FA_WRITE);
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <RXCommande1+0x98>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <RXCommande1+0xac>)
 8000aa8:	4413      	add	r3, r2
 8000aaa:	220a      	movs	r2, #10
 8000aac:	4619      	mov	r1, r3
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <RXCommande1+0xb0>)
 8000ab0:	f007 fbf0 	bl	8008294 <f_open>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <RXCommande1+0xa4>)
 8000aba:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <RXCommande1+0xa4>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <RXCommande1+0x84>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <RXCommande1+0xa8>)
 8000aca:	f002 ff87 	bl	80039dc <HAL_GPIO_WritePin>
			while(1);
 8000ace:	e7fe      	b.n	8000ace <RXCommande1+0x82>
		}
	    ResolveSDWrite=1; // Открываем доступ к записи на SD
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <RXCommande1+0xb4>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
    CommandToRadio(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff ff20 	bl	800091c <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000adc:	f7ff feb4 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000049 	.word	0x20000049
 8000ae8:	08008b74 	.word	0x08008b74
 8000aec:	20000120 	.word	0x20000120
 8000af0:	20000764 	.word	0x20000764
 8000af4:	40020800 	.word	0x40020800
 8000af8:	08008be0 	.word	0x08008be0
 8000afc:	20000768 	.word	0x20000768
 8000b00:	20000046 	.word	0x20000046

08000b04 <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <RXCommande2+0x20>)
 8000b10:	f002 ff64 	bl	80039dc <HAL_GPIO_WritePin>
	// Отсылаем ответ
    CommandToRadio(2);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff ff01 	bl	800091c <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000b1a:	f7ff fe95 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40020400 	.word	0x40020400

08000b28 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b32:	480a      	ldr	r0, [pc, #40]	; (8000b5c <RXCommande3+0x34>)
 8000b34:	f002 ff52 	bl	80039dc <HAL_GPIO_WritePin>
	// Ждем 5 секунд
	HAL_Delay(5000);
 8000b38:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b3c:	f002 f864 	bl	8002c08 <HAL_Delay>
	// Убираем единицу с двигателя
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <RXCommande3+0x34>)
 8000b48:	f002 ff48 	bl	80039dc <HAL_GPIO_WritePin>
	// Отсылаем ответ
    CommandToRadio(3);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f7ff fee5 	bl	800091c <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000b52:	f7ff fe79 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40020400 	.word	0x40020400

08000b60 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

	RadioIrq=1;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <RXCommande4+0x14>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20000048 	.word	0x20000048

08000b78 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	///ФЛЕШКА
    // Закрываем файл
	fres=f_close(&fil);
 8000b7c:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <RXCommande5+0x60>)
 8000b7e:	f007 ff3a 	bl	80089f6 <f_close>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <RXCommande5+0x64>)
 8000b88:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <RXCommande5+0x64>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <RXCommande5+0x26>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	4812      	ldr	r0, [pc, #72]	; (8000be0 <RXCommande5+0x68>)
 8000b98:	f002 ff20 	bl	80039dc <HAL_GPIO_WritePin>
		while(1);
 8000b9c:	e7fe      	b.n	8000b9c <RXCommande5+0x24>
	}
	fres=f_mount(NULL, "", 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4910      	ldr	r1, [pc, #64]	; (8000be4 <RXCommande5+0x6c>)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f007 fb30 	bl	8008208 <f_mount>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <RXCommande5+0x64>)
 8000bae:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <RXCommande5+0x64>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <RXCommande5+0x4c>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <RXCommande5+0x68>)
 8000bbe:	f002 ff0d 	bl	80039dc <HAL_GPIO_WritePin>
		while(1);
 8000bc2:	e7fe      	b.n	8000bc2 <RXCommande5+0x4a>
	}
    ResolveSDWrite=0; // Закрываем доступ к записи на SD
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <RXCommande5+0x70>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
    CommandToRadio(5);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f7ff fea6 	bl	800091c <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000bd0:	f7ff fe3a 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000768 	.word	0x20000768
 8000bdc:	20000764 	.word	0x20000764
 8000be0:	40020800 	.word	0x40020800
 8000be4:	08008b74 	.word	0x08008b74
 8000be8:	20000046 	.word	0x20000046

08000bec <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <RXCommande6+0x20>)
 8000bf8:	f002 fef0 	bl	80039dc <HAL_GPIO_WritePin>
	// Отсылаем ответ
    CommandToRadio(6);
 8000bfc:	2006      	movs	r0, #6
 8000bfe:	f7ff fe8d 	bl	800091c <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000c02:	f7ff fe21 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020400 	.word	0x40020400

08000c10 <CheckSD>:

// Проверка SD карты на работоспособность
void CheckSD(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000c14:	2201      	movs	r2, #1
 8000c16:	4928      	ldr	r1, [pc, #160]	; (8000cb8 <CheckSD+0xa8>)
 8000c18:	4828      	ldr	r0, [pc, #160]	; (8000cbc <CheckSD+0xac>)
 8000c1a:	f007 faf5 	bl	8008208 <f_mount>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <CheckSD+0xb0>)
 8000c24:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <CheckSD+0xb0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d005      	beq.n	8000c3a <CheckSD+0x2a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2102      	movs	r1, #2
 8000c32:	4824      	ldr	r0, [pc, #144]	; (8000cc4 <CheckSD+0xb4>)
 8000c34:	f002 fed2 	bl	80039dc <HAL_GPIO_WritePin>
			while(1);
 8000c38:	e7fe      	b.n	8000c38 <CheckSD+0x28>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, "CheckSD.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000c3a:	220a      	movs	r2, #10
 8000c3c:	4922      	ldr	r1, [pc, #136]	; (8000cc8 <CheckSD+0xb8>)
 8000c3e:	4823      	ldr	r0, [pc, #140]	; (8000ccc <CheckSD+0xbc>)
 8000c40:	f007 fb28 	bl	8008294 <f_open>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <CheckSD+0xb0>)
 8000c4a:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <CheckSD+0xb0>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d005      	beq.n	8000c60 <CheckSD+0x50>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2102      	movs	r1, #2
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <CheckSD+0xb4>)
 8000c5a:	f002 febf 	bl	80039dc <HAL_GPIO_WritePin>
			while(1);
 8000c5e:	e7fe      	b.n	8000c5e <CheckSD+0x4e>
		}
	    fres=f_close(&fil);
 8000c60:	481a      	ldr	r0, [pc, #104]	; (8000ccc <CheckSD+0xbc>)
 8000c62:	f007 fec8 	bl	80089f6 <f_close>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <CheckSD+0xb0>)
 8000c6c:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <CheckSD+0xb0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <CheckSD+0x72>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <CheckSD+0xb4>)
 8000c7c:	f002 feae 	bl	80039dc <HAL_GPIO_WritePin>
			while(1);
 8000c80:	e7fe      	b.n	8000c80 <CheckSD+0x70>
		}
	    fres=f_mount(NULL, "", 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <CheckSD+0xa8>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f007 fabe 	bl	8008208 <f_mount>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <CheckSD+0xb0>)
 8000c92:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <CheckSD+0xb0>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <CheckSD+0x98>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <CheckSD+0xb4>)
 8000ca2:	f002 fe9b 	bl	80039dc <HAL_GPIO_WritePin>
			while(1);
 8000ca6:	e7fe      	b.n	8000ca6 <CheckSD+0x96>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <CheckSD+0xb4>)
 8000cae:	f002 fe95 	bl	80039dc <HAL_GPIO_WritePin>

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08008b74 	.word	0x08008b74
 8000cbc:	20000120 	.word	0x20000120
 8000cc0:	20000764 	.word	0x20000764
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	08008b78 	.word	0x08008b78
 8000ccc:	20000768 	.word	0x20000768

08000cd0 <DataConv>:

// Парсер
void DataConv(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <DataConv+0x60>)
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	2308      	movs	r3, #8
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4915      	ldr	r1, [pc, #84]	; (8000d34 <DataConv+0x64>)
 8000ce0:	f7ff fe5e 	bl	80009a0 <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	e017      	b.n	8000d1a <DataConv+0x4a>
	{
		uint32_TO_charmass(&BuffCkt[i+4], SDbufWrite, 9+i*4, 3);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	3304      	adds	r3, #4
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <DataConv+0x68>)
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3309      	adds	r3, #9
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	2303      	movs	r3, #3
 8000d02:	490c      	ldr	r1, [pc, #48]	; (8000d34 <DataConv+0x64>)
 8000d04:	f7ff fe4c 	bl	80009a0 <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <DataConv+0x64>)
 8000d10:	212c      	movs	r1, #44	; 0x2c
 8000d12:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3301      	adds	r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b25      	cmp	r3, #37	; 0x25
 8000d1e:	d9e4      	bls.n	8000cea <DataConv+0x1a>
	}
	SDbufWrite[162]='\n';
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <DataConv+0x64>)
 8000d22:	220a      	movs	r2, #10
 8000d24:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000040 	.word	0x20000040
 8000d34:	20000584 	.word	0x20000584
 8000d38:	200003c0 	.word	0x200003c0

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f001 feef 	bl	8002b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f91f 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 fb7b 	bl	8001444 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d4e:	f000 fb33 	bl	80013b8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d52:	f000 f98b 	bl	800106c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 fadb 	bl	8001310 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d5a:	f000 fb03 	bl	8001364 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000d5e:	f000 faad 	bl	80012bc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000d62:	f005 fcab 	bl	80066bc <MX_FATFS_Init>
  MX_SPI3_Init();
 8000d66:	f000 f9b7 	bl	80010d8 <MX_SPI3_Init>
  MX_UART5_Init();
 8000d6a:	f000 fa7b 	bl	8001264 <MX_UART5_Init>
  MX_TIM6_Init();
 8000d6e:	f000 f9e9 	bl	8001144 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d72:	f000 fa1d 	bl	80011b0 <MX_TIM7_Init>
  MX_TIM10_Init();
 8000d76:	f000 fa51 	bl	800121c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4874      	ldr	r0, [pc, #464]	; (8000f50 <main+0x214>)
 8000d80:	f002 fe2c 	bl	80039dc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000d84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d88:	f001 ff3e 	bl	8002c08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2104      	movs	r1, #4
 8000d90:	486f      	ldr	r0, [pc, #444]	; (8000f50 <main+0x214>)
 8000d92:	f002 fe23 	bl	80039dc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000d96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d9a:	f001 ff35 	bl	8002c08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	486b      	ldr	r0, [pc, #428]	; (8000f50 <main+0x214>)
 8000da4:	f002 fe1a 	bl	80039dc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000da8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dac:	f001 ff2c 	bl	8002c08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2102      	movs	r1, #2
 8000db4:	4866      	ldr	r0, [pc, #408]	; (8000f50 <main+0x214>)
 8000db6:	f002 fe11 	bl	80039dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	4864      	ldr	r0, [pc, #400]	; (8000f50 <main+0x214>)
 8000dc0:	f002 fe0c 	bl	80039dc <HAL_GPIO_WritePin>
	//Проверка SD карты
	CheckSD();
 8000dc4:	f7ff ff24 	bl	8000c10 <CheckSD>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8000dc8:	f7ff fcf7 	bl	80007ba <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 8000dcc:	f7ff fd3c 	bl	8000848 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8000dd0:	222b      	movs	r2, #43	; 0x2b
 8000dd2:	4960      	ldr	r1, [pc, #384]	; (8000f54 <main+0x218>)
 8000dd4:	4860      	ldr	r0, [pc, #384]	; (8000f58 <main+0x21c>)
 8000dd6:	f004 fd1b 	bl	8005810 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 8000dda:	4860      	ldr	r0, [pc, #384]	; (8000f5c <main+0x220>)
 8000ddc:	f004 fa1b 	bl	8005216 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 8000de0:	f7ff fe18 	bl	8000a14 <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	485d      	ldr	r0, [pc, #372]	; (8000f60 <main+0x224>)
 8000dea:	f002 fddf 	bl	80039ac <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d043      	beq.n	8000e7c <main+0x140>
		{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000df4:	485b      	ldr	r0, [pc, #364]	; (8000f64 <main+0x228>)
 8000df6:	f7ff fcc3 	bl	8000780 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <main+0x228>)
 8000dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <main+0x228>)
 8000e08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <main+0x22c>)
 8000e14:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 8000e16:	f7ff fb75 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 8000e1a:	2128      	movs	r1, #40	; 0x28
 8000e1c:	4851      	ldr	r0, [pc, #324]	; (8000f64 <main+0x228>)
 8000e1e:	f7ff fd51 	bl	80008c4 <Crc16>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b50      	ldr	r3, [pc, #320]	; (8000f68 <main+0x22c>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d126      	bne.n	8000e7c <main+0x140>
			{
				switch(TX_RX_Radio[CommIndex])
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <main+0x228>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d821      	bhi.n	8000e7c <main+0x140>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <main+0x104>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e5f 	.word	0x08000e5f
 8000e48:	08000e65 	.word	0x08000e65
 8000e4c:	08000e6b 	.word	0x08000e6b
 8000e50:	08000e71 	.word	0x08000e71
 8000e54:	08000e77 	.word	0x08000e77
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 8000e58:	f7ff fdf8 	bl	8000a4c <RXCommande1>
					break;
 8000e5c:	e00e      	b.n	8000e7c <main+0x140>
				case 2:   // Команда открытия клапана
					RXCommande2();
 8000e5e:	f7ff fe51 	bl	8000b04 <RXCommande2>
					break;
 8000e62:	e00b      	b.n	8000e7c <main+0x140>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 8000e64:	f7ff fe60 	bl	8000b28 <RXCommande3>
					break;
 8000e68:	e008      	b.n	8000e7c <main+0x140>
				case 4:   // Команда запроса данных
					RXCommande4();
 8000e6a:	f7ff fe79 	bl	8000b60 <RXCommande4>
					break;
 8000e6e:	e005      	b.n	8000e7c <main+0x140>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 8000e70:	f7ff fe82 	bl	8000b78 <RXCommande5>
					break;
 8000e74:	e002      	b.n	8000e7c <main+0x140>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 8000e76:	f7ff feb9 	bl	8000bec <RXCommande6>
					break;
 8000e7a:	bf00      	nop
				}
			}
		}

		if(ResolveSDWrite==1 && ReadyToWrite==1) //  Если разрешена запись на Sd карту и если есть что записывать
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <main+0x230>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d1ad      	bne.n	8000de0 <main+0xa4>
 8000e84:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <main+0x234>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d1a9      	bne.n	8000de0 <main+0xa4>
		{
			// Запись на SD
			DataConv();
 8000e8c:	f7ff ff20 	bl	8000cd0 <DataConv>
			fres = f_write(&fil, SDbufWrite, 163, &bytesWrote);
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <main+0x238>)
 8000e92:	22a3      	movs	r2, #163	; 0xa3
 8000e94:	4938      	ldr	r1, [pc, #224]	; (8000f78 <main+0x23c>)
 8000e96:	4839      	ldr	r0, [pc, #228]	; (8000f7c <main+0x240>)
 8000e98:	f007 fbba 	bl	8008610 <f_write>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <main+0x244>)
 8000ea2:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <main+0x244>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <main+0x17c>
			{
				while(1)
				{
					// Выключение 1 светодиода, если какая-то проблема с записью на SD
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4827      	ldr	r0, [pc, #156]	; (8000f50 <main+0x214>)
 8000eb2:	f002 fd93 	bl	80039dc <HAL_GPIO_WritePin>
 8000eb6:	e7f9      	b.n	8000eac <main+0x170>

				}
			}
			if(RadioIrq==1)  // Если пришел запрос на отправку измерений по радио
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <main+0x248>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d13c      	bne.n	8000f3a <main+0x1fe>
			{
				for(uint8_t i=0;i<RadioMaxBuff-2;i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	e00a      	b.n	8000edc <main+0x1a0>
				{
					TX_RX_Radio[i+1]=BuffCkt[i+4];
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	1d1a      	adds	r2, r3, #4
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4921      	ldr	r1, [pc, #132]	; (8000f54 <main+0x218>)
 8000ed0:	5c89      	ldrb	r1, [r1, r2]
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <main+0x228>)
 8000ed4:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0;i<RadioMaxBuff-2;i++)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b27      	cmp	r3, #39	; 0x27
 8000ee0:	d9f1      	bls.n	8000ec6 <main+0x18a>
				}
				// заносим в 1 элемент 4 команду
				TX_RX_Radio[0]=4;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <main+0x228>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	701a      	strb	r2, [r3, #0]
				// Отсылаем ответ
			    Rf96_Lora_TX_mode();
 8000ee8:	f7ff fc93 	bl	8000812 <Rf96_Lora_TX_mode>
				//Подсчет CRC16
				CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000eec:	2128      	movs	r1, #40	; 0x28
 8000eee:	481d      	ldr	r0, [pc, #116]	; (8000f64 <main+0x228>)
 8000ef0:	f7ff fce8 	bl	80008c4 <Crc16>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <main+0x22c>)
 8000efa:	801a      	strh	r2, [r3, #0]
				TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <main+0x22c>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <main+0x228>)
 8000f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <main+0x22c>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <main+0x228>)
 8000f14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				// Установка адреса TX в буфере FIFO
				Rf96_TX_FifoAdr(0x80);
 8000f18:	2080      	movs	r0, #128	; 0x80
 8000f1a:	f7ff fbe7 	bl	80006ec <Rf96_TX_FifoAdr>
				// Устанавливает указатель на адрес начала массива TX в FIFO
				Rf96_FIFO_point(0x80);
 8000f1e:	2080      	movs	r0, #128	; 0x80
 8000f20:	f7ff fc00 	bl	8000724 <Rf96_FIFO_point>
			    // Очистка флагов
				Rf96_LoRaClearIrq();
 8000f24:	f7ff faee 	bl	8000504 <Rf96_LoRaClearIrq>
			    // Отправка посылки
				Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000f28:	212a      	movs	r1, #42	; 0x2a
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <main+0x228>)
 8000f2c:	f7ff fcaa 	bl	8000884 <Rf96_LoRaTxPacket>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 8000f30:	f7ff fc8a 	bl	8000848 <Rf96_Lora_RX_mode>
				RadioIrq=0;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <main+0x248>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
			}
			// Синхронизация файла и sd карты
			fres = f_sync(&fil);
 8000f3a:	4810      	ldr	r0, [pc, #64]	; (8000f7c <main+0x240>)
 8000f3c:	f007 fcdd 	bl	80088fa <f_sync>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <main+0x244>)
 8000f46:	701a      	strb	r2, [r3, #0]
			ReadyToWrite=0;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <main+0x234>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 8000f4e:	e747      	b.n	8000de0 <main+0xa4>
 8000f50:	40020800 	.word	0x40020800
 8000f54:	200003c0 	.word	0x200003c0
 8000f58:	20000444 	.word	0x20000444
 8000f5c:	20000350 	.word	0x20000350
 8000f60:	40020000 	.word	0x40020000
 8000f64:	20000394 	.word	0x20000394
 8000f68:	20000044 	.word	0x20000044
 8000f6c:	20000046 	.word	0x20000046
 8000f70:	20000047 	.word	0x20000047
 8000f74:	20000390 	.word	0x20000390
 8000f78:	20000584 	.word	0x20000584
 8000f7c:	20000768 	.word	0x20000768
 8000f80:	20000764 	.word	0x20000764
 8000f84:	20000048 	.word	0x20000048

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2234      	movs	r2, #52	; 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 fdd8 	bl	8008b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <SystemClock_Config+0xdc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a2b      	ldr	r2, [pc, #172]	; (8001064 <SystemClock_Config+0xdc>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <SystemClock_Config+0xdc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <SystemClock_Config+0xe0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	; (8001068 <SystemClock_Config+0xe0>)
 8000fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <SystemClock_Config+0xe0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	2310      	movs	r3, #16
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ffc:	23b4      	movs	r3, #180	; 0xb4
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4618      	mov	r0, r3
 8001012:	f003 f807 	bl	8004024 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800101c:	f000 fb72 	bl	8001704 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001020:	f002 fcf6 	bl	8003a10 <HAL_PWREx_EnableOverDrive>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800102a:	f000 fb6b 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	2105      	movs	r1, #5
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fd2f 	bl	8003ab0 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001058:	f000 fb54 	bl	8001704 <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	; 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <MX_SPI1_Init+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800107c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010a0:	2210      	movs	r2, #16
 80010a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010b8:	220a      	movs	r2, #10
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010be:	f003 fa0b 	bl	80044d8 <HAL_SPI_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c8:	f000 fb1c 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000066c 	.word	0x2000066c
 80010d4:	40013000 	.word	0x40013000

080010d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_SPI3_Init+0x64>)
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <MX_SPI3_Init+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI3_Init+0x64>)
 80010e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI3_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_SPI3_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI3_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI3_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI3_Init+0x64>)
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI3_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_SPI3_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI3_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_SPI3_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI3_Init+0x64>)
 8001124:	220a      	movs	r2, #10
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_SPI3_Init+0x64>)
 800112a:	f003 f9d5 	bl	80044d8 <HAL_SPI_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001134:	f000 fae6 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200003ec 	.word	0x200003ec
 8001140:	40003c00 	.word	0x40003c00

08001144 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_TIM6_Init+0x64>)
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <MX_TIM6_Init+0x68>)
 8001156:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_TIM6_Init+0x64>)
 800115a:	f242 3227 	movw	r2, #8999	; 0x2327
 800115e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_TIM6_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_TIM6_Init+0x64>)
 8001168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800116c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_TIM6_Init+0x64>)
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_TIM6_Init+0x64>)
 8001176:	f004 f823 	bl	80051c0 <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001180:	f000 fac0 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_TIM6_Init+0x64>)
 8001192:	f004 fa5f 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800119c:	f000 fab2 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000628 	.word	0x20000628
 80011ac:	40001000 	.word	0x40001000

080011b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_TIM7_Init+0x64>)
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_TIM7_Init+0x68>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_TIM7_Init+0x64>)
 80011c6:	f242 3227 	movw	r2, #8999	; 0x2327
 80011ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_TIM7_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_TIM7_Init+0x64>)
 80011d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_TIM7_Init+0x64>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <MX_TIM7_Init+0x64>)
 80011e2:	f003 ffed 	bl	80051c0 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80011ec:	f000 fa8a 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_TIM7_Init+0x64>)
 80011fe:	f004 fa29 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 fa7c 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000998 	.word	0x20000998
 8001218:	40001400 	.word	0x40001400

0800121c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_TIM10_Init+0x40>)
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <MX_TIM10_Init+0x44>)
 8001224:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MX_TIM10_Init+0x40>)
 8001228:	f242 3227 	movw	r2, #8999	; 0x2327
 800122c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_TIM10_Init+0x40>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_TIM10_Init+0x40>)
 8001236:	f242 7210 	movw	r2, #10000	; 0x2710
 800123a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_TIM10_Init+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_TIM10_Init+0x40>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_TIM10_Init+0x40>)
 800124a:	f003 ffb9 	bl	80051c0 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001254:	f000 fa56 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000350 	.word	0x20000350
 8001260:	40014400 	.word	0x40014400

08001264 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_UART5_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_UART5_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_UART5_Init+0x50>)
 8001270:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001274:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_UART5_Init+0x50>)
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_UART5_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_UART5_Init+0x50>)
 8001286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_UART5_Init+0x50>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_UART5_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_UART5_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_UART5_Init+0x50>)
 80012a0:	f004 fa68 	bl	8005774 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 80012aa:	f000 fa2b 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000444 	.word	0x20000444
 80012b8:	40005000 	.word	0x40005000

080012bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_USART1_UART_Init+0x50>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012c8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80012cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012f4:	f004 fa3e 	bl	8005774 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012fe:	f000 fa01 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000544 	.word	0x20000544
 800130c:	40011000 	.word	0x40011000

08001310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_USART2_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800131c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001348:	f004 fa14 	bl	8005774 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f000 f9d7 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200006c4 	.word	0x200006c4
 8001360:	40004400 	.word	0x40004400

08001364 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART3_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 8001370:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001374:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART3_UART_Init+0x4c>)
 800139c:	f004 f9ea 	bl	8005774 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f9ad 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000e0 	.word	0x200000e0
 80013b4:	40004800 	.word	0x40004800

080013b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_DMA_Init+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <MX_DMA_Init+0x88>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_DMA_Init+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_DMA_Init+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <MX_DMA_Init+0x88>)
 80013e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_DMA_Init+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	200b      	movs	r0, #11
 80013fc:	f001 fd01 	bl	8002e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001400:	200b      	movs	r0, #11
 8001402:	f001 fd1a 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	200c      	movs	r0, #12
 800140c:	f001 fcf9 	bl	8002e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001410:	200c      	movs	r0, #12
 8001412:	f001 fd12 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2011      	movs	r0, #17
 800141c:	f001 fcf1 	bl	8002e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001420:	2011      	movs	r0, #17
 8001422:	f001 fd0a 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	203a      	movs	r0, #58	; 0x3a
 800142c:	f001 fce9 	bl	8002e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001430:	203a      	movs	r0, #58	; 0x3a
 8001432:	f001 fd02 	bl	8002e3a <HAL_NVIC_EnableIRQ>

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b67      	ldr	r3, [pc, #412]	; (80015fc <MX_GPIO_Init+0x1b8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a66      	ldr	r2, [pc, #408]	; (80015fc <MX_GPIO_Init+0x1b8>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b64      	ldr	r3, [pc, #400]	; (80015fc <MX_GPIO_Init+0x1b8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b60      	ldr	r3, [pc, #384]	; (80015fc <MX_GPIO_Init+0x1b8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a5f      	ldr	r2, [pc, #380]	; (80015fc <MX_GPIO_Init+0x1b8>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <MX_GPIO_Init+0x1b8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b59      	ldr	r3, [pc, #356]	; (80015fc <MX_GPIO_Init+0x1b8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a58      	ldr	r2, [pc, #352]	; (80015fc <MX_GPIO_Init+0x1b8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b56      	ldr	r3, [pc, #344]	; (80015fc <MX_GPIO_Init+0x1b8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <MX_GPIO_Init+0x1b8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a51      	ldr	r2, [pc, #324]	; (80015fc <MX_GPIO_Init+0x1b8>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <MX_GPIO_Init+0x1b8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	210e      	movs	r1, #14
 80014ce:	484c      	ldr	r0, [pc, #304]	; (8001600 <MX_GPIO_Init+0x1bc>)
 80014d0:	f002 fa84 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f248 0112 	movw	r1, #32786	; 0x8012
 80014da:	484a      	ldr	r0, [pc, #296]	; (8001604 <MX_GPIO_Init+0x1c0>)
 80014dc:	f002 fa7e 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80014e6:	4846      	ldr	r0, [pc, #280]	; (8001600 <MX_GPIO_Init+0x1bc>)
 80014e8:	f002 fa78 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 80014ec:	2200      	movs	r2, #0
 80014ee:	f24f 0142 	movw	r1, #61506	; 0xf042
 80014f2:	4845      	ldr	r0, [pc, #276]	; (8001608 <MX_GPIO_Init+0x1c4>)
 80014f4:	f002 fa72 	bl	80039dc <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <MX_GPIO_Init+0x1c8>)
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	483c      	ldr	r0, [pc, #240]	; (8001600 <MX_GPIO_Init+0x1bc>)
 800150e:	f002 f8bb 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001512:	230e      	movs	r3, #14
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4835      	ldr	r0, [pc, #212]	; (8001600 <MX_GPIO_Init+0x1bc>)
 800152a:	f002 f8ad 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800152e:	f240 4301 	movw	r3, #1025	; 0x401
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4830      	ldr	r0, [pc, #192]	; (8001604 <MX_GPIO_Init+0x1c0>)
 8001544:	f002 f8a0 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001548:	f248 0312 	movw	r3, #32786	; 0x8012
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4828      	ldr	r0, [pc, #160]	; (8001604 <MX_GPIO_Init+0x1c0>)
 8001562:	f002 f891 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 8001566:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <MX_GPIO_Init+0x1bc>)
 8001580:	f002 f882 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001584:	2302      	movs	r3, #2
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	481b      	ldr	r0, [pc, #108]	; (8001608 <MX_GPIO_Init+0x1c4>)
 800159c:	f002 f874 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 80015a0:	f24d 0340 	movw	r3, #53312	; 0xd040
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_GPIO_Init+0x1c4>)
 80015ba:	f002 f865 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_GPIO_Init+0x1c4>)
 80015d8:	f002 f856 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015dc:	2338      	movs	r3, #56	; 0x38
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_GPIO_Init+0x1c4>)
 80015f0:	f002 f84a 	bl	8003688 <HAL_GPIO_Init>

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020800 	.word	0x40020800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	10210000 	.word	0x10210000

08001610 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_UART_RxCpltCallback+0x6c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d129      	bne.n	8001674 <HAL_UART_RxCpltCallback+0x64>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 8001620:	4817      	ldr	r0, [pc, #92]	; (8001680 <HAL_UART_RxCpltCallback+0x70>)
 8001622:	f003 fe1c 	bl	800525e <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_UART_RxCpltCallback+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2104      	movs	r1, #4
 8001630:	4815      	ldr	r0, [pc, #84]	; (8001688 <HAL_UART_RxCpltCallback+0x78>)
 8001632:	f002 f9d3 	bl	80039dc <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_UART_RxCpltCallback+0x7c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b7c      	cmp	r3, #124	; 0x7c
 800163c:	d114      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x58>
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_UART_RxCpltCallback+0x7c>)
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	2b6e      	cmp	r3, #110	; 0x6e
 8001644:	d110      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x58>
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_UART_RxCpltCallback+0x7c>)
 8001648:	789b      	ldrb	r3, [r3, #2]
 800164a:	2ba1      	cmp	r3, #161	; 0xa1
 800164c:	d10c      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x58>
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_UART_RxCpltCallback+0x7c>)
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	2b2c      	cmp	r3, #44	; 0x2c
 8001654:	d108      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x58>
		{
			// Готов к записи
			ReadyToWrite=1;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_UART_RxCpltCallback+0x80>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
			//  Время в мс, когда пришли данные
			reciveTime = HAL_GetTick();
 800165c:	f001 fac8 	bl	8002bf0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_UART_RxCpltCallback+0x84>)
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e002      	b.n	800166e <HAL_UART_RxCpltCallback+0x5e>
		} else  // Если данные не синхронизированы
		{
			readFlag=1;
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_UART_RxCpltCallback+0x88>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
		}
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <HAL_UART_RxCpltCallback+0x70>)
 8001670:	f003 fdd1 	bl	8005216 <HAL_TIM_Base_Start_IT>
	}

}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000444 	.word	0x20000444
 8001680:	20000350 	.word	0x20000350
 8001684:	40014400 	.word	0x40014400
 8001688:	40020800 	.word	0x40020800
 800168c:	200003c0 	.word	0x200003c0
 8001690:	20000047 	.word	0x20000047
 8001694:	20000040 	.word	0x20000040
 8001698:	20000668 	.word	0x20000668

0800169c <HAL_UART_TxCpltCallback>:
// Обработчик прерываний Usartа по передаче
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]


}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d112      	bne.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016c8:	f003 fda5 	bl	8005216 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2104      	movs	r1, #4
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016d2:	f002 f983 	bl	80039dc <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016d8:	f004 f91a 	bl	8005910 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 80016dc:	222b      	movs	r2, #43	; 0x2b
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016e2:	f004 f895 	bl	8005810 <HAL_UART_Receive_DMA>
	}
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000350 	.word	0x20000350
 80016f4:	40014400 	.word	0x40014400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	20000444 	.word	0x20000444
 8001700:	200003c0 	.word	0x200003c0

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800171e:	1df9      	adds	r1, r7, #7
 8001720:	230a      	movs	r3, #10
 8001722:	2201      	movs	r2, #1
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <SPICmd8bit+0x20>)
 8001726:	f002 ff3b 	bl	80045a0 <HAL_SPI_Transmit>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000066c 	.word	0x2000066c

08001738 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001742:	1df9      	adds	r1, r7, #7
 8001744:	230a      	movs	r3, #10
 8001746:	2201      	movs	r2, #1
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <SPIRead8bit+0x20>)
 800174a:	f003 f85d 	bl	8004808 <HAL_SPI_Receive>

  return(RdPara);
 800174e:	79fb      	ldrb	r3, [r7, #7]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000066c 	.word	0x2000066c

0800175c <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001766:	2200      	movs	r2, #0
 8001768:	2140      	movs	r1, #64	; 0x40
 800176a:	480a      	ldr	r0, [pc, #40]	; (8001794 <SPIRead+0x38>)
 800176c:	f002 f936 	bl	80039dc <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ffce 	bl	8001714 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001778:	f7ff ffde 	bl	8001738 <SPIRead8bit>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001780:	2201      	movs	r2, #1
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <SPIRead+0x38>)
 8001786:	f002 f929 	bl	80039dc <HAL_GPIO_WritePin>
  return(tmp);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40020400 	.word	0x40020400

08001798 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80017a8:	2200      	movs	r2, #0
 80017aa:	2140      	movs	r1, #64	; 0x40
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <SPIWrite+0x44>)
 80017ae:	f002 f915 	bl	80039dc <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffaa 	bl	8001714 <SPICmd8bit>
	SPICmd8bit(WrPara);
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ffa6 	bl	8001714 <SPICmd8bit>
	NSS_H();
 80017c8:	2201      	movs	r2, #1
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <SPIWrite+0x44>)
 80017ce:	f002 f905 	bl	80039dc <HAL_GPIO_WritePin>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020400 	.word	0x40020400

080017e0 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d91f      	bls.n	8001836 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4811      	ldr	r0, [pc, #68]	; (8001840 <SPIBurstRead+0x60>)
 80017fc:	f002 f8ee 	bl	80039dc <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff86 	bl	8001714 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e009      	b.n	8001822 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	18d4      	adds	r4, r2, r3
 8001814:	f7ff ff90 	bl	8001738 <SPIRead8bit>
 8001818:	4603      	mov	r3, r0
 800181a:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	3301      	adds	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	429a      	cmp	r2, r3
 8001828:	d3f1      	bcc.n	800180e <SPIBurstRead+0x2e>
      NSS_H();
 800182a:	2201      	movs	r2, #1
 800182c:	2140      	movs	r1, #64	; 0x40
 800182e:	4804      	ldr	r0, [pc, #16]	; (8001840 <SPIBurstRead+0x60>)
 8001830:	f002 f8d4 	bl	80039dc <HAL_GPIO_WritePin>
 8001834:	e000      	b.n	8001838 <SPIBurstRead+0x58>
    return;
 8001836:	bf00      	nop
  }
}
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	40020400 	.word	0x40020400

08001844 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001854:	79bb      	ldrb	r3, [r7, #6]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d922      	bls.n	80018a0 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 800185a:	2200      	movs	r2, #0
 800185c:	2140      	movs	r1, #64	; 0x40
 800185e:	4812      	ldr	r0, [pc, #72]	; (80018a8 <BurstWrite+0x64>)
 8001860:	f002 f8bc 	bl	80039dc <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff51 	bl	8001714 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e009      	b.n	800188c <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff47 	bl	8001714 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	3301      	adds	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3f1      	bcc.n	8001878 <BurstWrite+0x34>
    NSS_H();
 8001894:	2201      	movs	r2, #1
 8001896:	2140      	movs	r1, #64	; 0x40
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <BurstWrite+0x64>)
 800189a:	f002 f89f 	bl	80039dc <HAL_GPIO_WritePin>
 800189e:	e000      	b.n	80018a2 <BurstWrite+0x5e>
    return;
 80018a0:	bf00      	nop
  }
}
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40020400 	.word	0x40020400

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_MspInit+0x4c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4e      	ldr	r2, [pc, #312]	; (8001a54 <HAL_SPI_MspInit+0x158>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12c      	bne.n	8001978 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 8001928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001956:	23e0      	movs	r3, #224	; 0xe0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001966:	2305      	movs	r3, #5
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	483a      	ldr	r0, [pc, #232]	; (8001a5c <HAL_SPI_MspInit+0x160>)
 8001972:	f001 fe89 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001976:	e068      	b.n	8001a4a <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <HAL_SPI_MspInit+0x164>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d163      	bne.n	8001a4a <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 800198c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_SPI_MspInit+0x15c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019de:	2301      	movs	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80019e6:	2307      	movs	r3, #7
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	481c      	ldr	r0, [pc, #112]	; (8001a64 <HAL_SPI_MspInit+0x168>)
 80019f2:	f001 fe49 	bl	8003688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4815      	ldr	r0, [pc, #84]	; (8001a68 <HAL_SPI_MspInit+0x16c>)
 8001a14:	f001 fe38 	bl	8003688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <HAL_SPI_MspInit+0x16c>)
 8001a36:	f001 fe27 	bl	8003688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2033      	movs	r0, #51	; 0x33
 8001a40:	f001 f9df 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a44:	2033      	movs	r0, #51	; 0x33
 8001a46:	f001 f9f8 	bl	8002e3a <HAL_NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	; 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40013000 	.word	0x40013000
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40003c00 	.word	0x40003c00
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800

08001a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_TIM_Base_MspInit+0xb8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d116      	bne.n	8001aac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001a88:	f043 0310 	orr.w	r3, r3, #16
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f001 f9af 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa4:	2036      	movs	r0, #54	; 0x36
 8001aa6:	f001 f9c8 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001aaa:	e036      	b.n	8001b1a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <HAL_TIM_Base_MspInit+0xc0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d116      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2037      	movs	r0, #55	; 0x37
 8001ad8:	f001 f993 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001adc:	2037      	movs	r0, #55	; 0x37
 8001ade:	f001 f9ac 	bl	8002e3a <HAL_NVIC_EnableIRQ>
}
 8001ae2:	e01a      	b.n	8001b1a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_TIM_Base_MspInit+0xc4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d115      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_TIM_Base_MspInit+0xbc>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2019      	movs	r0, #25
 8001b10:	f001 f977 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b14:	2019      	movs	r0, #25
 8001b16:	f001 f990 	bl	8002e3a <HAL_NVIC_EnableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40001000 	.word	0x40001000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40001400 	.word	0x40001400
 8001b30:	40014400 	.word	0x40014400

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b092      	sub	sp, #72	; 0x48
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a87      	ldr	r2, [pc, #540]	; (8001d70 <HAL_UART_MspInit+0x23c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	f040 8083 	bne.w	8001c5e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5c:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a84      	ldr	r2, [pc, #528]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
 8001b68:	4b82      	ldr	r3, [pc, #520]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b78:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a7d      	ldr	r2, [pc, #500]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b94:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a76      	ldr	r2, [pc, #472]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b74      	ldr	r3, [pc, #464]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	486b      	ldr	r0, [pc, #428]	; (8001d78 <HAL_UART_MspInit+0x244>)
 8001bca:	f001 fd5d 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bde:	2308      	movs	r3, #8
 8001be0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be6:	4619      	mov	r1, r3
 8001be8:	4864      	ldr	r0, [pc, #400]	; (8001d7c <HAL_UART_MspInit+0x248>)
 8001bea:	f001 fd4d 	bl	8003688 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001bee:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001bf0:	4a64      	ldr	r2, [pc, #400]	; (8001d84 <HAL_UART_MspInit+0x250>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bfc:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c02:	4b5f      	ldr	r3, [pc, #380]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c08:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c10:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c16:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001c1c:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c22:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c24:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2a:	4b55      	ldr	r3, [pc, #340]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001c30:	4853      	ldr	r0, [pc, #332]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c32:	f001 f91d 	bl	8002e70 <HAL_DMA_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001c3c:	f7ff fd62 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
 8001c46:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_UART_MspInit+0x24c>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2035      	movs	r0, #53	; 0x35
 8001c52:	f001 f8d6 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c56:	2035      	movs	r0, #53	; 0x35
 8001c58:	f001 f8ef 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c5c:	e18e      	b.n	8001f7c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a49      	ldr	r2, [pc, #292]	; (8001d88 <HAL_UART_MspInit+0x254>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	f040 8099 	bne.w	8001d9c <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a39      	ldr	r2, [pc, #228]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a32      	ldr	r2, [pc, #200]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_UART_MspInit+0x240>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd8:	4619      	mov	r1, r3
 8001cda:	482c      	ldr	r0, [pc, #176]	; (8001d8c <HAL_UART_MspInit+0x258>)
 8001cdc:	f001 fcd4 	bl	8003688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4825      	ldr	r0, [pc, #148]	; (8001d90 <HAL_UART_MspInit+0x25c>)
 8001cfc:	f001 fcc4 	bl	8003688 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d02:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_UART_MspInit+0x264>)
 8001d04:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d20:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d42:	4814      	ldr	r0, [pc, #80]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d44:	f001 f894 	bl	8002e70 <HAL_DMA_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001d4e:	f7ff fcd9 	bl	8001704 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_UART_MspInit+0x260>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2025      	movs	r0, #37	; 0x25
 8001d64:	f001 f84d 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d68:	2025      	movs	r0, #37	; 0x25
 8001d6a:	f001 f866 	bl	8002e3a <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e105      	b.n	8001f7c <HAL_UART_MspInit+0x448>
 8001d70:	40005000 	.word	0x40005000
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	20000704 	.word	0x20000704
 8001d84:	40026010 	.word	0x40026010
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	20000484 	.word	0x20000484
 8001d98:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a78      	ldr	r2, [pc, #480]	; (8001f84 <HAL_UART_MspInit+0x450>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d162      	bne.n	8001e6c <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	4b77      	ldr	r3, [pc, #476]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a76      	ldr	r2, [pc, #472]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b74      	ldr	r3, [pc, #464]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b6d      	ldr	r3, [pc, #436]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dde:	230c      	movs	r3, #12
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dee:	2307      	movs	r3, #7
 8001df0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df6:	4619      	mov	r1, r3
 8001df8:	4864      	ldr	r0, [pc, #400]	; (8001f8c <HAL_UART_MspInit+0x458>)
 8001dfa:	f001 fc45 	bl	8003688 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001dfe:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e00:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <HAL_UART_MspInit+0x460>)
 8001e02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e04:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e0c:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e12:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e18:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e20:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e26:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e2c:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e38:	4b55      	ldr	r3, [pc, #340]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e3e:	4854      	ldr	r0, [pc, #336]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e40:	f001 f816 	bl	8002e70 <HAL_DMA_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8001e4a:	f7ff fc5b 	bl	8001704 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
 8001e54:	4a4e      	ldr	r2, [pc, #312]	; (8001f90 <HAL_UART_MspInit+0x45c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2026      	movs	r0, #38	; 0x26
 8001e60:	f000 ffcf 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e64:	2026      	movs	r0, #38	; 0x26
 8001e66:	f000 ffe8 	bl	8002e3a <HAL_NVIC_EnableIRQ>
}
 8001e6a:	e087      	b.n	8001f7c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_UART_MspInit+0x464>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	f040 8082 	bne.w	8001f7c <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a3a      	ldr	r2, [pc, #232]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_UART_MspInit+0x454>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001edc:	2307      	movs	r3, #7
 8001ede:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	482d      	ldr	r0, [pc, #180]	; (8001f9c <HAL_UART_MspInit+0x468>)
 8001ee8:	f001 fbce 	bl	8003688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001efe:	2307      	movs	r3, #7
 8001f00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f06:	4619      	mov	r1, r3
 8001f08:	4825      	ldr	r0, [pc, #148]	; (8001fa0 <HAL_UART_MspInit+0x46c>)
 8001f0a:	f001 fbbd 	bl	8003688 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001f0e:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_UART_MspInit+0x474>)
 8001f12:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f42:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f50:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f52:	f000 ff8d 	bl	8002e70 <HAL_DMA_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001f5c:	f7ff fbd2 	bl	8001704 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_UART_MspInit+0x470>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2027      	movs	r0, #39	; 0x27
 8001f72:	f000 ff46 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f76:	2027      	movs	r0, #39	; 0x27
 8001f78:	f000 ff5f 	bl	8002e3a <HAL_NVIC_EnableIRQ>
}
 8001f7c:	bf00      	nop
 8001f7e:	3748      	adds	r7, #72	; 0x48
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40004400 	.word	0x40004400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	200004e4 	.word	0x200004e4
 8001f94:	400260a0 	.word	0x400260a0
 8001f98:	40004800 	.word	0x40004800
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	20000080 	.word	0x20000080
 8001fa8:	40026028 	.word	0x40026028

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 fde2 	bl	8002bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA1_Stream0_IRQHandler+0x10>)
 800200e:	f001 f8c7 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000704 	.word	0x20000704

0800201c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <DMA1_Stream1_IRQHandler+0x10>)
 8002022:	f001 f8bd 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000080 	.word	0x20000080

08002030 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <DMA1_Stream6_IRQHandler+0x10>)
 8002036:	f001 f8b3 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200004e4 	.word	0x200004e4

08002044 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800204a:	f003 f933 	bl	80052b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000350 	.word	0x20000350

08002058 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <USART1_IRQHandler+0x10>)
 800205e:	f003 fcd9 	bl	8005a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000544 	.word	0x20000544

0800206c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <USART2_IRQHandler+0x10>)
 8002072:	f003 fccf 	bl	8005a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200006c4 	.word	0x200006c4

08002080 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <USART3_IRQHandler+0x10>)
 8002086:	f003 fcc5 	bl	8005a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200000e0 	.word	0x200000e0

08002094 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <SPI3_IRQHandler+0x10>)
 800209a:	f002 fe61 	bl	8004d60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200003ec 	.word	0x200003ec

080020a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <UART5_IRQHandler+0x10>)
 80020ae:	f003 fcb1 	bl	8005a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000444 	.word	0x20000444

080020bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM6_DAC_IRQHandler+0x10>)
 80020c2:	f003 f8f7 	bl	80052b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000628 	.word	0x20000628

080020d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <TIM7_IRQHandler+0x10>)
 80020d6:	f003 f8ed 	bl	80052b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000998 	.word	0x20000998

080020e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <DMA2_Stream2_IRQHandler+0x10>)
 80020ea:	f001 f859 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000484 	.word	0x20000484

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <SystemInit+0x28>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <SystemInit+0x28>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SystemInit+0x28>)
 800210e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002112:	609a      	str	r2, [r3, #8]
#endif
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800212c:	f000 fd60 	bl	8002bf0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SPI_Timer_On+0x20>)
 8002134:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <SPI_Timer_On+0x24>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200009d8 	.word	0x200009d8
 8002148:	200009dc 	.word	0x200009dc

0800214c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002150:	f000 fd4e 	bl	8002bf0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <SPI_Timer_Status+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1ad2      	subs	r2, r2, r3
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SPI_Timer_Status+0x28>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	bf34      	ite	cc
 8002164:	2301      	movcc	r3, #1
 8002166:	2300      	movcs	r3, #0
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200009d8 	.word	0x200009d8
 8002174:	200009dc 	.word	0x200009dc

08002178 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002182:	f107 020f 	add.w	r2, r7, #15
 8002186:	1df9      	adds	r1, r7, #7
 8002188:	2332      	movs	r3, #50	; 0x32
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	4804      	ldr	r0, [pc, #16]	; (80021a0 <xchg_spi+0x28>)
 8002190:	f002 fc43 	bl	8004a1a <HAL_SPI_TransmitReceive>
    return rxDat;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200003ec 	.word	0x200003ec

080021a4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e00a      	b.n	80021ca <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	18d4      	adds	r4, r2, r3
 80021ba:	20ff      	movs	r0, #255	; 0xff
 80021bc:	f7ff ffdc 	bl	8002178 <xchg_spi>
 80021c0:	4603      	mov	r3, r0
 80021c2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3f0      	bcc.n	80021b4 <rcvr_spi_multi+0x10>
	}
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}

080021da <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e009      	b.n	80021fe <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ffc0 	bl	8002178 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3f1      	bcc.n	80021ea <xmit_spi_multi+0x10>
	}
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002216:	f000 fceb 	bl	8002bf0 <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002220:	20ff      	movs	r0, #255	; 0xff
 8002222:	f7ff ffa9 	bl	8002178 <xchg_spi>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2bff      	cmp	r3, #255	; 0xff
 800222e:	d007      	beq.n	8002240 <wait_ready+0x32>
 8002230:	f000 fcde 	bl	8002bf0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8ef      	bhi.n	8002220 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002258:	2201      	movs	r2, #1
 800225a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800225e:	4804      	ldr	r0, [pc, #16]	; (8002270 <despiselect+0x1c>)
 8002260:	f001 fbbc 	bl	80039dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002264:	20ff      	movs	r0, #255	; 0xff
 8002266:	f7ff ff87 	bl	8002178 <xchg_spi>

}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40020000 	.word	0x40020000

08002274 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800227e:	480a      	ldr	r0, [pc, #40]	; (80022a8 <spiselect+0x34>)
 8002280:	f001 fbac 	bl	80039dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002284:	20ff      	movs	r0, #255	; 0xff
 8002286:	f7ff ff77 	bl	8002178 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800228a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800228e:	f7ff ffbe 	bl	800220e <wait_ready>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <spiselect+0x28>
 8002298:	2301      	movs	r3, #1
 800229a:	e002      	b.n	80022a2 <spiselect+0x2e>

	despiselect();
 800229c:	f7ff ffda 	bl	8002254 <despiselect>
	return 0;	/* Timeout */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40020000 	.word	0x40020000

080022ac <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80022b6:	20c8      	movs	r0, #200	; 0xc8
 80022b8:	f7ff ff34 	bl	8002124 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80022bc:	20ff      	movs	r0, #255	; 0xff
 80022be:	f7ff ff5b 	bl	8002178 <xchg_spi>
 80022c2:	4603      	mov	r3, r0
 80022c4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2bff      	cmp	r3, #255	; 0xff
 80022ca:	d104      	bne.n	80022d6 <rcvr_datablock+0x2a>
 80022cc:	f7ff ff3e 	bl	800214c <SPI_Timer_Status>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f2      	bne.n	80022bc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2bfe      	cmp	r3, #254	; 0xfe
 80022da:	d001      	beq.n	80022e0 <rcvr_datablock+0x34>
 80022dc:	2300      	movs	r3, #0
 80022de:	e00a      	b.n	80022f6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff5e 	bl	80021a4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80022e8:	20ff      	movs	r0, #255	; 0xff
 80022ea:	f7ff ff45 	bl	8002178 <xchg_spi>
 80022ee:	20ff      	movs	r0, #255	; 0xff
 80022f0:	f7ff ff42 	bl	8002178 <xchg_spi>

	return 1;						/* Function succeeded */
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800230a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800230e:	f7ff ff7e 	bl	800220e <wait_ready>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <xmit_datablock+0x1e>
 8002318:	2300      	movs	r3, #0
 800231a:	e01e      	b.n	800235a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff2a 	bl	8002178 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	2bfd      	cmp	r3, #253	; 0xfd
 8002328:	d016      	beq.n	8002358 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800232a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ff53 	bl	80021da <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002334:	20ff      	movs	r0, #255	; 0xff
 8002336:	f7ff ff1f 	bl	8002178 <xchg_spi>
 800233a:	20ff      	movs	r0, #255	; 0xff
 800233c:	f7ff ff1c 	bl	8002178 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002340:	20ff      	movs	r0, #255	; 0xff
 8002342:	f7ff ff19 	bl	8002178 <xchg_spi>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2b05      	cmp	r3, #5
 8002352:	d001      	beq.n	8002358 <xmit_datablock+0x5a>
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <xmit_datablock+0x5c>
	}
	return 1;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	6039      	str	r1, [r7, #0]
 800236c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da0e      	bge.n	8002394 <send_cmd+0x32>
		cmd &= 0x7F;
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800237c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800237e:	2100      	movs	r1, #0
 8002380:	2037      	movs	r0, #55	; 0x37
 8002382:	f7ff ffee 	bl	8002362 <send_cmd>
 8002386:	4603      	mov	r3, r0
 8002388:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d901      	bls.n	8002394 <send_cmd+0x32>
 8002390:	7bbb      	ldrb	r3, [r7, #14]
 8002392:	e051      	b.n	8002438 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d008      	beq.n	80023ac <send_cmd+0x4a>
		despiselect();
 800239a:	f7ff ff5b 	bl	8002254 <despiselect>
		if (!spiselect()) return 0xFF;
 800239e:	f7ff ff69 	bl	8002274 <spiselect>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <send_cmd+0x4a>
 80023a8:	23ff      	movs	r3, #255	; 0xff
 80023aa:	e045      	b.n	8002438 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fedf 	bl	8002178 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	0e1b      	lsrs	r3, r3, #24
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fed9 	bl	8002178 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fed3 	bl	8002178 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fecd 	bl	8002178 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fec8 	bl	8002178 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <send_cmd+0x94>
 80023f2:	2395      	movs	r3, #149	; 0x95
 80023f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d101      	bne.n	8002400 <send_cmd+0x9e>
 80023fc:	2387      	movs	r3, #135	; 0x87
 80023fe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff feb8 	bl	8002178 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d102      	bne.n	8002414 <send_cmd+0xb2>
 800240e:	20ff      	movs	r0, #255	; 0xff
 8002410:	f7ff feb2 	bl	8002178 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002414:	230a      	movs	r3, #10
 8002416:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002418:	20ff      	movs	r0, #255	; 0xff
 800241a:	f7ff fead 	bl	8002178 <xchg_spi>
 800241e:	4603      	mov	r3, r0
 8002420:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002422:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002426:	2b00      	cmp	r3, #0
 8002428:	da05      	bge.n	8002436 <send_cmd+0xd4>
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	3b01      	subs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002436:	7bbb      	ldrb	r3, [r7, #14]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <USER_SPI_initialize+0x14>
 8002450:	2301      	movs	r3, #1
 8002452:	e0cb      	b.n	80025ec <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002454:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <USER_SPI_initialize+0x1b4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <USER_SPI_initialize+0x2a>
 8002462:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <USER_SPI_initialize+0x1b4>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	e0c0      	b.n	80025ec <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <USER_SPI_initialize+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002472:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002474:	230a      	movs	r3, #10
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e005      	b.n	8002486 <USER_SPI_initialize+0x46>
 800247a:	20ff      	movs	r0, #255	; 0xff
 800247c:	f7ff fe7c 	bl	8002178 <xchg_spi>
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3b01      	subs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f6      	bne.n	800247a <USER_SPI_initialize+0x3a>

	ty = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002490:	2100      	movs	r1, #0
 8002492:	2000      	movs	r0, #0
 8002494:	f7ff ff65 	bl	8002362 <send_cmd>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	f040 808b 	bne.w	80025b6 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80024a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a4:	f7ff fe3e 	bl	8002124 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80024a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80024ac:	2008      	movs	r0, #8
 80024ae:	f7ff ff58 	bl	8002362 <send_cmd>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d151      	bne.n	800255c <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e00d      	b.n	80024da <USER_SPI_initialize+0x9a>
 80024be:	7bfc      	ldrb	r4, [r7, #15]
 80024c0:	20ff      	movs	r0, #255	; 0xff
 80024c2:	f7ff fe59 	bl	8002178 <xchg_spi>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	4423      	add	r3, r4
 80024d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	3301      	adds	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d9ee      	bls.n	80024be <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80024e0:	7abb      	ldrb	r3, [r7, #10]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d167      	bne.n	80025b6 <USER_SPI_initialize+0x176>
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	2baa      	cmp	r3, #170	; 0xaa
 80024ea:	d164      	bne.n	80025b6 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80024ec:	bf00      	nop
 80024ee:	f7ff fe2d 	bl	800214c <SPI_Timer_Status>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <USER_SPI_initialize+0xc8>
 80024f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024fc:	20a9      	movs	r0, #169	; 0xa9
 80024fe:	f7ff ff30 	bl	8002362 <send_cmd>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f2      	bne.n	80024ee <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002508:	f7ff fe20 	bl	800214c <SPI_Timer_Status>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d051      	beq.n	80025b6 <USER_SPI_initialize+0x176>
 8002512:	2100      	movs	r1, #0
 8002514:	203a      	movs	r0, #58	; 0x3a
 8002516:	f7ff ff24 	bl	8002362 <send_cmd>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d14a      	bne.n	80025b6 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e00d      	b.n	8002542 <USER_SPI_initialize+0x102>
 8002526:	7bfc      	ldrb	r4, [r7, #15]
 8002528:	20ff      	movs	r0, #255	; 0xff
 800252a:	f7ff fe25 	bl	8002178 <xchg_spi>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	4423      	add	r3, r4
 8002538:	f803 2c08 	strb.w	r2, [r3, #-8]
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	3301      	adds	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d9ee      	bls.n	8002526 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002548:	7a3b      	ldrb	r3, [r7, #8]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <USER_SPI_initialize+0x116>
 8002552:	230c      	movs	r3, #12
 8002554:	e000      	b.n	8002558 <USER_SPI_initialize+0x118>
 8002556:	2304      	movs	r3, #4
 8002558:	737b      	strb	r3, [r7, #13]
 800255a:	e02c      	b.n	80025b6 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800255c:	2100      	movs	r1, #0
 800255e:	20a9      	movs	r0, #169	; 0xa9
 8002560:	f7ff feff 	bl	8002362 <send_cmd>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d804      	bhi.n	8002574 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800256a:	2302      	movs	r3, #2
 800256c:	737b      	strb	r3, [r7, #13]
 800256e:	23a9      	movs	r3, #169	; 0xa9
 8002570:	73bb      	strb	r3, [r7, #14]
 8002572:	e003      	b.n	800257c <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002574:	2301      	movs	r3, #1
 8002576:	737b      	strb	r3, [r7, #13]
 8002578:	2301      	movs	r3, #1
 800257a:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800257c:	bf00      	nop
 800257e:	f7ff fde5 	bl	800214c <SPI_Timer_Status>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <USER_SPI_initialize+0x158>
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fee8 	bl	8002362 <send_cmd>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f2      	bne.n	800257e <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002598:	f7ff fdd8 	bl	800214c <SPI_Timer_Status>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <USER_SPI_initialize+0x172>
 80025a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a6:	2010      	movs	r0, #16
 80025a8:	f7ff fedb 	bl	8002362 <send_cmd>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <USER_SPI_initialize+0x176>
				ty = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <USER_SPI_initialize+0x1bc>)
 80025b8:	7b7b      	ldrb	r3, [r7, #13]
 80025ba:	7013      	strb	r3, [r2, #0]
	despiselect();
 80025bc:	f7ff fe4a 	bl	8002254 <despiselect>

	if (ty) {			/* OK */
 80025c0:	7b7b      	ldrb	r3, [r7, #13]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <USER_SPI_initialize+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2210      	movs	r2, #16
 80025cc:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <USER_SPI_initialize+0x1b4>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <USER_SPI_initialize+0x1b4>)
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e002      	b.n	80025e6 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <USER_SPI_initialize+0x1b4>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80025e6:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <USER_SPI_initialize+0x1b4>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	20000004 	.word	0x20000004
 80025f8:	200003ec 	.word	0x200003ec
 80025fc:	2000004a 	.word	0x2000004a

08002600 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <USER_SPI_status+0x14>
 8002610:	2301      	movs	r3, #1
 8002612:	e002      	b.n	800261a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <USER_SPI_status+0x28>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000004 	.word	0x20000004

0800262c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <USER_SPI_read+0x1c>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <USER_SPI_read+0x20>
 8002648:	2304      	movs	r3, #4
 800264a:	e04d      	b.n	80026e8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <USER_SPI_read+0xc4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <USER_SPI_read+0x32>
 800265a:	2303      	movs	r3, #3
 800265c:	e044      	b.n	80026e8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <USER_SPI_read+0xc8>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <USER_SPI_read+0x44>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	025b      	lsls	r3, r3, #9
 800266e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d111      	bne.n	800269a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	2011      	movs	r0, #17
 800267a:	f7ff fe72 	bl	8002362 <send_cmd>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d129      	bne.n	80026d8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002688:	68b8      	ldr	r0, [r7, #8]
 800268a:	f7ff fe0f 	bl	80022ac <rcvr_datablock>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d021      	beq.n	80026d8 <USER_SPI_read+0xac>
			count = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	e01e      	b.n	80026d8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	2012      	movs	r0, #18
 800269e:	f7ff fe60 	bl	8002362 <send_cmd>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d117      	bne.n	80026d8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80026a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ac:	68b8      	ldr	r0, [r7, #8]
 80026ae:	f7ff fdfd 	bl	80022ac <rcvr_datablock>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <USER_SPI_read+0xa2>
				buff += 512;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ed      	bne.n	80026a8 <USER_SPI_read+0x7c>
 80026cc:	e000      	b.n	80026d0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80026ce:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80026d0:	2100      	movs	r1, #0
 80026d2:	200c      	movs	r0, #12
 80026d4:	f7ff fe45 	bl	8002362 <send_cmd>
		}
	}
	despiselect();
 80026d8:	f7ff fdbc 	bl	8002254 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000004 	.word	0x20000004
 80026f4:	2000004a 	.word	0x2000004a

080026f8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4603      	mov	r3, r0
 8002706:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <USER_SPI_write+0x1c>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <USER_SPI_write+0x20>
 8002714:	2304      	movs	r3, #4
 8002716:	e063      	b.n	80027e0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <USER_SPI_write+0xf0>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <USER_SPI_write+0x32>
 8002726:	2303      	movs	r3, #3
 8002728:	e05a      	b.n	80027e0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800272a:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <USER_SPI_write+0xf0>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <USER_SPI_write+0x44>
 8002738:	2302      	movs	r3, #2
 800273a:	e051      	b.n	80027e0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <USER_SPI_write+0xf4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <USER_SPI_write+0x56>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d110      	bne.n	8002776 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	2018      	movs	r0, #24
 8002758:	f7ff fe03 	bl	8002362 <send_cmd>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d136      	bne.n	80027d0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002762:	21fe      	movs	r1, #254	; 0xfe
 8002764:	68b8      	ldr	r0, [r7, #8]
 8002766:	f7ff fdca 	bl	80022fe <xmit_datablock>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02f      	beq.n	80027d0 <USER_SPI_write+0xd8>
			count = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	e02c      	b.n	80027d0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <USER_SPI_write+0xf4>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <USER_SPI_write+0x92>
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	2097      	movs	r0, #151	; 0x97
 8002786:	f7ff fdec 	bl	8002362 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	2019      	movs	r0, #25
 800278e:	f7ff fde8 	bl	8002362 <send_cmd>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11b      	bne.n	80027d0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002798:	21fc      	movs	r1, #252	; 0xfc
 800279a:	68b8      	ldr	r0, [r7, #8]
 800279c:	f7ff fdaf 	bl	80022fe <xmit_datablock>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <USER_SPI_write+0xc4>
				buff += 512;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ee      	bne.n	8002798 <USER_SPI_write+0xa0>
 80027ba:	e000      	b.n	80027be <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80027bc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80027be:	21fd      	movs	r1, #253	; 0xfd
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7ff fd9c 	bl	80022fe <xmit_datablock>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <USER_SPI_write+0xd8>
 80027cc:	2301      	movs	r3, #1
 80027ce:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80027d0:	f7ff fd40 	bl	8002254 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000004 	.word	0x20000004
 80027ec:	2000004a 	.word	0x2000004a

080027f0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	603a      	str	r2, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
 80027fc:	460b      	mov	r3, r1
 80027fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <USER_SPI_ioctl+0x1a>
 8002806:	2304      	movs	r3, #4
 8002808:	e15a      	b.n	8002ac0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800280a:	4baf      	ldr	r3, [pc, #700]	; (8002ac8 <USER_SPI_ioctl+0x2d8>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <USER_SPI_ioctl+0x2c>
 8002818:	2303      	movs	r3, #3
 800281a:	e151      	b.n	8002ac0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002822:	79bb      	ldrb	r3, [r7, #6]
 8002824:	2b04      	cmp	r3, #4
 8002826:	f200 8136 	bhi.w	8002a96 <USER_SPI_ioctl+0x2a6>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <USER_SPI_ioctl+0x40>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002845 	.word	0x08002845
 8002834:	08002859 	.word	0x08002859
 8002838:	08002a97 	.word	0x08002a97
 800283c:	08002905 	.word	0x08002905
 8002840:	080029fb 	.word	0x080029fb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002844:	f7ff fd16 	bl	8002274 <spiselect>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8127 	beq.w	8002a9e <USER_SPI_ioctl+0x2ae>
 8002850:	2300      	movs	r3, #0
 8002852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002856:	e122      	b.n	8002a9e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002858:	2100      	movs	r1, #0
 800285a:	2009      	movs	r0, #9
 800285c:	f7ff fd81 	bl	8002362 <send_cmd>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 811d 	bne.w	8002aa2 <USER_SPI_ioctl+0x2b2>
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	2110      	movs	r1, #16
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fd1c 	bl	80022ac <rcvr_datablock>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8113 	beq.w	8002aa2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800287c:	7b3b      	ldrb	r3, [r7, #12]
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d111      	bne.n	80028aa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002886:	7d7b      	ldrb	r3, [r7, #21]
 8002888:	461a      	mov	r2, r3
 800288a:	7d3b      	ldrb	r3, [r7, #20]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4413      	add	r3, r2
 8002890:	461a      	mov	r2, r3
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800289a:	4413      	add	r3, r2
 800289c:	3301      	adds	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	029a      	lsls	r2, r3, #10
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e028      	b.n	80028fc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80028aa:	7c7b      	ldrb	r3, [r7, #17]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	7dbb      	ldrb	r3, [r7, #22]
 80028b4:	09db      	lsrs	r3, r3, #7
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	7d7b      	ldrb	r3, [r7, #21]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0306 	and.w	r3, r3, #6
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3302      	adds	r3, #2
 80028ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80028d2:	7d3b      	ldrb	r3, [r7, #20]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	441a      	add	r2, r3
 80028e0:	7cbb      	ldrb	r3, [r7, #18]
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e8:	4413      	add	r3, r2
 80028ea:	3301      	adds	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80028ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80028f2:	3b09      	subs	r3, #9
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	409a      	lsls	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002902:	e0ce      	b.n	8002aa2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002904:	4b71      	ldr	r3, [pc, #452]	; (8002acc <USER_SPI_ioctl+0x2dc>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d031      	beq.n	8002974 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002910:	2100      	movs	r1, #0
 8002912:	208d      	movs	r0, #141	; 0x8d
 8002914:	f7ff fd25 	bl	8002362 <send_cmd>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80c3 	bne.w	8002aa6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002920:	20ff      	movs	r0, #255	; 0xff
 8002922:	f7ff fc29 	bl	8002178 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	2110      	movs	r1, #16
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fcbd 	bl	80022ac <rcvr_datablock>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80b6 	beq.w	8002aa6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800293a:	2330      	movs	r3, #48	; 0x30
 800293c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002940:	e007      	b.n	8002952 <USER_SPI_ioctl+0x162>
 8002942:	20ff      	movs	r0, #255	; 0xff
 8002944:	f7ff fc18 	bl	8002178 <xchg_spi>
 8002948:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800294c:	3b01      	subs	r3, #1
 800294e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002952:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f3      	bne.n	8002942 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800295a:	7dbb      	ldrb	r3, [r7, #22]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	2310      	movs	r3, #16
 8002964:	fa03 f202 	lsl.w	r2, r3, r2
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002972:	e098      	b.n	8002aa6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002974:	2100      	movs	r1, #0
 8002976:	2009      	movs	r0, #9
 8002978:	f7ff fcf3 	bl	8002362 <send_cmd>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8091 	bne.w	8002aa6 <USER_SPI_ioctl+0x2b6>
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2110      	movs	r1, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fc8e 	bl	80022ac <rcvr_datablock>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8087 	beq.w	8002aa6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <USER_SPI_ioctl+0x2dc>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80029a4:	7dbb      	ldrb	r3, [r7, #22]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80029ac:	7dfa      	ldrb	r2, [r7, #23]
 80029ae:	09d2      	lsrs	r2, r2, #7
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	4413      	add	r3, r2
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	7e7b      	ldrb	r3, [r7, #25]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e013      	b.n	80029f2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80029ca:	7dbb      	ldrb	r3, [r7, #22]
 80029cc:	109b      	asrs	r3, r3, #2
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	3301      	adds	r3, #1
 80029d6:	7dfa      	ldrb	r2, [r7, #23]
 80029d8:	00d2      	lsls	r2, r2, #3
 80029da:	f002 0218 	and.w	r2, r2, #24
 80029de:	7df9      	ldrb	r1, [r7, #23]
 80029e0:	0949      	lsrs	r1, r1, #5
 80029e2:	b2c9      	uxtb	r1, r1
 80029e4:	440a      	add	r2, r1
 80029e6:	3201      	adds	r2, #1
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80029f8:	e055      	b.n	8002aa6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <USER_SPI_ioctl+0x2dc>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f003 0306 	and.w	r3, r3, #6
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d051      	beq.n	8002aaa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002a06:	f107 020c 	add.w	r2, r7, #12
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	210b      	movs	r1, #11
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff feee 	bl	80027f0 <USER_SPI_ioctl>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d149      	bne.n	8002aae <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002a1a:	7b3b      	ldrb	r3, [r7, #12]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <USER_SPI_ioctl+0x23e>
 8002a24:	7dbb      	ldrb	r3, [r7, #22]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d041      	beq.n	8002ab2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002a3e:	4b23      	ldr	r3, [pc, #140]	; (8002acc <USER_SPI_ioctl+0x2dc>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	025b      	lsls	r3, r3, #9
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a58:	2020      	movs	r0, #32
 8002a5a:	f7ff fc82 	bl	8002362 <send_cmd>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d128      	bne.n	8002ab6 <USER_SPI_ioctl+0x2c6>
 8002a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a66:	2021      	movs	r0, #33	; 0x21
 8002a68:	f7ff fc7b 	bl	8002362 <send_cmd>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d121      	bne.n	8002ab6 <USER_SPI_ioctl+0x2c6>
 8002a72:	2100      	movs	r1, #0
 8002a74:	2026      	movs	r0, #38	; 0x26
 8002a76:	f7ff fc74 	bl	8002362 <send_cmd>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11a      	bne.n	8002ab6 <USER_SPI_ioctl+0x2c6>
 8002a80:	f247 5030 	movw	r0, #30000	; 0x7530
 8002a84:	f7ff fbc3 	bl	800220e <wait_ready>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d013      	beq.n	8002ab6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002a94:	e00f      	b.n	8002ab6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002a96:	2304      	movs	r3, #4
 8002a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a9c:	e00c      	b.n	8002ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8002a9e:	bf00      	nop
 8002aa0:	e00a      	b.n	8002ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8002aa2:	bf00      	nop
 8002aa4:	e008      	b.n	8002ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8002aa6:	bf00      	nop
 8002aa8:	e006      	b.n	8002ab8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002aaa:	bf00      	nop
 8002aac:	e004      	b.n	8002ab8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002aae:	bf00      	nop
 8002ab0:	e002      	b.n	8002ab8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ab6:	bf00      	nop
	}

	despiselect();
 8002ab8:	f7ff fbcc 	bl	8002254 <despiselect>

	return res;
 8002abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3730      	adds	r7, #48	; 0x30
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	2000004a 	.word	0x2000004a

08002ad0 <Reset_Handler>:
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b08 <LoopFillZerobss+0x14>
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	e003      	b.n	8002ae0 <LoopCopyDataInit>

08002ad8 <CopyDataInit>:
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <LoopFillZerobss+0x18>)
 8002ada:	585b      	ldr	r3, [r3, r1]
 8002adc:	5043      	str	r3, [r0, r1]
 8002ade:	3104      	adds	r1, #4

08002ae0 <LoopCopyDataInit>:
 8002ae0:	480b      	ldr	r0, [pc, #44]	; (8002b10 <LoopFillZerobss+0x1c>)
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <LoopFillZerobss+0x20>)
 8002ae4:	1842      	adds	r2, r0, r1
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3f6      	bcc.n	8002ad8 <CopyDataInit>
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <LoopFillZerobss+0x24>)
 8002aec:	e002      	b.n	8002af4 <LoopFillZerobss>

08002aee <FillZerobss>:
 8002aee:	2300      	movs	r3, #0
 8002af0:	f842 3b04 	str.w	r3, [r2], #4

08002af4 <LoopFillZerobss>:
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <LoopFillZerobss+0x28>)
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3f9      	bcc.n	8002aee <FillZerobss>
 8002afa:	f7ff fafd 	bl	80020f8 <SystemInit>
 8002afe:	f006 f801 	bl	8008b04 <__libc_init_array>
 8002b02:	f7fe f91b 	bl	8000d3c <main>
 8002b06:	4770      	bx	lr
 8002b08:	20020000 	.word	0x20020000
 8002b0c:	08008ef4 	.word	0x08008ef4
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000024 	.word	0x20000024
 8002b18:	20000024 	.word	0x20000024
 8002b1c:	20000e4c 	.word	0x20000e4c

08002b20 <ADC_IRQHandler>:
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <HAL_Init+0x40>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_Init+0x40>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <HAL_Init+0x40>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f000 f94d 	bl	8002dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 f808 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b58:	f7fe fea8 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_InitTick+0x54>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_InitTick+0x58>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f965 	bl	8002e56 <HAL_SYSTICK_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00e      	b.n	8002bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d80a      	bhi.n	8002bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba4:	f000 f92d 	bl	8002e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba8:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <HAL_InitTick+0x5c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	2000000c 	.word	0x2000000c
 8002bc4:	20000008 	.word	0x20000008

08002bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000000c 	.word	0x2000000c
 8002bec:	200009e0 	.word	0x200009e0

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200009e0 	.word	0x200009e0

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff ffee 	bl	8002bf0 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_Delay+0x40>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffde 	bl	8002bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	db0b      	blt.n	8002cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <__NVIC_EnableIRQ+0x38>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0a      	blt.n	8002d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <__NVIC_SetPriority+0x4c>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	0112      	lsls	r2, r2, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d14:	e00a      	b.n	8002d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <__NVIC_SetPriority+0x50>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b04      	subs	r3, #4
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	440b      	add	r3, r1
 8002d2a:	761a      	strb	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f1c3 0307 	rsb	r3, r3, #7
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	bf28      	it	cs
 8002d5e:	2304      	movcs	r3, #4
 8002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <NVIC_EncodePriority+0x30>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3b03      	subs	r3, #3
 8002d6e:	e000      	b.n	8002d72 <NVIC_EncodePriority+0x32>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	4313      	orrs	r3, r2
         );
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db8:	d301      	bcc.n	8002dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00f      	b.n	8002dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <SysTick_Config+0x40>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc6:	210f      	movs	r1, #15
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dcc:	f7ff ff8e 	bl	8002cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <SysTick_Config+0x40>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <SysTick_Config+0x40>)
 8002dd8:	2207      	movs	r2, #7
 8002dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	e000e010 	.word	0xe000e010

08002dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff29 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e14:	f7ff ff3e 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff8e 	bl	8002d40 <NVIC_EncodePriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5d 	bl	8002cec <__NVIC_SetPriority>
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff31 	bl	8002cb0 <__NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffa2 	bl	8002da8 <SysTick_Config>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7ff feb8 	bl	8002bf0 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e099      	b.n	8002fc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eac:	e00f      	b.n	8002ece <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eae:	f7ff fe9f 	bl	8002bf0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d908      	bls.n	8002ece <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e078      	b.n	8002fc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e8      	bne.n	8002eae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <HAL_DMA_Init+0x158>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d107      	bne.n	8002f38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	4313      	orrs	r3, r2
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d117      	bne.n	8002f92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00e      	beq.n	8002f92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb0d 	bl	8003594 <DMA_CheckFifoParam>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2240      	movs	r2, #64	; 0x40
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e016      	b.n	8002fc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fac4 	bl	8003528 <DMA_CalcBaseAndBitshift>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	223f      	movs	r2, #63	; 0x3f
 8002faa:	409a      	lsls	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	f010803f 	.word	0xf010803f

08002fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_Start_IT+0x26>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e040      	b.n	8003074 <HAL_DMA_Start_IT+0xa8>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d12f      	bne.n	8003066 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fa56 	bl	80034cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	223f      	movs	r2, #63	; 0x3f
 8003026:	409a      	lsls	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0216 	orr.w	r2, r2, #22
 800303a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0208 	orr.w	r2, r2, #8
 8003052:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e005      	b.n	8003072 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003072:	7dfb      	ldrb	r3, [r7, #23]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800308a:	f7ff fdb1 	bl	8002bf0 <HAL_GetTick>
 800308e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d008      	beq.n	80030ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e052      	b.n	8003154 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0216 	bic.w	r2, r2, #22
 80030bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_DMA_Abort+0x62>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0208 	bic.w	r2, r2, #8
 80030ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fe:	e013      	b.n	8003128 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003100:	f7ff fd76 	bl	8002bf0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b05      	cmp	r3, #5
 800310c:	d90c      	bls.n	8003128 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2203      	movs	r2, #3
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e015      	b.n	8003154 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e4      	bne.n	8003100 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	223f      	movs	r2, #63	; 0x3f
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00c      	b.n	8003194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2205      	movs	r2, #5
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031ac:	4b92      	ldr	r3, [pc, #584]	; (80033f8 <HAL_DMA_IRQHandler+0x258>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a92      	ldr	r2, [pc, #584]	; (80033fc <HAL_DMA_IRQHandler+0x25c>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	2208      	movs	r2, #8
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01a      	beq.n	800320c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	2208      	movs	r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	2201      	movs	r2, #1
 8003230:	409a      	lsls	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0202 	orr.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2204      	movs	r2, #4
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2204      	movs	r2, #4
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0204 	orr.w	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2210      	movs	r2, #16
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d043      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03c      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2210      	movs	r2, #16
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d024      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
 80032ce:	e01f      	b.n	8003310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
 80032e0:	e016      	b.n	8003310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0208 	bic.w	r2, r2, #8
 80032fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	2220      	movs	r2, #32
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 808e 	beq.w	800343e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8086 	beq.w	800343e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2220      	movs	r2, #32
 8003338:	409a      	lsls	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b05      	cmp	r3, #5
 8003348:	d136      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0216 	bic.w	r2, r2, #22
 8003358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_DMA_IRQHandler+0x1da>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0208 	bic.w	r2, r2, #8
 8003388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	223f      	movs	r2, #63	; 0x3f
 8003390:	409a      	lsls	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d07d      	beq.n	80034aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
        }
        return;
 80033b6:	e078      	b.n	80034aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01c      	beq.n	8003400 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d030      	beq.n	800343e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
 80033e4:	e02b      	b.n	800343e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d027      	beq.n	800343e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
 80033f6:	e022      	b.n	800343e <HAL_DMA_IRQHandler+0x29e>
 80033f8:	20000000 	.word	0x20000000
 80033fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0210 	bic.w	r2, r2, #16
 800341c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	2b00      	cmp	r3, #0
 8003444:	d032      	beq.n	80034ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d022      	beq.n	8003498 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2205      	movs	r2, #5
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3301      	adds	r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	429a      	cmp	r2, r3
 8003474:	d307      	bcc.n	8003486 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f2      	bne.n	800346a <HAL_DMA_IRQHandler+0x2ca>
 8003484:	e000      	b.n	8003488 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003486:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e000      	b.n	80034ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80034aa:	bf00      	nop
    }
  }
}
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop

080034b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d108      	bne.n	800350c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800350a:	e007      	b.n	800351c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3b10      	subs	r3, #16
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <DMA_CalcBaseAndBitshift+0x64>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <DMA_CalcBaseAndBitshift+0x68>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d909      	bls.n	800356a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	1d1a      	adds	r2, r3, #4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58
 8003568:	e007      	b.n	800357a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	aaaaaaab 	.word	0xaaaaaaab
 8003590:	08008e5c 	.word	0x08008e5c

08003594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11f      	bne.n	80035ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d855      	bhi.n	8003660 <DMA_CheckFifoParam+0xcc>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <DMA_CheckFifoParam+0x28>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035df 	.word	0x080035df
 80035c4:	080035cd 	.word	0x080035cd
 80035c8:	08003661 	.word	0x08003661
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d045      	beq.n	8003664 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035dc:	e042      	b.n	8003664 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035e6:	d13f      	bne.n	8003668 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ec:	e03c      	b.n	8003668 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f6:	d121      	bne.n	800363c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d836      	bhi.n	800366c <DMA_CheckFifoParam+0xd8>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <DMA_CheckFifoParam+0x70>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003615 	.word	0x08003615
 8003608:	0800361b 	.word	0x0800361b
 800360c:	08003615 	.word	0x08003615
 8003610:	0800362d 	.word	0x0800362d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      break;
 8003618:	e02f      	b.n	800367a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d024      	beq.n	8003670 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362a:	e021      	b.n	8003670 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003634:	d11e      	bne.n	8003674 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800363a:	e01b      	b.n	8003674 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d902      	bls.n	8003648 <DMA_CheckFifoParam+0xb4>
 8003642:	2b03      	cmp	r3, #3
 8003644:	d003      	beq.n	800364e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003646:	e018      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	e015      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00e      	beq.n	8003678 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
      break;
 800365e:	e00b      	b.n	8003678 <DMA_CheckFifoParam+0xe4>
      break;
 8003660:	bf00      	nop
 8003662:	e00a      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      break;
 8003664:	bf00      	nop
 8003666:	e008      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      break;
 8003668:	bf00      	nop
 800366a:	e006      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      break;
 800366c:	bf00      	nop
 800366e:	e004      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      break;
 8003670:	bf00      	nop
 8003672:	e002      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      break;   
 8003674:	bf00      	nop
 8003676:	e000      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      break;
 8003678:	bf00      	nop
    }
  } 
  
  return status; 
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	e165      	b.n	8003970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a4:	2201      	movs	r2, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	f040 8154 	bne.w	800396a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00b      	beq.n	80036e2 <HAL_GPIO_Init+0x5a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036d6:	2b11      	cmp	r3, #17
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b12      	cmp	r3, #18
 80036e0:	d130      	bne.n	8003744 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003718:	2201      	movs	r2, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 0201 	and.w	r2, r3, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0xfc>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b12      	cmp	r3, #18
 8003782:	d123      	bne.n	80037cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0203 	and.w	r2, r3, #3
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80ae 	beq.w	800396a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b5c      	ldr	r3, [pc, #368]	; (8003984 <HAL_GPIO_Init+0x2fc>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a5b      	ldr	r2, [pc, #364]	; (8003984 <HAL_GPIO_Init+0x2fc>)
 8003818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_GPIO_Init+0x2fc>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800382a:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_GPIO_Init+0x300>)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	220f      	movs	r2, #15
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4e      	ldr	r2, [pc, #312]	; (800398c <HAL_GPIO_Init+0x304>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d025      	beq.n	80038a2 <HAL_GPIO_Init+0x21a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_GPIO_Init+0x308>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01f      	beq.n	800389e <HAL_GPIO_Init+0x216>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_GPIO_Init+0x30c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d019      	beq.n	800389a <HAL_GPIO_Init+0x212>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <HAL_GPIO_Init+0x310>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_Init+0x20e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a4a      	ldr	r2, [pc, #296]	; (800399c <HAL_GPIO_Init+0x314>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00d      	beq.n	8003892 <HAL_GPIO_Init+0x20a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a49      	ldr	r2, [pc, #292]	; (80039a0 <HAL_GPIO_Init+0x318>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <HAL_GPIO_Init+0x206>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a48      	ldr	r2, [pc, #288]	; (80039a4 <HAL_GPIO_Init+0x31c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_GPIO_Init+0x202>
 8003886:	2306      	movs	r3, #6
 8003888:	e00c      	b.n	80038a4 <HAL_GPIO_Init+0x21c>
 800388a:	2307      	movs	r3, #7
 800388c:	e00a      	b.n	80038a4 <HAL_GPIO_Init+0x21c>
 800388e:	2305      	movs	r3, #5
 8003890:	e008      	b.n	80038a4 <HAL_GPIO_Init+0x21c>
 8003892:	2304      	movs	r3, #4
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x21c>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <HAL_GPIO_Init+0x21c>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_Init+0x21c>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x21c>
 80038a2:	2300      	movs	r3, #0
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f002 0203 	and.w	r2, r2, #3
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	4093      	lsls	r3, r2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b4:	4934      	ldr	r1, [pc, #208]	; (8003988 <HAL_GPIO_Init+0x300>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_GPIO_Init+0x320>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038e6:	4a30      	ldr	r2, [pc, #192]	; (80039a8 <HAL_GPIO_Init+0x320>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038ec:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_GPIO_Init+0x320>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <HAL_GPIO_Init+0x320>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_GPIO_Init+0x320>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_GPIO_Init+0x320>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_GPIO_Init+0x320>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003964:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_GPIO_Init+0x320>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	f67f ae96 	bls.w	80036a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3724      	adds	r7, #36	; 0x24
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40023800 	.word	0x40023800
 8003988:	40013800 	.word	0x40013800
 800398c:	40020000 	.word	0x40020000
 8003990:	40020400 	.word	0x40020400
 8003994:	40020800 	.word	0x40020800
 8003998:	40020c00 	.word	0x40020c00
 800399c:	40021000 	.word	0x40021000
 80039a0:	40021400 	.word	0x40021400
 80039a4:	40021800 	.word	0x40021800
 80039a8:	40013c00 	.word	0x40013c00

080039ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e001      	b.n	80039ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039f8:	e003      	b.n	8003a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	041a      	lsls	r2, r3, #16
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	619a      	str	r2, [r3, #24]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a3c:	f7ff f8d8 	bl	8002bf0 <HAL_GetTick>
 8003a40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a42:	e009      	b.n	8003a58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a44:	f7ff f8d4 	bl	8002bf0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a52:	d901      	bls.n	8003a58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e01f      	b.n	8003a98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d1ee      	bne.n	8003a44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a6c:	f7ff f8c0 	bl	8002bf0 <HAL_GetTick>
 8003a70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a72:	e009      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a74:	f7ff f8bc 	bl	8002bf0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a82:	d901      	bls.n	8003a88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e007      	b.n	8003a98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a94:	d1ee      	bne.n	8003a74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	420e0040 	.word	0x420e0040
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	420e0044 	.word	0x420e0044

08003ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0cc      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d90c      	bls.n	8003aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b65      	ldr	r3, [pc, #404]	; (8003c68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_ClockConfig+0x1b8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0b8      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b04:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b1c:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a52      	ldr	r2, [pc, #328]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b28:	4b50      	ldr	r3, [pc, #320]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	494d      	ldr	r1, [pc, #308]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d044      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d119      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07f      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d003      	beq.n	8003b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6e:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06f      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e067      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4934      	ldr	r1, [pc, #208]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba0:	f7ff f826 	bl	8002bf0 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba8:	f7ff f822 	bl	8002bf0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e04f      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 020c 	and.w	r2, r3, #12
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1eb      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d20c      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e032      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4916      	ldr	r1, [pc, #88]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	490e      	ldr	r1, [pc, #56]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c36:	f000 f855 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003c3a:	4601      	mov	r1, r0
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe ff86 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023c00 	.word	0x40023c00
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08008e44 	.word	0x08008e44
 8003c74:	20000000 	.word	0x20000000
 8003c78:	20000008 	.word	0x20000008

08003c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000000 	.word	0x20000000

08003c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c98:	f7ff fff0 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003c9c:	4601      	mov	r1, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0a9b      	lsrs	r3, r3, #10
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4a03      	ldr	r2, [pc, #12]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	08008e54 	.word	0x08008e54

08003cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cc0:	f7ff ffdc 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003cc4:	4601      	mov	r1, r0
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0b5b      	lsrs	r3, r3, #13
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4a03      	ldr	r2, [pc, #12]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08008e54 	.word	0x08008e54

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfe:	4bc6      	ldr	r3, [pc, #792]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	f200 817e 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x324>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_RCC_GetSysClockFreq+0x30>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08004009 	.word	0x08004009
 8003d1c:	08004009 	.word	0x08004009
 8003d20:	08004009 	.word	0x08004009
 8003d24:	08003d4f 	.word	0x08003d4f
 8003d28:	08004009 	.word	0x08004009
 8003d2c:	08004009 	.word	0x08004009
 8003d30:	08004009 	.word	0x08004009
 8003d34:	08003d55 	.word	0x08003d55
 8003d38:	08004009 	.word	0x08004009
 8003d3c:	08004009 	.word	0x08004009
 8003d40:	08004009 	.word	0x08004009
 8003d44:	08003eb1 	.word	0x08003eb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4bb4      	ldr	r3, [pc, #720]	; (800401c <HAL_RCC_GetSysClockFreq+0x338>)
 8003d4a:	613b      	str	r3, [r7, #16]
       break;
 8003d4c:	e15f      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4e:	4bb4      	ldr	r3, [pc, #720]	; (8004020 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003d50:	613b      	str	r3, [r7, #16]
      break;
 8003d52:	e15c      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d54:	4bb0      	ldr	r3, [pc, #704]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d5c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5e:	4bae      	ldr	r3, [pc, #696]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d04a      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6a:	4bab      	ldr	r3, [pc, #684]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	f04f 0400 	mov.w	r4, #0
 8003d74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	ea03 0501 	and.w	r5, r3, r1
 8003d80:	ea04 0602 	and.w	r6, r4, r2
 8003d84:	4629      	mov	r1, r5
 8003d86:	4632      	mov	r2, r6
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	f04f 0400 	mov.w	r4, #0
 8003d90:	0154      	lsls	r4, r2, #5
 8003d92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d96:	014b      	lsls	r3, r1, #5
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	1b49      	subs	r1, r1, r5
 8003d9e:	eb62 0206 	sbc.w	r2, r2, r6
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	0194      	lsls	r4, r2, #6
 8003dac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003db0:	018b      	lsls	r3, r1, #6
 8003db2:	1a5b      	subs	r3, r3, r1
 8003db4:	eb64 0402 	sbc.w	r4, r4, r2
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	00e2      	lsls	r2, r4, #3
 8003dc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dc6:	00d9      	lsls	r1, r3, #3
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4614      	mov	r4, r2
 8003dcc:	195b      	adds	r3, r3, r5
 8003dce:	eb44 0406 	adc.w	r4, r4, r6
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	0262      	lsls	r2, r4, #9
 8003ddc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003de0:	0259      	lsls	r1, r3, #9
 8003de2:	460b      	mov	r3, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	4621      	mov	r1, r4
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f04f 0400 	mov.w	r4, #0
 8003df0:	461a      	mov	r2, r3
 8003df2:	4623      	mov	r3, r4
 8003df4:	f7fc fa06 	bl	8000204 <__aeabi_uldivmod>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e049      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e00:	4b85      	ldr	r3, [pc, #532]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	f04f 0400 	mov.w	r4, #0
 8003e0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	ea03 0501 	and.w	r5, r3, r1
 8003e16:	ea04 0602 	and.w	r6, r4, r2
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	f04f 0400 	mov.w	r4, #0
 8003e26:	0154      	lsls	r4, r2, #5
 8003e28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e2c:	014b      	lsls	r3, r1, #5
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4622      	mov	r2, r4
 8003e32:	1b49      	subs	r1, r1, r5
 8003e34:	eb62 0206 	sbc.w	r2, r2, r6
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	f04f 0400 	mov.w	r4, #0
 8003e40:	0194      	lsls	r4, r2, #6
 8003e42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e46:	018b      	lsls	r3, r1, #6
 8003e48:	1a5b      	subs	r3, r3, r1
 8003e4a:	eb64 0402 	sbc.w	r4, r4, r2
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	00e2      	lsls	r2, r4, #3
 8003e58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e5c:	00d9      	lsls	r1, r3, #3
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4614      	mov	r4, r2
 8003e62:	195b      	adds	r3, r3, r5
 8003e64:	eb44 0406 	adc.w	r4, r4, r6
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	02a2      	lsls	r2, r4, #10
 8003e72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e76:	0299      	lsls	r1, r3, #10
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4614      	mov	r4, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	4621      	mov	r1, r4
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f04f 0400 	mov.w	r4, #0
 8003e86:	461a      	mov	r2, r3
 8003e88:	4623      	mov	r3, r4
 8003e8a:	f7fc f9bb 	bl	8000204 <__aeabi_uldivmod>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e94:	4b60      	ldr	r3, [pc, #384]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	613b      	str	r3, [r7, #16]
      break;
 8003eae:	e0ae      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb0:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eba:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d04a      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec6:	4b54      	ldr	r3, [pc, #336]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	f04f 0400 	mov.w	r4, #0
 8003ed0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	ea03 0501 	and.w	r5, r3, r1
 8003edc:	ea04 0602 	and.w	r6, r4, r2
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4632      	mov	r2, r6
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	0154      	lsls	r4, r2, #5
 8003eee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ef2:	014b      	lsls	r3, r1, #5
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	1b49      	subs	r1, r1, r5
 8003efa:	eb62 0206 	sbc.w	r2, r2, r6
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	f04f 0400 	mov.w	r4, #0
 8003f06:	0194      	lsls	r4, r2, #6
 8003f08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f0c:	018b      	lsls	r3, r1, #6
 8003f0e:	1a5b      	subs	r3, r3, r1
 8003f10:	eb64 0402 	sbc.w	r4, r4, r2
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	00e2      	lsls	r2, r4, #3
 8003f1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f22:	00d9      	lsls	r1, r3, #3
 8003f24:	460b      	mov	r3, r1
 8003f26:	4614      	mov	r4, r2
 8003f28:	195b      	adds	r3, r3, r5
 8003f2a:	eb44 0406 	adc.w	r4, r4, r6
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	0262      	lsls	r2, r4, #9
 8003f38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f3c:	0259      	lsls	r1, r3, #9
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4614      	mov	r4, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	4621      	mov	r1, r4
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f04f 0400 	mov.w	r4, #0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	f7fc f958 	bl	8000204 <__aeabi_uldivmod>
 8003f54:	4603      	mov	r3, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e049      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5c:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	f04f 0400 	mov.w	r4, #0
 8003f66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	ea03 0501 	and.w	r5, r3, r1
 8003f72:	ea04 0602 	and.w	r6, r4, r2
 8003f76:	4629      	mov	r1, r5
 8003f78:	4632      	mov	r2, r6
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	f04f 0400 	mov.w	r4, #0
 8003f82:	0154      	lsls	r4, r2, #5
 8003f84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f88:	014b      	lsls	r3, r1, #5
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	1b49      	subs	r1, r1, r5
 8003f90:	eb62 0206 	sbc.w	r2, r2, r6
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	f04f 0400 	mov.w	r4, #0
 8003f9c:	0194      	lsls	r4, r2, #6
 8003f9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fa2:	018b      	lsls	r3, r1, #6
 8003fa4:	1a5b      	subs	r3, r3, r1
 8003fa6:	eb64 0402 	sbc.w	r4, r4, r2
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	00e2      	lsls	r2, r4, #3
 8003fb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fb8:	00d9      	lsls	r1, r3, #3
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	195b      	adds	r3, r3, r5
 8003fc0:	eb44 0406 	adc.w	r4, r4, r6
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	02a2      	lsls	r2, r4, #10
 8003fce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fd2:	0299      	lsls	r1, r3, #10
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4614      	mov	r4, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	4621      	mov	r1, r4
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f04f 0400 	mov.w	r4, #0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4623      	mov	r3, r4
 8003fe6:	f7fc f90d 	bl	8000204 <__aeabi_uldivmod>
 8003fea:	4603      	mov	r3, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0f1b      	lsrs	r3, r3, #28
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	613b      	str	r3, [r7, #16]
      break;
 8004006:	e002      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <HAL_RCC_GetSysClockFreq+0x338>)
 800400a:	613b      	str	r3, [r7, #16]
      break;
 800400c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400e:	693b      	ldr	r3, [r7, #16]
}
 8004010:	4618      	mov	r0, r3
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	00f42400 	.word	0x00f42400
 8004020:	007a1200 	.word	0x007a1200

08004024 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8083 	beq.w	8004144 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800403e:	4b95      	ldr	r3, [pc, #596]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b04      	cmp	r3, #4
 8004048:	d019      	beq.n	800407e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800404a:	4b92      	ldr	r3, [pc, #584]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004052:	2b08      	cmp	r3, #8
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004056:	4b8f      	ldr	r3, [pc, #572]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004062:	d00c      	beq.n	800407e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004064:	4b8b      	ldr	r3, [pc, #556]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d112      	bne.n	8004096 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004070:	4b88      	ldr	r3, [pc, #544]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407c:	d10b      	bne.n	8004096 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407e:	4b85      	ldr	r3, [pc, #532]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d05b      	beq.n	8004142 <HAL_RCC_OscConfig+0x11e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d157      	bne.n	8004142 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e216      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x8a>
 80040a0:	4b7c      	ldr	r3, [pc, #496]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a7b      	ldr	r2, [pc, #492]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e01d      	b.n	80040ea <HAL_RCC_OscConfig+0xc6>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b6:	d10c      	bne.n	80040d2 <HAL_RCC_OscConfig+0xae>
 80040b8:	4b76      	ldr	r3, [pc, #472]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a75      	ldr	r2, [pc, #468]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b73      	ldr	r3, [pc, #460]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a72      	ldr	r2, [pc, #456]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	e00b      	b.n	80040ea <HAL_RCC_OscConfig+0xc6>
 80040d2:	4b70      	ldr	r3, [pc, #448]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6f      	ldr	r2, [pc, #444]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b6d      	ldr	r3, [pc, #436]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6c      	ldr	r2, [pc, #432]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe fd7d 	bl	8002bf0 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040fa:	f7fe fd79 	bl	8002bf0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b64      	cmp	r3, #100	; 0x64
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1db      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410c:	4b61      	ldr	r3, [pc, #388]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0xd6>
 8004118:	e014      	b.n	8004144 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fe fd69 	bl	8002bf0 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004122:	f7fe fd65 	bl	8002bf0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b64      	cmp	r3, #100	; 0x64
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e1c7      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004134:	4b57      	ldr	r3, [pc, #348]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0xfe>
 8004140:	e000      	b.n	8004144 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004142:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d06f      	beq.n	8004230 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004150:	4b50      	ldr	r3, [pc, #320]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b00      	cmp	r3, #0
 800415a:	d017      	beq.n	800418c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800415c:	4b4d      	ldr	r3, [pc, #308]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004164:	2b08      	cmp	r3, #8
 8004166:	d105      	bne.n	8004174 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004168:	4b4a      	ldr	r3, [pc, #296]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004174:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d11c      	bne.n	80041ba <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004180:	4b44      	ldr	r3, [pc, #272]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418c:	4b41      	ldr	r3, [pc, #260]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_OscConfig+0x180>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e18f      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b3b      	ldr	r3, [pc, #236]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4938      	ldr	r1, [pc, #224]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b8:	e03a      	b.n	8004230 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c2:	4b35      	ldr	r3, [pc, #212]	; (8004298 <HAL_RCC_OscConfig+0x274>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe fd12 	bl	8002bf0 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fe fd0e 	bl	8002bf0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e170      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e2:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b29      	ldr	r3, [pc, #164]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4925      	ldr	r1, [pc, #148]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
 8004202:	e015      	b.n	8004230 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCC_OscConfig+0x274>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fe fcf1 	bl	8002bf0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004212:	f7fe fced 	bl	8002bf0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e14f      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d037      	beq.n	80042ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d016      	beq.n	8004272 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004244:	4b15      	ldr	r3, [pc, #84]	; (800429c <HAL_RCC_OscConfig+0x278>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fe fcd1 	bl	8002bf0 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004252:	f7fe fccd 	bl	8002bf0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e12f      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x22e>
 8004270:	e01c      	b.n	80042ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_OscConfig+0x278>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe fcba 	bl	8002bf0 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427e:	e00f      	b.n	80042a0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe fcb6 	bl	8002bf0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d908      	bls.n	80042a0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e118      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800
 8004298:	42470000 	.word	0x42470000
 800429c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a0:	4b8a      	ldr	r3, [pc, #552]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80042a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e9      	bne.n	8004280 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8097 	beq.w	80043e8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042be:	4b83      	ldr	r3, [pc, #524]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	4b7f      	ldr	r3, [pc, #508]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	4a7e      	ldr	r2, [pc, #504]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	6413      	str	r3, [r2, #64]	; 0x40
 80042da:	4b7c      	ldr	r3, [pc, #496]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	4b79      	ldr	r3, [pc, #484]	; (80044d0 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d118      	bne.n	8004328 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f6:	4b76      	ldr	r3, [pc, #472]	; (80044d0 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a75      	ldr	r2, [pc, #468]	; (80044d0 <HAL_RCC_OscConfig+0x4ac>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004302:	f7fe fc75 	bl	8002bf0 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430a:	f7fe fc71 	bl	8002bf0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0d3      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <HAL_RCC_OscConfig+0x4ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d106      	bne.n	800433e <HAL_RCC_OscConfig+0x31a>
 8004330:	4b66      	ldr	r3, [pc, #408]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	4a65      	ldr	r2, [pc, #404]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6713      	str	r3, [r2, #112]	; 0x70
 800433c:	e01c      	b.n	8004378 <HAL_RCC_OscConfig+0x354>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b05      	cmp	r3, #5
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0x33c>
 8004346:	4b61      	ldr	r3, [pc, #388]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a60      	ldr	r2, [pc, #384]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	4b5e      	ldr	r3, [pc, #376]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	4a5d      	ldr	r2, [pc, #372]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
 800435e:	e00b      	b.n	8004378 <HAL_RCC_OscConfig+0x354>
 8004360:	4b5a      	ldr	r3, [pc, #360]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a59      	ldr	r2, [pc, #356]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
 800436c:	4b57      	ldr	r3, [pc, #348]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	4a56      	ldr	r2, [pc, #344]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004372:	f023 0304 	bic.w	r3, r3, #4
 8004376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fe fc36 	bl	8002bf0 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004386:	e00a      	b.n	800439e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fe fc32 	bl	8002bf0 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e092      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	4b4b      	ldr	r3, [pc, #300]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ee      	beq.n	8004388 <HAL_RCC_OscConfig+0x364>
 80043aa:	e014      	b.n	80043d6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe fc20 	bl	8002bf0 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fe fc1c 	bl	8002bf0 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e07c      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	4b40      	ldr	r3, [pc, #256]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ee      	bne.n	80043b4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d105      	bne.n	80043e8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043dc:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	4a3a      	ldr	r2, [pc, #232]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80043e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d068      	beq.n	80044c2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f0:	4b36      	ldr	r3, [pc, #216]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d060      	beq.n	80044be <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d145      	bne.n	8004490 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004404:	4b33      	ldr	r3, [pc, #204]	; (80044d4 <HAL_RCC_OscConfig+0x4b0>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fe fbf1 	bl	8002bf0 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004412:	f7fe fbed 	bl	8002bf0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e04f      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004424:	4b29      	ldr	r3, [pc, #164]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	019b      	lsls	r3, r3, #6
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	3b01      	subs	r3, #1
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	071b      	lsls	r3, r3, #28
 800445c:	491b      	ldr	r1, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <HAL_RCC_OscConfig+0x4b0>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe fbc2 	bl	8002bf0 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fe fbbe 	bl	8002bf0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e020      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x44c>
 800448e:	e018      	b.n	80044c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RCC_OscConfig+0x4b0>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe fbab 	bl	8002bf0 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449e:	f7fe fba7 	bl	8002bf0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e009      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_OscConfig+0x4a8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x47a>
 80044bc:	e001      	b.n	80044c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
 80044d4:	42470060 	.word	0x42470060

080044d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e056      	b.n	8004598 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fd f9f9 	bl	80018fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004520:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	ea42 0103 	orr.w	r1, r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	f003 0104 	and.w	r1, r3, #4
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_SPI_Transmit+0x22>
 80045be:	2302      	movs	r3, #2
 80045c0:	e11e      	b.n	8004800 <HAL_SPI_Transmit+0x260>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ca:	f7fe fb11 	bl	8002bf0 <HAL_GetTick>
 80045ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
 80045e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045e4:	e103      	b.n	80047ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_SPI_Transmit+0x52>
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f6:	e0fa      	b.n	80047ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2203      	movs	r2, #3
 80045fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463e:	d107      	bne.n	8004650 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d007      	beq.n	800466e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d14b      	bne.n	8004710 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_SPI_Transmit+0xe6>
 8004680:	8afb      	ldrh	r3, [r7, #22]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d13e      	bne.n	8004704 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046aa:	e02b      	b.n	8004704 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d112      	bne.n	80046e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	881a      	ldrh	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80046de:	e011      	b.n	8004704 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e0:	f7fe fa86 	bl	8002bf0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d803      	bhi.n	80046f8 <HAL_SPI_Transmit+0x158>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_Transmit+0x15e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004702:	e074      	b.n	80047ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1ce      	bne.n	80046ac <HAL_SPI_Transmit+0x10c>
 800470e:	e04c      	b.n	80047aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_Transmit+0x17e>
 8004718:	8afb      	ldrh	r3, [r7, #22]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d140      	bne.n	80047a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004744:	e02c      	b.n	80047a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d113      	bne.n	800477c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	86da      	strh	r2, [r3, #54]	; 0x36
 800477a:	e011      	b.n	80047a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800477c:	f7fe fa38 	bl	8002bf0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d803      	bhi.n	8004794 <HAL_SPI_Transmit+0x1f4>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004792:	d102      	bne.n	800479a <HAL_SPI_Transmit+0x1fa>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800479e:	e026      	b.n	80047ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1cd      	bne.n	8004746 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fcc4 	bl	800513c <SPI_EndRxTxTransaction>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e000      	b.n	80047ee <HAL_SPI_Transmit+0x24e>
  }

error:
 80047ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004824:	d112      	bne.n	800484c <HAL_SPI_Receive+0x44>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10e      	bne.n	800484c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2204      	movs	r2, #4
 8004832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8e9 	bl	8004a1a <HAL_SPI_TransmitReceive>
 8004848:	4603      	mov	r3, r0
 800484a:	e0e2      	b.n	8004a12 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_SPI_Receive+0x52>
 8004856:	2302      	movs	r3, #2
 8004858:	e0db      	b.n	8004a12 <HAL_SPI_Receive+0x20a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004862:	f7fe f9c5 	bl	8002bf0 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d002      	beq.n	800487a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004874:	2302      	movs	r3, #2
 8004876:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004878:	e0c2      	b.n	8004a00 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_SPI_Receive+0x7e>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
    goto error;
 800488a:	e0b9      	b.n	8004a00 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2204      	movs	r2, #4
 8004890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d2:	d107      	bne.n	80048e4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d007      	beq.n	8004902 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004900:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d162      	bne.n	80049d0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800490a:	e02e      	b.n	800496a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b01      	cmp	r3, #1
 8004918:	d115      	bne.n	8004946 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f103 020c 	add.w	r2, r3, #12
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	7812      	ldrb	r2, [r2, #0]
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004944:	e011      	b.n	800496a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004946:	f7fe f953 	bl	8002bf0 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d803      	bhi.n	800495e <HAL_SPI_Receive+0x156>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495c:	d102      	bne.n	8004964 <HAL_SPI_Receive+0x15c>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004968:	e04a      	b.n	8004a00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1cb      	bne.n	800490c <HAL_SPI_Receive+0x104>
 8004974:	e031      	b.n	80049da <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d113      	bne.n	80049ac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	b292      	uxth	r2, r2
 8004990:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	1c9a      	adds	r2, r3, #2
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049aa:	e011      	b.n	80049d0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ac:	f7fe f920 	bl	8002bf0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d803      	bhi.n	80049c4 <HAL_SPI_Receive+0x1bc>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c2:	d102      	bne.n	80049ca <HAL_SPI_Receive+0x1c2>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049ce:	e017      	b.n	8004a00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1cd      	bne.n	8004976 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fb46 	bl	8005070 <SPI_EndRxTransaction>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
 80049fc:	e000      	b.n	8004a00 <HAL_SPI_Receive+0x1f8>
  }

error :
 80049fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b08c      	sub	sp, #48	; 0x30
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x26>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e18a      	b.n	8004d56 <HAL_SPI_TransmitReceive+0x33c>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a48:	f7fe f8d2 	bl	8002bf0 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d00f      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x70>
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a70:	d107      	bne.n	8004a82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <HAL_SPI_TransmitReceive+0x68>
 8004a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d003      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a88:	e15b      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x82>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x82>
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aa2:	e14e      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d003      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2205      	movs	r2, #5
 8004ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	887a      	ldrh	r2, [r7, #2]
 8004ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	887a      	ldrh	r2, [r7, #2]
 8004ada:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d007      	beq.n	8004b0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d178      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x10a>
 8004b1e:	8b7b      	ldrh	r3, [r7, #26]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d166      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	881a      	ldrh	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	1c9a      	adds	r2, r3, #2
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b48:	e053      	b.n	8004bf2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_SPI_TransmitReceive+0x176>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0x176>
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d113      	bne.n	8004b90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d119      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x1b8>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d014      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	1c9a      	adds	r2, r3, #2
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bd2:	f7fe f80d 	bl	8002bf0 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d807      	bhi.n	8004bf2 <HAL_SPI_TransmitReceive+0x1d8>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be8:	d003      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bf0:	e0a7      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1a6      	bne.n	8004b4a <HAL_SPI_TransmitReceive+0x130>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1a1      	bne.n	8004b4a <HAL_SPI_TransmitReceive+0x130>
 8004c06:	e07c      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x1fc>
 8004c10:	8b7b      	ldrh	r3, [r7, #26]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d16b      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c3c:	e057      	b.n	8004cee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d11c      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x26c>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0x26c>
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d114      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d119      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x2ae>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d014      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cc8:	f7fd ff92 	bl	8002bf0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d803      	bhi.n	8004ce0 <HAL_SPI_TransmitReceive+0x2c6>
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cde:	d102      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x2cc>
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cec:	e029      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1a2      	bne.n	8004c3e <HAL_SPI_TransmitReceive+0x224>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d19d      	bne.n	8004c3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fa18 	bl	800513c <SPI_EndRxTxTransaction>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d006      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d1e:	e010      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10b      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	e000      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3730      	adds	r7, #48	; 0x30
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	099b      	lsrs	r3, r3, #6
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	099b      	lsrs	r3, r3, #6
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
    return;
 8004da2:	e0d8      	b.n	8004f56 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_SPI_IRQHandler+0x66>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	09db      	lsrs	r3, r3, #7
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
    return;
 8004dc4:	e0c7      	b.n	8004f56 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10c      	bne.n	8004dec <HAL_SPI_IRQHandler+0x8c>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	0a1b      	lsrs	r3, r3, #8
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80b5 	beq.w	8004f56 <HAL_SPI_IRQHandler+0x1f6>
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80ae 	beq.w	8004f56 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d023      	beq.n	8004e4e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d011      	beq.n	8004e36 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	e00b      	b.n	8004e4e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693b      	ldr	r3, [r7, #16]
        return;
 8004e4c:	e083      	b.n	8004f56 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d014      	beq.n	8004e84 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00c      	beq.n	8004eaa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0208 	orr.w	r2, r3, #8
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	60bb      	str	r3, [r7, #8]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d050      	beq.n	8004f54 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <HAL_SPI_IRQHandler+0x17e>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d034      	beq.n	8004f48 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0203 	bic.w	r2, r2, #3
 8004eec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d011      	beq.n	8004f1a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efa:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_SPI_IRQHandler+0x1fc>)
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe f92a 	bl	800315c <HAL_DMA_Abort_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d016      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f26:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <HAL_SPI_IRQHandler+0x1fc>)
 8004f28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe f914 	bl	800315c <HAL_DMA_Abort_IT>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f46:	e003      	b.n	8004f50 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f809 	bl	8004f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f4e:	e000      	b.n	8004f52 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004f50:	bf00      	nop
    return;
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
  }
}
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	08004f75 	.word	0x08004f75

08004f60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff ffe6 	bl	8004f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fac:	e04c      	b.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb4:	d048      	beq.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fb6:	f7fd fe1b 	bl	8002bf0 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d902      	bls.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x30>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d13d      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe4:	d111      	bne.n	800500a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fee:	d004      	beq.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d107      	bne.n	800500a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005008:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005012:	d10f      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e00f      	b.n	8005068 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d1a3      	bne.n	8004fae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005084:	d111      	bne.n	80050aa <SPI_EndRxTransaction+0x3a>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508e:	d004      	beq.n	800509a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d107      	bne.n	80050aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b2:	d12a      	bne.n	800510a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d012      	beq.n	80050e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2180      	movs	r1, #128	; 0x80
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff ff67 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02d      	beq.n	8005130 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e026      	b.n	8005132 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2101      	movs	r1, #1
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff54 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01a      	beq.n	8005130 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e013      	b.n	8005132 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2200      	movs	r2, #0
 8005112:	2101      	movs	r1, #1
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff ff41 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005124:	f043 0220 	orr.w	r2, r3, #32
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e000      	b.n	8005132 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <SPI_EndRxTxTransaction+0x7c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <SPI_EndRxTxTransaction+0x80>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	0d5b      	lsrs	r3, r3, #21
 8005154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005166:	d112      	bne.n	800518e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	2180      	movs	r1, #128	; 0x80
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff ff12 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00f      	b.n	80051ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3b01      	subs	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	d0f2      	beq.n	800518e <SPI_EndRxTxTransaction+0x52>
 80051a8:	e000      	b.n	80051ac <SPI_EndRxTxTransaction+0x70>
        break;
 80051aa:	bf00      	nop
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000000 	.word	0x20000000
 80051bc:	165e9f81 	.word	0x165e9f81

080051c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e01d      	b.n	800520e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fc40 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f000 f988 	bl	8005514 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b06      	cmp	r3, #6
 800523e:	d007      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005280:	4013      	ands	r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_TIM_Base_Stop_IT+0x48>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	f240 4344 	movw	r3, #1092	; 0x444
 8005290:	4013      	ands	r3, r2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <HAL_TIM_Base_Stop_IT+0x48>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d122      	bne.n	8005310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d11b      	bne.n	8005310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0202 	mvn.w	r2, #2
 80052e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8ee 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8e0 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f8f1 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b04      	cmp	r3, #4
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0204 	mvn.w	r2, #4
 8005334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8c4 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8b6 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8c7 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b08      	cmp	r3, #8
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b08      	cmp	r3, #8
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0208 	mvn.w	r2, #8
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2204      	movs	r2, #4
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f89a 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f88c 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f89d 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0210 	mvn.w	r2, #16
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2208      	movs	r2, #8
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f870 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f862 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f873 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d10e      	bne.n	8005438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d107      	bne.n	8005438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0201 	mvn.w	r2, #1
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc f93c 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d10e      	bne.n	8005464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d107      	bne.n	8005464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f97e 	bl	8005760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d10e      	bne.n	8005490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	d107      	bne.n	8005490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f838 	bl	8005500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b20      	cmp	r3, #32
 800549c:	d10e      	bne.n	80054bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d107      	bne.n	80054bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0220 	mvn.w	r2, #32
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f948 	bl	800574c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a40      	ldr	r2, [pc, #256]	; (8005628 <TIM_Base_SetConfig+0x114>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005532:	d00f      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3d      	ldr	r2, [pc, #244]	; (800562c <TIM_Base_SetConfig+0x118>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3c      	ldr	r2, [pc, #240]	; (8005630 <TIM_Base_SetConfig+0x11c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d007      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3b      	ldr	r2, [pc, #236]	; (8005634 <TIM_Base_SetConfig+0x120>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d108      	bne.n	8005566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <TIM_Base_SetConfig+0x114>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d02b      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d027      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2c      	ldr	r2, [pc, #176]	; (800562c <TIM_Base_SetConfig+0x118>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d023      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2b      	ldr	r2, [pc, #172]	; (8005630 <TIM_Base_SetConfig+0x11c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01f      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <TIM_Base_SetConfig+0x120>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01b      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a29      	ldr	r2, [pc, #164]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d017      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <TIM_Base_SetConfig+0x128>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a27      	ldr	r2, [pc, #156]	; (8005640 <TIM_Base_SetConfig+0x12c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a26      	ldr	r2, [pc, #152]	; (8005644 <TIM_Base_SetConfig+0x130>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a25      	ldr	r2, [pc, #148]	; (8005648 <TIM_Base_SetConfig+0x134>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a24      	ldr	r2, [pc, #144]	; (800564c <TIM_Base_SetConfig+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a23      	ldr	r2, [pc, #140]	; (8005650 <TIM_Base_SetConfig+0x13c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <TIM_Base_SetConfig+0x114>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0xf8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a0c      	ldr	r2, [pc, #48]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	615a      	str	r2, [r3, #20]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40010000 	.word	0x40010000
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40010400 	.word	0x40010400
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800
 8005648:	40001800 	.word	0x40001800
 800564c:	40001c00 	.word	0x40001c00
 8005650:	40002000 	.word	0x40002000

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e05a      	b.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b8:	d01d      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1a      	ldr	r2, [pc, #104]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a18      	ldr	r2, [pc, #96]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a17      	ldr	r2, [pc, #92]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a15      	ldr	r2, [pc, #84]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d10c      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40010400 	.word	0x40010400
 8005744:	40014000 	.word	0x40014000
 8005748:	40001800 	.word	0x40001800

0800574c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e03f      	b.n	8005806 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fc f9ca 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fc03 	bl	8005fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	d166      	bne.n	80058f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_UART_Receive_DMA+0x26>
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e05f      	b.n	80058fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UART_Receive_DMA+0x38>
 8005844:	2302      	movs	r3, #2
 8005846:	e058      	b.n	80058fa <HAL_UART_Receive_DMA+0xea>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	88fa      	ldrh	r2, [r7, #6]
 800585a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2222      	movs	r2, #34	; 0x22
 8005866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	4a25      	ldr	r2, [pc, #148]	; (8005904 <HAL_UART_Receive_DMA+0xf4>)
 8005870:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	4a24      	ldr	r2, [pc, #144]	; (8005908 <HAL_UART_Receive_DMA+0xf8>)
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	4a23      	ldr	r2, [pc, #140]	; (800590c <HAL_UART_Receive_DMA+0xfc>)
 8005880:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	2200      	movs	r2, #0
 8005888:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3304      	adds	r3, #4
 800589a:	4619      	mov	r1, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	f7fd fb93 	bl	8002fcc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	08005c3d 	.word	0x08005c3d
 8005908:	08005ca5 	.word	0x08005ca5
 800590c:	08005cc1 	.word	0x08005cc1

08005910 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005926:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d124      	bne.n	8005990 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005954:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	2b00      	cmp	r3, #0
 800595c:	d018      	beq.n	8005990 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	2200      	movs	r2, #0
 8005964:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fb86 	bl	800307c <HAL_DMA_Abort>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	4618      	mov	r0, r3
 800597c:	f7fd fd9a 	bl	80034b4 <HAL_DMA_GetError>
 8005980:	4603      	mov	r3, r0
 8005982:	2b20      	cmp	r3, #32
 8005984:	d104      	bne.n	8005990 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2210      	movs	r2, #16
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e03d      	b.n	8005a0c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d124      	bne.n	80059e8 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ac:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d018      	beq.n	80059e8 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	2200      	movs	r2, #0
 80059bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fd fb5a 	bl	800307c <HAL_DMA_Abort>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00c      	beq.n	80059e8 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fd fd6e 	bl	80034b4 <HAL_DMA_GetError>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d104      	bne.n	80059e8 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2210      	movs	r2, #16
 80059e2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e011      	b.n	8005a0c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10d      	bne.n	8005a66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_UART_IRQHandler+0x52>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa2e 	bl	8005ec0 <UART_Receive_IT>
      return;
 8005a64:	e0d1      	b.n	8005c0a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80b0 	beq.w	8005bce <HAL_UART_IRQHandler+0x1ba>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <HAL_UART_IRQHandler+0x70>
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80a5 	beq.w	8005bce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x90>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	f043 0201 	orr.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xb0>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abc:	f043 0202 	orr.w	r2, r3, #2
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xd0>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005adc:	f043 0204 	orr.w	r2, r3, #4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00f      	beq.n	8005b0e <HAL_UART_IRQHandler+0xfa>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_UART_IRQHandler+0xee>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	f043 0208 	orr.w	r2, r3, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d078      	beq.n	8005c08 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <HAL_UART_IRQHandler+0x11c>
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f9c8 	bl	8005ec0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d102      	bne.n	8005b58 <HAL_UART_IRQHandler+0x144>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d031      	beq.n	8005bbc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f911 	bl	8005d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d123      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d013      	beq.n	8005bac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <HAL_UART_IRQHandler+0x1fc>)
 8005b8a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fd fae3 	bl	800315c <HAL_DMA_Abort_IT>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005baa:	e00e      	b.n	8005bca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f83b 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb2:	e00a      	b.n	8005bca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f837 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bba:	e006      	b.n	8005bca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f833 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005bc8:	e01e      	b.n	8005c08 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bca:	bf00      	nop
    return;
 8005bcc:	e01c      	b.n	8005c08 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_UART_IRQHandler+0x1d6>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8fe 	bl	8005de4 <UART_Transmit_IT>
    return;
 8005be8:	e00f      	b.n	8005c0a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_UART_IRQHandler+0x1f6>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f946 	bl	8005e90 <UART_EndTransmit_IT>
    return;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005c08:	bf00      	nop
  }
}
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	08005dbd 	.word	0x08005dbd

08005c14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11e      	bne.n	8005c96 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c6c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7fb fcba 	bl	8001610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff ffae 	bl	8005c14 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cdc:	2b80      	cmp	r3, #128	; 0x80
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b21      	cmp	r3, #33	; 0x21
 8005cf2:	d108      	bne.n	8005d06 <UART_DMAError+0x46>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d00:	68b8      	ldr	r0, [r7, #8]
 8005d02:	f000 f827 	bl	8005d54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b22      	cmp	r3, #34	; 0x22
 8005d26:	d108      	bne.n	8005d3a <UART_DMAError+0x7a>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2200      	movs	r2, #0
 8005d32:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d34:	68b8      	ldr	r0, [r7, #8]
 8005d36:	f000 f823 	bl	8005d80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	f043 0210 	orr.w	r2, r3, #16
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d46:	68b8      	ldr	r0, [r7, #8]
 8005d48:	f7ff ff6e 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff ff26 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b21      	cmp	r3, #33	; 0x21
 8005df6:	d144      	bne.n	8005e82 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e00:	d11a      	bne.n	8005e38 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e16:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	1c9a      	adds	r2, r3, #2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]
 8005e2a:	e00e      	b.n	8005e4a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	621a      	str	r2, [r3, #32]
 8005e36:	e008      	b.n	8005e4a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	1c59      	adds	r1, r3, #1
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6211      	str	r1, [r2, #32]
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	4619      	mov	r1, r3
 8005e58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e000      	b.n	8005e84 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005e82:	2302      	movs	r3, #2
  }
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fb fbf3 	bl	800169c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b22      	cmp	r3, #34	; 0x22
 8005ed2:	d171      	bne.n	8005fb8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005edc:	d123      	bne.n	8005f26 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10e      	bne.n	8005f0a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	1c9a      	adds	r2, r3, #2
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
 8005f08:	e029      	b.n	8005f5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28
 8005f24:	e01b      	b.n	8005f5e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6858      	ldr	r0, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	1c59      	adds	r1, r3, #1
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6291      	str	r1, [r2, #40]	; 0x28
 8005f3e:	b2c2      	uxtb	r2, r0
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	e00c      	b.n	8005f5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	1c58      	adds	r0, r3, #1
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	6288      	str	r0, [r1, #40]	; 0x28
 8005f56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d120      	bne.n	8005fb4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0220 	bic.w	r2, r2, #32
 8005f80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695a      	ldr	r2, [r3, #20]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0201 	bic.w	r2, r2, #1
 8005fa0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb fb30 	bl	8001610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e002      	b.n	8005fba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006006:	f023 030c 	bic.w	r3, r3, #12
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	430b      	orrs	r3, r1
 8006012:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	f040 818b 	bne.w	800634c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4ac1      	ldr	r2, [pc, #772]	; (8006340 <UART_SetConfig+0x37c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d005      	beq.n	800604c <UART_SetConfig+0x88>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4abf      	ldr	r2, [pc, #764]	; (8006344 <UART_SetConfig+0x380>)
 8006046:	4293      	cmp	r3, r2
 8006048:	f040 80bd 	bne.w	80061c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800604c:	f7fd fe36 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 8006050:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	461d      	mov	r5, r3
 8006056:	f04f 0600 	mov.w	r6, #0
 800605a:	46a8      	mov	r8, r5
 800605c:	46b1      	mov	r9, r6
 800605e:	eb18 0308 	adds.w	r3, r8, r8
 8006062:	eb49 0409 	adc.w	r4, r9, r9
 8006066:	4698      	mov	r8, r3
 8006068:	46a1      	mov	r9, r4
 800606a:	eb18 0805 	adds.w	r8, r8, r5
 800606e:	eb49 0906 	adc.w	r9, r9, r6
 8006072:	f04f 0100 	mov.w	r1, #0
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800607e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006082:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006086:	4688      	mov	r8, r1
 8006088:	4691      	mov	r9, r2
 800608a:	eb18 0005 	adds.w	r0, r8, r5
 800608e:	eb49 0106 	adc.w	r1, r9, r6
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	461d      	mov	r5, r3
 8006098:	f04f 0600 	mov.w	r6, #0
 800609c:	196b      	adds	r3, r5, r5
 800609e:	eb46 0406 	adc.w	r4, r6, r6
 80060a2:	461a      	mov	r2, r3
 80060a4:	4623      	mov	r3, r4
 80060a6:	f7fa f8ad 	bl	8000204 <__aeabi_uldivmod>
 80060aa:	4603      	mov	r3, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	461a      	mov	r2, r3
 80060b0:	4ba5      	ldr	r3, [pc, #660]	; (8006348 <UART_SetConfig+0x384>)
 80060b2:	fba3 2302 	umull	r2, r3, r3, r2
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	461d      	mov	r5, r3
 80060c0:	f04f 0600 	mov.w	r6, #0
 80060c4:	46a9      	mov	r9, r5
 80060c6:	46b2      	mov	sl, r6
 80060c8:	eb19 0309 	adds.w	r3, r9, r9
 80060cc:	eb4a 040a 	adc.w	r4, sl, sl
 80060d0:	4699      	mov	r9, r3
 80060d2:	46a2      	mov	sl, r4
 80060d4:	eb19 0905 	adds.w	r9, r9, r5
 80060d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060f0:	4689      	mov	r9, r1
 80060f2:	4692      	mov	sl, r2
 80060f4:	eb19 0005 	adds.w	r0, r9, r5
 80060f8:	eb4a 0106 	adc.w	r1, sl, r6
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	461d      	mov	r5, r3
 8006102:	f04f 0600 	mov.w	r6, #0
 8006106:	196b      	adds	r3, r5, r5
 8006108:	eb46 0406 	adc.w	r4, r6, r6
 800610c:	461a      	mov	r2, r3
 800610e:	4623      	mov	r3, r4
 8006110:	f7fa f878 	bl	8000204 <__aeabi_uldivmod>
 8006114:	4603      	mov	r3, r0
 8006116:	460c      	mov	r4, r1
 8006118:	461a      	mov	r2, r3
 800611a:	4b8b      	ldr	r3, [pc, #556]	; (8006348 <UART_SetConfig+0x384>)
 800611c:	fba3 1302 	umull	r1, r3, r3, r2
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	2164      	movs	r1, #100	; 0x64
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	3332      	adds	r3, #50	; 0x32
 800612e:	4a86      	ldr	r2, [pc, #536]	; (8006348 <UART_SetConfig+0x384>)
 8006130:	fba2 2303 	umull	r2, r3, r2, r3
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800613c:	4498      	add	r8, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	461d      	mov	r5, r3
 8006142:	f04f 0600 	mov.w	r6, #0
 8006146:	46a9      	mov	r9, r5
 8006148:	46b2      	mov	sl, r6
 800614a:	eb19 0309 	adds.w	r3, r9, r9
 800614e:	eb4a 040a 	adc.w	r4, sl, sl
 8006152:	4699      	mov	r9, r3
 8006154:	46a2      	mov	sl, r4
 8006156:	eb19 0905 	adds.w	r9, r9, r5
 800615a:	eb4a 0a06 	adc.w	sl, sl, r6
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800616a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800616e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006172:	4689      	mov	r9, r1
 8006174:	4692      	mov	sl, r2
 8006176:	eb19 0005 	adds.w	r0, r9, r5
 800617a:	eb4a 0106 	adc.w	r1, sl, r6
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	461d      	mov	r5, r3
 8006184:	f04f 0600 	mov.w	r6, #0
 8006188:	196b      	adds	r3, r5, r5
 800618a:	eb46 0406 	adc.w	r4, r6, r6
 800618e:	461a      	mov	r2, r3
 8006190:	4623      	mov	r3, r4
 8006192:	f7fa f837 	bl	8000204 <__aeabi_uldivmod>
 8006196:	4603      	mov	r3, r0
 8006198:	460c      	mov	r4, r1
 800619a:	461a      	mov	r2, r3
 800619c:	4b6a      	ldr	r3, [pc, #424]	; (8006348 <UART_SetConfig+0x384>)
 800619e:	fba3 1302 	umull	r1, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2164      	movs	r1, #100	; 0x64
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	3332      	adds	r3, #50	; 0x32
 80061b0:	4a65      	ldr	r2, [pc, #404]	; (8006348 <UART_SetConfig+0x384>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f003 0207 	and.w	r2, r3, #7
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4442      	add	r2, r8
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	e26f      	b.n	80066a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c6:	f7fd fd65 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 80061ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	461d      	mov	r5, r3
 80061d0:	f04f 0600 	mov.w	r6, #0
 80061d4:	46a8      	mov	r8, r5
 80061d6:	46b1      	mov	r9, r6
 80061d8:	eb18 0308 	adds.w	r3, r8, r8
 80061dc:	eb49 0409 	adc.w	r4, r9, r9
 80061e0:	4698      	mov	r8, r3
 80061e2:	46a1      	mov	r9, r4
 80061e4:	eb18 0805 	adds.w	r8, r8, r5
 80061e8:	eb49 0906 	adc.w	r9, r9, r6
 80061ec:	f04f 0100 	mov.w	r1, #0
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006200:	4688      	mov	r8, r1
 8006202:	4691      	mov	r9, r2
 8006204:	eb18 0005 	adds.w	r0, r8, r5
 8006208:	eb49 0106 	adc.w	r1, r9, r6
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	461d      	mov	r5, r3
 8006212:	f04f 0600 	mov.w	r6, #0
 8006216:	196b      	adds	r3, r5, r5
 8006218:	eb46 0406 	adc.w	r4, r6, r6
 800621c:	461a      	mov	r2, r3
 800621e:	4623      	mov	r3, r4
 8006220:	f7f9 fff0 	bl	8000204 <__aeabi_uldivmod>
 8006224:	4603      	mov	r3, r0
 8006226:	460c      	mov	r4, r1
 8006228:	461a      	mov	r2, r3
 800622a:	4b47      	ldr	r3, [pc, #284]	; (8006348 <UART_SetConfig+0x384>)
 800622c:	fba3 2302 	umull	r2, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	461d      	mov	r5, r3
 800623a:	f04f 0600 	mov.w	r6, #0
 800623e:	46a9      	mov	r9, r5
 8006240:	46b2      	mov	sl, r6
 8006242:	eb19 0309 	adds.w	r3, r9, r9
 8006246:	eb4a 040a 	adc.w	r4, sl, sl
 800624a:	4699      	mov	r9, r3
 800624c:	46a2      	mov	sl, r4
 800624e:	eb19 0905 	adds.w	r9, r9, r5
 8006252:	eb4a 0a06 	adc.w	sl, sl, r6
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800626a:	4689      	mov	r9, r1
 800626c:	4692      	mov	sl, r2
 800626e:	eb19 0005 	adds.w	r0, r9, r5
 8006272:	eb4a 0106 	adc.w	r1, sl, r6
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	461d      	mov	r5, r3
 800627c:	f04f 0600 	mov.w	r6, #0
 8006280:	196b      	adds	r3, r5, r5
 8006282:	eb46 0406 	adc.w	r4, r6, r6
 8006286:	461a      	mov	r2, r3
 8006288:	4623      	mov	r3, r4
 800628a:	f7f9 ffbb 	bl	8000204 <__aeabi_uldivmod>
 800628e:	4603      	mov	r3, r0
 8006290:	460c      	mov	r4, r1
 8006292:	461a      	mov	r2, r3
 8006294:	4b2c      	ldr	r3, [pc, #176]	; (8006348 <UART_SetConfig+0x384>)
 8006296:	fba3 1302 	umull	r1, r3, r3, r2
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2164      	movs	r1, #100	; 0x64
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	3332      	adds	r3, #50	; 0x32
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <UART_SetConfig+0x384>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062b6:	4498      	add	r8, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	461d      	mov	r5, r3
 80062bc:	f04f 0600 	mov.w	r6, #0
 80062c0:	46a9      	mov	r9, r5
 80062c2:	46b2      	mov	sl, r6
 80062c4:	eb19 0309 	adds.w	r3, r9, r9
 80062c8:	eb4a 040a 	adc.w	r4, sl, sl
 80062cc:	4699      	mov	r9, r3
 80062ce:	46a2      	mov	sl, r4
 80062d0:	eb19 0905 	adds.w	r9, r9, r5
 80062d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80062d8:	f04f 0100 	mov.w	r1, #0
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ec:	4689      	mov	r9, r1
 80062ee:	4692      	mov	sl, r2
 80062f0:	eb19 0005 	adds.w	r0, r9, r5
 80062f4:	eb4a 0106 	adc.w	r1, sl, r6
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	461d      	mov	r5, r3
 80062fe:	f04f 0600 	mov.w	r6, #0
 8006302:	196b      	adds	r3, r5, r5
 8006304:	eb46 0406 	adc.w	r4, r6, r6
 8006308:	461a      	mov	r2, r3
 800630a:	4623      	mov	r3, r4
 800630c:	f7f9 ff7a 	bl	8000204 <__aeabi_uldivmod>
 8006310:	4603      	mov	r3, r0
 8006312:	460c      	mov	r4, r1
 8006314:	461a      	mov	r2, r3
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <UART_SetConfig+0x384>)
 8006318:	fba3 1302 	umull	r1, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	2164      	movs	r1, #100	; 0x64
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	3332      	adds	r3, #50	; 0x32
 800632a:	4a07      	ldr	r2, [pc, #28]	; (8006348 <UART_SetConfig+0x384>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 0207 	and.w	r2, r3, #7
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4442      	add	r2, r8
 800633c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800633e:	e1b2      	b.n	80066a6 <UART_SetConfig+0x6e2>
 8006340:	40011000 	.word	0x40011000
 8006344:	40011400 	.word	0x40011400
 8006348:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4ad7      	ldr	r2, [pc, #860]	; (80066b0 <UART_SetConfig+0x6ec>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d005      	beq.n	8006362 <UART_SetConfig+0x39e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4ad6      	ldr	r2, [pc, #856]	; (80066b4 <UART_SetConfig+0x6f0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	f040 80d1 	bne.w	8006504 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006362:	f7fd fcab 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 8006366:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	469a      	mov	sl, r3
 800636c:	f04f 0b00 	mov.w	fp, #0
 8006370:	46d0      	mov	r8, sl
 8006372:	46d9      	mov	r9, fp
 8006374:	eb18 0308 	adds.w	r3, r8, r8
 8006378:	eb49 0409 	adc.w	r4, r9, r9
 800637c:	4698      	mov	r8, r3
 800637e:	46a1      	mov	r9, r4
 8006380:	eb18 080a 	adds.w	r8, r8, sl
 8006384:	eb49 090b 	adc.w	r9, r9, fp
 8006388:	f04f 0100 	mov.w	r1, #0
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006394:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006398:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800639c:	4688      	mov	r8, r1
 800639e:	4691      	mov	r9, r2
 80063a0:	eb1a 0508 	adds.w	r5, sl, r8
 80063a4:	eb4b 0609 	adc.w	r6, fp, r9
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4619      	mov	r1, r3
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	f04f 0400 	mov.w	r4, #0
 80063ba:	0094      	lsls	r4, r2, #2
 80063bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063c0:	008b      	lsls	r3, r1, #2
 80063c2:	461a      	mov	r2, r3
 80063c4:	4623      	mov	r3, r4
 80063c6:	4628      	mov	r0, r5
 80063c8:	4631      	mov	r1, r6
 80063ca:	f7f9 ff1b 	bl	8000204 <__aeabi_uldivmod>
 80063ce:	4603      	mov	r3, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	461a      	mov	r2, r3
 80063d4:	4bb8      	ldr	r3, [pc, #736]	; (80066b8 <UART_SetConfig+0x6f4>)
 80063d6:	fba3 2302 	umull	r2, r3, r3, r2
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	469b      	mov	fp, r3
 80063e4:	f04f 0c00 	mov.w	ip, #0
 80063e8:	46d9      	mov	r9, fp
 80063ea:	46e2      	mov	sl, ip
 80063ec:	eb19 0309 	adds.w	r3, r9, r9
 80063f0:	eb4a 040a 	adc.w	r4, sl, sl
 80063f4:	4699      	mov	r9, r3
 80063f6:	46a2      	mov	sl, r4
 80063f8:	eb19 090b 	adds.w	r9, r9, fp
 80063fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006400:	f04f 0100 	mov.w	r1, #0
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800640c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006414:	4689      	mov	r9, r1
 8006416:	4692      	mov	sl, r2
 8006418:	eb1b 0509 	adds.w	r5, fp, r9
 800641c:	eb4c 060a 	adc.w	r6, ip, sl
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4619      	mov	r1, r3
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	f04f 0400 	mov.w	r4, #0
 8006432:	0094      	lsls	r4, r2, #2
 8006434:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006438:	008b      	lsls	r3, r1, #2
 800643a:	461a      	mov	r2, r3
 800643c:	4623      	mov	r3, r4
 800643e:	4628      	mov	r0, r5
 8006440:	4631      	mov	r1, r6
 8006442:	f7f9 fedf 	bl	8000204 <__aeabi_uldivmod>
 8006446:	4603      	mov	r3, r0
 8006448:	460c      	mov	r4, r1
 800644a:	461a      	mov	r2, r3
 800644c:	4b9a      	ldr	r3, [pc, #616]	; (80066b8 <UART_SetConfig+0x6f4>)
 800644e:	fba3 1302 	umull	r1, r3, r3, r2
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	2164      	movs	r1, #100	; 0x64
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	3332      	adds	r3, #50	; 0x32
 8006460:	4a95      	ldr	r2, [pc, #596]	; (80066b8 <UART_SetConfig+0x6f4>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800646c:	4498      	add	r8, r3
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	469b      	mov	fp, r3
 8006472:	f04f 0c00 	mov.w	ip, #0
 8006476:	46d9      	mov	r9, fp
 8006478:	46e2      	mov	sl, ip
 800647a:	eb19 0309 	adds.w	r3, r9, r9
 800647e:	eb4a 040a 	adc.w	r4, sl, sl
 8006482:	4699      	mov	r9, r3
 8006484:	46a2      	mov	sl, r4
 8006486:	eb19 090b 	adds.w	r9, r9, fp
 800648a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800648e:	f04f 0100 	mov.w	r1, #0
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800649a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800649e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064a2:	4689      	mov	r9, r1
 80064a4:	4692      	mov	sl, r2
 80064a6:	eb1b 0509 	adds.w	r5, fp, r9
 80064aa:	eb4c 060a 	adc.w	r6, ip, sl
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4619      	mov	r1, r3
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	f04f 0400 	mov.w	r4, #0
 80064c0:	0094      	lsls	r4, r2, #2
 80064c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064c6:	008b      	lsls	r3, r1, #2
 80064c8:	461a      	mov	r2, r3
 80064ca:	4623      	mov	r3, r4
 80064cc:	4628      	mov	r0, r5
 80064ce:	4631      	mov	r1, r6
 80064d0:	f7f9 fe98 	bl	8000204 <__aeabi_uldivmod>
 80064d4:	4603      	mov	r3, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	461a      	mov	r2, r3
 80064da:	4b77      	ldr	r3, [pc, #476]	; (80066b8 <UART_SetConfig+0x6f4>)
 80064dc:	fba3 1302 	umull	r1, r3, r3, r2
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	2164      	movs	r1, #100	; 0x64
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	3332      	adds	r3, #50	; 0x32
 80064ee:	4a72      	ldr	r2, [pc, #456]	; (80066b8 <UART_SetConfig+0x6f4>)
 80064f0:	fba2 2303 	umull	r2, r3, r2, r3
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	f003 020f 	and.w	r2, r3, #15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4442      	add	r2, r8
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	e0d0      	b.n	80066a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006504:	f7fd fbc6 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 8006508:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	469a      	mov	sl, r3
 800650e:	f04f 0b00 	mov.w	fp, #0
 8006512:	46d0      	mov	r8, sl
 8006514:	46d9      	mov	r9, fp
 8006516:	eb18 0308 	adds.w	r3, r8, r8
 800651a:	eb49 0409 	adc.w	r4, r9, r9
 800651e:	4698      	mov	r8, r3
 8006520:	46a1      	mov	r9, r4
 8006522:	eb18 080a 	adds.w	r8, r8, sl
 8006526:	eb49 090b 	adc.w	r9, r9, fp
 800652a:	f04f 0100 	mov.w	r1, #0
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006536:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800653a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800653e:	4688      	mov	r8, r1
 8006540:	4691      	mov	r9, r2
 8006542:	eb1a 0508 	adds.w	r5, sl, r8
 8006546:	eb4b 0609 	adc.w	r6, fp, r9
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4619      	mov	r1, r3
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	f04f 0400 	mov.w	r4, #0
 800655c:	0094      	lsls	r4, r2, #2
 800655e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006562:	008b      	lsls	r3, r1, #2
 8006564:	461a      	mov	r2, r3
 8006566:	4623      	mov	r3, r4
 8006568:	4628      	mov	r0, r5
 800656a:	4631      	mov	r1, r6
 800656c:	f7f9 fe4a 	bl	8000204 <__aeabi_uldivmod>
 8006570:	4603      	mov	r3, r0
 8006572:	460c      	mov	r4, r1
 8006574:	461a      	mov	r2, r3
 8006576:	4b50      	ldr	r3, [pc, #320]	; (80066b8 <UART_SetConfig+0x6f4>)
 8006578:	fba3 2302 	umull	r2, r3, r3, r2
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	469b      	mov	fp, r3
 8006586:	f04f 0c00 	mov.w	ip, #0
 800658a:	46d9      	mov	r9, fp
 800658c:	46e2      	mov	sl, ip
 800658e:	eb19 0309 	adds.w	r3, r9, r9
 8006592:	eb4a 040a 	adc.w	r4, sl, sl
 8006596:	4699      	mov	r9, r3
 8006598:	46a2      	mov	sl, r4
 800659a:	eb19 090b 	adds.w	r9, r9, fp
 800659e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065a2:	f04f 0100 	mov.w	r1, #0
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065b6:	4689      	mov	r9, r1
 80065b8:	4692      	mov	sl, r2
 80065ba:	eb1b 0509 	adds.w	r5, fp, r9
 80065be:	eb4c 060a 	adc.w	r6, ip, sl
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	4619      	mov	r1, r3
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	f04f 0400 	mov.w	r4, #0
 80065d4:	0094      	lsls	r4, r2, #2
 80065d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065da:	008b      	lsls	r3, r1, #2
 80065dc:	461a      	mov	r2, r3
 80065de:	4623      	mov	r3, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	4631      	mov	r1, r6
 80065e4:	f7f9 fe0e 	bl	8000204 <__aeabi_uldivmod>
 80065e8:	4603      	mov	r3, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	461a      	mov	r2, r3
 80065ee:	4b32      	ldr	r3, [pc, #200]	; (80066b8 <UART_SetConfig+0x6f4>)
 80065f0:	fba3 1302 	umull	r1, r3, r3, r2
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	2164      	movs	r1, #100	; 0x64
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	3332      	adds	r3, #50	; 0x32
 8006602:	4a2d      	ldr	r2, [pc, #180]	; (80066b8 <UART_SetConfig+0x6f4>)
 8006604:	fba2 2303 	umull	r2, r3, r2, r3
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800660e:	4498      	add	r8, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	469b      	mov	fp, r3
 8006614:	f04f 0c00 	mov.w	ip, #0
 8006618:	46d9      	mov	r9, fp
 800661a:	46e2      	mov	sl, ip
 800661c:	eb19 0309 	adds.w	r3, r9, r9
 8006620:	eb4a 040a 	adc.w	r4, sl, sl
 8006624:	4699      	mov	r9, r3
 8006626:	46a2      	mov	sl, r4
 8006628:	eb19 090b 	adds.w	r9, r9, fp
 800662c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800663c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006644:	4689      	mov	r9, r1
 8006646:	4692      	mov	sl, r2
 8006648:	eb1b 0509 	adds.w	r5, fp, r9
 800664c:	eb4c 060a 	adc.w	r6, ip, sl
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4619      	mov	r1, r3
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	f04f 0400 	mov.w	r4, #0
 8006662:	0094      	lsls	r4, r2, #2
 8006664:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006668:	008b      	lsls	r3, r1, #2
 800666a:	461a      	mov	r2, r3
 800666c:	4623      	mov	r3, r4
 800666e:	4628      	mov	r0, r5
 8006670:	4631      	mov	r1, r6
 8006672:	f7f9 fdc7 	bl	8000204 <__aeabi_uldivmod>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	461a      	mov	r2, r3
 800667c:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <UART_SetConfig+0x6f4>)
 800667e:	fba3 1302 	umull	r1, r3, r3, r2
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	2164      	movs	r1, #100	; 0x64
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	3332      	adds	r3, #50	; 0x32
 8006690:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <UART_SetConfig+0x6f4>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4442      	add	r2, r8
 80066a2:	609a      	str	r2, [r3, #8]
}
 80066a4:	e7ff      	b.n	80066a6 <UART_SetConfig+0x6e2>
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b0:	40011000 	.word	0x40011000
 80066b4:	40011400 	.word	0x40011400
 80066b8:	51eb851f 	.word	0x51eb851f

080066bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80066c0:	4904      	ldr	r1, [pc, #16]	; (80066d4 <MX_FATFS_Init+0x18>)
 80066c2:	4805      	ldr	r0, [pc, #20]	; (80066d8 <MX_FATFS_Init+0x1c>)
 80066c4:	f002 fa0e 	bl	8008ae4 <FATFS_LinkDriver>
 80066c8:	4603      	mov	r3, r0
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b03      	ldr	r3, [pc, #12]	; (80066dc <MX_FATFS_Init+0x20>)
 80066ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80066d0:	bf00      	nop
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	200009e4 	.word	0x200009e4
 80066d8:	20000010 	.word	0x20000010
 80066dc:	200009e8 	.word	0x200009e8

080066e0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80066e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fb fe9f 	bl	8002440 <USER_SPI_initialize>
 8006702:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	4618      	mov	r0, r3
 800671a:	f7fb ff71 	bl	8002600 <USER_SPI_status>
 800671e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006738:	7bf8      	ldrb	r0, [r7, #15]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	f7fb ff74 	bl	800262c <USER_SPI_read>
 8006744:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 800675e:	7bf8      	ldrb	r0, [r7, #15]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	f7fb ffc7 	bl	80026f8 <USER_SPI_write>
 800676a:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	603a      	str	r2, [r7, #0]
 800677e:	71fb      	strb	r3, [r7, #7]
 8006780:	460b      	mov	r3, r1
 8006782:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006784:	79b9      	ldrb	r1, [r7, #6]
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7fc f830 	bl	80027f0 <USER_SPI_ioctl>
 8006790:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80067a6:	79fb      	ldrb	r3, [r7, #7]
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <disk_status+0x30>)
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	79fa      	ldrb	r2, [r7, #7]
 80067b4:	4905      	ldr	r1, [pc, #20]	; (80067cc <disk_status+0x30>)
 80067b6:	440a      	add	r2, r1
 80067b8:	7a12      	ldrb	r2, [r2, #8]
 80067ba:	4610      	mov	r0, r2
 80067bc:	4798      	blx	r3
 80067be:	4603      	mov	r3, r0
 80067c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000074 	.word	0x20000074

080067d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	4a0d      	ldr	r2, [pc, #52]	; (8006818 <disk_initialize+0x48>)
 80067e2:	5cd3      	ldrb	r3, [r2, r3]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d111      	bne.n	800680c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	4a0b      	ldr	r2, [pc, #44]	; (8006818 <disk_initialize+0x48>)
 80067ec:	2101      	movs	r1, #1
 80067ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <disk_initialize+0x48>)
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	79fa      	ldrb	r2, [r7, #7]
 80067fe:	4906      	ldr	r1, [pc, #24]	; (8006818 <disk_initialize+0x48>)
 8006800:	440a      	add	r2, r1
 8006802:	7a12      	ldrb	r2, [r2, #8]
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000074 	.word	0x20000074

0800681c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <disk_read+0x3c>)
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	689c      	ldr	r4, [r3, #8]
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4a07      	ldr	r2, [pc, #28]	; (8006858 <disk_read+0x3c>)
 800683c:	4413      	add	r3, r2
 800683e:	7a18      	ldrb	r0, [r3, #8]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	47a0      	blx	r4
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]
  return res;
 800684c:	7dfb      	ldrb	r3, [r7, #23]
}
 800684e:	4618      	mov	r0, r3
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	bf00      	nop
 8006858:	20000074 	.word	0x20000074

0800685c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	4a0a      	ldr	r2, [pc, #40]	; (8006898 <disk_write+0x3c>)
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	68dc      	ldr	r4, [r3, #12]
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	4a07      	ldr	r2, [pc, #28]	; (8006898 <disk_write+0x3c>)
 800687c:	4413      	add	r3, r2
 800687e:	7a18      	ldrb	r0, [r3, #8]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	47a0      	blx	r4
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]
  return res;
 800688c:	7dfb      	ldrb	r3, [r7, #23]
}
 800688e:	4618      	mov	r0, r3
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd90      	pop	{r4, r7, pc}
 8006896:	bf00      	nop
 8006898:	20000074 	.word	0x20000074

0800689c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	603a      	str	r2, [r7, #0]
 80068a6:	71fb      	strb	r3, [r7, #7]
 80068a8:	460b      	mov	r3, r1
 80068aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <disk_ioctl+0x38>)
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	79fa      	ldrb	r2, [r7, #7]
 80068ba:	4906      	ldr	r1, [pc, #24]	; (80068d4 <disk_ioctl+0x38>)
 80068bc:	440a      	add	r2, r1
 80068be:	7a10      	ldrb	r0, [r2, #8]
 80068c0:	79b9      	ldrb	r1, [r7, #6]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	4798      	blx	r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000074 	.word	0x20000074

080068d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3301      	adds	r3, #1
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	b21a      	sxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b21b      	sxth	r3, r3
 80068f4:	4313      	orrs	r3, r2
 80068f6:	b21b      	sxth	r3, r3
 80068f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80068fa:	89fb      	ldrh	r3, [r7, #14]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3303      	adds	r3, #3
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	3202      	adds	r2, #2
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	3201      	adds	r2, #1
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7812      	ldrb	r2, [r2, #0]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006940:	68fb      	ldr	r3, [r7, #12]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	887a      	ldrh	r2, [r7, #2]
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	887b      	ldrh	r3, [r7, #2]
 8006968:	0a1b      	lsrs	r3, r3, #8
 800696a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	887a      	ldrh	r2, [r7, #2]
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	0a1b      	lsrs	r3, r3, #8
 800699e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	0a1b      	lsrs	r3, r3, #8
 80069c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	1c53      	adds	r3, r2, #1
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	6179      	str	r1, [r7, #20]
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f1      	bne.n	80069f6 <mem_cpy+0x1a>
	}
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006a1e:	b480      	push	{r7}
 8006a20:	b087      	sub	sp, #28
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	617a      	str	r2, [r7, #20]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	607b      	str	r3, [r7, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f3      	bne.n	8006a2e <mem_set+0x10>
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006a52:	b480      	push	{r7}
 8006a54:	b089      	sub	sp, #36	; 0x24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	61fa      	str	r2, [r7, #28]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	4619      	mov	r1, r3
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	61ba      	str	r2, [r7, #24]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	1acb      	subs	r3, r1, r3
 8006a7e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <mem_cmp+0x40>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0eb      	beq.n	8006a6a <mem_cmp+0x18>

	return r;
 8006a92:	697b      	ldr	r3, [r7, #20]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3724      	adds	r7, #36	; 0x24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006aaa:	e002      	b.n	8006ab2 <chk_chr+0x12>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <chk_chr+0x26>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d1f2      	bne.n	8006aac <chk_chr+0xc>
	return *str;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	e029      	b.n	8006b40 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006aec:	4a27      	ldr	r2, [pc, #156]	; (8006b8c <chk_lock+0xb4>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	4413      	add	r3, r2
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01d      	beq.n	8006b36 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006afa:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <chk_lock+0xb4>)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4413      	add	r3, r2
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d116      	bne.n	8006b3a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006b0c:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <chk_lock+0xb4>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	4413      	add	r3, r2
 8006b14:	3304      	adds	r3, #4
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d10c      	bne.n	8006b3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b20:	4a1a      	ldr	r2, [pc, #104]	; (8006b8c <chk_lock+0xb4>)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	4413      	add	r3, r2
 8006b28:	3308      	adds	r3, #8
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d102      	bne.n	8006b3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b34:	e007      	b.n	8006b46 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006b36:	2301      	movs	r3, #1
 8006b38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d9d2      	bls.n	8006aec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d109      	bne.n	8006b60 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <chk_lock+0x80>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d101      	bne.n	8006b5c <chk_lock+0x84>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e010      	b.n	8006b7e <chk_lock+0xa6>
 8006b5c:	2312      	movs	r3, #18
 8006b5e:	e00e      	b.n	8006b7e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d108      	bne.n	8006b78 <chk_lock+0xa0>
 8006b66:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <chk_lock+0xb4>)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	4413      	add	r3, r2
 8006b6e:	330c      	adds	r3, #12
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b76:	d101      	bne.n	8006b7c <chk_lock+0xa4>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	e000      	b.n	8006b7e <chk_lock+0xa6>
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20000054 	.word	0x20000054

08006b90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b96:	2300      	movs	r3, #0
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	e002      	b.n	8006ba2 <enq_lock+0x12>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d806      	bhi.n	8006bb6 <enq_lock+0x26>
 8006ba8:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <enq_lock+0x40>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	4413      	add	r3, r2
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f2      	bne.n	8006b9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000054 	.word	0x20000054

08006bd4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e01f      	b.n	8006c24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006be4:	4a41      	ldr	r2, [pc, #260]	; (8006cec <inc_lock+0x118>)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	4413      	add	r3, r2
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d113      	bne.n	8006c1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006bf6:	4a3d      	ldr	r2, [pc, #244]	; (8006cec <inc_lock+0x118>)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3304      	adds	r3, #4
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d109      	bne.n	8006c1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006c0a:	4a38      	ldr	r2, [pc, #224]	; (8006cec <inc_lock+0x118>)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	4413      	add	r3, r2
 8006c12:	3308      	adds	r3, #8
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d006      	beq.n	8006c2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d9dc      	bls.n	8006be4 <inc_lock+0x10>
 8006c2a:	e000      	b.n	8006c2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006c2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d132      	bne.n	8006c9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	e002      	b.n	8006c40 <inc_lock+0x6c>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d806      	bhi.n	8006c54 <inc_lock+0x80>
 8006c46:	4a29      	ldr	r2, [pc, #164]	; (8006cec <inc_lock+0x118>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	4413      	add	r3, r2
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f2      	bne.n	8006c3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d101      	bne.n	8006c5e <inc_lock+0x8a>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e040      	b.n	8006ce0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4922      	ldr	r1, [pc, #136]	; (8006cec <inc_lock+0x118>)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	440b      	add	r3, r1
 8006c6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	491e      	ldr	r1, [pc, #120]	; (8006cec <inc_lock+0x118>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	440b      	add	r3, r1
 8006c78:	3304      	adds	r3, #4
 8006c7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695a      	ldr	r2, [r3, #20]
 8006c80:	491a      	ldr	r1, [pc, #104]	; (8006cec <inc_lock+0x118>)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	440b      	add	r3, r1
 8006c88:	3308      	adds	r3, #8
 8006c8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006c8c:	4a17      	ldr	r2, [pc, #92]	; (8006cec <inc_lock+0x118>)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	4413      	add	r3, r2
 8006c94:	330c      	adds	r3, #12
 8006c96:	2200      	movs	r2, #0
 8006c98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <inc_lock+0xe0>
 8006ca0:	4a12      	ldr	r2, [pc, #72]	; (8006cec <inc_lock+0x118>)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	4413      	add	r3, r2
 8006ca8:	330c      	adds	r3, #12
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <inc_lock+0xe0>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e015      	b.n	8006ce0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d108      	bne.n	8006ccc <inc_lock+0xf8>
 8006cba:	4a0c      	ldr	r2, [pc, #48]	; (8006cec <inc_lock+0x118>)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	4413      	add	r3, r2
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	e001      	b.n	8006cd0 <inc_lock+0xfc>
 8006ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cd0:	4906      	ldr	r1, [pc, #24]	; (8006cec <inc_lock+0x118>)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	440b      	add	r3, r1
 8006cd8:	330c      	adds	r3, #12
 8006cda:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20000054 	.word	0x20000054

08006cf0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d825      	bhi.n	8006d50 <dec_lock+0x60>
		n = Files[i].ctr;
 8006d04:	4a17      	ldr	r2, [pc, #92]	; (8006d64 <dec_lock+0x74>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	4413      	add	r3, r2
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006d12:	89fb      	ldrh	r3, [r7, #14]
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d18:	d101      	bne.n	8006d1e <dec_lock+0x2e>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006d1e:	89fb      	ldrh	r3, [r7, #14]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <dec_lock+0x3a>
 8006d24:	89fb      	ldrh	r3, [r7, #14]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006d2a:	4a0e      	ldr	r2, [pc, #56]	; (8006d64 <dec_lock+0x74>)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	4413      	add	r3, r2
 8006d32:	330c      	adds	r3, #12
 8006d34:	89fa      	ldrh	r2, [r7, #14]
 8006d36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d105      	bne.n	8006d4a <dec_lock+0x5a>
 8006d3e:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <dec_lock+0x74>)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	4413      	add	r3, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	737b      	strb	r3, [r7, #13]
 8006d4e:	e001      	b.n	8006d54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006d50:	2302      	movs	r3, #2
 8006d52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006d54:	7b7b      	ldrb	r3, [r7, #13]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000054 	.word	0x20000054

08006d68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e010      	b.n	8006d98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d76:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <clear_lock+0x44>)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	4413      	add	r3, r2
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d105      	bne.n	8006d92 <clear_lock+0x2a>
 8006d86:	4a09      	ldr	r2, [pc, #36]	; (8006dac <clear_lock+0x44>)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d9eb      	bls.n	8006d76 <clear_lock+0xe>
	}
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20000054 	.word	0x20000054

08006db0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	78db      	ldrb	r3, [r3, #3]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d034      	beq.n	8006e2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	7858      	ldrb	r0, [r3, #1]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	f7ff fd40 	bl	800685c <disk_write>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	73fb      	strb	r3, [r7, #15]
 8006de6:	e022      	b.n	8006e2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d217      	bcs.n	8006e2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	789b      	ldrb	r3, [r3, #2]
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	e010      	b.n	8006e28 <sync_window+0x78>
					wsect += fs->fsize;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7858      	ldrb	r0, [r3, #1]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	f7ff fd1d 	bl	800685c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d8eb      	bhi.n	8006e06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d01b      	beq.n	8006e88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff ffad 	bl	8006db0 <sync_window>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d113      	bne.n	8006e88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7858      	ldrb	r0, [r3, #1]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	f7ff fcd5 	bl	800681c <disk_read>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ff87 	bl	8006db0 <sync_window>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d158      	bne.n	8006f5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d148      	bne.n	8006f46 <sync_fs+0xb2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	791b      	ldrb	r3, [r3, #4]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d144      	bne.n	8006f46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3330      	adds	r3, #48	; 0x30
 8006ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff fda9 	bl	8006a1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3330      	adds	r3, #48	; 0x30
 8006ed0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ed4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fd38 	bl	800694e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3330      	adds	r3, #48	; 0x30
 8006ee2:	4921      	ldr	r1, [pc, #132]	; (8006f68 <sync_fs+0xd4>)
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fd4d 	bl	8006984 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3330      	adds	r3, #48	; 0x30
 8006eee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ef2:	491e      	ldr	r1, [pc, #120]	; (8006f6c <sync_fs+0xd8>)
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fd45 	bl	8006984 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3330      	adds	r3, #48	; 0x30
 8006efe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	4619      	mov	r1, r3
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f7ff fd3b 	bl	8006984 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3330      	adds	r3, #48	; 0x30
 8006f12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f7ff fd31 	bl	8006984 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7858      	ldrb	r0, [r3, #1]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	f7ff fc8e 	bl	800685c <disk_write>
			fs->fsi_flag = 0;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff fca4 	bl	800689c <disk_ioctl>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <sync_fs+0xca>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	41615252 	.word	0x41615252
 8006f6c:	61417272 	.word	0x61417272

08006f70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	3b02      	subs	r3, #2
 8006f7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	3b02      	subs	r3, #2
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d301      	bcc.n	8006f90 <clust2sect+0x20>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e008      	b.n	8006fa2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	895b      	ldrh	r3, [r3, #10]
 8006f94:	461a      	mov	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	fb03 f202 	mul.w	r2, r3, r2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	4413      	add	r3, r2
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d904      	bls.n	8006fce <get_fat+0x20>
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006fce:	2301      	movs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e08c      	b.n	80070ee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d045      	beq.n	800706e <get_fat+0xc0>
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d05d      	beq.n	80070a2 <get_fat+0xf4>
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d177      	bne.n	80070da <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	6a1a      	ldr	r2, [r3, #32]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	0a5b      	lsrs	r3, r3, #9
 8007000:	4413      	add	r3, r2
 8007002:	4619      	mov	r1, r3
 8007004:	6938      	ldr	r0, [r7, #16]
 8007006:	f7ff ff17 	bl	8006e38 <move_window>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d167      	bne.n	80070e0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	60fa      	str	r2, [r7, #12]
 8007016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007022:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	0a5b      	lsrs	r3, r3, #9
 800702c:	4413      	add	r3, r2
 800702e:	4619      	mov	r1, r3
 8007030:	6938      	ldr	r0, [r7, #16]
 8007032:	f7ff ff01 	bl	8006e38 <move_window>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d153      	bne.n	80070e4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4313      	orrs	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <get_fat+0xb6>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	e002      	b.n	800706a <get_fat+0xbc>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800706a:	617b      	str	r3, [r7, #20]
			break;
 800706c:	e03f      	b.n	80070ee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	4413      	add	r3, r2
 8007078:	4619      	mov	r1, r3
 800707a:	6938      	ldr	r0, [r7, #16]
 800707c:	f7ff fedc 	bl	8006e38 <move_window>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d130      	bne.n	80070e8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007094:	4413      	add	r3, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fc1e 	bl	80068d8 <ld_word>
 800709c:	4603      	mov	r3, r0
 800709e:	617b      	str	r3, [r7, #20]
			break;
 80070a0:	e025      	b.n	80070ee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	4413      	add	r3, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	6938      	ldr	r0, [r7, #16]
 80070b0:	f7ff fec2 	bl	8006e38 <move_window>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d118      	bne.n	80070ec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80070c8:	4413      	add	r3, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fc1c 	bl	8006908 <ld_dword>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070d6:	617b      	str	r3, [r7, #20]
			break;
 80070d8:	e009      	b.n	80070ee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e006      	b.n	80070ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070e0:	bf00      	nop
 80070e2:	e004      	b.n	80070ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070ec:	bf00      	nop
		}
	}

	return val;
 80070ee:	697b      	ldr	r3, [r7, #20]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007104:	2302      	movs	r3, #2
 8007106:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b01      	cmp	r3, #1
 800710c:	f240 80d6 	bls.w	80072bc <put_fat+0x1c4>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	f080 80d0 	bcs.w	80072bc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d073      	beq.n	800720c <put_fat+0x114>
 8007124:	2b03      	cmp	r3, #3
 8007126:	f000 8091 	beq.w	800724c <put_fat+0x154>
 800712a:	2b01      	cmp	r3, #1
 800712c:	f040 80c6 	bne.w	80072bc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	4413      	add	r3, r2
 800713c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	0a5b      	lsrs	r3, r3, #9
 8007146:	4413      	add	r3, r2
 8007148:	4619      	mov	r1, r3
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff fe74 	bl	8006e38 <move_window>
 8007150:	4603      	mov	r3, r0
 8007152:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007154:	7ffb      	ldrb	r3, [r7, #31]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 80a9 	bne.w	80072ae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	1c59      	adds	r1, r3, #1
 8007166:	61b9      	str	r1, [r7, #24]
 8007168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716c:	4413      	add	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00d      	beq.n	8007196 <put_fat+0x9e>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b25b      	sxtb	r3, r3
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	b25a      	sxtb	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	b25b      	sxtb	r3, r3
 800718e:	4313      	orrs	r3, r2
 8007190:	b25b      	sxtb	r3, r3
 8007192:	b2db      	uxtb	r3, r3
 8007194:	e001      	b.n	800719a <put_fat+0xa2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1a      	ldr	r2, [r3, #32]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	0a5b      	lsrs	r3, r3, #9
 80071ac:	4413      	add	r3, r2
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7ff fe41 	bl	8006e38 <move_window>
 80071b6:	4603      	mov	r3, r0
 80071b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071ba:	7ffb      	ldrb	r3, [r7, #31]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d178      	bne.n	80072b2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071cc:	4413      	add	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <put_fat+0xea>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	091b      	lsrs	r3, r3, #4
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	e00e      	b.n	8007200 <put_fat+0x108>
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	f023 030f 	bic.w	r3, r3, #15
 80071ec:	b25a      	sxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	0a1b      	lsrs	r3, r3, #8
 80071f2:	b25b      	sxtb	r3, r3
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	b25b      	sxtb	r3, r3
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b25b      	sxtb	r3, r3
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	70da      	strb	r2, [r3, #3]
			break;
 800720a:	e057      	b.n	80072bc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1a      	ldr	r2, [r3, #32]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	4413      	add	r3, r2
 8007216:	4619      	mov	r1, r3
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff fe0d 	bl	8006e38 <move_window>
 800721e:	4603      	mov	r3, r0
 8007220:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007222:	7ffb      	ldrb	r3, [r7, #31]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d146      	bne.n	80072b6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007236:	4413      	add	r3, r2
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	b292      	uxth	r2, r2
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fb85 	bl	800694e <st_word>
			fs->wflag = 1;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	70da      	strb	r2, [r3, #3]
			break;
 800724a:	e037      	b.n	80072bc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1a      	ldr	r2, [r3, #32]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	09db      	lsrs	r3, r3, #7
 8007254:	4413      	add	r3, r2
 8007256:	4619      	mov	r1, r3
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7ff fded 	bl	8006e38 <move_window>
 800725e:	4603      	mov	r3, r0
 8007260:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007262:	7ffb      	ldrb	r3, [r7, #31]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d128      	bne.n	80072ba <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800727c:	4413      	add	r3, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff fb42 	bl	8006908 <ld_dword>
 8007284:	4603      	mov	r3, r0
 8007286:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800728a:	4323      	orrs	r3, r4
 800728c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800729c:	4413      	add	r3, r2
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fb6f 	bl	8006984 <st_dword>
			fs->wflag = 1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	70da      	strb	r2, [r3, #3]
			break;
 80072ac:	e006      	b.n	80072bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80072ae:	bf00      	nop
 80072b0:	e004      	b.n	80072bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80072b2:	bf00      	nop
 80072b4:	e002      	b.n	80072bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80072b6:	bf00      	nop
 80072b8:	e000      	b.n	80072bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80072ba:	bf00      	nop
		}
	}
	return res;
 80072bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	; 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd90      	pop	{r4, r7, pc}

080072c6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b088      	sub	sp, #32
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d904      	bls.n	80072ec <remove_chain+0x26>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d301      	bcc.n	80072f0 <remove_chain+0x2a>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e04b      	b.n	8007388 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	69b8      	ldr	r0, [r7, #24]
 80072fe:	f7ff fefb 	bl	80070f8 <put_fat>
 8007302:	4603      	mov	r3, r0
 8007304:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007306:	7ffb      	ldrb	r3, [r7, #31]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <remove_chain+0x4a>
 800730c:	7ffb      	ldrb	r3, [r7, #31]
 800730e:	e03b      	b.n	8007388 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fe4b 	bl	8006fae <get_fat>
 8007318:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d031      	beq.n	8007384 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <remove_chain+0x64>
 8007326:	2302      	movs	r3, #2
 8007328:	e02e      	b.n	8007388 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007330:	d101      	bne.n	8007336 <remove_chain+0x70>
 8007332:	2301      	movs	r3, #1
 8007334:	e028      	b.n	8007388 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007336:	2200      	movs	r2, #0
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	69b8      	ldr	r0, [r7, #24]
 800733c:	f7ff fedc 	bl	80070f8 <put_fat>
 8007340:	4603      	mov	r3, r0
 8007342:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007344:	7ffb      	ldrb	r3, [r7, #31]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <remove_chain+0x88>
 800734a:	7ffb      	ldrb	r3, [r7, #31]
 800734c:	e01c      	b.n	8007388 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	3b02      	subs	r3, #2
 8007358:	429a      	cmp	r2, r3
 800735a:	d20b      	bcs.n	8007374 <remove_chain+0xae>
			fs->free_clst++;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	791b      	ldrb	r3, [r3, #4]
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	b2da      	uxtb	r2, r3
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	429a      	cmp	r2, r3
 8007380:	d3c6      	bcc.n	8007310 <remove_chain+0x4a>
 8007382:	e000      	b.n	8007386 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007384:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3720      	adds	r7, #32
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10d      	bne.n	80073c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <create_chain+0x2c>
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d31b      	bcc.n	80073f4 <create_chain+0x64>
 80073bc:	2301      	movs	r3, #1
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	e018      	b.n	80073f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff fdf2 	bl	8006fae <get_fat>
 80073ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d801      	bhi.n	80073d6 <create_chain+0x46>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e070      	b.n	80074b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073dc:	d101      	bne.n	80073e2 <create_chain+0x52>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	e06a      	b.n	80074b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d201      	bcs.n	80073f0 <create_chain+0x60>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	e063      	b.n	80074b8 <create_chain+0x128>
		scl = clst;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	429a      	cmp	r2, r3
 8007406:	d307      	bcc.n	8007418 <create_chain+0x88>
				ncl = 2;
 8007408:	2302      	movs	r3, #2
 800740a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	429a      	cmp	r2, r3
 8007412:	d901      	bls.n	8007418 <create_chain+0x88>
 8007414:	2300      	movs	r3, #0
 8007416:	e04f      	b.n	80074b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007418:	69f9      	ldr	r1, [r7, #28]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fdc7 	bl	8006fae <get_fat>
 8007420:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00e      	beq.n	8007446 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d003      	beq.n	8007436 <create_chain+0xa6>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007434:	d101      	bne.n	800743a <create_chain+0xaa>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	e03e      	b.n	80074b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	429a      	cmp	r2, r3
 8007440:	d1da      	bne.n	80073f8 <create_chain+0x68>
 8007442:	2300      	movs	r3, #0
 8007444:	e038      	b.n	80074b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007446:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800744c:	69f9      	ldr	r1, [r7, #28]
 800744e:	6938      	ldr	r0, [r7, #16]
 8007450:	f7ff fe52 	bl	80070f8 <put_fat>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <create_chain+0xe2>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6938      	ldr	r0, [r7, #16]
 800746a:	f7ff fe45 	bl	80070f8 <put_fat>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d116      	bne.n	80074a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	3b02      	subs	r3, #2
 8007488:	429a      	cmp	r2, r3
 800748a:	d804      	bhi.n	8007496 <create_chain+0x106>
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	1e5a      	subs	r2, r3, #1
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	791b      	ldrb	r3, [r3, #4]
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	711a      	strb	r2, [r3, #4]
 80074a4:	e007      	b.n	80074b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d102      	bne.n	80074b2 <create_chain+0x122>
 80074ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074b0:	e000      	b.n	80074b4 <create_chain+0x124>
 80074b2:	2301      	movs	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80074b6:	69fb      	ldr	r3, [r7, #28]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	3304      	adds	r3, #4
 80074d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	0a5b      	lsrs	r3, r3, #9
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	8952      	ldrh	r2, [r2, #10]
 80074e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1d1a      	adds	r2, r3, #4
 80074ea:	613a      	str	r2, [r7, #16]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <clmt_clust+0x3a>
 80074f6:	2300      	movs	r3, #0
 80074f8:	e010      	b.n	800751c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d307      	bcc.n	8007512 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	3304      	adds	r3, #4
 800750e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007510:	e7e9      	b.n	80074e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007512:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	4413      	add	r3, r2
}
 800751c:	4618      	mov	r0, r3
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800753e:	d204      	bcs.n	800754a <dir_sdi+0x22>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <dir_sdi+0x26>
		return FR_INT_ERR;
 800754a:	2302      	movs	r3, #2
 800754c:	e063      	b.n	8007616 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <dir_sdi+0x46>
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d902      	bls.n	800756e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10c      	bne.n	800758e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	8912      	ldrh	r2, [r2, #8]
 800757c:	4293      	cmp	r3, r2
 800757e:	d301      	bcc.n	8007584 <dir_sdi+0x5c>
 8007580:	2302      	movs	r3, #2
 8007582:	e048      	b.n	8007616 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	61da      	str	r2, [r3, #28]
 800758c:	e029      	b.n	80075e2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	895b      	ldrh	r3, [r3, #10]
 8007592:	025b      	lsls	r3, r3, #9
 8007594:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007596:	e019      	b.n	80075cc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6979      	ldr	r1, [r7, #20]
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fd06 	bl	8006fae <get_fat>
 80075a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075aa:	d101      	bne.n	80075b0 <dir_sdi+0x88>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e032      	b.n	8007616 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d904      	bls.n	80075c0 <dir_sdi+0x98>
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d301      	bcc.n	80075c4 <dir_sdi+0x9c>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e028      	b.n	8007616 <dir_sdi+0xee>
			ofs -= csz;
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d2e1      	bcs.n	8007598 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80075d4:	6979      	ldr	r1, [r7, #20]
 80075d6:	6938      	ldr	r0, [r7, #16]
 80075d8:	f7ff fcca 	bl	8006f70 <clust2sect>
 80075dc:	4602      	mov	r2, r0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <dir_sdi+0xcc>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e010      	b.n	8007616 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	69da      	ldr	r2, [r3, #28]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	0a5b      	lsrs	r3, r3, #9
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760e:	441a      	add	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	3320      	adds	r3, #32
 8007634:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <dir_next+0x28>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007644:	d301      	bcc.n	800764a <dir_next+0x2c>
 8007646:	2304      	movs	r3, #4
 8007648:	e0aa      	b.n	80077a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007650:	2b00      	cmp	r3, #0
 8007652:	f040 8098 	bne.w	8007786 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10b      	bne.n	8007680 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	8912      	ldrh	r2, [r2, #8]
 8007670:	4293      	cmp	r3, r2
 8007672:	f0c0 8088 	bcc.w	8007786 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	61da      	str	r2, [r3, #28]
 800767c:	2304      	movs	r3, #4
 800767e:	e08f      	b.n	80077a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	0a5b      	lsrs	r3, r3, #9
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	8952      	ldrh	r2, [r2, #10]
 8007688:	3a01      	subs	r2, #1
 800768a:	4013      	ands	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d17a      	bne.n	8007786 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7ff fc88 	bl	8006fae <get_fat>
 800769e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d801      	bhi.n	80076aa <dir_next+0x8c>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e07a      	b.n	80077a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b0:	d101      	bne.n	80076b6 <dir_next+0x98>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e074      	b.n	80077a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d358      	bcc.n	8007772 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d104      	bne.n	80076d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	61da      	str	r2, [r3, #28]
 80076cc:	2304      	movs	r3, #4
 80076ce:	e067      	b.n	80077a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7ff fe59 	bl	8007390 <create_chain>
 80076de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <dir_next+0xcc>
 80076e6:	2307      	movs	r3, #7
 80076e8:	e05a      	b.n	80077a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <dir_next+0xd6>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e055      	b.n	80077a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076fa:	d101      	bne.n	8007700 <dir_next+0xe2>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e04f      	b.n	80077a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f7ff fb55 	bl	8006db0 <sync_window>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <dir_next+0xf2>
 800770c:	2301      	movs	r3, #1
 800770e:	e047      	b.n	80077a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3330      	adds	r3, #48	; 0x30
 8007714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff f97f 	bl	8006a1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	6979      	ldr	r1, [r7, #20]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff fc22 	bl	8006f70 <clust2sect>
 800772c:	4602      	mov	r2, r0
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	62da      	str	r2, [r3, #44]	; 0x2c
 8007732:	e012      	b.n	800775a <dir_next+0x13c>
						fs->wflag = 1;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff fb38 	bl	8006db0 <sync_window>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <dir_next+0x12c>
 8007746:	2301      	movs	r3, #1
 8007748:	e02a      	b.n	80077a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3301      	adds	r3, #1
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	62da      	str	r2, [r3, #44]	; 0x2c
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	895b      	ldrh	r3, [r3, #10]
 800775e:	461a      	mov	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4293      	cmp	r3, r2
 8007764:	d3e6      	bcc.n	8007734 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad2      	subs	r2, r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007778:	6979      	ldr	r1, [r7, #20]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fbf8 	bl	8006f70 <clust2sect>
 8007780:	4602      	mov	r2, r0
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007798:	441a      	add	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80077b8:	2100      	movs	r1, #0
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff feb4 	bl	8007528 <dir_sdi>
 80077c0:	4603      	mov	r3, r0
 80077c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d12b      	bne.n	8007822 <dir_alloc+0x7a>
		n = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	4619      	mov	r1, r3
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fb2f 	bl	8006e38 <move_window>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11d      	bne.n	8007820 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2be5      	cmp	r3, #229	; 0xe5
 80077ec:	d004      	beq.n	80077f8 <dir_alloc+0x50>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d107      	bne.n	8007808 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	3301      	adds	r3, #1
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d102      	bne.n	800780c <dir_alloc+0x64>
 8007806:	e00c      	b.n	8007822 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007808:	2300      	movs	r3, #0
 800780a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800780c:	2101      	movs	r1, #1
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff05 	bl	800761e <dir_next>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0d7      	beq.n	80077ce <dir_alloc+0x26>
 800781e:	e000      	b.n	8007822 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007820:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b04      	cmp	r3, #4
 8007826:	d101      	bne.n	800782c <dir_alloc+0x84>
 8007828:	2307      	movs	r3, #7
 800782a:	75fb      	strb	r3, [r7, #23]
	return res;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	331a      	adds	r3, #26
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff f847 	bl	80068d8 <ld_word>
 800784a:	4603      	mov	r3, r0
 800784c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d109      	bne.n	800786a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff f83c 	bl	80068d8 <ld_word>
 8007860:	4603      	mov	r3, r0
 8007862:	041b      	lsls	r3, r3, #16
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	331a      	adds	r3, #26
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	b292      	uxth	r2, r2
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff f85f 	bl	800694e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b03      	cmp	r3, #3
 8007896:	d109      	bne.n	80078ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f103 0214 	add.w	r2, r3, #20
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0c1b      	lsrs	r3, r3, #16
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f7ff f851 	bl	800694e <st_word>
	}
}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80078c2:	2100      	movs	r1, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fe2f 	bl	8007528 <dir_sdi>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <dir_find+0x24>
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	e03e      	b.n	8007956 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	4619      	mov	r1, r3
 80078de:	6938      	ldr	r0, [r7, #16]
 80078e0:	f7ff faaa 	bl	8006e38 <move_window>
 80078e4:	4603      	mov	r3, r0
 80078e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d12f      	bne.n	800794e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <dir_find+0x4e>
 80078fc:	2304      	movs	r3, #4
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	e028      	b.n	8007954 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	330b      	adds	r3, #11
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790e:	b2da      	uxtb	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	330b      	adds	r3, #11
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f003 0308 	and.w	r3, r3, #8
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <dir_find+0x86>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a18      	ldr	r0, [r3, #32]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3324      	adds	r3, #36	; 0x24
 800792c:	220b      	movs	r2, #11
 800792e:	4619      	mov	r1, r3
 8007930:	f7ff f88f 	bl	8006a52 <mem_cmp>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800793a:	2100      	movs	r1, #0
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff fe6e 	bl	800761e <dir_next>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0c5      	beq.n	80078d8 <dir_find+0x24>
 800794c:	e002      	b.n	8007954 <dir_find+0xa0>
		if (res != FR_OK) break;
 800794e:	bf00      	nop
 8007950:	e000      	b.n	8007954 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007952:	bf00      	nop

	return res;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800796c:	2101      	movs	r1, #1
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff ff1a 	bl	80077a8 <dir_alloc>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d11c      	bne.n	80079b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	4619      	mov	r1, r3
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f7ff fa57 	bl	8006e38 <move_window>
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d111      	bne.n	80079b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	2220      	movs	r2, #32
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff f83e 	bl	8006a1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a18      	ldr	r0, [r3, #32]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3324      	adds	r3, #36	; 0x24
 80079aa:	220b      	movs	r2, #11
 80079ac:	4619      	mov	r1, r3
 80079ae:	f7ff f815 	bl	80069dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2201      	movs	r2, #1
 80079b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3324      	adds	r3, #36	; 0x24
 80079d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80079da:	220b      	movs	r2, #11
 80079dc:	2120      	movs	r1, #32
 80079de:	68b8      	ldr	r0, [r7, #8]
 80079e0:	f7ff f81d 	bl	8006a1e <mem_set>
	si = i = 0; ni = 8;
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	617b      	str	r3, [r7, #20]
 80079ec:	2308      	movs	r3, #8
 80079ee:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	617a      	str	r2, [r7, #20]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80079fe:	7ffb      	ldrb	r3, [r7, #31]
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d94e      	bls.n	8007aa2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007a04:	7ffb      	ldrb	r3, [r7, #31]
 8007a06:	2b2f      	cmp	r3, #47	; 0x2f
 8007a08:	d006      	beq.n	8007a18 <create_name+0x54>
 8007a0a:	7ffb      	ldrb	r3, [r7, #31]
 8007a0c:	2b5c      	cmp	r3, #92	; 0x5c
 8007a0e:	d110      	bne.n	8007a32 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a10:	e002      	b.n	8007a18 <create_name+0x54>
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3301      	adds	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b2f      	cmp	r3, #47	; 0x2f
 8007a22:	d0f6      	beq.n	8007a12 <create_name+0x4e>
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8007a2e:	d0f0      	beq.n	8007a12 <create_name+0x4e>
			break;
 8007a30:	e038      	b.n	8007aa4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007a32:	7ffb      	ldrb	r3, [r7, #31]
 8007a34:	2b2e      	cmp	r3, #46	; 0x2e
 8007a36:	d003      	beq.n	8007a40 <create_name+0x7c>
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d30c      	bcc.n	8007a5a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	2b0b      	cmp	r3, #11
 8007a44:	d002      	beq.n	8007a4c <create_name+0x88>
 8007a46:	7ffb      	ldrb	r3, [r7, #31]
 8007a48:	2b2e      	cmp	r3, #46	; 0x2e
 8007a4a:	d001      	beq.n	8007a50 <create_name+0x8c>
 8007a4c:	2306      	movs	r3, #6
 8007a4e:	e044      	b.n	8007ada <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007a50:	2308      	movs	r3, #8
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	230b      	movs	r3, #11
 8007a56:	61bb      	str	r3, [r7, #24]
			continue;
 8007a58:	e022      	b.n	8007aa0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007a5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da04      	bge.n	8007a6c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007a62:	7ffb      	ldrb	r3, [r7, #31]
 8007a64:	3b80      	subs	r3, #128	; 0x80
 8007a66:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <create_name+0x120>)
 8007a68:	5cd3      	ldrb	r3, [r2, r3]
 8007a6a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007a6c:	7ffb      	ldrb	r3, [r7, #31]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	481d      	ldr	r0, [pc, #116]	; (8007ae8 <create_name+0x124>)
 8007a72:	f7ff f815 	bl	8006aa0 <chk_chr>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <create_name+0xbc>
 8007a7c:	2306      	movs	r3, #6
 8007a7e:	e02c      	b.n	8007ada <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007a80:	7ffb      	ldrb	r3, [r7, #31]
 8007a82:	2b60      	cmp	r3, #96	; 0x60
 8007a84:	d905      	bls.n	8007a92 <create_name+0xce>
 8007a86:	7ffb      	ldrb	r3, [r7, #31]
 8007a88:	2b7a      	cmp	r3, #122	; 0x7a
 8007a8a:	d802      	bhi.n	8007a92 <create_name+0xce>
 8007a8c:	7ffb      	ldrb	r3, [r7, #31]
 8007a8e:	3b20      	subs	r3, #32
 8007a90:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	613a      	str	r2, [r7, #16]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	7ffa      	ldrb	r2, [r7, #31]
 8007a9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007aa0:	e7a6      	b.n	80079f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007aa2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	441a      	add	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <create_name+0xf4>
 8007ab4:	2306      	movs	r3, #6
 8007ab6:	e010      	b.n	8007ada <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2be5      	cmp	r3, #229	; 0xe5
 8007abe:	d102      	bne.n	8007ac6 <create_name+0x102>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2205      	movs	r2, #5
 8007ac4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007ac6:	7ffb      	ldrb	r3, [r7, #31]
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d801      	bhi.n	8007ad0 <create_name+0x10c>
 8007acc:	2204      	movs	r2, #4
 8007ace:	e000      	b.n	8007ad2 <create_name+0x10e>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	330b      	adds	r3, #11
 8007ad6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007ad8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	08008e64 	.word	0x08008e64
 8007ae8:	08008b84 	.word	0x08008b84

08007aec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b00:	e002      	b.n	8007b08 <follow_path+0x1c>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007b0e:	d0f8      	beq.n	8007b02 <follow_path+0x16>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b5c      	cmp	r3, #92	; 0x5c
 8007b16:	d0f4      	beq.n	8007b02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b1f      	cmp	r3, #31
 8007b24:	d80a      	bhi.n	8007b3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007b2e:	2100      	movs	r1, #0
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fcf9 	bl	8007528 <dir_sdi>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]
 8007b3a:	e043      	b.n	8007bc4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ff3f 	bl	80079c4 <create_name>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d134      	bne.n	8007bba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff feaf 	bl	80078b4 <dir_find>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d127      	bne.n	8007bbe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d122      	bne.n	8007bbe <follow_path+0xd2>
 8007b78:	2305      	movs	r3, #5
 8007b7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007b7c:	e01f      	b.n	8007bbe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11c      	bne.n	8007bc2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	799b      	ldrb	r3, [r3, #6]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d102      	bne.n	8007b9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b94:	2305      	movs	r3, #5
 8007b96:	75fb      	strb	r3, [r7, #23]
 8007b98:	e014      	b.n	8007bc4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba8:	4413      	add	r3, r2
 8007baa:	4619      	mov	r1, r3
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff fe42 	bl	8007836 <ld_clust>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bb8:	e7c0      	b.n	8007b3c <follow_path+0x50>
			if (res != FR_OK) break;
 8007bba:	bf00      	nop
 8007bbc:	e002      	b.n	8007bc4 <follow_path+0xd8>
				break;
 8007bbe:	bf00      	nop
 8007bc0:	e000      	b.n	8007bc4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bc2:	bf00      	nop
			}
		}
	}

	return res;
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b087      	sub	sp, #28
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bda:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d031      	beq.n	8007c48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e002      	b.n	8007bf2 <get_ldnumber+0x24>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d903      	bls.n	8007c02 <get_ldnumber+0x34>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b3a      	cmp	r3, #58	; 0x3a
 8007c00:	d1f4      	bne.n	8007bec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b3a      	cmp	r3, #58	; 0x3a
 8007c08:	d11c      	bne.n	8007c44 <get_ldnumber+0x76>
			tp = *path;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	60fa      	str	r2, [r7, #12]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	3b30      	subs	r3, #48	; 0x30
 8007c1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b09      	cmp	r3, #9
 8007c20:	d80e      	bhi.n	8007c40 <get_ldnumber+0x72>
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d10a      	bne.n	8007c40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d107      	bne.n	8007c40 <get_ldnumber+0x72>
					vol = (int)i;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	3301      	adds	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	e002      	b.n	8007c4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c48:	693b      	ldr	r3, [r7, #16]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	70da      	strb	r2, [r3, #3]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c6e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff f8e0 	bl	8006e38 <move_window>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <check_fs+0x2a>
 8007c7e:	2304      	movs	r3, #4
 8007c80:	e038      	b.n	8007cf4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3330      	adds	r3, #48	; 0x30
 8007c86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fe24 	bl	80068d8 <ld_word>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d001      	beq.n	8007ca0 <check_fs+0x48>
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e029      	b.n	8007cf4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ca6:	2be9      	cmp	r3, #233	; 0xe9
 8007ca8:	d009      	beq.n	8007cbe <check_fs+0x66>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cb0:	2beb      	cmp	r3, #235	; 0xeb
 8007cb2:	d11e      	bne.n	8007cf2 <check_fs+0x9a>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007cba:	2b90      	cmp	r3, #144	; 0x90
 8007cbc:	d119      	bne.n	8007cf2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3330      	adds	r3, #48	; 0x30
 8007cc2:	3336      	adds	r3, #54	; 0x36
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fe fe1f 	bl	8006908 <ld_dword>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007cd0:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <check_fs+0xa4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d101      	bne.n	8007cda <check_fs+0x82>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e00c      	b.n	8007cf4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3330      	adds	r3, #48	; 0x30
 8007cde:	3352      	adds	r3, #82	; 0x52
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fe11 	bl	8006908 <ld_dword>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <check_fs+0xa8>)
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d101      	bne.n	8007cf2 <check_fs+0x9a>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007cf2:	2302      	movs	r3, #2
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	00544146 	.word	0x00544146
 8007d00:	33544146 	.word	0x33544146

08007d04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b096      	sub	sp, #88	; 0x58
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff ff58 	bl	8007bce <get_ldnumber>
 8007d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	da01      	bge.n	8007d2a <find_volume+0x26>
 8007d26:	230b      	movs	r3, #11
 8007d28:	e22e      	b.n	8008188 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d2a:	4aa8      	ldr	r2, [pc, #672]	; (8007fcc <find_volume+0x2c8>)
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <find_volume+0x3a>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	e224      	b.n	8008188 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	f023 0301 	bic.w	r3, r3, #1
 8007d4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01a      	beq.n	8007d8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fd1f 	bl	800679c <disk_status>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10c      	bne.n	8007d8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <find_volume+0x82>
 8007d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007d82:	230a      	movs	r3, #10
 8007d84:	e200      	b.n	8008188 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007d86:	2300      	movs	r3, #0
 8007d88:	e1fe      	b.n	8008188 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe fd17 	bl	80067d0 <disk_initialize>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007da8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007db4:	2303      	movs	r3, #3
 8007db6:	e1e7      	b.n	8008188 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <find_volume+0xca>
 8007dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007dca:	230a      	movs	r3, #10
 8007dcc:	e1dc      	b.n	8008188 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007dd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dd6:	f7ff ff3f 	bl	8007c58 <check_fs>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d14b      	bne.n	8007e80 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007de8:	2300      	movs	r3, #0
 8007dea:	643b      	str	r3, [r7, #64]	; 0x40
 8007dec:	e01f      	b.n	8007e2e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007dfc:	4413      	add	r3, r2
 8007dfe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	3304      	adds	r3, #4
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d006      	beq.n	8007e18 <find_volume+0x114>
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fd7a 	bl	8006908 <ld_dword>
 8007e14:	4602      	mov	r2, r0
 8007e16:	e000      	b.n	8007e1a <find_volume+0x116>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007e22:	440b      	add	r3, r1
 8007e24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d9dc      	bls.n	8007dee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007e34:	2300      	movs	r3, #0
 8007e36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <find_volume+0x140>
 8007e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e40:	3b01      	subs	r3, #1
 8007e42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <find_volume+0x162>
 8007e5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e5e:	f7ff fefb 	bl	8007c58 <check_fs>
 8007e62:	4603      	mov	r3, r0
 8007e64:	e000      	b.n	8007e68 <find_volume+0x164>
 8007e66:	2303      	movs	r3, #3
 8007e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d905      	bls.n	8007e80 <find_volume+0x17c>
 8007e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e76:	3301      	adds	r3, #1
 8007e78:	643b      	str	r3, [r7, #64]	; 0x40
 8007e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d9e1      	bls.n	8007e44 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d101      	bne.n	8007e8c <find_volume+0x188>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e17d      	b.n	8008188 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d901      	bls.n	8007e98 <find_volume+0x194>
 8007e94:	230d      	movs	r3, #13
 8007e96:	e177      	b.n	8008188 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	3330      	adds	r3, #48	; 0x30
 8007e9c:	330b      	adds	r3, #11
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fd1a 	bl	80068d8 <ld_word>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eaa:	d001      	beq.n	8007eb0 <find_volume+0x1ac>
 8007eac:	230d      	movs	r3, #13
 8007eae:	e16b      	b.n	8008188 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	3330      	adds	r3, #48	; 0x30
 8007eb4:	3316      	adds	r3, #22
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fd0e 	bl	80068d8 <ld_word>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <find_volume+0x1d0>
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	3330      	adds	r3, #48	; 0x30
 8007eca:	3324      	adds	r3, #36	; 0x24
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fd1b 	bl	8006908 <ld_dword>
 8007ed2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ed8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	789b      	ldrb	r3, [r3, #2]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d005      	beq.n	8007ef8 <find_volume+0x1f4>
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	789b      	ldrb	r3, [r3, #2]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d001      	beq.n	8007ef8 <find_volume+0x1f4>
 8007ef4:	230d      	movs	r3, #13
 8007ef6:	e147      	b.n	8008188 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	789b      	ldrb	r3, [r3, #2]
 8007efc:	461a      	mov	r2, r3
 8007efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
 8007f04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	895b      	ldrh	r3, [r3, #10]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <find_volume+0x228>
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	895b      	ldrh	r3, [r3, #10]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	895b      	ldrh	r3, [r3, #10]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <find_volume+0x22c>
 8007f2c:	230d      	movs	r3, #13
 8007f2e:	e12b      	b.n	8008188 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	3330      	adds	r3, #48	; 0x30
 8007f34:	3311      	adds	r3, #17
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fcce 	bl	80068d8 <ld_word>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	891b      	ldrh	r3, [r3, #8]
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <find_volume+0x252>
 8007f52:	230d      	movs	r3, #13
 8007f54:	e118      	b.n	8008188 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	3330      	adds	r3, #48	; 0x30
 8007f5a:	3313      	adds	r3, #19
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe fcbb 	bl	80068d8 <ld_word>
 8007f62:	4603      	mov	r3, r0
 8007f64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <find_volume+0x276>
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	3330      	adds	r3, #48	; 0x30
 8007f70:	3320      	adds	r3, #32
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fcc8 	bl	8006908 <ld_dword>
 8007f78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	3330      	adds	r3, #48	; 0x30
 8007f7e:	330e      	adds	r3, #14
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fca9 	bl	80068d8 <ld_word>
 8007f86:	4603      	mov	r3, r0
 8007f88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <find_volume+0x290>
 8007f90:	230d      	movs	r3, #13
 8007f92:	e0f9      	b.n	8008188 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f98:	4413      	add	r3, r2
 8007f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f9c:	8912      	ldrh	r2, [r2, #8]
 8007f9e:	0912      	lsrs	r2, r2, #4
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d201      	bcs.n	8007fb2 <find_volume+0x2ae>
 8007fae:	230d      	movs	r3, #13
 8007fb0:	e0ea      	b.n	8008188 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fba:	8952      	ldrh	r2, [r2, #10]
 8007fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <find_volume+0x2cc>
 8007fc8:	230d      	movs	r3, #13
 8007fca:	e0dd      	b.n	8008188 <find_volume+0x484>
 8007fcc:	2000004c 	.word	0x2000004c
		fmt = FS_FAT32;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d802      	bhi.n	8007fe6 <find_volume+0x2e2>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d802      	bhi.n	8007ff6 <find_volume+0x2f2>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	1c9a      	adds	r2, r3, #2
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008002:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008008:	441a      	add	r2, r3
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800800e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	441a      	add	r2, r3
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800801c:	2b03      	cmp	r3, #3
 800801e:	d11e      	bne.n	800805e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	3330      	adds	r3, #48	; 0x30
 8008024:	332a      	adds	r3, #42	; 0x2a
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fc56 	bl	80068d8 <ld_word>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <find_volume+0x332>
 8008032:	230d      	movs	r3, #13
 8008034:	e0a8      	b.n	8008188 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	891b      	ldrh	r3, [r3, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <find_volume+0x33e>
 800803e:	230d      	movs	r3, #13
 8008040:	e0a2      	b.n	8008188 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	3330      	adds	r3, #48	; 0x30
 8008046:	332c      	adds	r3, #44	; 0x2c
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fc5d 	bl	8006908 <ld_dword>
 800804e:	4602      	mov	r2, r0
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	647b      	str	r3, [r7, #68]	; 0x44
 800805c:	e01f      	b.n	800809e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	891b      	ldrh	r3, [r3, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <find_volume+0x366>
 8008066:	230d      	movs	r3, #13
 8008068:	e08e      	b.n	8008188 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	6a1a      	ldr	r2, [r3, #32]
 800806e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008070:	441a      	add	r2, r3
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800807a:	2b02      	cmp	r3, #2
 800807c:	d103      	bne.n	8008086 <find_volume+0x382>
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	e00a      	b.n	800809c <find_volume+0x398>
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	4613      	mov	r3, r2
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	4413      	add	r3, r2
 8008090:	085a      	lsrs	r2, r3, #1
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800809c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80080a8:	0a5b      	lsrs	r3, r3, #9
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d201      	bcs.n	80080b2 <find_volume+0x3ae>
 80080ae:	230d      	movs	r3, #13
 80080b0:	e06a      	b.n	8008188 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080b8:	611a      	str	r2, [r3, #16]
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	2280      	movs	r2, #128	; 0x80
 80080c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80080c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d149      	bne.n	8008164 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	3330      	adds	r3, #48	; 0x30
 80080d4:	3330      	adds	r3, #48	; 0x30
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fbfe 	bl	80068d8 <ld_word>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d140      	bne.n	8008164 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80080e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e4:	3301      	adds	r3, #1
 80080e6:	4619      	mov	r1, r3
 80080e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080ea:	f7fe fea5 	bl	8006e38 <move_window>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d137      	bne.n	8008164 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	2200      	movs	r2, #0
 80080f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	3330      	adds	r3, #48	; 0x30
 80080fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fbe8 	bl	80068d8 <ld_word>
 8008108:	4603      	mov	r3, r0
 800810a:	461a      	mov	r2, r3
 800810c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008110:	429a      	cmp	r2, r3
 8008112:	d127      	bne.n	8008164 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	3330      	adds	r3, #48	; 0x30
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fbf5 	bl	8006908 <ld_dword>
 800811e:	4602      	mov	r2, r0
 8008120:	4b1b      	ldr	r3, [pc, #108]	; (8008190 <find_volume+0x48c>)
 8008122:	429a      	cmp	r2, r3
 8008124:	d11e      	bne.n	8008164 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	3330      	adds	r3, #48	; 0x30
 800812a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fbea 	bl	8006908 <ld_dword>
 8008134:	4602      	mov	r2, r0
 8008136:	4b17      	ldr	r3, [pc, #92]	; (8008194 <find_volume+0x490>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d113      	bne.n	8008164 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	3330      	adds	r3, #48	; 0x30
 8008140:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fbdf 	bl	8006908 <ld_dword>
 800814a:	4602      	mov	r2, r0
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	3330      	adds	r3, #48	; 0x30
 8008154:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fbd5 	bl	8006908 <ld_dword>
 800815e:	4602      	mov	r2, r0
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800816a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <find_volume+0x494>)
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	3301      	adds	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	4b08      	ldr	r3, [pc, #32]	; (8008198 <find_volume+0x494>)
 8008176:	801a      	strh	r2, [r3, #0]
 8008178:	4b07      	ldr	r3, [pc, #28]	; (8008198 <find_volume+0x494>)
 800817a:	881a      	ldrh	r2, [r3, #0]
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008182:	f7fe fdf1 	bl	8006d68 <clear_lock>
#endif
	return FR_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3758      	adds	r7, #88	; 0x58
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	41615252 	.word	0x41615252
 8008194:	61417272 	.word	0x61417272
 8008198:	20000050 	.word	0x20000050

0800819c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80081a6:	2309      	movs	r3, #9
 80081a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01c      	beq.n	80081ea <validate+0x4e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d018      	beq.n	80081ea <validate+0x4e>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d013      	beq.n	80081ea <validate+0x4e>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	889a      	ldrh	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	88db      	ldrh	r3, [r3, #6]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d10c      	bne.n	80081ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fae0 	bl	800679c <disk_status>
 80081dc:	4603      	mov	r3, r0
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <validate+0x4e>
			res = FR_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <validate+0x5a>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	e000      	b.n	80081f8 <validate+0x5c>
 80081f6:	2300      	movs	r3, #0
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	6013      	str	r3, [r2, #0]
	return res;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800821a:	f107 0310 	add.w	r3, r7, #16
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff fcd5 	bl	8007bce <get_ldnumber>
 8008224:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	da01      	bge.n	8008230 <f_mount+0x28>
 800822c:	230b      	movs	r3, #11
 800822e:	e02b      	b.n	8008288 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008230:	4a17      	ldr	r2, [pc, #92]	; (8008290 <f_mount+0x88>)
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008238:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008240:	69b8      	ldr	r0, [r7, #24]
 8008242:	f7fe fd91 	bl	8006d68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2200      	movs	r2, #0
 800824a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	490d      	ldr	r1, [pc, #52]	; (8008290 <f_mount+0x88>)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <f_mount+0x66>
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d001      	beq.n	8008272 <f_mount+0x6a>
 800826e:	2300      	movs	r3, #0
 8008270:	e00a      	b.n	8008288 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008272:	f107 010c 	add.w	r1, r7, #12
 8008276:	f107 0308 	add.w	r3, r7, #8
 800827a:	2200      	movs	r2, #0
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fd41 	bl	8007d04 <find_volume>
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008286:	7dfb      	ldrb	r3, [r7, #23]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	2000004c 	.word	0x2000004c

08008294 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b098      	sub	sp, #96	; 0x60
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <f_open+0x18>
 80082a8:	2309      	movs	r3, #9
 80082aa:	e1ad      	b.n	8008608 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80082b4:	79fa      	ldrb	r2, [r7, #7]
 80082b6:	f107 0110 	add.w	r1, r7, #16
 80082ba:	f107 0308 	add.w	r3, r7, #8
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fd20 	bl	8007d04 <find_volume>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80082ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 8191 	bne.w	80085f6 <f_open+0x362>
		dj.obj.fs = fs;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fc03 	bl	8007aec <follow_path>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11a      	bne.n	800832a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80082f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082f8:	b25b      	sxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	da03      	bge.n	8008306 <f_open+0x72>
				res = FR_INVALID_NAME;
 80082fe:	2306      	movs	r3, #6
 8008300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008304:	e011      	b.n	800832a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf14      	ite	ne
 8008310:	2301      	movne	r3, #1
 8008312:	2300      	moveq	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	f107 0314 	add.w	r3, r7, #20
 800831c:	4611      	mov	r1, r2
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fbda 	bl	8006ad8 <chk_lock>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	f003 031c 	and.w	r3, r3, #28
 8008330:	2b00      	cmp	r3, #0
 8008332:	d07f      	beq.n	8008434 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008334:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008338:	2b00      	cmp	r3, #0
 800833a:	d017      	beq.n	800836c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800833c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008340:	2b04      	cmp	r3, #4
 8008342:	d10e      	bne.n	8008362 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008344:	f7fe fc24 	bl	8006b90 <enq_lock>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d006      	beq.n	800835c <f_open+0xc8>
 800834e:	f107 0314 	add.w	r3, r7, #20
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff fb03 	bl	800795e <dir_register>
 8008358:	4603      	mov	r3, r0
 800835a:	e000      	b.n	800835e <f_open+0xca>
 800835c:	2312      	movs	r3, #18
 800835e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	f043 0308 	orr.w	r3, r3, #8
 8008368:	71fb      	strb	r3, [r7, #7]
 800836a:	e010      	b.n	800838e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800836c:	7ebb      	ldrb	r3, [r7, #26]
 800836e:	f003 0311 	and.w	r3, r3, #17
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <f_open+0xea>
					res = FR_DENIED;
 8008376:	2307      	movs	r3, #7
 8008378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800837c:	e007      	b.n	800838e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <f_open+0xfa>
 8008388:	2308      	movs	r3, #8
 800838a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800838e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008392:	2b00      	cmp	r3, #0
 8008394:	d168      	bne.n	8008468 <f_open+0x1d4>
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d063      	beq.n	8008468 <f_open+0x1d4>
				dw = GET_FATTIME();
 80083a0:	f7fe f99e 	bl	80066e0 <get_fattime>
 80083a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80083a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a8:	330e      	adds	r3, #14
 80083aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe fae9 	bl	8006984 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80083b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b4:	3316      	adds	r3, #22
 80083b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fae3 	bl	8006984 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c0:	330b      	adds	r3, #11
 80083c2:	2220      	movs	r2, #32
 80083c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff fa32 	bl	8007836 <ld_clust>
 80083d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083d8:	2200      	movs	r2, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fa4a 	bl	8007874 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	331c      	adds	r3, #28
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe facc 	bl	8006984 <st_dword>
					fs->wflag = 1;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2201      	movs	r2, #1
 80083f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80083f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d037      	beq.n	8008468 <f_open+0x1d4>
						dw = fs->winsect;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80083fe:	f107 0314 	add.w	r3, r7, #20
 8008402:	2200      	movs	r2, #0
 8008404:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe ff5d 	bl	80072c6 <remove_chain>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008416:	2b00      	cmp	r3, #0
 8008418:	d126      	bne.n	8008468 <f_open+0x1d4>
							res = move_window(fs, dw);
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fd0a 	bl	8006e38 <move_window>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800842e:	3a01      	subs	r2, #1
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e019      	b.n	8008468 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008438:	2b00      	cmp	r3, #0
 800843a:	d115      	bne.n	8008468 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800843c:	7ebb      	ldrb	r3, [r7, #26]
 800843e:	f003 0310 	and.w	r3, r3, #16
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008446:	2304      	movs	r3, #4
 8008448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800844c:	e00c      	b.n	8008468 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <f_open+0x1d4>
 8008458:	7ebb      	ldrb	r3, [r7, #26]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <f_open+0x1d4>
						res = FR_DENIED;
 8008462:	2307      	movs	r3, #7
 8008464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800846c:	2b00      	cmp	r3, #0
 800846e:	d128      	bne.n	80084c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008480:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800848a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	f023 0301 	bic.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf14      	ite	ne
 800849a:	2301      	movne	r3, #1
 800849c:	2300      	moveq	r3, #0
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe fb93 	bl	8006bd4 <inc_lock>
 80084ae:	4602      	mov	r2, r0
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d102      	bne.n	80084c2 <f_open+0x22e>
 80084bc:	2302      	movs	r3, #2
 80084be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80084c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 8095 	bne.w	80085f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff f9af 	bl	8007836 <ld_clust>
 80084d8:	4602      	mov	r2, r0
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e0:	331c      	adds	r3, #28
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fa10 	bl	8006908 <ld_dword>
 80084e8:	4602      	mov	r2, r0
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	88da      	ldrh	r2, [r3, #6]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	79fa      	ldrb	r2, [r7, #7]
 8008506:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3330      	adds	r3, #48	; 0x30
 800851e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008522:	2100      	movs	r1, #0
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe fa7a 	bl	8006a1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	f003 0320 	and.w	r3, r3, #32
 8008530:	2b00      	cmp	r3, #0
 8008532:	d060      	beq.n	80085f6 <f_open+0x362>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d05c      	beq.n	80085f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	895b      	ldrh	r3, [r3, #10]
 8008548:	025b      	lsls	r3, r3, #9
 800854a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	657b      	str	r3, [r7, #84]	; 0x54
 8008558:	e016      	b.n	8008588 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe fd25 	bl	8006fae <get_fat>
 8008564:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008568:	2b01      	cmp	r3, #1
 800856a:	d802      	bhi.n	8008572 <f_open+0x2de>
 800856c:	2302      	movs	r3, #2
 800856e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008578:	d102      	bne.n	8008580 <f_open+0x2ec>
 800857a:	2301      	movs	r3, #1
 800857c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	657b      	str	r3, [r7, #84]	; 0x54
 8008588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800858c:	2b00      	cmp	r3, #0
 800858e:	d103      	bne.n	8008598 <f_open+0x304>
 8008590:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008594:	429a      	cmp	r2, r3
 8008596:	d8e0      	bhi.n	800855a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800859c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800859e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d127      	bne.n	80085f6 <f_open+0x362>
 80085a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d022      	beq.n	80085f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fcdb 	bl	8006f70 <clust2sect>
 80085ba:	6478      	str	r0, [r7, #68]	; 0x44
 80085bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <f_open+0x336>
						res = FR_INT_ERR;
 80085c2:	2302      	movs	r3, #2
 80085c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085c8:	e015      	b.n	80085f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80085ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085cc:	0a5a      	lsrs	r2, r3, #9
 80085ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	7858      	ldrb	r0, [r3, #1]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a1a      	ldr	r2, [r3, #32]
 80085e4:	2301      	movs	r3, #1
 80085e6:	f7fe f919 	bl	800681c <disk_read>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <f_open+0x362>
 80085f0:	2301      	movs	r3, #1
 80085f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80085f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <f_open+0x370>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008608:	4618      	mov	r0, r3
 800860a:	3760      	adds	r7, #96	; 0x60
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08c      	sub	sp, #48	; 0x30
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f107 0210 	add.w	r2, r7, #16
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fdb3 	bl	800819c <validate>
 8008636:	4603      	mov	r3, r0
 8008638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800863c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008640:	2b00      	cmp	r3, #0
 8008642:	d107      	bne.n	8008654 <f_write+0x44>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	7d5b      	ldrb	r3, [r3, #21]
 8008648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800864c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <f_write+0x4a>
 8008654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008658:	e14b      	b.n	80088f2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	7d1b      	ldrb	r3, [r3, #20]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <f_write+0x5a>
 8008666:	2307      	movs	r3, #7
 8008668:	e143      	b.n	80088f2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	441a      	add	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	429a      	cmp	r2, r3
 8008678:	f080 812d 	bcs.w	80088d6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	43db      	mvns	r3, r3
 8008682:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008684:	e127      	b.n	80088d6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868e:	2b00      	cmp	r3, #0
 8008690:	f040 80e3 	bne.w	800885a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	0a5b      	lsrs	r3, r3, #9
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	8952      	ldrh	r2, [r2, #10]
 800869e:	3a01      	subs	r2, #1
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d143      	bne.n	8008732 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10c      	bne.n	80086cc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d11a      	bne.n	80086f4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2100      	movs	r1, #0
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fe64 	bl	8007390 <create_chain>
 80086c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80086ca:	e013      	b.n	80086f4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	4619      	mov	r1, r3
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7fe fef0 	bl	80074c0 <clmt_clust>
 80086e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80086e2:	e007      	b.n	80086f4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	4619      	mov	r1, r3
 80086ec:	4610      	mov	r0, r2
 80086ee:	f7fe fe4f 	bl	8007390 <create_chain>
 80086f2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80f2 	beq.w	80088e0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d104      	bne.n	800870c <f_write+0xfc>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2202      	movs	r2, #2
 8008706:	755a      	strb	r2, [r3, #21]
 8008708:	2302      	movs	r3, #2
 800870a:	e0f2      	b.n	80088f2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008712:	d104      	bne.n	800871e <f_write+0x10e>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	755a      	strb	r2, [r3, #21]
 800871a:	2301      	movs	r3, #1
 800871c:	e0e9      	b.n	80088f2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008722:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <f_write+0x122>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008730:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	7d1b      	ldrb	r3, [r3, #20]
 8008736:	b25b      	sxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	da18      	bge.n	800876e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	7858      	ldrb	r0, [r3, #1]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a1a      	ldr	r2, [r3, #32]
 800874a:	2301      	movs	r3, #1
 800874c:	f7fe f886 	bl	800685c <disk_write>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d004      	beq.n	8008760 <f_write+0x150>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	755a      	strb	r2, [r3, #21]
 800875c:	2301      	movs	r3, #1
 800875e:	e0c8      	b.n	80088f2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	7d1b      	ldrb	r3, [r3, #20]
 8008764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008768:	b2da      	uxtb	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f7fe fbfa 	bl	8006f70 <clust2sect>
 800877c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <f_write+0x17e>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2202      	movs	r2, #2
 8008788:	755a      	strb	r2, [r3, #21]
 800878a:	2302      	movs	r3, #2
 800878c:	e0b1      	b.n	80088f2 <f_write+0x2e2>
			sect += csect;
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	4413      	add	r3, r2
 8008794:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	0a5b      	lsrs	r3, r3, #9
 800879a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d03c      	beq.n	800881c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	4413      	add	r3, r2
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	8952      	ldrh	r2, [r2, #10]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d905      	bls.n	80087bc <f_write+0x1ac>
					cc = fs->csize - csect;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	895b      	ldrh	r3, [r3, #10]
 80087b4:	461a      	mov	r2, r3
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	7858      	ldrb	r0, [r3, #1]
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	69f9      	ldr	r1, [r7, #28]
 80087c6:	f7fe f849 	bl	800685c <disk_write>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d004      	beq.n	80087da <f_write+0x1ca>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2201      	movs	r2, #1
 80087d4:	755a      	strb	r2, [r3, #21]
 80087d6:	2301      	movs	r3, #1
 80087d8:	e08b      	b.n	80088f2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a1a      	ldr	r2, [r3, #32]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	6a3a      	ldr	r2, [r7, #32]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d915      	bls.n	8008814 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a1a      	ldr	r2, [r3, #32]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	025b      	lsls	r3, r3, #9
 80087f8:	69fa      	ldr	r2, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008800:	4619      	mov	r1, r3
 8008802:	f7fe f8eb 	bl	80069dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	7d1b      	ldrb	r3, [r3, #20]
 800880a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880e:	b2da      	uxtb	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	025b      	lsls	r3, r3, #9
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800881a:	e03f      	b.n	800889c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	429a      	cmp	r2, r3
 8008824:	d016      	beq.n	8008854 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800882e:	429a      	cmp	r2, r3
 8008830:	d210      	bcs.n	8008854 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	7858      	ldrb	r0, [r3, #1]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800883c:	2301      	movs	r3, #1
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	f7fd ffec 	bl	800681c <disk_read>
 8008844:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008846:	2b00      	cmp	r3, #0
 8008848:	d004      	beq.n	8008854 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	755a      	strb	r2, [r3, #21]
 8008850:	2301      	movs	r3, #1
 8008852:	e04e      	b.n	80088f2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008862:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d901      	bls.n	8008874 <f_write+0x264>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008882:	4413      	add	r3, r2
 8008884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008886:	69f9      	ldr	r1, [r7, #28]
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe f8a7 	bl	80069dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	7d1b      	ldrb	r3, [r3, #20]
 8008892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008896:	b2da      	uxtb	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	4413      	add	r3, r2
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	699a      	ldr	r2, [r3, #24]
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	441a      	add	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	619a      	str	r2, [r3, #24]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	bf38      	it	cc
 80088bc:	461a      	movcc	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	60da      	str	r2, [r3, #12]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	441a      	add	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f47f aed4 	bne.w	8008686 <f_write+0x76>
 80088de:	e000      	b.n	80088e2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	7d1b      	ldrb	r3, [r3, #20]
 80088e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3730      	adds	r7, #48	; 0x30
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f107 0208 	add.w	r2, r7, #8
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fc46 	bl	800819c <validate>
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d168      	bne.n	80089ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7d1b      	ldrb	r3, [r3, #20]
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d062      	beq.n	80089ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	7d1b      	ldrb	r3, [r3, #20]
 800892a:	b25b      	sxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	da15      	bge.n	800895c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	7858      	ldrb	r0, [r3, #1]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1a      	ldr	r2, [r3, #32]
 800893e:	2301      	movs	r3, #1
 8008940:	f7fd ff8c 	bl	800685c <disk_write>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <f_sync+0x54>
 800894a:	2301      	movs	r3, #1
 800894c:	e04f      	b.n	80089ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7d1b      	ldrb	r3, [r3, #20]
 8008952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008956:	b2da      	uxtb	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800895c:	f7fd fec0 	bl	80066e0 <get_fattime>
 8008960:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fa64 	bl	8006e38 <move_window>
 8008970:	4603      	mov	r3, r0
 8008972:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d138      	bne.n	80089ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	330b      	adds	r3, #11
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	330b      	adds	r3, #11
 800898a:	f042 0220 	orr.w	r2, r2, #32
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	461a      	mov	r2, r3
 800899c:	68f9      	ldr	r1, [r7, #12]
 800899e:	f7fe ff69 	bl	8007874 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f103 021c 	add.w	r2, r3, #28
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7fd ffe8 	bl	8006984 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3316      	adds	r3, #22
 80089b8:	6939      	ldr	r1, [r7, #16]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fd ffe2 	bl	8006984 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3312      	adds	r3, #18
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fd ffc1 	bl	800694e <st_word>
					fs->wflag = 1;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2201      	movs	r2, #1
 80089d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe fa5d 	bl	8006e94 <sync_fs>
 80089da:	4603      	mov	r3, r0
 80089dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7d1b      	ldrb	r3, [r3, #20]
 80089e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff ff7b 	bl	80088fa <f_sync>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d118      	bne.n	8008a40 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f107 0208 	add.w	r2, r7, #8
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff fbc0 	bl	800819c <validate>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10c      	bne.n	8008a40 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe f960 	bl	8006cf0 <dec_lock>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a62:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a64:	7a5b      	ldrb	r3, [r3, #9]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d131      	bne.n	8008ad0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a6e:	7a5b      	ldrb	r3, [r3, #9]
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a76:	2100      	movs	r1, #0
 8008a78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a7a:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a7c:	7a5b      	ldrb	r3, [r3, #9]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	4a17      	ldr	r2, [pc, #92]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a8c:	7a5b      	ldrb	r3, [r3, #9]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a94:	4413      	add	r3, r2
 8008a96:	79fa      	ldrb	r2, [r7, #7]
 8008a98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008a9c:	7a5b      	ldrb	r3, [r3, #9]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	b2d1      	uxtb	r1, r2
 8008aa4:	4a0e      	ldr	r2, [pc, #56]	; (8008ae0 <FATFS_LinkDriverEx+0x94>)
 8008aa6:	7251      	strb	r1, [r2, #9]
 8008aa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008aaa:	7dbb      	ldrb	r3, [r7, #22]
 8008aac:	3330      	adds	r3, #48	; 0x30
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	223a      	movs	r2, #58	; 0x3a
 8008aba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3302      	adds	r3, #2
 8008ac0:	222f      	movs	r2, #47	; 0x2f
 8008ac2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	3303      	adds	r3, #3
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000074 	.word	0x20000074

08008ae4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008aee:	2200      	movs	r2, #0
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff ffaa 	bl	8008a4c <FATFS_LinkDriverEx>
 8008af8:	4603      	mov	r3, r0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <__libc_init_array>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4e0d      	ldr	r6, [pc, #52]	; (8008b3c <__libc_init_array+0x38>)
 8008b08:	4c0d      	ldr	r4, [pc, #52]	; (8008b40 <__libc_init_array+0x3c>)
 8008b0a:	1ba4      	subs	r4, r4, r6
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	2500      	movs	r5, #0
 8008b10:	42a5      	cmp	r5, r4
 8008b12:	d109      	bne.n	8008b28 <__libc_init_array+0x24>
 8008b14:	4e0b      	ldr	r6, [pc, #44]	; (8008b44 <__libc_init_array+0x40>)
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <__libc_init_array+0x44>)
 8008b18:	f000 f820 	bl	8008b5c <_init>
 8008b1c:	1ba4      	subs	r4, r4, r6
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	2500      	movs	r5, #0
 8008b22:	42a5      	cmp	r5, r4
 8008b24:	d105      	bne.n	8008b32 <__libc_init_array+0x2e>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b2c:	4798      	blx	r3
 8008b2e:	3501      	adds	r5, #1
 8008b30:	e7ee      	b.n	8008b10 <__libc_init_array+0xc>
 8008b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b36:	4798      	blx	r3
 8008b38:	3501      	adds	r5, #1
 8008b3a:	e7f2      	b.n	8008b22 <__libc_init_array+0x1e>
 8008b3c:	08008eec 	.word	0x08008eec
 8008b40:	08008eec 	.word	0x08008eec
 8008b44:	08008eec 	.word	0x08008eec
 8008b48:	08008ef0 	.word	0x08008ef0

08008b4c <memset>:
 8008b4c:	4402      	add	r2, r0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d100      	bne.n	8008b56 <memset+0xa>
 8008b54:	4770      	bx	lr
 8008b56:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5a:	e7f9      	b.n	8008b50 <memset+0x4>

08008b5c <_init>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr

08008b68 <_fini>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	bf00      	nop
 8008b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6e:	bc08      	pop	{r3}
 8008b70:	469e      	mov	lr, r3
 8008b72:	4770      	bx	lr
