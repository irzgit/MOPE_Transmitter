
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008440  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008768  08008768  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008770  08008770  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea4  20000088  08008800  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f2c  08008800  00020f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017773  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fca  00000000  00000000  0003782b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  0003b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b1f  00000000  00000000  0003c420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5f7  00000000  00000000  0005ff3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc5c9  00000000  00000000  0006e536  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013aaff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e04  00000000  00000000  0013ab7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085f8 	.word	0x080085f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080085f8 	.word	0x080085f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
 80005b8:	f000 ffee 	bl	8001598 <SPIWrite>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 ffe6 	bl	8001598 <SPIWrite>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 ffde 	bl	8001598 <SPIWrite>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 ffd6 	bl	8001598 <SPIWrite>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
 800060c:	f000 ffe8 	bl	80015e0 <BurstWrite>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	0800867c 	.word	0x0800867c

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f000 ffb2 	bl	8001598 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f000 ffae 	bl	8001598 <SPIWrite>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08008688 	.word	0x08008688

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
 800065c:	f000 ff9c 	bl	8001598 <SPIWrite>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	0800868c 	.word	0x0800868c

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
 8000680:	f000 ff8a 	bl	8001598 <SPIWrite>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08008690 	.word	0x08008690

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C);
	SPIWrite(LR_RegModemConfig1,0x8E);
 80006a2:	218e      	movs	r1, #142	; 0x8e
 80006a4:	201d      	movs	r0, #29
 80006a6:	f000 ff77 	bl	8001598 <SPIWrite>
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
 80006c8:	f000 ff66 	bl	8001598 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
 80006d4:	f000 ff60 	bl	8001598 <SPIWrite>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f000 ff4f 	bl	8001598 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f000 ff49 	bl	8001598 <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	460a      	mov	r2, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	b2da      	uxtb	r2, r3
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2040      	movs	r0, #64	; 0x40
 8000732:	f000 ff31 	bl	8001598 <SPIWrite>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000742:	21f7      	movs	r1, #247	; 0xf7
 8000744:	2011      	movs	r0, #17
 8000746:	f000 ff27 	bl	8001598 <SPIWrite>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4619      	mov	r1, r3
 800075c:	2022      	movs	r0, #34	; 0x22
 800075e:	f000 ff1b 	bl	8001598 <SPIWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
 800077a:	f000 ff0d 	bl	8001598 <SPIWrite>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4619      	mov	r1, r3
 8000794:	200d      	movs	r0, #13
 8000796:	f000 feff 	bl	8001598 <SPIWrite>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80007a6:	2183      	movs	r1, #131	; 0x83
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fef5 	bl	8001598 <SPIWrite>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 ff0b 	bl	80015e0 <BurstWrite>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007d6:	f7ff fefb 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007da:	f7ff ff01 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff06 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff19 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff2c 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff3b 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	2007      	movs	r0, #7
 80007fc:	f7ff ff48 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000800:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000804:	2101      	movs	r1, #1
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ff53 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 800080c:	2008      	movs	r0, #8
 800080e:	f7ff ff67 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000812:	f7ff fed5 	bl	80005c0 <Rf96_Standby>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1(1,0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff74 	bl	800070e <Rf96_PinOut_Di0_Di1>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000826:	f7ff fec3 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082a:	f7ff ff88 	bl	800073e <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 800082e:	201b      	movs	r0, #27
 8000830:	f7ff ff8d 	bl	800074e <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	f7ff ff98 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ffa3 	bl	8000786 <Rf96_FIFO_point>

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffac 	bl	80007b2 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800085a:	f7ff ffa2 	bl	80007a2 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <PacketToRadio>:

    return crc;
}

void PacketToRadio(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e01c      	b.n	80008ae <PacketToRadio+0x46>
	{
		for(uint8_t i=0;i<27;i++)
 8000874:	2300      	movs	r3, #0
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	e013      	b.n	80008a2 <PacketToRadio+0x3a>
		   RadioBuff[i+j*9]=packageCut[j][i];
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	79b8      	ldrb	r0, [r7, #6]
 800087e:	79bc      	ldrb	r4, [r7, #6]
 8000880:	79f9      	ldrb	r1, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	18e1      	adds	r1, r4, r3
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <PacketToRadio+0x6c>)
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	4423      	add	r3, r4
 8000894:	4403      	add	r3, r0
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <PacketToRadio+0x70>)
 800089a:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<27;i++)
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	3301      	adds	r3, #1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b1a      	cmp	r3, #26
 80008a6:	d9e8      	bls.n	800087a <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3301      	adds	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d9df      	bls.n	8000874 <PacketToRadio+0xc>
	}
	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f7ff ff58 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	f7ff ff63 	bl	8000786 <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 80008c0:	f7ff fe76 	bl	80005b0 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 80008c4:	211b      	movs	r1, #27
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <PacketToRadio+0x70>)
 80008c8:	f7ff ffbc 	bl	8000844 <Rf96_LoRaTxPacket>
	//  srtAll[0]='1';
	//  srtAll[1]='\n';
	//  HAL_UART_Transmit_IT(&huart2, srtAll,2);

}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	200000d0 	.word	0x200000d0
 80008d8:	200006ac 	.word	0x200006ac

080008dc <transmit>:


void transmit(uint8_t str[3][9])
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b087      	sub	sp, #28
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 3; i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e142      	b.n	8000b70 <transmit+0x294>
			//str[1] - длина команды в байтах
			//0x68 - команда возврата данных с акселерометра
//			if(str[i][3] == 0x84)
//			{
				// Ось Х
				xIntSum = (str[i][0] & 0x0F) * 10 + (str[i][1] >> 4); // целочисленная сумма X
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	f003 020f 	and.w	r2, r3, #15
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4619      	mov	r1, r3
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4613      	mov	r3, r2
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	4413      	add	r3, r2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	091b      	lsrs	r3, r3, #4
 8000916:	b2db      	uxtb	r3, r3
 8000918:	440b      	add	r3, r1
 800091a:	4a99      	ldr	r2, [pc, #612]	; (8000b80 <transmit+0x2a4>)
 800091c:	6013      	str	r3, [r2, #0]
				x5 = str[i][1] & 0x0F; //перевод правого бита 5го байта
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4413      	add	r3, r2
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	4a94      	ldr	r2, [pc, #592]	; (8000b84 <transmit+0x2a8>)
 8000932:	6013      	str	r3, [r2, #0]
				x60 = str[i][2] >> 4; //перевод левого бита 6го байта
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	4613      	mov	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4413      	add	r3, r2
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	4b8f      	ldr	r3, [pc, #572]	; (8000b88 <transmit+0x2ac>)
 800094a:	601a      	str	r2, [r3, #0]
				x65 = str[i][2] & 0x0F; //перевод правого бита 6го байта
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4613      	mov	r3, r2
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4413      	add	r3, r2
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	4a8b      	ldr	r2, [pc, #556]	; (8000b8c <transmit+0x2b0>)
 8000960:	6013      	str	r3, [r2, #0]
				sprintf(xval[i], "+%02d.%d%d;",xIntSum, x5, x60);
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4613      	mov	r3, r2
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	4a89      	ldr	r2, [pc, #548]	; (8000b90 <transmit+0x2b4>)
 800096c:	1898      	adds	r0, r3, r2
 800096e:	4b84      	ldr	r3, [pc, #528]	; (8000b80 <transmit+0x2a4>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4b84      	ldr	r3, [pc, #528]	; (8000b84 <transmit+0x2a8>)
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	4b84      	ldr	r3, [pc, #528]	; (8000b88 <transmit+0x2ac>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	460b      	mov	r3, r1
 800097e:	4985      	ldr	r1, [pc, #532]	; (8000b94 <transmit+0x2b8>)
 8000980:	f007 fa34 	bl	8007dec <siprintf>
				if((str[i][0] >> 4) == 0x01)
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	4613      	mov	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4413      	add	r3, r2
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	091b      	lsrs	r3, r3, #4
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b01      	cmp	r3, #1
 8000998:	d107      	bne.n	80009aa <transmit+0xce>
					xval[i][0] = '-';
 800099a:	497d      	ldr	r1, [pc, #500]	; (8000b90 <transmit+0x2b4>)
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	222d      	movs	r2, #45	; 0x2d
 80009a8:	701a      	strb	r2, [r3, #0]


				// Ось Y
				yIntSum = (str[i][3] & 0x0F) * 10 + (str[i][4] >> 4);	// целочисленная сумма Y
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4613      	mov	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	4413      	add	r3, r2
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	f003 020f 	and.w	r2, r3, #15
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4613      	mov	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	4413      	add	r3, r2
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	091b      	lsrs	r3, r3, #4
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	440b      	add	r3, r1
 80009da:	4a6f      	ldr	r2, [pc, #444]	; (8000b98 <transmit+0x2bc>)
 80009dc:	6013      	str	r3, [r2, #0]
				y8 = str[i][4] & 0x0F; //перевод правого бита 8го байта
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4613      	mov	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	4413      	add	r3, r2
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	4a6a      	ldr	r2, [pc, #424]	; (8000b9c <transmit+0x2c0>)
 80009f2:	6013      	str	r3, [r2, #0]
				y90 = str[i][5] >> 4; //перевод левого бита 9го байта
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4613      	mov	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4413      	add	r3, r2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	795b      	ldrb	r3, [r3, #5]
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <transmit+0x2c4>)
 8000a0a:	601a      	str	r2, [r3, #0]
				y95 = str[i][5] & 0x0F; //перевод правого бита 9го байта
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	4413      	add	r3, r2
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	4a61      	ldr	r2, [pc, #388]	; (8000ba4 <transmit+0x2c8>)
 8000a20:	6013      	str	r3, [r2, #0]
				sprintf(yval[i], "+%02d.%d%d;", yIntSum, y8, y90);
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4613      	mov	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ba8 <transmit+0x2cc>)
 8000a2c:	1898      	adds	r0, r3, r2
 8000a2e:	4b5a      	ldr	r3, [pc, #360]	; (8000b98 <transmit+0x2bc>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <transmit+0x2c0>)
 8000a34:	6819      	ldr	r1, [r3, #0]
 8000a36:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <transmit+0x2c4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4955      	ldr	r1, [pc, #340]	; (8000b94 <transmit+0x2b8>)
 8000a40:	f007 f9d4 	bl	8007dec <siprintf>
				if((str[i][3] >> 4) == 0x01)
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	78db      	ldrb	r3, [r3, #3]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d107      	bne.n	8000a6a <transmit+0x18e>
					yval[i][0] = '-';
 8000a5a:	4953      	ldr	r1, [pc, #332]	; (8000ba8 <transmit+0x2cc>)
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	1a9b      	subs	r3, r3, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	222d      	movs	r2, #45	; 0x2d
 8000a68:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSum = (str[i][6] & 0x0F) * 10 + (str[i][7] >> 4); //целочисленная сумма Z
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4413      	add	r3, r2
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	799b      	ldrb	r3, [r3, #6]
 8000a78:	f003 020f 	and.w	r2, r3, #15
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4619      	mov	r1, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	79db      	ldrb	r3, [r3, #7]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	440b      	add	r3, r1
 8000a9a:	4a44      	ldr	r2, [pc, #272]	; (8000bac <transmit+0x2d0>)
 8000a9c:	6013      	str	r3, [r2, #0]
				z11 = str[i][7] & 0x0F; //перевод правого бита 11го байта
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	79db      	ldrb	r3, [r3, #7]
 8000aac:	f003 030f 	and.w	r3, r3, #15
 8000ab0:	4a3f      	ldr	r2, [pc, #252]	; (8000bb0 <transmit+0x2d4>)
 8000ab2:	6013      	str	r3, [r2, #0]
				z120 = str[i][8] >> 4; //перевод левого бита 12го байта
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	7a1b      	ldrb	r3, [r3, #8]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <transmit+0x2d8>)
 8000aca:	601a      	str	r2, [r3, #0]
				z125 = str[i][8] & 0x0F; //перевод правого бита 12го байта
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	7a1b      	ldrb	r3, [r3, #8]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <transmit+0x2dc>)
 8000ae0:	6013      	str	r3, [r2, #0]
				sprintf(zval[i], "+%02d.%d%d;", zIntSum, z11, z120);
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	4a34      	ldr	r2, [pc, #208]	; (8000bbc <transmit+0x2e0>)
 8000aec:	1898      	adds	r0, r3, r2
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <transmit+0x2d0>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <transmit+0x2d4>)
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <transmit+0x2d8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	460b      	mov	r3, r1
 8000afe:	4925      	ldr	r1, [pc, #148]	; (8000b94 <transmit+0x2b8>)
 8000b00:	f007 f974 	bl	8007dec <siprintf>
				if((str[i][6] >> 4) == 0x01)
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4613      	mov	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	799b      	ldrb	r3, [r3, #6]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d107      	bne.n	8000b2a <transmit+0x24e>
					zval[i][0] = '-';
 8000b1a:	4928      	ldr	r1, [pc, #160]	; (8000bbc <transmit+0x2e0>)
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	222d      	movs	r2, #45	; 0x2d
 8000b28:	701a      	strb	r2, [r3, #0]
//			}
//		}
		sprintf(str1[i], "%s%s%s", xval[i], yval[i], zval[i]);
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00da      	lsls	r2, r3, #3
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <transmit+0x2e4>)
 8000b38:	18d0      	adds	r0, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	1a9b      	subs	r3, r3, r2
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <transmit+0x2b4>)
 8000b44:	1899      	adds	r1, r3, r2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <transmit+0x2cc>)
 8000b50:	189c      	adds	r4, r3, r2
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4613      	mov	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <transmit+0x2e0>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	4623      	mov	r3, r4
 8000b62:	460a      	mov	r2, r1
 8000b64:	4917      	ldr	r1, [pc, #92]	; (8000bc4 <transmit+0x2e8>)
 8000b66:	f007 f941 	bl	8007dec <siprintf>
	for(int i = 0; i < 3; i++)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	f77f aeb9 	ble.w	80008ea <transmit+0xe>


	//HAL_UART_Transmit_IT(&huart2,"\n",1);


}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	200007dc 	.word	0x200007dc
 8000b84:	2000045c 	.word	0x2000045c
 8000b88:	20000508 	.word	0x20000508
 8000b8c:	200007e4 	.word	0x200007e4
 8000b90:	20000694 	.word	0x20000694
 8000b94:	08008610 	.word	0x08008610
 8000b98:	20000408 	.word	0x20000408
 8000b9c:	2000043c 	.word	0x2000043c
 8000ba0:	2000068c 	.word	0x2000068c
 8000ba4:	200004ac 	.word	0x200004ac
 8000ba8:	20000440 	.word	0x20000440
 8000bac:	20000ab0 	.word	0x20000ab0
 8000bb0:	20000690 	.word	0x20000690
 8000bb4:	20000130 	.word	0x20000130
 8000bb8:	20000458 	.word	0x20000458
 8000bbc:	200006c8 	.word	0x200006c8
 8000bc0:	2000064c 	.word	0x2000064c
 8000bc4:	0800861c 	.word	0x0800861c

08000bc8 <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	82fb      	strh	r3, [r7, #22]
 8000be2:	e01f      	b.n	8000c24 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000be4:	68f9      	ldr	r1, [r7, #12]
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <uint32_TO_charmass+0x70>)
 8000be8:	fba3 2301 	umull	r2, r3, r3, r1
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	1aca      	subs	r2, r1, r3
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	1e59      	subs	r1, r3, #1
 8000bfe:	8afb      	ldrh	r3, [r7, #22]
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	440b      	add	r3, r1
 8000c06:	4619      	mov	r1, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	440b      	add	r3, r1
 8000c0c:	3230      	adds	r2, #48	; 0x30
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <uint32_TO_charmass+0x70>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	3301      	adds	r3, #1
 8000c22:	82fb      	strh	r3, [r7, #22]
 8000c24:	8afa      	ldrh	r2, [r7, #22]
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3db      	bcc.n	8000be4 <uint32_TO_charmass+0x1c>

	}
}
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	cccccccd 	.word	0xcccccccd

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f001 fdd5 	bl	80027f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f953 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f000 fb1d 	bl	8001288 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4e:	f000 fad5 	bl	80011fc <MX_DMA_Init>
  MX_SPI1_Init();
 8000c52:	f000 f9bf 	bl	8000fd4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c56:	f000 fa7d 	bl	8001154 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c5a:	f000 faa5 	bl	80011a8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000c5e:	f000 fa4f 	bl	8001100 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000c62:	f004 fe6d 	bl	8005940 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000c66:	f000 f9eb 	bl	8001040 <MX_SPI3_Init>
  MX_UART5_Init();
 8000c6a:	f000 fa1f 	bl	80010ac <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  int kolZapis = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c



	Rf96_Lora_init();
 8000c72:	f7ff fdae 	bl	80007d2 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8000c76:	f7ff fdd0 	bl	800081a <Rf96_Lora_TX_mode>
*/




		HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8000c7a:	220e      	movs	r2, #14
 8000c7c:	4985      	ldr	r1, [pc, #532]	; (8000e94 <main+0x258>)
 8000c7e:	4886      	ldr	r0, [pc, #536]	; (8000e98 <main+0x25c>)
 8000c80:	f003 ff08 	bl	8004a94 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8000c84:	220e      	movs	r2, #14
 8000c86:	4985      	ldr	r1, [pc, #532]	; (8000e9c <main+0x260>)
 8000c88:	4885      	ldr	r0, [pc, #532]	; (8000ea0 <main+0x264>)
 8000c8a:	f003 ff03 	bl	8004a94 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8000c8e:	220e      	movs	r2, #14
 8000c90:	4984      	ldr	r1, [pc, #528]	; (8000ea4 <main+0x268>)
 8000c92:	4885      	ldr	r0, [pc, #532]	; (8000ea8 <main+0x26c>)
 8000c94:	f003 fefe 	bl	8004a94 <HAL_UART_Receive_DMA>


        //Rf96_LoRaTxPacket((char*)packageCut,27);


		PacketToRadio();
 8000c98:	f7ff fde6 	bl	8000868 <PacketToRadio>

		////////////////ФЛЕШКА



	    fres = f_mount(&FatFs, "", 1); //1=mount now
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4983      	ldr	r1, [pc, #524]	; (8000eac <main+0x270>)
 8000ca0:	4883      	ldr	r0, [pc, #524]	; (8000eb0 <main+0x274>)
 8000ca2:	f006 fbf3 	bl	800748c <f_mount>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b82      	ldr	r3, [pc, #520]	; (8000eb4 <main+0x278>)
 8000cac:	701a      	strb	r2, [r3, #0]


		  if (fres != FR_OK) {
 8000cae:	4b81      	ldr	r3, [pc, #516]	; (8000eb4 <main+0x278>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d000      	beq.n	8000cb8 <main+0x7c>
		   // myprintf("f_mount error (%i)\r\n", fres);

			//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
			while(1);
 8000cb6:	e7fe      	b.n	8000cb6 <main+0x7a>


	  //fres = f_open(&fil, "write.txt", FA_OPEN_APPEND | FA_WRITE);


		  fres = f_open(&fil, "write.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000cb8:	220a      	movs	r2, #10
 8000cba:	497f      	ldr	r1, [pc, #508]	; (8000eb8 <main+0x27c>)
 8000cbc:	487f      	ldr	r0, [pc, #508]	; (8000ebc <main+0x280>)
 8000cbe:	f006 fc2b 	bl	8007518 <f_open>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b7b      	ldr	r3, [pc, #492]	; (8000eb4 <main+0x278>)
 8000cc8:	701a      	strb	r2, [r3, #0]

	  if(fres == FR_OK) {
 8000cca:	4b7a      	ldr	r3, [pc, #488]	; (8000eb4 <main+0x278>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d000      	beq.n	8000cd4 <main+0x98>
	 //   myprintf("I was able to open 'write.txt' for writing\r\n");
	  } else {
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
			while(1);
 8000cd2:	e7fe      	b.n	8000cd2 <main+0x96>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 8000cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd8:	4879      	ldr	r0, [pc, #484]	; (8000ec0 <main+0x284>)
 8000cda:	f002 fccd 	bl	8003678 <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d110      	bne.n	8000d06 <main+0xca>
	  {
		  //Close file, don't forget this!
		  //HAL_Delay(10);
		   f_close(&fil);
 8000ce4:	4875      	ldr	r0, [pc, #468]	; (8000ebc <main+0x280>)
 8000ce6:	f006 ffc8 	bl	8007c7a <f_close>
		  // HAL_Delay(5);
		   //De-mount drive
		  f_mount(NULL, "", 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	496f      	ldr	r1, [pc, #444]	; (8000eac <main+0x270>)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f006 fbcc 	bl	800748c <f_mount>
		  while(1)
		  {
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		  HAL_Delay(500);
 8000cf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf8:	f001 fdec 	bl	80028d4 <HAL_Delay>
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		  HAL_Delay(500);
 8000cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d00:	f001 fde8 	bl	80028d4 <HAL_Delay>
		  HAL_Delay(500);
 8000d04:	e7f6      	b.n	8000cf4 <main+0xb8>
		  }
	  }

	  if(readFlag==1)
 8000d06:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <main+0x288>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10d      	bne.n	8000d2a <main+0xee>
	  {
	  	readFlag=0;
 8000d0e:	4b6d      	ldr	r3, [pc, #436]	; (8000ec4 <main+0x288>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f001 fddd 	bl	80028d4 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 8000d1a:	485f      	ldr	r0, [pc, #380]	; (8000e98 <main+0x25c>)
 8000d1c:	f003 ff3a 	bl	8004b94 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8000d20:	220e      	movs	r2, #14
 8000d22:	495c      	ldr	r1, [pc, #368]	; (8000e94 <main+0x258>)
 8000d24:	485c      	ldr	r0, [pc, #368]	; (8000e98 <main+0x25c>)
 8000d26:	f003 feb5 	bl	8004a94 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag2==1)
 8000d2a:	4b67      	ldr	r3, [pc, #412]	; (8000ec8 <main+0x28c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d10d      	bne.n	8000d4e <main+0x112>
	  {
	  	readFlag2=0;
 8000d32:	4b65      	ldr	r3, [pc, #404]	; (8000ec8 <main+0x28c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f001 fdcb 	bl	80028d4 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 8000d3e:	485a      	ldr	r0, [pc, #360]	; (8000ea8 <main+0x26c>)
 8000d40:	f003 ff28 	bl	8004b94 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8000d44:	220e      	movs	r2, #14
 8000d46:	4957      	ldr	r1, [pc, #348]	; (8000ea4 <main+0x268>)
 8000d48:	4857      	ldr	r0, [pc, #348]	; (8000ea8 <main+0x26c>)
 8000d4a:	f003 fea3 	bl	8004a94 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag3==1)
 8000d4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <main+0x290>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10d      	bne.n	8000d72 <main+0x136>
	  {
	  	readFlag3=0;
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <main+0x290>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f001 fdb9 	bl	80028d4 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 8000d62:	484f      	ldr	r0, [pc, #316]	; (8000ea0 <main+0x264>)
 8000d64:	f003 ff16 	bl	8004b94 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8000d68:	220e      	movs	r2, #14
 8000d6a:	494c      	ldr	r1, [pc, #304]	; (8000e9c <main+0x260>)
 8000d6c:	484c      	ldr	r0, [pc, #304]	; (8000ea0 <main+0x264>)
 8000d6e:	f003 fe91 	bl	8004a94 <HAL_UART_Receive_DMA>
	  }

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	4856      	ldr	r0, [pc, #344]	; (8000ed0 <main+0x294>)
 8000d78:	f002 fc7e 	bl	8003678 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <main+0x14a>
		{
			PacketToRadio();
 8000d82:	f7ff fd71 	bl	8000868 <PacketToRadio>
		}
		if(UsartCount==4)
 8000d86:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <main+0x298>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d1a2      	bne.n	8000cd4 <main+0x98>
		{

			transmit(packageCut);
 8000d8e:	4852      	ldr	r0, [pc, #328]	; (8000ed8 <main+0x29c>)
 8000d90:	f7ff fda4 	bl	80008dc <transmit>
			//HAL_UART_Transmit_IT(&huart2, "\n",1);



			  //fres = f_write(&fil, packageCut, 27, &bytesWrote);
			  reciveTime = HAL_GetTick();
 8000d94:	f001 fd92 	bl	80028bc <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <main+0x2a0>)
 8000d9c:	601a      	str	r2, [r3, #0]
			  uint32_TO_charmass(reciveTime, SD_Buff, 0, 8);
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <main+0x2a0>)
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	2308      	movs	r3, #8
 8000da4:	2200      	movs	r2, #0
 8000da6:	494e      	ldr	r1, [pc, #312]	; (8000ee0 <main+0x2a4>)
 8000da8:	f7ff ff0e 	bl	8000bc8 <uint32_TO_charmass>

			  SD_Buff[8]=';';
 8000dac:	4b4c      	ldr	r3, [pc, #304]	; (8000ee0 <main+0x2a4>)
 8000dae:	223b      	movs	r2, #59	; 0x3b
 8000db0:	721a      	strb	r2, [r3, #8]
			  for(uint8_t i=0;i<21;i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000db8:	e00d      	b.n	8000dd6 <main+0x19a>
						  {
							  SD_Buff[i+9]=str1[0][i];
 8000dba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000dbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dc2:	3309      	adds	r3, #9
 8000dc4:	4947      	ldr	r1, [pc, #284]	; (8000ee4 <main+0x2a8>)
 8000dc6:	5c89      	ldrb	r1, [r1, r2]
 8000dc8:	4a45      	ldr	r2, [pc, #276]	; (8000ee0 <main+0x2a4>)
 8000dca:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i=0;i<21;i++)
 8000dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dda:	2b14      	cmp	r3, #20
 8000ddc:	d9ed      	bls.n	8000dba <main+0x17e>

						  }
			  for(uint8_t i=0;i<21;i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000de4:	e00e      	b.n	8000e04 <main+0x1c8>
						  {
							  SD_Buff[i+30]=str1[1][i];
 8000de6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000dea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dee:	331e      	adds	r3, #30
 8000df0:	493c      	ldr	r1, [pc, #240]	; (8000ee4 <main+0x2a8>)
 8000df2:	440a      	add	r2, r1
 8000df4:	7d51      	ldrb	r1, [r2, #21]
 8000df6:	4a3a      	ldr	r2, [pc, #232]	; (8000ee0 <main+0x2a4>)
 8000df8:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i=0;i<21;i++)
 8000dfa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000e04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e08:	2b14      	cmp	r3, #20
 8000e0a:	d9ec      	bls.n	8000de6 <main+0x1aa>

						  }
			  for(uint8_t i=0;i<21;i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e12:	e00f      	b.n	8000e34 <main+0x1f8>
						  {
							  SD_Buff[i+51]=str1[2][i];
 8000e14:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000e18:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e1c:	3333      	adds	r3, #51	; 0x33
 8000e1e:	4931      	ldr	r1, [pc, #196]	; (8000ee4 <main+0x2a8>)
 8000e20:	440a      	add	r2, r1
 8000e22:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8000e26:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <main+0x2a4>)
 8000e28:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i=0;i<21;i++)
 8000e2a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e2e:	3301      	adds	r3, #1
 8000e30:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000e34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000e38:	2b14      	cmp	r3, #20
 8000e3a:	d9eb      	bls.n	8000e14 <main+0x1d8>

						  }

			  SD_Buff[72]='\n';
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <main+0x2a4>)
 8000e3e:	220a      	movs	r2, #10
 8000e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

			 fres = f_write(&fil, &SD_Buff, sizeof(SD_Buff), &bytesWrote);
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2249      	movs	r2, #73	; 0x49
 8000e48:	4925      	ldr	r1, [pc, #148]	; (8000ee0 <main+0x2a4>)
 8000e4a:	481c      	ldr	r0, [pc, #112]	; (8000ebc <main+0x280>)
 8000e4c:	f006 fd22 	bl	8007894 <f_write>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <main+0x278>)
 8000e56:	701a      	strb	r2, [r3, #0]
					  //  myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
					  } else {

					 //   myprintf("f_write error (%i)\r\n");
					  }
					  kolZapis++;
 8000e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					  if(kolZapis==1000)
 8000e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e64:	d10d      	bne.n	8000e82 <main+0x246>
					  {
						  kolZapis=0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
						 fres= f_sync(&fil);
 8000e6a:	4814      	ldr	r0, [pc, #80]	; (8000ebc <main+0x280>)
 8000e6c:	f006 fe87 	bl	8007b7e <f_sync>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <main+0x278>)
 8000e76:	701a      	strb	r2, [r3, #0]
						 if(fres!=FR_OK)
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <main+0x278>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d000      	beq.n	8000e82 <main+0x246>
						 {
							 while(1);
 8000e80:	e7fe      	b.n	8000e80 <main+0x244>
						 }
					  }



			  HAL_UART_Transmit_IT(&huart2, "\n", 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	4918      	ldr	r1, [pc, #96]	; (8000ee8 <main+0x2ac>)
 8000e86:	4819      	ldr	r0, [pc, #100]	; (8000eec <main+0x2b0>)
 8000e88:	f003 fdbf 	bl	8004a0a <HAL_UART_Transmit_IT>
			//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
	//	HAL_UART_Transmit_DMA(&huart3, &accelSelect[0][0], 5);
	//	HAL_UART_Transmit_DMA(&huart1, &accelSelect[2][0], 5);
	//	HAL_UART_Transmit_DMA(&huart5, &accelSelect[1][0], 5);

		UsartCount=0;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <main+0x298>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 8000e92:	e71f      	b.n	8000cd4 <main+0x98>
 8000e94:	200000a4 	.word	0x200000a4
 8000e98:	20000198 	.word	0x20000198
 8000e9c:	200000b2 	.word	0x200000b2
 8000ea0:	2000050c 	.word	0x2000050c
 8000ea4:	200000c0 	.word	0x200000c0
 8000ea8:	2000060c 	.word	0x2000060c
 8000eac:	08008624 	.word	0x08008624
 8000eb0:	200001d8 	.word	0x200001d8
 8000eb4:	200007e0 	.word	0x200007e0
 8000eb8:	08008628 	.word	0x08008628
 8000ebc:	200007e8 	.word	0x200007e8
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	200006dd 	.word	0x200006dd
 8000ec8:	200006a9 	.word	0x200006a9
 8000ecc:	20000134 	.word	0x20000134
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	200000eb 	.word	0x200000eb
 8000ed8:	200000d0 	.word	0x200000d0
 8000edc:	200006e0 	.word	0x200006e0
 8000ee0:	20000460 	.word	0x20000460
 8000ee4:	2000064c 	.word	0x2000064c
 8000ee8:	08008634 	.word	0x08008634
 8000eec:	2000073c 	.word	0x2000073c

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f006 ff6c 	bl	8007ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f30:	2300      	movs	r3, #0
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <SystemClock_Config+0xe0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a25      	ldr	r2, [pc, #148]	; (8000fd0 <SystemClock_Config+0xe0>)
 8000f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <SystemClock_Config+0xe0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f54:	2310      	movs	r3, #16
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f60:	2308      	movs	r3, #8
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f64:	23b4      	movs	r3, #180	; 0xb4
 8000f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 feb9 	bl	8003cf0 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f84:	f000 faee 	bl	8001564 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f88:	f002 fba8 	bl	80036dc <HAL_PWREx_EnableOverDrive>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f92:	f000 fae7 	bl	8001564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fbe1 	bl	800377c <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fc0:	f000 fad0 	bl	8001564 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	; 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_SPI1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_SPI1_Init+0x64>)
 8001008:	2210      	movs	r2, #16
 800100a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_SPI1_Init+0x64>)
 8001020:	220a      	movs	r2, #10
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_SPI1_Init+0x64>)
 8001026:	f003 f8bd 	bl	80041a4 <HAL_SPI_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001030:	f000 fa98 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200006e4 	.word	0x200006e4
 800103c:	40013000 	.word	0x40013000

08001040 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_SPI3_Init+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_SPI3_Init+0x64>)
 800104c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001050:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_SPI3_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_SPI3_Init+0x64>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_SPI3_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_SPI3_Init+0x64>)
 800108c:	220a      	movs	r2, #10
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_SPI3_Init+0x64>)
 8001092:	f003 f887 	bl	80041a4 <HAL_SPI_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800109c:	f000 fa62 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200004b0 	.word	0x200004b0
 80010a8:	40003c00 	.word	0x40003c00

080010ac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_UART5_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010b8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80010bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_UART5_Init+0x4c>)
 80010e4:	f003 fc44 	bl	8004970 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 fa39 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000050c 	.word	0x2000050c
 80010fc:	40005000 	.word	0x40005000

08001100 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART1_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_USART1_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_USART1_UART_Init+0x4c>)
 800110c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART1_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART1_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART1_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART1_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART1_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART1_UART_Init+0x4c>)
 8001138:	f003 fc1a 	bl	8004970 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001142:	f000 fa0f 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000060c 	.word	0x2000060c
 8001150:	40011000 	.word	0x40011000

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART2_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001160:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800118c:	f003 fbf0 	bl	8004970 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f9e5 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000073c 	.word	0x2000073c
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART3_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011b4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80011b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART3_UART_Init+0x4c>)
 80011e0:	f003 fbc6 	bl	8004970 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f9bb 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000198 	.word	0x20000198
 80011f8:	40004800 	.word	0x40004800

080011fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_DMA_Init+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <MX_DMA_Init+0x88>)
 800120c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_DMA_Init+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_DMA_Init+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_DMA_Init+0x88>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_DMA_Init+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	200b      	movs	r0, #11
 8001240:	f001 fc45 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001244:	200b      	movs	r0, #11
 8001246:	f001 fc5e 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	200c      	movs	r0, #12
 8001250:	f001 fc3d 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001254:	200c      	movs	r0, #12
 8001256:	f001 fc56 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2011      	movs	r0, #17
 8001260:	f001 fc35 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001264:	2011      	movs	r0, #17
 8001266:	f001 fc4e 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	203a      	movs	r0, #58	; 0x3a
 8001270:	f001 fc2d 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001274:	203a      	movs	r0, #58	; 0x3a
 8001276:	f001 fc46 	bl	8002b06 <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b5e      	ldr	r3, [pc, #376]	; (800141c <MX_GPIO_Init+0x194>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a5d      	ldr	r2, [pc, #372]	; (800141c <MX_GPIO_Init+0x194>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <MX_GPIO_Init+0x194>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b57      	ldr	r3, [pc, #348]	; (800141c <MX_GPIO_Init+0x194>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a56      	ldr	r2, [pc, #344]	; (800141c <MX_GPIO_Init+0x194>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b54      	ldr	r3, [pc, #336]	; (800141c <MX_GPIO_Init+0x194>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b50      	ldr	r3, [pc, #320]	; (800141c <MX_GPIO_Init+0x194>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a4f      	ldr	r2, [pc, #316]	; (800141c <MX_GPIO_Init+0x194>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b4d      	ldr	r3, [pc, #308]	; (800141c <MX_GPIO_Init+0x194>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <MX_GPIO_Init+0x194>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a48      	ldr	r2, [pc, #288]	; (800141c <MX_GPIO_Init+0x194>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b46      	ldr	r3, [pc, #280]	; (800141c <MX_GPIO_Init+0x194>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001314:	4842      	ldr	r0, [pc, #264]	; (8001420 <MX_GPIO_Init+0x198>)
 8001316:	f002 f9c7 	bl	80036a8 <HAL_GPIO_WritePin>
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f248 0112 	movw	r1, #32786	; 0x8012
 8001320:	4840      	ldr	r0, [pc, #256]	; (8001424 <MX_GPIO_Init+0x19c>)
 8001322:	f002 f9c1 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f246 0142 	movw	r1, #24642	; 0x6042
 800132c:	483e      	ldr	r0, [pc, #248]	; (8001428 <MX_GPIO_Init+0x1a0>)
 800132e:	f002 f9bb 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <MX_GPIO_Init+0x1a4>)
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4836      	ldr	r0, [pc, #216]	; (8001420 <MX_GPIO_Init+0x198>)
 8001348:	f002 f804 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800134c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001350:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	482e      	ldr	r0, [pc, #184]	; (8001420 <MX_GPIO_Init+0x198>)
 8001366:	f001 fff5 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800136a:	f240 4301 	movw	r3, #1025	; 0x401
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4829      	ldr	r0, [pc, #164]	; (8001424 <MX_GPIO_Init+0x19c>)
 8001380:	f001 ffe8 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001384:	f248 0312 	movw	r3, #32786	; 0x8012
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <MX_GPIO_Init+0x19c>)
 800139e:	f001 ffd9 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013a2:	2302      	movs	r3, #2
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <MX_GPIO_Init+0x1a0>)
 80013ba:	f001 ffcb 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80013be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_GPIO_Init+0x1a0>)
 80013d8:	f001 ffbc 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 80013dc:	f244 0340 	movw	r3, #16448	; 0x4040
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_GPIO_Init+0x1a0>)
 80013f6:	f001 ffad 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013fa:	2338      	movs	r3, #56	; 0x38
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_GPIO_Init+0x1a0>)
 800140e:	f001 ffa1 	bl	8003354 <HAL_GPIO_Init>

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40020800 	.word	0x40020800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	10210000 	.word	0x10210000

08001430 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]



if(huart==&huart3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a3c      	ldr	r2, [pc, #240]	; (800152c <HAL_UART_RxCpltCallback+0xfc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d11d      	bne.n	800147c <HAL_UART_RxCpltCallback+0x4c>
{

if(package[0][0]!=0x68)
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_UART_RxCpltCallback+0x100>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b68      	cmp	r3, #104	; 0x68
 8001446:	d003      	beq.n	8001450 <HAL_UART_RxCpltCallback+0x20>
{
	readFlag=1;
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <HAL_UART_RxCpltCallback+0x104>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e015      	b.n	800147c <HAL_UART_RxCpltCallback+0x4c>
	//HAL_UART_Abort(&huart3);

}else
{
	for(uint8_t i=0;i<9;i++)
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e009      	b.n	800146a <HAL_UART_RxCpltCallback+0x3a>
	{
		packageCut[0][i]=package[0][i+4];
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	1d1a      	adds	r2, r3, #4
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	4934      	ldr	r1, [pc, #208]	; (8001530 <HAL_UART_RxCpltCallback+0x100>)
 800145e:	5c89      	ldrb	r1, [r1, r2]
 8001460:	4a35      	ldr	r2, [pc, #212]	; (8001538 <HAL_UART_RxCpltCallback+0x108>)
 8001462:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b08      	cmp	r3, #8
 800146e:	d9f2      	bls.n	8001456 <HAL_UART_RxCpltCallback+0x26>
	}
	UsartCount++;
 8001470:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 800147a:	701a      	strb	r2, [r3, #0]

}
}
if(huart==&huart1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a30      	ldr	r2, [pc, #192]	; (8001540 <HAL_UART_RxCpltCallback+0x110>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d120      	bne.n	80014c6 <HAL_UART_RxCpltCallback+0x96>
{

	if(package[2][0]!=0x68)
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_UART_RxCpltCallback+0x100>)
 8001486:	7f1b      	ldrb	r3, [r3, #28]
 8001488:	2b68      	cmp	r3, #104	; 0x68
 800148a:	d003      	beq.n	8001494 <HAL_UART_RxCpltCallback+0x64>
	{
		readFlag2=1;
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_UART_RxCpltCallback+0x114>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e018      	b.n	80014c6 <HAL_UART_RxCpltCallback+0x96>
		//HAL_UART_Abort(&huart3);

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001494:	2300      	movs	r3, #0
 8001496:	73bb      	strb	r3, [r7, #14]
 8001498:	e00c      	b.n	80014b4 <HAL_UART_RxCpltCallback+0x84>
		{
			packageCut[2][i]=package[2][i+4];
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	1d1a      	adds	r2, r3, #4
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	4923      	ldr	r1, [pc, #140]	; (8001530 <HAL_UART_RxCpltCallback+0x100>)
 80014a2:	440a      	add	r2, r1
 80014a4:	7f11      	ldrb	r1, [r2, #28]
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_UART_RxCpltCallback+0x108>)
 80014a8:	4413      	add	r3, r2
 80014aa:	460a      	mov	r2, r1
 80014ac:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	3301      	adds	r3, #1
 80014b2:	73bb      	strb	r3, [r7, #14]
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d9ef      	bls.n	800149a <HAL_UART_RxCpltCallback+0x6a>
		}
		UsartCount++;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 80014c4:	701a      	strb	r2, [r3, #0]
	}

}

if(huart==&huart5)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_UART_RxCpltCallback+0x118>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d120      	bne.n	8001510 <HAL_UART_RxCpltCallback+0xe0>
{

	if(package[1][0]!=0x68)
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_UART_RxCpltCallback+0x100>)
 80014d0:	7b9b      	ldrb	r3, [r3, #14]
 80014d2:	2b68      	cmp	r3, #104	; 0x68
 80014d4:	d003      	beq.n	80014de <HAL_UART_RxCpltCallback+0xae>
	{
		readFlag3=1;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_UART_RxCpltCallback+0x11c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e018      	b.n	8001510 <HAL_UART_RxCpltCallback+0xe0>
		//HAL_UART_Abort(&huart3);

	}else
	{
		for(uint8_t i=0;i<9;i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	737b      	strb	r3, [r7, #13]
 80014e2:	e00c      	b.n	80014fe <HAL_UART_RxCpltCallback+0xce>
		{
			packageCut[1][i]=package[1][i+4];
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	7b7b      	ldrb	r3, [r7, #13]
 80014ea:	4911      	ldr	r1, [pc, #68]	; (8001530 <HAL_UART_RxCpltCallback+0x100>)
 80014ec:	440a      	add	r2, r1
 80014ee:	7b91      	ldrb	r1, [r2, #14]
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_UART_RxCpltCallback+0x108>)
 80014f2:	4413      	add	r3, r2
 80014f4:	460a      	mov	r2, r1
 80014f6:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	3301      	adds	r3, #1
 80014fc:	737b      	strb	r3, [r7, #13]
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	2b08      	cmp	r3, #8
 8001502:	d9ef      	bls.n	80014e4 <HAL_UART_RxCpltCallback+0xb4>
		}
		UsartCount++;
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 800150e:	701a      	strb	r2, [r3, #0]

	}

}
if(UsartCount==3)
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d102      	bne.n	800151e <HAL_UART_RxCpltCallback+0xee>
{
	UsartCount=4;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_UART_RxCpltCallback+0x10c>)
 800151a:	2204      	movs	r2, #4
 800151c:	701a      	strb	r2, [r3, #0]

}

}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000198 	.word	0x20000198
 8001530:	200000a4 	.word	0x200000a4
 8001534:	200006dd 	.word	0x200006dd
 8001538:	200000d0 	.word	0x200000d0
 800153c:	200000eb 	.word	0x200000eb
 8001540:	2000060c 	.word	0x2000060c
 8001544:	200006a9 	.word	0x200006a9
 8001548:	2000050c 	.word	0x2000050c
 800154c:	20000134 	.word	0x20000134

08001550 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]


}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800157e:	1df9      	adds	r1, r7, #7
 8001580:	230a      	movs	r3, #10
 8001582:	2201      	movs	r2, #1
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <SPICmd8bit+0x20>)
 8001586:	f002 fe71 	bl	800426c <HAL_SPI_Transmit>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200006e4 	.word	0x200006e4

08001598 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	4613      	mov	r3, r2
 80015a6:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80015a8:	2200      	movs	r2, #0
 80015aa:	2140      	movs	r1, #64	; 0x40
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <SPIWrite+0x44>)
 80015ae:	f002 f87b 	bl	80036a8 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffda 	bl	8001574 <SPICmd8bit>
	SPICmd8bit(WrPara);
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ffd6 	bl	8001574 <SPICmd8bit>
	NSS_H();
 80015c8:	2201      	movs	r2, #1
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <SPIWrite+0x44>)
 80015ce:	f002 f86b 	bl	80036a8 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020400 	.word	0x40020400

080015e0 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d922      	bls.n	800163c <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 80015f6:	2200      	movs	r2, #0
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	4812      	ldr	r0, [pc, #72]	; (8001644 <BurstWrite+0x64>)
 80015fc:	f002 f854 	bl	80036a8 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ffb3 	bl	8001574 <SPICmd8bit>
    for(i=0;i<length;i++)
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e009      	b.n	8001628 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffa9 	bl	8001574 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	3301      	adds	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3f1      	bcc.n	8001614 <BurstWrite+0x34>
    NSS_H();
 8001630:	2201      	movs	r2, #1
 8001632:	2140      	movs	r1, #64	; 0x40
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <BurstWrite+0x64>)
 8001636:	f002 f837 	bl	80036a8 <HAL_GPIO_WritePin>
 800163a:	e000      	b.n	800163e <BurstWrite+0x5e>
    return;
 800163c:	bf00      	nop
  }
}
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020400 	.word	0x40020400

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_MspInit+0x4c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001686:	2007      	movs	r0, #7
 8001688:	f001 fa16 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a4a      	ldr	r2, [pc, #296]	; (80017e0 <HAL_SPI_MspInit+0x148>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d12c      	bne.n	8001714 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016f2:	23e0      	movs	r3, #224	; 0xe0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001702:	2305      	movs	r3, #5
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4836      	ldr	r0, [pc, #216]	; (80017e8 <HAL_SPI_MspInit+0x150>)
 800170e:	f001 fe21 	bl	8003354 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001712:	e060      	b.n	80017d6 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_SPI_MspInit+0x154>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d15b      	bne.n	80017d6 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a2f      	ldr	r2, [pc, #188]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 8001728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_SPI_MspInit+0x14c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001772:	2301      	movs	r3, #1
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	2301      	movs	r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001782:	2307      	movs	r3, #7
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	4818      	ldr	r0, [pc, #96]	; (80017f0 <HAL_SPI_MspInit+0x158>)
 800178e:	f001 fde1 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017a4:	2306      	movs	r3, #6
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4811      	ldr	r0, [pc, #68]	; (80017f4 <HAL_SPI_MspInit+0x15c>)
 80017b0:	f001 fdd0 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c6:	2306      	movs	r3, #6
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <HAL_SPI_MspInit+0x15c>)
 80017d2:	f001 fdbf 	bl	8003354 <HAL_GPIO_Init>
}
 80017d6:	bf00      	nop
 80017d8:	3730      	adds	r7, #48	; 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40013000 	.word	0x40013000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40003c00 	.word	0x40003c00
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b092      	sub	sp, #72	; 0x48
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a87      	ldr	r2, [pc, #540]	; (8001a34 <HAL_UART_MspInit+0x23c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	f040 8083 	bne.w	8001922 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
 8001820:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	4a84      	ldr	r2, [pc, #528]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
 800182c:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <HAL_UART_MspInit+0x240>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
 8001836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183c:	4b7e      	ldr	r3, [pc, #504]	; (8001a38 <HAL_UART_MspInit+0x240>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a7d      	ldr	r2, [pc, #500]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <HAL_UART_MspInit+0x240>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
 8001858:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <HAL_UART_MspInit+0x240>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a76      	ldr	r2, [pc, #472]	; (8001a38 <HAL_UART_MspInit+0x240>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b74      	ldr	r3, [pc, #464]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
 800186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187a:	2301      	movs	r3, #1
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001882:	2308      	movs	r3, #8
 8001884:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800188a:	4619      	mov	r1, r3
 800188c:	486b      	ldr	r0, [pc, #428]	; (8001a3c <HAL_UART_MspInit+0x244>)
 800188e:	f001 fd61 	bl	8003354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001892:	2304      	movs	r3, #4
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189a:	2301      	movs	r3, #1
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018a2:	2308      	movs	r3, #8
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018aa:	4619      	mov	r1, r3
 80018ac:	4864      	ldr	r0, [pc, #400]	; (8001a40 <HAL_UART_MspInit+0x248>)
 80018ae:	f001 fd51 	bl	8003354 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018b4:	4a64      	ldr	r2, [pc, #400]	; (8001a48 <HAL_UART_MspInit+0x250>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80018b8:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018be:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c0:	4b60      	ldr	r3, [pc, #384]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018cc:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d4:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80018e0:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e8:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ee:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80018f4:	4853      	ldr	r0, [pc, #332]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 80018f6:	f001 f921 	bl	8002b3c <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001900:	f7ff fe30 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_UART_MspInit+0x24c>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2035      	movs	r0, #53	; 0x35
 8001916:	f001 f8da 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800191a:	2035      	movs	r0, #53	; 0x35
 800191c:	f001 f8f3 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001920:	e18e      	b.n	8001c40 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_UART_MspInit+0x254>)
 8001928:	4293      	cmp	r3, r2
 800192a:	f040 8099 	bne.w	8001a60 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a40      	ldr	r2, [pc, #256]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_UART_MspInit+0x240>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_UART_MspInit+0x240>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_UART_MspInit+0x240>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001994:	2307      	movs	r3, #7
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800199c:	4619      	mov	r1, r3
 800199e:	482c      	ldr	r0, [pc, #176]	; (8001a50 <HAL_UART_MspInit+0x258>)
 80019a0:	f001 fcd8 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019b4:	2307      	movs	r3, #7
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019bc:	4619      	mov	r1, r3
 80019be:	4825      	ldr	r0, [pc, #148]	; (8001a54 <HAL_UART_MspInit+0x25c>)
 80019c0:	f001 fcc8 	bl	8003354 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019c6:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <HAL_UART_MspInit+0x264>)
 80019c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_UART_MspInit+0x260>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_UART_MspInit+0x260>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <HAL_UART_MspInit+0x260>)
 8001a08:	f001 f898 	bl	8002b3c <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001a12:	f7ff fda7 	bl	8001564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_UART_MspInit+0x260>)
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_UART_MspInit+0x260>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2025      	movs	r0, #37	; 0x25
 8001a28:	f001 f851 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a2c:	2025      	movs	r0, #37	; 0x25
 8001a2e:	f001 f86a 	bl	8002b06 <HAL_NVIC_EnableIRQ>
}
 8001a32:	e105      	b.n	8001c40 <HAL_UART_MspInit+0x448>
 8001a34:	40005000 	.word	0x40005000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	2000077c 	.word	0x2000077c
 8001a48:	40026010 	.word	0x40026010
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	2000054c 	.word	0x2000054c
 8001a5c:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a78      	ldr	r2, [pc, #480]	; (8001c48 <HAL_UART_MspInit+0x450>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d162      	bne.n	8001b30 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a76      	ldr	r2, [pc, #472]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a6f      	ldr	r2, [pc, #444]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	4864      	ldr	r0, [pc, #400]	; (8001c50 <HAL_UART_MspInit+0x458>)
 8001abe:	f001 fc49 	bl	8003354 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ac2:	4b64      	ldr	r3, [pc, #400]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001ac4:	4a64      	ldr	r2, [pc, #400]	; (8001c58 <HAL_UART_MspInit+0x460>)
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001aca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ace:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad0:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001ad2:	2240      	movs	r2, #64	; 0x40
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aea:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001af6:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afc:	4b55      	ldr	r3, [pc, #340]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b02:	4854      	ldr	r0, [pc, #336]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001b04:	f001 f81a 	bl	8002b3c <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8001b0e:	f7ff fd29 	bl	8001564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
 8001b18:	4a4e      	ldr	r2, [pc, #312]	; (8001c54 <HAL_UART_MspInit+0x45c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2026      	movs	r0, #38	; 0x26
 8001b24:	f000 ffd3 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b28:	2026      	movs	r0, #38	; 0x26
 8001b2a:	f000 ffec 	bl	8002b06 <HAL_NVIC_EnableIRQ>
}
 8001b2e:	e087      	b.n	8001c40 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_UART_MspInit+0x464>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	f040 8082 	bne.w	8001c40 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	4a41      	ldr	r2, [pc, #260]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6313      	str	r3, [r2, #48]	; 0x30
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_UART_MspInit+0x454>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b90:	2320      	movs	r3, #32
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba8:	4619      	mov	r1, r3
 8001baa:	482d      	ldr	r0, [pc, #180]	; (8001c60 <HAL_UART_MspInit+0x468>)
 8001bac:	f001 fbd2 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4825      	ldr	r0, [pc, #148]	; (8001c64 <HAL_UART_MspInit+0x46c>)
 8001bce:	f001 fbc1 	bl	8003354 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001bd4:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <HAL_UART_MspInit+0x474>)
 8001bd6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bde:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c06:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c14:	4814      	ldr	r0, [pc, #80]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001c16:	f000 ff91 	bl	8002b3c <HAL_DMA_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001c20:	f7ff fca0 	bl	8001564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_UART_MspInit+0x470>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2027      	movs	r0, #39	; 0x27
 8001c36:	f000 ff4a 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c3a:	2027      	movs	r0, #39	; 0x27
 8001c3c:	f000 ff63 	bl	8002b06 <HAL_NVIC_EnableIRQ>
}
 8001c40:	bf00      	nop
 8001c42:	3748      	adds	r7, #72	; 0x48
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	200005ac 	.word	0x200005ac
 8001c58:	400260a0 	.word	0x400260a0
 8001c5c:	40004800 	.word	0x40004800
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020400 	.word	0x40020400
 8001c68:	20000138 	.word	0x20000138
 8001c6c:	40026028 	.word	0x40026028

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc4:	f000 fde6 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DMA1_Stream0_IRQHandler+0x10>)
 8001cd2:	f001 f8cb 	bl	8002e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000077c 	.word	0x2000077c

08001ce0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ce6:	f001 f8c1 	bl	8002e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000138 	.word	0x20000138

08001cf4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA1_Stream6_IRQHandler+0x10>)
 8001cfa:	f001 f8b7 	bl	8002e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200005ac 	.word	0x200005ac

08001d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <USART1_IRQHandler+0x10>)
 8001d0e:	f002 ffc3 	bl	8004c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000060c 	.word	0x2000060c

08001d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <USART2_IRQHandler+0x10>)
 8001d22:	f002 ffb9 	bl	8004c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000073c 	.word	0x2000073c

08001d30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <USART3_IRQHandler+0x10>)
 8001d36:	f002 ffaf 	bl	8004c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000198 	.word	0x20000198

08001d44 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <UART5_IRQHandler+0x10>)
 8001d4a:	f002 ffa5 	bl	8004c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000050c 	.word	0x2000050c

08001d58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA2_Stream2_IRQHandler+0x10>)
 8001d5e:	f001 f885 	bl	8002e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000054c 	.word	0x2000054c

08001d6c <_sbrk>:
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x50>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x16>
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <_sbrk+0x50>)
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <_sbrk+0x54>)
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <_sbrk+0x50>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <_sbrk+0x50>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	466a      	mov	r2, sp
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d907      	bls.n	8001da6 <_sbrk+0x3a>
 8001d96:	f005 fff7 	bl	8007d88 <__errno>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da4:	e006      	b.n	8001db4 <_sbrk+0x48>
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <_sbrk+0x50>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <_sbrk+0x50>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200000ec 	.word	0x200000ec
 8001dc0:	20000f30 	.word	0x20000f30

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <SystemInit+0x28>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <SystemInit+0x28>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SystemInit+0x28>)
 8001dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dde:	609a      	str	r2, [r3, #8]
#endif
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8001df8:	f000 fd60 	bl	80028bc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SPI_Timer_On+0x20>)
 8001e00:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <SPI_Timer_On+0x24>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000ab4 	.word	0x20000ab4
 8001e14:	20000ab8 	.word	0x20000ab8

08001e18 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001e1c:	f000 fd4e 	bl	80028bc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <SPI_Timer_Status+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	1ad2      	subs	r2, r2, r3
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SPI_Timer_Status+0x28>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	bf34      	ite	cc
 8001e30:	2301      	movcc	r3, #1
 8001e32:	2300      	movcs	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000ab4 	.word	0x20000ab4
 8001e40:	20000ab8 	.word	0x20000ab8

08001e44 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8001e4e:	f107 020f 	add.w	r2, r7, #15
 8001e52:	1df9      	adds	r1, r7, #7
 8001e54:	2332      	movs	r3, #50	; 0x32
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	4804      	ldr	r0, [pc, #16]	; (8001e6c <xchg_spi+0x28>)
 8001e5c:	f002 fb3a 	bl	80044d4 <HAL_SPI_TransmitReceive>
    return rxDat;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200004b0 	.word	0x200004b0

08001e70 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e00a      	b.n	8001e96 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	18d4      	adds	r4, r2, r3
 8001e86:	20ff      	movs	r0, #255	; 0xff
 8001e88:	f7ff ffdc 	bl	8001e44 <xchg_spi>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3f0      	bcc.n	8001e80 <rcvr_spi_multi+0x10>
	}
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}

08001ea6 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e009      	b.n	8001eca <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ffc0 	bl	8001e44 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d3f1      	bcc.n	8001eb6 <xmit_spi_multi+0x10>
	}
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001ee2:	f000 fceb 	bl	80028bc <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8001eec:	20ff      	movs	r0, #255	; 0xff
 8001eee:	f7ff ffa9 	bl	8001e44 <xchg_spi>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2bff      	cmp	r3, #255	; 0xff
 8001efa:	d007      	beq.n	8001f0c <wait_ready+0x32>
 8001efc:	f000 fcde 	bl	80028bc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8ef      	bhi.n	8001eec <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8001f24:	2201      	movs	r2, #1
 8001f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2a:	4804      	ldr	r0, [pc, #16]	; (8001f3c <despiselect+0x1c>)
 8001f2c:	f001 fbbc 	bl	80036a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001f30:	20ff      	movs	r0, #255	; 0xff
 8001f32:	f7ff ff87 	bl	8001e44 <xchg_spi>

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020000 	.word	0x40020000

08001f40 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f4a:	480a      	ldr	r0, [pc, #40]	; (8001f74 <spiselect+0x34>)
 8001f4c:	f001 fbac 	bl	80036a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001f50:	20ff      	movs	r0, #255	; 0xff
 8001f52:	f7ff ff77 	bl	8001e44 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f5a:	f7ff ffbe 	bl	8001eda <wait_ready>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <spiselect+0x28>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e002      	b.n	8001f6e <spiselect+0x2e>

	despiselect();
 8001f68:	f7ff ffda 	bl	8001f20 <despiselect>
	return 0;	/* Timeout */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40020000 	.word	0x40020000

08001f78 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8001f82:	20c8      	movs	r0, #200	; 0xc8
 8001f84:	f7ff ff34 	bl	8001df0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8001f88:	20ff      	movs	r0, #255	; 0xff
 8001f8a:	f7ff ff5b 	bl	8001e44 <xchg_spi>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2bff      	cmp	r3, #255	; 0xff
 8001f96:	d104      	bne.n	8001fa2 <rcvr_datablock+0x2a>
 8001f98:	f7ff ff3e 	bl	8001e18 <SPI_Timer_Status>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2bfe      	cmp	r3, #254	; 0xfe
 8001fa6:	d001      	beq.n	8001fac <rcvr_datablock+0x34>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e00a      	b.n	8001fc2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8001fac:	6839      	ldr	r1, [r7, #0]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff5e 	bl	8001e70 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001fb4:	20ff      	movs	r0, #255	; 0xff
 8001fb6:	f7ff ff45 	bl	8001e44 <xchg_spi>
 8001fba:	20ff      	movs	r0, #255	; 0xff
 8001fbc:	f7ff ff42 	bl	8001e44 <xchg_spi>

	return 1;						/* Function succeeded */
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8001fd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fda:	f7ff ff7e 	bl	8001eda <wait_ready>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <xmit_datablock+0x1e>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e01e      	b.n	8002026 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff2a 	bl	8001e44 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	2bfd      	cmp	r3, #253	; 0xfd
 8001ff4:	d016      	beq.n	8002024 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8001ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff53 	bl	8001ea6 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002000:	20ff      	movs	r0, #255	; 0xff
 8002002:	f7ff ff1f 	bl	8001e44 <xchg_spi>
 8002006:	20ff      	movs	r0, #255	; 0xff
 8002008:	f7ff ff1c 	bl	8001e44 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800200c:	20ff      	movs	r0, #255	; 0xff
 800200e:	f7ff ff19 	bl	8001e44 <xchg_spi>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	2b05      	cmp	r3, #5
 800201e:	d001      	beq.n	8002024 <xmit_datablock+0x5a>
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <xmit_datablock+0x5c>
	}
	return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	6039      	str	r1, [r7, #0]
 8002038:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	da0e      	bge.n	8002060 <send_cmd+0x32>
		cmd &= 0x7F;
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002048:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800204a:	2100      	movs	r1, #0
 800204c:	2037      	movs	r0, #55	; 0x37
 800204e:	f7ff ffee 	bl	800202e <send_cmd>
 8002052:	4603      	mov	r3, r0
 8002054:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d901      	bls.n	8002060 <send_cmd+0x32>
 800205c:	7bbb      	ldrb	r3, [r7, #14]
 800205e:	e051      	b.n	8002104 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d008      	beq.n	8002078 <send_cmd+0x4a>
		despiselect();
 8002066:	f7ff ff5b 	bl	8001f20 <despiselect>
		if (!spiselect()) return 0xFF;
 800206a:	f7ff ff69 	bl	8001f40 <spiselect>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <send_cmd+0x4a>
 8002074:	23ff      	movs	r3, #255	; 0xff
 8002076:	e045      	b.n	8002104 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fedf 	bl	8001e44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	0e1b      	lsrs	r3, r3, #24
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fed9 	bl	8001e44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fed3 	bl	8001e44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fecd 	bl	8001e44 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fec8 	bl	8001e44 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <send_cmd+0x94>
 80020be:	2395      	movs	r3, #149	; 0x95
 80020c0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d101      	bne.n	80020cc <send_cmd+0x9e>
 80020c8:	2387      	movs	r3, #135	; 0x87
 80020ca:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff feb8 	bl	8001e44 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d102      	bne.n	80020e0 <send_cmd+0xb2>
 80020da:	20ff      	movs	r0, #255	; 0xff
 80020dc:	f7ff feb2 	bl	8001e44 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80020e0:	230a      	movs	r3, #10
 80020e2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80020e4:	20ff      	movs	r0, #255	; 0xff
 80020e6:	f7ff fead 	bl	8001e44 <xchg_spi>
 80020ea:	4603      	mov	r3, r0
 80020ec:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80020ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da05      	bge.n	8002102 <send_cmd+0xd4>
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002102:	7bbb      	ldrb	r3, [r7, #14]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <USER_SPI_initialize+0x14>
 800211c:	2301      	movs	r3, #1
 800211e:	e0cb      	b.n	80022b8 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002120:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <USER_SPI_initialize+0x1b4>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <USER_SPI_initialize+0x2a>
 800212e:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <USER_SPI_initialize+0x1b4>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e0c0      	b.n	80022b8 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <USER_SPI_initialize+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213e:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002140:	230a      	movs	r3, #10
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e005      	b.n	8002152 <USER_SPI_initialize+0x46>
 8002146:	20ff      	movs	r0, #255	; 0xff
 8002148:	f7ff fe7c 	bl	8001e44 <xchg_spi>
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	3b01      	subs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f6      	bne.n	8002146 <USER_SPI_initialize+0x3a>

	ty = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800215c:	2100      	movs	r1, #0
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff ff65 	bl	800202e <send_cmd>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	f040 808b 	bne.w	8002282 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800216c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002170:	f7ff fe3e 	bl	8001df0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002174:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002178:	2008      	movs	r0, #8
 800217a:	f7ff ff58 	bl	800202e <send_cmd>
 800217e:	4603      	mov	r3, r0
 8002180:	2b01      	cmp	r3, #1
 8002182:	d151      	bne.n	8002228 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e00d      	b.n	80021a6 <USER_SPI_initialize+0x9a>
 800218a:	7bfc      	ldrb	r4, [r7, #15]
 800218c:	20ff      	movs	r0, #255	; 0xff
 800218e:	f7ff fe59 	bl	8001e44 <xchg_spi>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	4423      	add	r3, r4
 800219c:	f803 2c08 	strb.w	r2, [r3, #-8]
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d9ee      	bls.n	800218a <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80021ac:	7abb      	ldrb	r3, [r7, #10]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d167      	bne.n	8002282 <USER_SPI_initialize+0x176>
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	2baa      	cmp	r3, #170	; 0xaa
 80021b6:	d164      	bne.n	8002282 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80021b8:	bf00      	nop
 80021ba:	f7ff fe2d 	bl	8001e18 <SPI_Timer_Status>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <USER_SPI_initialize+0xc8>
 80021c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80021c8:	20a9      	movs	r0, #169	; 0xa9
 80021ca:	f7ff ff30 	bl	800202e <send_cmd>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f2      	bne.n	80021ba <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80021d4:	f7ff fe20 	bl	8001e18 <SPI_Timer_Status>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d051      	beq.n	8002282 <USER_SPI_initialize+0x176>
 80021de:	2100      	movs	r1, #0
 80021e0:	203a      	movs	r0, #58	; 0x3a
 80021e2:	f7ff ff24 	bl	800202e <send_cmd>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d14a      	bne.n	8002282 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e00d      	b.n	800220e <USER_SPI_initialize+0x102>
 80021f2:	7bfc      	ldrb	r4, [r7, #15]
 80021f4:	20ff      	movs	r0, #255	; 0xff
 80021f6:	f7ff fe25 	bl	8001e44 <xchg_spi>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	4423      	add	r3, r4
 8002204:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d9ee      	bls.n	80021f2 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002214:	7a3b      	ldrb	r3, [r7, #8]
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <USER_SPI_initialize+0x116>
 800221e:	230c      	movs	r3, #12
 8002220:	e000      	b.n	8002224 <USER_SPI_initialize+0x118>
 8002222:	2304      	movs	r3, #4
 8002224:	737b      	strb	r3, [r7, #13]
 8002226:	e02c      	b.n	8002282 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002228:	2100      	movs	r1, #0
 800222a:	20a9      	movs	r0, #169	; 0xa9
 800222c:	f7ff feff 	bl	800202e <send_cmd>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d804      	bhi.n	8002240 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002236:	2302      	movs	r3, #2
 8002238:	737b      	strb	r3, [r7, #13]
 800223a:	23a9      	movs	r3, #169	; 0xa9
 800223c:	73bb      	strb	r3, [r7, #14]
 800223e:	e003      	b.n	8002248 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002240:	2301      	movs	r3, #1
 8002242:	737b      	strb	r3, [r7, #13]
 8002244:	2301      	movs	r3, #1
 8002246:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002248:	bf00      	nop
 800224a:	f7ff fde5 	bl	8001e18 <SPI_Timer_Status>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <USER_SPI_initialize+0x158>
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fee8 	bl	800202e <send_cmd>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f2      	bne.n	800224a <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002264:	f7ff fdd8 	bl	8001e18 <SPI_Timer_Status>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <USER_SPI_initialize+0x172>
 800226e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002272:	2010      	movs	r0, #16
 8002274:	f7ff fedb 	bl	800202e <send_cmd>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <USER_SPI_initialize+0x176>
				ty = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8002282:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <USER_SPI_initialize+0x1bc>)
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002288:	f7ff fe4a 	bl	8001f20 <despiselect>

	if (ty) {			/* OK */
 800228c:	7b7b      	ldrb	r3, [r7, #13]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <USER_SPI_initialize+0x1b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <USER_SPI_initialize+0x1b4>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <USER_SPI_initialize+0x1b4>)
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e002      	b.n	80022b2 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <USER_SPI_initialize+0x1b4>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <USER_SPI_initialize+0x1b4>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	20000004 	.word	0x20000004
 80022c4:	200004b0 	.word	0x200004b0
 80022c8:	200000f0 	.word	0x200000f0

080022cc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <USER_SPI_status+0x14>
 80022dc:	2301      	movs	r3, #1
 80022de:	e002      	b.n	80022e6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <USER_SPI_status+0x28>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000004 	.word	0x20000004

080022f8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <USER_SPI_read+0x1c>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <USER_SPI_read+0x20>
 8002314:	2304      	movs	r3, #4
 8002316:	e04d      	b.n	80023b4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <USER_SPI_read+0xc4>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <USER_SPI_read+0x32>
 8002326:	2303      	movs	r3, #3
 8002328:	e044      	b.n	80023b4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <USER_SPI_read+0xc8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <USER_SPI_read+0x44>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	025b      	lsls	r3, r3, #9
 800233a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d111      	bne.n	8002366 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	2011      	movs	r0, #17
 8002346:	f7ff fe72 	bl	800202e <send_cmd>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d129      	bne.n	80023a4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	68b8      	ldr	r0, [r7, #8]
 8002356:	f7ff fe0f 	bl	8001f78 <rcvr_datablock>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d021      	beq.n	80023a4 <USER_SPI_read+0xac>
			count = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	e01e      	b.n	80023a4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	2012      	movs	r0, #18
 800236a:	f7ff fe60 	bl	800202e <send_cmd>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d117      	bne.n	80023a4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002378:	68b8      	ldr	r0, [r7, #8]
 800237a:	f7ff fdfd 	bl	8001f78 <rcvr_datablock>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <USER_SPI_read+0xa2>
				buff += 512;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800238a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3b01      	subs	r3, #1
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ed      	bne.n	8002374 <USER_SPI_read+0x7c>
 8002398:	e000      	b.n	800239c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800239a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800239c:	2100      	movs	r1, #0
 800239e:	200c      	movs	r0, #12
 80023a0:	f7ff fe45 	bl	800202e <send_cmd>
		}
	}
	despiselect();
 80023a4:	f7ff fdbc 	bl	8001f20 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf14      	ite	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	2300      	moveq	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000004 	.word	0x20000004
 80023c0:	200000f0 	.word	0x200000f0

080023c4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <USER_SPI_write+0x1c>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <USER_SPI_write+0x20>
 80023e0:	2304      	movs	r3, #4
 80023e2:	e063      	b.n	80024ac <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <USER_SPI_write+0xf0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <USER_SPI_write+0x32>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e05a      	b.n	80024ac <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <USER_SPI_write+0xf0>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <USER_SPI_write+0x44>
 8002404:	2302      	movs	r3, #2
 8002406:	e051      	b.n	80024ac <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <USER_SPI_write+0xf4>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <USER_SPI_write+0x56>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	025b      	lsls	r3, r3, #9
 8002418:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d110      	bne.n	8002442 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	2018      	movs	r0, #24
 8002424:	f7ff fe03 	bl	800202e <send_cmd>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d136      	bne.n	800249c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800242e:	21fe      	movs	r1, #254	; 0xfe
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f7ff fdca 	bl	8001fca <xmit_datablock>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02f      	beq.n	800249c <USER_SPI_write+0xd8>
			count = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	e02c      	b.n	800249c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <USER_SPI_write+0xf4>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f003 0306 	and.w	r3, r3, #6
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <USER_SPI_write+0x92>
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	2097      	movs	r0, #151	; 0x97
 8002452:	f7ff fdec 	bl	800202e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	2019      	movs	r0, #25
 800245a:	f7ff fde8 	bl	800202e <send_cmd>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11b      	bne.n	800249c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002464:	21fc      	movs	r1, #252	; 0xfc
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f7ff fdaf 	bl	8001fca <xmit_datablock>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <USER_SPI_write+0xc4>
				buff += 512;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002478:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ee      	bne.n	8002464 <USER_SPI_write+0xa0>
 8002486:	e000      	b.n	800248a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002488:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800248a:	21fd      	movs	r1, #253	; 0xfd
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff fd9c 	bl	8001fca <xmit_datablock>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <USER_SPI_write+0xd8>
 8002498:	2301      	movs	r3, #1
 800249a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800249c:	f7ff fd40 	bl	8001f20 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000004 	.word	0x20000004
 80024b8:	200000f0 	.word	0x200000f0

080024bc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	603a      	str	r2, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
 80024c8:	460b      	mov	r3, r1
 80024ca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <USER_SPI_ioctl+0x1a>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e15a      	b.n	800278c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80024d6:	4baf      	ldr	r3, [pc, #700]	; (8002794 <USER_SPI_ioctl+0x2d8>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <USER_SPI_ioctl+0x2c>
 80024e4:	2303      	movs	r3, #3
 80024e6:	e151      	b.n	800278c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	f200 8136 	bhi.w	8002762 <USER_SPI_ioctl+0x2a6>
 80024f6:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <USER_SPI_ioctl+0x40>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	08002511 	.word	0x08002511
 8002500:	08002525 	.word	0x08002525
 8002504:	08002763 	.word	0x08002763
 8002508:	080025d1 	.word	0x080025d1
 800250c:	080026c7 	.word	0x080026c7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002510:	f7ff fd16 	bl	8001f40 <spiselect>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8127 	beq.w	800276a <USER_SPI_ioctl+0x2ae>
 800251c:	2300      	movs	r3, #0
 800251e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002522:	e122      	b.n	800276a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002524:	2100      	movs	r1, #0
 8002526:	2009      	movs	r0, #9
 8002528:	f7ff fd81 	bl	800202e <send_cmd>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 811d 	bne.w	800276e <USER_SPI_ioctl+0x2b2>
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2110      	movs	r1, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fd1c 	bl	8001f78 <rcvr_datablock>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8113 	beq.w	800276e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002548:	7b3b      	ldrb	r3, [r7, #12]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d111      	bne.n	8002576 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002552:	7d7b      	ldrb	r3, [r7, #21]
 8002554:	461a      	mov	r2, r3
 8002556:	7d3b      	ldrb	r3, [r7, #20]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	4413      	add	r3, r2
 800255c:	461a      	mov	r2, r3
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002566:	4413      	add	r3, r2
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	029a      	lsls	r2, r3, #10
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e028      	b.n	80025c8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002576:	7c7b      	ldrb	r3, [r7, #17]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	b2da      	uxtb	r2, r3
 800257e:	7dbb      	ldrb	r3, [r7, #22]
 8002580:	09db      	lsrs	r3, r3, #7
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4413      	add	r3, r2
 8002586:	b2da      	uxtb	r2, r3
 8002588:	7d7b      	ldrb	r3, [r7, #21]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0306 	and.w	r3, r3, #6
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4413      	add	r3, r2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3302      	adds	r3, #2
 800259a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800259e:	7d3b      	ldrb	r3, [r7, #20]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	441a      	add	r2, r3
 80025ac:	7cbb      	ldrb	r3, [r7, #18]
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025b4:	4413      	add	r3, r2
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80025ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025be:	3b09      	subs	r3, #9
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	409a      	lsls	r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80025ce:	e0ce      	b.n	800276e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80025d0:	4b71      	ldr	r3, [pc, #452]	; (8002798 <USER_SPI_ioctl+0x2dc>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d031      	beq.n	8002640 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80025dc:	2100      	movs	r1, #0
 80025de:	208d      	movs	r0, #141	; 0x8d
 80025e0:	f7ff fd25 	bl	800202e <send_cmd>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80c3 	bne.w	8002772 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80025ec:	20ff      	movs	r0, #255	; 0xff
 80025ee:	f7ff fc29 	bl	8001e44 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	2110      	movs	r1, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fcbd 	bl	8001f78 <rcvr_datablock>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80b6 	beq.w	8002772 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002606:	2330      	movs	r3, #48	; 0x30
 8002608:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800260c:	e007      	b.n	800261e <USER_SPI_ioctl+0x162>
 800260e:	20ff      	movs	r0, #255	; 0xff
 8002610:	f7ff fc18 	bl	8001e44 <xchg_spi>
 8002614:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002618:	3b01      	subs	r3, #1
 800261a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800261e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f3      	bne.n	800260e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002626:	7dbb      	ldrb	r3, [r7, #22]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	2310      	movs	r3, #16
 8002630:	fa03 f202 	lsl.w	r2, r3, r2
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800263e:	e098      	b.n	8002772 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002640:	2100      	movs	r1, #0
 8002642:	2009      	movs	r0, #9
 8002644:	f7ff fcf3 	bl	800202e <send_cmd>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 8091 	bne.w	8002772 <USER_SPI_ioctl+0x2b6>
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2110      	movs	r1, #16
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fc8e 	bl	8001f78 <rcvr_datablock>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002664:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <USER_SPI_ioctl+0x2dc>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d012      	beq.n	8002696 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002670:	7dbb      	ldrb	r3, [r7, #22]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002678:	7dfa      	ldrb	r2, [r7, #23]
 800267a:	09d2      	lsrs	r2, r2, #7
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	4413      	add	r3, r2
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	7e7b      	ldrb	r3, [r7, #25]
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	461a      	mov	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e013      	b.n	80026be <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002696:	7dbb      	ldrb	r3, [r7, #22]
 8002698:	109b      	asrs	r3, r3, #2
 800269a:	b29b      	uxth	r3, r3
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	3301      	adds	r3, #1
 80026a2:	7dfa      	ldrb	r2, [r7, #23]
 80026a4:	00d2      	lsls	r2, r2, #3
 80026a6:	f002 0218 	and.w	r2, r2, #24
 80026aa:	7df9      	ldrb	r1, [r7, #23]
 80026ac:	0949      	lsrs	r1, r1, #5
 80026ae:	b2c9      	uxtb	r1, r1
 80026b0:	440a      	add	r2, r1
 80026b2:	3201      	adds	r2, #1
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80026c4:	e055      	b.n	8002772 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80026c6:	4b34      	ldr	r3, [pc, #208]	; (8002798 <USER_SPI_ioctl+0x2dc>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f003 0306 	and.w	r3, r3, #6
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d051      	beq.n	8002776 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80026d2:	f107 020c 	add.w	r2, r7, #12
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	210b      	movs	r1, #11
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff feee 	bl	80024bc <USER_SPI_ioctl>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d149      	bne.n	800277a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80026e6:	7b3b      	ldrb	r3, [r7, #12]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <USER_SPI_ioctl+0x23e>
 80026f0:	7dbb      	ldrb	r3, [r7, #22]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d041      	beq.n	800277e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800270a:	4b23      	ldr	r3, [pc, #140]	; (8002798 <USER_SPI_ioctl+0x2dc>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	025b      	lsls	r3, r3, #9
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002724:	2020      	movs	r0, #32
 8002726:	f7ff fc82 	bl	800202e <send_cmd>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d128      	bne.n	8002782 <USER_SPI_ioctl+0x2c6>
 8002730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002732:	2021      	movs	r0, #33	; 0x21
 8002734:	f7ff fc7b 	bl	800202e <send_cmd>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d121      	bne.n	8002782 <USER_SPI_ioctl+0x2c6>
 800273e:	2100      	movs	r1, #0
 8002740:	2026      	movs	r0, #38	; 0x26
 8002742:	f7ff fc74 	bl	800202e <send_cmd>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11a      	bne.n	8002782 <USER_SPI_ioctl+0x2c6>
 800274c:	f247 5030 	movw	r0, #30000	; 0x7530
 8002750:	f7ff fbc3 	bl	8001eda <wait_ready>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d013      	beq.n	8002782 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800275a:	2300      	movs	r3, #0
 800275c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002760:	e00f      	b.n	8002782 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002762:	2304      	movs	r3, #4
 8002764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002768:	e00c      	b.n	8002784 <USER_SPI_ioctl+0x2c8>
		break;
 800276a:	bf00      	nop
 800276c:	e00a      	b.n	8002784 <USER_SPI_ioctl+0x2c8>
		break;
 800276e:	bf00      	nop
 8002770:	e008      	b.n	8002784 <USER_SPI_ioctl+0x2c8>
		break;
 8002772:	bf00      	nop
 8002774:	e006      	b.n	8002784 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002776:	bf00      	nop
 8002778:	e004      	b.n	8002784 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800277a:	bf00      	nop
 800277c:	e002      	b.n	8002784 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800277e:	bf00      	nop
 8002780:	e000      	b.n	8002784 <USER_SPI_ioctl+0x2c8>
		break;
 8002782:	bf00      	nop
	}

	despiselect();
 8002784:	f7ff fbcc 	bl	8001f20 <despiselect>

	return res;
 8002788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800278c:	4618      	mov	r0, r3
 800278e:	3730      	adds	r7, #48	; 0x30
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000004 	.word	0x20000004
 8002798:	200000f0 	.word	0x200000f0

0800279c <Reset_Handler>:
 800279c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d4 <LoopFillZerobss+0x14>
 80027a0:	2100      	movs	r1, #0
 80027a2:	e003      	b.n	80027ac <LoopCopyDataInit>

080027a4 <CopyDataInit>:
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <LoopFillZerobss+0x18>)
 80027a6:	585b      	ldr	r3, [r3, r1]
 80027a8:	5043      	str	r3, [r0, r1]
 80027aa:	3104      	adds	r1, #4

080027ac <LoopCopyDataInit>:
 80027ac:	480b      	ldr	r0, [pc, #44]	; (80027dc <LoopFillZerobss+0x1c>)
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <LoopFillZerobss+0x20>)
 80027b0:	1842      	adds	r2, r0, r1
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d3f6      	bcc.n	80027a4 <CopyDataInit>
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <LoopFillZerobss+0x24>)
 80027b8:	e002      	b.n	80027c0 <LoopFillZerobss>

080027ba <FillZerobss>:
 80027ba:	2300      	movs	r3, #0
 80027bc:	f842 3b04 	str.w	r3, [r2], #4

080027c0 <LoopFillZerobss>:
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <LoopFillZerobss+0x28>)
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d3f9      	bcc.n	80027ba <FillZerobss>
 80027c6:	f7ff fafd 	bl	8001dc4 <SystemInit>
 80027ca:	f005 fae3 	bl	8007d94 <__libc_init_array>
 80027ce:	f7fe fa35 	bl	8000c3c <main>
 80027d2:	4770      	bx	lr
 80027d4:	20020000 	.word	0x20020000
 80027d8:	08008778 	.word	0x08008778
 80027dc:	20000000 	.word	0x20000000
 80027e0:	20000088 	.word	0x20000088
 80027e4:	20000088 	.word	0x20000088
 80027e8:	20000f2c 	.word	0x20000f2c

080027ec <ADC_IRQHandler>:
 80027ec:	e7fe      	b.n	80027ec <ADC_IRQHandler>
	...

080027f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <HAL_Init+0x40>)
 80027fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_Init+0x40>)
 8002806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_Init+0x40>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 f94d 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	2000      	movs	r0, #0
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7fe ff10 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f965 	bl	8002b22 <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002870:	f000 f92d 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000000 	.word	0x20000000
 800288c:	2000000c 	.word	0x2000000c
 8002890:	20000008 	.word	0x20000008

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000000c 	.word	0x2000000c
 80028b8:	20000abc 	.word	0x20000abc

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000abc 	.word	0x20000abc

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_Delay+0x40>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	2000000c 	.word	0x2000000c

08002918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294a:	4a04      	ldr	r2, [pc, #16]	; (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60d3      	str	r3, [r2, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <__NVIC_EnableIRQ+0x38>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	; (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
         );
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a98:	f7ff ff8e 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff29 	bl	8002918 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff3e 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff8e 	bl	8002a0c <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5d 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff31 	bl	800297c <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa2 	bl	8002a74 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff feb8 	bl	80028bc <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e099      	b.n	8002c8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b78:	e00f      	b.n	8002b9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b7a:	f7ff fe9f 	bl	80028bc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d908      	bls.n	8002b9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e078      	b.n	8002c8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e8      	bne.n	8002b7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_DMA_Init+0x158>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0307 	bic.w	r3, r3, #7
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d117      	bne.n	8002c5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fb0d 	bl	8003260 <DMA_CheckFifoParam>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e016      	b.n	8002c8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fac4 	bl	80031f4 <DMA_CalcBaseAndBitshift>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	f010803f 	.word	0xf010803f

08002c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_DMA_Start_IT+0x26>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e040      	b.n	8002d40 <HAL_DMA_Start_IT+0xa8>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d12f      	bne.n	8002d32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fa56 	bl	8003198 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	223f      	movs	r2, #63	; 0x3f
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0216 	orr.w	r2, r2, #22
 8002d06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0208 	orr.w	r2, r2, #8
 8002d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e005      	b.n	8002d3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d56:	f7ff fdb1 	bl	80028bc <HAL_GetTick>
 8002d5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d008      	beq.n	8002d7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e052      	b.n	8002e20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0216 	bic.w	r2, r2, #22
 8002d88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <HAL_DMA_Abort+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0208 	bic.w	r2, r2, #8
 8002db8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dca:	e013      	b.n	8002df4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dcc:	f7ff fd76 	bl	80028bc <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d90c      	bls.n	8002df4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2203      	movs	r2, #3
 8002dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e015      	b.n	8002e20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e4      	bne.n	8002dcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	223f      	movs	r2, #63	; 0x3f
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d004      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00c      	b.n	8002e60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2205      	movs	r2, #5
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e78:	4b92      	ldr	r3, [pc, #584]	; (80030c4 <HAL_DMA_IRQHandler+0x258>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a92      	ldr	r2, [pc, #584]	; (80030c8 <HAL_DMA_IRQHandler+0x25c>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0a9b      	lsrs	r3, r3, #10
 8002e84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	2208      	movs	r2, #8
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01a      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0204 	bic.w	r2, r2, #4
 8002ebe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2201      	movs	r2, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	2201      	movs	r2, #1
 8002efc:	409a      	lsls	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2204      	movs	r2, #4
 8002f14:	409a      	lsls	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	2204      	movs	r2, #4
 8002f32:	409a      	lsls	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f043 0204 	orr.w	r2, r3, #4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	2210      	movs	r2, #16
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d043      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d03c      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	2210      	movs	r2, #16
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d018      	beq.n	8002fae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d024      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
 8002f9a:	e01f      	b.n	8002fdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01b      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e016      	b.n	8002fdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0208 	bic.w	r2, r2, #8
 8002fca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 808e 	beq.w	800310a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8086 	beq.w	800310a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	2220      	movs	r2, #32
 8003004:	409a      	lsls	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b05      	cmp	r3, #5
 8003014:	d136      	bne.n	8003084 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0216 	bic.w	r2, r2, #22
 8003024:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003034:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <HAL_DMA_IRQHandler+0x1da>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0208 	bic.w	r2, r2, #8
 8003054:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	223f      	movs	r2, #63	; 0x3f
 800305c:	409a      	lsls	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003076:	2b00      	cmp	r3, #0
 8003078:	d07d      	beq.n	8003176 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
        }
        return;
 8003082:	e078      	b.n	8003176 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01c      	beq.n	80030cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d030      	beq.n	800310a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
 80030b0:	e02b      	b.n	800310a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d027      	beq.n	800310a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
 80030c2:	e022      	b.n	800310a <HAL_DMA_IRQHandler+0x29e>
 80030c4:	20000000 	.word	0x20000000
 80030c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0210 	bic.w	r2, r2, #16
 80030e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	2b00      	cmp	r3, #0
 8003110:	d032      	beq.n	8003178 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d022      	beq.n	8003164 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2205      	movs	r2, #5
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	429a      	cmp	r2, r3
 8003140:	d307      	bcc.n	8003152 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f2      	bne.n	8003136 <HAL_DMA_IRQHandler+0x2ca>
 8003150:	e000      	b.n	8003154 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003152:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
 8003174:	e000      	b.n	8003178 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003176:	bf00      	nop
    }
  }
}
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop

08003180 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d108      	bne.n	80031d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031d6:	e007      	b.n	80031e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3b10      	subs	r3, #16
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <DMA_CalcBaseAndBitshift+0x64>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <DMA_CalcBaseAndBitshift+0x68>)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d909      	bls.n	8003236 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	659a      	str	r2, [r3, #88]	; 0x58
 8003234:	e007      	b.n	8003246 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	aaaaaaab 	.word	0xaaaaaaab
 800325c:	080086ac 	.word	0x080086ac

08003260 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11f      	bne.n	80032ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d855      	bhi.n	800332c <DMA_CheckFifoParam+0xcc>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <DMA_CheckFifoParam+0x28>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	08003299 	.word	0x08003299
 800328c:	080032ab 	.word	0x080032ab
 8003290:	08003299 	.word	0x08003299
 8003294:	0800332d 	.word	0x0800332d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d045      	beq.n	8003330 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a8:	e042      	b.n	8003330 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032b2:	d13f      	bne.n	8003334 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b8:	e03c      	b.n	8003334 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	d121      	bne.n	8003308 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d836      	bhi.n	8003338 <DMA_CheckFifoParam+0xd8>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <DMA_CheckFifoParam+0x70>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032e7 	.word	0x080032e7
 80032d8:	080032e1 	.word	0x080032e1
 80032dc:	080032f9 	.word	0x080032f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e02f      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d024      	beq.n	800333c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e021      	b.n	800333c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003300:	d11e      	bne.n	8003340 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003306:	e01b      	b.n	8003340 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d902      	bls.n	8003314 <DMA_CheckFifoParam+0xb4>
 800330e:	2b03      	cmp	r3, #3
 8003310:	d003      	beq.n	800331a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003312:	e018      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e015      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00e      	beq.n	8003344 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      break;
 800332a:	e00b      	b.n	8003344 <DMA_CheckFifoParam+0xe4>
      break;
 800332c:	bf00      	nop
 800332e:	e00a      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      break;
 8003330:	bf00      	nop
 8003332:	e008      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      break;
 8003334:	bf00      	nop
 8003336:	e006      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      break;
 8003338:	bf00      	nop
 800333a:	e004      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      break;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      break;   
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      break;
 8003344:	bf00      	nop
    }
  } 
  
  return status; 
 8003346:	7bfb      	ldrb	r3, [r7, #15]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	e165      	b.n	800363c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	f040 8154 	bne.w	8003636 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d00b      	beq.n	80033ae <HAL_GPIO_Init+0x5a>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033a2:	2b11      	cmp	r3, #17
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b12      	cmp	r3, #18
 80033ac:	d130      	bne.n	8003410 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0201 	and.w	r2, r3, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0xfc>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b12      	cmp	r3, #18
 800344e:	d123      	bne.n	8003498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	08da      	lsrs	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3208      	adds	r2, #8
 8003458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0203 	and.w	r2, r3, #3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80ae 	beq.w	8003636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4b5c      	ldr	r3, [pc, #368]	; (8003650 <HAL_GPIO_Init+0x2fc>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a5b      	ldr	r2, [pc, #364]	; (8003650 <HAL_GPIO_Init+0x2fc>)
 80034e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_GPIO_Init+0x2fc>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034f6:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_GPIO_Init+0x300>)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	3302      	adds	r3, #2
 80034fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4e      	ldr	r2, [pc, #312]	; (8003658 <HAL_GPIO_Init+0x304>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d025      	beq.n	800356e <HAL_GPIO_Init+0x21a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4d      	ldr	r2, [pc, #308]	; (800365c <HAL_GPIO_Init+0x308>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <HAL_GPIO_Init+0x216>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4c      	ldr	r2, [pc, #304]	; (8003660 <HAL_GPIO_Init+0x30c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d019      	beq.n	8003566 <HAL_GPIO_Init+0x212>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4b      	ldr	r2, [pc, #300]	; (8003664 <HAL_GPIO_Init+0x310>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_Init+0x20e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_GPIO_Init+0x314>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00d      	beq.n	800355e <HAL_GPIO_Init+0x20a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a49      	ldr	r2, [pc, #292]	; (800366c <HAL_GPIO_Init+0x318>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0x206>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a48      	ldr	r2, [pc, #288]	; (8003670 <HAL_GPIO_Init+0x31c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_GPIO_Init+0x202>
 8003552:	2306      	movs	r3, #6
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 8003556:	2307      	movs	r3, #7
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003580:	4934      	ldr	r1, [pc, #208]	; (8003654 <HAL_GPIO_Init+0x300>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_GPIO_Init+0x320>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b2:	4a30      	ldr	r2, [pc, #192]	; (8003674 <HAL_GPIO_Init+0x320>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_GPIO_Init+0x320>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035dc:	4a25      	ldr	r2, [pc, #148]	; (8003674 <HAL_GPIO_Init+0x320>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_GPIO_Init+0x320>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_GPIO_Init+0x320>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_GPIO_Init+0x320>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003630:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_GPIO_Init+0x320>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae96 	bls.w	8003370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	3724      	adds	r7, #36	; 0x24
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020800 	.word	0x40020800
 8003664:	40020c00 	.word	0x40020c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40021400 	.word	0x40021400
 8003670:	40021800 	.word	0x40021800
 8003674:	40013c00 	.word	0x40013c00

08003678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	887b      	ldrh	r3, [r7, #2]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e001      	b.n	800369a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b8:	787b      	ldrb	r3, [r7, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c4:	e003      	b.n	80036ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_PWREx_EnableOverDrive+0x90>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_PWREx_EnableOverDrive+0x90>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_PWREx_EnableOverDrive+0x90>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_PWREx_EnableOverDrive+0x94>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003708:	f7ff f8d8 	bl	80028bc <HAL_GetTick>
 800370c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800370e:	e009      	b.n	8003724 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003710:	f7ff f8d4 	bl	80028bc <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800371e:	d901      	bls.n	8003724 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e01f      	b.n	8003764 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d1ee      	bne.n	8003710 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003738:	f7ff f8c0 	bl	80028bc <HAL_GetTick>
 800373c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800373e:	e009      	b.n	8003754 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003740:	f7ff f8bc 	bl	80028bc <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800374e:	d901      	bls.n	8003754 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e007      	b.n	8003764 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003760:	d1ee      	bne.n	8003740 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	420e0040 	.word	0x420e0040
 8003774:	40007000 	.word	0x40007000
 8003778:	420e0044 	.word	0x420e0044

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7ff f826 	bl	80028bc <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7ff f822 	bl	80028bc <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f855 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003906:	4601      	mov	r1, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5cd3      	ldrb	r3, [r2, r3]
 8003916:	fa21 f303 	lsr.w	r3, r1, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe ff86 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	08008694 	.word	0x08008694
 8003940:	20000000 	.word	0x20000000
 8003944:	20000008 	.word	0x20000008

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000000 	.word	0x20000000

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff0 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003968:	4601      	mov	r1, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	080086a4 	.word	0x080086a4

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffdc 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003990:	4601      	mov	r1, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0b5b      	lsrs	r3, r3, #13
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4a03      	ldr	r2, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	080086a4 	.word	0x080086a4

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ca:	4bc6      	ldr	r3, [pc, #792]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	f200 817e 	bhi.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x324>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003cd5 	.word	0x08003cd5
 80039e8:	08003cd5 	.word	0x08003cd5
 80039ec:	08003cd5 	.word	0x08003cd5
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003cd5 	.word	0x08003cd5
 80039f8:	08003cd5 	.word	0x08003cd5
 80039fc:	08003cd5 	.word	0x08003cd5
 8003a00:	08003a21 	.word	0x08003a21
 8003a04:	08003cd5 	.word	0x08003cd5
 8003a08:	08003cd5 	.word	0x08003cd5
 8003a0c:	08003cd5 	.word	0x08003cd5
 8003a10:	08003b7d 	.word	0x08003b7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4bb4      	ldr	r3, [pc, #720]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x338>)
 8003a16:	613b      	str	r3, [r7, #16]
       break;
 8003a18:	e15f      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1a:	4bb4      	ldr	r3, [pc, #720]	; (8003cec <HAL_RCC_GetSysClockFreq+0x33c>)
 8003a1c:	613b      	str	r3, [r7, #16]
      break;
 8003a1e:	e15c      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4bb0      	ldr	r3, [pc, #704]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2a:	4bae      	ldr	r3, [pc, #696]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04a      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4bab      	ldr	r3, [pc, #684]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	f04f 0400 	mov.w	r4, #0
 8003a40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	ea03 0501 	and.w	r5, r3, r1
 8003a4c:	ea04 0602 	and.w	r6, r4, r2
 8003a50:	4629      	mov	r1, r5
 8003a52:	4632      	mov	r2, r6
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	f04f 0400 	mov.w	r4, #0
 8003a5c:	0154      	lsls	r4, r2, #5
 8003a5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a62:	014b      	lsls	r3, r1, #5
 8003a64:	4619      	mov	r1, r3
 8003a66:	4622      	mov	r2, r4
 8003a68:	1b49      	subs	r1, r1, r5
 8003a6a:	eb62 0206 	sbc.w	r2, r2, r6
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	f04f 0400 	mov.w	r4, #0
 8003a76:	0194      	lsls	r4, r2, #6
 8003a78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a7c:	018b      	lsls	r3, r1, #6
 8003a7e:	1a5b      	subs	r3, r3, r1
 8003a80:	eb64 0402 	sbc.w	r4, r4, r2
 8003a84:	f04f 0100 	mov.w	r1, #0
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	00e2      	lsls	r2, r4, #3
 8003a8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a92:	00d9      	lsls	r1, r3, #3
 8003a94:	460b      	mov	r3, r1
 8003a96:	4614      	mov	r4, r2
 8003a98:	195b      	adds	r3, r3, r5
 8003a9a:	eb44 0406 	adc.w	r4, r4, r6
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	0262      	lsls	r2, r4, #9
 8003aa8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003aac:	0259      	lsls	r1, r3, #9
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	f7fc fbf6 	bl	80002b0 <__aeabi_uldivmod>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e049      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003acc:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	f04f 0400 	mov.w	r4, #0
 8003ad6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	ea03 0501 	and.w	r5, r3, r1
 8003ae2:	ea04 0602 	and.w	r6, r4, r2
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	4632      	mov	r2, r6
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f04f 0400 	mov.w	r4, #0
 8003af2:	0154      	lsls	r4, r2, #5
 8003af4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003af8:	014b      	lsls	r3, r1, #5
 8003afa:	4619      	mov	r1, r3
 8003afc:	4622      	mov	r2, r4
 8003afe:	1b49      	subs	r1, r1, r5
 8003b00:	eb62 0206 	sbc.w	r2, r2, r6
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	f04f 0400 	mov.w	r4, #0
 8003b0c:	0194      	lsls	r4, r2, #6
 8003b0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b12:	018b      	lsls	r3, r1, #6
 8003b14:	1a5b      	subs	r3, r3, r1
 8003b16:	eb64 0402 	sbc.w	r4, r4, r2
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	00e2      	lsls	r2, r4, #3
 8003b24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b28:	00d9      	lsls	r1, r3, #3
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	195b      	adds	r3, r3, r5
 8003b30:	eb44 0406 	adc.w	r4, r4, r6
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	02a2      	lsls	r2, r4, #10
 8003b3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b42:	0299      	lsls	r1, r3, #10
 8003b44:	460b      	mov	r3, r1
 8003b46:	4614      	mov	r4, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f04f 0400 	mov.w	r4, #0
 8003b52:	461a      	mov	r2, r3
 8003b54:	4623      	mov	r3, r4
 8003b56:	f7fc fbab 	bl	80002b0 <__aeabi_uldivmod>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b60:	4b60      	ldr	r3, [pc, #384]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	613b      	str	r3, [r7, #16]
      break;
 8003b7a:	e0ae      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b84:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b86:	4b57      	ldr	r3, [pc, #348]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04a      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b92:	4b54      	ldr	r3, [pc, #336]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	f04f 0400 	mov.w	r4, #0
 8003b9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	ea03 0501 	and.w	r5, r3, r1
 8003ba8:	ea04 0602 	and.w	r6, r4, r2
 8003bac:	4629      	mov	r1, r5
 8003bae:	4632      	mov	r2, r6
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	f04f 0400 	mov.w	r4, #0
 8003bb8:	0154      	lsls	r4, r2, #5
 8003bba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bbe:	014b      	lsls	r3, r1, #5
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	1b49      	subs	r1, r1, r5
 8003bc6:	eb62 0206 	sbc.w	r2, r2, r6
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	f04f 0400 	mov.w	r4, #0
 8003bd2:	0194      	lsls	r4, r2, #6
 8003bd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bd8:	018b      	lsls	r3, r1, #6
 8003bda:	1a5b      	subs	r3, r3, r1
 8003bdc:	eb64 0402 	sbc.w	r4, r4, r2
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	00e2      	lsls	r2, r4, #3
 8003bea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bee:	00d9      	lsls	r1, r3, #3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4614      	mov	r4, r2
 8003bf4:	195b      	adds	r3, r3, r5
 8003bf6:	eb44 0406 	adc.w	r4, r4, r6
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	0262      	lsls	r2, r4, #9
 8003c04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c08:	0259      	lsls	r1, r3, #9
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4621      	mov	r1, r4
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f04f 0400 	mov.w	r4, #0
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	f7fc fb48 	bl	80002b0 <__aeabi_uldivmod>
 8003c20:	4603      	mov	r3, r0
 8003c22:	460c      	mov	r4, r1
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e049      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	099b      	lsrs	r3, r3, #6
 8003c2e:	f04f 0400 	mov.w	r4, #0
 8003c32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	ea03 0501 	and.w	r5, r3, r1
 8003c3e:	ea04 0602 	and.w	r6, r4, r2
 8003c42:	4629      	mov	r1, r5
 8003c44:	4632      	mov	r2, r6
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	f04f 0400 	mov.w	r4, #0
 8003c4e:	0154      	lsls	r4, r2, #5
 8003c50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c54:	014b      	lsls	r3, r1, #5
 8003c56:	4619      	mov	r1, r3
 8003c58:	4622      	mov	r2, r4
 8003c5a:	1b49      	subs	r1, r1, r5
 8003c5c:	eb62 0206 	sbc.w	r2, r2, r6
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f04f 0400 	mov.w	r4, #0
 8003c68:	0194      	lsls	r4, r2, #6
 8003c6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c6e:	018b      	lsls	r3, r1, #6
 8003c70:	1a5b      	subs	r3, r3, r1
 8003c72:	eb64 0402 	sbc.w	r4, r4, r2
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	00e2      	lsls	r2, r4, #3
 8003c80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c84:	00d9      	lsls	r1, r3, #3
 8003c86:	460b      	mov	r3, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	195b      	adds	r3, r3, r5
 8003c8c:	eb44 0406 	adc.w	r4, r4, r6
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	02a2      	lsls	r2, r4, #10
 8003c9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c9e:	0299      	lsls	r1, r3, #10
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4614      	mov	r4, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f04f 0400 	mov.w	r4, #0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	f7fc fafd 	bl	80002b0 <__aeabi_uldivmod>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0f1b      	lsrs	r3, r3, #28
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	613b      	str	r3, [r7, #16]
      break;
 8003cd2:	e002      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x338>)
 8003cd6:	613b      	str	r3, [r7, #16]
      break;
 8003cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cda:	693b      	ldr	r3, [r7, #16]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	00f42400 	.word	0x00f42400
 8003cec:	007a1200 	.word	0x007a1200

08003cf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8083 	beq.w	8003e10 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d0a:	4b95      	ldr	r3, [pc, #596]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d019      	beq.n	8003d4a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d16:	4b92      	ldr	r3, [pc, #584]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d106      	bne.n	8003d30 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d22:	4b8f      	ldr	r3, [pc, #572]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2e:	d00c      	beq.n	8003d4a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d30:	4b8b      	ldr	r3, [pc, #556]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d112      	bne.n	8003d62 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3c:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d48:	d10b      	bne.n	8003d62 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4a:	4b85      	ldr	r3, [pc, #532]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d05b      	beq.n	8003e0e <HAL_RCC_OscConfig+0x11e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d157      	bne.n	8003e0e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e216      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x8a>
 8003d6c:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a7b      	ldr	r2, [pc, #492]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	e01d      	b.n	8003db6 <HAL_RCC_OscConfig+0xc6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0xae>
 8003d84:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a75      	ldr	r2, [pc, #468]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b73      	ldr	r3, [pc, #460]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a72      	ldr	r2, [pc, #456]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e00b      	b.n	8003db6 <HAL_RCC_OscConfig+0xc6>
 8003d9e:	4b70      	ldr	r3, [pc, #448]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6f      	ldr	r2, [pc, #444]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6c      	ldr	r2, [pc, #432]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d013      	beq.n	8003de6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fe fd7d 	bl	80028bc <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc6:	f7fe fd79 	bl	80028bc <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	; 0x64
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1db      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd8:	4b61      	ldr	r3, [pc, #388]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0xd6>
 8003de4:	e014      	b.n	8003e10 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fe fd69 	bl	80028bc <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dee:	f7fe fd65 	bl	80028bc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	; 0x64
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e1c7      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e00:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0xfe>
 8003e0c:	e000      	b.n	8003e10 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d06f      	beq.n	8003efc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e1c:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d017      	beq.n	8003e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e28:	4b4d      	ldr	r3, [pc, #308]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d105      	bne.n	8003e40 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e34:	4b4a      	ldr	r3, [pc, #296]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e40:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d11c      	bne.n	8003e86 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4c:	4b44      	ldr	r3, [pc, #272]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d116      	bne.n	8003e86 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e58:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_OscConfig+0x180>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e18f      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4938      	ldr	r1, [pc, #224]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e84:	e03a      	b.n	8003efc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d020      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8e:	4b35      	ldr	r3, [pc, #212]	; (8003f64 <HAL_RCC_OscConfig+0x274>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe fd12 	bl	80028bc <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fe fd0e 	bl	80028bc <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e170      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4925      	ldr	r1, [pc, #148]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
 8003ece:	e015      	b.n	8003efc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed0:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fe fcf1 	bl	80028bc <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ede:	f7fe fced 	bl	80028bc <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e14f      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d037      	beq.n	8003f78 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d016      	beq.n	8003f3e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f10:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x278>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fe fcd1 	bl	80028bc <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fe fccd 	bl	80028bc <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e12f      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x22e>
 8003f3c:	e01c      	b.n	8003f78 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_RCC_OscConfig+0x278>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fe fcba 	bl	80028bc <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4a:	e00f      	b.n	8003f6c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fe fcb6 	bl	80028bc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d908      	bls.n	8003f6c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e118      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	42470000 	.word	0x42470000
 8003f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b8a      	ldr	r3, [pc, #552]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e9      	bne.n	8003f4c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8097 	beq.w	80040b4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b83      	ldr	r3, [pc, #524]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b7f      	ldr	r3, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a7e      	ldr	r2, [pc, #504]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b79      	ldr	r3, [pc, #484]	; (800419c <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d118      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a75      	ldr	r2, [pc, #468]	; (800419c <HAL_RCC_OscConfig+0x4ac>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fce:	f7fe fc75 	bl	80028bc <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd6:	f7fe fc71 	bl	80028bc <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e0d3      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	4b6c      	ldr	r3, [pc, #432]	; (800419c <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x31a>
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a65      	ldr	r2, [pc, #404]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	e01c      	b.n	8004044 <HAL_RCC_OscConfig+0x354>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b05      	cmp	r3, #5
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x33c>
 8004012:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
 800401e:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a5d      	ldr	r2, [pc, #372]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0x354>
 800402c:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4a59      	ldr	r2, [pc, #356]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a56      	ldr	r2, [pc, #344]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 800403e:	f023 0304 	bic.w	r3, r3, #4
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fe fc36 	bl	80028bc <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fe fc32 	bl	80028bc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e092      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ee      	beq.n	8004054 <HAL_RCC_OscConfig+0x364>
 8004076:	e014      	b.n	80040a2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fe fc20 	bl	80028bc <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	e00a      	b.n	8004096 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fe fc1c 	bl	80028bc <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e07c      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004096:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1ee      	bne.n	8004080 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	4a3a      	ldr	r2, [pc, #232]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d068      	beq.n	800418e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d060      	beq.n	800418a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d145      	bne.n	800415c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <HAL_RCC_OscConfig+0x4b0>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe fbf1 	bl	80028bc <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040de:	f7fe fbed 	bl	80028bc <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e04f      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	019b      	lsls	r3, r3, #6
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	071b      	lsls	r3, r3, #28
 8004128:	491b      	ldr	r1, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_RCC_OscConfig+0x4b0>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe fbc2 	bl	80028bc <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe fbbe 	bl	80028bc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e020      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x44c>
 800415a:	e018      	b.n	800418e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_OscConfig+0x4b0>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7fe fbab 	bl	80028bc <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416a:	f7fe fba7 	bl	80028bc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e009      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_OscConfig+0x4a8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x47a>
 8004188:	e001      	b.n	800418e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	40007000 	.word	0x40007000
 80041a0:	42470060 	.word	0x42470060

080041a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e056      	b.n	8004264 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7fd fa61 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	ea42 0103 	orr.w	r1, r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	f003 0104 	and.w	r1, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004252:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_SPI_Transmit+0x22>
 800428a:	2302      	movs	r3, #2
 800428c:	e11e      	b.n	80044cc <HAL_SPI_Transmit+0x260>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004296:	f7fe fb11 	bl	80028bc <HAL_GetTick>
 800429a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d002      	beq.n	80042b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
 80042ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b0:	e103      	b.n	80044ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0x52>
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c2:	e0fa      	b.n	80044ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2203      	movs	r2, #3
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	d107      	bne.n	800431c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d007      	beq.n	800433a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004342:	d14b      	bne.n	80043dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Transmit+0xe6>
 800434c:	8afb      	ldrh	r3, [r7, #22]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d13e      	bne.n	80043d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004376:	e02b      	b.n	80043d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d112      	bne.n	80043ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	881a      	ldrh	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80043aa:	e011      	b.n	80043d0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ac:	f7fe fa86 	bl	80028bc <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d803      	bhi.n	80043c4 <HAL_SPI_Transmit+0x158>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_Transmit+0x15e>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043ce:	e074      	b.n	80044ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ce      	bne.n	8004378 <HAL_SPI_Transmit+0x10c>
 80043da:	e04c      	b.n	8004476 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x17e>
 80043e4:	8afb      	ldrh	r3, [r7, #22]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d140      	bne.n	800446c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004410:	e02c      	b.n	800446c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d113      	bne.n	8004448 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	86da      	strh	r2, [r3, #54]	; 0x36
 8004446:	e011      	b.n	800446c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004448:	f7fe fa38 	bl	80028bc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d803      	bhi.n	8004460 <HAL_SPI_Transmit+0x1f4>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Transmit+0x1fa>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	77fb      	strb	r3, [r7, #31]
          goto error;
 800446a:	e026      	b.n	80044ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1cd      	bne.n	8004412 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa36 	bl	80048ec <SPI_EndRxTxTransaction>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e000      	b.n	80044ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80044b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3720      	adds	r7, #32
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	; 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e2:	2301      	movs	r3, #1
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x26>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e18a      	b.n	8004810 <HAL_SPI_TransmitReceive+0x33c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004502:	f7fe f9db 	bl	80028bc <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800451c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004520:	2b01      	cmp	r3, #1
 8004522:	d00f      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x70>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452a:	d107      	bne.n	800453c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d103      	bne.n	800453c <HAL_SPI_TransmitReceive+0x68>
 8004534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004538:	2b04      	cmp	r3, #4
 800453a:	d003      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800453c:	2302      	movs	r3, #2
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004542:	e15b      	b.n	80047fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x82>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x82>
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800455c:	e14e      	b.n	80047fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b04      	cmp	r3, #4
 8004568:	d003      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2205      	movs	r2, #5
 800456e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	887a      	ldrh	r2, [r7, #2]
 8004582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	887a      	ldrh	r2, [r7, #2]
 800459a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d007      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ce:	d178      	bne.n	80046c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_TransmitReceive+0x10a>
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d166      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	881a      	ldrh	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	1c9a      	adds	r2, r3, #2
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004602:	e053      	b.n	80046ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d11b      	bne.n	800464a <HAL_SPI_TransmitReceive+0x176>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d016      	beq.n	800464a <HAL_SPI_TransmitReceive+0x176>
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d113      	bne.n	800464a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d119      	bne.n	800468c <HAL_SPI_TransmitReceive+0x1b8>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d014      	beq.n	800468c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	b292      	uxth	r2, r2
 800466e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004688:	2301      	movs	r3, #1
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800468c:	f7fe f916 	bl	80028bc <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004698:	429a      	cmp	r2, r3
 800469a:	d807      	bhi.n	80046ac <HAL_SPI_TransmitReceive+0x1d8>
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a2:	d003      	beq.n	80046ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046aa:	e0a7      	b.n	80047fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1a6      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x130>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1a1      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x130>
 80046c0:	e07c      	b.n	80047bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_TransmitReceive+0x1fc>
 80046ca:	8b7b      	ldrh	r3, [r7, #26]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d16b      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f6:	e057      	b.n	80047a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d11c      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x26c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d017      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x26c>
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d114      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d119      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x2ae>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d014      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800477e:	2301      	movs	r3, #1
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004782:	f7fe f89b 	bl	80028bc <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800478e:	429a      	cmp	r2, r3
 8004790:	d803      	bhi.n	800479a <HAL_SPI_TransmitReceive+0x2c6>
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004798:	d102      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x2cc>
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047a6:	e029      	b.n	80047fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1a2      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x224>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d19d      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f893 	bl	80048ec <SPI_EndRxTxTransaction>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d006      	beq.n	80047da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047d8:	e010      	b.n	80047fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	e000      	b.n	80047fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800480c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004810:	4618      	mov	r0, r3
 8004812:	3730      	adds	r7, #48	; 0x30
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004828:	e04c      	b.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004830:	d048      	beq.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004832:	f7fe f843 	bl	80028bc <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d902      	bls.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d13d      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004860:	d111      	bne.n	8004886 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d004      	beq.n	8004876 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d107      	bne.n	8004886 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	d10f      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e00f      	b.n	80048e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4013      	ands	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d1a3      	bne.n	800482a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <SPI_EndRxTxTransaction+0x7c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <SPI_EndRxTxTransaction+0x80>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0d5b      	lsrs	r3, r3, #21
 8004904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004916:	d112      	bne.n	800493e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff ff78 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3b01      	subs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	d0f2      	beq.n	800493e <SPI_EndRxTxTransaction+0x52>
 8004958:	e000      	b.n	800495c <SPI_EndRxTxTransaction+0x70>
        break;
 800495a:	bf00      	nop
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000000 	.word	0x20000000
 800496c:	165e9f81 	.word	0x165e9f81

08004970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e03f      	b.n	8004a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc ff2e 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fc47 	bl	8005248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	4613      	mov	r3, r2
 8004a16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d130      	bne.n	8004a86 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_UART_Transmit_IT+0x26>
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e029      	b.n	8004a88 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Transmit_IT+0x38>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e022      	b.n	8004a88 <HAL_UART_Transmit_IT+0x7e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2221      	movs	r2, #33	; 0x21
 8004a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a80:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e000      	b.n	8004a88 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
  }
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d166      	bne.n	8004b7c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_UART_Receive_DMA+0x26>
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e05f      	b.n	8004b7e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_UART_Receive_DMA+0x38>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e058      	b.n	8004b7e <HAL_UART_Receive_DMA+0xea>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2222      	movs	r2, #34	; 0x22
 8004aea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	4a25      	ldr	r2, [pc, #148]	; (8004b88 <HAL_UART_Receive_DMA+0xf4>)
 8004af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <HAL_UART_Receive_DMA+0xf8>)
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	4a23      	ldr	r2, [pc, #140]	; (8004b90 <HAL_UART_Receive_DMA+0xfc>)
 8004b04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004b0e:	f107 0308 	add.w	r3, r7, #8
 8004b12:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	f7fe f8b7 	bl	8002c98 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b56:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b76:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	08004ec1 	.word	0x08004ec1
 8004b8c:	08004f29 	.word	0x08004f29
 8004b90:	08004f45 	.word	0x08004f45

08004b94 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004baa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d124      	bne.n	8004c14 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	2200      	movs	r2, #0
 8004be8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe f8aa 	bl	8002d48 <HAL_DMA_Abort>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fabe 	bl	8003180 <HAL_DMA_GetError>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d104      	bne.n	8004c14 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e03d      	b.n	8004c90 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d124      	bne.n	8004c6c <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c30:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d018      	beq.n	8004c6c <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	2200      	movs	r2, #0
 8004c40:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe f87e 	bl	8002d48 <HAL_DMA_Abort>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fa92 	bl	8003180 <HAL_DMA_GetError>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d104      	bne.n	8004c6c <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2210      	movs	r2, #16
 8004c66:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e011      	b.n	8004c90 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10d      	bne.n	8004cea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_UART_IRQHandler+0x52>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa2e 	bl	8005144 <UART_Receive_IT>
      return;
 8004ce8:	e0d1      	b.n	8004e8e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80b0 	beq.w	8004e52 <HAL_UART_IRQHandler+0x1ba>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_UART_IRQHandler+0x70>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a5 	beq.w	8004e52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_UART_IRQHandler+0x90>
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	f043 0201 	orr.w	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_UART_IRQHandler+0xb0>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d40:	f043 0202 	orr.w	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_UART_IRQHandler+0xd0>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00f      	beq.n	8004d92 <HAL_UART_IRQHandler+0xfa>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_UART_IRQHandler+0xee>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	f043 0208 	orr.w	r2, r3, #8
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d078      	beq.n	8004e8c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_UART_IRQHandler+0x11c>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9c8 	bl	8005144 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_UART_IRQHandler+0x144>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d031      	beq.n	8004e40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f911 	bl	8005004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d123      	bne.n	8004e38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d013      	beq.n	8004e30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0c:	4a21      	ldr	r2, [pc, #132]	; (8004e94 <HAL_UART_IRQHandler+0x1fc>)
 8004e0e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe f807 	bl	8002e28 <HAL_DMA_Abort_IT>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d016      	beq.n	8004e4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2e:	e00e      	b.n	8004e4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f83b 	bl	8004eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e36:	e00a      	b.n	8004e4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f837 	bl	8004eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3e:	e006      	b.n	8004e4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f833 	bl	8004eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004e4c:	e01e      	b.n	8004e8c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4e:	bf00      	nop
    return;
 8004e50:	e01c      	b.n	8004e8c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_UART_IRQHandler+0x1d6>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8fe 	bl	8005068 <UART_Transmit_IT>
    return;
 8004e6c:	e00f      	b.n	8004e8e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_UART_IRQHandler+0x1f6>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f946 	bl	8005114 <UART_EndTransmit_IT>
    return;
 8004e88:	bf00      	nop
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004e8c:	bf00      	nop
  }
}
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	08005041 	.word	0x08005041

08004e98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11e      	bne.n	8004f1a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ef0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f10:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7fc fa88 	bl	8001430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff ffae 	bl	8004e98 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b21      	cmp	r3, #33	; 0x21
 8004f76:	d108      	bne.n	8004f8a <UART_DMAError+0x46>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2200      	movs	r2, #0
 8004f82:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f84:	68b8      	ldr	r0, [r7, #8]
 8004f86:	f000 f827 	bl	8004fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b22      	cmp	r3, #34	; 0x22
 8004faa:	d108      	bne.n	8004fbe <UART_DMAError+0x7a>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fb8:	68b8      	ldr	r0, [r7, #8]
 8004fba:	f000 f823 	bl	8005004 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	f043 0210 	orr.w	r2, r3, #16
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fca:	68b8      	ldr	r0, [r7, #8]
 8004fcc:	f7ff ff6e 	bl	8004eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004fee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800501a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff ff26 	bl	8004eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b21      	cmp	r3, #33	; 0x21
 800507a:	d144      	bne.n	8005106 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005084:	d11a      	bne.n	80050bc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800509a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	1c9a      	adds	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	621a      	str	r2, [r3, #32]
 80050ae:	e00e      	b.n	80050ce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]
 80050ba:	e008      	b.n	80050ce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	1c59      	adds	r1, r3, #1
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6211      	str	r1, [r2, #32]
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4619      	mov	r1, r3
 80050dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005100:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fc fa0b 	bl	8001550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b22      	cmp	r3, #34	; 0x22
 8005156:	d171      	bne.n	800523c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d123      	bne.n	80051aa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10e      	bne.n	800518e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
 800518c:	e029      	b.n	80051e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	b29b      	uxth	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
 80051a8:	e01b      	b.n	80051e2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6858      	ldr	r0, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	1c59      	adds	r1, r3, #1
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6291      	str	r1, [r2, #40]	; 0x28
 80051c2:	b2c2      	uxtb	r2, r0
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e00c      	b.n	80051e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	1c58      	adds	r0, r3, #1
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	6288      	str	r0, [r1, #40]	; 0x28
 80051da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4619      	mov	r1, r3
 80051f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d120      	bne.n	8005238 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0220 	bic.w	r2, r2, #32
 8005204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005214:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fc f8fe 	bl	8001430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	e002      	b.n	800523e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e000      	b.n	800523e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800523c:	2302      	movs	r3, #2
  }
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800528a:	f023 030c 	bic.w	r3, r3, #12
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	430b      	orrs	r3, r1
 8005296:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b6:	f040 818b 	bne.w	80055d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4ac1      	ldr	r2, [pc, #772]	; (80055c4 <UART_SetConfig+0x37c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d005      	beq.n	80052d0 <UART_SetConfig+0x88>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4abf      	ldr	r2, [pc, #764]	; (80055c8 <UART_SetConfig+0x380>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f040 80bd 	bne.w	800544a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fe fb5a 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 80052d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	461d      	mov	r5, r3
 80052da:	f04f 0600 	mov.w	r6, #0
 80052de:	46a8      	mov	r8, r5
 80052e0:	46b1      	mov	r9, r6
 80052e2:	eb18 0308 	adds.w	r3, r8, r8
 80052e6:	eb49 0409 	adc.w	r4, r9, r9
 80052ea:	4698      	mov	r8, r3
 80052ec:	46a1      	mov	r9, r4
 80052ee:	eb18 0805 	adds.w	r8, r8, r5
 80052f2:	eb49 0906 	adc.w	r9, r9, r6
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005302:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005306:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800530a:	4688      	mov	r8, r1
 800530c:	4691      	mov	r9, r2
 800530e:	eb18 0005 	adds.w	r0, r8, r5
 8005312:	eb49 0106 	adc.w	r1, r9, r6
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	461d      	mov	r5, r3
 800531c:	f04f 0600 	mov.w	r6, #0
 8005320:	196b      	adds	r3, r5, r5
 8005322:	eb46 0406 	adc.w	r4, r6, r6
 8005326:	461a      	mov	r2, r3
 8005328:	4623      	mov	r3, r4
 800532a:	f7fa ffc1 	bl	80002b0 <__aeabi_uldivmod>
 800532e:	4603      	mov	r3, r0
 8005330:	460c      	mov	r4, r1
 8005332:	461a      	mov	r2, r3
 8005334:	4ba5      	ldr	r3, [pc, #660]	; (80055cc <UART_SetConfig+0x384>)
 8005336:	fba3 2302 	umull	r2, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	461d      	mov	r5, r3
 8005344:	f04f 0600 	mov.w	r6, #0
 8005348:	46a9      	mov	r9, r5
 800534a:	46b2      	mov	sl, r6
 800534c:	eb19 0309 	adds.w	r3, r9, r9
 8005350:	eb4a 040a 	adc.w	r4, sl, sl
 8005354:	4699      	mov	r9, r3
 8005356:	46a2      	mov	sl, r4
 8005358:	eb19 0905 	adds.w	r9, r9, r5
 800535c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800536c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005370:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005374:	4689      	mov	r9, r1
 8005376:	4692      	mov	sl, r2
 8005378:	eb19 0005 	adds.w	r0, r9, r5
 800537c:	eb4a 0106 	adc.w	r1, sl, r6
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	461d      	mov	r5, r3
 8005386:	f04f 0600 	mov.w	r6, #0
 800538a:	196b      	adds	r3, r5, r5
 800538c:	eb46 0406 	adc.w	r4, r6, r6
 8005390:	461a      	mov	r2, r3
 8005392:	4623      	mov	r3, r4
 8005394:	f7fa ff8c 	bl	80002b0 <__aeabi_uldivmod>
 8005398:	4603      	mov	r3, r0
 800539a:	460c      	mov	r4, r1
 800539c:	461a      	mov	r2, r3
 800539e:	4b8b      	ldr	r3, [pc, #556]	; (80055cc <UART_SetConfig+0x384>)
 80053a0:	fba3 1302 	umull	r1, r3, r3, r2
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	2164      	movs	r1, #100	; 0x64
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	3332      	adds	r3, #50	; 0x32
 80053b2:	4a86      	ldr	r2, [pc, #536]	; (80055cc <UART_SetConfig+0x384>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053c0:	4498      	add	r8, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	461d      	mov	r5, r3
 80053c6:	f04f 0600 	mov.w	r6, #0
 80053ca:	46a9      	mov	r9, r5
 80053cc:	46b2      	mov	sl, r6
 80053ce:	eb19 0309 	adds.w	r3, r9, r9
 80053d2:	eb4a 040a 	adc.w	r4, sl, sl
 80053d6:	4699      	mov	r9, r3
 80053d8:	46a2      	mov	sl, r4
 80053da:	eb19 0905 	adds.w	r9, r9, r5
 80053de:	eb4a 0a06 	adc.w	sl, sl, r6
 80053e2:	f04f 0100 	mov.w	r1, #0
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053f6:	4689      	mov	r9, r1
 80053f8:	4692      	mov	sl, r2
 80053fa:	eb19 0005 	adds.w	r0, r9, r5
 80053fe:	eb4a 0106 	adc.w	r1, sl, r6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	461d      	mov	r5, r3
 8005408:	f04f 0600 	mov.w	r6, #0
 800540c:	196b      	adds	r3, r5, r5
 800540e:	eb46 0406 	adc.w	r4, r6, r6
 8005412:	461a      	mov	r2, r3
 8005414:	4623      	mov	r3, r4
 8005416:	f7fa ff4b 	bl	80002b0 <__aeabi_uldivmod>
 800541a:	4603      	mov	r3, r0
 800541c:	460c      	mov	r4, r1
 800541e:	461a      	mov	r2, r3
 8005420:	4b6a      	ldr	r3, [pc, #424]	; (80055cc <UART_SetConfig+0x384>)
 8005422:	fba3 1302 	umull	r1, r3, r3, r2
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2164      	movs	r1, #100	; 0x64
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	3332      	adds	r3, #50	; 0x32
 8005434:	4a65      	ldr	r2, [pc, #404]	; (80055cc <UART_SetConfig+0x384>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 0207 	and.w	r2, r3, #7
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4442      	add	r2, r8
 8005446:	609a      	str	r2, [r3, #8]
 8005448:	e26f      	b.n	800592a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800544a:	f7fe fa89 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 800544e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	461d      	mov	r5, r3
 8005454:	f04f 0600 	mov.w	r6, #0
 8005458:	46a8      	mov	r8, r5
 800545a:	46b1      	mov	r9, r6
 800545c:	eb18 0308 	adds.w	r3, r8, r8
 8005460:	eb49 0409 	adc.w	r4, r9, r9
 8005464:	4698      	mov	r8, r3
 8005466:	46a1      	mov	r9, r4
 8005468:	eb18 0805 	adds.w	r8, r8, r5
 800546c:	eb49 0906 	adc.w	r9, r9, r6
 8005470:	f04f 0100 	mov.w	r1, #0
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800547c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005480:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005484:	4688      	mov	r8, r1
 8005486:	4691      	mov	r9, r2
 8005488:	eb18 0005 	adds.w	r0, r8, r5
 800548c:	eb49 0106 	adc.w	r1, r9, r6
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	461d      	mov	r5, r3
 8005496:	f04f 0600 	mov.w	r6, #0
 800549a:	196b      	adds	r3, r5, r5
 800549c:	eb46 0406 	adc.w	r4, r6, r6
 80054a0:	461a      	mov	r2, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	f7fa ff04 	bl	80002b0 <__aeabi_uldivmod>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b47      	ldr	r3, [pc, #284]	; (80055cc <UART_SetConfig+0x384>)
 80054b0:	fba3 2302 	umull	r2, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	461d      	mov	r5, r3
 80054be:	f04f 0600 	mov.w	r6, #0
 80054c2:	46a9      	mov	r9, r5
 80054c4:	46b2      	mov	sl, r6
 80054c6:	eb19 0309 	adds.w	r3, r9, r9
 80054ca:	eb4a 040a 	adc.w	r4, sl, sl
 80054ce:	4699      	mov	r9, r3
 80054d0:	46a2      	mov	sl, r4
 80054d2:	eb19 0905 	adds.w	r9, r9, r5
 80054d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80054da:	f04f 0100 	mov.w	r1, #0
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054ee:	4689      	mov	r9, r1
 80054f0:	4692      	mov	sl, r2
 80054f2:	eb19 0005 	adds.w	r0, r9, r5
 80054f6:	eb4a 0106 	adc.w	r1, sl, r6
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	461d      	mov	r5, r3
 8005500:	f04f 0600 	mov.w	r6, #0
 8005504:	196b      	adds	r3, r5, r5
 8005506:	eb46 0406 	adc.w	r4, r6, r6
 800550a:	461a      	mov	r2, r3
 800550c:	4623      	mov	r3, r4
 800550e:	f7fa fecf 	bl	80002b0 <__aeabi_uldivmod>
 8005512:	4603      	mov	r3, r0
 8005514:	460c      	mov	r4, r1
 8005516:	461a      	mov	r2, r3
 8005518:	4b2c      	ldr	r3, [pc, #176]	; (80055cc <UART_SetConfig+0x384>)
 800551a:	fba3 1302 	umull	r1, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	2164      	movs	r1, #100	; 0x64
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	3332      	adds	r3, #50	; 0x32
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <UART_SetConfig+0x384>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800553a:	4498      	add	r8, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	461d      	mov	r5, r3
 8005540:	f04f 0600 	mov.w	r6, #0
 8005544:	46a9      	mov	r9, r5
 8005546:	46b2      	mov	sl, r6
 8005548:	eb19 0309 	adds.w	r3, r9, r9
 800554c:	eb4a 040a 	adc.w	r4, sl, sl
 8005550:	4699      	mov	r9, r3
 8005552:	46a2      	mov	sl, r4
 8005554:	eb19 0905 	adds.w	r9, r9, r5
 8005558:	eb4a 0a06 	adc.w	sl, sl, r6
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005568:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800556c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005570:	4689      	mov	r9, r1
 8005572:	4692      	mov	sl, r2
 8005574:	eb19 0005 	adds.w	r0, r9, r5
 8005578:	eb4a 0106 	adc.w	r1, sl, r6
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	461d      	mov	r5, r3
 8005582:	f04f 0600 	mov.w	r6, #0
 8005586:	196b      	adds	r3, r5, r5
 8005588:	eb46 0406 	adc.w	r4, r6, r6
 800558c:	461a      	mov	r2, r3
 800558e:	4623      	mov	r3, r4
 8005590:	f7fa fe8e 	bl	80002b0 <__aeabi_uldivmod>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	461a      	mov	r2, r3
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <UART_SetConfig+0x384>)
 800559c:	fba3 1302 	umull	r1, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2164      	movs	r1, #100	; 0x64
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	3332      	adds	r3, #50	; 0x32
 80055ae:	4a07      	ldr	r2, [pc, #28]	; (80055cc <UART_SetConfig+0x384>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f003 0207 	and.w	r2, r3, #7
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4442      	add	r2, r8
 80055c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80055c2:	e1b2      	b.n	800592a <UART_SetConfig+0x6e2>
 80055c4:	40011000 	.word	0x40011000
 80055c8:	40011400 	.word	0x40011400
 80055cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4ad7      	ldr	r2, [pc, #860]	; (8005934 <UART_SetConfig+0x6ec>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d005      	beq.n	80055e6 <UART_SetConfig+0x39e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4ad6      	ldr	r2, [pc, #856]	; (8005938 <UART_SetConfig+0x6f0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	f040 80d1 	bne.w	8005788 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80055e6:	f7fe f9cf 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 80055ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	469a      	mov	sl, r3
 80055f0:	f04f 0b00 	mov.w	fp, #0
 80055f4:	46d0      	mov	r8, sl
 80055f6:	46d9      	mov	r9, fp
 80055f8:	eb18 0308 	adds.w	r3, r8, r8
 80055fc:	eb49 0409 	adc.w	r4, r9, r9
 8005600:	4698      	mov	r8, r3
 8005602:	46a1      	mov	r9, r4
 8005604:	eb18 080a 	adds.w	r8, r8, sl
 8005608:	eb49 090b 	adc.w	r9, r9, fp
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005618:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800561c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005620:	4688      	mov	r8, r1
 8005622:	4691      	mov	r9, r2
 8005624:	eb1a 0508 	adds.w	r5, sl, r8
 8005628:	eb4b 0609 	adc.w	r6, fp, r9
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4619      	mov	r1, r3
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	f04f 0400 	mov.w	r4, #0
 800563e:	0094      	lsls	r4, r2, #2
 8005640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005644:	008b      	lsls	r3, r1, #2
 8005646:	461a      	mov	r2, r3
 8005648:	4623      	mov	r3, r4
 800564a:	4628      	mov	r0, r5
 800564c:	4631      	mov	r1, r6
 800564e:	f7fa fe2f 	bl	80002b0 <__aeabi_uldivmod>
 8005652:	4603      	mov	r3, r0
 8005654:	460c      	mov	r4, r1
 8005656:	461a      	mov	r2, r3
 8005658:	4bb8      	ldr	r3, [pc, #736]	; (800593c <UART_SetConfig+0x6f4>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	469b      	mov	fp, r3
 8005668:	f04f 0c00 	mov.w	ip, #0
 800566c:	46d9      	mov	r9, fp
 800566e:	46e2      	mov	sl, ip
 8005670:	eb19 0309 	adds.w	r3, r9, r9
 8005674:	eb4a 040a 	adc.w	r4, sl, sl
 8005678:	4699      	mov	r9, r3
 800567a:	46a2      	mov	sl, r4
 800567c:	eb19 090b 	adds.w	r9, r9, fp
 8005680:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005690:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005694:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005698:	4689      	mov	r9, r1
 800569a:	4692      	mov	sl, r2
 800569c:	eb1b 0509 	adds.w	r5, fp, r9
 80056a0:	eb4c 060a 	adc.w	r6, ip, sl
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4619      	mov	r1, r3
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	f04f 0400 	mov.w	r4, #0
 80056b6:	0094      	lsls	r4, r2, #2
 80056b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056bc:	008b      	lsls	r3, r1, #2
 80056be:	461a      	mov	r2, r3
 80056c0:	4623      	mov	r3, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	4631      	mov	r1, r6
 80056c6:	f7fa fdf3 	bl	80002b0 <__aeabi_uldivmod>
 80056ca:	4603      	mov	r3, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b9a      	ldr	r3, [pc, #616]	; (800593c <UART_SetConfig+0x6f4>)
 80056d2:	fba3 1302 	umull	r1, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2164      	movs	r1, #100	; 0x64
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	3332      	adds	r3, #50	; 0x32
 80056e4:	4a95      	ldr	r2, [pc, #596]	; (800593c <UART_SetConfig+0x6f4>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f0:	4498      	add	r8, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	469b      	mov	fp, r3
 80056f6:	f04f 0c00 	mov.w	ip, #0
 80056fa:	46d9      	mov	r9, fp
 80056fc:	46e2      	mov	sl, ip
 80056fe:	eb19 0309 	adds.w	r3, r9, r9
 8005702:	eb4a 040a 	adc.w	r4, sl, sl
 8005706:	4699      	mov	r9, r3
 8005708:	46a2      	mov	sl, r4
 800570a:	eb19 090b 	adds.w	r9, r9, fp
 800570e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800571e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005722:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005726:	4689      	mov	r9, r1
 8005728:	4692      	mov	sl, r2
 800572a:	eb1b 0509 	adds.w	r5, fp, r9
 800572e:	eb4c 060a 	adc.w	r6, ip, sl
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4619      	mov	r1, r3
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	f04f 0400 	mov.w	r4, #0
 8005744:	0094      	lsls	r4, r2, #2
 8005746:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800574a:	008b      	lsls	r3, r1, #2
 800574c:	461a      	mov	r2, r3
 800574e:	4623      	mov	r3, r4
 8005750:	4628      	mov	r0, r5
 8005752:	4631      	mov	r1, r6
 8005754:	f7fa fdac 	bl	80002b0 <__aeabi_uldivmod>
 8005758:	4603      	mov	r3, r0
 800575a:	460c      	mov	r4, r1
 800575c:	461a      	mov	r2, r3
 800575e:	4b77      	ldr	r3, [pc, #476]	; (800593c <UART_SetConfig+0x6f4>)
 8005760:	fba3 1302 	umull	r1, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	2164      	movs	r1, #100	; 0x64
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	3332      	adds	r3, #50	; 0x32
 8005772:	4a72      	ldr	r2, [pc, #456]	; (800593c <UART_SetConfig+0x6f4>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	f003 020f 	and.w	r2, r3, #15
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4442      	add	r2, r8
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	e0d0      	b.n	800592a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe f8ea 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 800578c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	469a      	mov	sl, r3
 8005792:	f04f 0b00 	mov.w	fp, #0
 8005796:	46d0      	mov	r8, sl
 8005798:	46d9      	mov	r9, fp
 800579a:	eb18 0308 	adds.w	r3, r8, r8
 800579e:	eb49 0409 	adc.w	r4, r9, r9
 80057a2:	4698      	mov	r8, r3
 80057a4:	46a1      	mov	r9, r4
 80057a6:	eb18 080a 	adds.w	r8, r8, sl
 80057aa:	eb49 090b 	adc.w	r9, r9, fp
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057c2:	4688      	mov	r8, r1
 80057c4:	4691      	mov	r9, r2
 80057c6:	eb1a 0508 	adds.w	r5, sl, r8
 80057ca:	eb4b 0609 	adc.w	r6, fp, r9
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4619      	mov	r1, r3
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	f04f 0400 	mov.w	r4, #0
 80057e0:	0094      	lsls	r4, r2, #2
 80057e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057e6:	008b      	lsls	r3, r1, #2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4623      	mov	r3, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	4631      	mov	r1, r6
 80057f0:	f7fa fd5e 	bl	80002b0 <__aeabi_uldivmod>
 80057f4:	4603      	mov	r3, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b50      	ldr	r3, [pc, #320]	; (800593c <UART_SetConfig+0x6f4>)
 80057fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	469b      	mov	fp, r3
 800580a:	f04f 0c00 	mov.w	ip, #0
 800580e:	46d9      	mov	r9, fp
 8005810:	46e2      	mov	sl, ip
 8005812:	eb19 0309 	adds.w	r3, r9, r9
 8005816:	eb4a 040a 	adc.w	r4, sl, sl
 800581a:	4699      	mov	r9, r3
 800581c:	46a2      	mov	sl, r4
 800581e:	eb19 090b 	adds.w	r9, r9, fp
 8005822:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005832:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800583a:	4689      	mov	r9, r1
 800583c:	4692      	mov	sl, r2
 800583e:	eb1b 0509 	adds.w	r5, fp, r9
 8005842:	eb4c 060a 	adc.w	r6, ip, sl
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4619      	mov	r1, r3
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	f04f 0400 	mov.w	r4, #0
 8005858:	0094      	lsls	r4, r2, #2
 800585a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800585e:	008b      	lsls	r3, r1, #2
 8005860:	461a      	mov	r2, r3
 8005862:	4623      	mov	r3, r4
 8005864:	4628      	mov	r0, r5
 8005866:	4631      	mov	r1, r6
 8005868:	f7fa fd22 	bl	80002b0 <__aeabi_uldivmod>
 800586c:	4603      	mov	r3, r0
 800586e:	460c      	mov	r4, r1
 8005870:	461a      	mov	r2, r3
 8005872:	4b32      	ldr	r3, [pc, #200]	; (800593c <UART_SetConfig+0x6f4>)
 8005874:	fba3 1302 	umull	r1, r3, r3, r2
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	2164      	movs	r1, #100	; 0x64
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	3332      	adds	r3, #50	; 0x32
 8005886:	4a2d      	ldr	r2, [pc, #180]	; (800593c <UART_SetConfig+0x6f4>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005892:	4498      	add	r8, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	469b      	mov	fp, r3
 8005898:	f04f 0c00 	mov.w	ip, #0
 800589c:	46d9      	mov	r9, fp
 800589e:	46e2      	mov	sl, ip
 80058a0:	eb19 0309 	adds.w	r3, r9, r9
 80058a4:	eb4a 040a 	adc.w	r4, sl, sl
 80058a8:	4699      	mov	r9, r3
 80058aa:	46a2      	mov	sl, r4
 80058ac:	eb19 090b 	adds.w	r9, r9, fp
 80058b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058c8:	4689      	mov	r9, r1
 80058ca:	4692      	mov	sl, r2
 80058cc:	eb1b 0509 	adds.w	r5, fp, r9
 80058d0:	eb4c 060a 	adc.w	r6, ip, sl
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4619      	mov	r1, r3
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	f04f 0400 	mov.w	r4, #0
 80058e6:	0094      	lsls	r4, r2, #2
 80058e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058ec:	008b      	lsls	r3, r1, #2
 80058ee:	461a      	mov	r2, r3
 80058f0:	4623      	mov	r3, r4
 80058f2:	4628      	mov	r0, r5
 80058f4:	4631      	mov	r1, r6
 80058f6:	f7fa fcdb 	bl	80002b0 <__aeabi_uldivmod>
 80058fa:	4603      	mov	r3, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	461a      	mov	r2, r3
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <UART_SetConfig+0x6f4>)
 8005902:	fba3 1302 	umull	r1, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	2164      	movs	r1, #100	; 0x64
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	3332      	adds	r3, #50	; 0x32
 8005914:	4a09      	ldr	r2, [pc, #36]	; (800593c <UART_SetConfig+0x6f4>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4442      	add	r2, r8
 8005926:	609a      	str	r2, [r3, #8]
}
 8005928:	e7ff      	b.n	800592a <UART_SetConfig+0x6e2>
 800592a:	bf00      	nop
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	40011000 	.word	0x40011000
 8005938:	40011400 	.word	0x40011400
 800593c:	51eb851f 	.word	0x51eb851f

08005940 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005944:	4904      	ldr	r1, [pc, #16]	; (8005958 <MX_FATFS_Init+0x18>)
 8005946:	4805      	ldr	r0, [pc, #20]	; (800595c <MX_FATFS_Init+0x1c>)
 8005948:	f002 fa0e 	bl	8007d68 <FATFS_LinkDriver>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <MX_FATFS_Init+0x20>)
 8005952:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005954:	bf00      	nop
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000ac0 	.word	0x20000ac0
 800595c:	20000010 	.word	0x20000010
 8005960:	20000ac4 	.word	0x20000ac4

08005964 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005968:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800596a:	4618      	mov	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fc fbc3 	bl	800210c <USER_SPI_initialize>
 8005986:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fc fc95 	bl	80022cc <USER_SPI_status>
 80059a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80059bc:	7bf8      	ldrb	r0, [r7, #15]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	f7fc fc98 	bl	80022f8 <USER_SPI_read>
 80059c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	4603      	mov	r3, r0
 80059e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80059e2:	7bf8      	ldrb	r0, [r7, #15]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	f7fc fceb 	bl	80023c4 <USER_SPI_write>
 80059ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	603a      	str	r2, [r7, #0]
 8005a02:	71fb      	strb	r3, [r7, #7]
 8005a04:	460b      	mov	r3, r1
 8005a06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005a08:	79b9      	ldrb	r1, [r7, #6]
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fc fd54 	bl	80024bc <USER_SPI_ioctl>
 8005a14:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	4a08      	ldr	r2, [pc, #32]	; (8005a50 <disk_status+0x30>)
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	79fa      	ldrb	r2, [r7, #7]
 8005a38:	4905      	ldr	r1, [pc, #20]	; (8005a50 <disk_status+0x30>)
 8005a3a:	440a      	add	r2, r1
 8005a3c:	7a12      	ldrb	r2, [r2, #8]
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4798      	blx	r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000011c 	.word	0x2000011c

08005a54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <disk_initialize+0x48>)
 8005a66:	5cd3      	ldrb	r3, [r2, r3]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d111      	bne.n	8005a90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <disk_initialize+0x48>)
 8005a70:	2101      	movs	r1, #1
 8005a72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <disk_initialize+0x48>)
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	79fa      	ldrb	r2, [r7, #7]
 8005a82:	4906      	ldr	r1, [pc, #24]	; (8005a9c <disk_initialize+0x48>)
 8005a84:	440a      	add	r2, r1
 8005a86:	7a12      	ldrb	r2, [r2, #8]
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000011c 	.word	0x2000011c

08005aa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <disk_read+0x3c>)
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	689c      	ldr	r4, [r3, #8]
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	4a07      	ldr	r2, [pc, #28]	; (8005adc <disk_read+0x3c>)
 8005ac0:	4413      	add	r3, r2
 8005ac2:	7a18      	ldrb	r0, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	47a0      	blx	r4
 8005acc:	4603      	mov	r3, r0
 8005ace:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	bf00      	nop
 8005adc:	2000011c 	.word	0x2000011c

08005ae0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <disk_write+0x3c>)
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68dc      	ldr	r4, [r3, #12]
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	4a07      	ldr	r2, [pc, #28]	; (8005b1c <disk_write+0x3c>)
 8005b00:	4413      	add	r3, r2
 8005b02:	7a18      	ldrb	r0, [r3, #8]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	47a0      	blx	r4
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd90      	pop	{r4, r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	2000011c 	.word	0x2000011c

08005b20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	603a      	str	r2, [r7, #0]
 8005b2a:	71fb      	strb	r3, [r7, #7]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <disk_ioctl+0x38>)
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	79fa      	ldrb	r2, [r7, #7]
 8005b3e:	4906      	ldr	r1, [pc, #24]	; (8005b58 <disk_ioctl+0x38>)
 8005b40:	440a      	add	r2, r1
 8005b42:	7a10      	ldrb	r0, [r2, #8]
 8005b44:	79b9      	ldrb	r1, [r7, #6]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	4798      	blx	r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	2000011c 	.word	0x2000011c

08005b5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3301      	adds	r3, #1
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005b6c:	89fb      	ldrh	r3, [r7, #14]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	b21a      	sxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	b21b      	sxth	r3, r3
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3303      	adds	r3, #3
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	3202      	adds	r2, #2
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	3201      	adds	r2, #1
 8005bb2:	7812      	ldrb	r2, [r2, #0]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
	return rv;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	887a      	ldrh	r2, [r7, #2]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	887a      	ldrh	r2, [r7, #2]
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	701a      	strb	r2, [r3, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	1c53      	adds	r3, r2, #1
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	6179      	str	r1, [r7, #20]
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f1      	bne.n	8005c7a <mem_cpy+0x1a>
	}
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ca2:	b480      	push	{r7}
 8005ca4:	b087      	sub	sp, #28
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	617a      	str	r2, [r7, #20]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f3      	bne.n	8005cb2 <mem_set+0x10>
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005cd6:	b480      	push	{r7}
 8005cd8:	b089      	sub	sp, #36	; 0x24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	61fa      	str	r2, [r7, #28]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	61ba      	str	r2, [r7, #24]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	1acb      	subs	r3, r1, r3
 8005d02:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <mem_cmp+0x40>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0eb      	beq.n	8005cee <mem_cmp+0x18>

	return r;
 8005d16:	697b      	ldr	r3, [r7, #20]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3724      	adds	r7, #36	; 0x24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005d2e:	e002      	b.n	8005d36 <chk_chr+0x12>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3301      	adds	r3, #1
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <chk_chr+0x26>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d1f2      	bne.n	8005d30 <chk_chr+0xc>
	return *str;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e029      	b.n	8005dc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005d70:	4a27      	ldr	r2, [pc, #156]	; (8005e10 <chk_lock+0xb4>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	4413      	add	r3, r2
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01d      	beq.n	8005dba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d7e:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <chk_lock+0xb4>)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4413      	add	r3, r2
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d116      	bne.n	8005dbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005d90:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <chk_lock+0xb4>)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	4413      	add	r3, r2
 8005d98:	3304      	adds	r3, #4
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d10c      	bne.n	8005dbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005da4:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <chk_lock+0xb4>)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	4413      	add	r3, r2
 8005dac:	3308      	adds	r3, #8
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d102      	bne.n	8005dbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005db8:	e007      	b.n	8005dca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d9d2      	bls.n	8005d70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d109      	bne.n	8005de4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <chk_lock+0x80>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d101      	bne.n	8005de0 <chk_lock+0x84>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e010      	b.n	8005e02 <chk_lock+0xa6>
 8005de0:	2312      	movs	r3, #18
 8005de2:	e00e      	b.n	8005e02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d108      	bne.n	8005dfc <chk_lock+0xa0>
 8005dea:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <chk_lock+0xb4>)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	4413      	add	r3, r2
 8005df2:	330c      	adds	r3, #12
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d101      	bne.n	8005e00 <chk_lock+0xa4>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	e000      	b.n	8005e02 <chk_lock+0xa6>
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	200000fc 	.word	0x200000fc

08005e14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	e002      	b.n	8005e26 <enq_lock+0x12>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3301      	adds	r3, #1
 8005e24:	607b      	str	r3, [r7, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d806      	bhi.n	8005e3a <enq_lock+0x26>
 8005e2c:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <enq_lock+0x40>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	4413      	add	r3, r2
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f2      	bne.n	8005e20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	200000fc 	.word	0x200000fc

08005e58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e01f      	b.n	8005ea8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005e68:	4a41      	ldr	r2, [pc, #260]	; (8005f70 <inc_lock+0x118>)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	4413      	add	r3, r2
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d113      	bne.n	8005ea2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005e7a:	4a3d      	ldr	r2, [pc, #244]	; (8005f70 <inc_lock+0x118>)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	4413      	add	r3, r2
 8005e82:	3304      	adds	r3, #4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d109      	bne.n	8005ea2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005e8e:	4a38      	ldr	r2, [pc, #224]	; (8005f70 <inc_lock+0x118>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	4413      	add	r3, r2
 8005e96:	3308      	adds	r3, #8
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d006      	beq.n	8005eb0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d9dc      	bls.n	8005e68 <inc_lock+0x10>
 8005eae:	e000      	b.n	8005eb2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005eb0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d132      	bne.n	8005f1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e002      	b.n	8005ec4 <inc_lock+0x6c>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d806      	bhi.n	8005ed8 <inc_lock+0x80>
 8005eca:	4a29      	ldr	r2, [pc, #164]	; (8005f70 <inc_lock+0x118>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4413      	add	r3, r2
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f2      	bne.n	8005ebe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d101      	bne.n	8005ee2 <inc_lock+0x8a>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e040      	b.n	8005f64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4922      	ldr	r1, [pc, #136]	; (8005f70 <inc_lock+0x118>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	440b      	add	r3, r1
 8005eee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	491e      	ldr	r1, [pc, #120]	; (8005f70 <inc_lock+0x118>)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	440b      	add	r3, r1
 8005efc:	3304      	adds	r3, #4
 8005efe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	491a      	ldr	r1, [pc, #104]	; (8005f70 <inc_lock+0x118>)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005f10:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <inc_lock+0x118>)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	4413      	add	r3, r2
 8005f18:	330c      	adds	r3, #12
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <inc_lock+0xe0>
 8005f24:	4a12      	ldr	r2, [pc, #72]	; (8005f70 <inc_lock+0x118>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	4413      	add	r3, r2
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <inc_lock+0xe0>
 8005f34:	2300      	movs	r3, #0
 8005f36:	e015      	b.n	8005f64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d108      	bne.n	8005f50 <inc_lock+0xf8>
 8005f3e:	4a0c      	ldr	r2, [pc, #48]	; (8005f70 <inc_lock+0x118>)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	4413      	add	r3, r2
 8005f46:	330c      	adds	r3, #12
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	e001      	b.n	8005f54 <inc_lock+0xfc>
 8005f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f54:	4906      	ldr	r1, [pc, #24]	; (8005f70 <inc_lock+0x118>)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	440b      	add	r3, r1
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	200000fc 	.word	0x200000fc

08005f74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d825      	bhi.n	8005fd4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005f88:	4a17      	ldr	r2, [pc, #92]	; (8005fe8 <dec_lock+0x74>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	4413      	add	r3, r2
 8005f90:	330c      	adds	r3, #12
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005f96:	89fb      	ldrh	r3, [r7, #14]
 8005f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9c:	d101      	bne.n	8005fa2 <dec_lock+0x2e>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005fa2:	89fb      	ldrh	r3, [r7, #14]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <dec_lock+0x3a>
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005fae:	4a0e      	ldr	r2, [pc, #56]	; (8005fe8 <dec_lock+0x74>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	4413      	add	r3, r2
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	89fa      	ldrh	r2, [r7, #14]
 8005fba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <dec_lock+0x5a>
 8005fc2:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <dec_lock+0x74>)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	4413      	add	r3, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	737b      	strb	r3, [r7, #13]
 8005fd2:	e001      	b.n	8005fd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005fd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	200000fc 	.word	0x200000fc

08005fec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e010      	b.n	800601c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ffa:	4a0d      	ldr	r2, [pc, #52]	; (8006030 <clear_lock+0x44>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4413      	add	r3, r2
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d105      	bne.n	8006016 <clear_lock+0x2a>
 800600a:	4a09      	ldr	r2, [pc, #36]	; (8006030 <clear_lock+0x44>)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	4413      	add	r3, r2
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d9eb      	bls.n	8005ffa <clear_lock+0xe>
	}
}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	200000fc 	.word	0x200000fc

08006034 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	78db      	ldrb	r3, [r3, #3]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d034      	beq.n	80060b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	7858      	ldrb	r0, [r3, #1]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006058:	2301      	movs	r3, #1
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	f7ff fd40 	bl	8005ae0 <disk_write>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
 800606a:	e022      	b.n	80060b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	429a      	cmp	r2, r3
 8006080:	d217      	bcs.n	80060b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	789b      	ldrb	r3, [r3, #2]
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e010      	b.n	80060ac <sync_window+0x78>
					wsect += fs->fsize;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	7858      	ldrb	r0, [r3, #1]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800609e:	2301      	movs	r3, #1
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	f7ff fd1d 	bl	8005ae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d8eb      	bhi.n	800608a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d01b      	beq.n	800610c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ffad 	bl	8006034 <sync_window>
 80060da:	4603      	mov	r3, r0
 80060dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d113      	bne.n	800610c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7858      	ldrb	r0, [r3, #1]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060ee:	2301      	movs	r3, #1
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	f7ff fcd5 	bl	8005aa0 <disk_read>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d004      	beq.n	8006106 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006100:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ff87 	bl	8006034 <sync_window>
 8006126:	4603      	mov	r3, r0
 8006128:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d158      	bne.n	80061e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b03      	cmp	r3, #3
 8006136:	d148      	bne.n	80061ca <sync_fs+0xb2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	791b      	ldrb	r3, [r3, #4]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d144      	bne.n	80061ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3330      	adds	r3, #48	; 0x30
 8006144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fda9 	bl	8005ca2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3330      	adds	r3, #48	; 0x30
 8006154:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006158:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff fd38 	bl	8005bd2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3330      	adds	r3, #48	; 0x30
 8006166:	4921      	ldr	r1, [pc, #132]	; (80061ec <sync_fs+0xd4>)
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fd4d 	bl	8005c08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3330      	adds	r3, #48	; 0x30
 8006172:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006176:	491e      	ldr	r1, [pc, #120]	; (80061f0 <sync_fs+0xd8>)
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fd45 	bl	8005c08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3330      	adds	r3, #48	; 0x30
 8006182:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7ff fd3b 	bl	8005c08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3330      	adds	r3, #48	; 0x30
 8006196:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f7ff fd31 	bl	8005c08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7858      	ldrb	r0, [r3, #1]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061be:	2301      	movs	r3, #1
 80061c0:	f7ff fc8e 	bl	8005ae0 <disk_write>
			fs->fsi_flag = 0;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fca4 	bl	8005b20 <disk_ioctl>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <sync_fs+0xca>
 80061de:	2301      	movs	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	41615252 	.word	0x41615252
 80061f0:	61417272 	.word	0x61417272

080061f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	3b02      	subs	r3, #2
 8006202:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	3b02      	subs	r3, #2
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d301      	bcc.n	8006214 <clust2sect+0x20>
 8006210:	2300      	movs	r3, #0
 8006212:	e008      	b.n	8006226 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	895b      	ldrh	r3, [r3, #10]
 8006218:	461a      	mov	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	fb03 f202 	mul.w	r2, r3, r2
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	4413      	add	r3, r2
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b086      	sub	sp, #24
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d904      	bls.n	8006252 <get_fat+0x20>
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006252:	2301      	movs	r3, #1
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e08c      	b.n	8006372 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800625c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d045      	beq.n	80062f2 <get_fat+0xc0>
 8006266:	2b03      	cmp	r3, #3
 8006268:	d05d      	beq.n	8006326 <get_fat+0xf4>
 800626a:	2b01      	cmp	r3, #1
 800626c:	d177      	bne.n	800635e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	0a5b      	lsrs	r3, r3, #9
 8006284:	4413      	add	r3, r2
 8006286:	4619      	mov	r1, r3
 8006288:	6938      	ldr	r0, [r7, #16]
 800628a:	f7ff ff17 	bl	80060bc <move_window>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d167      	bne.n	8006364 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	60fa      	str	r2, [r7, #12]
 800629a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062a6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0a5b      	lsrs	r3, r3, #9
 80062b0:	4413      	add	r3, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	6938      	ldr	r0, [r7, #16]
 80062b6:	f7ff ff01 	bl	80060bc <move_window>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d153      	bne.n	8006368 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	461a      	mov	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <get_fat+0xb6>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	e002      	b.n	80062ee <get_fat+0xbc>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ee:	617b      	str	r3, [r7, #20]
			break;
 80062f0:	e03f      	b.n	8006372 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	4413      	add	r3, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	6938      	ldr	r0, [r7, #16]
 8006300:	f7ff fedc 	bl	80060bc <move_window>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d130      	bne.n	800636c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006318:	4413      	add	r3, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fc1e 	bl	8005b5c <ld_word>
 8006320:	4603      	mov	r3, r0
 8006322:	617b      	str	r3, [r7, #20]
			break;
 8006324:	e025      	b.n	8006372 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	09db      	lsrs	r3, r3, #7
 800632e:	4413      	add	r3, r2
 8006330:	4619      	mov	r1, r3
 8006332:	6938      	ldr	r0, [r7, #16]
 8006334:	f7ff fec2 	bl	80060bc <move_window>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d118      	bne.n	8006370 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800634c:	4413      	add	r3, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fc1c 	bl	8005b8c <ld_dword>
 8006354:	4603      	mov	r3, r0
 8006356:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800635a:	617b      	str	r3, [r7, #20]
			break;
 800635c:	e009      	b.n	8006372 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800635e:	2301      	movs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e006      	b.n	8006372 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006364:	bf00      	nop
 8006366:	e004      	b.n	8006372 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006368:	bf00      	nop
 800636a:	e002      	b.n	8006372 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006370:	bf00      	nop
		}
	}

	return val;
 8006372:	697b      	ldr	r3, [r7, #20]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800637c:	b590      	push	{r4, r7, lr}
 800637e:	b089      	sub	sp, #36	; 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006388:	2302      	movs	r3, #2
 800638a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b01      	cmp	r3, #1
 8006390:	f240 80d6 	bls.w	8006540 <put_fat+0x1c4>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	f080 80d0 	bcs.w	8006540 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d073      	beq.n	8006490 <put_fat+0x114>
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	f000 8091 	beq.w	80064d0 <put_fat+0x154>
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	f040 80c6 	bne.w	8006540 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4413      	add	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1a      	ldr	r2, [r3, #32]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	0a5b      	lsrs	r3, r3, #9
 80063ca:	4413      	add	r3, r2
 80063cc:	4619      	mov	r1, r3
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff fe74 	bl	80060bc <move_window>
 80063d4:	4603      	mov	r3, r0
 80063d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063d8:	7ffb      	ldrb	r3, [r7, #31]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 80a9 	bne.w	8006532 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	1c59      	adds	r1, r3, #1
 80063ea:	61b9      	str	r1, [r7, #24]
 80063ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f0:	4413      	add	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00d      	beq.n	800641a <put_fat+0x9e>
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b25b      	sxtb	r3, r3
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	b25a      	sxtb	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	b25b      	sxtb	r3, r3
 8006412:	4313      	orrs	r3, r2
 8006414:	b25b      	sxtb	r3, r3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	e001      	b.n	800641e <put_fat+0xa2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	0a5b      	lsrs	r3, r3, #9
 8006430:	4413      	add	r3, r2
 8006432:	4619      	mov	r1, r3
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff fe41 	bl	80060bc <move_window>
 800643a:	4603      	mov	r3, r0
 800643c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800643e:	7ffb      	ldrb	r3, [r7, #31]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d178      	bne.n	8006536 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006450:	4413      	add	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <put_fat+0xea>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	b2db      	uxtb	r3, r3
 8006464:	e00e      	b.n	8006484 <put_fat+0x108>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f023 030f 	bic.w	r3, r3, #15
 8006470:	b25a      	sxtb	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	b25b      	sxtb	r3, r3
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	b25b      	sxtb	r3, r3
 800647e:	4313      	orrs	r3, r2
 8006480:	b25b      	sxtb	r3, r3
 8006482:	b2db      	uxtb	r3, r3
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	70da      	strb	r2, [r3, #3]
			break;
 800648e:	e057      	b.n	8006540 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a1a      	ldr	r2, [r3, #32]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	4413      	add	r3, r2
 800649a:	4619      	mov	r1, r3
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff fe0d 	bl	80060bc <move_window>
 80064a2:	4603      	mov	r3, r0
 80064a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064a6:	7ffb      	ldrb	r3, [r7, #31]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d146      	bne.n	800653a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80064ba:	4413      	add	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	b292      	uxth	r2, r2
 80064c0:	4611      	mov	r1, r2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fb85 	bl	8005bd2 <st_word>
			fs->wflag = 1;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	70da      	strb	r2, [r3, #3]
			break;
 80064ce:	e037      	b.n	8006540 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	4413      	add	r3, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fded 	bl	80060bc <move_window>
 80064e2:	4603      	mov	r3, r0
 80064e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d128      	bne.n	800653e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006500:	4413      	add	r3, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fb42 	bl	8005b8c <ld_dword>
 8006508:	4603      	mov	r3, r0
 800650a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800650e:	4323      	orrs	r3, r4
 8006510:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006520:	4413      	add	r3, r2
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fb6f 	bl	8005c08 <st_dword>
			fs->wflag = 1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	70da      	strb	r2, [r3, #3]
			break;
 8006530:	e006      	b.n	8006540 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006532:	bf00      	nop
 8006534:	e004      	b.n	8006540 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800653e:	bf00      	nop
		}
	}
	return res;
 8006540:	7ffb      	ldrb	r3, [r7, #31]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3724      	adds	r7, #36	; 0x24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd90      	pop	{r4, r7, pc}

0800654a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b088      	sub	sp, #32
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d904      	bls.n	8006570 <remove_chain+0x26>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d301      	bcc.n	8006574 <remove_chain+0x2a>
 8006570:	2302      	movs	r3, #2
 8006572:	e04b      	b.n	800660c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00c      	beq.n	8006594 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800657a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	69b8      	ldr	r0, [r7, #24]
 8006582:	f7ff fefb 	bl	800637c <put_fat>
 8006586:	4603      	mov	r3, r0
 8006588:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800658a:	7ffb      	ldrb	r3, [r7, #31]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <remove_chain+0x4a>
 8006590:	7ffb      	ldrb	r3, [r7, #31]
 8006592:	e03b      	b.n	800660c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff fe4b 	bl	8006232 <get_fat>
 800659c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d031      	beq.n	8006608 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <remove_chain+0x64>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e02e      	b.n	800660c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b4:	d101      	bne.n	80065ba <remove_chain+0x70>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e028      	b.n	800660c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80065ba:	2200      	movs	r2, #0
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	69b8      	ldr	r0, [r7, #24]
 80065c0:	f7ff fedc 	bl	800637c <put_fat>
 80065c4:	4603      	mov	r3, r0
 80065c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80065c8:	7ffb      	ldrb	r3, [r7, #31]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <remove_chain+0x88>
 80065ce:	7ffb      	ldrb	r3, [r7, #31]
 80065d0:	e01c      	b.n	800660c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	3b02      	subs	r3, #2
 80065dc:	429a      	cmp	r2, r3
 80065de:	d20b      	bcs.n	80065f8 <remove_chain+0xae>
			fs->free_clst++;
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	791b      	ldrb	r3, [r3, #4]
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	d3c6      	bcc.n	8006594 <remove_chain+0x4a>
 8006606:	e000      	b.n	800660a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006608:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10d      	bne.n	8006646 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <create_chain+0x2c>
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	429a      	cmp	r2, r3
 800663e:	d31b      	bcc.n	8006678 <create_chain+0x64>
 8006640:	2301      	movs	r3, #1
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	e018      	b.n	8006678 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fdf2 	bl	8006232 <get_fat>
 800664e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d801      	bhi.n	800665a <create_chain+0x46>
 8006656:	2301      	movs	r3, #1
 8006658:	e070      	b.n	800673c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006660:	d101      	bne.n	8006666 <create_chain+0x52>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	e06a      	b.n	800673c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	429a      	cmp	r2, r3
 800666e:	d201      	bcs.n	8006674 <create_chain+0x60>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	e063      	b.n	800673c <create_chain+0x128>
		scl = clst;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3301      	adds	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	429a      	cmp	r2, r3
 800668a:	d307      	bcc.n	800669c <create_chain+0x88>
				ncl = 2;
 800668c:	2302      	movs	r3, #2
 800668e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	429a      	cmp	r2, r3
 8006696:	d901      	bls.n	800669c <create_chain+0x88>
 8006698:	2300      	movs	r3, #0
 800669a:	e04f      	b.n	800673c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800669c:	69f9      	ldr	r1, [r7, #28]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fdc7 	bl	8006232 <get_fat>
 80066a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d003      	beq.n	80066ba <create_chain+0xa6>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b8:	d101      	bne.n	80066be <create_chain+0xaa>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	e03e      	b.n	800673c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d1da      	bne.n	800667c <create_chain+0x68>
 80066c6:	2300      	movs	r3, #0
 80066c8:	e038      	b.n	800673c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80066ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80066cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	6938      	ldr	r0, [r7, #16]
 80066d4:	f7ff fe52 	bl	800637c <put_fat>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <create_chain+0xe2>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6938      	ldr	r0, [r7, #16]
 80066ee:	f7ff fe45 	bl	800637c <put_fat>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d116      	bne.n	800672a <create_chain+0x116>
		fs->last_clst = ncl;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	3b02      	subs	r3, #2
 800670c:	429a      	cmp	r2, r3
 800670e:	d804      	bhi.n	800671a <create_chain+0x106>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	1e5a      	subs	r2, r3, #1
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	791b      	ldrb	r3, [r3, #4]
 800671e:	f043 0301 	orr.w	r3, r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	711a      	strb	r2, [r3, #4]
 8006728:	e007      	b.n	800673a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d102      	bne.n	8006736 <create_chain+0x122>
 8006730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006734:	e000      	b.n	8006738 <create_chain+0x124>
 8006736:	2301      	movs	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800673a:	69fb      	ldr	r3, [r7, #28]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	3304      	adds	r3, #4
 800675a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	0a5b      	lsrs	r3, r3, #9
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	8952      	ldrh	r2, [r2, #10]
 8006764:	fbb3 f3f2 	udiv	r3, r3, r2
 8006768:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	613a      	str	r2, [r7, #16]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <clmt_clust+0x3a>
 800677a:	2300      	movs	r3, #0
 800677c:	e010      	b.n	80067a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	d307      	bcc.n	8006796 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3304      	adds	r3, #4
 8006792:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006794:	e7e9      	b.n	800676a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006796:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4413      	add	r3, r2
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c2:	d204      	bcs.n	80067ce <dir_sdi+0x22>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80067ce:	2302      	movs	r3, #2
 80067d0:	e063      	b.n	800689a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <dir_sdi+0x46>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d902      	bls.n	80067f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	8912      	ldrh	r2, [r2, #8]
 8006800:	4293      	cmp	r3, r2
 8006802:	d301      	bcc.n	8006808 <dir_sdi+0x5c>
 8006804:	2302      	movs	r3, #2
 8006806:	e048      	b.n	800689a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	61da      	str	r2, [r3, #28]
 8006810:	e029      	b.n	8006866 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	895b      	ldrh	r3, [r3, #10]
 8006816:	025b      	lsls	r3, r3, #9
 8006818:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800681a:	e019      	b.n	8006850 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fd06 	bl	8006232 <get_fat>
 8006826:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800682e:	d101      	bne.n	8006834 <dir_sdi+0x88>
 8006830:	2301      	movs	r3, #1
 8006832:	e032      	b.n	800689a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d904      	bls.n	8006844 <dir_sdi+0x98>
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	429a      	cmp	r2, r3
 8006842:	d301      	bcc.n	8006848 <dir_sdi+0x9c>
 8006844:	2302      	movs	r3, #2
 8006846:	e028      	b.n	800689a <dir_sdi+0xee>
			ofs -= csz;
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	429a      	cmp	r2, r3
 8006856:	d2e1      	bcs.n	800681c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	6938      	ldr	r0, [r7, #16]
 800685c:	f7ff fcca 	bl	80061f4 <clust2sect>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <dir_sdi+0xcc>
 8006874:	2302      	movs	r3, #2
 8006876:	e010      	b.n	800689a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	0a5b      	lsrs	r3, r3, #9
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	441a      	add	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b086      	sub	sp, #24
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	3320      	adds	r3, #32
 80068b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <dir_next+0x28>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068c8:	d301      	bcc.n	80068ce <dir_next+0x2c>
 80068ca:	2304      	movs	r3, #4
 80068cc:	e0aa      	b.n	8006a24 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f040 8098 	bne.w	8006a0a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	8912      	ldrh	r2, [r2, #8]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f0c0 8088 	bcc.w	8006a0a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	61da      	str	r2, [r3, #28]
 8006900:	2304      	movs	r3, #4
 8006902:	e08f      	b.n	8006a24 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	0a5b      	lsrs	r3, r3, #9
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	8952      	ldrh	r2, [r2, #10]
 800690c:	3a01      	subs	r2, #1
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d17a      	bne.n	8006a0a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	4619      	mov	r1, r3
 800691c:	4610      	mov	r0, r2
 800691e:	f7ff fc88 	bl	8006232 <get_fat>
 8006922:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d801      	bhi.n	800692e <dir_next+0x8c>
 800692a:	2302      	movs	r3, #2
 800692c:	e07a      	b.n	8006a24 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006934:	d101      	bne.n	800693a <dir_next+0x98>
 8006936:	2301      	movs	r3, #1
 8006938:	e074      	b.n	8006a24 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	d358      	bcc.n	80069f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	61da      	str	r2, [r3, #28]
 8006950:	2304      	movs	r3, #4
 8006952:	e067      	b.n	8006a24 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	4619      	mov	r1, r3
 800695c:	4610      	mov	r0, r2
 800695e:	f7ff fe59 	bl	8006614 <create_chain>
 8006962:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <dir_next+0xcc>
 800696a:	2307      	movs	r3, #7
 800696c:	e05a      	b.n	8006a24 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <dir_next+0xd6>
 8006974:	2302      	movs	r3, #2
 8006976:	e055      	b.n	8006a24 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800697e:	d101      	bne.n	8006984 <dir_next+0xe2>
 8006980:	2301      	movs	r3, #1
 8006982:	e04f      	b.n	8006a24 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fb55 	bl	8006034 <sync_window>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <dir_next+0xf2>
 8006990:	2301      	movs	r3, #1
 8006992:	e047      	b.n	8006a24 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3330      	adds	r3, #48	; 0x30
 8006998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff f97f 	bl	8005ca2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fc22 	bl	80061f4 <clust2sect>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80069b6:	e012      	b.n	80069de <dir_next+0x13c>
						fs->wflag = 1;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff fb38 	bl	8006034 <sync_window>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <dir_next+0x12c>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e02a      	b.n	8006a24 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	895b      	ldrh	r3, [r3, #10]
 80069e2:	461a      	mov	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d3e6      	bcc.n	80069b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80069fc:	6979      	ldr	r1, [r7, #20]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff fbf8 	bl	80061f4 <clust2sect>
 8006a04:	4602      	mov	r2, r0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff feb4 	bl	80067ac <dir_sdi>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d12b      	bne.n	8006aa6 <dir_alloc+0x7a>
		n = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff fb2f 	bl	80060bc <move_window>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d11d      	bne.n	8006aa4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2be5      	cmp	r3, #229	; 0xe5
 8006a70:	d004      	beq.n	8006a7c <dir_alloc+0x50>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d107      	bne.n	8006a8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d102      	bne.n	8006a90 <dir_alloc+0x64>
 8006a8a:	e00c      	b.n	8006aa6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a90:	2101      	movs	r1, #1
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ff05 	bl	80068a2 <dir_next>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0d7      	beq.n	8006a52 <dir_alloc+0x26>
 8006aa2:	e000      	b.n	8006aa6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006aa4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d101      	bne.n	8006ab0 <dir_alloc+0x84>
 8006aac:	2307      	movs	r3, #7
 8006aae:	75fb      	strb	r3, [r7, #23]
	return res;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	331a      	adds	r3, #26
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff f847 	bl	8005b5c <ld_word>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d109      	bne.n	8006aee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff f83c 	bl	8005b5c <ld_word>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	331a      	adds	r3, #26
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	b292      	uxth	r2, r2
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff f85f 	bl	8005bd2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d109      	bne.n	8006b30 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f103 0214 	add.w	r2, r3, #20
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	0c1b      	lsrs	r3, r3, #16
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f7ff f851 	bl	8005bd2 <st_word>
	}
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b46:	2100      	movs	r1, #0
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff fe2f 	bl	80067ac <dir_sdi>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <dir_find+0x24>
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	e03e      	b.n	8006bda <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	4619      	mov	r1, r3
 8006b62:	6938      	ldr	r0, [r7, #16]
 8006b64:	f7ff faaa 	bl	80060bc <move_window>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d12f      	bne.n	8006bd2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <dir_find+0x4e>
 8006b80:	2304      	movs	r3, #4
 8006b82:	75fb      	strb	r3, [r7, #23]
 8006b84:	e028      	b.n	8006bd8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	330b      	adds	r3, #11
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	330b      	adds	r3, #11
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <dir_find+0x86>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a18      	ldr	r0, [r3, #32]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3324      	adds	r3, #36	; 0x24
 8006bb0:	220b      	movs	r2, #11
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f7ff f88f 	bl	8005cd6 <mem_cmp>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fe6e 	bl	80068a2 <dir_next>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0c5      	beq.n	8006b5c <dir_find+0x24>
 8006bd0:	e002      	b.n	8006bd8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006bd2:	bf00      	nop
 8006bd4:	e000      	b.n	8006bd8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006bd6:	bf00      	nop

	return res;
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff ff1a 	bl	8006a2c <dir_alloc>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d11c      	bne.n	8006c3c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	4619      	mov	r1, r3
 8006c08:	68b8      	ldr	r0, [r7, #8]
 8006c0a:	f7ff fa57 	bl	80060bc <move_window>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d111      	bne.n	8006c3c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff f83e 	bl	8005ca2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a18      	ldr	r0, [r3, #32]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3324      	adds	r3, #36	; 0x24
 8006c2e:	220b      	movs	r2, #11
 8006c30:	4619      	mov	r1, r3
 8006c32:	f7ff f815 	bl	8005c60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c5e:	220b      	movs	r2, #11
 8006c60:	2120      	movs	r1, #32
 8006c62:	68b8      	ldr	r0, [r7, #8]
 8006c64:	f7ff f81d 	bl	8005ca2 <mem_set>
	si = i = 0; ni = 8;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	2308      	movs	r3, #8
 8006c72:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	617a      	str	r2, [r7, #20]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c82:	7ffb      	ldrb	r3, [r7, #31]
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d94e      	bls.n	8006d26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c88:	7ffb      	ldrb	r3, [r7, #31]
 8006c8a:	2b2f      	cmp	r3, #47	; 0x2f
 8006c8c:	d006      	beq.n	8006c9c <create_name+0x54>
 8006c8e:	7ffb      	ldrb	r3, [r7, #31]
 8006c90:	2b5c      	cmp	r3, #92	; 0x5c
 8006c92:	d110      	bne.n	8006cb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c94:	e002      	b.n	8006c9c <create_name+0x54>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ca6:	d0f6      	beq.n	8006c96 <create_name+0x4e>
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8006cb2:	d0f0      	beq.n	8006c96 <create_name+0x4e>
			break;
 8006cb4:	e038      	b.n	8006d28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006cb6:	7ffb      	ldrb	r3, [r7, #31]
 8006cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cba:	d003      	beq.n	8006cc4 <create_name+0x7c>
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d30c      	bcc.n	8006cde <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b0b      	cmp	r3, #11
 8006cc8:	d002      	beq.n	8006cd0 <create_name+0x88>
 8006cca:	7ffb      	ldrb	r3, [r7, #31]
 8006ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8006cce:	d001      	beq.n	8006cd4 <create_name+0x8c>
 8006cd0:	2306      	movs	r3, #6
 8006cd2:	e044      	b.n	8006d5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	230b      	movs	r3, #11
 8006cda:	61bb      	str	r3, [r7, #24]
			continue;
 8006cdc:	e022      	b.n	8006d24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006cde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da04      	bge.n	8006cf0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
 8006ce8:	3b80      	subs	r3, #128	; 0x80
 8006cea:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <create_name+0x120>)
 8006cec:	5cd3      	ldrb	r3, [r2, r3]
 8006cee:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006cf0:	7ffb      	ldrb	r3, [r7, #31]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	481d      	ldr	r0, [pc, #116]	; (8006d6c <create_name+0x124>)
 8006cf6:	f7ff f815 	bl	8005d24 <chk_chr>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <create_name+0xbc>
 8006d00:	2306      	movs	r3, #6
 8006d02:	e02c      	b.n	8006d5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006d04:	7ffb      	ldrb	r3, [r7, #31]
 8006d06:	2b60      	cmp	r3, #96	; 0x60
 8006d08:	d905      	bls.n	8006d16 <create_name+0xce>
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
 8006d0c:	2b7a      	cmp	r3, #122	; 0x7a
 8006d0e:	d802      	bhi.n	8006d16 <create_name+0xce>
 8006d10:	7ffb      	ldrb	r3, [r7, #31]
 8006d12:	3b20      	subs	r3, #32
 8006d14:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	613a      	str	r2, [r7, #16]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	4413      	add	r3, r2
 8006d20:	7ffa      	ldrb	r2, [r7, #31]
 8006d22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d24:	e7a6      	b.n	8006c74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	441a      	add	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <create_name+0xf4>
 8006d38:	2306      	movs	r3, #6
 8006d3a:	e010      	b.n	8006d5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2be5      	cmp	r3, #229	; 0xe5
 8006d42:	d102      	bne.n	8006d4a <create_name+0x102>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2205      	movs	r2, #5
 8006d48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d4a:	7ffb      	ldrb	r3, [r7, #31]
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d801      	bhi.n	8006d54 <create_name+0x10c>
 8006d50:	2204      	movs	r2, #4
 8006d52:	e000      	b.n	8006d56 <create_name+0x10e>
 8006d54:	2200      	movs	r2, #0
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	330b      	adds	r3, #11
 8006d5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	080086b4 	.word	0x080086b4
 8006d6c:	08008638 	.word	0x08008638

08006d70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d84:	e002      	b.n	8006d8c <follow_path+0x1c>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b2f      	cmp	r3, #47	; 0x2f
 8006d92:	d0f8      	beq.n	8006d86 <follow_path+0x16>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b5c      	cmp	r3, #92	; 0x5c
 8006d9a:	d0f4      	beq.n	8006d86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b1f      	cmp	r3, #31
 8006da8:	d80a      	bhi.n	8006dc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2280      	movs	r2, #128	; 0x80
 8006dae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff fcf9 	bl	80067ac <dir_sdi>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]
 8006dbe:	e043      	b.n	8006e48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ff3f 	bl	8006c48 <create_name>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d134      	bne.n	8006e3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff feaf 	bl	8006b38 <dir_find>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006de4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d127      	bne.n	8006e42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d122      	bne.n	8006e42 <follow_path+0xd2>
 8006dfc:	2305      	movs	r3, #5
 8006dfe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e00:	e01f      	b.n	8006e42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11c      	bne.n	8006e46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	799b      	ldrb	r3, [r3, #6]
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e18:	2305      	movs	r3, #5
 8006e1a:	75fb      	strb	r3, [r7, #23]
 8006e1c:	e014      	b.n	8006e48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2c:	4413      	add	r3, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fe42 	bl	8006aba <ld_clust>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e3c:	e7c0      	b.n	8006dc0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e3e:	bf00      	nop
 8006e40:	e002      	b.n	8006e48 <follow_path+0xd8>
				break;
 8006e42:	bf00      	nop
 8006e44:	e000      	b.n	8006e48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e46:	bf00      	nop
			}
		}
	}

	return res;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b087      	sub	sp, #28
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d031      	beq.n	8006ecc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	e002      	b.n	8006e76 <get_ldnumber+0x24>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	3301      	adds	r3, #1
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d903      	bls.n	8006e86 <get_ldnumber+0x34>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b3a      	cmp	r3, #58	; 0x3a
 8006e84:	d1f4      	bne.n	8006e70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b3a      	cmp	r3, #58	; 0x3a
 8006e8c:	d11c      	bne.n	8006ec8 <get_ldnumber+0x76>
			tp = *path;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	60fa      	str	r2, [r7, #12]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	3b30      	subs	r3, #48	; 0x30
 8006e9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b09      	cmp	r3, #9
 8006ea4:	d80e      	bhi.n	8006ec4 <get_ldnumber+0x72>
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d10a      	bne.n	8006ec4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d107      	bne.n	8006ec4 <get_ldnumber+0x72>
					vol = (int)i;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	e002      	b.n	8006ece <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ecc:	693b      	ldr	r3, [r7, #16]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	70da      	strb	r2, [r3, #3]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ef2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff f8e0 	bl	80060bc <move_window>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <check_fs+0x2a>
 8006f02:	2304      	movs	r3, #4
 8006f04:	e038      	b.n	8006f78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3330      	adds	r3, #48	; 0x30
 8006f0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fe24 	bl	8005b5c <ld_word>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <check_fs+0x48>
 8006f20:	2303      	movs	r3, #3
 8006f22:	e029      	b.n	8006f78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f2a:	2be9      	cmp	r3, #233	; 0xe9
 8006f2c:	d009      	beq.n	8006f42 <check_fs+0x66>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f34:	2beb      	cmp	r3, #235	; 0xeb
 8006f36:	d11e      	bne.n	8006f76 <check_fs+0x9a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f3e:	2b90      	cmp	r3, #144	; 0x90
 8006f40:	d119      	bne.n	8006f76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3330      	adds	r3, #48	; 0x30
 8006f46:	3336      	adds	r3, #54	; 0x36
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe fe1f 	bl	8005b8c <ld_dword>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f54:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <check_fs+0xa4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d101      	bne.n	8006f5e <check_fs+0x82>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e00c      	b.n	8006f78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3330      	adds	r3, #48	; 0x30
 8006f62:	3352      	adds	r3, #82	; 0x52
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fe11 	bl	8005b8c <ld_dword>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <check_fs+0xa8>)
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d101      	bne.n	8006f76 <check_fs+0x9a>
 8006f72:	2300      	movs	r3, #0
 8006f74:	e000      	b.n	8006f78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f76:	2302      	movs	r3, #2
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	00544146 	.word	0x00544146
 8006f84:	33544146 	.word	0x33544146

08006f88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b096      	sub	sp, #88	; 0x58
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7ff ff58 	bl	8006e52 <get_ldnumber>
 8006fa2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da01      	bge.n	8006fae <find_volume+0x26>
 8006faa:	230b      	movs	r3, #11
 8006fac:	e22e      	b.n	800740c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fae:	4aa8      	ldr	r2, [pc, #672]	; (8007250 <find_volume+0x2c8>)
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <find_volume+0x3a>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	e224      	b.n	800740c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01a      	beq.n	800700e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe fd1f 	bl	8005a20 <disk_status>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10c      	bne.n	800700e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <find_volume+0x82>
 8006ffa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007006:	230a      	movs	r3, #10
 8007008:	e200      	b.n	800740c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800700a:	2300      	movs	r3, #0
 800700c:	e1fe      	b.n	800740c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007016:	b2da      	uxtb	r2, r3
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe fd17 	bl	8005a54 <disk_initialize>
 8007026:	4603      	mov	r3, r0
 8007028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800702c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007038:	2303      	movs	r3, #3
 800703a:	e1e7      	b.n	800740c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <find_volume+0xca>
 8007042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800704e:	230a      	movs	r3, #10
 8007050:	e1dc      	b.n	800740c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007056:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007058:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800705a:	f7ff ff3f 	bl	8006edc <check_fs>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007068:	2b02      	cmp	r3, #2
 800706a:	d14b      	bne.n	8007104 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800706c:	2300      	movs	r3, #0
 800706e:	643b      	str	r3, [r7, #64]	; 0x40
 8007070:	e01f      	b.n	80070b2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007080:	4413      	add	r3, r2
 8007082:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	3304      	adds	r3, #4
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d006      	beq.n	800709c <find_volume+0x114>
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	3308      	adds	r3, #8
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fd7a 	bl	8005b8c <ld_dword>
 8007098:	4602      	mov	r2, r0
 800709a:	e000      	b.n	800709e <find_volume+0x116>
 800709c:	2200      	movs	r2, #0
 800709e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80070a6:	440b      	add	r3, r1
 80070a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ae:	3301      	adds	r3, #1
 80070b0:	643b      	str	r3, [r7, #64]	; 0x40
 80070b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d9dc      	bls.n	8007072 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070b8:	2300      	movs	r3, #0
 80070ba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80070bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <find_volume+0x140>
 80070c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c4:	3b01      	subs	r3, #1
 80070c6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80070d0:	4413      	add	r3, r2
 80070d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <find_volume+0x162>
 80070de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070e2:	f7ff fefb 	bl	8006edc <check_fs>
 80070e6:	4603      	mov	r3, r0
 80070e8:	e000      	b.n	80070ec <find_volume+0x164>
 80070ea:	2303      	movs	r3, #3
 80070ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80070f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d905      	bls.n	8007104 <find_volume+0x17c>
 80070f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fa:	3301      	adds	r3, #1
 80070fc:	643b      	str	r3, [r7, #64]	; 0x40
 80070fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007100:	2b03      	cmp	r3, #3
 8007102:	d9e1      	bls.n	80070c8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007108:	2b04      	cmp	r3, #4
 800710a:	d101      	bne.n	8007110 <find_volume+0x188>
 800710c:	2301      	movs	r3, #1
 800710e:	e17d      	b.n	800740c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007114:	2b01      	cmp	r3, #1
 8007116:	d901      	bls.n	800711c <find_volume+0x194>
 8007118:	230d      	movs	r3, #13
 800711a:	e177      	b.n	800740c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	3330      	adds	r3, #48	; 0x30
 8007120:	330b      	adds	r3, #11
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fd1a 	bl	8005b5c <ld_word>
 8007128:	4603      	mov	r3, r0
 800712a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712e:	d001      	beq.n	8007134 <find_volume+0x1ac>
 8007130:	230d      	movs	r3, #13
 8007132:	e16b      	b.n	800740c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	3330      	adds	r3, #48	; 0x30
 8007138:	3316      	adds	r3, #22
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fd0e 	bl	8005b5c <ld_word>
 8007140:	4603      	mov	r3, r0
 8007142:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <find_volume+0x1d0>
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	3330      	adds	r3, #48	; 0x30
 800714e:	3324      	adds	r3, #36	; 0x24
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fd1b 	bl	8005b8c <ld_dword>
 8007156:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800715c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	789b      	ldrb	r3, [r3, #2]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d005      	beq.n	800717c <find_volume+0x1f4>
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d001      	beq.n	800717c <find_volume+0x1f4>
 8007178:	230d      	movs	r3, #13
 800717a:	e147      	b.n	800740c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	789b      	ldrb	r3, [r3, #2]
 8007180:	461a      	mov	r2, r3
 8007182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007190:	b29a      	uxth	r2, r3
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	895b      	ldrh	r3, [r3, #10]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d008      	beq.n	80071b0 <find_volume+0x228>
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	895b      	ldrh	r3, [r3, #10]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	895b      	ldrh	r3, [r3, #10]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <find_volume+0x22c>
 80071b0:	230d      	movs	r3, #13
 80071b2:	e12b      	b.n	800740c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	3330      	adds	r3, #48	; 0x30
 80071b8:	3311      	adds	r3, #17
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fcce 	bl	8005b5c <ld_word>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	891b      	ldrh	r3, [r3, #8]
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <find_volume+0x252>
 80071d6:	230d      	movs	r3, #13
 80071d8:	e118      	b.n	800740c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	3330      	adds	r3, #48	; 0x30
 80071de:	3313      	adds	r3, #19
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe fcbb 	bl	8005b5c <ld_word>
 80071e6:	4603      	mov	r3, r0
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <find_volume+0x276>
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	3330      	adds	r3, #48	; 0x30
 80071f4:	3320      	adds	r3, #32
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fcc8 	bl	8005b8c <ld_dword>
 80071fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	3330      	adds	r3, #48	; 0x30
 8007202:	330e      	adds	r3, #14
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fca9 	bl	8005b5c <ld_word>
 800720a:	4603      	mov	r3, r0
 800720c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800720e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <find_volume+0x290>
 8007214:	230d      	movs	r3, #13
 8007216:	e0f9      	b.n	800740c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007218:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800721a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800721c:	4413      	add	r3, r2
 800721e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007220:	8912      	ldrh	r2, [r2, #8]
 8007222:	0912      	lsrs	r2, r2, #4
 8007224:	b292      	uxth	r2, r2
 8007226:	4413      	add	r3, r2
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800722a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	429a      	cmp	r2, r3
 8007230:	d201      	bcs.n	8007236 <find_volume+0x2ae>
 8007232:	230d      	movs	r3, #13
 8007234:	e0ea      	b.n	800740c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800723e:	8952      	ldrh	r2, [r2, #10]
 8007240:	fbb3 f3f2 	udiv	r3, r3, r2
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d103      	bne.n	8007254 <find_volume+0x2cc>
 800724c:	230d      	movs	r3, #13
 800724e:	e0dd      	b.n	800740c <find_volume+0x484>
 8007250:	200000f4 	.word	0x200000f4
		fmt = FS_FAT32;
 8007254:	2303      	movs	r3, #3
 8007256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007260:	4293      	cmp	r3, r2
 8007262:	d802      	bhi.n	800726a <find_volume+0x2e2>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007270:	4293      	cmp	r3, r2
 8007272:	d802      	bhi.n	800727a <find_volume+0x2f2>
 8007274:	2301      	movs	r3, #1
 8007276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	1c9a      	adds	r2, r3, #2
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007286:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007288:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800728a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800728c:	441a      	add	r2, r3
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007292:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	441a      	add	r2, r3
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800729c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d11e      	bne.n	80072e2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	3330      	adds	r3, #48	; 0x30
 80072a8:	332a      	adds	r3, #42	; 0x2a
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fc56 	bl	8005b5c <ld_word>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <find_volume+0x332>
 80072b6:	230d      	movs	r3, #13
 80072b8:	e0a8      	b.n	800740c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	891b      	ldrh	r3, [r3, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <find_volume+0x33e>
 80072c2:	230d      	movs	r3, #13
 80072c4:	e0a2      	b.n	800740c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	3330      	adds	r3, #48	; 0x30
 80072ca:	332c      	adds	r3, #44	; 0x2c
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe fc5d 	bl	8005b8c <ld_dword>
 80072d2:	4602      	mov	r2, r0
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	647b      	str	r3, [r7, #68]	; 0x44
 80072e0:	e01f      	b.n	8007322 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	891b      	ldrh	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <find_volume+0x366>
 80072ea:	230d      	movs	r3, #13
 80072ec:	e08e      	b.n	800740c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	6a1a      	ldr	r2, [r3, #32]
 80072f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f4:	441a      	add	r2, r3
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d103      	bne.n	800730a <find_volume+0x382>
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	e00a      	b.n	8007320 <find_volume+0x398>
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	085a      	lsrs	r2, r3, #1
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007320:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007328:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	429a      	cmp	r2, r3
 8007330:	d201      	bcs.n	8007336 <find_volume+0x3ae>
 8007332:	230d      	movs	r3, #13
 8007334:	e06a      	b.n	800740c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800733c:	611a      	str	r2, [r3, #16]
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	2280      	movs	r2, #128	; 0x80
 800734a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800734c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007350:	2b03      	cmp	r3, #3
 8007352:	d149      	bne.n	80073e8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	3330      	adds	r3, #48	; 0x30
 8007358:	3330      	adds	r3, #48	; 0x30
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fbfe 	bl	8005b5c <ld_word>
 8007360:	4603      	mov	r3, r0
 8007362:	2b01      	cmp	r3, #1
 8007364:	d140      	bne.n	80073e8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007368:	3301      	adds	r3, #1
 800736a:	4619      	mov	r1, r3
 800736c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800736e:	f7fe fea5 	bl	80060bc <move_window>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d137      	bne.n	80073e8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	2200      	movs	r2, #0
 800737c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	3330      	adds	r3, #48	; 0x30
 8007382:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fbe8 	bl	8005b5c <ld_word>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007394:	429a      	cmp	r2, r3
 8007396:	d127      	bne.n	80073e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	3330      	adds	r3, #48	; 0x30
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe fbf5 	bl	8005b8c <ld_dword>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4b1b      	ldr	r3, [pc, #108]	; (8007414 <find_volume+0x48c>)
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d11e      	bne.n	80073e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	3330      	adds	r3, #48	; 0x30
 80073ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fbea 	bl	8005b8c <ld_dword>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <find_volume+0x490>)
 80073bc:	429a      	cmp	r2, r3
 80073be:	d113      	bne.n	80073e8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	3330      	adds	r3, #48	; 0x30
 80073c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fbdf 	bl	8005b8c <ld_dword>
 80073ce:	4602      	mov	r2, r0
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	3330      	adds	r3, #48	; 0x30
 80073d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fbd5 	bl	8005b8c <ld_dword>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <find_volume+0x494>)
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <find_volume+0x494>)
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <find_volume+0x494>)
 80073fe:	881a      	ldrh	r2, [r3, #0]
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007406:	f7fe fdf1 	bl	8005fec <clear_lock>
#endif
	return FR_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3758      	adds	r7, #88	; 0x58
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	41615252 	.word	0x41615252
 8007418:	61417272 	.word	0x61417272
 800741c:	200000f8 	.word	0x200000f8

08007420 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800742a:	2309      	movs	r3, #9
 800742c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01c      	beq.n	800746e <validate+0x4e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d018      	beq.n	800746e <validate+0x4e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d013      	beq.n	800746e <validate+0x4e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	889a      	ldrh	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	88db      	ldrh	r3, [r3, #6]
 8007450:	429a      	cmp	r2, r3
 8007452:	d10c      	bne.n	800746e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fae0 	bl	8005a20 <disk_status>
 8007460:	4603      	mov	r3, r0
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <validate+0x4e>
			res = FR_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <validate+0x5a>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	e000      	b.n	800747c <validate+0x5c>
 800747a:	2300      	movs	r3, #0
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	6013      	str	r3, [r2, #0]
	return res;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800749e:	f107 0310 	add.w	r3, r7, #16
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff fcd5 	bl	8006e52 <get_ldnumber>
 80074a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da01      	bge.n	80074b4 <f_mount+0x28>
 80074b0:	230b      	movs	r3, #11
 80074b2:	e02b      	b.n	800750c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074b4:	4a17      	ldr	r2, [pc, #92]	; (8007514 <f_mount+0x88>)
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074c4:	69b8      	ldr	r0, [r7, #24]
 80074c6:	f7fe fd91 	bl	8005fec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	490d      	ldr	r1, [pc, #52]	; (8007514 <f_mount+0x88>)
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <f_mount+0x66>
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d001      	beq.n	80074f6 <f_mount+0x6a>
 80074f2:	2300      	movs	r3, #0
 80074f4:	e00a      	b.n	800750c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80074f6:	f107 010c 	add.w	r1, r7, #12
 80074fa:	f107 0308 	add.w	r3, r7, #8
 80074fe:	2200      	movs	r2, #0
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fd41 	bl	8006f88 <find_volume>
 8007506:	4603      	mov	r3, r0
 8007508:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800750a:	7dfb      	ldrb	r3, [r7, #23]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	200000f4 	.word	0x200000f4

08007518 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b098      	sub	sp, #96	; 0x60
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <f_open+0x18>
 800752c:	2309      	movs	r3, #9
 800752e:	e1ad      	b.n	800788c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007536:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007538:	79fa      	ldrb	r2, [r7, #7]
 800753a:	f107 0110 	add.w	r1, r7, #16
 800753e:	f107 0308 	add.w	r3, r7, #8
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fd20 	bl	8006f88 <find_volume>
 8007548:	4603      	mov	r3, r0
 800754a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800754e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007552:	2b00      	cmp	r3, #0
 8007554:	f040 8191 	bne.w	800787a <f_open+0x362>
		dj.obj.fs = fs;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	f107 0314 	add.w	r3, r7, #20
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fc03 	bl	8006d70 <follow_path>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11a      	bne.n	80075ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007578:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800757c:	b25b      	sxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	da03      	bge.n	800758a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007582:	2306      	movs	r3, #6
 8007584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007588:	e011      	b.n	80075ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	461a      	mov	r2, r3
 800759c:	f107 0314 	add.w	r3, r7, #20
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fbda 	bl	8005d5c <chk_lock>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	f003 031c 	and.w	r3, r3, #28
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d07f      	beq.n	80076b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80075b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d017      	beq.n	80075f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80075c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d10e      	bne.n	80075e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075c8:	f7fe fc24 	bl	8005e14 <enq_lock>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <f_open+0xc8>
 80075d2:	f107 0314 	add.w	r3, r7, #20
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fb03 	bl	8006be2 <dir_register>
 80075dc:	4603      	mov	r3, r0
 80075de:	e000      	b.n	80075e2 <f_open+0xca>
 80075e0:	2312      	movs	r3, #18
 80075e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	f043 0308 	orr.w	r3, r3, #8
 80075ec:	71fb      	strb	r3, [r7, #7]
 80075ee:	e010      	b.n	8007612 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075f0:	7ebb      	ldrb	r3, [r7, #26]
 80075f2:	f003 0311 	and.w	r3, r3, #17
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <f_open+0xea>
					res = FR_DENIED;
 80075fa:	2307      	movs	r3, #7
 80075fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007600:	e007      	b.n	8007612 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <f_open+0xfa>
 800760c:	2308      	movs	r3, #8
 800760e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007616:	2b00      	cmp	r3, #0
 8007618:	d168      	bne.n	80076ec <f_open+0x1d4>
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	2b00      	cmp	r3, #0
 8007622:	d063      	beq.n	80076ec <f_open+0x1d4>
				dw = GET_FATTIME();
 8007624:	f7fe f99e 	bl	8005964 <get_fattime>
 8007628:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	330e      	adds	r3, #14
 800762e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fae9 	bl	8005c08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	3316      	adds	r3, #22
 800763a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe fae3 	bl	8005c08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007644:	330b      	adds	r3, #11
 8007646:	2220      	movs	r2, #32
 8007648:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fa32 	bl	8006aba <ld_clust>
 8007656:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800765c:	2200      	movs	r2, #0
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fa4a 	bl	8006af8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	331c      	adds	r3, #28
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe facc 	bl	8005c08 <st_dword>
					fs->wflag = 1;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2201      	movs	r2, #1
 8007674:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d037      	beq.n	80076ec <f_open+0x1d4>
						dw = fs->winsect;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007682:	f107 0314 	add.w	r3, r7, #20
 8007686:	2200      	movs	r2, #0
 8007688:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe ff5d 	bl	800654a <remove_chain>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800769a:	2b00      	cmp	r3, #0
 800769c:	d126      	bne.n	80076ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fd0a 	bl	80060bc <move_window>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076b2:	3a01      	subs	r2, #1
 80076b4:	60da      	str	r2, [r3, #12]
 80076b6:	e019      	b.n	80076ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80076b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d115      	bne.n	80076ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80076c0:	7ebb      	ldrb	r3, [r7, #26]
 80076c2:	f003 0310 	and.w	r3, r3, #16
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80076ca:	2304      	movs	r3, #4
 80076cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80076d0:	e00c      	b.n	80076ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <f_open+0x1d4>
 80076dc:	7ebb      	ldrb	r3, [r7, #26]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <f_open+0x1d4>
						res = FR_DENIED;
 80076e6:	2307      	movs	r3, #7
 80076e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80076ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d128      	bne.n	8007746 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007704:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800770e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	f023 0301 	bic.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	f107 0314 	add.w	r3, r7, #20
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe fb93 	bl	8005e58 <inc_lock>
 8007732:	4602      	mov	r2, r0
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <f_open+0x22e>
 8007740:	2302      	movs	r3, #2
 8007742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 8095 	bne.w	800787a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff f9af 	bl	8006aba <ld_clust>
 800775c:	4602      	mov	r2, r0
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007764:	331c      	adds	r3, #28
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fa10 	bl	8005b8c <ld_dword>
 800776c:	4602      	mov	r2, r0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	88da      	ldrh	r2, [r3, #6]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	79fa      	ldrb	r2, [r7, #7]
 800778a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3330      	adds	r3, #48	; 0x30
 80077a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe fa7a 	bl	8005ca2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d060      	beq.n	800787a <f_open+0x362>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d05c      	beq.n	800787a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	895b      	ldrh	r3, [r3, #10]
 80077cc:	025b      	lsls	r3, r3, #9
 80077ce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	657b      	str	r3, [r7, #84]	; 0x54
 80077dc:	e016      	b.n	800780c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fd25 	bl	8006232 <get_fat>
 80077e8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80077ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d802      	bhi.n	80077f6 <f_open+0x2de>
 80077f0:	2302      	movs	r3, #2
 80077f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077fc:	d102      	bne.n	8007804 <f_open+0x2ec>
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	657b      	str	r3, [r7, #84]	; 0x54
 800780c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007810:	2b00      	cmp	r3, #0
 8007812:	d103      	bne.n	800781c <f_open+0x304>
 8007814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007818:	429a      	cmp	r2, r3
 800781a:	d8e0      	bhi.n	80077de <f_open+0x2c6>
				}
				fp->clust = clst;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007820:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007826:	2b00      	cmp	r3, #0
 8007828:	d127      	bne.n	800787a <f_open+0x362>
 800782a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007830:	2b00      	cmp	r3, #0
 8007832:	d022      	beq.n	800787a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fcdb 	bl	80061f4 <clust2sect>
 800783e:	6478      	str	r0, [r7, #68]	; 0x44
 8007840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <f_open+0x336>
						res = FR_INT_ERR;
 8007846:	2302      	movs	r3, #2
 8007848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800784c:	e015      	b.n	800787a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800784e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007850:	0a5a      	lsrs	r2, r3, #9
 8007852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007854:	441a      	add	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	7858      	ldrb	r0, [r3, #1]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1a      	ldr	r2, [r3, #32]
 8007868:	2301      	movs	r3, #1
 800786a:	f7fe f919 	bl	8005aa0 <disk_read>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <f_open+0x362>
 8007874:	2301      	movs	r3, #1
 8007876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800787a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <f_open+0x370>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800788c:	4618      	mov	r0, r3
 800788e:	3760      	adds	r7, #96	; 0x60
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08c      	sub	sp, #48	; 0x30
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f107 0210 	add.w	r2, r7, #16
 80078b2:	4611      	mov	r1, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fdb3 	bl	8007420 <validate>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80078c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d107      	bne.n	80078d8 <f_write+0x44>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	7d5b      	ldrb	r3, [r3, #21]
 80078cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <f_write+0x4a>
 80078d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078dc:	e14b      	b.n	8007b76 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	7d1b      	ldrb	r3, [r3, #20]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <f_write+0x5a>
 80078ea:	2307      	movs	r3, #7
 80078ec:	e143      	b.n	8007b76 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	f080 812d 	bcs.w	8007b5a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	43db      	mvns	r3, r3
 8007906:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007908:	e127      	b.n	8007b5a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	2b00      	cmp	r3, #0
 8007914:	f040 80e3 	bne.w	8007ade <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	0a5b      	lsrs	r3, r3, #9
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	8952      	ldrh	r2, [r2, #10]
 8007922:	3a01      	subs	r2, #1
 8007924:	4013      	ands	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d143      	bne.n	80079b6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10c      	bne.n	8007950 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d11a      	bne.n	8007978 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2100      	movs	r1, #0
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fe64 	bl	8006614 <create_chain>
 800794c:	62b8      	str	r0, [r7, #40]	; 0x28
 800794e:	e013      	b.n	8007978 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	4619      	mov	r1, r3
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7fe fef0 	bl	8006744 <clmt_clust>
 8007964:	62b8      	str	r0, [r7, #40]	; 0x28
 8007966:	e007      	b.n	8007978 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f7fe fe4f 	bl	8006614 <create_chain>
 8007976:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80f2 	beq.w	8007b64 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2b01      	cmp	r3, #1
 8007984:	d104      	bne.n	8007990 <f_write+0xfc>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2202      	movs	r2, #2
 800798a:	755a      	strb	r2, [r3, #21]
 800798c:	2302      	movs	r3, #2
 800798e:	e0f2      	b.n	8007b76 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007996:	d104      	bne.n	80079a2 <f_write+0x10e>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	755a      	strb	r2, [r3, #21]
 800799e:	2301      	movs	r3, #1
 80079a0:	e0e9      	b.n	8007b76 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <f_write+0x122>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	7d1b      	ldrb	r3, [r3, #20]
 80079ba:	b25b      	sxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da18      	bge.n	80079f2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	7858      	ldrb	r0, [r3, #1]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1a      	ldr	r2, [r3, #32]
 80079ce:	2301      	movs	r3, #1
 80079d0:	f7fe f886 	bl	8005ae0 <disk_write>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <f_write+0x150>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	755a      	strb	r2, [r3, #21]
 80079e0:	2301      	movs	r3, #1
 80079e2:	e0c8      	b.n	8007b76 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	7d1b      	ldrb	r3, [r3, #20]
 80079e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fe fbfa 	bl	80061f4 <clust2sect>
 8007a00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <f_write+0x17e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	755a      	strb	r2, [r3, #21]
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e0b1      	b.n	8007b76 <f_write+0x2e2>
			sect += csect;
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	4413      	add	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	0a5b      	lsrs	r3, r3, #9
 8007a1e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d03c      	beq.n	8007aa0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	8952      	ldrh	r2, [r2, #10]
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d905      	bls.n	8007a40 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	895b      	ldrh	r3, [r3, #10]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	7858      	ldrb	r0, [r3, #1]
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	69f9      	ldr	r1, [r7, #28]
 8007a4a:	f7fe f849 	bl	8005ae0 <disk_write>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <f_write+0x1ca>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	755a      	strb	r2, [r3, #21]
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e08b      	b.n	8007b76 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	6a3a      	ldr	r2, [r7, #32]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d915      	bls.n	8007a98 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a1a      	ldr	r2, [r3, #32]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	025b      	lsls	r3, r3, #9
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a84:	4619      	mov	r1, r3
 8007a86:	f7fe f8eb 	bl	8005c60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	7d1b      	ldrb	r3, [r3, #20]
 8007a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	025b      	lsls	r3, r3, #9
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a9e:	e03f      	b.n	8007b20 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d016      	beq.n	8007ad8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d210      	bcs.n	8007ad8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	7858      	ldrb	r0, [r3, #1]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	f7fd ffec 	bl	8005aa0 <disk_read>
 8007ac8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	755a      	strb	r2, [r3, #21]
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e04e      	b.n	8007b76 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d901      	bls.n	8007af8 <f_write+0x264>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b06:	4413      	add	r3, r2
 8007b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0a:	69f9      	ldr	r1, [r7, #28]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe f8a7 	bl	8005c60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	7d1b      	ldrb	r3, [r3, #20]
 8007b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	4413      	add	r3, r2
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	441a      	add	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	619a      	str	r2, [r3, #24]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	bf38      	it	cc
 8007b40:	461a      	movcc	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	60da      	str	r2, [r3, #12]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	441a      	add	r2, r3
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f47f aed4 	bne.w	800790a <f_write+0x76>
 8007b62:	e000      	b.n	8007b66 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	7d1b      	ldrb	r3, [r3, #20]
 8007b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3730      	adds	r7, #48	; 0x30
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f107 0208 	add.w	r2, r7, #8
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff fc46 	bl	8007420 <validate>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d168      	bne.n	8007c70 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7d1b      	ldrb	r3, [r3, #20]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d062      	beq.n	8007c70 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	7d1b      	ldrb	r3, [r3, #20]
 8007bae:	b25b      	sxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da15      	bge.n	8007be0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	7858      	ldrb	r0, [r3, #1]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1a      	ldr	r2, [r3, #32]
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f7fd ff8c 	bl	8005ae0 <disk_write>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <f_sync+0x54>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e04f      	b.n	8007c72 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7d1b      	ldrb	r3, [r3, #20]
 8007bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007be0:	f7fd fec0 	bl	8005964 <get_fattime>
 8007be4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	4619      	mov	r1, r3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	f7fe fa64 	bl	80060bc <move_window>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d138      	bne.n	8007c70 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	330b      	adds	r3, #11
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	330b      	adds	r3, #11
 8007c0e:	f042 0220 	orr.w	r2, r2, #32
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	68f9      	ldr	r1, [r7, #12]
 8007c22:	f7fe ff69 	bl	8006af8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f103 021c 	add.w	r2, r3, #28
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f7fd ffe8 	bl	8005c08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3316      	adds	r3, #22
 8007c3c:	6939      	ldr	r1, [r7, #16]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fd ffe2 	bl	8005c08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3312      	adds	r3, #18
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fd ffc1 	bl	8005bd2 <st_word>
					fs->wflag = 1;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2201      	movs	r2, #1
 8007c54:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fa5d 	bl	8006118 <sync_fs>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7d1b      	ldrb	r3, [r3, #20]
 8007c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff ff7b 	bl	8007b7e <f_sync>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d118      	bne.n	8007cc4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f107 0208 	add.w	r2, r7, #8
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fbc0 	bl	8007420 <validate>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10c      	bne.n	8007cc4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe f960 	bl	8005f74 <dec_lock>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ce6:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007ce8:	7a5b      	ldrb	r3, [r3, #9]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d131      	bne.n	8007d54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cf0:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007cf2:	7a5b      	ldrb	r3, [r3, #9]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cfe:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007d00:	7a5b      	ldrb	r3, [r3, #9]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d0e:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007d10:	7a5b      	ldrb	r3, [r3, #9]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007d18:	4413      	add	r3, r2
 8007d1a:	79fa      	ldrb	r2, [r7, #7]
 8007d1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d1e:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007d20:	7a5b      	ldrb	r3, [r3, #9]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	b2d1      	uxtb	r1, r2
 8007d28:	4a0e      	ldr	r2, [pc, #56]	; (8007d64 <FATFS_LinkDriverEx+0x94>)
 8007d2a:	7251      	strb	r1, [r2, #9]
 8007d2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d2e:	7dbb      	ldrb	r3, [r7, #22]
 8007d30:	3330      	adds	r3, #48	; 0x30
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	223a      	movs	r2, #58	; 0x3a
 8007d3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	3302      	adds	r3, #2
 8007d44:	222f      	movs	r2, #47	; 0x2f
 8007d46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3303      	adds	r3, #3
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000011c 	.word	0x2000011c

08007d68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d72:	2200      	movs	r2, #0
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff ffaa 	bl	8007cd0 <FATFS_LinkDriverEx>
 8007d7c:	4603      	mov	r3, r0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <__errno>:
 8007d88:	4b01      	ldr	r3, [pc, #4]	; (8007d90 <__errno+0x8>)
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000024 	.word	0x20000024

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4e0d      	ldr	r6, [pc, #52]	; (8007dcc <__libc_init_array+0x38>)
 8007d98:	4c0d      	ldr	r4, [pc, #52]	; (8007dd0 <__libc_init_array+0x3c>)
 8007d9a:	1ba4      	subs	r4, r4, r6
 8007d9c:	10a4      	asrs	r4, r4, #2
 8007d9e:	2500      	movs	r5, #0
 8007da0:	42a5      	cmp	r5, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	4e0b      	ldr	r6, [pc, #44]	; (8007dd4 <__libc_init_array+0x40>)
 8007da6:	4c0c      	ldr	r4, [pc, #48]	; (8007dd8 <__libc_init_array+0x44>)
 8007da8:	f000 fc26 	bl	80085f8 <_init>
 8007dac:	1ba4      	subs	r4, r4, r6
 8007dae:	10a4      	asrs	r4, r4, #2
 8007db0:	2500      	movs	r5, #0
 8007db2:	42a5      	cmp	r5, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dbc:	4798      	blx	r3
 8007dbe:	3501      	adds	r5, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dc6:	4798      	blx	r3
 8007dc8:	3501      	adds	r5, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	08008770 	.word	0x08008770
 8007dd0:	08008770 	.word	0x08008770
 8007dd4:	08008770 	.word	0x08008770
 8007dd8:	08008774 	.word	0x08008774

08007ddc <memset>:
 8007ddc:	4402      	add	r2, r0
 8007dde:	4603      	mov	r3, r0
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d100      	bne.n	8007de6 <memset+0xa>
 8007de4:	4770      	bx	lr
 8007de6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dea:	e7f9      	b.n	8007de0 <memset+0x4>

08007dec <siprintf>:
 8007dec:	b40e      	push	{r1, r2, r3}
 8007dee:	b500      	push	{lr}
 8007df0:	b09c      	sub	sp, #112	; 0x70
 8007df2:	ab1d      	add	r3, sp, #116	; 0x74
 8007df4:	9002      	str	r0, [sp, #8]
 8007df6:	9006      	str	r0, [sp, #24]
 8007df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dfc:	4809      	ldr	r0, [pc, #36]	; (8007e24 <siprintf+0x38>)
 8007dfe:	9107      	str	r1, [sp, #28]
 8007e00:	9104      	str	r1, [sp, #16]
 8007e02:	4909      	ldr	r1, [pc, #36]	; (8007e28 <siprintf+0x3c>)
 8007e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	a902      	add	r1, sp, #8
 8007e10:	f000 f866 	bl	8007ee0 <_svfiprintf_r>
 8007e14:	9b02      	ldr	r3, [sp, #8]
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	b01c      	add	sp, #112	; 0x70
 8007e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e20:	b003      	add	sp, #12
 8007e22:	4770      	bx	lr
 8007e24:	20000024 	.word	0x20000024
 8007e28:	ffff0208 	.word	0xffff0208

08007e2c <__ssputs_r>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	688e      	ldr	r6, [r1, #8]
 8007e32:	429e      	cmp	r6, r3
 8007e34:	4682      	mov	sl, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	4690      	mov	r8, r2
 8007e3a:	4699      	mov	r9, r3
 8007e3c:	d837      	bhi.n	8007eae <__ssputs_r+0x82>
 8007e3e:	898a      	ldrh	r2, [r1, #12]
 8007e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e44:	d031      	beq.n	8007eaa <__ssputs_r+0x7e>
 8007e46:	6825      	ldr	r5, [r4, #0]
 8007e48:	6909      	ldr	r1, [r1, #16]
 8007e4a:	1a6f      	subs	r7, r5, r1
 8007e4c:	6965      	ldr	r5, [r4, #20]
 8007e4e:	2302      	movs	r3, #2
 8007e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e54:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e58:	f109 0301 	add.w	r3, r9, #1
 8007e5c:	443b      	add	r3, r7
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	bf38      	it	cc
 8007e62:	461d      	movcc	r5, r3
 8007e64:	0553      	lsls	r3, r2, #21
 8007e66:	d530      	bpl.n	8007eca <__ssputs_r+0x9e>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f000 fb2b 	bl	80084c4 <_malloc_r>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	b950      	cbnz	r0, 8007e88 <__ssputs_r+0x5c>
 8007e72:	230c      	movs	r3, #12
 8007e74:	f8ca 3000 	str.w	r3, [sl]
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e88:	463a      	mov	r2, r7
 8007e8a:	6921      	ldr	r1, [r4, #16]
 8007e8c:	f000 faa8 	bl	80083e0 <memcpy>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	6126      	str	r6, [r4, #16]
 8007e9e:	6165      	str	r5, [r4, #20]
 8007ea0:	443e      	add	r6, r7
 8007ea2:	1bed      	subs	r5, r5, r7
 8007ea4:	6026      	str	r6, [r4, #0]
 8007ea6:	60a5      	str	r5, [r4, #8]
 8007ea8:	464e      	mov	r6, r9
 8007eaa:	454e      	cmp	r6, r9
 8007eac:	d900      	bls.n	8007eb0 <__ssputs_r+0x84>
 8007eae:	464e      	mov	r6, r9
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	f000 fa9e 	bl	80083f6 <memmove>
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	1b9b      	subs	r3, r3, r6
 8007ebe:	60a3      	str	r3, [r4, #8]
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	441e      	add	r6, r3
 8007ec4:	6026      	str	r6, [r4, #0]
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	e7dc      	b.n	8007e84 <__ssputs_r+0x58>
 8007eca:	462a      	mov	r2, r5
 8007ecc:	f000 fb54 	bl	8008578 <_realloc_r>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d1e2      	bne.n	8007e9c <__ssputs_r+0x70>
 8007ed6:	6921      	ldr	r1, [r4, #16]
 8007ed8:	4650      	mov	r0, sl
 8007eda:	f000 faa5 	bl	8008428 <_free_r>
 8007ede:	e7c8      	b.n	8007e72 <__ssputs_r+0x46>

08007ee0 <_svfiprintf_r>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	461d      	mov	r5, r3
 8007ee6:	898b      	ldrh	r3, [r1, #12]
 8007ee8:	061f      	lsls	r7, r3, #24
 8007eea:	b09d      	sub	sp, #116	; 0x74
 8007eec:	4680      	mov	r8, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	d50f      	bpl.n	8007f14 <_svfiprintf_r+0x34>
 8007ef4:	690b      	ldr	r3, [r1, #16]
 8007ef6:	b96b      	cbnz	r3, 8007f14 <_svfiprintf_r+0x34>
 8007ef8:	2140      	movs	r1, #64	; 0x40
 8007efa:	f000 fae3 	bl	80084c4 <_malloc_r>
 8007efe:	6020      	str	r0, [r4, #0]
 8007f00:	6120      	str	r0, [r4, #16]
 8007f02:	b928      	cbnz	r0, 8007f10 <_svfiprintf_r+0x30>
 8007f04:	230c      	movs	r3, #12
 8007f06:	f8c8 3000 	str.w	r3, [r8]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f0e:	e0c8      	b.n	80080a2 <_svfiprintf_r+0x1c2>
 8007f10:	2340      	movs	r3, #64	; 0x40
 8007f12:	6163      	str	r3, [r4, #20]
 8007f14:	2300      	movs	r3, #0
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	2320      	movs	r3, #32
 8007f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f1e:	2330      	movs	r3, #48	; 0x30
 8007f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f24:	9503      	str	r5, [sp, #12]
 8007f26:	f04f 0b01 	mov.w	fp, #1
 8007f2a:	4637      	mov	r7, r6
 8007f2c:	463d      	mov	r5, r7
 8007f2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f32:	b10b      	cbz	r3, 8007f38 <_svfiprintf_r+0x58>
 8007f34:	2b25      	cmp	r3, #37	; 0x25
 8007f36:	d13e      	bne.n	8007fb6 <_svfiprintf_r+0xd6>
 8007f38:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f3c:	d00b      	beq.n	8007f56 <_svfiprintf_r+0x76>
 8007f3e:	4653      	mov	r3, sl
 8007f40:	4632      	mov	r2, r6
 8007f42:	4621      	mov	r1, r4
 8007f44:	4640      	mov	r0, r8
 8007f46:	f7ff ff71 	bl	8007e2c <__ssputs_r>
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f000 80a4 	beq.w	8008098 <_svfiprintf_r+0x1b8>
 8007f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f52:	4453      	add	r3, sl
 8007f54:	9309      	str	r3, [sp, #36]	; 0x24
 8007f56:	783b      	ldrb	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 809d 	beq.w	8008098 <_svfiprintf_r+0x1b8>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f68:	9304      	str	r3, [sp, #16]
 8007f6a:	9307      	str	r3, [sp, #28]
 8007f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f70:	931a      	str	r3, [sp, #104]	; 0x68
 8007f72:	462f      	mov	r7, r5
 8007f74:	2205      	movs	r2, #5
 8007f76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f7a:	4850      	ldr	r0, [pc, #320]	; (80080bc <_svfiprintf_r+0x1dc>)
 8007f7c:	f7f8 f948 	bl	8000210 <memchr>
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	b9d0      	cbnz	r0, 8007fba <_svfiprintf_r+0xda>
 8007f84:	06d9      	lsls	r1, r3, #27
 8007f86:	bf44      	itt	mi
 8007f88:	2220      	movmi	r2, #32
 8007f8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f8e:	071a      	lsls	r2, r3, #28
 8007f90:	bf44      	itt	mi
 8007f92:	222b      	movmi	r2, #43	; 0x2b
 8007f94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f98:	782a      	ldrb	r2, [r5, #0]
 8007f9a:	2a2a      	cmp	r2, #42	; 0x2a
 8007f9c:	d015      	beq.n	8007fca <_svfiprintf_r+0xea>
 8007f9e:	9a07      	ldr	r2, [sp, #28]
 8007fa0:	462f      	mov	r7, r5
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	250a      	movs	r5, #10
 8007fa6:	4639      	mov	r1, r7
 8007fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fac:	3b30      	subs	r3, #48	; 0x30
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d94d      	bls.n	800804e <_svfiprintf_r+0x16e>
 8007fb2:	b1b8      	cbz	r0, 8007fe4 <_svfiprintf_r+0x104>
 8007fb4:	e00f      	b.n	8007fd6 <_svfiprintf_r+0xf6>
 8007fb6:	462f      	mov	r7, r5
 8007fb8:	e7b8      	b.n	8007f2c <_svfiprintf_r+0x4c>
 8007fba:	4a40      	ldr	r2, [pc, #256]	; (80080bc <_svfiprintf_r+0x1dc>)
 8007fbc:	1a80      	subs	r0, r0, r2
 8007fbe:	fa0b f000 	lsl.w	r0, fp, r0
 8007fc2:	4318      	orrs	r0, r3
 8007fc4:	9004      	str	r0, [sp, #16]
 8007fc6:	463d      	mov	r5, r7
 8007fc8:	e7d3      	b.n	8007f72 <_svfiprintf_r+0x92>
 8007fca:	9a03      	ldr	r2, [sp, #12]
 8007fcc:	1d11      	adds	r1, r2, #4
 8007fce:	6812      	ldr	r2, [r2, #0]
 8007fd0:	9103      	str	r1, [sp, #12]
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	db01      	blt.n	8007fda <_svfiprintf_r+0xfa>
 8007fd6:	9207      	str	r2, [sp, #28]
 8007fd8:	e004      	b.n	8007fe4 <_svfiprintf_r+0x104>
 8007fda:	4252      	negs	r2, r2
 8007fdc:	f043 0302 	orr.w	r3, r3, #2
 8007fe0:	9207      	str	r2, [sp, #28]
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	783b      	ldrb	r3, [r7, #0]
 8007fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe8:	d10c      	bne.n	8008004 <_svfiprintf_r+0x124>
 8007fea:	787b      	ldrb	r3, [r7, #1]
 8007fec:	2b2a      	cmp	r3, #42	; 0x2a
 8007fee:	d133      	bne.n	8008058 <_svfiprintf_r+0x178>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	1d1a      	adds	r2, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	9203      	str	r2, [sp, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfb8      	it	lt
 8007ffc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008000:	3702      	adds	r7, #2
 8008002:	9305      	str	r3, [sp, #20]
 8008004:	4d2e      	ldr	r5, [pc, #184]	; (80080c0 <_svfiprintf_r+0x1e0>)
 8008006:	7839      	ldrb	r1, [r7, #0]
 8008008:	2203      	movs	r2, #3
 800800a:	4628      	mov	r0, r5
 800800c:	f7f8 f900 	bl	8000210 <memchr>
 8008010:	b138      	cbz	r0, 8008022 <_svfiprintf_r+0x142>
 8008012:	2340      	movs	r3, #64	; 0x40
 8008014:	1b40      	subs	r0, r0, r5
 8008016:	fa03 f000 	lsl.w	r0, r3, r0
 800801a:	9b04      	ldr	r3, [sp, #16]
 800801c:	4303      	orrs	r3, r0
 800801e:	3701      	adds	r7, #1
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	7839      	ldrb	r1, [r7, #0]
 8008024:	4827      	ldr	r0, [pc, #156]	; (80080c4 <_svfiprintf_r+0x1e4>)
 8008026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800802a:	2206      	movs	r2, #6
 800802c:	1c7e      	adds	r6, r7, #1
 800802e:	f7f8 f8ef 	bl	8000210 <memchr>
 8008032:	2800      	cmp	r0, #0
 8008034:	d038      	beq.n	80080a8 <_svfiprintf_r+0x1c8>
 8008036:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <_svfiprintf_r+0x1e8>)
 8008038:	bb13      	cbnz	r3, 8008080 <_svfiprintf_r+0x1a0>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	3307      	adds	r3, #7
 800803e:	f023 0307 	bic.w	r3, r3, #7
 8008042:	3308      	adds	r3, #8
 8008044:	9303      	str	r3, [sp, #12]
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	444b      	add	r3, r9
 800804a:	9309      	str	r3, [sp, #36]	; 0x24
 800804c:	e76d      	b.n	8007f2a <_svfiprintf_r+0x4a>
 800804e:	fb05 3202 	mla	r2, r5, r2, r3
 8008052:	2001      	movs	r0, #1
 8008054:	460f      	mov	r7, r1
 8008056:	e7a6      	b.n	8007fa6 <_svfiprintf_r+0xc6>
 8008058:	2300      	movs	r3, #0
 800805a:	3701      	adds	r7, #1
 800805c:	9305      	str	r3, [sp, #20]
 800805e:	4619      	mov	r1, r3
 8008060:	250a      	movs	r5, #10
 8008062:	4638      	mov	r0, r7
 8008064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008068:	3a30      	subs	r2, #48	; 0x30
 800806a:	2a09      	cmp	r2, #9
 800806c:	d903      	bls.n	8008076 <_svfiprintf_r+0x196>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c8      	beq.n	8008004 <_svfiprintf_r+0x124>
 8008072:	9105      	str	r1, [sp, #20]
 8008074:	e7c6      	b.n	8008004 <_svfiprintf_r+0x124>
 8008076:	fb05 2101 	mla	r1, r5, r1, r2
 800807a:	2301      	movs	r3, #1
 800807c:	4607      	mov	r7, r0
 800807e:	e7f0      	b.n	8008062 <_svfiprintf_r+0x182>
 8008080:	ab03      	add	r3, sp, #12
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4622      	mov	r2, r4
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <_svfiprintf_r+0x1ec>)
 8008088:	a904      	add	r1, sp, #16
 800808a:	4640      	mov	r0, r8
 800808c:	f3af 8000 	nop.w
 8008090:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008094:	4681      	mov	r9, r0
 8008096:	d1d6      	bne.n	8008046 <_svfiprintf_r+0x166>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	065b      	lsls	r3, r3, #25
 800809c:	f53f af35 	bmi.w	8007f0a <_svfiprintf_r+0x2a>
 80080a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a2:	b01d      	add	sp, #116	; 0x74
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	ab03      	add	r3, sp, #12
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4622      	mov	r2, r4
 80080ae:	4b07      	ldr	r3, [pc, #28]	; (80080cc <_svfiprintf_r+0x1ec>)
 80080b0:	a904      	add	r1, sp, #16
 80080b2:	4640      	mov	r0, r8
 80080b4:	f000 f882 	bl	80081bc <_printf_i>
 80080b8:	e7ea      	b.n	8008090 <_svfiprintf_r+0x1b0>
 80080ba:	bf00      	nop
 80080bc:	08008734 	.word	0x08008734
 80080c0:	0800873a 	.word	0x0800873a
 80080c4:	0800873e 	.word	0x0800873e
 80080c8:	00000000 	.word	0x00000000
 80080cc:	08007e2d 	.word	0x08007e2d

080080d0 <_printf_common>:
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	4691      	mov	r9, r2
 80080d6:	461f      	mov	r7, r3
 80080d8:	688a      	ldr	r2, [r1, #8]
 80080da:	690b      	ldr	r3, [r1, #16]
 80080dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	bfb8      	it	lt
 80080e4:	4613      	movlt	r3, r2
 80080e6:	f8c9 3000 	str.w	r3, [r9]
 80080ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ee:	4606      	mov	r6, r0
 80080f0:	460c      	mov	r4, r1
 80080f2:	b112      	cbz	r2, 80080fa <_printf_common+0x2a>
 80080f4:	3301      	adds	r3, #1
 80080f6:	f8c9 3000 	str.w	r3, [r9]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	0699      	lsls	r1, r3, #26
 80080fe:	bf42      	ittt	mi
 8008100:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008104:	3302      	addmi	r3, #2
 8008106:	f8c9 3000 	strmi.w	r3, [r9]
 800810a:	6825      	ldr	r5, [r4, #0]
 800810c:	f015 0506 	ands.w	r5, r5, #6
 8008110:	d107      	bne.n	8008122 <_printf_common+0x52>
 8008112:	f104 0a19 	add.w	sl, r4, #25
 8008116:	68e3      	ldr	r3, [r4, #12]
 8008118:	f8d9 2000 	ldr.w	r2, [r9]
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	42ab      	cmp	r3, r5
 8008120:	dc28      	bgt.n	8008174 <_printf_common+0xa4>
 8008122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	3300      	adds	r3, #0
 800812a:	bf18      	it	ne
 800812c:	2301      	movne	r3, #1
 800812e:	0692      	lsls	r2, r2, #26
 8008130:	d42d      	bmi.n	800818e <_printf_common+0xbe>
 8008132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008136:	4639      	mov	r1, r7
 8008138:	4630      	mov	r0, r6
 800813a:	47c0      	blx	r8
 800813c:	3001      	adds	r0, #1
 800813e:	d020      	beq.n	8008182 <_printf_common+0xb2>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	68e5      	ldr	r5, [r4, #12]
 8008144:	f8d9 2000 	ldr.w	r2, [r9]
 8008148:	f003 0306 	and.w	r3, r3, #6
 800814c:	2b04      	cmp	r3, #4
 800814e:	bf08      	it	eq
 8008150:	1aad      	subeq	r5, r5, r2
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	6922      	ldr	r2, [r4, #16]
 8008156:	bf0c      	ite	eq
 8008158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800815c:	2500      	movne	r5, #0
 800815e:	4293      	cmp	r3, r2
 8008160:	bfc4      	itt	gt
 8008162:	1a9b      	subgt	r3, r3, r2
 8008164:	18ed      	addgt	r5, r5, r3
 8008166:	f04f 0900 	mov.w	r9, #0
 800816a:	341a      	adds	r4, #26
 800816c:	454d      	cmp	r5, r9
 800816e:	d11a      	bne.n	80081a6 <_printf_common+0xd6>
 8008170:	2000      	movs	r0, #0
 8008172:	e008      	b.n	8008186 <_printf_common+0xb6>
 8008174:	2301      	movs	r3, #1
 8008176:	4652      	mov	r2, sl
 8008178:	4639      	mov	r1, r7
 800817a:	4630      	mov	r0, r6
 800817c:	47c0      	blx	r8
 800817e:	3001      	adds	r0, #1
 8008180:	d103      	bne.n	800818a <_printf_common+0xba>
 8008182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	3501      	adds	r5, #1
 800818c:	e7c3      	b.n	8008116 <_printf_common+0x46>
 800818e:	18e1      	adds	r1, r4, r3
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	2030      	movs	r0, #48	; 0x30
 8008194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008198:	4422      	add	r2, r4
 800819a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800819e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a2:	3302      	adds	r3, #2
 80081a4:	e7c5      	b.n	8008132 <_printf_common+0x62>
 80081a6:	2301      	movs	r3, #1
 80081a8:	4622      	mov	r2, r4
 80081aa:	4639      	mov	r1, r7
 80081ac:	4630      	mov	r0, r6
 80081ae:	47c0      	blx	r8
 80081b0:	3001      	adds	r0, #1
 80081b2:	d0e6      	beq.n	8008182 <_printf_common+0xb2>
 80081b4:	f109 0901 	add.w	r9, r9, #1
 80081b8:	e7d8      	b.n	800816c <_printf_common+0x9c>
	...

080081bc <_printf_i>:
 80081bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081c4:	460c      	mov	r4, r1
 80081c6:	7e09      	ldrb	r1, [r1, #24]
 80081c8:	b085      	sub	sp, #20
 80081ca:	296e      	cmp	r1, #110	; 0x6e
 80081cc:	4617      	mov	r7, r2
 80081ce:	4606      	mov	r6, r0
 80081d0:	4698      	mov	r8, r3
 80081d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d4:	f000 80b3 	beq.w	800833e <_printf_i+0x182>
 80081d8:	d822      	bhi.n	8008220 <_printf_i+0x64>
 80081da:	2963      	cmp	r1, #99	; 0x63
 80081dc:	d036      	beq.n	800824c <_printf_i+0x90>
 80081de:	d80a      	bhi.n	80081f6 <_printf_i+0x3a>
 80081e0:	2900      	cmp	r1, #0
 80081e2:	f000 80b9 	beq.w	8008358 <_printf_i+0x19c>
 80081e6:	2958      	cmp	r1, #88	; 0x58
 80081e8:	f000 8083 	beq.w	80082f2 <_printf_i+0x136>
 80081ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081f4:	e032      	b.n	800825c <_printf_i+0xa0>
 80081f6:	2964      	cmp	r1, #100	; 0x64
 80081f8:	d001      	beq.n	80081fe <_printf_i+0x42>
 80081fa:	2969      	cmp	r1, #105	; 0x69
 80081fc:	d1f6      	bne.n	80081ec <_printf_i+0x30>
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	6813      	ldr	r3, [r2, #0]
 8008202:	0605      	lsls	r5, r0, #24
 8008204:	f103 0104 	add.w	r1, r3, #4
 8008208:	d52a      	bpl.n	8008260 <_printf_i+0xa4>
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6011      	str	r1, [r2, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	da03      	bge.n	800821a <_printf_i+0x5e>
 8008212:	222d      	movs	r2, #45	; 0x2d
 8008214:	425b      	negs	r3, r3
 8008216:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800821a:	486f      	ldr	r0, [pc, #444]	; (80083d8 <_printf_i+0x21c>)
 800821c:	220a      	movs	r2, #10
 800821e:	e039      	b.n	8008294 <_printf_i+0xd8>
 8008220:	2973      	cmp	r1, #115	; 0x73
 8008222:	f000 809d 	beq.w	8008360 <_printf_i+0x1a4>
 8008226:	d808      	bhi.n	800823a <_printf_i+0x7e>
 8008228:	296f      	cmp	r1, #111	; 0x6f
 800822a:	d020      	beq.n	800826e <_printf_i+0xb2>
 800822c:	2970      	cmp	r1, #112	; 0x70
 800822e:	d1dd      	bne.n	80081ec <_printf_i+0x30>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	f043 0320 	orr.w	r3, r3, #32
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	e003      	b.n	8008242 <_printf_i+0x86>
 800823a:	2975      	cmp	r1, #117	; 0x75
 800823c:	d017      	beq.n	800826e <_printf_i+0xb2>
 800823e:	2978      	cmp	r1, #120	; 0x78
 8008240:	d1d4      	bne.n	80081ec <_printf_i+0x30>
 8008242:	2378      	movs	r3, #120	; 0x78
 8008244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008248:	4864      	ldr	r0, [pc, #400]	; (80083dc <_printf_i+0x220>)
 800824a:	e055      	b.n	80082f8 <_printf_i+0x13c>
 800824c:	6813      	ldr	r3, [r2, #0]
 800824e:	1d19      	adds	r1, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6011      	str	r1, [r2, #0]
 8008254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800825c:	2301      	movs	r3, #1
 800825e:	e08c      	b.n	800837a <_printf_i+0x1be>
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6011      	str	r1, [r2, #0]
 8008264:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008268:	bf18      	it	ne
 800826a:	b21b      	sxthne	r3, r3
 800826c:	e7cf      	b.n	800820e <_printf_i+0x52>
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	6825      	ldr	r5, [r4, #0]
 8008272:	1d18      	adds	r0, r3, #4
 8008274:	6010      	str	r0, [r2, #0]
 8008276:	0628      	lsls	r0, r5, #24
 8008278:	d501      	bpl.n	800827e <_printf_i+0xc2>
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	e002      	b.n	8008284 <_printf_i+0xc8>
 800827e:	0668      	lsls	r0, r5, #25
 8008280:	d5fb      	bpl.n	800827a <_printf_i+0xbe>
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	4854      	ldr	r0, [pc, #336]	; (80083d8 <_printf_i+0x21c>)
 8008286:	296f      	cmp	r1, #111	; 0x6f
 8008288:	bf14      	ite	ne
 800828a:	220a      	movne	r2, #10
 800828c:	2208      	moveq	r2, #8
 800828e:	2100      	movs	r1, #0
 8008290:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008294:	6865      	ldr	r5, [r4, #4]
 8008296:	60a5      	str	r5, [r4, #8]
 8008298:	2d00      	cmp	r5, #0
 800829a:	f2c0 8095 	blt.w	80083c8 <_printf_i+0x20c>
 800829e:	6821      	ldr	r1, [r4, #0]
 80082a0:	f021 0104 	bic.w	r1, r1, #4
 80082a4:	6021      	str	r1, [r4, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d13d      	bne.n	8008326 <_printf_i+0x16a>
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	f040 808e 	bne.w	80083cc <_printf_i+0x210>
 80082b0:	4665      	mov	r5, ip
 80082b2:	2a08      	cmp	r2, #8
 80082b4:	d10b      	bne.n	80082ce <_printf_i+0x112>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	07db      	lsls	r3, r3, #31
 80082ba:	d508      	bpl.n	80082ce <_printf_i+0x112>
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	6862      	ldr	r2, [r4, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	bfde      	ittt	le
 80082c4:	2330      	movle	r3, #48	; 0x30
 80082c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082ce:	ebac 0305 	sub.w	r3, ip, r5
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	f8cd 8000 	str.w	r8, [sp]
 80082d8:	463b      	mov	r3, r7
 80082da:	aa03      	add	r2, sp, #12
 80082dc:	4621      	mov	r1, r4
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff fef6 	bl	80080d0 <_printf_common>
 80082e4:	3001      	adds	r0, #1
 80082e6:	d14d      	bne.n	8008384 <_printf_i+0x1c8>
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ec:	b005      	add	sp, #20
 80082ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f2:	4839      	ldr	r0, [pc, #228]	; (80083d8 <_printf_i+0x21c>)
 80082f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082f8:	6813      	ldr	r3, [r2, #0]
 80082fa:	6821      	ldr	r1, [r4, #0]
 80082fc:	1d1d      	adds	r5, r3, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6015      	str	r5, [r2, #0]
 8008302:	060a      	lsls	r2, r1, #24
 8008304:	d50b      	bpl.n	800831e <_printf_i+0x162>
 8008306:	07ca      	lsls	r2, r1, #31
 8008308:	bf44      	itt	mi
 800830a:	f041 0120 	orrmi.w	r1, r1, #32
 800830e:	6021      	strmi	r1, [r4, #0]
 8008310:	b91b      	cbnz	r3, 800831a <_printf_i+0x15e>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	f022 0220 	bic.w	r2, r2, #32
 8008318:	6022      	str	r2, [r4, #0]
 800831a:	2210      	movs	r2, #16
 800831c:	e7b7      	b.n	800828e <_printf_i+0xd2>
 800831e:	064d      	lsls	r5, r1, #25
 8008320:	bf48      	it	mi
 8008322:	b29b      	uxthmi	r3, r3
 8008324:	e7ef      	b.n	8008306 <_printf_i+0x14a>
 8008326:	4665      	mov	r5, ip
 8008328:	fbb3 f1f2 	udiv	r1, r3, r2
 800832c:	fb02 3311 	mls	r3, r2, r1, r3
 8008330:	5cc3      	ldrb	r3, [r0, r3]
 8008332:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008336:	460b      	mov	r3, r1
 8008338:	2900      	cmp	r1, #0
 800833a:	d1f5      	bne.n	8008328 <_printf_i+0x16c>
 800833c:	e7b9      	b.n	80082b2 <_printf_i+0xf6>
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	6825      	ldr	r5, [r4, #0]
 8008342:	6961      	ldr	r1, [r4, #20]
 8008344:	1d18      	adds	r0, r3, #4
 8008346:	6010      	str	r0, [r2, #0]
 8008348:	0628      	lsls	r0, r5, #24
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	d501      	bpl.n	8008352 <_printf_i+0x196>
 800834e:	6019      	str	r1, [r3, #0]
 8008350:	e002      	b.n	8008358 <_printf_i+0x19c>
 8008352:	066a      	lsls	r2, r5, #25
 8008354:	d5fb      	bpl.n	800834e <_printf_i+0x192>
 8008356:	8019      	strh	r1, [r3, #0]
 8008358:	2300      	movs	r3, #0
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	4665      	mov	r5, ip
 800835e:	e7b9      	b.n	80082d4 <_printf_i+0x118>
 8008360:	6813      	ldr	r3, [r2, #0]
 8008362:	1d19      	adds	r1, r3, #4
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	681d      	ldr	r5, [r3, #0]
 8008368:	6862      	ldr	r2, [r4, #4]
 800836a:	2100      	movs	r1, #0
 800836c:	4628      	mov	r0, r5
 800836e:	f7f7 ff4f 	bl	8000210 <memchr>
 8008372:	b108      	cbz	r0, 8008378 <_printf_i+0x1bc>
 8008374:	1b40      	subs	r0, r0, r5
 8008376:	6060      	str	r0, [r4, #4]
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	2300      	movs	r3, #0
 800837e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008382:	e7a7      	b.n	80082d4 <_printf_i+0x118>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	462a      	mov	r2, r5
 8008388:	4639      	mov	r1, r7
 800838a:	4630      	mov	r0, r6
 800838c:	47c0      	blx	r8
 800838e:	3001      	adds	r0, #1
 8008390:	d0aa      	beq.n	80082e8 <_printf_i+0x12c>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	079b      	lsls	r3, r3, #30
 8008396:	d413      	bmi.n	80083c0 <_printf_i+0x204>
 8008398:	68e0      	ldr	r0, [r4, #12]
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	4298      	cmp	r0, r3
 800839e:	bfb8      	it	lt
 80083a0:	4618      	movlt	r0, r3
 80083a2:	e7a3      	b.n	80082ec <_printf_i+0x130>
 80083a4:	2301      	movs	r3, #1
 80083a6:	464a      	mov	r2, r9
 80083a8:	4639      	mov	r1, r7
 80083aa:	4630      	mov	r0, r6
 80083ac:	47c0      	blx	r8
 80083ae:	3001      	adds	r0, #1
 80083b0:	d09a      	beq.n	80082e8 <_printf_i+0x12c>
 80083b2:	3501      	adds	r5, #1
 80083b4:	68e3      	ldr	r3, [r4, #12]
 80083b6:	9a03      	ldr	r2, [sp, #12]
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	42ab      	cmp	r3, r5
 80083bc:	dcf2      	bgt.n	80083a4 <_printf_i+0x1e8>
 80083be:	e7eb      	b.n	8008398 <_printf_i+0x1dc>
 80083c0:	2500      	movs	r5, #0
 80083c2:	f104 0919 	add.w	r9, r4, #25
 80083c6:	e7f5      	b.n	80083b4 <_printf_i+0x1f8>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1ac      	bne.n	8008326 <_printf_i+0x16a>
 80083cc:	7803      	ldrb	r3, [r0, #0]
 80083ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d6:	e76c      	b.n	80082b2 <_printf_i+0xf6>
 80083d8:	08008745 	.word	0x08008745
 80083dc:	08008756 	.word	0x08008756

080083e0 <memcpy>:
 80083e0:	b510      	push	{r4, lr}
 80083e2:	1e43      	subs	r3, r0, #1
 80083e4:	440a      	add	r2, r1
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	bd10      	pop	{r4, pc}
 80083ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f4:	e7f7      	b.n	80083e6 <memcpy+0x6>

080083f6 <memmove>:
 80083f6:	4288      	cmp	r0, r1
 80083f8:	b510      	push	{r4, lr}
 80083fa:	eb01 0302 	add.w	r3, r1, r2
 80083fe:	d807      	bhi.n	8008410 <memmove+0x1a>
 8008400:	1e42      	subs	r2, r0, #1
 8008402:	4299      	cmp	r1, r3
 8008404:	d00a      	beq.n	800841c <memmove+0x26>
 8008406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800840e:	e7f8      	b.n	8008402 <memmove+0xc>
 8008410:	4283      	cmp	r3, r0
 8008412:	d9f5      	bls.n	8008400 <memmove+0xa>
 8008414:	1881      	adds	r1, r0, r2
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	42d3      	cmn	r3, r2
 800841a:	d100      	bne.n	800841e <memmove+0x28>
 800841c:	bd10      	pop	{r4, pc}
 800841e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008422:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008426:	e7f7      	b.n	8008418 <memmove+0x22>

08008428 <_free_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4605      	mov	r5, r0
 800842c:	2900      	cmp	r1, #0
 800842e:	d045      	beq.n	80084bc <_free_r+0x94>
 8008430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008434:	1f0c      	subs	r4, r1, #4
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfb8      	it	lt
 800843a:	18e4      	addlt	r4, r4, r3
 800843c:	f000 f8d2 	bl	80085e4 <__malloc_lock>
 8008440:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <_free_r+0x98>)
 8008442:	6813      	ldr	r3, [r2, #0]
 8008444:	4610      	mov	r0, r2
 8008446:	b933      	cbnz	r3, 8008456 <_free_r+0x2e>
 8008448:	6063      	str	r3, [r4, #4]
 800844a:	6014      	str	r4, [r2, #0]
 800844c:	4628      	mov	r0, r5
 800844e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008452:	f000 b8c8 	b.w	80085e6 <__malloc_unlock>
 8008456:	42a3      	cmp	r3, r4
 8008458:	d90c      	bls.n	8008474 <_free_r+0x4c>
 800845a:	6821      	ldr	r1, [r4, #0]
 800845c:	1862      	adds	r2, r4, r1
 800845e:	4293      	cmp	r3, r2
 8008460:	bf04      	itt	eq
 8008462:	681a      	ldreq	r2, [r3, #0]
 8008464:	685b      	ldreq	r3, [r3, #4]
 8008466:	6063      	str	r3, [r4, #4]
 8008468:	bf04      	itt	eq
 800846a:	1852      	addeq	r2, r2, r1
 800846c:	6022      	streq	r2, [r4, #0]
 800846e:	6004      	str	r4, [r0, #0]
 8008470:	e7ec      	b.n	800844c <_free_r+0x24>
 8008472:	4613      	mov	r3, r2
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	b10a      	cbz	r2, 800847c <_free_r+0x54>
 8008478:	42a2      	cmp	r2, r4
 800847a:	d9fa      	bls.n	8008472 <_free_r+0x4a>
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	1858      	adds	r0, r3, r1
 8008480:	42a0      	cmp	r0, r4
 8008482:	d10b      	bne.n	800849c <_free_r+0x74>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	4401      	add	r1, r0
 8008488:	1858      	adds	r0, r3, r1
 800848a:	4282      	cmp	r2, r0
 800848c:	6019      	str	r1, [r3, #0]
 800848e:	d1dd      	bne.n	800844c <_free_r+0x24>
 8008490:	6810      	ldr	r0, [r2, #0]
 8008492:	6852      	ldr	r2, [r2, #4]
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	4401      	add	r1, r0
 8008498:	6019      	str	r1, [r3, #0]
 800849a:	e7d7      	b.n	800844c <_free_r+0x24>
 800849c:	d902      	bls.n	80084a4 <_free_r+0x7c>
 800849e:	230c      	movs	r3, #12
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	e7d3      	b.n	800844c <_free_r+0x24>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	1821      	adds	r1, r4, r0
 80084a8:	428a      	cmp	r2, r1
 80084aa:	bf04      	itt	eq
 80084ac:	6811      	ldreq	r1, [r2, #0]
 80084ae:	6852      	ldreq	r2, [r2, #4]
 80084b0:	6062      	str	r2, [r4, #4]
 80084b2:	bf04      	itt	eq
 80084b4:	1809      	addeq	r1, r1, r0
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	605c      	str	r4, [r3, #4]
 80084ba:	e7c7      	b.n	800844c <_free_r+0x24>
 80084bc:	bd38      	pop	{r3, r4, r5, pc}
 80084be:	bf00      	nop
 80084c0:	20000128 	.word	0x20000128

080084c4 <_malloc_r>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	1ccd      	adds	r5, r1, #3
 80084c8:	f025 0503 	bic.w	r5, r5, #3
 80084cc:	3508      	adds	r5, #8
 80084ce:	2d0c      	cmp	r5, #12
 80084d0:	bf38      	it	cc
 80084d2:	250c      	movcc	r5, #12
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	4606      	mov	r6, r0
 80084d8:	db01      	blt.n	80084de <_malloc_r+0x1a>
 80084da:	42a9      	cmp	r1, r5
 80084dc:	d903      	bls.n	80084e6 <_malloc_r+0x22>
 80084de:	230c      	movs	r3, #12
 80084e0:	6033      	str	r3, [r6, #0]
 80084e2:	2000      	movs	r0, #0
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
 80084e6:	f000 f87d 	bl	80085e4 <__malloc_lock>
 80084ea:	4a21      	ldr	r2, [pc, #132]	; (8008570 <_malloc_r+0xac>)
 80084ec:	6814      	ldr	r4, [r2, #0]
 80084ee:	4621      	mov	r1, r4
 80084f0:	b991      	cbnz	r1, 8008518 <_malloc_r+0x54>
 80084f2:	4c20      	ldr	r4, [pc, #128]	; (8008574 <_malloc_r+0xb0>)
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	b91b      	cbnz	r3, 8008500 <_malloc_r+0x3c>
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f863 	bl	80085c4 <_sbrk_r>
 80084fe:	6020      	str	r0, [r4, #0]
 8008500:	4629      	mov	r1, r5
 8008502:	4630      	mov	r0, r6
 8008504:	f000 f85e 	bl	80085c4 <_sbrk_r>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d124      	bne.n	8008556 <_malloc_r+0x92>
 800850c:	230c      	movs	r3, #12
 800850e:	6033      	str	r3, [r6, #0]
 8008510:	4630      	mov	r0, r6
 8008512:	f000 f868 	bl	80085e6 <__malloc_unlock>
 8008516:	e7e4      	b.n	80084e2 <_malloc_r+0x1e>
 8008518:	680b      	ldr	r3, [r1, #0]
 800851a:	1b5b      	subs	r3, r3, r5
 800851c:	d418      	bmi.n	8008550 <_malloc_r+0x8c>
 800851e:	2b0b      	cmp	r3, #11
 8008520:	d90f      	bls.n	8008542 <_malloc_r+0x7e>
 8008522:	600b      	str	r3, [r1, #0]
 8008524:	50cd      	str	r5, [r1, r3]
 8008526:	18cc      	adds	r4, r1, r3
 8008528:	4630      	mov	r0, r6
 800852a:	f000 f85c 	bl	80085e6 <__malloc_unlock>
 800852e:	f104 000b 	add.w	r0, r4, #11
 8008532:	1d23      	adds	r3, r4, #4
 8008534:	f020 0007 	bic.w	r0, r0, #7
 8008538:	1ac3      	subs	r3, r0, r3
 800853a:	d0d3      	beq.n	80084e4 <_malloc_r+0x20>
 800853c:	425a      	negs	r2, r3
 800853e:	50e2      	str	r2, [r4, r3]
 8008540:	e7d0      	b.n	80084e4 <_malloc_r+0x20>
 8008542:	428c      	cmp	r4, r1
 8008544:	684b      	ldr	r3, [r1, #4]
 8008546:	bf16      	itet	ne
 8008548:	6063      	strne	r3, [r4, #4]
 800854a:	6013      	streq	r3, [r2, #0]
 800854c:	460c      	movne	r4, r1
 800854e:	e7eb      	b.n	8008528 <_malloc_r+0x64>
 8008550:	460c      	mov	r4, r1
 8008552:	6849      	ldr	r1, [r1, #4]
 8008554:	e7cc      	b.n	80084f0 <_malloc_r+0x2c>
 8008556:	1cc4      	adds	r4, r0, #3
 8008558:	f024 0403 	bic.w	r4, r4, #3
 800855c:	42a0      	cmp	r0, r4
 800855e:	d005      	beq.n	800856c <_malloc_r+0xa8>
 8008560:	1a21      	subs	r1, r4, r0
 8008562:	4630      	mov	r0, r6
 8008564:	f000 f82e 	bl	80085c4 <_sbrk_r>
 8008568:	3001      	adds	r0, #1
 800856a:	d0cf      	beq.n	800850c <_malloc_r+0x48>
 800856c:	6025      	str	r5, [r4, #0]
 800856e:	e7db      	b.n	8008528 <_malloc_r+0x64>
 8008570:	20000128 	.word	0x20000128
 8008574:	2000012c 	.word	0x2000012c

08008578 <_realloc_r>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	4607      	mov	r7, r0
 800857c:	4614      	mov	r4, r2
 800857e:	460e      	mov	r6, r1
 8008580:	b921      	cbnz	r1, 800858c <_realloc_r+0x14>
 8008582:	4611      	mov	r1, r2
 8008584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008588:	f7ff bf9c 	b.w	80084c4 <_malloc_r>
 800858c:	b922      	cbnz	r2, 8008598 <_realloc_r+0x20>
 800858e:	f7ff ff4b 	bl	8008428 <_free_r>
 8008592:	4625      	mov	r5, r4
 8008594:	4628      	mov	r0, r5
 8008596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008598:	f000 f826 	bl	80085e8 <_malloc_usable_size_r>
 800859c:	42a0      	cmp	r0, r4
 800859e:	d20f      	bcs.n	80085c0 <_realloc_r+0x48>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7ff ff8e 	bl	80084c4 <_malloc_r>
 80085a8:	4605      	mov	r5, r0
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d0f2      	beq.n	8008594 <_realloc_r+0x1c>
 80085ae:	4631      	mov	r1, r6
 80085b0:	4622      	mov	r2, r4
 80085b2:	f7ff ff15 	bl	80083e0 <memcpy>
 80085b6:	4631      	mov	r1, r6
 80085b8:	4638      	mov	r0, r7
 80085ba:	f7ff ff35 	bl	8008428 <_free_r>
 80085be:	e7e9      	b.n	8008594 <_realloc_r+0x1c>
 80085c0:	4635      	mov	r5, r6
 80085c2:	e7e7      	b.n	8008594 <_realloc_r+0x1c>

080085c4 <_sbrk_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4c06      	ldr	r4, [pc, #24]	; (80085e0 <_sbrk_r+0x1c>)
 80085c8:	2300      	movs	r3, #0
 80085ca:	4605      	mov	r5, r0
 80085cc:	4608      	mov	r0, r1
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	f7f9 fbcc 	bl	8001d6c <_sbrk>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d102      	bne.n	80085de <_sbrk_r+0x1a>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	b103      	cbz	r3, 80085de <_sbrk_r+0x1a>
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	20000f28 	.word	0x20000f28

080085e4 <__malloc_lock>:
 80085e4:	4770      	bx	lr

080085e6 <__malloc_unlock>:
 80085e6:	4770      	bx	lr

080085e8 <_malloc_usable_size_r>:
 80085e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ec:	1f18      	subs	r0, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfbc      	itt	lt
 80085f2:	580b      	ldrlt	r3, [r1, r0]
 80085f4:	18c0      	addlt	r0, r0, r3
 80085f6:	4770      	bx	lr

080085f8 <_init>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	bf00      	nop
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr

08008604 <_fini>:
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008606:	bf00      	nop
 8008608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860a:	bc08      	pop	{r3}
 800860c:	469e      	mov	lr, r3
 800860e:	4770      	bx	lr
