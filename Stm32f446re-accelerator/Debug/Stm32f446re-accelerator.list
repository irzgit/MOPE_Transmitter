
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007644  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078cc  080078cc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d4  080078d4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080078dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000088  08007964  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014dc  08007964  000214dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183ee  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000320c  00000000  00000000  000384a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  0003b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  0003c908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024127  00000000  00000000  0003d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f585  00000000  00000000  00061b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3430  00000000  00000000  0007108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001444bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd8  00000000  00000000  00144538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080077fc 	.word	0x080077fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080077fc 	.word	0x080077fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
 80005b8:	f001 ff38 	bl	800242c <SPIWrite>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 ff30 	bl	800242c <SPIWrite>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 ff28 	bl	800242c <SPIWrite>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 ff20 	bl	800242c <SPIWrite>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
 800060c:	f001 ff32 	bl	8002474 <BurstWrite>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08007838 	.word	0x08007838

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f001 fefc 	bl	800242c <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f001 fef8 	bl	800242c <SPIWrite>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08007844 	.word	0x08007844

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
 800065c:	f001 fee6 	bl	800242c <SPIWrite>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08007848 	.word	0x08007848

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
 8000680:	f001 fed4 	bl	800242c <SPIWrite>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	0800784c 	.word	0x0800784c

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C);
	SPIWrite(LR_RegModemConfig1,0x8E);
 80006a2:	218e      	movs	r1, #142	; 0x8e
 80006a4:	201d      	movs	r0, #29
 80006a6:	f001 fec1 	bl	800242c <SPIWrite>
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
 80006c8:	f001 feb0 	bl	800242c <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
 80006d4:	f001 feaa 	bl	800242c <SPIWrite>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f001 fe99 	bl	800242c <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f001 fe93 	bl	800242c <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	460a      	mov	r2, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	b2da      	uxtb	r2, r3
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2040      	movs	r0, #64	; 0x40
 8000732:	f001 fe7b 	bl	800242c <SPIWrite>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000742:	21f7      	movs	r1, #247	; 0xf7
 8000744:	2011      	movs	r0, #17
 8000746:	f001 fe71 	bl	800242c <SPIWrite>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4619      	mov	r1, r3
 800075c:	2022      	movs	r0, #34	; 0x22
 800075e:	f001 fe65 	bl	800242c <SPIWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
 800077a:	f001 fe57 	bl	800242c <SPIWrite>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4619      	mov	r1, r3
 8000794:	200d      	movs	r0, #13
 8000796:	f001 fe49 	bl	800242c <SPIWrite>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80007a6:	2183      	movs	r1, #131	; 0x83
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 fe3f 	bl	800242c <SPIWrite>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fe55 	bl	8002474 <BurstWrite>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007d6:	f7ff fefb 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007da:	f7ff ff01 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff06 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff19 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff2c 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff3b 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	2007      	movs	r0, #7
 80007fc:	f7ff ff48 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000800:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000804:	2101      	movs	r1, #1
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ff53 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 800080c:	2008      	movs	r0, #8
 800080e:	f7ff ff67 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000812:	f7ff fed5 	bl	80005c0 <Rf96_Standby>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1(1,0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff74 	bl	800070e <Rf96_PinOut_Di0_Di1>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000826:	f7ff fec3 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082a:	f7ff ff88 	bl	800073e <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 800082e:	201b      	movs	r0, #27
 8000830:	f7ff ff8d 	bl	800074e <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	f7ff ff98 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ffa3 	bl	8000786 <Rf96_FIFO_point>

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffac 	bl	80007b2 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800085a:	f7ff ffa2 	bl	80007a2 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <PacketToRadio>:
uint8_t accelSelect[3][5] = {{0x68, 0x04, 0x32, 0x04, 0x3a},{0x68, 0x04, 0x64, 0x04, 0x6c},{0x68, 0x04, 0x96, 0x04, 0x9e}};



void PacketToRadio(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e01c      	b.n	80008ae <PacketToRadio+0x46>
	{
		for(uint8_t i=0;i<9;i++)
 8000874:	2300      	movs	r3, #0
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	e013      	b.n	80008a2 <PacketToRadio+0x3a>
		   RadioBuff[i+j*9]=packageCut[j][i];
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	79b8      	ldrb	r0, [r7, #6]
 800087e:	79bc      	ldrb	r4, [r7, #6]
 8000880:	79f9      	ldrb	r1, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	18e1      	adds	r1, r4, r3
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <PacketToRadio+0x6c>)
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	4423      	add	r3, r4
 8000894:	4403      	add	r3, r0
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <PacketToRadio+0x70>)
 800089a:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<9;i++)
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	3301      	adds	r3, #1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d9e8      	bls.n	800087a <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3301      	adds	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d9df      	bls.n	8000874 <PacketToRadio+0xc>
	}
	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f7ff ff58 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	f7ff ff63 	bl	8000786 <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 80008c0:	f7ff fe76 	bl	80005b0 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 80008c4:	211b      	movs	r1, #27
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <PacketToRadio+0x70>)
 80008c8:	f7ff ffbc 	bl	8000844 <Rf96_LoRaTxPacket>

}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	200000d0 	.word	0x200000d0
 80008d8:	200009b0 	.word	0x200009b0

080008dc <transmit>:

void transmit(uint8_t* str, uint8_t* str2)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af08      	add	r7, sp, #32
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0;i<NumofPacket;i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	f000 bc50 	b.w	800118e <transmit+0x8b2>
	{


		        // первый акселерометр
			    // Ось Х
				xIntSumFirst = (str[1+8+i*36] & 0x0F) * 10 + (str[1+9+i*36] >> 4); // целочисленная сумма X
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	4613      	mov	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4413      	add	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	3309      	adds	r3, #9
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f003 020f 	and.w	r2, r3, #15
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4619      	mov	r1, r3
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	4613      	mov	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	330a      	adds	r3, #10
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	b2db      	uxtb	r3, r3
 8000928:	440b      	add	r3, r1
 800092a:	4ab6      	ldr	r2, [pc, #728]	; (8000c04 <transmit+0x328>)
 800092c:	6013      	str	r3, [r2, #0]
				x5First = str[1+9+i*36] & 0x0F; //перевод правого бита 5го байта
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	4613      	mov	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	330a      	adds	r3, #10
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	4ab0      	ldr	r2, [pc, #704]	; (8000c08 <transmit+0x32c>)
 8000948:	6013      	str	r3, [r2, #0]
				x60First = str[1+10+i*36] >> 4; //перевод левого бита 6го байта
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4613      	mov	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	330b      	adds	r3, #11
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4ba9      	ldr	r3, [pc, #676]	; (8000c0c <transmit+0x330>)
 8000966:	601a      	str	r2, [r3, #0]
				x65First = str[1+10+i*36] & 0x0F; //перевод правого бита 6го байта
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	330b      	adds	r3, #11
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	4aa3      	ldr	r2, [pc, #652]	; (8000c10 <transmit+0x334>)
 8000982:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d;",xIntSumFirst, x5First, x60First);
 8000984:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <transmit+0x328>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b9f      	ldr	r3, [pc, #636]	; (8000c08 <transmit+0x32c>)
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	4b9f      	ldr	r3, [pc, #636]	; (8000c0c <transmit+0x330>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	460b      	mov	r3, r1
 8000994:	499f      	ldr	r1, [pc, #636]	; (8000c14 <transmit+0x338>)
 8000996:	48a0      	ldr	r0, [pc, #640]	; (8000c18 <transmit+0x33c>)
 8000998:	f006 fb2a 	bl	8006ff0 <siprintf>
				if((str[1+8+i*36] >> 4) == 0x01)
 800099c:	7bfa      	ldrb	r2, [r7, #15]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	3309      	adds	r3, #9
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d102      	bne.n	80009be <transmit+0xe2>
					xvalFirst[0] = '-';
 80009b8:	4b97      	ldr	r3, [pc, #604]	; (8000c18 <transmit+0x33c>)
 80009ba:	222d      	movs	r2, #45	; 0x2d
 80009bc:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[1+11+i*36] & 0x0F) * 10 + (str[1+12+i*36] >> 4);	// целочисленная сумма Y
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	4613      	mov	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	330c      	adds	r3, #12
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	f003 020f 	and.w	r2, r3, #15
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	4613      	mov	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	330d      	adds	r3, #13
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	440b      	add	r3, r1
 80009fa:	4a88      	ldr	r2, [pc, #544]	; (8000c1c <transmit+0x340>)
 80009fc:	6013      	str	r3, [r2, #0]
				y8First = str[1+12+i*36] & 0x0F; //перевод правого бита 8го байта
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	4613      	mov	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	330d      	adds	r3, #13
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	4a82      	ldr	r2, [pc, #520]	; (8000c20 <transmit+0x344>)
 8000a18:	6013      	str	r3, [r2, #0]
				y90First = str[1+13+i*36] >> 4; //перевод левого бита 9го байта
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	330e      	adds	r3, #14
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b7b      	ldr	r3, [pc, #492]	; (8000c24 <transmit+0x348>)
 8000a36:	601a      	str	r2, [r3, #0]
				y95First = str[1+13+i*36] & 0x0F; //перевод правого бита 9го байта
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	330e      	adds	r3, #14
 8000a44:	461a      	mov	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	4a75      	ldr	r2, [pc, #468]	; (8000c28 <transmit+0x34c>)
 8000a52:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d;", yIntSumFirst, y8First, y90First);
 8000a54:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <transmit+0x340>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b71      	ldr	r3, [pc, #452]	; (8000c20 <transmit+0x344>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b71      	ldr	r3, [pc, #452]	; (8000c24 <transmit+0x348>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	460b      	mov	r3, r1
 8000a64:	496b      	ldr	r1, [pc, #428]	; (8000c14 <transmit+0x338>)
 8000a66:	4871      	ldr	r0, [pc, #452]	; (8000c2c <transmit+0x350>)
 8000a68:	f006 fac2 	bl	8006ff0 <siprintf>
				if((str[1+11+i*36] >> 4) == 0x01)
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	330c      	adds	r3, #12
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d102      	bne.n	8000a8e <transmit+0x1b2>
					yvalFirst[0] = '-';
 8000a88:	4b68      	ldr	r3, [pc, #416]	; (8000c2c <transmit+0x350>)
 8000a8a:	222d      	movs	r2, #45	; 0x2d
 8000a8c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[1+14+i*36] & 0x0F) * 10 + (str[1+15+i*36] >> 4); //целочисленная сумма Z
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	330f      	adds	r3, #15
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 020f 	and.w	r2, r3, #15
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	7bfa      	ldrb	r2, [r7, #15]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	3310      	adds	r3, #16
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	440b      	add	r3, r1
 8000aca:	4a59      	ldr	r2, [pc, #356]	; (8000c30 <transmit+0x354>)
 8000acc:	6013      	str	r3, [r2, #0]
				z11First = str[1+15+i*36] & 0x0F; //перевод правого бита 11го байта
 8000ace:	7bfa      	ldrb	r2, [r7, #15]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	3310      	adds	r3, #16
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	4a53      	ldr	r2, [pc, #332]	; (8000c34 <transmit+0x358>)
 8000ae8:	6013      	str	r3, [r2, #0]
				z120First = str[1+16+i*36] >> 4; //перевод левого бита 12го байта
 8000aea:	7bfa      	ldrb	r2, [r7, #15]
 8000aec:	4613      	mov	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3311      	adds	r3, #17
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <transmit+0x35c>)
 8000b06:	601a      	str	r2, [r3, #0]
				z125First = str[1+16+i*36] & 0x0F; //перевод правого бита 12го байта
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	3311      	adds	r3, #17
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <transmit+0x360>)
 8000b22:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d;", zIntSumFirst, z11First, z120First);
 8000b24:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <transmit+0x354>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <transmit+0x358>)
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <transmit+0x35c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	460b      	mov	r3, r1
 8000b34:	4937      	ldr	r1, [pc, #220]	; (8000c14 <transmit+0x338>)
 8000b36:	4842      	ldr	r0, [pc, #264]	; (8000c40 <transmit+0x364>)
 8000b38:	f006 fa5a 	bl	8006ff0 <siprintf>
				if((str[1+14+i*36] >> 4) == 0x01)
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	330f      	adds	r3, #15
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d102      	bne.n	8000b5e <transmit+0x282>
					zvalFirst[0] = '-';
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <transmit+0x364>)
 8000b5a:	222d      	movs	r2, #45	; 0x2d
 8000b5c:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[1+17+i*36] & 0x0F) * 10 + (str[1+18+i*36] >> 4); // целочисленная сумма X
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	4613      	mov	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3312      	adds	r3, #18
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 020f 	and.w	r2, r3, #15
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3313      	adds	r3, #19
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	440b      	add	r3, r1
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <transmit+0x368>)
 8000b9c:	6013      	str	r3, [r2, #0]
				x5Second = str[1+18+i*36] & 0x0F; //перевод правого бита 5го байта
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	3313      	adds	r3, #19
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <transmit+0x36c>)
 8000bb8:	6013      	str	r3, [r2, #0]
				x60Second = str[1+19+i*36] >> 4; //перевод левого бита 6го байта
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <transmit+0x370>)
 8000bd6:	601a      	str	r2, [r3, #0]
				x65Second = str[1+19+i*36] & 0x0F; //перевод правого бита 6го байта
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	3314      	adds	r3, #20
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <transmit+0x374>)
 8000bf2:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d;",xIntSumSecond, x5Second, x60Second);
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <transmit+0x368>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <transmit+0x36c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <transmit+0x370>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	e028      	b.n	8000c54 <transmit+0x378>
 8000c02:	bf00      	nop
 8000c04:	20000de8 	.word	0x20000de8
 8000c08:	2000094c 	.word	0x2000094c
 8000c0c:	20000bd8 	.word	0x20000bd8
 8000c10:	20000958 	.word	0x20000958
 8000c14:	08007814 	.word	0x08007814
 8000c18:	2000019c 	.word	0x2000019c
 8000c1c:	20000930 	.word	0x20000930
 8000c20:	20000934 	.word	0x20000934
 8000c24:	2000055c 	.word	0x2000055c
 8000c28:	20000820 	.word	0x20000820
 8000c2c:	20000560 	.word	0x20000560
 8000c30:	200009a0 	.word	0x200009a0
 8000c34:	20000770 	.word	0x20000770
 8000c38:	2000076c 	.word	0x2000076c
 8000c3c:	20000954 	.word	0x20000954
 8000c40:	200009a8 	.word	0x200009a8
 8000c44:	2000092c 	.word	0x2000092c
 8000c48:	20000bdc 	.word	0x20000bdc
 8000c4c:	20000568 	.word	0x20000568
 8000c50:	20000928 	.word	0x20000928
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	460b      	mov	r3, r1
 8000c58:	49b9      	ldr	r1, [pc, #740]	; (8000f40 <transmit+0x664>)
 8000c5a:	48ba      	ldr	r0, [pc, #744]	; (8000f44 <transmit+0x668>)
 8000c5c:	f006 f9c8 	bl	8006ff0 <siprintf>
				if((str[1+17+i*36] >> 4) == 0x01)
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	3312      	adds	r3, #18
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d102      	bne.n	8000c82 <transmit+0x3a6>
					xvalSecond[0] = '-';
 8000c7c:	4bb1      	ldr	r3, [pc, #708]	; (8000f44 <transmit+0x668>)
 8000c7e:	222d      	movs	r2, #45	; 0x2d
 8000c80:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[1+20+i*36] & 0x0F) * 10 + (str[1+21+i*36] >> 4);	// целочисленная сумма Y
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3315      	adds	r3, #21
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f003 020f 	and.w	r2, r3, #15
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	3316      	adds	r3, #22
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	4aa2      	ldr	r2, [pc, #648]	; (8000f48 <transmit+0x66c>)
 8000cc0:	6013      	str	r3, [r2, #0]
				y8Second = str[1+21+i*36] & 0x0F; //перевод правого бита 8го байта
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	3316      	adds	r3, #22
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	4a9c      	ldr	r2, [pc, #624]	; (8000f4c <transmit+0x670>)
 8000cdc:	6013      	str	r3, [r2, #0]
				y90Second = str[1+22+i*36] >> 4; //перевод левого бита 9го байта
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3317      	adds	r3, #23
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <transmit+0x674>)
 8000cfa:	601a      	str	r2, [r3, #0]
				y95Second = str[1+22+i*36] & 0x0F; //перевод правого бита 9го байта
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3317      	adds	r3, #23
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	4a8f      	ldr	r2, [pc, #572]	; (8000f54 <transmit+0x678>)
 8000d16:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d;", yIntSumSecond, y8Second, y90Second);
 8000d18:	4b8b      	ldr	r3, [pc, #556]	; (8000f48 <transmit+0x66c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <transmit+0x670>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	4b8b      	ldr	r3, [pc, #556]	; (8000f50 <transmit+0x674>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	460b      	mov	r3, r1
 8000d28:	4985      	ldr	r1, [pc, #532]	; (8000f40 <transmit+0x664>)
 8000d2a:	488b      	ldr	r0, [pc, #556]	; (8000f58 <transmit+0x67c>)
 8000d2c:	f006 f960 	bl	8006ff0 <siprintf>
				if((str[1+20+i*36] >> 4) == 0x01)
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4613      	mov	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3315      	adds	r3, #21
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d102      	bne.n	8000d52 <transmit+0x476>
					yvalSecond[0] = '-';
 8000d4c:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <transmit+0x67c>)
 8000d4e:	222d      	movs	r2, #45	; 0x2d
 8000d50:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[1+23+i*36] & 0x0F) * 10 + (str[1+24+i*36] >> 4); //целочисленная сумма Z
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f003 020f 	and.w	r2, r3, #15
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	4613      	mov	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	3319      	adds	r3, #25
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4a73      	ldr	r2, [pc, #460]	; (8000f5c <transmit+0x680>)
 8000d90:	6013      	str	r3, [r2, #0]
				z11Second = str[1+24+i*36] & 0x0F; //перевод правого бита 11го байта
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	4613      	mov	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3319      	adds	r3, #25
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	4a6d      	ldr	r2, [pc, #436]	; (8000f60 <transmit+0x684>)
 8000dac:	6013      	str	r3, [r2, #0]
				z120Second = str[1+25+i*36] >> 4; //перевод левого бита 12го байта
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	4613      	mov	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	331a      	adds	r3, #26
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <transmit+0x688>)
 8000dca:	601a      	str	r2, [r3, #0]
				z125Second = str[1+25+i*36] & 0x0F; //перевод правого бита 12го байта
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	331a      	adds	r3, #26
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <transmit+0x68c>)
 8000de6:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d;", zIntSumSecond, z11Second, z120Second);
 8000de8:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <transmit+0x680>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <transmit+0x684>)
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <transmit+0x688>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	460b      	mov	r3, r1
 8000df8:	4951      	ldr	r1, [pc, #324]	; (8000f40 <transmit+0x664>)
 8000dfa:	485c      	ldr	r0, [pc, #368]	; (8000f6c <transmit+0x690>)
 8000dfc:	f006 f8f8 	bl	8006ff0 <siprintf>
				if((str[1+23+i*36] >> 4) == 0x01)
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	4613      	mov	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d102      	bne.n	8000e22 <transmit+0x546>
					zvalSecond[0] = '-';
 8000e1c:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <transmit+0x690>)
 8000e1e:	222d      	movs	r2, #45	; 0x2d
 8000e20:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[1+26+i*36] & 0x0F) * 10 + (str[1+27+i*36] >> 4); // целочисленная сумма X
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	331b      	adds	r3, #27
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f003 020f 	and.w	r2, r3, #15
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	331c      	adds	r3, #28
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <transmit+0x694>)
 8000e60:	6013      	str	r3, [r2, #0]
				x5Third = str[1+27+i*36] & 0x0F; //перевод правого бита 5го байта
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	331c      	adds	r3, #28
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <transmit+0x698>)
 8000e7c:	6013      	str	r3, [r2, #0]
				x60Third = str[1+28+i*36] >> 4; //перевод левого бита 6го байта
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	4613      	mov	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	331d      	adds	r3, #29
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <transmit+0x69c>)
 8000e9a:	601a      	str	r2, [r3, #0]
				x65Third = str[1+28+i*36] & 0x0F; //перевод правого бита 6го байта
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	331d      	adds	r3, #29
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <transmit+0x6a0>)
 8000eb6:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d;",xIntSumThird, x5Third, x60Third);
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <transmit+0x694>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <transmit+0x698>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <transmit+0x69c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	491d      	ldr	r1, [pc, #116]	; (8000f40 <transmit+0x664>)
 8000eca:	482d      	ldr	r0, [pc, #180]	; (8000f80 <transmit+0x6a4>)
 8000ecc:	f006 f890 	bl	8006ff0 <siprintf>
				if((str[1+26+i*36] >> 4) == 0x01)
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	331b      	adds	r3, #27
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <transmit+0x616>
					xvalThird[0] = '-';
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <transmit+0x6a4>)
 8000eee:	222d      	movs	r2, #45	; 0x2d
 8000ef0:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[1+29+i*36] & 0x0F) * 10 + (str[1+30+i*36] >> 4);	// целочисленная сумма Y
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	331e      	adds	r3, #30
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	f003 020f 	and.w	r2, r3, #15
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	4613      	mov	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	331f      	adds	r3, #31
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <transmit+0x6a8>)
 8000f30:	6013      	str	r3, [r2, #0]
				y8Third = str[1+30+i*36] & 0x0F; //перевод правого бита 8го байта
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	e024      	b.n	8000f88 <transmit+0x6ac>
 8000f3e:	bf00      	nop
 8000f40:	08007814 	.word	0x08007814
 8000f44:	20000120 	.word	0x20000120
 8000f48:	200007dc 	.word	0x200007dc
 8000f4c:	20000950 	.word	0x20000950
 8000f50:	20000b2c 	.word	0x20000b2c
 8000f54:	20000118 	.word	0x20000118
 8000f58:	20000938 	.word	0x20000938
 8000f5c:	20000114 	.word	0x20000114
 8000f60:	20001060 	.word	0x20001060
 8000f64:	20000774 	.word	0x20000774
 8000f68:	20000128 	.word	0x20000128
 8000f6c:	20000778 	.word	0x20000778
 8000f70:	2000105c 	.word	0x2000105c
 8000f74:	200008e4 	.word	0x200008e4
 8000f78:	20000554 	.word	0x20000554
 8000f7c:	20000940 	.word	0x20000940
 8000f80:	20000b30 	.word	0x20000b30
 8000f84:	2000099c 	.word	0x2000099c
 8000f88:	331f      	adds	r3, #31
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a82      	ldr	r2, [pc, #520]	; (80011a0 <transmit+0x8c4>)
 8000f98:	6013      	str	r3, [r2, #0]
				y90Third = str[1+31+i*36] >> 4; //перевод левого бита 9го байта
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3320      	adds	r3, #32
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <transmit+0x8c8>)
 8000fb6:	601a      	str	r2, [r3, #0]
				y95Third = str[1+31+i*36] & 0x0F; //перевод правого бита 9го байта
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	3320      	adds	r3, #32
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <transmit+0x8cc>)
 8000fd2:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d;", yIntSumThird, y8Third, y90Third);
 8000fd4:	4b75      	ldr	r3, [pc, #468]	; (80011ac <transmit+0x8d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <transmit+0x8c4>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <transmit+0x8c8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4972      	ldr	r1, [pc, #456]	; (80011b0 <transmit+0x8d4>)
 8000fe6:	4873      	ldr	r0, [pc, #460]	; (80011b4 <transmit+0x8d8>)
 8000fe8:	f006 f802 	bl	8006ff0 <siprintf>
				if((str[1+29+i*36] >> 4) == 0x01)
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	331e      	adds	r3, #30
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <transmit+0x732>
					yvalThird[0] = '-';
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <transmit+0x8d8>)
 800100a:	222d      	movs	r2, #45	; 0x2d
 800100c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[1+32+i*36] & 0x0F) * 10 + (str[1+33+i*36] >> 4); //целочисленная сумма Z
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	3321      	adds	r3, #33	; 0x21
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 020f 	and.w	r2, r3, #15
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4619      	mov	r1, r3
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	3322      	adds	r3, #34	; 0x22
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	b2db      	uxtb	r3, r3
 8001048:	440b      	add	r3, r1
 800104a:	4a5b      	ldr	r2, [pc, #364]	; (80011b8 <transmit+0x8dc>)
 800104c:	6013      	str	r3, [r2, #0]
				z11Third = str[1+33+i*36] & 0x0F; //перевод правого бита 11го байта
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	3322      	adds	r3, #34	; 0x22
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <transmit+0x8e0>)
 8001068:	6013      	str	r3, [r2, #0]
				z120Third = str[1+34+i*36] >> 4; //перевод левого бита 12го байта
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	3323      	adds	r3, #35	; 0x23
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <transmit+0x8e4>)
 8001086:	601a      	str	r2, [r3, #0]
				z125Third = str[1+34+i*36] & 0x0F; //перевод правого бита 12го байта
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3323      	adds	r3, #35	; 0x23
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <transmit+0x8e8>)
 80010a2:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d;", zIntSumThird, z11Third, z120Third);
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <transmit+0x8dc>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <transmit+0x8e0>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <transmit+0x8e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	460b      	mov	r3, r1
 80010b4:	493e      	ldr	r1, [pc, #248]	; (80011b0 <transmit+0x8d4>)
 80010b6:	4844      	ldr	r0, [pc, #272]	; (80011c8 <transmit+0x8ec>)
 80010b8:	f005 ff9a 	bl	8006ff0 <siprintf>
				if((str[1+32+i*36] >> 4) == 0x01)
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	3321      	adds	r3, #33	; 0x21
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <transmit+0x802>
					zvalThird[0] = '-';
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <transmit+0x8ec>)
 80010da:	222d      	movs	r2, #45	; 0x2d
 80010dc:	701a      	strb	r2, [r3, #0]


				for(uint8_t j=0;j<8;j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e019      	b.n	8001118 <transmit+0x83c>
				{

					str2[j+i*73]=str[j+i*36];
 80010e4:	7bb9      	ldrb	r1, [r7, #14]
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1899      	adds	r1, r3, r2
 80010f8:	7bb8      	ldrb	r0, [r7, #14]
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	4403      	add	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	780a      	ldrb	r2, [r1, #0]
 8001110:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	3301      	adds	r3, #1
 8001116:	73bb      	strb	r3, [r7, #14]
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d9e2      	bls.n	80010e4 <transmit+0x808>
				}
				for(uint8_t j=0;j<8;j++)
 800111e:	2300      	movs	r3, #0
 8001120:	737b      	strb	r3, [r7, #13]
 8001122:	e011      	b.n	8001148 <transmit+0x86c>
				{

					str2[j+8+i*73]=';';
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	f103 0108 	add.w	r1, r3, #8
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	440b      	add	r3, r1
 8001138:	461a      	mov	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	223b      	movs	r2, #59	; 0x3b
 8001140:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	3301      	adds	r3, #1
 8001146:	737b      	strb	r3, [r7, #13]
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d9ea      	bls.n	8001124 <transmit+0x848>
				}


				sprintf(&str2[1+8+i*73], "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	3309      	adds	r3, #9
 800115c:	461a      	mov	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	1898      	adds	r0, r3, r2
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <transmit+0x8ec>)
 8001164:	9306      	str	r3, [sp, #24]
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <transmit+0x8d8>)
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <transmit+0x8f0>)
 800116c:	9304      	str	r3, [sp, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <transmit+0x8f4>)
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <transmit+0x8f8>)
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <transmit+0x8fc>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <transmit+0x900>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <transmit+0x904>)
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <transmit+0x908>)
 8001182:	4919      	ldr	r1, [pc, #100]	; (80011e8 <transmit+0x90c>)
 8001184:	f005 ff34 	bl	8006ff0 <siprintf>
	for(uint8_t i=0;i<NumofPacket;i++)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b06      	cmp	r3, #6
 8001192:	f67f abac 	bls.w	80008ee <transmit+0x12>

	}

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200007d8 	.word	0x200007d8
 80011a4:	20000134 	.word	0x20000134
 80011a8:	20000550 	.word	0x20000550
 80011ac:	2000099c 	.word	0x2000099c
 80011b0:	08007814 	.word	0x08007814
 80011b4:	2000012c 	.word	0x2000012c
 80011b8:	20000be0 	.word	0x20000be0
 80011bc:	20000138 	.word	0x20000138
 80011c0:	200009d0 	.word	0x200009d0
 80011c4:	20000558 	.word	0x20000558
 80011c8:	20000944 	.word	0x20000944
 80011cc:	20000b30 	.word	0x20000b30
 80011d0:	20000778 	.word	0x20000778
 80011d4:	20000938 	.word	0x20000938
 80011d8:	20000120 	.word	0x20000120
 80011dc:	200009a8 	.word	0x200009a8
 80011e0:	20000560 	.word	0x20000560
 80011e4:	2000019c 	.word	0x2000019c
 80011e8:	08007820 	.word	0x08007820

080011ec <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	82fb      	strh	r3, [r7, #22]
 8001206:	e01f      	b.n	8001248 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <uint32_TO_charmass+0x70>)
 800120c:	fba3 2301 	umull	r2, r3, r3, r1
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	1aca      	subs	r2, r1, r3
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	1e59      	subs	r1, r3, #1
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	1ac9      	subs	r1, r1, r3
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	440b      	add	r3, r1
 800122a:	4619      	mov	r1, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	440b      	add	r3, r1
 8001230:	3230      	adds	r2, #48	; 0x30
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <uint32_TO_charmass+0x70>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	3301      	adds	r3, #1
 8001246:	82fb      	strh	r3, [r7, #22]
 8001248:	8afa      	ldrh	r2, [r7, #22]
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3db      	bcc.n	8001208 <uint32_TO_charmass+0x1c>

	}
}
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	cccccccd 	.word	0xcccccccd

08001260 <SyncAccel>:


// Функция синхронизации

void SyncAccel(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	  // Синхронизация
	  if(readFlag==1)
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <SyncAccel+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d110      	bne.n	800128e <SyncAccel+0x2e>
	  {
		UsartCount=0;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <SyncAccel+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	  	readFlag=0;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <SyncAccel+0x88>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f002 faf7 	bl	800386c <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 800127e:	481c      	ldr	r0, [pc, #112]	; (80012f0 <SyncAccel+0x90>)
 8001280:	f004 feea 	bl	8006058 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001284:	220e      	movs	r2, #14
 8001286:	491b      	ldr	r1, [pc, #108]	; (80012f4 <SyncAccel+0x94>)
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <SyncAccel+0x90>)
 800128a:	f004 fe65 	bl	8005f58 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag2==1)
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SyncAccel+0x98>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d110      	bne.n	80012b8 <SyncAccel+0x58>
	  {
		UsartCount=0;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <SyncAccel+0x8c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	  	readFlag2=0;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <SyncAccel+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f002 fae2 	bl	800386c <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 80012a8:	4814      	ldr	r0, [pc, #80]	; (80012fc <SyncAccel+0x9c>)
 80012aa:	f004 fed5 	bl	8006058 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 80012ae:	220e      	movs	r2, #14
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <SyncAccel+0xa0>)
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <SyncAccel+0x9c>)
 80012b4:	f004 fe50 	bl	8005f58 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag3==1)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <SyncAccel+0xa4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d110      	bne.n	80012e2 <SyncAccel+0x82>
	  {
		UsartCount=0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <SyncAccel+0x8c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	  	readFlag3=0;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <SyncAccel+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f002 facd 	bl	800386c <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <SyncAccel+0xa8>)
 80012d4:	f004 fec0 	bl	8006058 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 80012d8:	220e      	movs	r2, #14
 80012da:	490c      	ldr	r1, [pc, #48]	; (800130c <SyncAccel+0xac>)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <SyncAccel+0xa8>)
 80012de:	f004 fe3b 	bl	8005f58 <HAL_UART_Receive_DMA>
	  }


}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200009cc 	.word	0x200009cc
 80012ec:	200000f0 	.word	0x200000f0
 80012f0:	200001a4 	.word	0x200001a4
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	200009a4 	.word	0x200009a4
 80012fc:	200008e8 	.word	0x200008e8
 8001300:	200000c0 	.word	0x200000c0
 8001304:	2000011c 	.word	0x2000011c
 8001308:	200007e0 	.word	0x200007e0
 800130c:	200000b2 	.word	0x200000b2

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f002 fa37 	bl	8003788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f8bb 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 fb15 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 facd 	bl	80018c0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001326:	f000 f927 	bl	8001578 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800132a:	f000 fa75 	bl	8001818 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800132e:	f000 fa9d 	bl	800186c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001332:	f000 fa47 	bl	80017c4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001336:	f005 fd65 	bl	8006e04 <MX_FATFS_Init>
  MX_SPI3_Init();
 800133a:	f000 f953 	bl	80015e4 <MX_SPI3_Init>
  MX_UART5_Init();
 800133e:	f000 fa17 	bl	8001770 <MX_UART5_Init>
  MX_TIM6_Init();
 8001342:	f000 f985 	bl	8001650 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001346:	f000 f9b9 	bl	80016bc <MX_TIM7_Init>
  MX_TIM10_Init();
 800134a:	f000 f9ed 	bl	8001728 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Сд карта инициализация
	SDCARD_Init();
 800134e:	f000 fef7 	bl	8002140 <SDCARD_Init>
    // Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8001352:	f7ff fa3e 	bl	80007d2 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8001356:	f7ff fa60 	bl	800081a <Rf96_Lora_TX_mode>

	// Сд карта инициализация
	SDCARD_Init();
 800135a:	f000 fef1 	bl	8002140 <SDCARD_Init>

    // Запуск приема в дма с аксселерометров
    HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 800135e:	220e      	movs	r2, #14
 8001360:	493c      	ldr	r1, [pc, #240]	; (8001454 <main+0x144>)
 8001362:	483d      	ldr	r0, [pc, #244]	; (8001458 <main+0x148>)
 8001364:	f004 fdf8 	bl	8005f58 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001368:	220e      	movs	r2, #14
 800136a:	493c      	ldr	r1, [pc, #240]	; (800145c <main+0x14c>)
 800136c:	483c      	ldr	r0, [pc, #240]	; (8001460 <main+0x150>)
 800136e:	f004 fdf3 	bl	8005f58 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8001372:	220e      	movs	r2, #14
 8001374:	493b      	ldr	r1, [pc, #236]	; (8001464 <main+0x154>)
 8001376:	483c      	ldr	r0, [pc, #240]	; (8001468 <main+0x158>)
 8001378:	f004 fdee 	bl	8005f58 <HAL_UART_Receive_DMA>

    // Отправка первого нулевого пакета
	PacketToRadio();
 800137c:	f7ff fa74 	bl	8000868 <PacketToRadio>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	4839      	ldr	r0, [pc, #228]	; (800146c <main+0x15c>)
 8001386:	f003 f95b 	bl	8004640 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Синхронизация
	    SyncAccel();
 800138a:	f7ff ff69 	bl	8001260 <SyncAccel>

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 800138e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001392:	4837      	ldr	r0, [pc, #220]	; (8001470 <main+0x160>)
 8001394:	f003 f93c 	bl	8004610 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <main+0x92>
		{
			PacketToRadio();
 800139e:	f7ff fa63 	bl	8000868 <PacketToRadio>
		}

		// Запись на SD карту
		if(metka==1)
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <main+0x164>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d1ef      	bne.n	800138a <main+0x7a>
		{
			//HAL_UART_Transmit_IT(&huart2, "\n", 1);

			metka=0;
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <main+0x164>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
			if(pr==1)
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <main+0x168>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d136      	bne.n	8001426 <main+0x116>
			{

				if(z==0)
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <main+0x16c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d11c      	bne.n	80013fa <main+0xea>
				{
					z=1;
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <main+0x16c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]

					memset(Buff_Mid,0,sizeof(Buff_Mid));
 80013c6:	22fc      	movs	r2, #252	; 0xfc
 80013c8:	2100      	movs	r1, #0
 80013ca:	482d      	ldr	r0, [pc, #180]	; (8001480 <main+0x170>)
 80013cc:	f005 fe08 	bl	8006fe0 <memset>
					for(uint8_t i=0;i<NumofPacket;i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	e00e      	b.n	80013f4 <main+0xe4>
					{
						uint32_TO_charmass(0, Buff_Mid, i*36, 8);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	2308      	movs	r3, #8
 80013e6:	4926      	ldr	r1, [pc, #152]	; (8001480 <main+0x170>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff feff 	bl	80011ec <uint32_TO_charmass>
					for(uint8_t i=0;i<NumofPacket;i++)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	3301      	adds	r3, #1
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d9ed      	bls.n	80013d6 <main+0xc6>

					}

				}
				transmit(Buff_Mid,Buff_str1);
 80013fa:	4922      	ldr	r1, [pc, #136]	; (8001484 <main+0x174>)
 80013fc:	4820      	ldr	r0, [pc, #128]	; (8001480 <main+0x170>)
 80013fe:	f7ff fa6d 	bl	80008dc <transmit>


				Buff_str1[510]=';';
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <main+0x174>)
 8001404:	223b      	movs	r2, #59	; 0x3b
 8001406:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str1[511]='\n';
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <main+0x174>)
 800140c:	220a      	movs	r2, #10
 800140e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
				// Запись на SD
				SDCARD_WriteSingleBlock(blockAddr++, Buff_str1);
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <main+0x178>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	491b      	ldr	r1, [pc, #108]	; (8001488 <main+0x178>)
 800141a:	600a      	str	r2, [r1, #0]
 800141c:	4919      	ldr	r1, [pc, #100]	; (8001484 <main+0x174>)
 800141e:	4618      	mov	r0, r3
 8001420:	f000 ff7a 	bl	8002318 <SDCARD_WriteSingleBlock>
 8001424:	e7b1      	b.n	800138a <main+0x7a>

			}
			else
			{

				transmit(Buff_Top,Buff_str2);
 8001426:	4919      	ldr	r1, [pc, #100]	; (800148c <main+0x17c>)
 8001428:	4819      	ldr	r0, [pc, #100]	; (8001490 <main+0x180>)
 800142a:	f7ff fa57 	bl	80008dc <transmit>

				Buff_str2[510]=';';
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <main+0x17c>)
 8001430:	223b      	movs	r2, #59	; 0x3b
 8001432:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str2[511]='\n';
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <main+0x17c>)
 8001438:	220a      	movs	r2, #10
 800143a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff

				// Запись на SD
				SDCARD_WriteSingleBlock(blockAddr++, Buff_str2);
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <main+0x178>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	4910      	ldr	r1, [pc, #64]	; (8001488 <main+0x178>)
 8001446:	600a      	str	r2, [r1, #0]
 8001448:	4910      	ldr	r1, [pc, #64]	; (800148c <main+0x17c>)
 800144a:	4618      	mov	r0, r3
 800144c:	f000 ff64 	bl	8002318 <SDCARD_WriteSingleBlock>
	    SyncAccel();
 8001450:	e79b      	b.n	800138a <main+0x7a>
 8001452:	bf00      	nop
 8001454:	200000a4 	.word	0x200000a4
 8001458:	200001a4 	.word	0x200001a4
 800145c:	200000b2 	.word	0x200000b2
 8001460:	200007e0 	.word	0x200007e0
 8001464:	200000c0 	.word	0x200000c0
 8001468:	200008e8 	.word	0x200008e8
 800146c:	40020800 	.word	0x40020800
 8001470:	40020000 	.word	0x40020000
 8001474:	200000f3 	.word	0x200000f3
 8001478:	200000f2 	.word	0x200000f2
 800147c:	200000f4 	.word	0x200000f4
 8001480:	20000454 	.word	0x20000454
 8001484:	20000be8 	.word	0x20000be8
 8001488:	200000ec 	.word	0x200000ec
 800148c:	2000056c 	.word	0x2000056c
 8001490:	200009d4 	.word	0x200009d4

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	; 0x50
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	2234      	movs	r2, #52	; 0x34
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 fd9c 	bl	8006fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <SystemClock_Config+0xdc>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <SystemClock_Config+0xdc>)
 80014c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <SystemClock_Config+0xdc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <SystemClock_Config+0xe0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a25      	ldr	r2, [pc, #148]	; (8001574 <SystemClock_Config+0xe0>)
 80014de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <SystemClock_Config+0xe0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001508:	23b4      	movs	r3, #180	; 0xb4
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800150c:	2302      	movs	r3, #2
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001510:	2302      	movs	r3, #2
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001514:	2302      	movs	r3, #2
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fbb3 	bl	8004c88 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001528:	f000 fd96 	bl	8002058 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800152c:	f003 f8a2 	bl	8004674 <HAL_PWREx_EnableOverDrive>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001536:	f000 fd8f 	bl	8002058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	2302      	movs	r3, #2
 8001540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001546:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	2105      	movs	r1, #5
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f8db 	bl	8004714 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001564:	f000 fd78 	bl	8002058 <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3750      	adds	r7, #80	; 0x50
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_SPI1_Init+0x64>)
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <MX_SPI1_Init+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI1_Init+0x64>)
 8001584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001588:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI1_Init+0x64>)
 80015a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI1_Init+0x64>)
 80015ac:	2210      	movs	r2, #16
 80015ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_SPI1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI1_Init+0x64>)
 80015c4:	220a      	movs	r2, #10
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_SPI1_Init+0x64>)
 80015ca:	f003 fdb7 	bl	800513c <HAL_SPI_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015d4:	f000 fd40 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000ad4 	.word	0x20000ad4
 80015e0:	40013000 	.word	0x40013000

080015e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_SPI3_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_SPI3_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_SPI3_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SPI3_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_SPI3_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SPI3_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_SPI3_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SPI3_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_SPI3_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_SPI3_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_SPI3_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_SPI3_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_SPI3_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_SPI3_Init+0x64>)
 8001636:	f003 fd81 	bl	800513c <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001640:	f000 fd0a 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000780 	.word	0x20000780
 800164c:	40003c00 	.word	0x40003c00

08001650 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_TIM6_Init+0x64>)
 8001660:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <MX_TIM6_Init+0x68>)
 8001662:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MX_TIM6_Init+0x64>)
 8001666:	f242 3227 	movw	r2, #8999	; 0x2327
 800166a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_TIM6_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_TIM6_Init+0x64>)
 8001674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001678:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_TIM6_Init+0x64>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MX_TIM6_Init+0x64>)
 8001682:	f004 f941 	bl	8005908 <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800168c:	f000 fce4 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_TIM6_Init+0x64>)
 800169e:	f004 fb7d 	bl	8005d9c <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016a8:	f000 fcd6 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000095c 	.word	0x2000095c
 80016b8:	40001000 	.word	0x40001000

080016bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_TIM7_Init+0x64>)
 80016cc:	4a15      	ldr	r2, [pc, #84]	; (8001724 <MX_TIM7_Init+0x68>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_TIM7_Init+0x64>)
 80016d2:	f242 3227 	movw	r2, #8999	; 0x2327
 80016d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_TIM7_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_TIM7_Init+0x64>)
 80016e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_TIM7_Init+0x64>)
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_TIM7_Init+0x64>)
 80016ee:	f004 f90b 	bl	8005908 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80016f8:	f000 fcae 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_TIM7_Init+0x64>)
 800170a:	f004 fb47 	bl	8005d9c <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001714:	f000 fca0 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000101c 	.word	0x2000101c
 8001724:	40001400 	.word	0x40001400

08001728 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_TIM10_Init+0x40>)
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <MX_TIM10_Init+0x44>)
 8001730:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_TIM10_Init+0x40>)
 8001734:	f242 3227 	movw	r2, #8999	; 0x2327
 8001738:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_TIM10_Init+0x40>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_TIM10_Init+0x40>)
 8001742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001746:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_TIM10_Init+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_TIM10_Init+0x40>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_TIM10_Init+0x40>)
 8001756:	f004 f8d7 	bl	8005908 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001760:	f000 fc7a 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000414 	.word	0x20000414
 800176c:	40014400 	.word	0x40014400

08001770 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_UART5_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_UART5_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_UART5_Init+0x4c>)
 800177c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001780:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_UART5_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_UART5_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_UART5_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_UART5_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_UART5_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_UART5_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_UART5_Init+0x4c>)
 80017a8:	f004 fb88 	bl	8005ebc <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80017b2:	f000 fc51 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200007e0 	.word	0x200007e0
 80017c0:	40005000 	.word	0x40005000

080017c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_USART1_UART_Init+0x50>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017d0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80017d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_USART1_UART_Init+0x4c>)
 80017fc:	f004 fb5e 	bl	8005ebc <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001806:	f000 fc27 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200008e8 	.word	0x200008e8
 8001814:	40011000 	.word	0x40011000

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <MX_USART2_UART_Init+0x50>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001824:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001850:	f004 fb34 	bl	8005ebc <HAL_UART_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 fbfd 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000b38 	.word	0x20000b38
 8001868:	40004400 	.word	0x40004400

0800186c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <MX_USART3_UART_Init+0x50>)
 8001874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 8001878:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800187c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_USART3_UART_Init+0x4c>)
 80018a4:	f004 fb0a 	bl	8005ebc <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018ae:	f000 fbd3 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200001a4 	.word	0x200001a4
 80018bc:	40004800 	.word	0x40004800

080018c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <MX_DMA_Init+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <MX_DMA_Init+0x88>)
 80018d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <MX_DMA_Init+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_DMA_Init+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <MX_DMA_Init+0x88>)
 80018ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_DMA_Init+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	200b      	movs	r0, #11
 8001904:	f002 f8af 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001908:	200b      	movs	r0, #11
 800190a:	f002 f8c8 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	200c      	movs	r0, #12
 8001914:	f002 f8a7 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001918:	200c      	movs	r0, #12
 800191a:	f002 f8c0 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2011      	movs	r0, #17
 8001924:	f002 f89f 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001928:	2011      	movs	r0, #17
 800192a:	f002 f8b8 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	203a      	movs	r0, #58	; 0x3a
 8001934:	f002 f897 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001938:	203a      	movs	r0, #58	; 0x3a
 800193a:	f002 f8b0 	bl	8003a9e <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b65      	ldr	r3, [pc, #404]	; (8001afc <MX_GPIO_Init+0x1b0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a64      	ldr	r2, [pc, #400]	; (8001afc <MX_GPIO_Init+0x1b0>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b62      	ldr	r3, [pc, #392]	; (8001afc <MX_GPIO_Init+0x1b0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <MX_GPIO_Init+0x1b0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a5d      	ldr	r2, [pc, #372]	; (8001afc <MX_GPIO_Init+0x1b0>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <MX_GPIO_Init+0x1b0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b57      	ldr	r3, [pc, #348]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a56      	ldr	r2, [pc, #344]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b54      	ldr	r3, [pc, #336]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b50      	ldr	r3, [pc, #320]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a48      	ldr	r2, [pc, #288]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <MX_GPIO_Init+0x1b0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80019f4:	4842      	ldr	r0, [pc, #264]	; (8001b00 <MX_GPIO_Init+0x1b4>)
 80019f6:	f002 fe23 	bl	8004640 <HAL_GPIO_WritePin>
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f248 0112 	movw	r1, #32786	; 0x8012
 8001a00:	4840      	ldr	r0, [pc, #256]	; (8001b04 <MX_GPIO_Init+0x1b8>)
 8001a02:	f002 fe1d 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f246 0142 	movw	r1, #24642	; 0x6042
 8001a0c:	483e      	ldr	r0, [pc, #248]	; (8001b08 <MX_GPIO_Init+0x1bc>)
 8001a0e:	f002 fe17 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a18:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <MX_GPIO_Init+0x1c0>)
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4836      	ldr	r0, [pc, #216]	; (8001b00 <MX_GPIO_Init+0x1b4>)
 8001a28:	f002 fc60 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001a2c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001a30:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	482e      	ldr	r0, [pc, #184]	; (8001b00 <MX_GPIO_Init+0x1b4>)
 8001a46:	f002 fc51 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8001a4a:	f240 4301 	movw	r3, #1025	; 0x401
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4829      	ldr	r0, [pc, #164]	; (8001b04 <MX_GPIO_Init+0x1b8>)
 8001a60:	f002 fc44 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001a64:	f248 0312 	movw	r3, #32786	; 0x8012
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4821      	ldr	r0, [pc, #132]	; (8001b04 <MX_GPIO_Init+0x1b8>)
 8001a7e:	f002 fc35 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a82:	2302      	movs	r3, #2
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	481b      	ldr	r0, [pc, #108]	; (8001b08 <MX_GPIO_Init+0x1bc>)
 8001a9a:	f002 fc27 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <MX_GPIO_Init+0x1bc>)
 8001ab8:	f002 fc18 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8001abc:	f244 0340 	movw	r3, #16448	; 0x4040
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_GPIO_Init+0x1bc>)
 8001ad6:	f002 fc09 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ada:	2338      	movs	r3, #56	; 0x38
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_GPIO_Init+0x1bc>)
 8001aee:	f002 fbfd 	bl	80042ec <HAL_GPIO_Init>

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	10210000 	.word	0x10210000

08001b10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

if(huart==&huart3)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4aa0      	ldr	r2, [pc, #640]	; (8001d9c <HAL_UART_RxCpltCallback+0x28c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d142      	bne.n	8001ba6 <HAL_UART_RxCpltCallback+0x96>
{
	HAL_TIM_Base_Stop_IT(&htim6);
 8001b20:	489f      	ldr	r0, [pc, #636]	; (8001da0 <HAL_UART_RxCpltCallback+0x290>)
 8001b22:	f003 ff40 	bl	80059a6 <HAL_TIM_Base_Stop_IT>
	TIM6->CNT=0;
 8001b26:	4b9f      	ldr	r3, [pc, #636]	; (8001da4 <HAL_UART_RxCpltCallback+0x294>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2102      	movs	r1, #2
 8001b30:	489d      	ldr	r0, [pc, #628]	; (8001da8 <HAL_UART_RxCpltCallback+0x298>)
 8001b32:	f002 fd85 	bl	8004640 <HAL_GPIO_WritePin>
	if(package[0][0]!=0x68)
 8001b36:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b68      	cmp	r3, #104	; 0x68
 8001b3c:	d01a      	beq.n	8001b74 <HAL_UART_RxCpltCallback+0x64>
	{
		readFlag=1;
 8001b3e:	4b9c      	ldr	r3, [pc, #624]	; (8001db0 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001b44:	4b9b      	ldr	r3, [pc, #620]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 14; i++) //?????
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
 8001b4e:	e00d      	b.n	8001b6c <HAL_UART_RxCpltCallback+0x5c>
			if(package[0][i] == 0)      //?????
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	4a96      	ldr	r2, [pc, #600]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001b54:	5cd3      	ldrb	r3, [r2, r3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_UART_RxCpltCallback+0x56>
				UsartCount++;           //?????
 8001b5a:	4b96      	ldr	r3, [pc, #600]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b64:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 14; i++) //?????
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	75fb      	strb	r3, [r7, #23]
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b0d      	cmp	r3, #13
 8001b70:	d9ee      	bls.n	8001b50 <HAL_UART_RxCpltCallback+0x40>
 8001b72:	e015      	b.n	8001ba0 <HAL_UART_RxCpltCallback+0x90>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	75bb      	strb	r3, [r7, #22]
 8001b78:	e009      	b.n	8001b8e <HAL_UART_RxCpltCallback+0x7e>
		{
			packageCut[0][i]=package[0][i+4];
 8001b7a:	7dbb      	ldrb	r3, [r7, #22]
 8001b7c:	1d1a      	adds	r2, r3, #4
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	498a      	ldr	r1, [pc, #552]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001b82:	5c89      	ldrb	r1, [r1, r2]
 8001b84:	4a8c      	ldr	r2, [pc, #560]	; (8001db8 <HAL_UART_RxCpltCallback+0x2a8>)
 8001b86:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001b88:	7dbb      	ldrb	r3, [r7, #22]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	75bb      	strb	r3, [r7, #22]
 8001b8e:	7dbb      	ldrb	r3, [r7, #22]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d9f2      	bls.n	8001b7a <HAL_UART_RxCpltCallback+0x6a>
		}
		UsartCount++;
 8001b94:	4b87      	ldr	r3, [pc, #540]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b9e:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim6);
 8001ba0:	487f      	ldr	r0, [pc, #508]	; (8001da0 <HAL_UART_RxCpltCallback+0x290>)
 8001ba2:	f003 fedc 	bl	800595e <HAL_TIM_Base_Start_IT>
}
if(huart==&huart1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a84      	ldr	r2, [pc, #528]	; (8001dbc <HAL_UART_RxCpltCallback+0x2ac>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d146      	bne.n	8001c3c <HAL_UART_RxCpltCallback+0x12c>
{

	HAL_TIM_Base_Stop_IT(&htim7);
 8001bae:	4884      	ldr	r0, [pc, #528]	; (8001dc0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001bb0:	f003 fef9 	bl	80059a6 <HAL_TIM_Base_Stop_IT>
	TIM7->CNT=0;
 8001bb4:	4b83      	ldr	r3, [pc, #524]	; (8001dc4 <HAL_UART_RxCpltCallback+0x2b4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	487a      	ldr	r0, [pc, #488]	; (8001da8 <HAL_UART_RxCpltCallback+0x298>)
 8001bc0:	f002 fd3e 	bl	8004640 <HAL_GPIO_WritePin>
	if(package[2][0]!=0x68)
 8001bc4:	4b79      	ldr	r3, [pc, #484]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001bc6:	7f1b      	ldrb	r3, [r3, #28]
 8001bc8:	2b68      	cmp	r3, #104	; 0x68
 8001bca:	d01b      	beq.n	8001c04 <HAL_UART_RxCpltCallback+0xf4>
	{
		readFlag2=1;
 8001bcc:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <HAL_UART_RxCpltCallback+0x2b8>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001bd2:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 14; i++) //?????
 8001bd8:	2300      	movs	r3, #0
 8001bda:	757b      	strb	r3, [r7, #21]
 8001bdc:	e00e      	b.n	8001bfc <HAL_UART_RxCpltCallback+0xec>
			if(package[2][i] == 0)      //?????
 8001bde:	7d7b      	ldrb	r3, [r7, #21]
 8001be0:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001be2:	4413      	add	r3, r2
 8001be4:	7f1b      	ldrb	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_UART_RxCpltCallback+0xe6>
				UsartCount++;           //?????
 8001bea:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bf4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 14; i++) //?????
 8001bf6:	7d7b      	ldrb	r3, [r7, #21]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	757b      	strb	r3, [r7, #21]
 8001bfc:	7d7b      	ldrb	r3, [r7, #21]
 8001bfe:	2b0d      	cmp	r3, #13
 8001c00:	d9ed      	bls.n	8001bde <HAL_UART_RxCpltCallback+0xce>
 8001c02:	e018      	b.n	8001c36 <HAL_UART_RxCpltCallback+0x126>
	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	753b      	strb	r3, [r7, #20]
 8001c08:	e00c      	b.n	8001c24 <HAL_UART_RxCpltCallback+0x114>
		{
			packageCut[2][i]=package[2][i+4];
 8001c0a:	7d3b      	ldrb	r3, [r7, #20]
 8001c0c:	1d1a      	adds	r2, r3, #4
 8001c0e:	7d3b      	ldrb	r3, [r7, #20]
 8001c10:	4966      	ldr	r1, [pc, #408]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001c12:	440a      	add	r2, r1
 8001c14:	7f11      	ldrb	r1, [r2, #28]
 8001c16:	4a68      	ldr	r2, [pc, #416]	; (8001db8 <HAL_UART_RxCpltCallback+0x2a8>)
 8001c18:	4413      	add	r3, r2
 8001c1a:	460a      	mov	r2, r1
 8001c1c:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 8001c1e:	7d3b      	ldrb	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	753b      	strb	r3, [r7, #20]
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d9ef      	bls.n	8001c0a <HAL_UART_RxCpltCallback+0xfa>
		}
		UsartCount++;
 8001c2a:	4b62      	ldr	r3, [pc, #392]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c34:	701a      	strb	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(&htim7);
 8001c36:	4862      	ldr	r0, [pc, #392]	; (8001dc0 <HAL_UART_RxCpltCallback+0x2b0>)
 8001c38:	f003 fe91 	bl	800595e <HAL_TIM_Base_Start_IT>
}

if(huart==&huart5)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <HAL_UART_RxCpltCallback+0x2bc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d146      	bne.n	8001cd2 <HAL_UART_RxCpltCallback+0x1c2>
{
	HAL_TIM_Base_Stop_IT(&htim10);
 8001c44:	4862      	ldr	r0, [pc, #392]	; (8001dd0 <HAL_UART_RxCpltCallback+0x2c0>)
 8001c46:	f003 feae 	bl	80059a6 <HAL_TIM_Base_Stop_IT>
	TIM10->CNT=0;
 8001c4a:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_UART_RxCpltCallback+0x2c4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2108      	movs	r1, #8
 8001c54:	4854      	ldr	r0, [pc, #336]	; (8001da8 <HAL_UART_RxCpltCallback+0x298>)
 8001c56:	f002 fcf3 	bl	8004640 <HAL_GPIO_WritePin>
	if(package[1][0]!=0x68)
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001c5c:	7b9b      	ldrb	r3, [r3, #14]
 8001c5e:	2b68      	cmp	r3, #104	; 0x68
 8001c60:	d01b      	beq.n	8001c9a <HAL_UART_RxCpltCallback+0x18a>
	{
		readFlag3=1;
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <HAL_UART_RxCpltCallback+0x2c8>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001c68:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 14; i++) //?????
 8001c6e:	2300      	movs	r3, #0
 8001c70:	74fb      	strb	r3, [r7, #19]
 8001c72:	e00e      	b.n	8001c92 <HAL_UART_RxCpltCallback+0x182>
			if(package[1][i] == 0)      //?????
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	4a4d      	ldr	r2, [pc, #308]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	7b9b      	ldrb	r3, [r3, #14]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_UART_RxCpltCallback+0x17c>
				UsartCount++;           //?????
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c8a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 14; i++) //?????
 8001c8c:	7cfb      	ldrb	r3, [r7, #19]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	74fb      	strb	r3, [r7, #19]
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	2b0d      	cmp	r3, #13
 8001c96:	d9ed      	bls.n	8001c74 <HAL_UART_RxCpltCallback+0x164>
 8001c98:	e018      	b.n	8001ccc <HAL_UART_RxCpltCallback+0x1bc>
	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	74bb      	strb	r3, [r7, #18]
 8001c9e:	e00c      	b.n	8001cba <HAL_UART_RxCpltCallback+0x1aa>
		{
			packageCut[1][i]=package[1][i+4];
 8001ca0:	7cbb      	ldrb	r3, [r7, #18]
 8001ca2:	1d1a      	adds	r2, r3, #4
 8001ca4:	7cbb      	ldrb	r3, [r7, #18]
 8001ca6:	4941      	ldr	r1, [pc, #260]	; (8001dac <HAL_UART_RxCpltCallback+0x29c>)
 8001ca8:	440a      	add	r2, r1
 8001caa:	7b91      	ldrb	r1, [r2, #14]
 8001cac:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <HAL_UART_RxCpltCallback+0x2a8>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 8001cb4:	7cbb      	ldrb	r3, [r7, #18]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	74bb      	strb	r3, [r7, #18]
 8001cba:	7cbb      	ldrb	r3, [r7, #18]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d9ef      	bls.n	8001ca0 <HAL_UART_RxCpltCallback+0x190>
		}
		UsartCount++;
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cca:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim10);
 8001ccc:	4840      	ldr	r0, [pc, #256]	; (8001dd0 <HAL_UART_RxCpltCallback+0x2c0>)
 8001cce:	f003 fe46 	bl	800595e <HAL_TIM_Base_Start_IT>
}

if(UsartCount==3 && readFlag==0 && readFlag2==0 && readFlag3==0)  // Получено 1 измерение с каждого датчика
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	f040 8126 	bne.w	8001f28 <HAL_UART_RxCpltCallback+0x418>
 8001cdc:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_UART_RxCpltCallback+0x2a0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 8121 	bne.w	8001f28 <HAL_UART_RxCpltCallback+0x418>
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_UART_RxCpltCallback+0x2b8>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 811c 	bne.w	8001f28 <HAL_UART_RxCpltCallback+0x418>
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_UART_RxCpltCallback+0x2c8>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f040 8117 	bne.w	8001f28 <HAL_UART_RxCpltCallback+0x418>
{
	UsartCount=0;
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]


	if(pr==0)
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_UART_RxCpltCallback+0x2cc>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 809c 	bne.w	8001e42 <HAL_UART_RxCpltCallback+0x332>
	{



		reciveTime = HAL_GetTick();
 8001d0a:	f001 fda3 	bl	8003854 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_UART_RxCpltCallback+0x2d0>)
 8001d12:	601a      	str	r2, [r3, #0]

		uint32_TO_charmass(reciveTime, Buff_Mid, CountOfAccel*36, 8);
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_UART_RxCpltCallback+0x2d0>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_UART_RxCpltCallback+0x2d4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	00d2      	lsls	r2, r2, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	2308      	movs	r3, #8
 8001d2a:	492f      	ldr	r1, [pc, #188]	; (8001de8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d2c:	f7ff fa5e 	bl	80011ec <uint32_TO_charmass>
		for(uint8_t i=0;i<9;i++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	747b      	strb	r3, [r7, #17]
 8001d34:	e012      	b.n	8001d5c <HAL_UART_RxCpltCallback+0x24c>
		{
			Buff_Mid[i+9+36*CountOfAccel]=packageCut[0][i];
 8001d36:	7c7a      	ldrb	r2, [r7, #17]
 8001d38:	7c7b      	ldrb	r3, [r7, #17]
 8001d3a:	f103 0109 	add.w	r1, r3, #9
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <HAL_UART_RxCpltCallback+0x2d4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	4603      	mov	r3, r0
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4403      	add	r3, r0
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	491a      	ldr	r1, [pc, #104]	; (8001db8 <HAL_UART_RxCpltCallback+0x2a8>)
 8001d50:	5c89      	ldrb	r1, [r1, r2]
 8001d52:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d54:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001d56:	7c7b      	ldrb	r3, [r7, #17]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	747b      	strb	r3, [r7, #17]
 8001d5c:	7c7b      	ldrb	r3, [r7, #17]
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d9e9      	bls.n	8001d36 <HAL_UART_RxCpltCallback+0x226>

		}
		for(uint8_t i=0;i<9;i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	743b      	strb	r3, [r7, #16]
 8001d66:	e013      	b.n	8001d90 <HAL_UART_RxCpltCallback+0x280>
		{
			Buff_Mid[i+18+36*CountOfAccel]=packageCut[1][i];
 8001d68:	7c3a      	ldrb	r2, [r7, #16]
 8001d6a:	7c3b      	ldrb	r3, [r7, #16]
 8001d6c:	f103 0112 	add.w	r1, r3, #18
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_UART_RxCpltCallback+0x2d4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4403      	add	r3, r0
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	490d      	ldr	r1, [pc, #52]	; (8001db8 <HAL_UART_RxCpltCallback+0x2a8>)
 8001d82:	440a      	add	r2, r1
 8001d84:	7a51      	ldrb	r1, [r2, #9]
 8001d86:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d88:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001d8a:	7c3b      	ldrb	r3, [r7, #16]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	743b      	strb	r3, [r7, #16]
 8001d90:	7c3b      	ldrb	r3, [r7, #16]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d9e8      	bls.n	8001d68 <HAL_UART_RxCpltCallback+0x258>

		}
		for(uint8_t i=0;i<9;i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e03b      	b.n	8001e14 <HAL_UART_RxCpltCallback+0x304>
 8001d9c:	200001a4 	.word	0x200001a4
 8001da0:	2000095c 	.word	0x2000095c
 8001da4:	40001000 	.word	0x40001000
 8001da8:	40020800 	.word	0x40020800
 8001dac:	200000a4 	.word	0x200000a4
 8001db0:	200009cc 	.word	0x200009cc
 8001db4:	200000f0 	.word	0x200000f0
 8001db8:	200000d0 	.word	0x200000d0
 8001dbc:	200008e8 	.word	0x200008e8
 8001dc0:	2000101c 	.word	0x2000101c
 8001dc4:	40001400 	.word	0x40001400
 8001dc8:	200009a4 	.word	0x200009a4
 8001dcc:	200007e0 	.word	0x200007e0
 8001dd0:	20000414 	.word	0x20000414
 8001dd4:	40014400 	.word	0x40014400
 8001dd8:	2000011c 	.word	0x2000011c
 8001ddc:	200000f2 	.word	0x200000f2
 8001de0:	20000ad0 	.word	0x20000ad0
 8001de4:	200000f1 	.word	0x200000f1
 8001de8:	20000454 	.word	0x20000454
		{
			Buff_Mid[i+27+36*CountOfAccel]=packageCut[2][i];
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	f103 011b 	add.w	r1, r3, #27
 8001df4:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4403      	add	r3, r0
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	494b      	ldr	r1, [pc, #300]	; (8001f34 <HAL_UART_RxCpltCallback+0x424>)
 8001e06:	440a      	add	r2, r1
 8001e08:	7c91      	ldrb	r1, [r2, #18]
 8001e0a:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_UART_RxCpltCallback+0x428>)
 8001e0c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	3301      	adds	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d9e8      	bls.n	8001dec <HAL_UART_RxCpltCallback+0x2dc>

		}

		CountOfAccel++;
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001e24:	701a      	strb	r2, [r3, #0]

		if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b07      	cmp	r3, #7
 8001e2c:	d17c      	bne.n	8001f28 <HAL_UART_RxCpltCallback+0x418>
		{
			CountOfAccel=0;
 8001e2e:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
			metka=1;
 8001e34:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_UART_RxCpltCallback+0x42c>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
			pr=1;
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_UART_RxCpltCallback+0x430>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
	}


}

}
 8001e40:	e072      	b.n	8001f28 <HAL_UART_RxCpltCallback+0x418>
		reciveTime = HAL_GetTick();
 8001e42:	f001 fd07 	bl	8003854 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_UART_RxCpltCallback+0x434>)
 8001e4a:	601a      	str	r2, [r3, #0]
		uint32_TO_charmass(reciveTime, Buff_Top, CountOfAccel*36, 8);
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_UART_RxCpltCallback+0x434>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	00d2      	lsls	r2, r2, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2308      	movs	r3, #8
 8001e62:	4939      	ldr	r1, [pc, #228]	; (8001f48 <HAL_UART_RxCpltCallback+0x438>)
 8001e64:	f7ff f9c2 	bl	80011ec <uint32_TO_charmass>
		for(uint8_t i=0;i<9;i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73bb      	strb	r3, [r7, #14]
 8001e6c:	e012      	b.n	8001e94 <HAL_UART_RxCpltCallback+0x384>
			Buff_Top[i+9+36*CountOfAccel]=packageCut[0][i];
 8001e6e:	7bba      	ldrb	r2, [r7, #14]
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	f103 0109 	add.w	r1, r3, #9
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4403      	add	r3, r0
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	492b      	ldr	r1, [pc, #172]	; (8001f34 <HAL_UART_RxCpltCallback+0x424>)
 8001e88:	5c89      	ldrb	r1, [r1, r2]
 8001e8a:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <HAL_UART_RxCpltCallback+0x438>)
 8001e8c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001e8e:	7bbb      	ldrb	r3, [r7, #14]
 8001e90:	3301      	adds	r3, #1
 8001e92:	73bb      	strb	r3, [r7, #14]
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d9e9      	bls.n	8001e6e <HAL_UART_RxCpltCallback+0x35e>
		for(uint8_t i=0;i<9;i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	737b      	strb	r3, [r7, #13]
 8001e9e:	e013      	b.n	8001ec8 <HAL_UART_RxCpltCallback+0x3b8>
			Buff_Top[i+18+36*CountOfAccel]=packageCut[1][i];
 8001ea0:	7b7a      	ldrb	r2, [r7, #13]
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	f103 0112 	add.w	r1, r3, #18
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4403      	add	r3, r0
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	491e      	ldr	r1, [pc, #120]	; (8001f34 <HAL_UART_RxCpltCallback+0x424>)
 8001eba:	440a      	add	r2, r1
 8001ebc:	7a51      	ldrb	r1, [r2, #9]
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_UART_RxCpltCallback+0x438>)
 8001ec0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001ec2:	7b7b      	ldrb	r3, [r7, #13]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	737b      	strb	r3, [r7, #13]
 8001ec8:	7b7b      	ldrb	r3, [r7, #13]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d9e8      	bls.n	8001ea0 <HAL_UART_RxCpltCallback+0x390>
		for(uint8_t i=0;i<9;i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	733b      	strb	r3, [r7, #12]
 8001ed2:	e013      	b.n	8001efc <HAL_UART_RxCpltCallback+0x3ec>
			Buff_Top[i+27+36*CountOfAccel]=packageCut[2][i];
 8001ed4:	7b3a      	ldrb	r2, [r7, #12]
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	f103 011b 	add.w	r1, r3, #27
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4403      	add	r3, r0
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	4911      	ldr	r1, [pc, #68]	; (8001f34 <HAL_UART_RxCpltCallback+0x424>)
 8001eee:	440a      	add	r2, r1
 8001ef0:	7c91      	ldrb	r1, [r2, #18]
 8001ef2:	4a15      	ldr	r2, [pc, #84]	; (8001f48 <HAL_UART_RxCpltCallback+0x438>)
 8001ef4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001ef6:	7b3b      	ldrb	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	733b      	strb	r3, [r7, #12]
 8001efc:	7b3b      	ldrb	r3, [r7, #12]
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d9e8      	bls.n	8001ed4 <HAL_UART_RxCpltCallback+0x3c4>
		CountOfAccel++;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001f0c:	701a      	strb	r2, [r3, #0]
		if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b07      	cmp	r3, #7
 8001f14:	d108      	bne.n	8001f28 <HAL_UART_RxCpltCallback+0x418>
			CountOfAccel=0;
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_UART_RxCpltCallback+0x420>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
			metka=1;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_UART_RxCpltCallback+0x42c>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
			pr=0;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_UART_RxCpltCallback+0x430>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200000f1 	.word	0x200000f1
 8001f34:	200000d0 	.word	0x200000d0
 8001f38:	20000454 	.word	0x20000454
 8001f3c:	200000f3 	.word	0x200000f3
 8001f40:	200000f2 	.word	0x200000f2
 8001f44:	20000ad0 	.word	0x20000ad0
 8001f48:	200009d4 	.word	0x200009d4

08001f4c <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]


}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

	if(htim==&htim6)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d117      	bne.n	8001fa0 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		TIM6->CNT=0;
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[0],0,9);
 8001f76:	2209      	movs	r2, #9
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4829      	ldr	r0, [pc, #164]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001f7c:	f005 f830 	bl	8006fe0 <memset>
		HAL_TIM_Base_Start_IT(&htim6);
 8001f80:	4825      	ldr	r0, [pc, #148]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f82:	f003 fcec 	bl	800595e <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	2102      	movs	r1, #2
 8001f8a:	4826      	ldr	r0, [pc, #152]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f8c:	f002 fb58 	bl	8004640 <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart3);
 8001f90:	4825      	ldr	r0, [pc, #148]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f92:	f004 f861 	bl	8006058 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001f96:	220e      	movs	r2, #14
 8001f98:	4924      	ldr	r1, [pc, #144]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f9a:	4823      	ldr	r0, [pc, #140]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f9c:	f003 ffdc 	bl	8005f58 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim7)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d117      	bne.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		TIM7->CNT=0;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[2],0,9);
 8001fae:	2209      	movs	r2, #9
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4821      	ldr	r0, [pc, #132]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001fb4:	f005 f814 	bl	8006fe0 <memset>
		HAL_TIM_Base_Start_IT(&htim7);
 8001fb8:	481d      	ldr	r0, [pc, #116]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fba:	f003 fcd0 	bl	800595e <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	4818      	ldr	r0, [pc, #96]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fc4:	f002 fb3c 	bl	8004640 <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart1);
 8001fc8:	481c      	ldr	r0, [pc, #112]	; (800203c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fca:	f004 f845 	bl	8006058 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8001fce:	220e      	movs	r2, #14
 8001fd0:	491b      	ldr	r1, [pc, #108]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001fd2:	481a      	ldr	r0, [pc, #104]	; (800203c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fd4:	f003 ffc0 	bl	8005f58 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim10)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d117      	bne.n	8002010 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		TIM10->CNT=0;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[1],0,9);
 8001fe6:	2209      	movs	r2, #9
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fec:	f004 fff8 	bl	8006fe0 <memset>
		HAL_TIM_Base_Start_IT(&htim10);
 8001ff0:	4814      	ldr	r0, [pc, #80]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001ff2:	f003 fcb4 	bl	800595e <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	480a      	ldr	r0, [pc, #40]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ffc:	f002 fb20 	bl	8004640 <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart5);
 8002000:	4813      	ldr	r0, [pc, #76]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002002:	f004 f829 	bl	8006058 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8002006:	220e      	movs	r2, #14
 8002008:	4912      	ldr	r1, [pc, #72]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800200a:	4811      	ldr	r0, [pc, #68]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800200c:	f003 ffa4 	bl	8005f58 <HAL_UART_Receive_DMA>
	}



}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000095c 	.word	0x2000095c
 800201c:	40001000 	.word	0x40001000
 8002020:	200000d0 	.word	0x200000d0
 8002024:	40020800 	.word	0x40020800
 8002028:	200001a4 	.word	0x200001a4
 800202c:	200000a4 	.word	0x200000a4
 8002030:	2000101c 	.word	0x2000101c
 8002034:	40001400 	.word	0x40001400
 8002038:	200000e2 	.word	0x200000e2
 800203c:	200008e8 	.word	0x200008e8
 8002040:	200000c0 	.word	0x200000c0
 8002044:	20000414 	.word	0x20000414
 8002048:	40014400 	.word	0x40014400
 800204c:	200000d9 	.word	0x200000d9
 8002050:	200007e0 	.word	0x200007e0
 8002054:	200000b2 	.word	0x200000b2

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002072:	4802      	ldr	r0, [pc, #8]	; (800207c <SDCARD_Select+0x14>)
 8002074:	f002 fae4 	bl	8004640 <HAL_GPIO_WritePin>
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020000 	.word	0x40020000

08002080 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800208a:	4802      	ldr	r0, [pc, #8]	; (8002094 <SDCARD_Unselect+0x14>)
 800208c:	f002 fad8 	bl	8004640 <HAL_GPIO_WritePin>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020000 	.word	0x40020000

08002098 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 800209e:	23ff      	movs	r3, #255	; 0xff
 80020a0:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 80020a2:	1dfa      	adds	r2, r7, #7
 80020a4:	1db9      	adds	r1, r7, #6
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2301      	movs	r3, #1
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <SDCARD_ReadR1+0x34>)
 80020b0:	f003 f9dc 	bl	800546c <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da00      	bge.n	80020be <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 80020bc:	e7f1      	b.n	80020a2 <SDCARD_ReadR1+0xa>
            break;
 80020be:	bf00      	nop
    }
    return r1;
 80020c0:	79fb      	ldrb	r3, [r7, #7]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000780 	.word	0x20000780

080020d0 <SDCARD_ReadBytes>:
            return -1;
    }
    return 0;
}

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 80020de:	e00f      	b.n	8002100 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 80020e0:	f107 010f 	add.w	r1, r7, #15
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4808      	ldr	r0, [pc, #32]	; (8002110 <SDCARD_ReadBytes+0x40>)
 80020f0:	f003 f9bc 	bl	800546c <HAL_SPI_TransmitReceive>
        buff++;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3301      	adds	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]
        buff_size--;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ec      	bne.n	80020e0 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000780 	.word	0x20000780

08002114 <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ffd6 	bl	80020d0 <SDCARD_ReadBytes>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	da02      	bge.n	8002130 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212e:	e003      	b.n	8002138 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	2bff      	cmp	r3, #255	; 0xff
 8002134:	d1f1      	bne.n	800211a <SDCARD_WaitNotBusy+0x6>

    return 0;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <SDCARD_Init>:
 
int SDCARD_Init() {
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0

    Set DI and CS high and apply 74 or more clock pulses to SCLK. Without this
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();
 8002146:	f7ff ff9b 	bl	8002080 <SDCARD_Unselect>

    uint8_t high = 0xFF;
 800214a:	23ff      	movs	r3, #255	; 0xff
 800214c:	72bb      	strb	r3, [r7, #10]
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e00a      	b.n	800216a <SDCARD_Init+0x2a>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 8002154:	f107 010a 	add.w	r1, r7, #10
 8002158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215c:	2201      	movs	r2, #1
 800215e:	4868      	ldr	r0, [pc, #416]	; (8002300 <SDCARD_Init+0x1c0>)
 8002160:	f003 f850 	bl	8005204 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) { // 80 clock pulses
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b09      	cmp	r3, #9
 800216e:	ddf1      	ble.n	8002154 <SDCARD_Init+0x14>
    }

    SDCARD_Select();
 8002170:	f7ff ff7a 	bl	8002068 <SDCARD_Select>
    /*
    Step 2.
    
    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8002174:	f7ff ffce 	bl	8002114 <SDCARD_WaitNotBusy>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	da04      	bge.n	8002188 <SDCARD_Init+0x48>
        SDCARD_Unselect();
 800217e:	f7ff ff7f 	bl	8002080 <SDCARD_Unselect>
        return -1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002186:	e0b6      	b.n	80022f6 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00, 0x00 /* ARG = 0 */, (0x4A << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218c:	2206      	movs	r2, #6
 800218e:	495d      	ldr	r1, [pc, #372]	; (8002304 <SDCARD_Init+0x1c4>)
 8002190:	485b      	ldr	r0, [pc, #364]	; (8002300 <SDCARD_Init+0x1c0>)
 8002192:	f003 f837 	bl	8005204 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 8002196:	f7ff ff7f 	bl	8002098 <SDCARD_ReadR1>
 800219a:	4603      	mov	r3, r0
 800219c:	2b01      	cmp	r3, #1
 800219e:	d004      	beq.n	80021aa <SDCARD_Init+0x6a>
        SDCARD_Unselect();
 80021a0:	f7ff ff6e 	bl	8002080 <SDCARD_Unselect>
        return -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a8:	e0a5      	b.n	80022f6 <SDCARD_Init+0x1b6>
    MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value)
    will be returned. The lower 12 bits in the return value 0x1AA means that
    the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6
    volts. If not the case, the card should be rejected.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80021aa:	f7ff ffb3 	bl	8002114 <SDCARD_WaitNotBusy>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da04      	bge.n	80021be <SDCARD_Init+0x7e>
        SDCARD_Unselect();
 80021b4:	f7ff ff64 	bl	8002080 <SDCARD_Unselect>
        return -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021bc:	e09b      	b.n	80022f6 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x08 /* CMD8 */, 0x00, 0x00, 0x01, 0xAA /* ARG */, (0x43 << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80021be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c2:	2206      	movs	r2, #6
 80021c4:	4950      	ldr	r1, [pc, #320]	; (8002308 <SDCARD_Init+0x1c8>)
 80021c6:	484e      	ldr	r0, [pc, #312]	; (8002300 <SDCARD_Init+0x1c0>)
 80021c8:	f003 f81c 	bl	8005204 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x01) {
 80021cc:	f7ff ff64 	bl	8002098 <SDCARD_ReadR1>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d004      	beq.n	80021e0 <SDCARD_Init+0xa0>
        SDCARD_Unselect();
 80021d6:	f7ff ff53 	bl	8002080 <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 80021da:	f06f 0301 	mvn.w	r3, #1
 80021de:	e08a      	b.n	80022f6 <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2104      	movs	r1, #4
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff73 	bl	80020d0 <SDCARD_ReadBytes>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da04      	bge.n	80021fa <SDCARD_Init+0xba>
            SDCARD_Unselect();
 80021f0:	f7ff ff46 	bl	8002080 <SDCARD_Unselect>
            return -3;
 80021f4:	f06f 0302 	mvn.w	r3, #2
 80021f8:	e07d      	b.n	80022f6 <SDCARD_Init+0x1b6>
        }

        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA)) {
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <SDCARD_Init+0xca>
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2baa      	cmp	r3, #170	; 0xaa
 8002208:	d004      	beq.n	8002214 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 800220a:	f7ff ff39 	bl	8002080 <SDCARD_Unselect>
            return -4;
 800220e:	f06f 0303 	mvn.w	r3, #3
 8002212:	e070      	b.n	80022f6 <SDCARD_Init+0x1b6>
    Step 4.

    And then initiate initialization with ACMD41 with HCS flag (bit 30).
    */
    for(;;) {
        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8002214:	f7ff ff7e 	bl	8002114 <SDCARD_WaitNotBusy>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	da04      	bge.n	8002228 <SDCARD_Init+0xe8>
            SDCARD_Unselect();
 800221e:	f7ff ff2f 	bl	8002080 <SDCARD_Unselect>
            return -1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002226:	e066      	b.n	80022f6 <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222c:	2206      	movs	r2, #6
 800222e:	4937      	ldr	r1, [pc, #220]	; (800230c <SDCARD_Init+0x1cc>)
 8002230:	4833      	ldr	r0, [pc, #204]	; (8002300 <SDCARD_Init+0x1c0>)
 8002232:	f002 ffe7 	bl	8005204 <HAL_SPI_Transmit>
        }

        if(SDCARD_ReadR1() != 0x01) {
 8002236:	f7ff ff2f 	bl	8002098 <SDCARD_ReadR1>
 800223a:	4603      	mov	r3, r0
 800223c:	2b01      	cmp	r3, #1
 800223e:	d004      	beq.n	800224a <SDCARD_Init+0x10a>
            SDCARD_Unselect();
 8002240:	f7ff ff1e 	bl	8002080 <SDCARD_Unselect>
            return -5;
 8002244:	f06f 0304 	mvn.w	r3, #4
 8002248:	e055      	b.n	80022f6 <SDCARD_Init+0x1b6>
        }

        if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800224a:	f7ff ff63 	bl	8002114 <SDCARD_WaitNotBusy>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	da04      	bge.n	800225e <SDCARD_Init+0x11e>
            SDCARD_Unselect();
 8002254:	f7ff ff14 	bl	8002080 <SDCARD_Unselect>
            return -1;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800225c:	e04b      	b.n	80022f6 <SDCARD_Init+0x1b6>
        }

        {
            static const uint8_t cmd[] =
                { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800225e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002262:	2206      	movs	r2, #6
 8002264:	492a      	ldr	r1, [pc, #168]	; (8002310 <SDCARD_Init+0x1d0>)
 8002266:	4826      	ldr	r0, [pc, #152]	; (8002300 <SDCARD_Init+0x1c0>)
 8002268:	f002 ffcc 	bl	8005204 <HAL_SPI_Transmit>
        }

        uint8_t r1 = SDCARD_ReadR1();
 800226c:	f7ff ff14 	bl	8002098 <SDCARD_ReadR1>
 8002270:	4603      	mov	r3, r0
 8002272:	72fb      	strb	r3, [r7, #11]
        if(r1 == 0x00) {
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <SDCARD_Init+0x14a>
            break;
        }

        if(r1 != 0x01) {
 800227a:	7afb      	ldrb	r3, [r7, #11]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d0c9      	beq.n	8002214 <SDCARD_Init+0xd4>
            SDCARD_Unselect();
 8002280:	f7ff fefe 	bl	8002080 <SDCARD_Unselect>
            return -6;
 8002284:	f06f 0305 	mvn.w	r3, #5
 8002288:	e035      	b.n	80022f6 <SDCARD_Init+0x1b6>
            break;
 800228a:	bf00      	nop

    After the initialization completed, read OCR register with CMD58 and check
    CCS flag (bit 30). When it is set, the card is a high-capacity card known
    as SDHC/SDXC.
    */
    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 800228c:	f7ff ff42 	bl	8002114 <SDCARD_WaitNotBusy>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	da04      	bge.n	80022a0 <SDCARD_Init+0x160>
        SDCARD_Unselect();
 8002296:	f7ff fef3 	bl	8002080 <SDCARD_Unselect>
        return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800229e:	e02a      	b.n	80022f6 <SDCARD_Init+0x1b6>
    }

    {
        static const uint8_t cmd[] =
            { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */ };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a4:	2206      	movs	r2, #6
 80022a6:	491b      	ldr	r1, [pc, #108]	; (8002314 <SDCARD_Init+0x1d4>)
 80022a8:	4815      	ldr	r0, [pc, #84]	; (8002300 <SDCARD_Init+0x1c0>)
 80022aa:	f002 ffab 	bl	8005204 <HAL_SPI_Transmit>
    }

    if(SDCARD_ReadR1() != 0x00) {
 80022ae:	f7ff fef3 	bl	8002098 <SDCARD_ReadR1>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <SDCARD_Init+0x182>
        SDCARD_Unselect();
 80022b8:	f7ff fee2 	bl	8002080 <SDCARD_Unselect>
        return -7;
 80022bc:	f06f 0306 	mvn.w	r3, #6
 80022c0:	e019      	b.n	80022f6 <SDCARD_Init+0x1b6>
    }

    {
        uint8_t resp[4];
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0) {
 80022c2:	463b      	mov	r3, r7
 80022c4:	2104      	movs	r1, #4
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff02 	bl	80020d0 <SDCARD_ReadBytes>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da04      	bge.n	80022dc <SDCARD_Init+0x19c>
            SDCARD_Unselect();
 80022d2:	f7ff fed5 	bl	8002080 <SDCARD_Unselect>
            return -8;
 80022d6:	f06f 0307 	mvn.w	r3, #7
 80022da:	e00c      	b.n	80022f6 <SDCARD_Init+0x1b6>
        }

        if((resp[0] & 0xC0) != 0xC0) {
 80022dc:	783b      	ldrb	r3, [r7, #0]
 80022de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022e2:	2bc0      	cmp	r3, #192	; 0xc0
 80022e4:	d004      	beq.n	80022f0 <SDCARD_Init+0x1b0>
            SDCARD_Unselect();
 80022e6:	f7ff fecb 	bl	8002080 <SDCARD_Unselect>
            return -9;
 80022ea:	f06f 0308 	mvn.w	r3, #8
 80022ee:	e002      	b.n	80022f6 <SDCARD_Init+0x1b6>
        }
    }

    SDCARD_Unselect();
 80022f0:	f7ff fec6 	bl	8002080 <SDCARD_Unselect>
    return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000780 	.word	0x20000780
 8002304:	08007850 	.word	0x08007850
 8002308:	08007858 	.word	0x08007858
 800230c:	08007860 	.word	0x08007860
 8002310:	08007868 	.word	0x08007868
 8002314:	08007870 	.word	0x08007870

08002318 <SDCARD_WriteSingleBlock>:
    SDCARD_Unselect();
    return 0;
}


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 8002322:	f7ff fea1 	bl	8002068 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 8002326:	f7ff fef5 	bl	8002114 <SDCARD_WaitNotBusy>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	da04      	bge.n	800233a <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 8002330:	f7ff fea6 	bl	8002080 <SDCARD_Unselect>
        return -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002338:	e05e      	b.n	80023f8 <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 800233a:	2358      	movs	r3, #88	; 0x58
 800233c:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 8002342:	b2db      	uxtb	r3, r3
 8002344:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 800234a:	b2db      	uxtb	r3, r3
 800234c:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 8002352:	b2db      	uxtb	r3, r3
 8002354:	74fb      	strb	r3, [r7, #19]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	753b      	strb	r3, [r7, #20]
 800235c:	23ff      	movs	r3, #255	; 0xff
 800235e:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002360:	f107 0110 	add.w	r1, r7, #16
 8002364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002368:	2206      	movs	r2, #6
 800236a:	4825      	ldr	r0, [pc, #148]	; (8002400 <SDCARD_WriteSingleBlock+0xe8>)
 800236c:	f002 ff4a 	bl	8005204 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 8002370:	f7ff fe92 	bl	8002098 <SDCARD_ReadR1>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 800237a:	f7ff fe81 	bl	8002080 <SDCARD_Unselect>
        return -2;
 800237e:	f06f 0301 	mvn.w	r3, #1
 8002382:	e039      	b.n	80023f8 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 8002384:	23fe      	movs	r3, #254	; 0xfe
 8002386:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <SDCARD_WriteSingleBlock+0xec>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 800238e:	f107 010f 	add.w	r1, r7, #15
 8002392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002396:	2201      	movs	r2, #1
 8002398:	4819      	ldr	r0, [pc, #100]	; (8002400 <SDCARD_WriteSingleBlock+0xe8>)
 800239a:	f002 ff33 	bl	8005204 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 800239e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a6:	6839      	ldr	r1, [r7, #0]
 80023a8:	4815      	ldr	r0, [pc, #84]	; (8002400 <SDCARD_WriteSingleBlock+0xe8>)
 80023aa:	f002 ff2b 	bl	8005204 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 80023ae:	f107 010c 	add.w	r1, r7, #12
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023b6:	2202      	movs	r2, #2
 80023b8:	4811      	ldr	r0, [pc, #68]	; (8002400 <SDCARD_WriteSingleBlock+0xe8>)
 80023ba:	f002 ff23 	bl	8005204 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 80023be:	f107 030b 	add.w	r3, r7, #11
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fe83 	bl	80020d0 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 80023ca:	7afb      	ldrb	r3, [r7, #11]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d004      	beq.n	80023de <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 80023d4:	f7ff fe54 	bl	8002080 <SDCARD_Unselect>
        return -3;
 80023d8:	f06f 0302 	mvn.w	r3, #2
 80023dc:	e00c      	b.n	80023f8 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 80023de:	f7ff fe99 	bl	8002114 <SDCARD_WaitNotBusy>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da04      	bge.n	80023f2 <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 80023e8:	f7ff fe4a 	bl	8002080 <SDCARD_Unselect>
        return -4;
 80023ec:	f06f 0303 	mvn.w	r3, #3
 80023f0:	e002      	b.n	80023f8 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 80023f2:	f7ff fe45 	bl	8002080 <SDCARD_Unselect>
    return 0;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000780 	.word	0x20000780
 8002404:	08007834 	.word	0x08007834

08002408 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8002412:	1df9      	adds	r1, r7, #7
 8002414:	230a      	movs	r3, #10
 8002416:	2201      	movs	r2, #1
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <SPICmd8bit+0x20>)
 800241a:	f002 fef3 	bl	8005204 <HAL_SPI_Transmit>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000ad4 	.word	0x20000ad4

0800242c <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	460a      	mov	r2, r1
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	4613      	mov	r3, r2
 800243a:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 800243c:	2200      	movs	r2, #0
 800243e:	2140      	movs	r1, #64	; 0x40
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <SPIWrite+0x44>)
 8002442:	f002 f8fd 	bl	8004640 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ffda 	bl	8002408 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8002454:	79bb      	ldrb	r3, [r7, #6]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ffd6 	bl	8002408 <SPICmd8bit>
	NSS_H();
 800245c:	2201      	movs	r2, #1
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <SPIWrite+0x44>)
 8002462:	f002 f8ed 	bl	8004640 <HAL_GPIO_WritePin>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020400 	.word	0x40020400

08002474 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
 8002480:	4613      	mov	r3, r2
 8002482:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8002484:	79bb      	ldrb	r3, [r7, #6]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d922      	bls.n	80024d0 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 800248a:	2200      	movs	r2, #0
 800248c:	2140      	movs	r1, #64	; 0x40
 800248e:	4812      	ldr	r0, [pc, #72]	; (80024d8 <BurstWrite+0x64>)
 8002490:	f002 f8d6 	bl	8004640 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ffb3 	bl	8002408 <SPICmd8bit>
    for(i=0;i<length;i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e009      	b.n	80024bc <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ffa9 	bl	8002408 <SPICmd8bit>
    for(i=0;i<length;i++)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3301      	adds	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	79bb      	ldrb	r3, [r7, #6]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d3f1      	bcc.n	80024a8 <BurstWrite+0x34>
    NSS_H();
 80024c4:	2201      	movs	r2, #1
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <BurstWrite+0x64>)
 80024ca:	f002 f8b9 	bl	8004640 <HAL_GPIO_WritePin>
 80024ce:	e000      	b.n	80024d2 <BurstWrite+0x5e>
    return;
 80024d0:	bf00      	nop
  }
}
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40020400 	.word	0x40020400

080024dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_MspInit+0x4c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_MspInit+0x4c>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_MspInit+0x4c>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_MspInit+0x4c>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_MspInit+0x4c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_SPI_MspInit+0x148>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12c      	bne.n	80025a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a48      	ldr	r2, [pc, #288]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 8002558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a41      	ldr	r2, [pc, #260]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002586:	23e0      	movs	r3, #224	; 0xe0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002596:	2305      	movs	r3, #5
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4619      	mov	r1, r3
 80025a0:	4836      	ldr	r0, [pc, #216]	; (800267c <HAL_SPI_MspInit+0x150>)
 80025a2:	f001 fea3 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80025a6:	e060      	b.n	800266a <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a34      	ldr	r2, [pc, #208]	; (8002680 <HAL_SPI_MspInit+0x154>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d15b      	bne.n	800266a <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a2f      	ldr	r2, [pc, #188]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a28      	ldr	r2, [pc, #160]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a21      	ldr	r2, [pc, #132]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_SPI_MspInit+0x14c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002606:	2301      	movs	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260e:	2301      	movs	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002616:	2307      	movs	r3, #7
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	4818      	ldr	r0, [pc, #96]	; (8002684 <HAL_SPI_MspInit+0x158>)
 8002622:	f001 fe63 	bl	80042ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002638:	2306      	movs	r3, #6
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4811      	ldr	r0, [pc, #68]	; (8002688 <HAL_SPI_MspInit+0x15c>)
 8002644:	f001 fe52 	bl	80042ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002652:	2301      	movs	r3, #1
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800265a:	2306      	movs	r3, #6
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	4619      	mov	r1, r3
 8002664:	4808      	ldr	r0, [pc, #32]	; (8002688 <HAL_SPI_MspInit+0x15c>)
 8002666:	f001 fe41 	bl	80042ec <HAL_GPIO_Init>
}
 800266a:	bf00      	nop
 800266c:	3730      	adds	r7, #48	; 0x30
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40013000 	.word	0x40013000
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000
 8002680:	40003c00 	.word	0x40003c00
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800

0800268c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <HAL_TIM_Base_MspInit+0xb8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d116      	bne.n	80026cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 80026a8:	f043 0310 	orr.w	r3, r3, #16
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2036      	movs	r0, #54	; 0x36
 80026c0:	f001 f9d1 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026c4:	2036      	movs	r0, #54	; 0x36
 80026c6:	f001 f9ea 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80026ca:	e036      	b.n	800273a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_TIM_Base_MspInit+0xc0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d116      	bne.n	8002704 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 80026e0:	f043 0320 	orr.w	r3, r3, #32
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	2037      	movs	r0, #55	; 0x37
 80026f8:	f001 f9b5 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026fc:	2037      	movs	r0, #55	; 0x37
 80026fe:	f001 f9ce 	bl	8003a9e <HAL_NVIC_EnableIRQ>
}
 8002702:	e01a      	b.n	800273a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_TIM_Base_MspInit+0xc4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d115      	bne.n	800273a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_TIM_Base_MspInit+0xbc>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	2019      	movs	r0, #25
 8002730:	f001 f999 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002734:	2019      	movs	r0, #25
 8002736:	f001 f9b2 	bl	8003a9e <HAL_NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40001000 	.word	0x40001000
 8002748:	40023800 	.word	0x40023800
 800274c:	40001400 	.word	0x40001400
 8002750:	40014400 	.word	0x40014400

08002754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b092      	sub	sp, #72	; 0x48
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a87      	ldr	r2, [pc, #540]	; (8002990 <HAL_UART_MspInit+0x23c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	f040 8083 	bne.w	800287e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
 800277c:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_UART_MspInit+0x240>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a84      	ldr	r2, [pc, #528]	; (8002994 <HAL_UART_MspInit+0x240>)
 8002782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
 8002788:	4b82      	ldr	r3, [pc, #520]	; (8002994 <HAL_UART_MspInit+0x240>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002798:	4b7e      	ldr	r3, [pc, #504]	; (8002994 <HAL_UART_MspInit+0x240>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a7d      	ldr	r2, [pc, #500]	; (8002994 <HAL_UART_MspInit+0x240>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b7b      	ldr	r3, [pc, #492]	; (8002994 <HAL_UART_MspInit+0x240>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b4:	4b77      	ldr	r3, [pc, #476]	; (8002994 <HAL_UART_MspInit+0x240>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a76      	ldr	r2, [pc, #472]	; (8002994 <HAL_UART_MspInit+0x240>)
 80027ba:	f043 0308 	orr.w	r3, r3, #8
 80027be:	6313      	str	r3, [r2, #48]	; 0x30
 80027c0:	4b74      	ldr	r3, [pc, #464]	; (8002994 <HAL_UART_MspInit+0x240>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d6:	2301      	movs	r3, #1
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027de:	2308      	movs	r3, #8
 80027e0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027e6:	4619      	mov	r1, r3
 80027e8:	486b      	ldr	r0, [pc, #428]	; (8002998 <HAL_UART_MspInit+0x244>)
 80027ea:	f001 fd7f 	bl	80042ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ee:	2304      	movs	r3, #4
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027fe:	2308      	movs	r3, #8
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002802:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002806:	4619      	mov	r1, r3
 8002808:	4864      	ldr	r0, [pc, #400]	; (800299c <HAL_UART_MspInit+0x248>)
 800280a:	f001 fd6f 	bl	80042ec <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800280e:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002810:	4a64      	ldr	r2, [pc, #400]	; (80029a4 <HAL_UART_MspInit+0x250>)
 8002812:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002822:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002824:	2200      	movs	r2, #0
 8002826:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002828:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 800282a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002830:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002836:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800283c:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 800283e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002842:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002846:	2200      	movs	r2, #0
 8002848:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284a:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 800284c:	2200      	movs	r2, #0
 800284e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002850:	4853      	ldr	r0, [pc, #332]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002852:	f001 f93f 	bl	8003ad4 <HAL_DMA_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800285c:	f7ff fbfc 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002864:	635a      	str	r2, [r3, #52]	; 0x34
 8002866:	4a4e      	ldr	r2, [pc, #312]	; (80029a0 <HAL_UART_MspInit+0x24c>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2100      	movs	r1, #0
 8002870:	2035      	movs	r0, #53	; 0x35
 8002872:	f001 f8f8 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002876:	2035      	movs	r0, #53	; 0x35
 8002878:	f001 f911 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800287c:	e18e      	b.n	8002b9c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a49      	ldr	r2, [pc, #292]	; (80029a8 <HAL_UART_MspInit+0x254>)
 8002884:	4293      	cmp	r3, r2
 8002886:	f040 8099 	bne.w	80029bc <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_UART_MspInit+0x240>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	4a40      	ldr	r2, [pc, #256]	; (8002994 <HAL_UART_MspInit+0x240>)
 8002894:	f043 0310 	orr.w	r3, r3, #16
 8002898:	6453      	str	r3, [r2, #68]	; 0x44
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_UART_MspInit+0x240>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_UART_MspInit+0x240>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a39      	ldr	r2, [pc, #228]	; (8002994 <HAL_UART_MspInit+0x240>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_UART_MspInit+0x240>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	4b33      	ldr	r3, [pc, #204]	; (8002994 <HAL_UART_MspInit+0x240>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_UART_MspInit+0x240>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_UART_MspInit+0x240>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028f0:	2307      	movs	r3, #7
 80028f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028f8:	4619      	mov	r1, r3
 80028fa:	482c      	ldr	r0, [pc, #176]	; (80029ac <HAL_UART_MspInit+0x258>)
 80028fc:	f001 fcf6 	bl	80042ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002910:	2307      	movs	r3, #7
 8002912:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002918:	4619      	mov	r1, r3
 800291a:	4825      	ldr	r0, [pc, #148]	; (80029b0 <HAL_UART_MspInit+0x25c>)
 800291c:	f001 fce6 	bl	80042ec <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002922:	4a25      	ldr	r2, [pc, #148]	; (80029b8 <HAL_UART_MspInit+0x264>)
 8002924:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002928:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800292c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_UART_MspInit+0x260>)
 800293c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002940:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_UART_MspInit+0x260>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002954:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_UART_MspInit+0x260>)
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002962:	4814      	ldr	r0, [pc, #80]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002964:	f001 f8b6 	bl	8003ad4 <HAL_DMA_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 800296e:	f7ff fb73 	bl	8002058 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_UART_MspInit+0x260>)
 8002976:	635a      	str	r2, [r3, #52]	; 0x34
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_UART_MspInit+0x260>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	2025      	movs	r0, #37	; 0x25
 8002984:	f001 f86f 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002988:	2025      	movs	r0, #37	; 0x25
 800298a:	f001 f888 	bl	8003a9e <HAL_NVIC_EnableIRQ>
}
 800298e:	e105      	b.n	8002b9c <HAL_UART_MspInit+0x448>
 8002990:	40005000 	.word	0x40005000
 8002994:	40023800 	.word	0x40023800
 8002998:	40020800 	.word	0x40020800
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	20000b78 	.word	0x20000b78
 80029a4:	40026010 	.word	0x40026010
 80029a8:	40011000 	.word	0x40011000
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	20000824 	.word	0x20000824
 80029b8:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a78      	ldr	r2, [pc, #480]	; (8002ba4 <HAL_UART_MspInit+0x450>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d162      	bne.n	8002a8c <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a76      	ldr	r2, [pc, #472]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	4b70      	ldr	r3, [pc, #448]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a6f      	ldr	r2, [pc, #444]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029fe:	230c      	movs	r3, #12
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0e:	2307      	movs	r3, #7
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a16:	4619      	mov	r1, r3
 8002a18:	4864      	ldr	r0, [pc, #400]	; (8002bac <HAL_UART_MspInit+0x458>)
 8002a1a:	f001 fc67 	bl	80042ec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a1e:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a20:	4a64      	ldr	r2, [pc, #400]	; (8002bb4 <HAL_UART_MspInit+0x460>)
 8002a22:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a24:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a2c:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a38:	4b5d      	ldr	r3, [pc, #372]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a40:	4b5b      	ldr	r3, [pc, #364]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a46:	4b5a      	ldr	r3, [pc, #360]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a4c:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a52:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a5e:	4854      	ldr	r0, [pc, #336]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a60:	f001 f838 	bl	8003ad4 <HAL_DMA_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002a6a:	f7ff faf5 	bl	8002058 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4f      	ldr	r2, [pc, #316]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
 8002a74:	4a4e      	ldr	r2, [pc, #312]	; (8002bb0 <HAL_UART_MspInit+0x45c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2026      	movs	r0, #38	; 0x26
 8002a80:	f000 fff1 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a84:	2026      	movs	r0, #38	; 0x26
 8002a86:	f001 f80a 	bl	8003a9e <HAL_NVIC_EnableIRQ>
}
 8002a8a:	e087      	b.n	8002b9c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a49      	ldr	r2, [pc, #292]	; (8002bb8 <HAL_UART_MspInit+0x464>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	f040 8082 	bne.w	8002b9c <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a41      	ldr	r2, [pc, #260]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae0:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_UART_MspInit+0x454>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002aec:	2320      	movs	r3, #32
 8002aee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002afc:	2307      	movs	r3, #7
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b04:	4619      	mov	r1, r3
 8002b06:	482d      	ldr	r0, [pc, #180]	; (8002bbc <HAL_UART_MspInit+0x468>)
 8002b08:	f001 fbf0 	bl	80042ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b26:	4619      	mov	r1, r3
 8002b28:	4825      	ldr	r0, [pc, #148]	; (8002bc0 <HAL_UART_MspInit+0x46c>)
 8002b2a:	f001 fbdf 	bl	80042ec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b30:	4a25      	ldr	r2, [pc, #148]	; (8002bc8 <HAL_UART_MspInit+0x474>)
 8002b32:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b3a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b4e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b62:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b64:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b70:	4814      	ldr	r0, [pc, #80]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b72:	f000 ffaf 	bl	8003ad4 <HAL_DMA_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002b7c:	f7ff fa6c 	bl	8002058 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34
 8002b86:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <HAL_UART_MspInit+0x470>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2027      	movs	r0, #39	; 0x27
 8002b92:	f000 ff68 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b96:	2027      	movs	r0, #39	; 0x27
 8002b98:	f000 ff81 	bl	8003a9e <HAL_NVIC_EnableIRQ>
}
 8002b9c:	bf00      	nop
 8002b9e:	3748      	adds	r7, #72	; 0x48
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40004400 	.word	0x40004400
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	20000884 	.word	0x20000884
 8002bb4:	400260a0 	.word	0x400260a0
 8002bb8:	40004800 	.word	0x40004800
 8002bbc:	40020800 	.word	0x40020800
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	2000013c 	.word	0x2000013c
 8002bc8:	40026028 	.word	0x40026028

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler+0x4>

08002be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <BusFault_Handler+0x4>

08002bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <UsageFault_Handler+0x4>

08002bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 fe04 	bl	800382c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <DMA1_Stream0_IRQHandler+0x10>)
 8002c2e:	f001 f8e9 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000b78 	.word	0x20000b78

08002c3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <DMA1_Stream1_IRQHandler+0x10>)
 8002c42:	f001 f8df 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000013c 	.word	0x2000013c

08002c50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <DMA1_Stream6_IRQHandler+0x10>)
 8002c56:	f001 f8d5 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000884 	.word	0x20000884

08002c64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c6a:	f002 fec7 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000414 	.word	0x20000414

08002c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <USART1_IRQHandler+0x10>)
 8002c7e:	f003 fa6d 	bl	800615c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200008e8 	.word	0x200008e8

08002c8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <USART2_IRQHandler+0x10>)
 8002c92:	f003 fa63 	bl	800615c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000b38 	.word	0x20000b38

08002ca0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <USART3_IRQHandler+0x10>)
 8002ca6:	f003 fa59 	bl	800615c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200001a4 	.word	0x200001a4

08002cb4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <UART5_IRQHandler+0x10>)
 8002cba:	f003 fa4f 	bl	800615c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200007e0 	.word	0x200007e0

08002cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <TIM6_DAC_IRQHandler+0x10>)
 8002cce:	f002 fe95 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2000095c 	.word	0x2000095c

08002cdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <TIM7_IRQHandler+0x10>)
 8002ce2:	f002 fe8b 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000101c 	.word	0x2000101c

08002cf0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <DMA2_Stream2_IRQHandler+0x10>)
 8002cf6:	f001 f885 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000824 	.word	0x20000824

08002d04 <_sbrk>:
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_sbrk+0x50>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <_sbrk+0x16>
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <_sbrk+0x50>)
 8002d16:	4a10      	ldr	r2, [pc, #64]	; (8002d58 <_sbrk+0x54>)
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <_sbrk+0x50>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <_sbrk+0x50>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	466a      	mov	r2, sp
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d907      	bls.n	8002d3e <_sbrk+0x3a>
 8002d2e:	f004 f92d 	bl	8006f8c <__errno>
 8002d32:	4602      	mov	r2, r0
 8002d34:	230c      	movs	r3, #12
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d3c:	e006      	b.n	8002d4c <_sbrk+0x48>
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <_sbrk+0x50>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <_sbrk+0x50>)
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	200000f8 	.word	0x200000f8
 8002d58:	200014e0 	.word	0x200014e0

08002d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <SystemInit+0x28>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <SystemInit+0x28>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <SystemInit+0x28>)
 8002d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d76:	609a      	str	r2, [r3, #8]
#endif
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002d90:	f000 fd60 	bl	8003854 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <SPI_Timer_On+0x20>)
 8002d98:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <SPI_Timer_On+0x24>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20001064 	.word	0x20001064
 8002dac:	20001068 	.word	0x20001068

08002db0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002db4:	f000 fd4e 	bl	8003854 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <SPI_Timer_Status+0x24>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	1ad2      	subs	r2, r2, r3
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <SPI_Timer_Status+0x28>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	bf34      	ite	cc
 8002dc8:	2301      	movcc	r3, #1
 8002dca:	2300      	movcs	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20001064 	.word	0x20001064
 8002dd8:	20001068 	.word	0x20001068

08002ddc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002de6:	f107 020f 	add.w	r2, r7, #15
 8002dea:	1df9      	adds	r1, r7, #7
 8002dec:	2332      	movs	r3, #50	; 0x32
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2301      	movs	r3, #1
 8002df2:	4804      	ldr	r0, [pc, #16]	; (8002e04 <xchg_spi+0x28>)
 8002df4:	f002 fb3a 	bl	800546c <HAL_SPI_TransmitReceive>
    return rxDat;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000780 	.word	0x20000780

08002e08 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e00a      	b.n	8002e2e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	18d4      	adds	r4, r2, r3
 8002e1e:	20ff      	movs	r0, #255	; 0xff
 8002e20:	f7ff ffdc 	bl	8002ddc <xchg_spi>
 8002e24:	4603      	mov	r3, r0
 8002e26:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3f0      	bcc.n	8002e18 <rcvr_spi_multi+0x10>
	}
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}

08002e3e <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e009      	b.n	8002e62 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ffc0 	bl	8002ddc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3f1      	bcc.n	8002e4e <xmit_spi_multi+0x10>
	}
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002e7a:	f000 fceb 	bl	8003854 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002e84:	20ff      	movs	r0, #255	; 0xff
 8002e86:	f7ff ffa9 	bl	8002ddc <xchg_spi>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2bff      	cmp	r3, #255	; 0xff
 8002e92:	d007      	beq.n	8002ea4 <wait_ready+0x32>
 8002e94:	f000 fcde 	bl	8003854 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d8ef      	bhi.n	8002e84 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2bff      	cmp	r3, #255	; 0xff
 8002ea8:	bf0c      	ite	eq
 8002eaa:	2301      	moveq	r3, #1
 8002eac:	2300      	movne	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ec2:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <despiselect+0x1c>)
 8002ec4:	f001 fbbc 	bl	8004640 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002ec8:	20ff      	movs	r0, #255	; 0xff
 8002eca:	f7ff ff87 	bl	8002ddc <xchg_spi>

}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002edc:	2200      	movs	r2, #0
 8002ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee2:	480a      	ldr	r0, [pc, #40]	; (8002f0c <spiselect+0x34>)
 8002ee4:	f001 fbac 	bl	8004640 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002ee8:	20ff      	movs	r0, #255	; 0xff
 8002eea:	f7ff ff77 	bl	8002ddc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002eee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ef2:	f7ff ffbe 	bl	8002e72 <wait_ready>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <spiselect+0x28>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e002      	b.n	8002f06 <spiselect+0x2e>

	despiselect();
 8002f00:	f7ff ffda 	bl	8002eb8 <despiselect>
	return 0;	/* Timeout */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40020000 	.word	0x40020000

08002f10 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002f1a:	20c8      	movs	r0, #200	; 0xc8
 8002f1c:	f7ff ff34 	bl	8002d88 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002f20:	20ff      	movs	r0, #255	; 0xff
 8002f22:	f7ff ff5b 	bl	8002ddc <xchg_spi>
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2bff      	cmp	r3, #255	; 0xff
 8002f2e:	d104      	bne.n	8002f3a <rcvr_datablock+0x2a>
 8002f30:	f7ff ff3e 	bl	8002db0 <SPI_Timer_Status>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f2      	bne.n	8002f20 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2bfe      	cmp	r3, #254	; 0xfe
 8002f3e:	d001      	beq.n	8002f44 <rcvr_datablock+0x34>
 8002f40:	2300      	movs	r3, #0
 8002f42:	e00a      	b.n	8002f5a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ff5e 	bl	8002e08 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002f4c:	20ff      	movs	r0, #255	; 0xff
 8002f4e:	f7ff ff45 	bl	8002ddc <xchg_spi>
 8002f52:	20ff      	movs	r0, #255	; 0xff
 8002f54:	f7ff ff42 	bl	8002ddc <xchg_spi>

	return 1;						/* Function succeeded */
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f72:	f7ff ff7e 	bl	8002e72 <wait_ready>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <xmit_datablock+0x1e>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e01e      	b.n	8002fbe <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ff2a 	bl	8002ddc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	2bfd      	cmp	r3, #253	; 0xfd
 8002f8c:	d016      	beq.n	8002fbc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff53 	bl	8002e3e <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002f98:	20ff      	movs	r0, #255	; 0xff
 8002f9a:	f7ff ff1f 	bl	8002ddc <xchg_spi>
 8002f9e:	20ff      	movs	r0, #255	; 0xff
 8002fa0:	f7ff ff1c 	bl	8002ddc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002fa4:	20ff      	movs	r0, #255	; 0xff
 8002fa6:	f7ff ff19 	bl	8002ddc <xchg_spi>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d001      	beq.n	8002fbc <xmit_datablock+0x5a>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <xmit_datablock+0x5c>
	}
	return 1;
 8002fbc:	2301      	movs	r3, #1
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	6039      	str	r1, [r7, #0]
 8002fd0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da0e      	bge.n	8002ff8 <send_cmd+0x32>
		cmd &= 0x7F;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2037      	movs	r0, #55	; 0x37
 8002fe6:	f7ff ffee 	bl	8002fc6 <send_cmd>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002fee:	7bbb      	ldrb	r3, [r7, #14]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d901      	bls.n	8002ff8 <send_cmd+0x32>
 8002ff4:	7bbb      	ldrb	r3, [r7, #14]
 8002ff6:	e051      	b.n	800309c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d008      	beq.n	8003010 <send_cmd+0x4a>
		despiselect();
 8002ffe:	f7ff ff5b 	bl	8002eb8 <despiselect>
		if (!spiselect()) return 0xFF;
 8003002:	f7ff ff69 	bl	8002ed8 <spiselect>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <send_cmd+0x4a>
 800300c:	23ff      	movs	r3, #255	; 0xff
 800300e:	e045      	b.n	800309c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fedf 	bl	8002ddc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	0e1b      	lsrs	r3, r3, #24
 8003022:	b2db      	uxtb	r3, r3
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fed9 	bl	8002ddc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fed3 	bl	8002ddc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fecd 	bl	8002ddc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fec8 	bl	8002ddc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <send_cmd+0x94>
 8003056:	2395      	movs	r3, #149	; 0x95
 8003058:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d101      	bne.n	8003064 <send_cmd+0x9e>
 8003060:	2387      	movs	r3, #135	; 0x87
 8003062:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff feb8 	bl	8002ddc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d102      	bne.n	8003078 <send_cmd+0xb2>
 8003072:	20ff      	movs	r0, #255	; 0xff
 8003074:	f7ff feb2 	bl	8002ddc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003078:	230a      	movs	r3, #10
 800307a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800307c:	20ff      	movs	r0, #255	; 0xff
 800307e:	f7ff fead 	bl	8002ddc <xchg_spi>
 8003082:	4603      	mov	r3, r0
 8003084:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da05      	bge.n	800309a <send_cmd+0xd4>
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	3b01      	subs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <send_cmd+0xb6>

	return res;							/* Return received response */
 800309a:	7bbb      	ldrb	r3, [r7, #14]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <USER_SPI_initialize+0x14>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0cb      	b.n	8003250 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80030b8:	4b67      	ldr	r3, [pc, #412]	; (8003258 <USER_SPI_initialize+0x1b4>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <USER_SPI_initialize+0x2a>
 80030c6:	4b64      	ldr	r3, [pc, #400]	; (8003258 <USER_SPI_initialize+0x1b4>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e0c0      	b.n	8003250 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <USER_SPI_initialize+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80030d8:	230a      	movs	r3, #10
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e005      	b.n	80030ea <USER_SPI_initialize+0x46>
 80030de:	20ff      	movs	r0, #255	; 0xff
 80030e0:	f7ff fe7c 	bl	8002ddc <xchg_spi>
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f6      	bne.n	80030de <USER_SPI_initialize+0x3a>

	ty = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80030f4:	2100      	movs	r1, #0
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7ff ff65 	bl	8002fc6 <send_cmd>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	f040 808b 	bne.w	800321a <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003108:	f7ff fe3e 	bl	8002d88 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800310c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003110:	2008      	movs	r0, #8
 8003112:	f7ff ff58 	bl	8002fc6 <send_cmd>
 8003116:	4603      	mov	r3, r0
 8003118:	2b01      	cmp	r3, #1
 800311a:	d151      	bne.n	80031c0 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e00d      	b.n	800313e <USER_SPI_initialize+0x9a>
 8003122:	7bfc      	ldrb	r4, [r7, #15]
 8003124:	20ff      	movs	r0, #255	; 0xff
 8003126:	f7ff fe59 	bl	8002ddc <xchg_spi>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	f107 0310 	add.w	r3, r7, #16
 8003132:	4423      	add	r3, r4
 8003134:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	3301      	adds	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d9ee      	bls.n	8003122 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003144:	7abb      	ldrb	r3, [r7, #10]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d167      	bne.n	800321a <USER_SPI_initialize+0x176>
 800314a:	7afb      	ldrb	r3, [r7, #11]
 800314c:	2baa      	cmp	r3, #170	; 0xaa
 800314e:	d164      	bne.n	800321a <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003150:	bf00      	nop
 8003152:	f7ff fe2d 	bl	8002db0 <SPI_Timer_Status>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <USER_SPI_initialize+0xc8>
 800315c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003160:	20a9      	movs	r0, #169	; 0xa9
 8003162:	f7ff ff30 	bl	8002fc6 <send_cmd>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f2      	bne.n	8003152 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800316c:	f7ff fe20 	bl	8002db0 <SPI_Timer_Status>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d051      	beq.n	800321a <USER_SPI_initialize+0x176>
 8003176:	2100      	movs	r1, #0
 8003178:	203a      	movs	r0, #58	; 0x3a
 800317a:	f7ff ff24 	bl	8002fc6 <send_cmd>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d14a      	bne.n	800321a <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	e00d      	b.n	80031a6 <USER_SPI_initialize+0x102>
 800318a:	7bfc      	ldrb	r4, [r7, #15]
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	f7ff fe25 	bl	8002ddc <xchg_spi>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	4423      	add	r3, r4
 800319c:	f803 2c08 	strb.w	r2, [r3, #-8]
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	3301      	adds	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d9ee      	bls.n	800318a <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80031ac:	7a3b      	ldrb	r3, [r7, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <USER_SPI_initialize+0x116>
 80031b6:	230c      	movs	r3, #12
 80031b8:	e000      	b.n	80031bc <USER_SPI_initialize+0x118>
 80031ba:	2304      	movs	r3, #4
 80031bc:	737b      	strb	r3, [r7, #13]
 80031be:	e02c      	b.n	800321a <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80031c0:	2100      	movs	r1, #0
 80031c2:	20a9      	movs	r0, #169	; 0xa9
 80031c4:	f7ff feff 	bl	8002fc6 <send_cmd>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d804      	bhi.n	80031d8 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80031ce:	2302      	movs	r3, #2
 80031d0:	737b      	strb	r3, [r7, #13]
 80031d2:	23a9      	movs	r3, #169	; 0xa9
 80031d4:	73bb      	strb	r3, [r7, #14]
 80031d6:	e003      	b.n	80031e0 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80031d8:	2301      	movs	r3, #1
 80031da:	737b      	strb	r3, [r7, #13]
 80031dc:	2301      	movs	r3, #1
 80031de:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80031e0:	bf00      	nop
 80031e2:	f7ff fde5 	bl	8002db0 <SPI_Timer_Status>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <USER_SPI_initialize+0x158>
 80031ec:	7bbb      	ldrb	r3, [r7, #14]
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fee8 	bl	8002fc6 <send_cmd>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f2      	bne.n	80031e2 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80031fc:	f7ff fdd8 	bl	8002db0 <SPI_Timer_Status>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <USER_SPI_initialize+0x172>
 8003206:	f44f 7100 	mov.w	r1, #512	; 0x200
 800320a:	2010      	movs	r0, #16
 800320c:	f7ff fedb 	bl	8002fc6 <send_cmd>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <USER_SPI_initialize+0x176>
				ty = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800321a:	4a11      	ldr	r2, [pc, #68]	; (8003260 <USER_SPI_initialize+0x1bc>)
 800321c:	7b7b      	ldrb	r3, [r7, #13]
 800321e:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003220:	f7ff fe4a 	bl	8002eb8 <despiselect>

	if (ty) {			/* OK */
 8003224:	7b7b      	ldrb	r3, [r7, #13]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <USER_SPI_initialize+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2210      	movs	r2, #16
 8003230:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <USER_SPI_initialize+0x1b4>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <USER_SPI_initialize+0x1b4>)
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e002      	b.n	800324a <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <USER_SPI_initialize+0x1b4>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <USER_SPI_initialize+0x1b4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bd90      	pop	{r4, r7, pc}
 8003258:	20000004 	.word	0x20000004
 800325c:	20000780 	.word	0x20000780
 8003260:	200000fc 	.word	0x200000fc

08003264 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <USER_SPI_status+0x14>
 8003274:	2301      	movs	r3, #1
 8003276:	e002      	b.n	800327e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <USER_SPI_status+0x28>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b2db      	uxtb	r3, r3
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000004 	.word	0x20000004

08003290 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <USER_SPI_read+0x1c>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <USER_SPI_read+0x20>
 80032ac:	2304      	movs	r3, #4
 80032ae:	e04d      	b.n	800334c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <USER_SPI_read+0xc4>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <USER_SPI_read+0x32>
 80032be:	2303      	movs	r3, #3
 80032c0:	e044      	b.n	800334c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80032c2:	4b25      	ldr	r3, [pc, #148]	; (8003358 <USER_SPI_read+0xc8>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <USER_SPI_read+0x44>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	025b      	lsls	r3, r3, #9
 80032d2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d111      	bne.n	80032fe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	2011      	movs	r0, #17
 80032de:	f7ff fe72 	bl	8002fc6 <send_cmd>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d129      	bne.n	800333c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80032e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f7ff fe0f 	bl	8002f10 <rcvr_datablock>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d021      	beq.n	800333c <USER_SPI_read+0xac>
			count = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	e01e      	b.n	800333c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	2012      	movs	r0, #18
 8003302:	f7ff fe60 	bl	8002fc6 <send_cmd>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d117      	bne.n	800333c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800330c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003310:	68b8      	ldr	r0, [r7, #8]
 8003312:	f7ff fdfd 	bl	8002f10 <rcvr_datablock>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <USER_SPI_read+0xa2>
				buff += 512;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003322:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	3b01      	subs	r3, #1
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ed      	bne.n	800330c <USER_SPI_read+0x7c>
 8003330:	e000      	b.n	8003334 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003332:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003334:	2100      	movs	r1, #0
 8003336:	200c      	movs	r0, #12
 8003338:	f7ff fe45 	bl	8002fc6 <send_cmd>
		}
	}
	despiselect();
 800333c:	f7ff fdbc 	bl	8002eb8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000004 	.word	0x20000004
 8003358:	200000fc 	.word	0x200000fc

0800335c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <USER_SPI_write+0x1c>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <USER_SPI_write+0x20>
 8003378:	2304      	movs	r3, #4
 800337a:	e063      	b.n	8003444 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800337c:	4b33      	ldr	r3, [pc, #204]	; (800344c <USER_SPI_write+0xf0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <USER_SPI_write+0x32>
 800338a:	2303      	movs	r3, #3
 800338c:	e05a      	b.n	8003444 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800338e:	4b2f      	ldr	r3, [pc, #188]	; (800344c <USER_SPI_write+0xf0>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <USER_SPI_write+0x44>
 800339c:	2302      	movs	r3, #2
 800339e:	e051      	b.n	8003444 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <USER_SPI_write+0xf4>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <USER_SPI_write+0x56>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	025b      	lsls	r3, r3, #9
 80033b0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d110      	bne.n	80033da <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	2018      	movs	r0, #24
 80033bc:	f7ff fe03 	bl	8002fc6 <send_cmd>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d136      	bne.n	8003434 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80033c6:	21fe      	movs	r1, #254	; 0xfe
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff fdca 	bl	8002f62 <xmit_datablock>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02f      	beq.n	8003434 <USER_SPI_write+0xd8>
			count = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	e02c      	b.n	8003434 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <USER_SPI_write+0xf4>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f003 0306 	and.w	r3, r3, #6
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <USER_SPI_write+0x92>
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	2097      	movs	r0, #151	; 0x97
 80033ea:	f7ff fdec 	bl	8002fc6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	2019      	movs	r0, #25
 80033f2:	f7ff fde8 	bl	8002fc6 <send_cmd>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11b      	bne.n	8003434 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80033fc:	21fc      	movs	r1, #252	; 0xfc
 80033fe:	68b8      	ldr	r0, [r7, #8]
 8003400:	f7ff fdaf 	bl	8002f62 <xmit_datablock>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <USER_SPI_write+0xc4>
				buff += 512;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003410:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	3b01      	subs	r3, #1
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <USER_SPI_write+0xa0>
 800341e:	e000      	b.n	8003422 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003420:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003422:	21fd      	movs	r1, #253	; 0xfd
 8003424:	2000      	movs	r0, #0
 8003426:	f7ff fd9c 	bl	8002f62 <xmit_datablock>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <USER_SPI_write+0xd8>
 8003430:	2301      	movs	r3, #1
 8003432:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003434:	f7ff fd40 	bl	8002eb8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000004 	.word	0x20000004
 8003450:	200000fc 	.word	0x200000fc

08003454 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	; 0x30
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	603a      	str	r2, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
 8003460:	460b      	mov	r3, r1
 8003462:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <USER_SPI_ioctl+0x1a>
 800346a:	2304      	movs	r3, #4
 800346c:	e15a      	b.n	8003724 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800346e:	4baf      	ldr	r3, [pc, #700]	; (800372c <USER_SPI_ioctl+0x2d8>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <USER_SPI_ioctl+0x2c>
 800347c:	2303      	movs	r3, #3
 800347e:	e151      	b.n	8003724 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003486:	79bb      	ldrb	r3, [r7, #6]
 8003488:	2b04      	cmp	r3, #4
 800348a:	f200 8136 	bhi.w	80036fa <USER_SPI_ioctl+0x2a6>
 800348e:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <USER_SPI_ioctl+0x40>)
 8003490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003494:	080034a9 	.word	0x080034a9
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080036fb 	.word	0x080036fb
 80034a0:	08003569 	.word	0x08003569
 80034a4:	0800365f 	.word	0x0800365f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80034a8:	f7ff fd16 	bl	8002ed8 <spiselect>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8127 	beq.w	8003702 <USER_SPI_ioctl+0x2ae>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80034ba:	e122      	b.n	8003702 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80034bc:	2100      	movs	r1, #0
 80034be:	2009      	movs	r0, #9
 80034c0:	f7ff fd81 	bl	8002fc6 <send_cmd>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 811d 	bne.w	8003706 <USER_SPI_ioctl+0x2b2>
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	2110      	movs	r1, #16
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fd1c 	bl	8002f10 <rcvr_datablock>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8113 	beq.w	8003706 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80034e0:	7b3b      	ldrb	r3, [r7, #12]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d111      	bne.n	800350e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80034ea:	7d7b      	ldrb	r3, [r7, #21]
 80034ec:	461a      	mov	r2, r3
 80034ee:	7d3b      	ldrb	r3, [r7, #20]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	4413      	add	r3, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80034fe:	4413      	add	r3, r2
 8003500:	3301      	adds	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	029a      	lsls	r2, r3, #10
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e028      	b.n	8003560 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800350e:	7c7b      	ldrb	r3, [r7, #17]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	b2da      	uxtb	r2, r3
 8003516:	7dbb      	ldrb	r3, [r7, #22]
 8003518:	09db      	lsrs	r3, r3, #7
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4413      	add	r3, r2
 800351e:	b2da      	uxtb	r2, r3
 8003520:	7d7b      	ldrb	r3, [r7, #21]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0306 	and.w	r3, r3, #6
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4413      	add	r3, r2
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3302      	adds	r3, #2
 8003532:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003536:	7d3b      	ldrb	r3, [r7, #20]
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	441a      	add	r2, r3
 8003544:	7cbb      	ldrb	r3, [r7, #18]
 8003546:	029b      	lsls	r3, r3, #10
 8003548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800354c:	4413      	add	r3, r2
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003552:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003556:	3b09      	subs	r3, #9
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	409a      	lsls	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003566:	e0ce      	b.n	8003706 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003568:	4b71      	ldr	r3, [pc, #452]	; (8003730 <USER_SPI_ioctl+0x2dc>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d031      	beq.n	80035d8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003574:	2100      	movs	r1, #0
 8003576:	208d      	movs	r0, #141	; 0x8d
 8003578:	f7ff fd25 	bl	8002fc6 <send_cmd>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 80c3 	bne.w	800370a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003584:	20ff      	movs	r0, #255	; 0xff
 8003586:	f7ff fc29 	bl	8002ddc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	2110      	movs	r1, #16
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fcbd 	bl	8002f10 <rcvr_datablock>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80b6 	beq.w	800370a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800359e:	2330      	movs	r3, #48	; 0x30
 80035a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80035a4:	e007      	b.n	80035b6 <USER_SPI_ioctl+0x162>
 80035a6:	20ff      	movs	r0, #255	; 0xff
 80035a8:	f7ff fc18 	bl	8002ddc <xchg_spi>
 80035ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035b0:	3b01      	subs	r3, #1
 80035b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80035b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f3      	bne.n	80035a6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80035be:	7dbb      	ldrb	r3, [r7, #22]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	2310      	movs	r3, #16
 80035c8:	fa03 f202 	lsl.w	r2, r3, r2
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80035d6:	e098      	b.n	800370a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80035d8:	2100      	movs	r1, #0
 80035da:	2009      	movs	r0, #9
 80035dc:	f7ff fcf3 	bl	8002fc6 <send_cmd>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 8091 	bne.w	800370a <USER_SPI_ioctl+0x2b6>
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	2110      	movs	r1, #16
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fc8e 	bl	8002f10 <rcvr_datablock>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8087 	beq.w	800370a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <USER_SPI_ioctl+0x2dc>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d012      	beq.n	800362e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003608:	7dbb      	ldrb	r3, [r7, #22]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003610:	7dfa      	ldrb	r2, [r7, #23]
 8003612:	09d2      	lsrs	r2, r2, #7
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	4413      	add	r3, r2
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	7e7b      	ldrb	r3, [r7, #25]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	461a      	mov	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e013      	b.n	8003656 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800362e:	7dbb      	ldrb	r3, [r7, #22]
 8003630:	109b      	asrs	r3, r3, #2
 8003632:	b29b      	uxth	r3, r3
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	3301      	adds	r3, #1
 800363a:	7dfa      	ldrb	r2, [r7, #23]
 800363c:	00d2      	lsls	r2, r2, #3
 800363e:	f002 0218 	and.w	r2, r2, #24
 8003642:	7df9      	ldrb	r1, [r7, #23]
 8003644:	0949      	lsrs	r1, r1, #5
 8003646:	b2c9      	uxtb	r1, r1
 8003648:	440a      	add	r2, r1
 800364a:	3201      	adds	r2, #1
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	461a      	mov	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800365c:	e055      	b.n	800370a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <USER_SPI_ioctl+0x2dc>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	f003 0306 	and.w	r3, r3, #6
 8003666:	2b00      	cmp	r3, #0
 8003668:	d051      	beq.n	800370e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800366a:	f107 020c 	add.w	r2, r7, #12
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	210b      	movs	r1, #11
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff feee 	bl	8003454 <USER_SPI_ioctl>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d149      	bne.n	8003712 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800367e:	7b3b      	ldrb	r3, [r7, #12]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <USER_SPI_ioctl+0x23e>
 8003688:	7dbb      	ldrb	r3, [r7, #22]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d041      	beq.n	8003716 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80036a2:	4b23      	ldr	r3, [pc, #140]	; (8003730 <USER_SPI_ioctl+0x2dc>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	025b      	lsls	r3, r3, #9
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	025b      	lsls	r3, r3, #9
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80036ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036bc:	2020      	movs	r0, #32
 80036be:	f7ff fc82 	bl	8002fc6 <send_cmd>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d128      	bne.n	800371a <USER_SPI_ioctl+0x2c6>
 80036c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ca:	2021      	movs	r0, #33	; 0x21
 80036cc:	f7ff fc7b 	bl	8002fc6 <send_cmd>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d121      	bne.n	800371a <USER_SPI_ioctl+0x2c6>
 80036d6:	2100      	movs	r1, #0
 80036d8:	2026      	movs	r0, #38	; 0x26
 80036da:	f7ff fc74 	bl	8002fc6 <send_cmd>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11a      	bne.n	800371a <USER_SPI_ioctl+0x2c6>
 80036e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80036e8:	f7ff fbc3 	bl	8002e72 <wait_ready>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d013      	beq.n	800371a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80036f8:	e00f      	b.n	800371a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80036fa:	2304      	movs	r3, #4
 80036fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003700:	e00c      	b.n	800371c <USER_SPI_ioctl+0x2c8>
		break;
 8003702:	bf00      	nop
 8003704:	e00a      	b.n	800371c <USER_SPI_ioctl+0x2c8>
		break;
 8003706:	bf00      	nop
 8003708:	e008      	b.n	800371c <USER_SPI_ioctl+0x2c8>
		break;
 800370a:	bf00      	nop
 800370c:	e006      	b.n	800371c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800370e:	bf00      	nop
 8003710:	e004      	b.n	800371c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <USER_SPI_ioctl+0x2c8>
		break;
 800371a:	bf00      	nop
	}

	despiselect();
 800371c:	f7ff fbcc 	bl	8002eb8 <despiselect>

	return res;
 8003720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003724:	4618      	mov	r0, r3
 8003726:	3730      	adds	r7, #48	; 0x30
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000004 	.word	0x20000004
 8003730:	200000fc 	.word	0x200000fc

08003734 <Reset_Handler>:
 8003734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800376c <LoopFillZerobss+0x14>
 8003738:	2100      	movs	r1, #0
 800373a:	e003      	b.n	8003744 <LoopCopyDataInit>

0800373c <CopyDataInit>:
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <LoopFillZerobss+0x18>)
 800373e:	585b      	ldr	r3, [r3, r1]
 8003740:	5043      	str	r3, [r0, r1]
 8003742:	3104      	adds	r1, #4

08003744 <LoopCopyDataInit>:
 8003744:	480b      	ldr	r0, [pc, #44]	; (8003774 <LoopFillZerobss+0x1c>)
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <LoopFillZerobss+0x20>)
 8003748:	1842      	adds	r2, r0, r1
 800374a:	429a      	cmp	r2, r3
 800374c:	d3f6      	bcc.n	800373c <CopyDataInit>
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <LoopFillZerobss+0x24>)
 8003750:	e002      	b.n	8003758 <LoopFillZerobss>

08003752 <FillZerobss>:
 8003752:	2300      	movs	r3, #0
 8003754:	f842 3b04 	str.w	r3, [r2], #4

08003758 <LoopFillZerobss>:
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <LoopFillZerobss+0x28>)
 800375a:	429a      	cmp	r2, r3
 800375c:	d3f9      	bcc.n	8003752 <FillZerobss>
 800375e:	f7ff fafd 	bl	8002d5c <SystemInit>
 8003762:	f003 fc19 	bl	8006f98 <__libc_init_array>
 8003766:	f7fd fdd3 	bl	8001310 <main>
 800376a:	4770      	bx	lr
 800376c:	20020000 	.word	0x20020000
 8003770:	080078dc 	.word	0x080078dc
 8003774:	20000000 	.word	0x20000000
 8003778:	20000088 	.word	0x20000088
 800377c:	20000088 	.word	0x20000088
 8003780:	200014dc 	.word	0x200014dc

08003784 <ADC_IRQHandler>:
 8003784:	e7fe      	b.n	8003784 <ADC_IRQHandler>
	...

08003788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <HAL_Init+0x40>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_Init+0x40>)
 800379e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <HAL_Init+0x40>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 f94d 	bl	8003a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f000 f808 	bl	80037cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037bc:	f7fe fe8e 	bl	80024dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00

080037cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_InitTick+0x54>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_InitTick+0x58>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f965 	bl	8003aba <HAL_SYSTICK_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00e      	b.n	8003818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d80a      	bhi.n	8003816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003800:	2200      	movs	r2, #0
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003808:	f000 f92d 	bl	8003a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800380c:	4a06      	ldr	r2, [pc, #24]	; (8003828 <HAL_InitTick+0x5c>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000000 	.word	0x20000000
 8003824:	2000000c 	.word	0x2000000c
 8003828:	20000008 	.word	0x20000008

0800382c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x20>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_IncTick+0x24>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_IncTick+0x24>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	2000000c 	.word	0x2000000c
 8003850:	2000106c 	.word	0x2000106c

08003854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_GetTick+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	2000106c 	.word	0x2000106c

0800386c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff ffee 	bl	8003854 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_Delay+0x40>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003892:	bf00      	nop
 8003894:	f7ff ffde 	bl	8003854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
  {
  }
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038cc:	4013      	ands	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e2:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	60d3      	str	r3, [r2, #12]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <__NVIC_GetPriorityGrouping+0x18>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	f003 0307 	and.w	r3, r3, #7
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db0b      	blt.n	800393e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <__NVIC_EnableIRQ+0x38>)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2001      	movs	r0, #1
 8003936:	fa00 f202 	lsl.w	r2, r0, r2
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	e000e100 	.word	0xe000e100

08003950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	2b00      	cmp	r3, #0
 8003962:	db0a      	blt.n	800397a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	490c      	ldr	r1, [pc, #48]	; (800399c <__NVIC_SetPriority+0x4c>)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	440b      	add	r3, r1
 8003974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003978:	e00a      	b.n	8003990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4908      	ldr	r1, [pc, #32]	; (80039a0 <__NVIC_SetPriority+0x50>)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	3b04      	subs	r3, #4
 8003988:	0112      	lsls	r2, r2, #4
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	440b      	add	r3, r1
 800398e:	761a      	strb	r2, [r3, #24]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000e100 	.word	0xe000e100
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f1c3 0307 	rsb	r3, r3, #7
 80039be:	2b04      	cmp	r3, #4
 80039c0:	bf28      	it	cs
 80039c2:	2304      	movcs	r3, #4
 80039c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d902      	bls.n	80039d4 <NVIC_EncodePriority+0x30>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3b03      	subs	r3, #3
 80039d2:	e000      	b.n	80039d6 <NVIC_EncodePriority+0x32>
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	401a      	ands	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	43d9      	mvns	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	4313      	orrs	r3, r2
         );
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3724      	adds	r7, #36	; 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a1c:	d301      	bcc.n	8003a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00f      	b.n	8003a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <SysTick_Config+0x40>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a30:	f7ff ff8e 	bl	8003950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <SysTick_Config+0x40>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a3a:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <SysTick_Config+0x40>)
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	e000e010 	.word	0xe000e010

08003a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff29 	bl	80038b0 <__NVIC_SetPriorityGrouping>
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a78:	f7ff ff3e 	bl	80038f8 <__NVIC_GetPriorityGrouping>
 8003a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	6978      	ldr	r0, [r7, #20]
 8003a84:	f7ff ff8e 	bl	80039a4 <NVIC_EncodePriority>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff5d 	bl	8003950 <__NVIC_SetPriority>
}
 8003a96:	bf00      	nop
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff31 	bl	8003914 <__NVIC_EnableIRQ>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ffa2 	bl	8003a0c <SysTick_Config>
 8003ac8:	4603      	mov	r3, r0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7ff feb8 	bl	8003854 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e099      	b.n	8003c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b10:	e00f      	b.n	8003b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b12:	f7ff fe9f 	bl	8003854 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d908      	bls.n	8003b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e078      	b.n	8003c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e8      	bne.n	8003b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <HAL_DMA_Init+0x158>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d107      	bne.n	8003b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	4313      	orrs	r3, r2
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d117      	bne.n	8003bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fb0d 	bl	80041f8 <DMA_CheckFifoParam>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2240      	movs	r2, #64	; 0x40
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e016      	b.n	8003c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fac4 	bl	800418c <DMA_CalcBaseAndBitshift>
 8003c04:	4603      	mov	r3, r0
 8003c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	223f      	movs	r2, #63	; 0x3f
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	f010803f 	.word	0xf010803f

08003c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_Start_IT+0x26>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e040      	b.n	8003cd8 <HAL_DMA_Start_IT+0xa8>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d12f      	bne.n	8003cca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa56 	bl	8004130 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	223f      	movs	r2, #63	; 0x3f
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0216 	orr.w	r2, r2, #22
 8003c9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e005      	b.n	8003cd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cee:	f7ff fdb1 	bl	8003854 <HAL_GetTick>
 8003cf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d008      	beq.n	8003d12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e052      	b.n	8003db8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0216 	bic.w	r2, r2, #22
 8003d20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_DMA_Abort+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0208 	bic.w	r2, r2, #8
 8003d50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d62:	e013      	b.n	8003d8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d64:	f7ff fd76 	bl	8003854 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d90c      	bls.n	8003d8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2203      	movs	r2, #3
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e015      	b.n	8003db8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e4      	bne.n	8003d64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	223f      	movs	r2, #63	; 0x3f
 8003da0:	409a      	lsls	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e00c      	b.n	8003df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2205      	movs	r2, #5
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e10:	4b92      	ldr	r3, [pc, #584]	; (800405c <HAL_DMA_IRQHandler+0x258>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a92      	ldr	r2, [pc, #584]	; (8004060 <HAL_DMA_IRQHandler+0x25c>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	2208      	movs	r2, #8
 8003e30:	409a      	lsls	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01a      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	2201      	movs	r2, #1
 8003e76:	409a      	lsls	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	2201      	movs	r2, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f043 0202 	orr.w	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2204      	movs	r2, #4
 8003eac:	409a      	lsls	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d012      	beq.n	8003edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	2204      	movs	r2, #4
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f043 0204 	orr.w	r2, r3, #4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d043      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d03c      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2210      	movs	r2, #16
 8003f00:	409a      	lsls	r2, r3
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d024      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e01f      	b.n	8003f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
 8003f44:	e016      	b.n	8003f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0208 	bic.w	r2, r2, #8
 8003f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	2220      	movs	r2, #32
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 808e 	beq.w	80040a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8086 	beq.w	80040a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	d136      	bne.n	800401c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0216 	bic.w	r2, r2, #22
 8003fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <HAL_DMA_IRQHandler+0x1da>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0208 	bic.w	r2, r2, #8
 8003fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	223f      	movs	r2, #63	; 0x3f
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400e:	2b00      	cmp	r3, #0
 8004010:	d07d      	beq.n	800410e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
        }
        return;
 800401a:	e078      	b.n	800410e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01c      	beq.n	8004064 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d108      	bne.n	800404a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	2b00      	cmp	r3, #0
 800403e:	d030      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
 8004048:	e02b      	b.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d027      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
 800405a:	e022      	b.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
 800405c:	20000000 	.word	0x20000000
 8004060:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0210 	bic.w	r2, r2, #16
 8004080:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d032      	beq.n	8004110 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d022      	beq.n	80040fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2205      	movs	r2, #5
 80040ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d307      	bcc.n	80040ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f2      	bne.n	80040ce <HAL_DMA_IRQHandler+0x2ca>
 80040e8:	e000      	b.n	80040ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
 800410c:	e000      	b.n	8004110 <HAL_DMA_IRQHandler+0x30c>
        return;
 800410e:	bf00      	nop
    }
  }
}
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800414c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d108      	bne.n	8004170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800416e:	e007      	b.n	8004180 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	3b10      	subs	r3, #16
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <DMA_CalcBaseAndBitshift+0x64>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <DMA_CalcBaseAndBitshift+0x68>)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d909      	bls.n	80041ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	659a      	str	r2, [r3, #88]	; 0x58
 80041cc:	e007      	b.n	80041de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	aaaaaaab 	.word	0xaaaaaaab
 80041f4:	08007890 	.word	0x08007890

080041f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11f      	bne.n	8004252 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d855      	bhi.n	80042c4 <DMA_CheckFifoParam+0xcc>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <DMA_CheckFifoParam+0x28>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004231 	.word	0x08004231
 8004224:	08004243 	.word	0x08004243
 8004228:	08004231 	.word	0x08004231
 800422c:	080042c5 	.word	0x080042c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d045      	beq.n	80042c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004240:	e042      	b.n	80042c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800424a:	d13f      	bne.n	80042cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004250:	e03c      	b.n	80042cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425a:	d121      	bne.n	80042a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d836      	bhi.n	80042d0 <DMA_CheckFifoParam+0xd8>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <DMA_CheckFifoParam+0x70>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	0800427f 	.word	0x0800427f
 8004270:	08004279 	.word	0x08004279
 8004274:	08004291 	.word	0x08004291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
      break;
 800427c:	e02f      	b.n	80042de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d024      	beq.n	80042d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428e:	e021      	b.n	80042d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004298:	d11e      	bne.n	80042d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800429e:	e01b      	b.n	80042d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d902      	bls.n	80042ac <DMA_CheckFifoParam+0xb4>
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d003      	beq.n	80042b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042aa:	e018      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e015      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      break;
 80042c2:	e00b      	b.n	80042dc <DMA_CheckFifoParam+0xe4>
      break;
 80042c4:	bf00      	nop
 80042c6:	e00a      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      break;
 80042c8:	bf00      	nop
 80042ca:	e008      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      break;
 80042cc:	bf00      	nop
 80042ce:	e006      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      break;
 80042d0:	bf00      	nop
 80042d2:	e004      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      break;
 80042d4:	bf00      	nop
 80042d6:	e002      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      break;   
 80042d8:	bf00      	nop
 80042da:	e000      	b.n	80042de <DMA_CheckFifoParam+0xe6>
      break;
 80042dc:	bf00      	nop
    }
  } 
  
  return status; 
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e165      	b.n	80045d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004308:	2201      	movs	r2, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	f040 8154 	bne.w	80045ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d00b      	beq.n	8004346 <HAL_GPIO_Init+0x5a>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d007      	beq.n	8004346 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800433a:	2b11      	cmp	r3, #17
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b12      	cmp	r3, #18
 8004344:	d130      	bne.n	80043a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	2203      	movs	r2, #3
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800437c:	2201      	movs	r2, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 0201 	and.w	r2, r3, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0xfc>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b12      	cmp	r3, #18
 80043e6:	d123      	bne.n	8004430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	08da      	lsrs	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3208      	adds	r2, #8
 80043f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	220f      	movs	r2, #15
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	08da      	lsrs	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3208      	adds	r2, #8
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80ae 	beq.w	80045ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b5c      	ldr	r3, [pc, #368]	; (80045e8 <HAL_GPIO_Init+0x2fc>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	4a5b      	ldr	r2, [pc, #364]	; (80045e8 <HAL_GPIO_Init+0x2fc>)
 800447c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004480:	6453      	str	r3, [r2, #68]	; 0x44
 8004482:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_GPIO_Init+0x2fc>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800448e:	4a57      	ldr	r2, [pc, #348]	; (80045ec <HAL_GPIO_Init+0x300>)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	3302      	adds	r3, #2
 8004496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	220f      	movs	r2, #15
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4e      	ldr	r2, [pc, #312]	; (80045f0 <HAL_GPIO_Init+0x304>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d025      	beq.n	8004506 <HAL_GPIO_Init+0x21a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4d      	ldr	r2, [pc, #308]	; (80045f4 <HAL_GPIO_Init+0x308>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01f      	beq.n	8004502 <HAL_GPIO_Init+0x216>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4c      	ldr	r2, [pc, #304]	; (80045f8 <HAL_GPIO_Init+0x30c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d019      	beq.n	80044fe <HAL_GPIO_Init+0x212>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4b      	ldr	r2, [pc, #300]	; (80045fc <HAL_GPIO_Init+0x310>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_GPIO_Init+0x20e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4a      	ldr	r2, [pc, #296]	; (8004600 <HAL_GPIO_Init+0x314>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00d      	beq.n	80044f6 <HAL_GPIO_Init+0x20a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a49      	ldr	r2, [pc, #292]	; (8004604 <HAL_GPIO_Init+0x318>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <HAL_GPIO_Init+0x206>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a48      	ldr	r2, [pc, #288]	; (8004608 <HAL_GPIO_Init+0x31c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_GPIO_Init+0x202>
 80044ea:	2306      	movs	r3, #6
 80044ec:	e00c      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044ee:	2307      	movs	r3, #7
 80044f0:	e00a      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044f2:	2305      	movs	r3, #5
 80044f4:	e008      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044f6:	2304      	movs	r3, #4
 80044f8:	e006      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044fa:	2303      	movs	r3, #3
 80044fc:	e004      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044fe:	2302      	movs	r3, #2
 8004500:	e002      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 8004506:	2300      	movs	r3, #0
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	f002 0203 	and.w	r2, r2, #3
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	4093      	lsls	r3, r2
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004518:	4934      	ldr	r1, [pc, #208]	; (80045ec <HAL_GPIO_Init+0x300>)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <HAL_GPIO_Init+0x320>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800454a:	4a30      	ldr	r2, [pc, #192]	; (800460c <HAL_GPIO_Init+0x320>)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004550:	4b2e      	ldr	r3, [pc, #184]	; (800460c <HAL_GPIO_Init+0x320>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004574:	4a25      	ldr	r2, [pc, #148]	; (800460c <HAL_GPIO_Init+0x320>)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_GPIO_Init+0x320>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800459e:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_GPIO_Init+0x320>)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_GPIO_Init+0x320>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c8:	4a10      	ldr	r2, [pc, #64]	; (800460c <HAL_GPIO_Init+0x320>)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	f67f ae96 	bls.w	8004308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	3724      	adds	r7, #36	; 0x24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40013800 	.word	0x40013800
 80045f0:	40020000 	.word	0x40020000
 80045f4:	40020400 	.word	0x40020400
 80045f8:	40020800 	.word	0x40020800
 80045fc:	40020c00 	.word	0x40020c00
 8004600:	40021000 	.word	0x40021000
 8004604:	40021400 	.word	0x40021400
 8004608:	40021800 	.word	0x40021800
 800460c:	40013c00 	.word	0x40013c00

08004610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	887b      	ldrh	r3, [r7, #2]
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	e001      	b.n	8004632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004650:	787b      	ldrb	r3, [r7, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800465c:	e003      	b.n	8004666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	041a      	lsls	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_PWREx_EnableOverDrive+0x90>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <HAL_PWREx_EnableOverDrive+0x90>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <HAL_PWREx_EnableOverDrive+0x90>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_PWREx_EnableOverDrive+0x94>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a0:	f7ff f8d8 	bl	8003854 <HAL_GetTick>
 80046a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046a6:	e009      	b.n	80046bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046a8:	f7ff f8d4 	bl	8003854 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046b6:	d901      	bls.n	80046bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e01f      	b.n	80046fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046bc:	4b13      	ldr	r3, [pc, #76]	; (800470c <HAL_PWREx_EnableOverDrive+0x98>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d1ee      	bne.n	80046a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046d0:	f7ff f8c0 	bl	8003854 <HAL_GetTick>
 80046d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046d6:	e009      	b.n	80046ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046d8:	f7ff f8bc 	bl	8003854 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e6:	d901      	bls.n	80046ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e007      	b.n	80046fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_PWREx_EnableOverDrive+0x98>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046f8:	d1ee      	bne.n	80046d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	420e0040 	.word	0x420e0040
 800470c:	40007000 	.word	0x40007000
 8004710:	420e0044 	.word	0x420e0044

08004714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0cc      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004728:	4b68      	ldr	r3, [pc, #416]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d90c      	bls.n	8004750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b65      	ldr	r3, [pc, #404]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b63      	ldr	r3, [pc, #396]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0b8      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d020      	beq.n	800479e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004768:	4b59      	ldr	r3, [pc, #356]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a58      	ldr	r2, [pc, #352]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004780:	4b53      	ldr	r3, [pc, #332]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a52      	ldr	r2, [pc, #328]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800478a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478c:	4b50      	ldr	r3, [pc, #320]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	494d      	ldr	r1, [pc, #308]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d044      	beq.n	8004834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d119      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e07f      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d2:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e06f      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e2:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e067      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f2:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f023 0203 	bic.w	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4934      	ldr	r1, [pc, #208]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	4313      	orrs	r3, r2
 8004802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004804:	f7ff f826 	bl	8003854 <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	e00a      	b.n	8004822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7ff f822 	bl	8003854 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	; 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e04f      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 020c 	and.w	r2, r3, #12
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	429a      	cmp	r2, r3
 8004832:	d1eb      	bne.n	800480c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d20c      	bcs.n	800485c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b20      	ldr	r3, [pc, #128]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e032      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4916      	ldr	r1, [pc, #88]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	490e      	ldr	r1, [pc, #56]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800489a:	f000 f855 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 800489e:	4601      	mov	r1, r0
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	fa21 f303 	lsr.w	r3, r1, r3
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe ff86 	bl	80037cc <HAL_InitTick>

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023c00 	.word	0x40023c00
 80048d0:	40023800 	.word	0x40023800
 80048d4:	08007878 	.word	0x08007878
 80048d8:	20000000 	.word	0x20000000
 80048dc:	20000008 	.word	0x20000008

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000000 	.word	0x20000000

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048fc:	f7ff fff0 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004900:	4601      	mov	r1, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	08007888 	.word	0x08007888

08004920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004924:	f7ff ffdc 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004928:	4601      	mov	r1, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0b5b      	lsrs	r3, r3, #13
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4a03      	ldr	r2, [pc, #12]	; (8004944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004936:	5cd3      	ldrb	r3, [r2, r3]
 8004938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	08007888 	.word	0x08007888

08004948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004962:	4bc6      	ldr	r3, [pc, #792]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b0c      	cmp	r3, #12
 800496c:	f200 817e 	bhi.w	8004c6c <HAL_RCC_GetSysClockFreq+0x324>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_RCC_GetSysClockFreq+0x30>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049ad 	.word	0x080049ad
 800497c:	08004c6d 	.word	0x08004c6d
 8004980:	08004c6d 	.word	0x08004c6d
 8004984:	08004c6d 	.word	0x08004c6d
 8004988:	080049b3 	.word	0x080049b3
 800498c:	08004c6d 	.word	0x08004c6d
 8004990:	08004c6d 	.word	0x08004c6d
 8004994:	08004c6d 	.word	0x08004c6d
 8004998:	080049b9 	.word	0x080049b9
 800499c:	08004c6d 	.word	0x08004c6d
 80049a0:	08004c6d 	.word	0x08004c6d
 80049a4:	08004c6d 	.word	0x08004c6d
 80049a8:	08004b15 	.word	0x08004b15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4bb4      	ldr	r3, [pc, #720]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x338>)
 80049ae:	613b      	str	r3, [r7, #16]
       break;
 80049b0:	e15f      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4bb4      	ldr	r3, [pc, #720]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x33c>)
 80049b4:	613b      	str	r3, [r7, #16]
      break;
 80049b6:	e15c      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4bb0      	ldr	r3, [pc, #704]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4bae      	ldr	r3, [pc, #696]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04a      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4bab      	ldr	r3, [pc, #684]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	f04f 0400 	mov.w	r4, #0
 80049d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	ea03 0501 	and.w	r5, r3, r1
 80049e4:	ea04 0602 	and.w	r6, r4, r2
 80049e8:	4629      	mov	r1, r5
 80049ea:	4632      	mov	r2, r6
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	f04f 0400 	mov.w	r4, #0
 80049f4:	0154      	lsls	r4, r2, #5
 80049f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049fa:	014b      	lsls	r3, r1, #5
 80049fc:	4619      	mov	r1, r3
 80049fe:	4622      	mov	r2, r4
 8004a00:	1b49      	subs	r1, r1, r5
 8004a02:	eb62 0206 	sbc.w	r2, r2, r6
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	f04f 0400 	mov.w	r4, #0
 8004a0e:	0194      	lsls	r4, r2, #6
 8004a10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a14:	018b      	lsls	r3, r1, #6
 8004a16:	1a5b      	subs	r3, r3, r1
 8004a18:	eb64 0402 	sbc.w	r4, r4, r2
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	00e2      	lsls	r2, r4, #3
 8004a26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a2a:	00d9      	lsls	r1, r3, #3
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4614      	mov	r4, r2
 8004a30:	195b      	adds	r3, r3, r5
 8004a32:	eb44 0406 	adc.w	r4, r4, r6
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	0262      	lsls	r2, r4, #9
 8004a40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a44:	0259      	lsls	r1, r3, #9
 8004a46:	460b      	mov	r3, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f04f 0400 	mov.w	r4, #0
 8004a54:	461a      	mov	r2, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	f7fb fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e049      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a64:	4b85      	ldr	r3, [pc, #532]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	f04f 0400 	mov.w	r4, #0
 8004a6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	ea03 0501 	and.w	r5, r3, r1
 8004a7a:	ea04 0602 	and.w	r6, r4, r2
 8004a7e:	4629      	mov	r1, r5
 8004a80:	4632      	mov	r2, r6
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	0154      	lsls	r4, r2, #5
 8004a8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a90:	014b      	lsls	r3, r1, #5
 8004a92:	4619      	mov	r1, r3
 8004a94:	4622      	mov	r2, r4
 8004a96:	1b49      	subs	r1, r1, r5
 8004a98:	eb62 0206 	sbc.w	r2, r2, r6
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	f04f 0400 	mov.w	r4, #0
 8004aa4:	0194      	lsls	r4, r2, #6
 8004aa6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004aaa:	018b      	lsls	r3, r1, #6
 8004aac:	1a5b      	subs	r3, r3, r1
 8004aae:	eb64 0402 	sbc.w	r4, r4, r2
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	00e2      	lsls	r2, r4, #3
 8004abc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ac0:	00d9      	lsls	r1, r3, #3
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	195b      	adds	r3, r3, r5
 8004ac8:	eb44 0406 	adc.w	r4, r4, r6
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	02a2      	lsls	r2, r4, #10
 8004ad6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ada:	0299      	lsls	r1, r3, #10
 8004adc:	460b      	mov	r3, r1
 8004ade:	4614      	mov	r4, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f04f 0400 	mov.w	r4, #0
 8004aea:	461a      	mov	r2, r3
 8004aec:	4623      	mov	r3, r4
 8004aee:	f7fb fbdf 	bl	80002b0 <__aeabi_uldivmod>
 8004af2:	4603      	mov	r3, r0
 8004af4:	460c      	mov	r4, r1
 8004af6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004af8:	4b60      	ldr	r3, [pc, #384]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	3301      	adds	r3, #1
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	613b      	str	r3, [r7, #16]
      break;
 8004b12:	e0ae      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1e:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d04a      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b54      	ldr	r3, [pc, #336]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	ea03 0501 	and.w	r5, r3, r1
 8004b40:	ea04 0602 	and.w	r6, r4, r2
 8004b44:	4629      	mov	r1, r5
 8004b46:	4632      	mov	r2, r6
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	0154      	lsls	r4, r2, #5
 8004b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b56:	014b      	lsls	r3, r1, #5
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	1b49      	subs	r1, r1, r5
 8004b5e:	eb62 0206 	sbc.w	r2, r2, r6
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	f04f 0400 	mov.w	r4, #0
 8004b6a:	0194      	lsls	r4, r2, #6
 8004b6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b70:	018b      	lsls	r3, r1, #6
 8004b72:	1a5b      	subs	r3, r3, r1
 8004b74:	eb64 0402 	sbc.w	r4, r4, r2
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	00e2      	lsls	r2, r4, #3
 8004b82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b86:	00d9      	lsls	r1, r3, #3
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	195b      	adds	r3, r3, r5
 8004b8e:	eb44 0406 	adc.w	r4, r4, r6
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	0262      	lsls	r2, r4, #9
 8004b9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ba0:	0259      	lsls	r1, r3, #9
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4621      	mov	r1, r4
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	f7fb fb7c 	bl	80002b0 <__aeabi_uldivmod>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e049      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc0:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	f04f 0400 	mov.w	r4, #0
 8004bca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	ea03 0501 	and.w	r5, r3, r1
 8004bd6:	ea04 0602 	and.w	r6, r4, r2
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4632      	mov	r2, r6
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	f04f 0400 	mov.w	r4, #0
 8004be6:	0154      	lsls	r4, r2, #5
 8004be8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bec:	014b      	lsls	r3, r1, #5
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	1b49      	subs	r1, r1, r5
 8004bf4:	eb62 0206 	sbc.w	r2, r2, r6
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	f04f 0400 	mov.w	r4, #0
 8004c00:	0194      	lsls	r4, r2, #6
 8004c02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c06:	018b      	lsls	r3, r1, #6
 8004c08:	1a5b      	subs	r3, r3, r1
 8004c0a:	eb64 0402 	sbc.w	r4, r4, r2
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	00e2      	lsls	r2, r4, #3
 8004c18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c1c:	00d9      	lsls	r1, r3, #3
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	195b      	adds	r3, r3, r5
 8004c24:	eb44 0406 	adc.w	r4, r4, r6
 8004c28:	f04f 0100 	mov.w	r1, #0
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	02a2      	lsls	r2, r4, #10
 8004c32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c36:	0299      	lsls	r1, r3, #10
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4614      	mov	r4, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	4621      	mov	r1, r4
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f04f 0400 	mov.w	r4, #0
 8004c46:	461a      	mov	r2, r3
 8004c48:	4623      	mov	r3, r4
 8004c4a:	f7fb fb31 	bl	80002b0 <__aeabi_uldivmod>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x334>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0f1b      	lsrs	r3, r3, #28
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	613b      	str	r3, [r7, #16]
      break;
 8004c6a:	e002      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x338>)
 8004c6e:	613b      	str	r3, [r7, #16]
      break;
 8004c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c72:	693b      	ldr	r3, [r7, #16]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	007a1200 	.word	0x007a1200

08004c88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8083 	beq.w	8004da8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ca2:	4b95      	ldr	r3, [pc, #596]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d019      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cae:	4b92      	ldr	r3, [pc, #584]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d106      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cba:	4b8f      	ldr	r3, [pc, #572]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc8:	4b8b      	ldr	r3, [pc, #556]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d112      	bne.n	8004cfa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd4:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce0:	d10b      	bne.n	8004cfa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce2:	4b85      	ldr	r3, [pc, #532]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d05b      	beq.n	8004da6 <HAL_RCC_OscConfig+0x11e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d157      	bne.n	8004da6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e216      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d106      	bne.n	8004d12 <HAL_RCC_OscConfig+0x8a>
 8004d04:	4b7c      	ldr	r3, [pc, #496]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a7b      	ldr	r2, [pc, #492]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e01d      	b.n	8004d4e <HAL_RCC_OscConfig+0xc6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d1a:	d10c      	bne.n	8004d36 <HAL_RCC_OscConfig+0xae>
 8004d1c:	4b76      	ldr	r3, [pc, #472]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a75      	ldr	r2, [pc, #468]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b73      	ldr	r3, [pc, #460]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a72      	ldr	r2, [pc, #456]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e00b      	b.n	8004d4e <HAL_RCC_OscConfig+0xc6>
 8004d36:	4b70      	ldr	r3, [pc, #448]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a6f      	ldr	r2, [pc, #444]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b6d      	ldr	r3, [pc, #436]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6c      	ldr	r2, [pc, #432]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe fd7d 	bl	8003854 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d5e:	f7fe fd79 	bl	8003854 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b64      	cmp	r3, #100	; 0x64
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e1db      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d70:	4b61      	ldr	r3, [pc, #388]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0xd6>
 8004d7c:	e014      	b.n	8004da8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fe fd69 	bl	8003854 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d86:	f7fe fd65 	bl	8003854 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b64      	cmp	r3, #100	; 0x64
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1c7      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d98:	4b57      	ldr	r3, [pc, #348]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0xfe>
 8004da4:	e000      	b.n	8004da8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d06f      	beq.n	8004e94 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004db4:	4b50      	ldr	r3, [pc, #320]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d017      	beq.n	8004df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dc0:	4b4d      	ldr	r3, [pc, #308]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dcc:	4b4a      	ldr	r3, [pc, #296]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd8:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d11c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de4:	4b44      	ldr	r3, [pc, #272]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d116      	bne.n	8004e1e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df0:	4b41      	ldr	r3, [pc, #260]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x180>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e18f      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4938      	ldr	r1, [pc, #224]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1c:	e03a      	b.n	8004e94 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e26:	4b35      	ldr	r3, [pc, #212]	; (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fe fd12 	bl	8003854 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fe fd0e 	bl	8003854 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e170      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4925      	ldr	r1, [pc, #148]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]
 8004e66:	e015      	b.n	8004e94 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e68:	4b24      	ldr	r3, [pc, #144]	; (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fe fcf1 	bl	8003854 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e76:	f7fe fced 	bl	8003854 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e14f      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e88:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d037      	beq.n	8004f10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d016      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <HAL_RCC_OscConfig+0x278>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fe fcd1 	bl	8003854 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fe fccd 	bl	8003854 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e12f      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x22e>
 8004ed4:	e01c      	b.n	8004f10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <HAL_RCC_OscConfig+0x278>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fe fcba 	bl	8003854 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee2:	e00f      	b.n	8004f04 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ee4:	f7fe fcb6 	bl	8003854 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d908      	bls.n	8004f04 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e118      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	42470000 	.word	0x42470000
 8004f00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f04:	4b8a      	ldr	r3, [pc, #552]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e9      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8097 	beq.w	800504c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f22:	4b83      	ldr	r3, [pc, #524]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	4b7f      	ldr	r3, [pc, #508]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	4a7e      	ldr	r2, [pc, #504]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3e:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	4b79      	ldr	r3, [pc, #484]	; (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d118      	bne.n	8004f8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f5a:	4b76      	ldr	r3, [pc, #472]	; (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a75      	ldr	r2, [pc, #468]	; (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f66:	f7fe fc75 	bl	8003854 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6e:	f7fe fc71 	bl	8003854 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0d3      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d106      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x31a>
 8004f94:	4b66      	ldr	r3, [pc, #408]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a65      	ldr	r2, [pc, #404]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa0:	e01c      	b.n	8004fdc <HAL_RCC_OscConfig+0x354>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x33c>
 8004faa:	4b61      	ldr	r3, [pc, #388]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	4a60      	ldr	r2, [pc, #384]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb6:	4b5e      	ldr	r3, [pc, #376]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a5d      	ldr	r2, [pc, #372]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0x354>
 8004fc4:	4b5a      	ldr	r3, [pc, #360]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	4a59      	ldr	r2, [pc, #356]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd0:	4b57      	ldr	r3, [pc, #348]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	4a56      	ldr	r2, [pc, #344]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8004fd6:	f023 0304 	bic.w	r3, r3, #4
 8004fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fe fc36 	bl	8003854 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fe fc32 	bl	8003854 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e092      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005002:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ee      	beq.n	8004fec <HAL_RCC_OscConfig+0x364>
 800500e:	e014      	b.n	800503a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fe fc20 	bl	8003854 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fe fc1c 	bl	8003854 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e07c      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502e:	4b40      	ldr	r3, [pc, #256]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ee      	bne.n	8005018 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005040:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	4a3a      	ldr	r2, [pc, #232]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d068      	beq.n	8005126 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005054:	4b36      	ldr	r3, [pc, #216]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b08      	cmp	r3, #8
 800505e:	d060      	beq.n	8005122 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d145      	bne.n	80050f4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005068:	4b33      	ldr	r3, [pc, #204]	; (8005138 <HAL_RCC_OscConfig+0x4b0>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fe fbf1 	bl	8003854 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005076:	f7fe fbed 	bl	8003854 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e04f      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005088:	4b29      	ldr	r3, [pc, #164]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	019b      	lsls	r3, r3, #6
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	3b01      	subs	r3, #1
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	071b      	lsls	r3, r3, #28
 80050c0:	491b      	ldr	r1, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c6:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <HAL_RCC_OscConfig+0x4b0>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fe fbc2 	bl	8003854 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fe fbbe 	bl	8003854 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e020      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x44c>
 80050f2:	e018      	b.n	8005126 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f4:	4b10      	ldr	r3, [pc, #64]	; (8005138 <HAL_RCC_OscConfig+0x4b0>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fe fbab 	bl	8003854 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005102:	f7fe fba7 	bl	8003854 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e009      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_RCC_OscConfig+0x4a8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x47a>
 8005120:	e001      	b.n	8005126 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	40007000 	.word	0x40007000
 8005138:	42470060 	.word	0x42470060

0800513c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e056      	b.n	80051fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fd f9df 	bl	800252c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005184:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	ea42 0103 	orr.w	r1, r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	f003 0104 	and.w	r1, r3, #4
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69da      	ldr	r2, [r3, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_SPI_Transmit+0x22>
 8005222:	2302      	movs	r3, #2
 8005224:	e11e      	b.n	8005464 <HAL_SPI_Transmit+0x260>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800522e:	f7fe fb11 	bl	8003854 <HAL_GetTick>
 8005232:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	d002      	beq.n	800524a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005244:	2302      	movs	r3, #2
 8005246:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005248:	e103      	b.n	8005452 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_SPI_Transmit+0x52>
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	77fb      	strb	r3, [r7, #31]
    goto error;
 800525a:	e0fa      	b.n	8005452 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2203      	movs	r2, #3
 8005260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	d107      	bne.n	80052b4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d007      	beq.n	80052d2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052da:	d14b      	bne.n	8005374 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_SPI_Transmit+0xe6>
 80052e4:	8afb      	ldrh	r3, [r7, #22]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d13e      	bne.n	8005368 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800530e:	e02b      	b.n	8005368 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d112      	bne.n	8005344 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	881a      	ldrh	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	1c9a      	adds	r2, r3, #2
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	86da      	strh	r2, [r3, #54]	; 0x36
 8005342:	e011      	b.n	8005368 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005344:	f7fe fa86 	bl	8003854 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d803      	bhi.n	800535c <HAL_SPI_Transmit+0x158>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535a:	d102      	bne.n	8005362 <HAL_SPI_Transmit+0x15e>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005366:	e074      	b.n	8005452 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ce      	bne.n	8005310 <HAL_SPI_Transmit+0x10c>
 8005372:	e04c      	b.n	800540e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_SPI_Transmit+0x17e>
 800537c:	8afb      	ldrh	r3, [r7, #22]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d140      	bne.n	8005404 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053a8:	e02c      	b.n	8005404 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d113      	bne.n	80053e0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	7812      	ldrb	r2, [r2, #0]
 80053c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80053de:	e011      	b.n	8005404 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e0:	f7fe fa38 	bl	8003854 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d803      	bhi.n	80053f8 <HAL_SPI_Transmit+0x1f4>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f6:	d102      	bne.n	80053fe <HAL_SPI_Transmit+0x1fa>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005402:	e026      	b.n	8005452 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1cd      	bne.n	80053aa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fa36 	bl	8005884 <SPI_EndRxTxTransaction>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e000      	b.n	8005452 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005450:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005462:	7ffb      	ldrb	r3, [r7, #31]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800547a:	2301      	movs	r3, #1
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_SPI_TransmitReceive+0x26>
 800548e:	2302      	movs	r3, #2
 8005490:	e18a      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x33c>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800549a:	f7fe f9db 	bl	8003854 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d00f      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x70>
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c2:	d107      	bne.n	80054d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <HAL_SPI_TransmitReceive+0x68>
 80054cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d003      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054da:	e15b      	b.n	8005794 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x82>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x82>
 80054e8:	887b      	ldrh	r3, [r7, #2]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054f4:	e14e      	b.n	8005794 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d003      	beq.n	800550a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2205      	movs	r2, #5
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	887a      	ldrh	r2, [r7, #2]
 800551a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	887a      	ldrh	r2, [r7, #2]
 8005520:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	887a      	ldrh	r2, [r7, #2]
 800552c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	887a      	ldrh	r2, [r7, #2]
 8005532:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d007      	beq.n	800555e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800555c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005566:	d178      	bne.n	800565a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x10a>
 8005570:	8b7b      	ldrh	r3, [r7, #26]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d166      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800559a:	e053      	b.n	8005644 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d11b      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x176>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d016      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x176>
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d113      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	881a      	ldrh	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	1c9a      	adds	r2, r3, #2
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d119      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x1b8>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d014      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	b292      	uxth	r2, r2
 8005606:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005620:	2301      	movs	r3, #1
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005624:	f7fe f916 	bl	8003854 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005630:	429a      	cmp	r2, r3
 8005632:	d807      	bhi.n	8005644 <HAL_SPI_TransmitReceive+0x1d8>
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800563a:	d003      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005642:	e0a7      	b.n	8005794 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1a6      	bne.n	800559c <HAL_SPI_TransmitReceive+0x130>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1a1      	bne.n	800559c <HAL_SPI_TransmitReceive+0x130>
 8005658:	e07c      	b.n	8005754 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_SPI_TransmitReceive+0x1fc>
 8005662:	8b7b      	ldrh	r3, [r7, #26]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d16b      	bne.n	8005740 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	7812      	ldrb	r2, [r2, #0]
 8005674:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800568e:	e057      	b.n	8005740 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b02      	cmp	r3, #2
 800569c:	d11c      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x26c>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d017      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x26c>
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d114      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d119      	bne.n	800571a <HAL_SPI_TransmitReceive+0x2ae>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d014      	beq.n	800571a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005716:	2301      	movs	r3, #1
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800571a:	f7fe f89b 	bl	8003854 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005726:	429a      	cmp	r2, r3
 8005728:	d803      	bhi.n	8005732 <HAL_SPI_TransmitReceive+0x2c6>
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005730:	d102      	bne.n	8005738 <HAL_SPI_TransmitReceive+0x2cc>
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d103      	bne.n	8005740 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800573e:	e029      	b.n	8005794 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1a2      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x224>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d19d      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f893 	bl	8005884 <SPI_EndRxTxTransaction>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d006      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005770:	e010      	b.n	8005794 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	e000      	b.n	8005794 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3730      	adds	r7, #48	; 0x30
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c0:	e04c      	b.n	800585c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c8:	d048      	beq.n	800585c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80057ca:	f7fe f843 	bl	8003854 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d902      	bls.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d13d      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f8:	d111      	bne.n	800581e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005802:	d004      	beq.n	800580e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d107      	bne.n	800581e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d10f      	bne.n	8005848 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005846:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e00f      	b.n	800587c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4013      	ands	r3, r2
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	429a      	cmp	r2, r3
 8005878:	d1a3      	bne.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <SPI_EndRxTxTransaction+0x7c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <SPI_EndRxTxTransaction+0x80>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	0d5b      	lsrs	r3, r3, #21
 800589c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ae:	d112      	bne.n	80058d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	2180      	movs	r1, #128	; 0x80
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff ff78 	bl	80057b0 <SPI_WaitFlagStateUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e00f      	b.n	80058f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3b01      	subs	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d0f2      	beq.n	80058d6 <SPI_EndRxTxTransaction+0x52>
 80058f0:	e000      	b.n	80058f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80058f2:	bf00      	nop
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000000 	.word	0x20000000
 8005904:	165e9f81 	.word	0x165e9f81

08005908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e01d      	b.n	8005956 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc feac 	bl	800268c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 f988 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b06      	cmp	r3, #6
 8005986:	d007      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_TIM_Base_Stop_IT+0x48>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f240 4344 	movw	r3, #1092	; 0x444
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_Base_Stop_IT+0x48>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d122      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d11b      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0202 	mvn.w	r2, #2
 8005a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8ee 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f8e0 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f8f1 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d122      	bne.n	8005aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0204 	mvn.w	r2, #4
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8c4 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f8b6 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8c7 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0208 	mvn.w	r2, #8
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f89a 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f88c 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f89d 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d122      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d11b      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0210 	mvn.w	r2, #16
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f870 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f862 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f873 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10e      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d107      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0201 	mvn.w	r2, #1
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc f9f0 	bl	8001f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d10e      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b80      	cmp	r3, #128	; 0x80
 8005b9a:	d107      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f97e 	bl	8005ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d107      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f838 	bl	8005c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d10e      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0220 	mvn.w	r2, #32
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f948 	bl	8005e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d00f      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3c      	ldr	r2, [pc, #240]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3b      	ldr	r2, [pc, #236]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a3a      	ldr	r2, [pc, #232]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d02b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d027      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d023      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d017      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <TIM_Base_SetConfig+0x128>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a27      	ldr	r2, [pc, #156]	; (8005d88 <TIM_Base_SetConfig+0x12c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <TIM_Base_SetConfig+0x130>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <TIM_Base_SetConfig+0x134>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <TIM_Base_SetConfig+0x138>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_Base_SetConfig+0x13c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d108      	bne.n	8005d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_Base_SetConfig+0xf8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d103      	bne.n	8005d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	615a      	str	r2, [r3, #20]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40001800 	.word	0x40001800
 8005d94:	40001c00 	.word	0x40001c00
 8005d98:	40002000 	.word	0x40002000

08005d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e05a      	b.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d022      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e00:	d01d      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1d      	ldr	r2, [pc, #116]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d018      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00e      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d004      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d10c      	bne.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40001800 	.word	0x40001800

08005e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e03f      	b.n	8005f4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fc fc36 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	; 0x24
 8005eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fc03 	bl	800670c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d166      	bne.n	8006040 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_UART_Receive_DMA+0x26>
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e05f      	b.n	8006042 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_UART_Receive_DMA+0x38>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e058      	b.n	8006042 <HAL_UART_Receive_DMA+0xea>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2222      	movs	r2, #34	; 0x22
 8005fae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	4a25      	ldr	r2, [pc, #148]	; (800604c <HAL_UART_Receive_DMA+0xf4>)
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	4a24      	ldr	r2, [pc, #144]	; (8006050 <HAL_UART_Receive_DMA+0xf8>)
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	4a23      	ldr	r2, [pc, #140]	; (8006054 <HAL_UART_Receive_DMA+0xfc>)
 8005fc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	2200      	movs	r2, #0
 8005fd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005fd2:	f107 0308 	add.w	r3, r7, #8
 8005fd6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	f7fd fe21 	bl	8003c30 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800601a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800603a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	08006385 	.word	0x08006385
 8006050:	080063ed 	.word	0x080063ed
 8006054:	08006409 	.word	0x08006409

08006058 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800606e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d124      	bne.n	80060d8 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800609c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	2200      	movs	r2, #0
 80060ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fd fe14 	bl	8003ce0 <HAL_DMA_Abort>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe f828 	bl	8004118 <HAL_DMA_GetError>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d104      	bne.n	80060d8 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2210      	movs	r2, #16
 80060d2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e03d      	b.n	8006154 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d124      	bne.n	8006130 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d018      	beq.n	8006130 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	2200      	movs	r2, #0
 8006104:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	4618      	mov	r0, r3
 800610c:	f7fd fde8 	bl	8003ce0 <HAL_DMA_Abort>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00c      	beq.n	8006130 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	4618      	mov	r0, r3
 800611c:	f7fd fffc 	bl	8004118 <HAL_DMA_GetError>
 8006120:	4603      	mov	r3, r0
 8006122:	2b20      	cmp	r3, #32
 8006124:	d104      	bne.n	8006130 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2210      	movs	r2, #16
 800612a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e011      	b.n	8006154 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10d      	bne.n	80061ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_UART_IRQHandler+0x52>
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa2e 	bl	8006608 <UART_Receive_IT>
      return;
 80061ac:	e0d1      	b.n	8006352 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80b0 	beq.w	8006316 <HAL_UART_IRQHandler+0x1ba>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_UART_IRQHandler+0x70>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80a5 	beq.w	8006316 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_UART_IRQHandler+0x90>
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_UART_IRQHandler+0xb0>
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	f043 0202 	orr.w	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_UART_IRQHandler+0xd0>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	f043 0204 	orr.w	r2, r3, #4
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <HAL_UART_IRQHandler+0xfa>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <HAL_UART_IRQHandler+0xee>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	f043 0208 	orr.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d078      	beq.n	8006350 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_UART_IRQHandler+0x11c>
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9c8 	bl	8006608 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <HAL_UART_IRQHandler+0x144>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d031      	beq.n	8006304 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f911 	bl	80064c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d123      	bne.n	80062fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695a      	ldr	r2, [r3, #20]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d013      	beq.n	80062f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	4a21      	ldr	r2, [pc, #132]	; (8006358 <HAL_UART_IRQHandler+0x1fc>)
 80062d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fd fd71 	bl	8003dc0 <HAL_DMA_Abort_IT>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d016      	beq.n	8006312 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062ee:	4610      	mov	r0, r2
 80062f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f2:	e00e      	b.n	8006312 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f83b 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fa:	e00a      	b.n	8006312 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f837 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006302:	e006      	b.n	8006312 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f833 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006310:	e01e      	b.n	8006350 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006312:	bf00      	nop
    return;
 8006314:	e01c      	b.n	8006350 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <HAL_UART_IRQHandler+0x1d6>
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f8fe 	bl	800652c <UART_Transmit_IT>
    return;
 8006330:	e00f      	b.n	8006352 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_UART_IRQHandler+0x1f6>
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f946 	bl	80065d8 <UART_EndTransmit_IT>
    return;
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006350:	bf00      	nop
  }
}
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	08006505 	.word	0x08006505

0800635c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11e      	bne.n	80063de <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695a      	ldr	r2, [r3, #20]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7fb fb96 	bl	8001b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff ffae 	bl	800635c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b21      	cmp	r3, #33	; 0x21
 800643a:	d108      	bne.n	800644e <UART_DMAError+0x46>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006448:	68b8      	ldr	r0, [r7, #8]
 800644a:	f000 f827 	bl	800649c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b22      	cmp	r3, #34	; 0x22
 800646e:	d108      	bne.n	8006482 <UART_DMAError+0x7a>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2200      	movs	r2, #0
 800647a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800647c:	68b8      	ldr	r0, [r7, #8]
 800647e:	f000 f823 	bl	80064c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	f043 0210 	orr.w	r2, r3, #16
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800648e:	68b8      	ldr	r0, [r7, #8]
 8006490:	f7ff ff6e 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064b2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7ff ff26 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006524:	bf00      	nop
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b21      	cmp	r3, #33	; 0x21
 800653e:	d144      	bne.n	80065ca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006548:	d11a      	bne.n	8006580 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800655e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	1c9a      	adds	r2, r3, #2
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]
 8006572:	e00e      	b.n	8006592 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]
 800657e:	e008      	b.n	8006592 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6211      	str	r1, [r2, #32]
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29b      	uxth	r3, r3
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4619      	mov	r1, r3
 80065a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10f      	bne.n	80065c6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	e000      	b.n	80065cc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80065ca:	2302      	movs	r3, #2
  }
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fb fca7 	bl	8001f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b22      	cmp	r3, #34	; 0x22
 800661a:	d171      	bne.n	8006700 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006624:	d123      	bne.n	800666e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10e      	bne.n	8006652 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	1c9a      	adds	r2, r3, #2
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	629a      	str	r2, [r3, #40]	; 0x28
 8006650:	e029      	b.n	80066a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	b29b      	uxth	r3, r3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
 800666c:	e01b      	b.n	80066a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6858      	ldr	r0, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	1c59      	adds	r1, r3, #1
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6291      	str	r1, [r2, #40]	; 0x28
 8006686:	b2c2      	uxtb	r2, r0
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	e00c      	b.n	80066a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	1c58      	adds	r0, r3, #1
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	6288      	str	r0, [r1, #40]	; 0x28
 800669e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4619      	mov	r1, r3
 80066b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d120      	bne.n	80066fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0220 	bic.w	r2, r2, #32
 80066c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fb fa0c 	bl	8001b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e002      	b.n	8006702 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800674e:	f023 030c 	bic.w	r3, r3, #12
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	430b      	orrs	r3, r1
 800675a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	f040 818b 	bne.w	8006a94 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4ac1      	ldr	r2, [pc, #772]	; (8006a88 <UART_SetConfig+0x37c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d005      	beq.n	8006794 <UART_SetConfig+0x88>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4abf      	ldr	r2, [pc, #764]	; (8006a8c <UART_SetConfig+0x380>)
 800678e:	4293      	cmp	r3, r2
 8006790:	f040 80bd 	bne.w	800690e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006794:	f7fe f8c4 	bl	8004920 <HAL_RCC_GetPCLK2Freq>
 8006798:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	461d      	mov	r5, r3
 800679e:	f04f 0600 	mov.w	r6, #0
 80067a2:	46a8      	mov	r8, r5
 80067a4:	46b1      	mov	r9, r6
 80067a6:	eb18 0308 	adds.w	r3, r8, r8
 80067aa:	eb49 0409 	adc.w	r4, r9, r9
 80067ae:	4698      	mov	r8, r3
 80067b0:	46a1      	mov	r9, r4
 80067b2:	eb18 0805 	adds.w	r8, r8, r5
 80067b6:	eb49 0906 	adc.w	r9, r9, r6
 80067ba:	f04f 0100 	mov.w	r1, #0
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067ce:	4688      	mov	r8, r1
 80067d0:	4691      	mov	r9, r2
 80067d2:	eb18 0005 	adds.w	r0, r8, r5
 80067d6:	eb49 0106 	adc.w	r1, r9, r6
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	461d      	mov	r5, r3
 80067e0:	f04f 0600 	mov.w	r6, #0
 80067e4:	196b      	adds	r3, r5, r5
 80067e6:	eb46 0406 	adc.w	r4, r6, r6
 80067ea:	461a      	mov	r2, r3
 80067ec:	4623      	mov	r3, r4
 80067ee:	f7f9 fd5f 	bl	80002b0 <__aeabi_uldivmod>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	461a      	mov	r2, r3
 80067f8:	4ba5      	ldr	r3, [pc, #660]	; (8006a90 <UART_SetConfig+0x384>)
 80067fa:	fba3 2302 	umull	r2, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	461d      	mov	r5, r3
 8006808:	f04f 0600 	mov.w	r6, #0
 800680c:	46a9      	mov	r9, r5
 800680e:	46b2      	mov	sl, r6
 8006810:	eb19 0309 	adds.w	r3, r9, r9
 8006814:	eb4a 040a 	adc.w	r4, sl, sl
 8006818:	4699      	mov	r9, r3
 800681a:	46a2      	mov	sl, r4
 800681c:	eb19 0905 	adds.w	r9, r9, r5
 8006820:	eb4a 0a06 	adc.w	sl, sl, r6
 8006824:	f04f 0100 	mov.w	r1, #0
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006830:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006834:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006838:	4689      	mov	r9, r1
 800683a:	4692      	mov	sl, r2
 800683c:	eb19 0005 	adds.w	r0, r9, r5
 8006840:	eb4a 0106 	adc.w	r1, sl, r6
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	461d      	mov	r5, r3
 800684a:	f04f 0600 	mov.w	r6, #0
 800684e:	196b      	adds	r3, r5, r5
 8006850:	eb46 0406 	adc.w	r4, r6, r6
 8006854:	461a      	mov	r2, r3
 8006856:	4623      	mov	r3, r4
 8006858:	f7f9 fd2a 	bl	80002b0 <__aeabi_uldivmod>
 800685c:	4603      	mov	r3, r0
 800685e:	460c      	mov	r4, r1
 8006860:	461a      	mov	r2, r3
 8006862:	4b8b      	ldr	r3, [pc, #556]	; (8006a90 <UART_SetConfig+0x384>)
 8006864:	fba3 1302 	umull	r1, r3, r3, r2
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	2164      	movs	r1, #100	; 0x64
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	3332      	adds	r3, #50	; 0x32
 8006876:	4a86      	ldr	r2, [pc, #536]	; (8006a90 <UART_SetConfig+0x384>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006884:	4498      	add	r8, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	461d      	mov	r5, r3
 800688a:	f04f 0600 	mov.w	r6, #0
 800688e:	46a9      	mov	r9, r5
 8006890:	46b2      	mov	sl, r6
 8006892:	eb19 0309 	adds.w	r3, r9, r9
 8006896:	eb4a 040a 	adc.w	r4, sl, sl
 800689a:	4699      	mov	r9, r3
 800689c:	46a2      	mov	sl, r4
 800689e:	eb19 0905 	adds.w	r9, r9, r5
 80068a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80068a6:	f04f 0100 	mov.w	r1, #0
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ba:	4689      	mov	r9, r1
 80068bc:	4692      	mov	sl, r2
 80068be:	eb19 0005 	adds.w	r0, r9, r5
 80068c2:	eb4a 0106 	adc.w	r1, sl, r6
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	461d      	mov	r5, r3
 80068cc:	f04f 0600 	mov.w	r6, #0
 80068d0:	196b      	adds	r3, r5, r5
 80068d2:	eb46 0406 	adc.w	r4, r6, r6
 80068d6:	461a      	mov	r2, r3
 80068d8:	4623      	mov	r3, r4
 80068da:	f7f9 fce9 	bl	80002b0 <__aeabi_uldivmod>
 80068de:	4603      	mov	r3, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b6a      	ldr	r3, [pc, #424]	; (8006a90 <UART_SetConfig+0x384>)
 80068e6:	fba3 1302 	umull	r1, r3, r3, r2
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	2164      	movs	r1, #100	; 0x64
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	3332      	adds	r3, #50	; 0x32
 80068f8:	4a65      	ldr	r2, [pc, #404]	; (8006a90 <UART_SetConfig+0x384>)
 80068fa:	fba2 2303 	umull	r2, r3, r2, r3
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	f003 0207 	and.w	r2, r3, #7
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4442      	add	r2, r8
 800690a:	609a      	str	r2, [r3, #8]
 800690c:	e26f      	b.n	8006dee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800690e:	f7fd fff3 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8006912:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	461d      	mov	r5, r3
 8006918:	f04f 0600 	mov.w	r6, #0
 800691c:	46a8      	mov	r8, r5
 800691e:	46b1      	mov	r9, r6
 8006920:	eb18 0308 	adds.w	r3, r8, r8
 8006924:	eb49 0409 	adc.w	r4, r9, r9
 8006928:	4698      	mov	r8, r3
 800692a:	46a1      	mov	r9, r4
 800692c:	eb18 0805 	adds.w	r8, r8, r5
 8006930:	eb49 0906 	adc.w	r9, r9, r6
 8006934:	f04f 0100 	mov.w	r1, #0
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006940:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006944:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006948:	4688      	mov	r8, r1
 800694a:	4691      	mov	r9, r2
 800694c:	eb18 0005 	adds.w	r0, r8, r5
 8006950:	eb49 0106 	adc.w	r1, r9, r6
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	461d      	mov	r5, r3
 800695a:	f04f 0600 	mov.w	r6, #0
 800695e:	196b      	adds	r3, r5, r5
 8006960:	eb46 0406 	adc.w	r4, r6, r6
 8006964:	461a      	mov	r2, r3
 8006966:	4623      	mov	r3, r4
 8006968:	f7f9 fca2 	bl	80002b0 <__aeabi_uldivmod>
 800696c:	4603      	mov	r3, r0
 800696e:	460c      	mov	r4, r1
 8006970:	461a      	mov	r2, r3
 8006972:	4b47      	ldr	r3, [pc, #284]	; (8006a90 <UART_SetConfig+0x384>)
 8006974:	fba3 2302 	umull	r2, r3, r3, r2
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	461d      	mov	r5, r3
 8006982:	f04f 0600 	mov.w	r6, #0
 8006986:	46a9      	mov	r9, r5
 8006988:	46b2      	mov	sl, r6
 800698a:	eb19 0309 	adds.w	r3, r9, r9
 800698e:	eb4a 040a 	adc.w	r4, sl, sl
 8006992:	4699      	mov	r9, r3
 8006994:	46a2      	mov	sl, r4
 8006996:	eb19 0905 	adds.w	r9, r9, r5
 800699a:	eb4a 0a06 	adc.w	sl, sl, r6
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069b2:	4689      	mov	r9, r1
 80069b4:	4692      	mov	sl, r2
 80069b6:	eb19 0005 	adds.w	r0, r9, r5
 80069ba:	eb4a 0106 	adc.w	r1, sl, r6
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	461d      	mov	r5, r3
 80069c4:	f04f 0600 	mov.w	r6, #0
 80069c8:	196b      	adds	r3, r5, r5
 80069ca:	eb46 0406 	adc.w	r4, r6, r6
 80069ce:	461a      	mov	r2, r3
 80069d0:	4623      	mov	r3, r4
 80069d2:	f7f9 fc6d 	bl	80002b0 <__aeabi_uldivmod>
 80069d6:	4603      	mov	r3, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	461a      	mov	r2, r3
 80069dc:	4b2c      	ldr	r3, [pc, #176]	; (8006a90 <UART_SetConfig+0x384>)
 80069de:	fba3 1302 	umull	r1, r3, r3, r2
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	2164      	movs	r1, #100	; 0x64
 80069e6:	fb01 f303 	mul.w	r3, r1, r3
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	3332      	adds	r3, #50	; 0x32
 80069f0:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <UART_SetConfig+0x384>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069fe:	4498      	add	r8, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	461d      	mov	r5, r3
 8006a04:	f04f 0600 	mov.w	r6, #0
 8006a08:	46a9      	mov	r9, r5
 8006a0a:	46b2      	mov	sl, r6
 8006a0c:	eb19 0309 	adds.w	r3, r9, r9
 8006a10:	eb4a 040a 	adc.w	r4, sl, sl
 8006a14:	4699      	mov	r9, r3
 8006a16:	46a2      	mov	sl, r4
 8006a18:	eb19 0905 	adds.w	r9, r9, r5
 8006a1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a20:	f04f 0100 	mov.w	r1, #0
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a34:	4689      	mov	r9, r1
 8006a36:	4692      	mov	sl, r2
 8006a38:	eb19 0005 	adds.w	r0, r9, r5
 8006a3c:	eb4a 0106 	adc.w	r1, sl, r6
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	461d      	mov	r5, r3
 8006a46:	f04f 0600 	mov.w	r6, #0
 8006a4a:	196b      	adds	r3, r5, r5
 8006a4c:	eb46 0406 	adc.w	r4, r6, r6
 8006a50:	461a      	mov	r2, r3
 8006a52:	4623      	mov	r3, r4
 8006a54:	f7f9 fc2c 	bl	80002b0 <__aeabi_uldivmod>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <UART_SetConfig+0x384>)
 8006a60:	fba3 1302 	umull	r1, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2164      	movs	r1, #100	; 0x64
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	3332      	adds	r3, #50	; 0x32
 8006a72:	4a07      	ldr	r2, [pc, #28]	; (8006a90 <UART_SetConfig+0x384>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 0207 	and.w	r2, r3, #7
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4442      	add	r2, r8
 8006a84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006a86:	e1b2      	b.n	8006dee <UART_SetConfig+0x6e2>
 8006a88:	40011000 	.word	0x40011000
 8006a8c:	40011400 	.word	0x40011400
 8006a90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4ad7      	ldr	r2, [pc, #860]	; (8006df8 <UART_SetConfig+0x6ec>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d005      	beq.n	8006aaa <UART_SetConfig+0x39e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4ad6      	ldr	r2, [pc, #856]	; (8006dfc <UART_SetConfig+0x6f0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	f040 80d1 	bne.w	8006c4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aaa:	f7fd ff39 	bl	8004920 <HAL_RCC_GetPCLK2Freq>
 8006aae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	469a      	mov	sl, r3
 8006ab4:	f04f 0b00 	mov.w	fp, #0
 8006ab8:	46d0      	mov	r8, sl
 8006aba:	46d9      	mov	r9, fp
 8006abc:	eb18 0308 	adds.w	r3, r8, r8
 8006ac0:	eb49 0409 	adc.w	r4, r9, r9
 8006ac4:	4698      	mov	r8, r3
 8006ac6:	46a1      	mov	r9, r4
 8006ac8:	eb18 080a 	adds.w	r8, r8, sl
 8006acc:	eb49 090b 	adc.w	r9, r9, fp
 8006ad0:	f04f 0100 	mov.w	r1, #0
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006adc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ae0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ae4:	4688      	mov	r8, r1
 8006ae6:	4691      	mov	r9, r2
 8006ae8:	eb1a 0508 	adds.w	r5, sl, r8
 8006aec:	eb4b 0609 	adc.w	r6, fp, r9
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4619      	mov	r1, r3
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	f04f 0400 	mov.w	r4, #0
 8006b02:	0094      	lsls	r4, r2, #2
 8006b04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b08:	008b      	lsls	r3, r1, #2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	4631      	mov	r1, r6
 8006b12:	f7f9 fbcd 	bl	80002b0 <__aeabi_uldivmod>
 8006b16:	4603      	mov	r3, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4bb8      	ldr	r3, [pc, #736]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	469b      	mov	fp, r3
 8006b2c:	f04f 0c00 	mov.w	ip, #0
 8006b30:	46d9      	mov	r9, fp
 8006b32:	46e2      	mov	sl, ip
 8006b34:	eb19 0309 	adds.w	r3, r9, r9
 8006b38:	eb4a 040a 	adc.w	r4, sl, sl
 8006b3c:	4699      	mov	r9, r3
 8006b3e:	46a2      	mov	sl, r4
 8006b40:	eb19 090b 	adds.w	r9, r9, fp
 8006b44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b48:	f04f 0100 	mov.w	r1, #0
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b5c:	4689      	mov	r9, r1
 8006b5e:	4692      	mov	sl, r2
 8006b60:	eb1b 0509 	adds.w	r5, fp, r9
 8006b64:	eb4c 060a 	adc.w	r6, ip, sl
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	f04f 0400 	mov.w	r4, #0
 8006b7a:	0094      	lsls	r4, r2, #2
 8006b7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b80:	008b      	lsls	r3, r1, #2
 8006b82:	461a      	mov	r2, r3
 8006b84:	4623      	mov	r3, r4
 8006b86:	4628      	mov	r0, r5
 8006b88:	4631      	mov	r1, r6
 8006b8a:	f7f9 fb91 	bl	80002b0 <__aeabi_uldivmod>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	461a      	mov	r2, r3
 8006b94:	4b9a      	ldr	r3, [pc, #616]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006b96:	fba3 1302 	umull	r1, r3, r3, r2
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	2164      	movs	r1, #100	; 0x64
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	3332      	adds	r3, #50	; 0x32
 8006ba8:	4a95      	ldr	r2, [pc, #596]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006baa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bb4:	4498      	add	r8, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	469b      	mov	fp, r3
 8006bba:	f04f 0c00 	mov.w	ip, #0
 8006bbe:	46d9      	mov	r9, fp
 8006bc0:	46e2      	mov	sl, ip
 8006bc2:	eb19 0309 	adds.w	r3, r9, r9
 8006bc6:	eb4a 040a 	adc.w	r4, sl, sl
 8006bca:	4699      	mov	r9, r3
 8006bcc:	46a2      	mov	sl, r4
 8006bce:	eb19 090b 	adds.w	r9, r9, fp
 8006bd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bd6:	f04f 0100 	mov.w	r1, #0
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006be2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006be6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bea:	4689      	mov	r9, r1
 8006bec:	4692      	mov	sl, r2
 8006bee:	eb1b 0509 	adds.w	r5, fp, r9
 8006bf2:	eb4c 060a 	adc.w	r6, ip, sl
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	f04f 0400 	mov.w	r4, #0
 8006c08:	0094      	lsls	r4, r2, #2
 8006c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	4631      	mov	r1, r6
 8006c18:	f7f9 fb4a 	bl	80002b0 <__aeabi_uldivmod>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b77      	ldr	r3, [pc, #476]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006c24:	fba3 1302 	umull	r1, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	3332      	adds	r3, #50	; 0x32
 8006c36:	4a72      	ldr	r2, [pc, #456]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f003 020f 	and.w	r2, r3, #15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4442      	add	r2, r8
 8006c48:	609a      	str	r2, [r3, #8]
 8006c4a:	e0d0      	b.n	8006dee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fd fe54 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8006c50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	469a      	mov	sl, r3
 8006c56:	f04f 0b00 	mov.w	fp, #0
 8006c5a:	46d0      	mov	r8, sl
 8006c5c:	46d9      	mov	r9, fp
 8006c5e:	eb18 0308 	adds.w	r3, r8, r8
 8006c62:	eb49 0409 	adc.w	r4, r9, r9
 8006c66:	4698      	mov	r8, r3
 8006c68:	46a1      	mov	r9, r4
 8006c6a:	eb18 080a 	adds.w	r8, r8, sl
 8006c6e:	eb49 090b 	adc.w	r9, r9, fp
 8006c72:	f04f 0100 	mov.w	r1, #0
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c86:	4688      	mov	r8, r1
 8006c88:	4691      	mov	r9, r2
 8006c8a:	eb1a 0508 	adds.w	r5, sl, r8
 8006c8e:	eb4b 0609 	adc.w	r6, fp, r9
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4619      	mov	r1, r3
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	f04f 0400 	mov.w	r4, #0
 8006ca4:	0094      	lsls	r4, r2, #2
 8006ca6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006caa:	008b      	lsls	r3, r1, #2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4623      	mov	r3, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	f7f9 fafc 	bl	80002b0 <__aeabi_uldivmod>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b50      	ldr	r3, [pc, #320]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	469b      	mov	fp, r3
 8006cce:	f04f 0c00 	mov.w	ip, #0
 8006cd2:	46d9      	mov	r9, fp
 8006cd4:	46e2      	mov	sl, ip
 8006cd6:	eb19 0309 	adds.w	r3, r9, r9
 8006cda:	eb4a 040a 	adc.w	r4, sl, sl
 8006cde:	4699      	mov	r9, r3
 8006ce0:	46a2      	mov	sl, r4
 8006ce2:	eb19 090b 	adds.w	r9, r9, fp
 8006ce6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cfe:	4689      	mov	r9, r1
 8006d00:	4692      	mov	sl, r2
 8006d02:	eb1b 0509 	adds.w	r5, fp, r9
 8006d06:	eb4c 060a 	adc.w	r6, ip, sl
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	f04f 0400 	mov.w	r4, #0
 8006d1c:	0094      	lsls	r4, r2, #2
 8006d1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d22:	008b      	lsls	r3, r1, #2
 8006d24:	461a      	mov	r2, r3
 8006d26:	4623      	mov	r3, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	f7f9 fac0 	bl	80002b0 <__aeabi_uldivmod>
 8006d30:	4603      	mov	r3, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006d38:	fba3 1302 	umull	r1, r3, r3, r2
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	2164      	movs	r1, #100	; 0x64
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	3332      	adds	r3, #50	; 0x32
 8006d4a:	4a2d      	ldr	r2, [pc, #180]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d56:	4498      	add	r8, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	469b      	mov	fp, r3
 8006d5c:	f04f 0c00 	mov.w	ip, #0
 8006d60:	46d9      	mov	r9, fp
 8006d62:	46e2      	mov	sl, ip
 8006d64:	eb19 0309 	adds.w	r3, r9, r9
 8006d68:	eb4a 040a 	adc.w	r4, sl, sl
 8006d6c:	4699      	mov	r9, r3
 8006d6e:	46a2      	mov	sl, r4
 8006d70:	eb19 090b 	adds.w	r9, r9, fp
 8006d74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d78:	f04f 0100 	mov.w	r1, #0
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d8c:	4689      	mov	r9, r1
 8006d8e:	4692      	mov	sl, r2
 8006d90:	eb1b 0509 	adds.w	r5, fp, r9
 8006d94:	eb4c 060a 	adc.w	r6, ip, sl
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	f04f 0400 	mov.w	r4, #0
 8006daa:	0094      	lsls	r4, r2, #2
 8006dac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006db0:	008b      	lsls	r3, r1, #2
 8006db2:	461a      	mov	r2, r3
 8006db4:	4623      	mov	r3, r4
 8006db6:	4628      	mov	r0, r5
 8006db8:	4631      	mov	r1, r6
 8006dba:	f7f9 fa79 	bl	80002b0 <__aeabi_uldivmod>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	2164      	movs	r1, #100	; 0x64
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	3332      	adds	r3, #50	; 0x32
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <UART_SetConfig+0x6f4>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	f003 020f 	and.w	r2, r3, #15
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4442      	add	r2, r8
 8006dea:	609a      	str	r2, [r3, #8]
}
 8006dec:	e7ff      	b.n	8006dee <UART_SetConfig+0x6e2>
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df8:	40011000 	.word	0x40011000
 8006dfc:	40011400 	.word	0x40011400
 8006e00:	51eb851f 	.word	0x51eb851f

08006e04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e08:	4904      	ldr	r1, [pc, #16]	; (8006e1c <MX_FATFS_Init+0x18>)
 8006e0a:	4805      	ldr	r0, [pc, #20]	; (8006e20 <MX_FATFS_Init+0x1c>)
 8006e0c:	f000 f8ae 	bl	8006f6c <FATFS_LinkDriver>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <MX_FATFS_Init+0x20>)
 8006e16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006e18:	bf00      	nop
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20001070 	.word	0x20001070
 8006e20:	20000010 	.word	0x20000010
 8006e24:	20001074 	.word	0x20001074

08006e28 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fc f935 	bl	80030a4 <USER_SPI_initialize>
 8006e3a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fc fa07 	bl	8003264 <USER_SPI_status>
 8006e56:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006e70:	7bf8      	ldrb	r0, [r7, #15]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	f7fc fa0a 	bl	8003290 <USER_SPI_read>
 8006e7c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006e96:	7bf8      	ldrb	r0, [r7, #15]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	f7fc fa5d 	bl	800335c <USER_SPI_write>
 8006ea2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	603a      	str	r2, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006ebc:	79b9      	ldrb	r1, [r7, #6]
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fc fac6 	bl	8003454 <USER_SPI_ioctl>
 8006ec8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006eea:	4b1f      	ldr	r3, [pc, #124]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006eec:	7a5b      	ldrb	r3, [r3, #9]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d131      	bne.n	8006f58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006ef4:	4b1c      	ldr	r3, [pc, #112]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006ef6:	7a5b      	ldrb	r3, [r3, #9]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006efe:	2100      	movs	r1, #0
 8006f00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f02:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006f04:	7a5b      	ldrb	r3, [r3, #9]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006f14:	7a5b      	ldrb	r3, [r3, #9]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006f1c:	4413      	add	r3, r2
 8006f1e:	79fa      	ldrb	r2, [r7, #7]
 8006f20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f22:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006f24:	7a5b      	ldrb	r3, [r3, #9]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	b2d1      	uxtb	r1, r2
 8006f2c:	4a0e      	ldr	r2, [pc, #56]	; (8006f68 <FATFS_LinkDriverEx+0x94>)
 8006f2e:	7251      	strb	r1, [r2, #9]
 8006f30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f32:	7dbb      	ldrb	r3, [r7, #22]
 8006f34:	3330      	adds	r3, #48	; 0x30
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	223a      	movs	r2, #58	; 0x3a
 8006f42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	3302      	adds	r3, #2
 8006f48:	222f      	movs	r2, #47	; 0x2f
 8006f4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	3303      	adds	r3, #3
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000100 	.word	0x20000100

08006f6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f76:	2200      	movs	r2, #0
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff ffaa 	bl	8006ed4 <FATFS_LinkDriverEx>
 8006f80:	4603      	mov	r3, r0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <__errno>:
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <__errno+0x8>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000024 	.word	0x20000024

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	4e0d      	ldr	r6, [pc, #52]	; (8006fd0 <__libc_init_array+0x38>)
 8006f9c:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <__libc_init_array+0x3c>)
 8006f9e:	1ba4      	subs	r4, r4, r6
 8006fa0:	10a4      	asrs	r4, r4, #2
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	42a5      	cmp	r5, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	4e0b      	ldr	r6, [pc, #44]	; (8006fd8 <__libc_init_array+0x40>)
 8006faa:	4c0c      	ldr	r4, [pc, #48]	; (8006fdc <__libc_init_array+0x44>)
 8006fac:	f000 fc26 	bl	80077fc <_init>
 8006fb0:	1ba4      	subs	r4, r4, r6
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	42a5      	cmp	r5, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fc0:	4798      	blx	r3
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fca:	4798      	blx	r3
 8006fcc:	3501      	adds	r5, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	080078d4 	.word	0x080078d4
 8006fd4:	080078d4 	.word	0x080078d4
 8006fd8:	080078d4 	.word	0x080078d4
 8006fdc:	080078d8 	.word	0x080078d8

08006fe0 <memset>:
 8006fe0:	4402      	add	r2, r0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d100      	bne.n	8006fea <memset+0xa>
 8006fe8:	4770      	bx	lr
 8006fea:	f803 1b01 	strb.w	r1, [r3], #1
 8006fee:	e7f9      	b.n	8006fe4 <memset+0x4>

08006ff0 <siprintf>:
 8006ff0:	b40e      	push	{r1, r2, r3}
 8006ff2:	b500      	push	{lr}
 8006ff4:	b09c      	sub	sp, #112	; 0x70
 8006ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ff8:	9002      	str	r0, [sp, #8]
 8006ffa:	9006      	str	r0, [sp, #24]
 8006ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007000:	4809      	ldr	r0, [pc, #36]	; (8007028 <siprintf+0x38>)
 8007002:	9107      	str	r1, [sp, #28]
 8007004:	9104      	str	r1, [sp, #16]
 8007006:	4909      	ldr	r1, [pc, #36]	; (800702c <siprintf+0x3c>)
 8007008:	f853 2b04 	ldr.w	r2, [r3], #4
 800700c:	9105      	str	r1, [sp, #20]
 800700e:	6800      	ldr	r0, [r0, #0]
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	a902      	add	r1, sp, #8
 8007014:	f000 f866 	bl	80070e4 <_svfiprintf_r>
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	b01c      	add	sp, #112	; 0x70
 8007020:	f85d eb04 	ldr.w	lr, [sp], #4
 8007024:	b003      	add	sp, #12
 8007026:	4770      	bx	lr
 8007028:	20000024 	.word	0x20000024
 800702c:	ffff0208 	.word	0xffff0208

08007030 <__ssputs_r>:
 8007030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	688e      	ldr	r6, [r1, #8]
 8007036:	429e      	cmp	r6, r3
 8007038:	4682      	mov	sl, r0
 800703a:	460c      	mov	r4, r1
 800703c:	4690      	mov	r8, r2
 800703e:	4699      	mov	r9, r3
 8007040:	d837      	bhi.n	80070b2 <__ssputs_r+0x82>
 8007042:	898a      	ldrh	r2, [r1, #12]
 8007044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007048:	d031      	beq.n	80070ae <__ssputs_r+0x7e>
 800704a:	6825      	ldr	r5, [r4, #0]
 800704c:	6909      	ldr	r1, [r1, #16]
 800704e:	1a6f      	subs	r7, r5, r1
 8007050:	6965      	ldr	r5, [r4, #20]
 8007052:	2302      	movs	r3, #2
 8007054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007058:	fb95 f5f3 	sdiv	r5, r5, r3
 800705c:	f109 0301 	add.w	r3, r9, #1
 8007060:	443b      	add	r3, r7
 8007062:	429d      	cmp	r5, r3
 8007064:	bf38      	it	cc
 8007066:	461d      	movcc	r5, r3
 8007068:	0553      	lsls	r3, r2, #21
 800706a:	d530      	bpl.n	80070ce <__ssputs_r+0x9e>
 800706c:	4629      	mov	r1, r5
 800706e:	f000 fb2b 	bl	80076c8 <_malloc_r>
 8007072:	4606      	mov	r6, r0
 8007074:	b950      	cbnz	r0, 800708c <__ssputs_r+0x5c>
 8007076:	230c      	movs	r3, #12
 8007078:	f8ca 3000 	str.w	r3, [sl]
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	463a      	mov	r2, r7
 800708e:	6921      	ldr	r1, [r4, #16]
 8007090:	f000 faa8 	bl	80075e4 <memcpy>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800709a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	6126      	str	r6, [r4, #16]
 80070a2:	6165      	str	r5, [r4, #20]
 80070a4:	443e      	add	r6, r7
 80070a6:	1bed      	subs	r5, r5, r7
 80070a8:	6026      	str	r6, [r4, #0]
 80070aa:	60a5      	str	r5, [r4, #8]
 80070ac:	464e      	mov	r6, r9
 80070ae:	454e      	cmp	r6, r9
 80070b0:	d900      	bls.n	80070b4 <__ssputs_r+0x84>
 80070b2:	464e      	mov	r6, r9
 80070b4:	4632      	mov	r2, r6
 80070b6:	4641      	mov	r1, r8
 80070b8:	6820      	ldr	r0, [r4, #0]
 80070ba:	f000 fa9e 	bl	80075fa <memmove>
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	1b9b      	subs	r3, r3, r6
 80070c2:	60a3      	str	r3, [r4, #8]
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	441e      	add	r6, r3
 80070c8:	6026      	str	r6, [r4, #0]
 80070ca:	2000      	movs	r0, #0
 80070cc:	e7dc      	b.n	8007088 <__ssputs_r+0x58>
 80070ce:	462a      	mov	r2, r5
 80070d0:	f000 fb54 	bl	800777c <_realloc_r>
 80070d4:	4606      	mov	r6, r0
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d1e2      	bne.n	80070a0 <__ssputs_r+0x70>
 80070da:	6921      	ldr	r1, [r4, #16]
 80070dc:	4650      	mov	r0, sl
 80070de:	f000 faa5 	bl	800762c <_free_r>
 80070e2:	e7c8      	b.n	8007076 <__ssputs_r+0x46>

080070e4 <_svfiprintf_r>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	461d      	mov	r5, r3
 80070ea:	898b      	ldrh	r3, [r1, #12]
 80070ec:	061f      	lsls	r7, r3, #24
 80070ee:	b09d      	sub	sp, #116	; 0x74
 80070f0:	4680      	mov	r8, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4616      	mov	r6, r2
 80070f6:	d50f      	bpl.n	8007118 <_svfiprintf_r+0x34>
 80070f8:	690b      	ldr	r3, [r1, #16]
 80070fa:	b96b      	cbnz	r3, 8007118 <_svfiprintf_r+0x34>
 80070fc:	2140      	movs	r1, #64	; 0x40
 80070fe:	f000 fae3 	bl	80076c8 <_malloc_r>
 8007102:	6020      	str	r0, [r4, #0]
 8007104:	6120      	str	r0, [r4, #16]
 8007106:	b928      	cbnz	r0, 8007114 <_svfiprintf_r+0x30>
 8007108:	230c      	movs	r3, #12
 800710a:	f8c8 3000 	str.w	r3, [r8]
 800710e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007112:	e0c8      	b.n	80072a6 <_svfiprintf_r+0x1c2>
 8007114:	2340      	movs	r3, #64	; 0x40
 8007116:	6163      	str	r3, [r4, #20]
 8007118:	2300      	movs	r3, #0
 800711a:	9309      	str	r3, [sp, #36]	; 0x24
 800711c:	2320      	movs	r3, #32
 800711e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007122:	2330      	movs	r3, #48	; 0x30
 8007124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007128:	9503      	str	r5, [sp, #12]
 800712a:	f04f 0b01 	mov.w	fp, #1
 800712e:	4637      	mov	r7, r6
 8007130:	463d      	mov	r5, r7
 8007132:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007136:	b10b      	cbz	r3, 800713c <_svfiprintf_r+0x58>
 8007138:	2b25      	cmp	r3, #37	; 0x25
 800713a:	d13e      	bne.n	80071ba <_svfiprintf_r+0xd6>
 800713c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007140:	d00b      	beq.n	800715a <_svfiprintf_r+0x76>
 8007142:	4653      	mov	r3, sl
 8007144:	4632      	mov	r2, r6
 8007146:	4621      	mov	r1, r4
 8007148:	4640      	mov	r0, r8
 800714a:	f7ff ff71 	bl	8007030 <__ssputs_r>
 800714e:	3001      	adds	r0, #1
 8007150:	f000 80a4 	beq.w	800729c <_svfiprintf_r+0x1b8>
 8007154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007156:	4453      	add	r3, sl
 8007158:	9309      	str	r3, [sp, #36]	; 0x24
 800715a:	783b      	ldrb	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 809d 	beq.w	800729c <_svfiprintf_r+0x1b8>
 8007162:	2300      	movs	r3, #0
 8007164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007174:	931a      	str	r3, [sp, #104]	; 0x68
 8007176:	462f      	mov	r7, r5
 8007178:	2205      	movs	r2, #5
 800717a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800717e:	4850      	ldr	r0, [pc, #320]	; (80072c0 <_svfiprintf_r+0x1dc>)
 8007180:	f7f9 f846 	bl	8000210 <memchr>
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	b9d0      	cbnz	r0, 80071be <_svfiprintf_r+0xda>
 8007188:	06d9      	lsls	r1, r3, #27
 800718a:	bf44      	itt	mi
 800718c:	2220      	movmi	r2, #32
 800718e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007192:	071a      	lsls	r2, r3, #28
 8007194:	bf44      	itt	mi
 8007196:	222b      	movmi	r2, #43	; 0x2b
 8007198:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800719c:	782a      	ldrb	r2, [r5, #0]
 800719e:	2a2a      	cmp	r2, #42	; 0x2a
 80071a0:	d015      	beq.n	80071ce <_svfiprintf_r+0xea>
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	462f      	mov	r7, r5
 80071a6:	2000      	movs	r0, #0
 80071a8:	250a      	movs	r5, #10
 80071aa:	4639      	mov	r1, r7
 80071ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b0:	3b30      	subs	r3, #48	; 0x30
 80071b2:	2b09      	cmp	r3, #9
 80071b4:	d94d      	bls.n	8007252 <_svfiprintf_r+0x16e>
 80071b6:	b1b8      	cbz	r0, 80071e8 <_svfiprintf_r+0x104>
 80071b8:	e00f      	b.n	80071da <_svfiprintf_r+0xf6>
 80071ba:	462f      	mov	r7, r5
 80071bc:	e7b8      	b.n	8007130 <_svfiprintf_r+0x4c>
 80071be:	4a40      	ldr	r2, [pc, #256]	; (80072c0 <_svfiprintf_r+0x1dc>)
 80071c0:	1a80      	subs	r0, r0, r2
 80071c2:	fa0b f000 	lsl.w	r0, fp, r0
 80071c6:	4318      	orrs	r0, r3
 80071c8:	9004      	str	r0, [sp, #16]
 80071ca:	463d      	mov	r5, r7
 80071cc:	e7d3      	b.n	8007176 <_svfiprintf_r+0x92>
 80071ce:	9a03      	ldr	r2, [sp, #12]
 80071d0:	1d11      	adds	r1, r2, #4
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	9103      	str	r1, [sp, #12]
 80071d6:	2a00      	cmp	r2, #0
 80071d8:	db01      	blt.n	80071de <_svfiprintf_r+0xfa>
 80071da:	9207      	str	r2, [sp, #28]
 80071dc:	e004      	b.n	80071e8 <_svfiprintf_r+0x104>
 80071de:	4252      	negs	r2, r2
 80071e0:	f043 0302 	orr.w	r3, r3, #2
 80071e4:	9207      	str	r2, [sp, #28]
 80071e6:	9304      	str	r3, [sp, #16]
 80071e8:	783b      	ldrb	r3, [r7, #0]
 80071ea:	2b2e      	cmp	r3, #46	; 0x2e
 80071ec:	d10c      	bne.n	8007208 <_svfiprintf_r+0x124>
 80071ee:	787b      	ldrb	r3, [r7, #1]
 80071f0:	2b2a      	cmp	r3, #42	; 0x2a
 80071f2:	d133      	bne.n	800725c <_svfiprintf_r+0x178>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	1d1a      	adds	r2, r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	9203      	str	r2, [sp, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bfb8      	it	lt
 8007200:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007204:	3702      	adds	r7, #2
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	4d2e      	ldr	r5, [pc, #184]	; (80072c4 <_svfiprintf_r+0x1e0>)
 800720a:	7839      	ldrb	r1, [r7, #0]
 800720c:	2203      	movs	r2, #3
 800720e:	4628      	mov	r0, r5
 8007210:	f7f8 fffe 	bl	8000210 <memchr>
 8007214:	b138      	cbz	r0, 8007226 <_svfiprintf_r+0x142>
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	1b40      	subs	r0, r0, r5
 800721a:	fa03 f000 	lsl.w	r0, r3, r0
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	4303      	orrs	r3, r0
 8007222:	3701      	adds	r7, #1
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	7839      	ldrb	r1, [r7, #0]
 8007228:	4827      	ldr	r0, [pc, #156]	; (80072c8 <_svfiprintf_r+0x1e4>)
 800722a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800722e:	2206      	movs	r2, #6
 8007230:	1c7e      	adds	r6, r7, #1
 8007232:	f7f8 ffed 	bl	8000210 <memchr>
 8007236:	2800      	cmp	r0, #0
 8007238:	d038      	beq.n	80072ac <_svfiprintf_r+0x1c8>
 800723a:	4b24      	ldr	r3, [pc, #144]	; (80072cc <_svfiprintf_r+0x1e8>)
 800723c:	bb13      	cbnz	r3, 8007284 <_svfiprintf_r+0x1a0>
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	3307      	adds	r3, #7
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	3308      	adds	r3, #8
 8007248:	9303      	str	r3, [sp, #12]
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	444b      	add	r3, r9
 800724e:	9309      	str	r3, [sp, #36]	; 0x24
 8007250:	e76d      	b.n	800712e <_svfiprintf_r+0x4a>
 8007252:	fb05 3202 	mla	r2, r5, r2, r3
 8007256:	2001      	movs	r0, #1
 8007258:	460f      	mov	r7, r1
 800725a:	e7a6      	b.n	80071aa <_svfiprintf_r+0xc6>
 800725c:	2300      	movs	r3, #0
 800725e:	3701      	adds	r7, #1
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	4619      	mov	r1, r3
 8007264:	250a      	movs	r5, #10
 8007266:	4638      	mov	r0, r7
 8007268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800726c:	3a30      	subs	r2, #48	; 0x30
 800726e:	2a09      	cmp	r2, #9
 8007270:	d903      	bls.n	800727a <_svfiprintf_r+0x196>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0c8      	beq.n	8007208 <_svfiprintf_r+0x124>
 8007276:	9105      	str	r1, [sp, #20]
 8007278:	e7c6      	b.n	8007208 <_svfiprintf_r+0x124>
 800727a:	fb05 2101 	mla	r1, r5, r1, r2
 800727e:	2301      	movs	r3, #1
 8007280:	4607      	mov	r7, r0
 8007282:	e7f0      	b.n	8007266 <_svfiprintf_r+0x182>
 8007284:	ab03      	add	r3, sp, #12
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	4622      	mov	r2, r4
 800728a:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <_svfiprintf_r+0x1ec>)
 800728c:	a904      	add	r1, sp, #16
 800728e:	4640      	mov	r0, r8
 8007290:	f3af 8000 	nop.w
 8007294:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007298:	4681      	mov	r9, r0
 800729a:	d1d6      	bne.n	800724a <_svfiprintf_r+0x166>
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	065b      	lsls	r3, r3, #25
 80072a0:	f53f af35 	bmi.w	800710e <_svfiprintf_r+0x2a>
 80072a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a6:	b01d      	add	sp, #116	; 0x74
 80072a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ac:	ab03      	add	r3, sp, #12
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	4622      	mov	r2, r4
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <_svfiprintf_r+0x1ec>)
 80072b4:	a904      	add	r1, sp, #16
 80072b6:	4640      	mov	r0, r8
 80072b8:	f000 f882 	bl	80073c0 <_printf_i>
 80072bc:	e7ea      	b.n	8007294 <_svfiprintf_r+0x1b0>
 80072be:	bf00      	nop
 80072c0:	08007898 	.word	0x08007898
 80072c4:	0800789e 	.word	0x0800789e
 80072c8:	080078a2 	.word	0x080078a2
 80072cc:	00000000 	.word	0x00000000
 80072d0:	08007031 	.word	0x08007031

080072d4 <_printf_common>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	4691      	mov	r9, r2
 80072da:	461f      	mov	r7, r3
 80072dc:	688a      	ldr	r2, [r1, #8]
 80072de:	690b      	ldr	r3, [r1, #16]
 80072e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e4:	4293      	cmp	r3, r2
 80072e6:	bfb8      	it	lt
 80072e8:	4613      	movlt	r3, r2
 80072ea:	f8c9 3000 	str.w	r3, [r9]
 80072ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f2:	4606      	mov	r6, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	b112      	cbz	r2, 80072fe <_printf_common+0x2a>
 80072f8:	3301      	adds	r3, #1
 80072fa:	f8c9 3000 	str.w	r3, [r9]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0699      	lsls	r1, r3, #26
 8007302:	bf42      	ittt	mi
 8007304:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007308:	3302      	addmi	r3, #2
 800730a:	f8c9 3000 	strmi.w	r3, [r9]
 800730e:	6825      	ldr	r5, [r4, #0]
 8007310:	f015 0506 	ands.w	r5, r5, #6
 8007314:	d107      	bne.n	8007326 <_printf_common+0x52>
 8007316:	f104 0a19 	add.w	sl, r4, #25
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	f8d9 2000 	ldr.w	r2, [r9]
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	42ab      	cmp	r3, r5
 8007324:	dc28      	bgt.n	8007378 <_printf_common+0xa4>
 8007326:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	3300      	adds	r3, #0
 800732e:	bf18      	it	ne
 8007330:	2301      	movne	r3, #1
 8007332:	0692      	lsls	r2, r2, #26
 8007334:	d42d      	bmi.n	8007392 <_printf_common+0xbe>
 8007336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800733a:	4639      	mov	r1, r7
 800733c:	4630      	mov	r0, r6
 800733e:	47c0      	blx	r8
 8007340:	3001      	adds	r0, #1
 8007342:	d020      	beq.n	8007386 <_printf_common+0xb2>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	68e5      	ldr	r5, [r4, #12]
 8007348:	f8d9 2000 	ldr.w	r2, [r9]
 800734c:	f003 0306 	and.w	r3, r3, #6
 8007350:	2b04      	cmp	r3, #4
 8007352:	bf08      	it	eq
 8007354:	1aad      	subeq	r5, r5, r2
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	6922      	ldr	r2, [r4, #16]
 800735a:	bf0c      	ite	eq
 800735c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007360:	2500      	movne	r5, #0
 8007362:	4293      	cmp	r3, r2
 8007364:	bfc4      	itt	gt
 8007366:	1a9b      	subgt	r3, r3, r2
 8007368:	18ed      	addgt	r5, r5, r3
 800736a:	f04f 0900 	mov.w	r9, #0
 800736e:	341a      	adds	r4, #26
 8007370:	454d      	cmp	r5, r9
 8007372:	d11a      	bne.n	80073aa <_printf_common+0xd6>
 8007374:	2000      	movs	r0, #0
 8007376:	e008      	b.n	800738a <_printf_common+0xb6>
 8007378:	2301      	movs	r3, #1
 800737a:	4652      	mov	r2, sl
 800737c:	4639      	mov	r1, r7
 800737e:	4630      	mov	r0, r6
 8007380:	47c0      	blx	r8
 8007382:	3001      	adds	r0, #1
 8007384:	d103      	bne.n	800738e <_printf_common+0xba>
 8007386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	3501      	adds	r5, #1
 8007390:	e7c3      	b.n	800731a <_printf_common+0x46>
 8007392:	18e1      	adds	r1, r4, r3
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	2030      	movs	r0, #48	; 0x30
 8007398:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800739c:	4422      	add	r2, r4
 800739e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073a6:	3302      	adds	r3, #2
 80073a8:	e7c5      	b.n	8007336 <_printf_common+0x62>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4622      	mov	r2, r4
 80073ae:	4639      	mov	r1, r7
 80073b0:	4630      	mov	r0, r6
 80073b2:	47c0      	blx	r8
 80073b4:	3001      	adds	r0, #1
 80073b6:	d0e6      	beq.n	8007386 <_printf_common+0xb2>
 80073b8:	f109 0901 	add.w	r9, r9, #1
 80073bc:	e7d8      	b.n	8007370 <_printf_common+0x9c>
	...

080073c0 <_printf_i>:
 80073c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073c8:	460c      	mov	r4, r1
 80073ca:	7e09      	ldrb	r1, [r1, #24]
 80073cc:	b085      	sub	sp, #20
 80073ce:	296e      	cmp	r1, #110	; 0x6e
 80073d0:	4617      	mov	r7, r2
 80073d2:	4606      	mov	r6, r0
 80073d4:	4698      	mov	r8, r3
 80073d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073d8:	f000 80b3 	beq.w	8007542 <_printf_i+0x182>
 80073dc:	d822      	bhi.n	8007424 <_printf_i+0x64>
 80073de:	2963      	cmp	r1, #99	; 0x63
 80073e0:	d036      	beq.n	8007450 <_printf_i+0x90>
 80073e2:	d80a      	bhi.n	80073fa <_printf_i+0x3a>
 80073e4:	2900      	cmp	r1, #0
 80073e6:	f000 80b9 	beq.w	800755c <_printf_i+0x19c>
 80073ea:	2958      	cmp	r1, #88	; 0x58
 80073ec:	f000 8083 	beq.w	80074f6 <_printf_i+0x136>
 80073f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073f8:	e032      	b.n	8007460 <_printf_i+0xa0>
 80073fa:	2964      	cmp	r1, #100	; 0x64
 80073fc:	d001      	beq.n	8007402 <_printf_i+0x42>
 80073fe:	2969      	cmp	r1, #105	; 0x69
 8007400:	d1f6      	bne.n	80073f0 <_printf_i+0x30>
 8007402:	6820      	ldr	r0, [r4, #0]
 8007404:	6813      	ldr	r3, [r2, #0]
 8007406:	0605      	lsls	r5, r0, #24
 8007408:	f103 0104 	add.w	r1, r3, #4
 800740c:	d52a      	bpl.n	8007464 <_printf_i+0xa4>
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6011      	str	r1, [r2, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	da03      	bge.n	800741e <_printf_i+0x5e>
 8007416:	222d      	movs	r2, #45	; 0x2d
 8007418:	425b      	negs	r3, r3
 800741a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800741e:	486f      	ldr	r0, [pc, #444]	; (80075dc <_printf_i+0x21c>)
 8007420:	220a      	movs	r2, #10
 8007422:	e039      	b.n	8007498 <_printf_i+0xd8>
 8007424:	2973      	cmp	r1, #115	; 0x73
 8007426:	f000 809d 	beq.w	8007564 <_printf_i+0x1a4>
 800742a:	d808      	bhi.n	800743e <_printf_i+0x7e>
 800742c:	296f      	cmp	r1, #111	; 0x6f
 800742e:	d020      	beq.n	8007472 <_printf_i+0xb2>
 8007430:	2970      	cmp	r1, #112	; 0x70
 8007432:	d1dd      	bne.n	80073f0 <_printf_i+0x30>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	f043 0320 	orr.w	r3, r3, #32
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	e003      	b.n	8007446 <_printf_i+0x86>
 800743e:	2975      	cmp	r1, #117	; 0x75
 8007440:	d017      	beq.n	8007472 <_printf_i+0xb2>
 8007442:	2978      	cmp	r1, #120	; 0x78
 8007444:	d1d4      	bne.n	80073f0 <_printf_i+0x30>
 8007446:	2378      	movs	r3, #120	; 0x78
 8007448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800744c:	4864      	ldr	r0, [pc, #400]	; (80075e0 <_printf_i+0x220>)
 800744e:	e055      	b.n	80074fc <_printf_i+0x13c>
 8007450:	6813      	ldr	r3, [r2, #0]
 8007452:	1d19      	adds	r1, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6011      	str	r1, [r2, #0]
 8007458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800745c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007460:	2301      	movs	r3, #1
 8007462:	e08c      	b.n	800757e <_printf_i+0x1be>
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6011      	str	r1, [r2, #0]
 8007468:	f010 0f40 	tst.w	r0, #64	; 0x40
 800746c:	bf18      	it	ne
 800746e:	b21b      	sxthne	r3, r3
 8007470:	e7cf      	b.n	8007412 <_printf_i+0x52>
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	6825      	ldr	r5, [r4, #0]
 8007476:	1d18      	adds	r0, r3, #4
 8007478:	6010      	str	r0, [r2, #0]
 800747a:	0628      	lsls	r0, r5, #24
 800747c:	d501      	bpl.n	8007482 <_printf_i+0xc2>
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	e002      	b.n	8007488 <_printf_i+0xc8>
 8007482:	0668      	lsls	r0, r5, #25
 8007484:	d5fb      	bpl.n	800747e <_printf_i+0xbe>
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	4854      	ldr	r0, [pc, #336]	; (80075dc <_printf_i+0x21c>)
 800748a:	296f      	cmp	r1, #111	; 0x6f
 800748c:	bf14      	ite	ne
 800748e:	220a      	movne	r2, #10
 8007490:	2208      	moveq	r2, #8
 8007492:	2100      	movs	r1, #0
 8007494:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007498:	6865      	ldr	r5, [r4, #4]
 800749a:	60a5      	str	r5, [r4, #8]
 800749c:	2d00      	cmp	r5, #0
 800749e:	f2c0 8095 	blt.w	80075cc <_printf_i+0x20c>
 80074a2:	6821      	ldr	r1, [r4, #0]
 80074a4:	f021 0104 	bic.w	r1, r1, #4
 80074a8:	6021      	str	r1, [r4, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d13d      	bne.n	800752a <_printf_i+0x16a>
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	f040 808e 	bne.w	80075d0 <_printf_i+0x210>
 80074b4:	4665      	mov	r5, ip
 80074b6:	2a08      	cmp	r2, #8
 80074b8:	d10b      	bne.n	80074d2 <_printf_i+0x112>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	07db      	lsls	r3, r3, #31
 80074be:	d508      	bpl.n	80074d2 <_printf_i+0x112>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	6862      	ldr	r2, [r4, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	bfde      	ittt	le
 80074c8:	2330      	movle	r3, #48	; 0x30
 80074ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074d2:	ebac 0305 	sub.w	r3, ip, r5
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	f8cd 8000 	str.w	r8, [sp]
 80074dc:	463b      	mov	r3, r7
 80074de:	aa03      	add	r2, sp, #12
 80074e0:	4621      	mov	r1, r4
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff fef6 	bl	80072d4 <_printf_common>
 80074e8:	3001      	adds	r0, #1
 80074ea:	d14d      	bne.n	8007588 <_printf_i+0x1c8>
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f0:	b005      	add	sp, #20
 80074f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074f6:	4839      	ldr	r0, [pc, #228]	; (80075dc <_printf_i+0x21c>)
 80074f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074fc:	6813      	ldr	r3, [r2, #0]
 80074fe:	6821      	ldr	r1, [r4, #0]
 8007500:	1d1d      	adds	r5, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6015      	str	r5, [r2, #0]
 8007506:	060a      	lsls	r2, r1, #24
 8007508:	d50b      	bpl.n	8007522 <_printf_i+0x162>
 800750a:	07ca      	lsls	r2, r1, #31
 800750c:	bf44      	itt	mi
 800750e:	f041 0120 	orrmi.w	r1, r1, #32
 8007512:	6021      	strmi	r1, [r4, #0]
 8007514:	b91b      	cbnz	r3, 800751e <_printf_i+0x15e>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	f022 0220 	bic.w	r2, r2, #32
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	2210      	movs	r2, #16
 8007520:	e7b7      	b.n	8007492 <_printf_i+0xd2>
 8007522:	064d      	lsls	r5, r1, #25
 8007524:	bf48      	it	mi
 8007526:	b29b      	uxthmi	r3, r3
 8007528:	e7ef      	b.n	800750a <_printf_i+0x14a>
 800752a:	4665      	mov	r5, ip
 800752c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007530:	fb02 3311 	mls	r3, r2, r1, r3
 8007534:	5cc3      	ldrb	r3, [r0, r3]
 8007536:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800753a:	460b      	mov	r3, r1
 800753c:	2900      	cmp	r1, #0
 800753e:	d1f5      	bne.n	800752c <_printf_i+0x16c>
 8007540:	e7b9      	b.n	80074b6 <_printf_i+0xf6>
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	6825      	ldr	r5, [r4, #0]
 8007546:	6961      	ldr	r1, [r4, #20]
 8007548:	1d18      	adds	r0, r3, #4
 800754a:	6010      	str	r0, [r2, #0]
 800754c:	0628      	lsls	r0, r5, #24
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	d501      	bpl.n	8007556 <_printf_i+0x196>
 8007552:	6019      	str	r1, [r3, #0]
 8007554:	e002      	b.n	800755c <_printf_i+0x19c>
 8007556:	066a      	lsls	r2, r5, #25
 8007558:	d5fb      	bpl.n	8007552 <_printf_i+0x192>
 800755a:	8019      	strh	r1, [r3, #0]
 800755c:	2300      	movs	r3, #0
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	4665      	mov	r5, ip
 8007562:	e7b9      	b.n	80074d8 <_printf_i+0x118>
 8007564:	6813      	ldr	r3, [r2, #0]
 8007566:	1d19      	adds	r1, r3, #4
 8007568:	6011      	str	r1, [r2, #0]
 800756a:	681d      	ldr	r5, [r3, #0]
 800756c:	6862      	ldr	r2, [r4, #4]
 800756e:	2100      	movs	r1, #0
 8007570:	4628      	mov	r0, r5
 8007572:	f7f8 fe4d 	bl	8000210 <memchr>
 8007576:	b108      	cbz	r0, 800757c <_printf_i+0x1bc>
 8007578:	1b40      	subs	r0, r0, r5
 800757a:	6060      	str	r0, [r4, #4]
 800757c:	6863      	ldr	r3, [r4, #4]
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	2300      	movs	r3, #0
 8007582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007586:	e7a7      	b.n	80074d8 <_printf_i+0x118>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	462a      	mov	r2, r5
 800758c:	4639      	mov	r1, r7
 800758e:	4630      	mov	r0, r6
 8007590:	47c0      	blx	r8
 8007592:	3001      	adds	r0, #1
 8007594:	d0aa      	beq.n	80074ec <_printf_i+0x12c>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	079b      	lsls	r3, r3, #30
 800759a:	d413      	bmi.n	80075c4 <_printf_i+0x204>
 800759c:	68e0      	ldr	r0, [r4, #12]
 800759e:	9b03      	ldr	r3, [sp, #12]
 80075a0:	4298      	cmp	r0, r3
 80075a2:	bfb8      	it	lt
 80075a4:	4618      	movlt	r0, r3
 80075a6:	e7a3      	b.n	80074f0 <_printf_i+0x130>
 80075a8:	2301      	movs	r3, #1
 80075aa:	464a      	mov	r2, r9
 80075ac:	4639      	mov	r1, r7
 80075ae:	4630      	mov	r0, r6
 80075b0:	47c0      	blx	r8
 80075b2:	3001      	adds	r0, #1
 80075b4:	d09a      	beq.n	80074ec <_printf_i+0x12c>
 80075b6:	3501      	adds	r5, #1
 80075b8:	68e3      	ldr	r3, [r4, #12]
 80075ba:	9a03      	ldr	r2, [sp, #12]
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	42ab      	cmp	r3, r5
 80075c0:	dcf2      	bgt.n	80075a8 <_printf_i+0x1e8>
 80075c2:	e7eb      	b.n	800759c <_printf_i+0x1dc>
 80075c4:	2500      	movs	r5, #0
 80075c6:	f104 0919 	add.w	r9, r4, #25
 80075ca:	e7f5      	b.n	80075b8 <_printf_i+0x1f8>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1ac      	bne.n	800752a <_printf_i+0x16a>
 80075d0:	7803      	ldrb	r3, [r0, #0]
 80075d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075da:	e76c      	b.n	80074b6 <_printf_i+0xf6>
 80075dc:	080078a9 	.word	0x080078a9
 80075e0:	080078ba 	.word	0x080078ba

080075e4 <memcpy>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	1e43      	subs	r3, r0, #1
 80075e8:	440a      	add	r2, r1
 80075ea:	4291      	cmp	r1, r2
 80075ec:	d100      	bne.n	80075f0 <memcpy+0xc>
 80075ee:	bd10      	pop	{r4, pc}
 80075f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f8:	e7f7      	b.n	80075ea <memcpy+0x6>

080075fa <memmove>:
 80075fa:	4288      	cmp	r0, r1
 80075fc:	b510      	push	{r4, lr}
 80075fe:	eb01 0302 	add.w	r3, r1, r2
 8007602:	d807      	bhi.n	8007614 <memmove+0x1a>
 8007604:	1e42      	subs	r2, r0, #1
 8007606:	4299      	cmp	r1, r3
 8007608:	d00a      	beq.n	8007620 <memmove+0x26>
 800760a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007612:	e7f8      	b.n	8007606 <memmove+0xc>
 8007614:	4283      	cmp	r3, r0
 8007616:	d9f5      	bls.n	8007604 <memmove+0xa>
 8007618:	1881      	adds	r1, r0, r2
 800761a:	1ad2      	subs	r2, r2, r3
 800761c:	42d3      	cmn	r3, r2
 800761e:	d100      	bne.n	8007622 <memmove+0x28>
 8007620:	bd10      	pop	{r4, pc}
 8007622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007626:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800762a:	e7f7      	b.n	800761c <memmove+0x22>

0800762c <_free_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4605      	mov	r5, r0
 8007630:	2900      	cmp	r1, #0
 8007632:	d045      	beq.n	80076c0 <_free_r+0x94>
 8007634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007638:	1f0c      	subs	r4, r1, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfb8      	it	lt
 800763e:	18e4      	addlt	r4, r4, r3
 8007640:	f000 f8d2 	bl	80077e8 <__malloc_lock>
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <_free_r+0x98>)
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	4610      	mov	r0, r2
 800764a:	b933      	cbnz	r3, 800765a <_free_r+0x2e>
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	6014      	str	r4, [r2, #0]
 8007650:	4628      	mov	r0, r5
 8007652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007656:	f000 b8c8 	b.w	80077ea <__malloc_unlock>
 800765a:	42a3      	cmp	r3, r4
 800765c:	d90c      	bls.n	8007678 <_free_r+0x4c>
 800765e:	6821      	ldr	r1, [r4, #0]
 8007660:	1862      	adds	r2, r4, r1
 8007662:	4293      	cmp	r3, r2
 8007664:	bf04      	itt	eq
 8007666:	681a      	ldreq	r2, [r3, #0]
 8007668:	685b      	ldreq	r3, [r3, #4]
 800766a:	6063      	str	r3, [r4, #4]
 800766c:	bf04      	itt	eq
 800766e:	1852      	addeq	r2, r2, r1
 8007670:	6022      	streq	r2, [r4, #0]
 8007672:	6004      	str	r4, [r0, #0]
 8007674:	e7ec      	b.n	8007650 <_free_r+0x24>
 8007676:	4613      	mov	r3, r2
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	b10a      	cbz	r2, 8007680 <_free_r+0x54>
 800767c:	42a2      	cmp	r2, r4
 800767e:	d9fa      	bls.n	8007676 <_free_r+0x4a>
 8007680:	6819      	ldr	r1, [r3, #0]
 8007682:	1858      	adds	r0, r3, r1
 8007684:	42a0      	cmp	r0, r4
 8007686:	d10b      	bne.n	80076a0 <_free_r+0x74>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	4401      	add	r1, r0
 800768c:	1858      	adds	r0, r3, r1
 800768e:	4282      	cmp	r2, r0
 8007690:	6019      	str	r1, [r3, #0]
 8007692:	d1dd      	bne.n	8007650 <_free_r+0x24>
 8007694:	6810      	ldr	r0, [r2, #0]
 8007696:	6852      	ldr	r2, [r2, #4]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	4401      	add	r1, r0
 800769c:	6019      	str	r1, [r3, #0]
 800769e:	e7d7      	b.n	8007650 <_free_r+0x24>
 80076a0:	d902      	bls.n	80076a8 <_free_r+0x7c>
 80076a2:	230c      	movs	r3, #12
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	e7d3      	b.n	8007650 <_free_r+0x24>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	1821      	adds	r1, r4, r0
 80076ac:	428a      	cmp	r2, r1
 80076ae:	bf04      	itt	eq
 80076b0:	6811      	ldreq	r1, [r2, #0]
 80076b2:	6852      	ldreq	r2, [r2, #4]
 80076b4:	6062      	str	r2, [r4, #4]
 80076b6:	bf04      	itt	eq
 80076b8:	1809      	addeq	r1, r1, r0
 80076ba:	6021      	streq	r1, [r4, #0]
 80076bc:	605c      	str	r4, [r3, #4]
 80076be:	e7c7      	b.n	8007650 <_free_r+0x24>
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	2000010c 	.word	0x2000010c

080076c8 <_malloc_r>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	1ccd      	adds	r5, r1, #3
 80076cc:	f025 0503 	bic.w	r5, r5, #3
 80076d0:	3508      	adds	r5, #8
 80076d2:	2d0c      	cmp	r5, #12
 80076d4:	bf38      	it	cc
 80076d6:	250c      	movcc	r5, #12
 80076d8:	2d00      	cmp	r5, #0
 80076da:	4606      	mov	r6, r0
 80076dc:	db01      	blt.n	80076e2 <_malloc_r+0x1a>
 80076de:	42a9      	cmp	r1, r5
 80076e0:	d903      	bls.n	80076ea <_malloc_r+0x22>
 80076e2:	230c      	movs	r3, #12
 80076e4:	6033      	str	r3, [r6, #0]
 80076e6:	2000      	movs	r0, #0
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	f000 f87d 	bl	80077e8 <__malloc_lock>
 80076ee:	4a21      	ldr	r2, [pc, #132]	; (8007774 <_malloc_r+0xac>)
 80076f0:	6814      	ldr	r4, [r2, #0]
 80076f2:	4621      	mov	r1, r4
 80076f4:	b991      	cbnz	r1, 800771c <_malloc_r+0x54>
 80076f6:	4c20      	ldr	r4, [pc, #128]	; (8007778 <_malloc_r+0xb0>)
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	b91b      	cbnz	r3, 8007704 <_malloc_r+0x3c>
 80076fc:	4630      	mov	r0, r6
 80076fe:	f000 f863 	bl	80077c8 <_sbrk_r>
 8007702:	6020      	str	r0, [r4, #0]
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f000 f85e 	bl	80077c8 <_sbrk_r>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d124      	bne.n	800775a <_malloc_r+0x92>
 8007710:	230c      	movs	r3, #12
 8007712:	6033      	str	r3, [r6, #0]
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f868 	bl	80077ea <__malloc_unlock>
 800771a:	e7e4      	b.n	80076e6 <_malloc_r+0x1e>
 800771c:	680b      	ldr	r3, [r1, #0]
 800771e:	1b5b      	subs	r3, r3, r5
 8007720:	d418      	bmi.n	8007754 <_malloc_r+0x8c>
 8007722:	2b0b      	cmp	r3, #11
 8007724:	d90f      	bls.n	8007746 <_malloc_r+0x7e>
 8007726:	600b      	str	r3, [r1, #0]
 8007728:	50cd      	str	r5, [r1, r3]
 800772a:	18cc      	adds	r4, r1, r3
 800772c:	4630      	mov	r0, r6
 800772e:	f000 f85c 	bl	80077ea <__malloc_unlock>
 8007732:	f104 000b 	add.w	r0, r4, #11
 8007736:	1d23      	adds	r3, r4, #4
 8007738:	f020 0007 	bic.w	r0, r0, #7
 800773c:	1ac3      	subs	r3, r0, r3
 800773e:	d0d3      	beq.n	80076e8 <_malloc_r+0x20>
 8007740:	425a      	negs	r2, r3
 8007742:	50e2      	str	r2, [r4, r3]
 8007744:	e7d0      	b.n	80076e8 <_malloc_r+0x20>
 8007746:	428c      	cmp	r4, r1
 8007748:	684b      	ldr	r3, [r1, #4]
 800774a:	bf16      	itet	ne
 800774c:	6063      	strne	r3, [r4, #4]
 800774e:	6013      	streq	r3, [r2, #0]
 8007750:	460c      	movne	r4, r1
 8007752:	e7eb      	b.n	800772c <_malloc_r+0x64>
 8007754:	460c      	mov	r4, r1
 8007756:	6849      	ldr	r1, [r1, #4]
 8007758:	e7cc      	b.n	80076f4 <_malloc_r+0x2c>
 800775a:	1cc4      	adds	r4, r0, #3
 800775c:	f024 0403 	bic.w	r4, r4, #3
 8007760:	42a0      	cmp	r0, r4
 8007762:	d005      	beq.n	8007770 <_malloc_r+0xa8>
 8007764:	1a21      	subs	r1, r4, r0
 8007766:	4630      	mov	r0, r6
 8007768:	f000 f82e 	bl	80077c8 <_sbrk_r>
 800776c:	3001      	adds	r0, #1
 800776e:	d0cf      	beq.n	8007710 <_malloc_r+0x48>
 8007770:	6025      	str	r5, [r4, #0]
 8007772:	e7db      	b.n	800772c <_malloc_r+0x64>
 8007774:	2000010c 	.word	0x2000010c
 8007778:	20000110 	.word	0x20000110

0800777c <_realloc_r>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	4607      	mov	r7, r0
 8007780:	4614      	mov	r4, r2
 8007782:	460e      	mov	r6, r1
 8007784:	b921      	cbnz	r1, 8007790 <_realloc_r+0x14>
 8007786:	4611      	mov	r1, r2
 8007788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800778c:	f7ff bf9c 	b.w	80076c8 <_malloc_r>
 8007790:	b922      	cbnz	r2, 800779c <_realloc_r+0x20>
 8007792:	f7ff ff4b 	bl	800762c <_free_r>
 8007796:	4625      	mov	r5, r4
 8007798:	4628      	mov	r0, r5
 800779a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800779c:	f000 f826 	bl	80077ec <_malloc_usable_size_r>
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d20f      	bcs.n	80077c4 <_realloc_r+0x48>
 80077a4:	4621      	mov	r1, r4
 80077a6:	4638      	mov	r0, r7
 80077a8:	f7ff ff8e 	bl	80076c8 <_malloc_r>
 80077ac:	4605      	mov	r5, r0
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d0f2      	beq.n	8007798 <_realloc_r+0x1c>
 80077b2:	4631      	mov	r1, r6
 80077b4:	4622      	mov	r2, r4
 80077b6:	f7ff ff15 	bl	80075e4 <memcpy>
 80077ba:	4631      	mov	r1, r6
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff ff35 	bl	800762c <_free_r>
 80077c2:	e7e9      	b.n	8007798 <_realloc_r+0x1c>
 80077c4:	4635      	mov	r5, r6
 80077c6:	e7e7      	b.n	8007798 <_realloc_r+0x1c>

080077c8 <_sbrk_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4c06      	ldr	r4, [pc, #24]	; (80077e4 <_sbrk_r+0x1c>)
 80077cc:	2300      	movs	r3, #0
 80077ce:	4605      	mov	r5, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	f7fb fa96 	bl	8002d04 <_sbrk>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_sbrk_r+0x1a>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_sbrk_r+0x1a>
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	200014d8 	.word	0x200014d8

080077e8 <__malloc_lock>:
 80077e8:	4770      	bx	lr

080077ea <__malloc_unlock>:
 80077ea:	4770      	bx	lr

080077ec <_malloc_usable_size_r>:
 80077ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f0:	1f18      	subs	r0, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bfbc      	itt	lt
 80077f6:	580b      	ldrlt	r3, [r1, r0]
 80077f8:	18c0      	addlt	r0, r0, r3
 80077fa:	4770      	bx	lr

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr
