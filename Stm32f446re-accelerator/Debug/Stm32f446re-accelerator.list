
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009040  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08009204  08009204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c4  080095c4  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080095cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000048  08009614  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  08009614  00020ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad02  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003296  00000000  00000000  0003ad7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  0003e010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  0003f470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  00040758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000110df  00000000  00000000  00064d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2c28  00000000  00000000  00075e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000542c  00000000  00000000  00148ab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080091ec 	.word	0x080091ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	080091ec 	.word	0x080091ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 fb4a 	bl	8001ba4 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 fb42 	bl	8001ba4 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fb3a 	bl	8001ba4 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 fb32 	bl	8001ba4 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 fb76 	bl	8001c50 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	080092a4 	.word	0x080092a4

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
	SPIWrite(LR_RegPaConfig,0x0F); //14 Дб
 800057a:	210f      	movs	r1, #15
 800057c:	2009      	movs	r0, #9
 800057e:	f001 fb11 	bl	8001ba4 <SPIWrite>
	//SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84
	SPIWrite(0x5A,0x84); // обычный режим( без макс усиления: до 14 Дб)
 8000582:	2184      	movs	r1, #132	; 0x84
 8000584:	205a      	movs	r0, #90	; 0x5a
 8000586:	f001 fb0d 	bl	8001ba4 <SPIWrite>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <Rf96_OCP+0x20>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	4619      	mov	r1, r3
 80005a6:	200b      	movs	r0, #11
 80005a8:	f001 fafc 	bl	8001ba4 <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	080092b0 	.word	0x080092b0

080005b8 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <Rf96_LNA+0x20>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	200c      	movs	r0, #12
 80005cc:	f001 faea 	bl	8001ba4 <SPIWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	080092b4 	.word	0x080092b4

080005dc <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
	SPIWrite(LR_RegModemConfig1,0x25); //   0x21 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005ee:	2125      	movs	r1, #37	; 0x25
 80005f0:	201d      	movs	r0, #29
 80005f2:	f001 fad7 	bl	8001ba4 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	460b      	mov	r3, r1
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	4613      	mov	r3, r2
 800060e:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xB4);  // SF=11
 8000610:	21b4      	movs	r1, #180	; 0xb4
 8000612:	201e      	movs	r0, #30
 8000614:	f001 fac6 	bl	8001ba4 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	201f      	movs	r0, #31
 8000620:	f001 fac0 	bl	8001ba4 <SPIWrite>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	2020      	movs	r0, #32
 8000642:	f001 faaf 	bl	8001ba4 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	2021      	movs	r0, #33	; 0x21
 800064e:	f001 faa9 	bl	8001ba4 <SPIWrite>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4604      	mov	r4, r0
 8000662:	4608      	mov	r0, r1
 8000664:	4611      	mov	r1, r2
 8000666:	461a      	mov	r2, r3
 8000668:	4623      	mov	r3, r4
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4603      	mov	r3, r0
 800066e:	71bb      	strb	r3, [r7, #6]
 8000670:	460b      	mov	r3, r1
 8000672:	717b      	strb	r3, [r7, #5]
 8000674:	4613      	mov	r3, r2
 8000676:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	b2da      	uxtb	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4413      	add	r3, r2
 8000686:	b2da      	uxtb	r2, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	2040      	movs	r0, #64	; 0x40
 800069c:	f001 fa82 	bl	8001ba4 <SPIWrite>
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd90      	pop	{r4, r7, pc}

080006a8 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006ac:	21f7      	movs	r1, #247	; 0xf7
 80006ae:	2011      	movs	r0, #17
 80006b0:	f001 fa78 	bl	8001ba4 <SPIWrite>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	2011      	movs	r0, #17
 80006c0:	f001 fa70 	bl	8001ba4 <SPIWrite>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2022      	movs	r0, #34	; 0x22
 80006d8:	f001 fa64 	bl	8001ba4 <SPIWrite>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	200e      	movs	r0, #14
 80006f4:	f001 fa56 	bl	8001ba4 <SPIWrite>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	200f      	movs	r0, #15
 8000710:	f001 fa48 	bl	8001ba4 <SPIWrite>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4619      	mov	r1, r3
 800072a:	200d      	movs	r0, #13
 800072c:	f001 fa3a 	bl	8001ba4 <SPIWrite>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 800073c:	2185      	movs	r1, #133	; 0x85
 800073e:	2001      	movs	r0, #1
 8000740:	f001 fa30 	bl	8001ba4 <SPIWrite>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	2001      	movs	r0, #1
 8000750:	f001 fa28 	bl	8001ba4 <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	461a      	mov	r2, r3
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	2000      	movs	r0, #0
 800076c:	f001 fa70 	bl	8001c50 <BurstWrite>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000780:	2010      	movs	r0, #16
 8000782:	f001 f9f1 	bl	8001b68 <SPIRead>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4619      	mov	r1, r3
 800078e:	200d      	movs	r0, #13
 8000790:	f001 fa08 	bl	8001ba4 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 8000794:	2013      	movs	r0, #19
 8000796:	f001 f9e7 	bl	8001b68 <SPIRead>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	461a      	mov	r2, r3
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 fa21 	bl	8001bec <SPIBurstRead>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007b6:	f7ff feb5 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007ba:	f7ff febb 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fec0 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed3 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fee2 	bl	8000594 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fef1 	bl	80005b8 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff fefe 	bl	80005dc <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007e4:	2101      	movs	r1, #1
 80007e6:	2006      	movs	r0, #6
 80007e8:	f7ff ff09 	bl	80005fe <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff1d 	bl	800062c <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007f2:	210a      	movs	r1, #10
 80007f4:	2037      	movs	r0, #55	; 0x37
 80007f6:	f001 f9d5 	bl	8001ba4 <SPIWrite>
	SPIWrite(0x31,0xA3);
 80007fa:	21a3      	movs	r1, #163	; 0xa3
 80007fc:	2031      	movs	r0, #49	; 0x31
 80007fe:	f001 f9d1 	bl	8001ba4 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 8000802:	f7ff fe87 	bl	8000514 <Rf96_Standby>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 800080e:	2100      	movs	r1, #0
 8000810:	2024      	movs	r0, #36	; 0x24
 8000812:	f001 f9c7 	bl	8001ba4 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 8000816:	2302      	movs	r3, #2
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff1c 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000822:	f7ff fe6f 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 8000826:	f7ff ff3f 	bl	80006a8 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ff4c 	bl	80006c8 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	f7ff ff57 	bl	80006e4 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	f7ff ff70 	bl	800071c <Rf96_FIFO_point>

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 8000844:	2100      	movs	r1, #0
 8000846:	2024      	movs	r0, #36	; 0x24
 8000848:	f001 f9ac 	bl	8001ba4 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 800084c:	2302      	movs	r3, #2
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff ff01 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000858:	f7ff ff2e 	bl	80006b8 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800085c:	f7ff fe52 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000860:	202a      	movs	r0, #42	; 0x2a
 8000862:	f7ff ff31 	bl	80006c8 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff4a 	bl	8000700 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff55 	bl	800071c <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 8000872:	f7ff ff61 	bl	8000738 <Rf96_RX_Continuous_mode>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ff64 	bl	8000758 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000890:	f7ff ff5a 	bl	8000748 <Rf96_TX_mode>
		}
	}
	*/


}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ac:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008ae:	e012      	b.n	80008d6 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1c59      	adds	r1, r3, #1
 80008c2:	6079      	str	r1, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4043      	eors	r3, r0
 80008c8:	4909      	ldr	r1, [pc, #36]	; (80008f0 <Crc16+0x54>)
 80008ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4053      	eors	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	807a      	strh	r2, [r7, #2]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e7      	bne.n	80008b0 <Crc16+0x14>

    return crc;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	0800931c 	.word	0x0800931c

080008f4 <UserDelayStart>:
// Функция пользовательской задержки
void UserDelayStart(uint32_t Delay)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	TimeDelay=Delay;
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <UserDelayStart+0x20>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
	Delay_start=1;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <UserDelayStart+0x24>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000020 	.word	0x20000020
 8000918:	20000074 	.word	0x20000074

0800091c <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4611      	mov	r1, r2
 8000928:	461a      	mov	r2, r3
 800092a:	460b      	mov	r3, r1
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	4613      	mov	r3, r2
 8000930:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < len; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	82fb      	strh	r3, [r7, #22]
 8000936:	e01f      	b.n	8000978 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <uint32_TO_charmass+0x70>)
 800093c:	fba3 2301 	umull	r2, r3, r3, r1
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	1aca      	subs	r2, r1, r3
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	1e59      	subs	r1, r3, #1
 8000952:	8afb      	ldrh	r3, [r7, #22]
 8000954:	1ac9      	subs	r1, r1, r3
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	440b      	add	r3, r1
 800095a:	4619      	mov	r1, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	440b      	add	r3, r1
 8000960:	3230      	adds	r2, #48	; 0x30
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <uint32_TO_charmass+0x70>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8000972:	8afb      	ldrh	r3, [r7, #22]
 8000974:	3301      	adds	r3, #1
 8000976:	82fb      	strh	r3, [r7, #22]
 8000978:	8afa      	ldrh	r2, [r7, #22]
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d3db      	bcc.n	8000938 <uint32_TO_charmass+0x1c>
	}
}
 8000980:	bf00      	nop
 8000982:	371c      	adds	r7, #28
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	cccccccd 	.word	0xcccccccd

08000990 <ReadNumofFileSD>:
// Чтение количества созданных файлов из файла InfoSD.txt
uint8_t ReadNumofFileSD(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000996:	af00      	add	r7, sp, #0
	FIL filInform;
	uint8_t Num=255;
 8000998:	23ff      	movs	r3, #255	; 0xff
 800099a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_READ);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2211      	movs	r2, #17
 80009a2:	4945      	ldr	r1, [pc, #276]	; (8000ab8 <ReadNumofFileSD+0x128>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f007 fe7f 	bl	80086a8 <f_open>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b43      	ldr	r3, [pc, #268]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <ReadNumofFileSD+0x36>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2102      	movs	r1, #2
 80009be:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <ReadNumofFileSD+0x130>)
 80009c0:	f003 fa0c 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 80009c4:	e7fe      	b.n	80009c4 <ReadNumofFileSD+0x34>
	}
	//Читаем количество файлов
	fres=f_read(&filInform,BuffSDRead,40,&bytesRead);
 80009c6:	1d38      	adds	r0, r7, #4
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <ReadNumofFileSD+0x134>)
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	493e      	ldr	r1, [pc, #248]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ce:	f008 f829 	bl	8008a24 <f_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009d8:	701a      	strb	r2, [r3, #0]
	//Если на флешке не было этого файла
	if(BuffSDRead[0]=='\t' && BuffSDRead[1]=='\t' && BuffSDRead[2]=='F' && BuffSDRead[3]=='i' && BuffSDRead[4]=='l')
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	d114      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	d110      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009ea:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	2b46      	cmp	r3, #70	; 0x46
 80009f0:	d10c      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	2b69      	cmp	r3, #105	; 0x69
 80009f8:	d108      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	2b6c      	cmp	r3, #108	; 0x6c
 8000a00:	d104      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
	{
		Num=BuffSDRead[28]-'0'; // количество файлов
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <ReadNumofFileSD+0x138>)
 8000a04:	7f1b      	ldrb	r3, [r3, #28]
 8000a06:	3b30      	subs	r3, #48	; 0x30
 8000a08:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	}
	fres=f_close(&filInform);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 fb3a 	bl	8009088 <f_close>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1a:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <ReadNumofFileSD+0xa0>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a2a:	f003 f9d7 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000a2e:	e7fe      	b.n	8000a2e <ReadNumofFileSD+0x9e>
	}
	if(Num==255)
 8000a30:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d132      	bne.n	8000a9e <ReadNumofFileSD+0x10e>
	{
		Num=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2212      	movs	r2, #18
 8000a42:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <ReadNumofFileSD+0x128>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fe2f 	bl	80086a8 <f_open>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a50:	701a      	strb	r2, [r3, #0]
		// Количество файлов
		fres = f_write(&filInform, "\t\tFile info\nNumber of files:0;\n", 31, &bytesWroteInform);
 8000a52:	463b      	mov	r3, r7
 8000a54:	1d38      	adds	r0, r7, #4
 8000a56:	221f      	movs	r2, #31
 8000a58:	491c      	ldr	r1, [pc, #112]	; (8000acc <ReadNumofFileSD+0x13c>)
 8000a5a:	f008 f922 	bl	8008ca2 <f_write>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a64:	701a      	strb	r2, [r3, #0]
		// �?стория команд
		fres = f_write(&filInform, "\t\tCommand History\nTime\tcommand\n", 31, &bytesWroteInform);
 8000a66:	463b      	mov	r3, r7
 8000a68:	1d38      	adds	r0, r7, #4
 8000a6a:	221f      	movs	r2, #31
 8000a6c:	4918      	ldr	r1, [pc, #96]	; (8000ad0 <ReadNumofFileSD+0x140>)
 8000a6e:	f008 f918 	bl	8008ca2 <f_write>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a78:	701a      	strb	r2, [r3, #0]
		fres=f_close(&filInform);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fb03 	bl	8009088 <f_close>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a88:	701a      	strb	r2, [r3, #0]
		if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <ReadNumofFileSD+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a98:	f003 f9a0 	bl	8003ddc <HAL_GPIO_WritePin>
			while(1);
 8000a9c:	e7fe      	b.n	8000a9c <ReadNumofFileSD+0x10c>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000aa4:	f003 f99a 	bl	8003ddc <HAL_GPIO_WritePin>

	return Num;
 8000aa8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08009204 	.word	0x08009204
 8000abc:	20000810 	.word	0x20000810
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	200006e4 	.word	0x200006e4
 8000acc:	08009210 	.word	0x08009210
 8000ad0:	08009230 	.word	0x08009230

08000ad4 <WriteNumofFileSD>:
// Запись в фаил  InfoSD.txt количество созданных файлов
void WriteNumofFileSD(uint8_t Num)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4602      	mov	r2, r0
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2212      	movs	r2, #18
 8000ae8:	4920      	ldr	r1, [pc, #128]	; (8000b6c <WriteNumofFileSD+0x98>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fddc 	bl	80086a8 <f_open>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000af6:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <WriteNumofFileSD+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2102      	movs	r1, #2
 8000b04:	481b      	ldr	r0, [pc, #108]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b06:	f003 f969 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000b0a:	e7fe      	b.n	8000b0a <WriteNumofFileSD+0x36>
	}
	//Записываем количество данных
	BuffSDfileinfo[28]=Num+'0';
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3330      	adds	r3, #48	; 0x30
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b16:	771a      	strb	r2, [r3, #28]
	fres = f_write(&filInform, BuffSDfileinfo, 30, &bytesWroteInform);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	f107 0010 	add.w	r0, r7, #16
 8000b20:	221e      	movs	r2, #30
 8000b22:	4915      	ldr	r1, [pc, #84]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b24:	f008 f8bd 	bl	8008ca2 <f_write>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f008 faa7 	bl	8009088 <f_close>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b40:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <WriteNumofFileSD+0x82>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b50:	f003 f944 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000b54:	e7fe      	b.n	8000b54 <WriteNumofFileSD+0x80>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b5c:	f003 f93e 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8000b60:	bf00      	nop
 8000b62:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	08009204 	.word	0x08009204
 8000b70:	20000810 	.word	0x20000810
 8000b74:	40020800 	.word	0x40020800
 8000b78:	20000000 	.word	0x20000000

08000b7c <CommandHistoryWrite>:
// Запись в файл InfoSD.txt команд и времени
void CommandHistoryWrite(uint8_t command)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4602      	mov	r2, r0
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2232      	movs	r2, #50	; 0x32
 8000b90:	492a      	ldr	r1, [pc, #168]	; (8000c3c <CommandHistoryWrite+0xc0>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 fd88 	bl	80086a8 <f_open>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <CommandHistoryWrite+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <CommandHistoryWrite+0xc8>)
 8000bae:	f003 f915 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000bb2:	e7fe      	b.n	8000bb2 <CommandHistoryWrite+0x36>
	}
	//Записываем количество данных
	//  Время в мс, когда ,прибыла команда
	uint32_t TimeHistory = HAL_GetTick();
 8000bb4:	f002 fa1c 	bl	8002ff0 <HAL_GetTick>
 8000bb8:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
	uint32_TO_charmass(TimeHistory, BufFileInfoWr, 0, 8);
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4921      	ldr	r1, [pc, #132]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bc2:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000bc6:	f7ff fea9 	bl	800091c <uint32_TO_charmass>
	BufFileInfoWr[8]=' ';
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bcc:	2220      	movs	r2, #32
 8000bce:	721a      	strb	r2, [r3, #8]
	BufFileInfoWr[9]=command+'0';
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3330      	adds	r3, #48	; 0x30
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bda:	725a      	strb	r2, [r3, #9]
	BufFileInfoWr[10]=';';
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bde:	223b      	movs	r2, #59	; 0x3b
 8000be0:	729a      	strb	r2, [r3, #10]
	BufFileInfoWr[11]='\n';
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	72da      	strb	r2, [r3, #11]
	fres = f_write(&filInform, BufFileInfoWr, 12, &bytesWroteInform);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	f107 000c 	add.w	r0, r7, #12
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	4915      	ldr	r1, [pc, #84]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bf4:	f008 f855 	bl	8008ca2 <f_write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000bfe:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4618      	mov	r0, r3
 8000c06:	f008 fa3f 	bl	8009088 <f_close>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000c10:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <CommandHistoryWrite+0xaa>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <CommandHistoryWrite+0xc8>)
 8000c20:	f003 f8dc 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000c24:	e7fe      	b.n	8000c24 <CommandHistoryWrite+0xa8>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <CommandHistoryWrite+0xc8>)
 8000c2c:	f003 f8d6 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08009204 	.word	0x08009204
 8000c40:	20000810 	.word	0x20000810
 8000c44:	40020800 	.word	0x40020800
 8000c48:	200003c0 	.word	0x200003c0

08000c4c <HistoryOnOffUSI>:
// Запись в файл InfoSD.txt метки о включении питания
void HistoryOnOffUSI(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000c52:	af00      	add	r7, sp, #0
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2232      	movs	r2, #50	; 0x32
 8000c5a:	491d      	ldr	r1, [pc, #116]	; (8000cd0 <HistoryOnOffUSI+0x84>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 fd23 	bl	80086a8 <f_open>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000c68:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <HistoryOnOffUSI+0x32>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <HistoryOnOffUSI+0x8c>)
 8000c78:	f003 f8b0 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000c7c:	e7fe      	b.n	8000c7c <HistoryOnOffUSI+0x30>
	}
	//Записываем количество данных
	fres = f_write(&filInform, "Power On\n", 9, &bytesWroteInform);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	f107 0008 	add.w	r0, r7, #8
 8000c84:	2209      	movs	r2, #9
 8000c86:	4915      	ldr	r1, [pc, #84]	; (8000cdc <HistoryOnOffUSI+0x90>)
 8000c88:	f008 f80b 	bl	8008ca2 <f_write>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000c92:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 f9f5 	bl	8009088 <f_close>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000ca4:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <HistoryOnOffUSI+0x6e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HistoryOnOffUSI+0x8c>)
 8000cb4:	f003 f892 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000cb8:	e7fe      	b.n	8000cb8 <HistoryOnOffUSI+0x6c>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HistoryOnOffUSI+0x8c>)
 8000cc0:	f003 f88c 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8000cc4:	bf00      	nop
 8000cc6:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08009204 	.word	0x08009204
 8000cd4:	20000810 	.word	0x20000810
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	08009250 	.word	0x08009250

08000ce0 <SyncCKT>:
	}
	ResolveSDWrite=0; // закрываем доступ к записи на SD данных с ЦКТ
}
// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <SyncCKT+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10d      	bne.n	8000d08 <SyncCKT+0x28>
	{
		readFlag=0;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <SyncCKT+0x2c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f002 f988 	bl	8003008 <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <SyncCKT+0x30>)
 8000cfa:	f005 f809 	bl	8005d10 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000cfe:	222b      	movs	r2, #43	; 0x2b
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <SyncCKT+0x34>)
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <SyncCKT+0x30>)
 8000d04:	f004 ff84 	bl	8005c10 <HAL_UART_Receive_DMA>
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000716 	.word	0x20000716
 8000d10:	20000494 	.word	0x20000494
 8000d14:	20000410 	.word	0x20000410

08000d18 <CommandToRadio>:
// Функция передачи по радиоканалу
void CommandToRadio(uint8_t Comm)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e00a      	b.n	8000d3e <CommandToRadio+0x26>
	{
		TX_RX_Radio[i+1]=BuffMidW[i+4];
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	1d1a      	adds	r2, r3, #4
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	491b      	ldr	r1, [pc, #108]	; (8000da0 <CommandToRadio+0x88>)
 8000d32:	5c89      	ldrb	r1, [r1, r2]
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <CommandToRadio+0x8c>)
 8000d36:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	2b26      	cmp	r3, #38	; 0x26
 8000d42:	d9f1      	bls.n	8000d28 <CommandToRadio+0x10>
	}
	// заносим в 1 элемент 4 команду
	TX_RX_Radio[0]=Comm;
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <CommandToRadio+0x8c>)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	7013      	strb	r3, [r2, #0]
	// Отсылаем ответ
	Rf96_Lora_TX_mode();
 8000d4a:	f7ff fd5e 	bl	800080a <Rf96_Lora_TX_mode>
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000d4e:	2128      	movs	r1, #40	; 0x28
 8000d50:	4814      	ldr	r0, [pc, #80]	; (8000da4 <CommandToRadio+0x8c>)
 8000d52:	f7ff fda3 	bl	800089c <Crc16>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <CommandToRadio+0x90>)
 8000d5c:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <CommandToRadio+0x90>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <CommandToRadio+0x8c>)
 8000d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <CommandToRadio+0x90>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <CommandToRadio+0x8c>)
 8000d76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000d7a:	2080      	movs	r0, #128	; 0x80
 8000d7c:	f7ff fcb2 	bl	80006e4 <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 8000d80:	2080      	movs	r0, #128	; 0x80
 8000d82:	f7ff fccb 	bl	800071c <Rf96_FIFO_point>
	// Очистка флагов
	Rf96_LoRaClearIrq();
 8000d86:	f7ff fbbd 	bl	8000504 <Rf96_LoRaClearIrq>
	// Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000d8a:	212a      	movs	r1, #42	; 0x2a
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <CommandToRadio+0x8c>)
 8000d8e:	f7ff fd74 	bl	800087a <Rf96_LoRaTxPacket>
	// следующее Прерывание будет по передаче
	ModeRadio=1;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <CommandToRadio+0x94>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000678 	.word	0x20000678
 8000da4:	200003e4 	.word	0x200003e4
 8000da8:	20000068 	.word	0x20000068
 8000dac:	2000006d 	.word	0x2000006d

08000db0 <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	// Запрещаем запись на SD
	ResolveSDWrite=0;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <RXCommande1+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
	// Запись в память номера файла, на котором мы находимся
	CountFileNow=ReadNumofFileSD();
 8000dba:	f7ff fde9 	bl	8000990 <ReadNumofFileSD>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <RXCommande1+0xb0>)
 8000dc4:	701a      	strb	r2, [r3, #0]
	if(CountFileNow>=9) CountFileNow=0;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <RXCommande1+0xb0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d902      	bls.n	8000dd4 <RXCommande1+0x24>
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <RXCommande1+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
	CountFileNow++;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <RXCommande1+0xb0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <RXCommande1+0xb0>)
 8000dde:	701a      	strb	r2, [r3, #0]
	WriteNumofFileSD(CountFileNow);
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <RXCommande1+0xb0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe75 	bl	8000ad4 <WriteNumofFileSD>
	//Записываем команду в историю
	CommandHistoryWrite(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff fec6 	bl	8000b7c <CommandHistoryWrite>
	// создаем новый файл и сразу его закрываем
	fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_CREATE_ALWAYS | FA_WRITE);
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <RXCommande1+0xb0>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <RXCommande1+0xb4>)
 8000e00:	4413      	add	r3, r2
 8000e02:	220a      	movs	r2, #10
 8000e04:	4619      	mov	r1, r3
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <RXCommande1+0xb8>)
 8000e08:	f007 fc4e 	bl	80086a8 <f_open>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <RXCommande1+0xbc>)
 8000e12:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <RXCommande1+0xbc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <RXCommande1+0x78>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <RXCommande1+0xc0>)
 8000e22:	f002 ffdb 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000e26:	e7fe      	b.n	8000e26 <RXCommande1+0x76>
	}
	// Закрытие файла и sd карты
	fres=f_close(&fil);
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <RXCommande1+0xb8>)
 8000e2a:	f008 f92d 	bl	8009088 <f_close>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <RXCommande1+0xbc>)
 8000e34:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <RXCommande1+0xbc>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <RXCommande1+0x9a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2102      	movs	r1, #2
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <RXCommande1+0xc0>)
 8000e44:	f002 ffca 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 8000e48:	e7fe      	b.n	8000e48 <RXCommande1+0x98>
	}
	// Открываем доступ к записи на SD
	ResolveSDWrite=1;
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <RXCommande1+0xac>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
	// Отсылаем ответ
	CommandToRadio(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ff61 	bl	8000d18 <CommandToRadio>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000006a 	.word	0x2000006a
 8000e60:	2000006c 	.word	0x2000006c
 8000e64:	080092b8 	.word	0x080092b8
 8000e68:	20000814 	.word	0x20000814
 8000e6c:	20000810 	.word	0x20000810
 8000e70:	40020800 	.word	0x40020800

08000e74 <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <RXCommande2+0x20>)
 8000e80:	f002 ffac 	bl	8003ddc <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(2);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f7ff fe79 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(2);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff ff44 	bl	8000d18 <CommandToRadio>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020400 	.word	0x40020400

08000e98 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <RXCommande3+0x48>)
 8000ea4:	f002 ff9a 	bl	8003ddc <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(3);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff fe67 	bl	8000b7c <CommandHistoryWrite>
    if(TX_RX_Radio[1]==0)
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <RXCommande3+0x4c>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d104      	bne.n	8000ec0 <RXCommande3+0x28>
    {
        // Запускаем задержку
        UserDelayStart(5000);
 8000eb6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000eba:	f7ff fd1b 	bl	80008f4 <UserDelayStart>
 8000ebe:	e009      	b.n	8000ed4 <RXCommande3+0x3c>
    } else
    {
    	// Запускаем задержку
    	UserDelayStart((uint32_t)(TX_RX_Radio[1]*1000));
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <RXCommande3+0x4c>)
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fb03 f302 	mul.w	r3, r3, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fd10 	bl	80008f4 <UserDelayStart>
    }
	// Отсылаем ответ
    CommandToRadio(3);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f7ff ff1f 	bl	8000d18 <CommandToRadio>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	200003e4 	.word	0x200003e4

08000ee8 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	// Отсылаем ответ
	CommandToRadio(4);
 8000eec:	2004      	movs	r0, #4
 8000eee:	f7ff ff13 	bl	8000d18 <CommandToRadio>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	// запрещаем запись на SD
	ResolveSDWrite=0;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <RXCommande5+0x1c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    //Записываем команду в историю
    CommandHistoryWrite(5);
 8000f02:	2005      	movs	r0, #5
 8000f04:	f7ff fe3a 	bl	8000b7c <CommandHistoryWrite>
    // Отсылаем ответ
    CommandToRadio(5);
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f7ff ff05 	bl	8000d18 <CommandToRadio>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000006a 	.word	0x2000006a

08000f18 <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <RXCommande6+0x20>)
 8000f24:	f002 ff5a 	bl	8003ddc <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(6);
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fe27 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(6);
 8000f2e:	2006      	movs	r0, #6
 8000f30:	f7ff fef2 	bl	8000d18 <CommandToRadio>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020400 	.word	0x40020400

08000f3c <RXCommande7>:
// Команда закрытия клапана
void RXCommande7(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	// Подаем единицу на оптопару
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2104      	movs	r1, #4
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <RXCommande7+0x20>)
 8000f46:	f002 ff49 	bl	8003ddc <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(7);
 8000f4a:	2007      	movs	r0, #7
 8000f4c:	f7ff fe16 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(7);
 8000f50:	2007      	movs	r0, #7
 8000f52:	f7ff fee1 	bl	8000d18 <CommandToRadio>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020400 	.word	0x40020400

08000f60 <RXCommande8>:
// Команда закрытия клапана
void RXCommande8(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	// Подаем нуля на оптопару
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2104      	movs	r1, #4
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <RXCommande8+0x20>)
 8000f6a:	f002 ff37 	bl	8003ddc <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(8);
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff fe04 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(8);
 8000f74:	2008      	movs	r0, #8
 8000f76:	f7ff fecf 	bl	8000d18 <CommandToRadio>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400

08000f84 <DataConv>:
// Парсер
void DataConv(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <DataConv+0x60>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	2308      	movs	r3, #8
 8000f90:	2200      	movs	r2, #0
 8000f92:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <DataConv+0x64>)
 8000f94:	f7ff fcc2 	bl	800091c <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	e017      	b.n	8000fce <DataConv+0x4a>
	{
		uint32_TO_charmass(BuffMidW[i+4], SDbufWrite, 9+i*4, 3);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <DataConv+0x68>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3309      	adds	r3, #9
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <DataConv+0x64>)
 8000fb8:	f7ff fcb0 	bl	800091c <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <DataConv+0x64>)
 8000fc4:	212c      	movs	r1, #44	; 0x2c
 8000fc6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b25      	cmp	r3, #37	; 0x25
 8000fd2:	d9e4      	bls.n	8000f9e <DataConv+0x1a>
	}
	SDbufWrite[160]='\n';
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <DataConv+0x64>)
 8000fd6:	220a      	movs	r2, #10
 8000fd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000064 	.word	0x20000064
 8000fe8:	200005d4 	.word	0x200005d4
 8000fec:	20000678 	.word	0x20000678

08000ff0 <CKTcrc>:
// Расчет CRC8 с ЦКТ
uint8_t CKTcrc(uint8_t* data, uint8_t len)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	uint8_t sign=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=4;i<len;i++)
 8001000:	2304      	movs	r3, #4
 8001002:	73bb      	strb	r3, [r7, #14]
 8001004:	e018      	b.n	8001038 <CKTcrc+0x48>
	{
		sign+=data[i];
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	4413      	add	r3, r2
 8001012:	73fb      	strb	r3, [r7, #15]
		if(sign & 0x80)
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da07      	bge.n	800102c <CKTcrc+0x3c>
		{
			sign=sign<<1;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
			sign|=0x01;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e002      	b.n	8001032 <CKTcrc+0x42>
		} else sign=sign<<1;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=4;i<len;i++)
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	3301      	adds	r3, #1
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	7bba      	ldrb	r2, [r7, #14]
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3e2      	bcc.n	8001006 <CKTcrc+0x16>
	}
	return sign;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f001 ff66 	bl	8002f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f950 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 fbac 	bl	80017b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001060:	f000 fb64 	bl	800172c <MX_DMA_Init>
  MX_SPI1_Init();
 8001064:	f000 f9bc 	bl	80013e0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001068:	f000 fb0c 	bl	8001684 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800106c:	f000 fb34 	bl	80016d8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001070:	f000 fade 	bl	8001630 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001074:	f005 fd2c 	bl	8006ad0 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001078:	f000 f9e8 	bl	800144c <MX_SPI3_Init>
  MX_UART5_Init();
 800107c:	f000 faac 	bl	80015d8 <MX_UART5_Init>
  MX_TIM6_Init();
 8001080:	f000 fa1a 	bl	80014b8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001084:	f000 fa4e 	bl	8001524 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001088:	f000 fa82 	bl	8001590 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// �?ндикация включения УС�? ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	4886      	ldr	r0, [pc, #536]	; (80012ac <main+0x25c>)
 8001092:	f002 fea3 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001096:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800109a:	f001 ffb5 	bl	8003008 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2104      	movs	r1, #4
 80010a2:	4882      	ldr	r0, [pc, #520]	; (80012ac <main+0x25c>)
 80010a4:	f002 fe9a 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80010a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ac:	f001 ffac 	bl	8003008 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2108      	movs	r1, #8
 80010b4:	487d      	ldr	r0, [pc, #500]	; (80012ac <main+0x25c>)
 80010b6:	f002 fe91 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80010ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010be:	f001 ffa3 	bl	8003008 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2102      	movs	r1, #2
 80010c6:	4879      	ldr	r0, [pc, #484]	; (80012ac <main+0x25c>)
 80010c8:	f002 fe88 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2104      	movs	r1, #4
 80010d0:	4876      	ldr	r0, [pc, #472]	; (80012ac <main+0x25c>)
 80010d2:	f002 fe83 	bl	8003ddc <HAL_GPIO_WritePin>

    // Монтирование флешки
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80010d6:	2201      	movs	r2, #1
 80010d8:	4975      	ldr	r1, [pc, #468]	; (80012b0 <main+0x260>)
 80010da:	4876      	ldr	r0, [pc, #472]	; (80012b4 <main+0x264>)
 80010dc:	f007 fa9e 	bl	800861c <f_mount>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b74      	ldr	r3, [pc, #464]	; (80012b8 <main+0x268>)
 80010e6:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 80010e8:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <main+0x268>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <main+0xac>
	{ // Если проблема с флешкой  выключаем 1 светодиод
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2102      	movs	r1, #2
 80010f4:	486d      	ldr	r0, [pc, #436]	; (80012ac <main+0x25c>)
 80010f6:	f002 fe71 	bl	8003ddc <HAL_GPIO_WritePin>
		while(1);
 80010fa:	e7fe      	b.n	80010fa <main+0xaa>
	}
	// Создание файла infoSD.txt
	ReadNumofFileSD();
 80010fc:	f7ff fc48 	bl	8000990 <ReadNumofFileSD>
	// Запись в историю информацию о подаче питания
	HistoryOnOffUSI();
 8001100:	f7ff fda4 	bl	8000c4c <HistoryOnOffUSI>
	// �?нициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8001104:	f7ff fb55 	bl	80007b2 <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 8001108:	f7ff fb9a 	bl	8000840 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 800110c:	222b      	movs	r2, #43	; 0x2b
 800110e:	496b      	ldr	r1, [pc, #428]	; (80012bc <main+0x26c>)
 8001110:	486b      	ldr	r0, [pc, #428]	; (80012c0 <main+0x270>)
 8001112:	f004 fd7d 	bl	8005c10 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 8001116:	486b      	ldr	r0, [pc, #428]	; (80012c4 <main+0x274>)
 8001118:	f004 fa7d 	bl	8005616 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 800111c:	f7ff fde0 	bl	8000ce0 <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	4868      	ldr	r0, [pc, #416]	; (80012c8 <main+0x278>)
 8001126:	f002 fe41 	bl	8003dac <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d05f      	beq.n	80011f0 <main+0x1a0>
		{
			if(ModeRadio==0) // если прерывание по приему
 8001130:	4b66      	ldr	r3, [pc, #408]	; (80012cc <main+0x27c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d14e      	bne.n	80011d6 <main+0x186>
			{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8001138:	4865      	ldr	r0, [pc, #404]	; (80012d0 <main+0x280>)
 800113a:	f7ff fb1d 	bl	8000778 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 800113e:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <main+0x280>)
 8001140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001144:	b29b      	uxth	r3, r3
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <main+0x280>)
 800114c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001150:	b29b      	uxth	r3, r3
 8001152:	4413      	add	r3, r2
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <main+0x284>)
 8001158:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 800115a:	f7ff f9d3 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 800115e:	2128      	movs	r1, #40	; 0x28
 8001160:	485b      	ldr	r0, [pc, #364]	; (80012d0 <main+0x280>)
 8001162:	f7ff fb9b 	bl	800089c <Crc16>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <main+0x284>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d13e      	bne.n	80011f0 <main+0x1a0>
			{
				switch(TX_RX_Radio[CommIndex])
 8001172:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <main+0x280>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3b01      	subs	r3, #1
 8001178:	2b07      	cmp	r3, #7
 800117a:	d839      	bhi.n	80011f0 <main+0x1a0>
 800117c:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <main+0x134>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	080011a5 	.word	0x080011a5
 8001188:	080011ab 	.word	0x080011ab
 800118c:	080011b1 	.word	0x080011b1
 8001190:	080011b7 	.word	0x080011b7
 8001194:	080011bd 	.word	0x080011bd
 8001198:	080011c3 	.word	0x080011c3
 800119c:	080011c9 	.word	0x080011c9
 80011a0:	080011cf 	.word	0x080011cf
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 80011a4:	f7ff fe04 	bl	8000db0 <RXCommande1>
					break;
 80011a8:	e022      	b.n	80011f0 <main+0x1a0>
				case 2:   // Команда открытия клапана
					RXCommande2();
 80011aa:	f7ff fe63 	bl	8000e74 <RXCommande2>
					break;
 80011ae:	e01f      	b.n	80011f0 <main+0x1a0>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 80011b0:	f7ff fe72 	bl	8000e98 <RXCommande3>
					break;
 80011b4:	e01c      	b.n	80011f0 <main+0x1a0>
				case 4:   // Команда запроса данных
					RXCommande4();
 80011b6:	f7ff fe97 	bl	8000ee8 <RXCommande4>
					break;
 80011ba:	e019      	b.n	80011f0 <main+0x1a0>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 80011bc:	f7ff fe9c 	bl	8000ef8 <RXCommande5>
					break;
 80011c0:	e016      	b.n	80011f0 <main+0x1a0>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 80011c2:	f7ff fea9 	bl	8000f18 <RXCommande6>
					break;
 80011c6:	e013      	b.n	80011f0 <main+0x1a0>
				case 7:// Подача еденицы на оптопару на закрытие двигателя
					RXCommande7();
 80011c8:	f7ff feb8 	bl	8000f3c <RXCommande7>
					break;
 80011cc:	e010      	b.n	80011f0 <main+0x1a0>
				case 8: // Снятие еденицы с оптопары на закрытие двигателя
					RXCommande8();
 80011ce:	f7ff fec7 	bl	8000f60 <RXCommande8>
					break;
 80011d2:	bf00      	nop
 80011d4:	e00c      	b.n	80011f0 <main+0x1a0>
				}
			}
			} else if(ModeRadio==1) // если прерывание по передаче
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <main+0x27c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <main+0x1a0>
			{
				ModeRadio=0;
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <main+0x27c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
				// Сбрасываем флаги
				Rf96_LoRaClearIrq();
 80011e4:	f7ff f98e 	bl	8000504 <Rf96_LoRaClearIrq>
	            // Заходим в Standby
				Rf96_Standby();
 80011e8:	f7ff f994 	bl	8000514 <Rf96_Standby>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 80011ec:	f7ff fb28 	bl	8000840 <Rf96_Lora_RX_mode>
			}
		}
		//  Если разрешена запись на Sd карту и если есть что записывать
		if(ResolveSDWrite==1 && ReadyToWrite==1)
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <main+0x288>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d149      	bne.n	800128c <main+0x23c>
 80011f8:	4b38      	ldr	r3, [pc, #224]	; (80012dc <main+0x28c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d145      	bne.n	800128c <main+0x23c>
		{
			// Запись на SD
			DataConv();
 8001200:	f7ff fec0 	bl	8000f84 <DataConv>
			// создаем новый файл
			fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_OPEN_APPEND | FA_WRITE);
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <main+0x290>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4a34      	ldr	r2, [pc, #208]	; (80012e4 <main+0x294>)
 8001214:	4413      	add	r3, r2
 8001216:	2232      	movs	r2, #50	; 0x32
 8001218:	4619      	mov	r1, r3
 800121a:	4833      	ldr	r0, [pc, #204]	; (80012e8 <main+0x298>)
 800121c:	f007 fa44 	bl	80086a8 <f_open>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <main+0x268>)
 8001226:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <main+0x268>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <main+0x1ec>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	2102      	movs	r1, #2
 8001234:	481d      	ldr	r0, [pc, #116]	; (80012ac <main+0x25c>)
 8001236:	f002 fdd1 	bl	8003ddc <HAL_GPIO_WritePin>
				while(1);
 800123a:	e7fe      	b.n	800123a <main+0x1ea>
			}
			fres = f_write(&fil, SDbufWrite, 161, &bytesWrote);
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <main+0x29c>)
 800123e:	22a1      	movs	r2, #161	; 0xa1
 8001240:	492b      	ldr	r1, [pc, #172]	; (80012f0 <main+0x2a0>)
 8001242:	4829      	ldr	r0, [pc, #164]	; (80012e8 <main+0x298>)
 8001244:	f007 fd2d 	bl	8008ca2 <f_write>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <main+0x268>)
 800124e:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <main+0x268>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <main+0x214>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2102      	movs	r1, #2
 800125c:	4813      	ldr	r0, [pc, #76]	; (80012ac <main+0x25c>)
 800125e:	f002 fdbd 	bl	8003ddc <HAL_GPIO_WritePin>
				while(1);
 8001262:	e7fe      	b.n	8001262 <main+0x212>
			}
			// Закрытие файла и sd карты
			fres=f_close(&fil);
 8001264:	4820      	ldr	r0, [pc, #128]	; (80012e8 <main+0x298>)
 8001266:	f007 ff0f 	bl	8009088 <f_close>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <main+0x268>)
 8001270:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <main+0x268>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <main+0x236>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	2102      	movs	r1, #2
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <main+0x25c>)
 8001280:	f002 fdac 	bl	8003ddc <HAL_GPIO_WritePin>
				while(1);
 8001284:	e7fe      	b.n	8001284 <main+0x234>
			}
            // Нечего записывать
			ReadyToWrite=0;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <main+0x28c>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
		}
		// Окончание задержки
		if(Timeout==1)
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <main+0x2a4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	f47f af43 	bne.w	800111c <main+0xcc>
		{
			// Для 3 команды
			// Убираем единицу с двигателя
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <main+0x2a8>)
 800129e:	f002 fd9d 	bl	8003ddc <HAL_GPIO_WritePin>
			Timeout=0;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <main+0x2a4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 80012a8:	e738      	b.n	800111c <main+0xcc>
 80012aa:	bf00      	nop
 80012ac:	40020800 	.word	0x40020800
 80012b0:	0800925c 	.word	0x0800925c
 80012b4:	20000150 	.word	0x20000150
 80012b8:	20000810 	.word	0x20000810
 80012bc:	20000410 	.word	0x20000410
 80012c0:	20000494 	.word	0x20000494
 80012c4:	20000380 	.word	0x20000380
 80012c8:	40020000 	.word	0x40020000
 80012cc:	2000006d 	.word	0x2000006d
 80012d0:	200003e4 	.word	0x200003e4
 80012d4:	20000068 	.word	0x20000068
 80012d8:	2000006a 	.word	0x2000006a
 80012dc:	2000006b 	.word	0x2000006b
 80012e0:	2000006c 	.word	0x2000006c
 80012e4:	080092b8 	.word	0x080092b8
 80012e8:	20000814 	.word	0x20000814
 80012ec:	200003e0 	.word	0x200003e0
 80012f0:	200005d4 	.word	0x200005d4
 80012f4:	20000075 	.word	0x20000075
 80012f8:	40020400 	.word	0x40020400

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2234      	movs	r2, #52	; 0x34
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 ff66 	bl	80091dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <SystemClock_Config+0xdc>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <SystemClock_Config+0xdc>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <SystemClock_Config+0xdc>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <SystemClock_Config+0xe0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <SystemClock_Config+0xe0>)
 8001346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <SystemClock_Config+0xe0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001358:	2302      	movs	r3, #2
 800135a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001360:	2310      	movs	r3, #16
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001368:	2300      	movs	r3, #0
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800136c:	2308      	movs	r3, #8
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001370:	23b4      	movs	r3, #180	; 0xb4
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001378:	2302      	movs	r3, #2
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4618      	mov	r0, r3
 8001386:	f003 f84d 	bl	8004424 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001390:	f000 fbbe 	bl	8001b10 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001394:	f002 fd3c 	bl	8003e10 <HAL_PWREx_EnableOverDrive>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800139e:	f000 fbb7 	bl	8001b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2105      	movs	r1, #5
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fd75 	bl	8003eb0 <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80013cc:	f000 fba0 	bl	8001b10 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3750      	adds	r7, #80	; 0x50
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_SPI1_Init+0x64>)
 80013e6:	4a18      	ldr	r2, [pc, #96]	; (8001448 <MX_SPI1_Init+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_SPI1_Init+0x64>)
 80013ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_SPI1_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_SPI1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_SPI1_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_SPI1_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_SPI1_Init+0x64>)
 800140c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001410:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_SPI1_Init+0x64>)
 8001414:	2210      	movs	r2, #16
 8001416:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_SPI1_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_SPI1_Init+0x64>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_SPI1_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_SPI1_Init+0x64>)
 800142c:	220a      	movs	r2, #10
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_SPI1_Init+0x64>)
 8001432:	f003 fa51 	bl	80048d8 <HAL_SPI_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800143c:	f000 fb68 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000718 	.word	0x20000718
 8001448:	40013000 	.word	0x40013000

0800144c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <MX_SPI3_Init+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_SPI3_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_SPI3_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_SPI3_Init+0x64>)
 8001498:	220a      	movs	r2, #10
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_SPI3_Init+0x64>)
 800149e:	f003 fa1b 	bl	80048d8 <HAL_SPI_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80014a8:	f000 fb32 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000043c 	.word	0x2000043c
 80014b4:	40003c00 	.word	0x40003c00

080014b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_TIM6_Init+0x64>)
 80014c8:	4a15      	ldr	r2, [pc, #84]	; (8001520 <MX_TIM6_Init+0x68>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_TIM6_Init+0x64>)
 80014ce:	f242 3227 	movw	r2, #8999	; 0x2327
 80014d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_TIM6_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_TIM6_Init+0x64>)
 80014dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_TIM6_Init+0x64>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_TIM6_Init+0x64>)
 80014ea:	f004 f869 	bl	80055c0 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014f4:	f000 fb0c 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_TIM6_Init+0x64>)
 8001506:	f004 faa5 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 fafe 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200006a4 	.word	0x200006a4
 8001520:	40001000 	.word	0x40001000

08001524 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_TIM7_Init+0x64>)
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_TIM7_Init+0x68>)
 8001536:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_TIM7_Init+0x64>)
 800153a:	f242 3227 	movw	r2, #8999	; 0x2327
 800153e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_TIM7_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_TIM7_Init+0x64>)
 8001548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_TIM7_Init+0x64>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_TIM7_Init+0x64>)
 8001556:	f004 f833 	bl	80055c0 <HAL_TIM_Base_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001560:	f000 fad6 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_TIM7_Init+0x64>)
 8001572:	f004 fa6f 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800157c:	f000 fac8 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000a44 	.word	0x20000a44
 800158c:	40001400 	.word	0x40001400

08001590 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_TIM10_Init+0x40>)
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <MX_TIM10_Init+0x44>)
 8001598:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_TIM10_Init+0x40>)
 800159c:	f242 3227 	movw	r2, #8999	; 0x2327
 80015a0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_TIM10_Init+0x40>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_TIM10_Init+0x40>)
 80015aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80015ae:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_TIM10_Init+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_TIM10_Init+0x40>)
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_TIM10_Init+0x40>)
 80015be:	f003 ffff 	bl	80055c0 <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80015c8:	f000 faa2 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000380 	.word	0x20000380
 80015d4:	40014400 	.word	0x40014400

080015d8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_UART5_Init+0x50>)
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <MX_UART5_Init+0x54>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_UART5_Init+0x50>)
 80015e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_UART5_Init+0x50>)
 80015ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f0:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_UART5_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_UART5_Init+0x50>)
 80015fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_UART5_Init+0x50>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_UART5_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_UART5_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_UART5_Init+0x50>)
 8001614:	f004 faae 	bl	8005b74 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 800161e:	f000 fa77 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000494 	.word	0x20000494
 800162c:	40005000 	.word	0x40005000

08001630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_USART1_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_USART1_UART_Init+0x4c>)
 800163c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART1_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART1_UART_Init+0x4c>)
 8001668:	f004 fa84 	bl	8005b74 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001672:	f000 fa4d 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000594 	.word	0x20000594
 8001680:	40011000 	.word	0x40011000

08001684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f004 fa5a 	bl	8005b74 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 fa23 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000770 	.word	0x20000770
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <MX_USART3_UART_Init+0x50>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 80016e4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80016e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USART3_UART_Init+0x4c>)
 8001710:	f004 fa30 	bl	8005b74 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800171a:	f000 f9f9 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000110 	.word	0x20000110
 8001728:	40004800 	.word	0x40004800

0800172c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_DMA_Init+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <MX_DMA_Init+0x88>)
 800173c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_DMA_Init+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_DMA_Init+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <MX_DMA_Init+0x88>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_DMA_Init+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	200b      	movs	r0, #11
 8001770:	f001 fd47 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001774:	200b      	movs	r0, #11
 8001776:	f001 fd60 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	200c      	movs	r0, #12
 8001780:	f001 fd3f 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001784:	200c      	movs	r0, #12
 8001786:	f001 fd58 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2011      	movs	r0, #17
 8001790:	f001 fd37 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001794:	2011      	movs	r0, #17
 8001796:	f001 fd50 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	203a      	movs	r0, #58	; 0x3a
 80017a0:	f001 fd2f 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017a4:	203a      	movs	r0, #58	; 0x3a
 80017a6:	f001 fd48 	bl	800323a <HAL_NVIC_EnableIRQ>

}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <MX_GPIO_Init+0x1b8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a66      	ldr	r2, [pc, #408]	; (8001970 <MX_GPIO_Init+0x1b8>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b64      	ldr	r3, [pc, #400]	; (8001970 <MX_GPIO_Init+0x1b8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b60      	ldr	r3, [pc, #384]	; (8001970 <MX_GPIO_Init+0x1b8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a5f      	ldr	r2, [pc, #380]	; (8001970 <MX_GPIO_Init+0x1b8>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <MX_GPIO_Init+0x1b8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b59      	ldr	r3, [pc, #356]	; (8001970 <MX_GPIO_Init+0x1b8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <MX_GPIO_Init+0x1b8>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b56      	ldr	r3, [pc, #344]	; (8001970 <MX_GPIO_Init+0x1b8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b52      	ldr	r3, [pc, #328]	; (8001970 <MX_GPIO_Init+0x1b8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a51      	ldr	r2, [pc, #324]	; (8001970 <MX_GPIO_Init+0x1b8>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <MX_GPIO_Init+0x1b8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	210e      	movs	r1, #14
 8001842:	484c      	ldr	r0, [pc, #304]	; (8001974 <MX_GPIO_Init+0x1bc>)
 8001844:	f002 faca 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f248 0113 	movw	r1, #32787	; 0x8013
 800184e:	484a      	ldr	r0, [pc, #296]	; (8001978 <MX_GPIO_Init+0x1c0>)
 8001850:	f002 fac4 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800185a:	4846      	ldr	r0, [pc, #280]	; (8001974 <MX_GPIO_Init+0x1bc>)
 800185c:	f002 fabe 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|SSV_Pin|acel2_Pin 
 8001860:	2200      	movs	r2, #0
 8001862:	f24f 0146 	movw	r1, #61510	; 0xf046
 8001866:	4845      	ldr	r0, [pc, #276]	; (800197c <MX_GPIO_Init+0x1c4>)
 8001868:	f002 fab8 	bl	8003ddc <HAL_GPIO_WritePin>
                          |acel2_2_Pin|Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <MX_GPIO_Init+0x1c8>)
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	483c      	ldr	r0, [pc, #240]	; (8001974 <MX_GPIO_Init+0x1bc>)
 8001882:	f002 f901 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001886:	230e      	movs	r3, #14
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4835      	ldr	r0, [pc, #212]	; (8001974 <MX_GPIO_Init+0x1bc>)
 800189e:	f002 f8f3 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 80018a2:	f248 0313 	movw	r3, #32787	; 0x8013
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	482f      	ldr	r0, [pc, #188]	; (8001978 <MX_GPIO_Init+0x1c0>)
 80018bc:	f002 f8e4 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 80018c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4826      	ldr	r0, [pc, #152]	; (8001974 <MX_GPIO_Init+0x1bc>)
 80018da:	f002 f8d5 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018de:	2302      	movs	r3, #2
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4821      	ldr	r0, [pc, #132]	; (800197c <MX_GPIO_Init+0x1c4>)
 80018f6:	f002 f8c7 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 SSV_Pin acel2_2_Pin Motor_Pin 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SSV_Pin|acel2_2_Pin|Motor_Pin 
 80018fa:	f24d 0344 	movw	r3, #53316	; 0xd044
 80018fe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	481a      	ldr	r0, [pc, #104]	; (800197c <MX_GPIO_Init+0x1c4>)
 8001914:	f002 f8b8 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4812      	ldr	r0, [pc, #72]	; (800197c <MX_GPIO_Init+0x1c4>)
 8001932:	f002 f8a9 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	480b      	ldr	r0, [pc, #44]	; (8001978 <MX_GPIO_Init+0x1c0>)
 800194c:	f002 f89c 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001950:	2338      	movs	r3, #56	; 0x38
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_GPIO_Init+0x1c4>)
 8001964:	f002 f890 	bl	8003a88 <HAL_GPIO_Init>

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	40020800 	.word	0x40020800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400
 8001980:	10210000 	.word	0x10210000

08001984 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a2d      	ldr	r2, [pc, #180]	; (8001a44 <HAL_UART_RxCpltCallback+0xc0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d152      	bne.n	8001a3a <HAL_UART_RxCpltCallback+0xb6>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 8001994:	482c      	ldr	r0, [pc, #176]	; (8001a48 <HAL_UART_RxCpltCallback+0xc4>)
 8001996:	f003 fe62 	bl	800565e <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_UART_RxCpltCallback+0xc8>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2104      	movs	r1, #4
 80019a4:	482a      	ldr	r0, [pc, #168]	; (8001a50 <HAL_UART_RxCpltCallback+0xcc>)
 80019a6:	f002 fa19 	bl	8003ddc <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_UART_RxCpltCallback+0xd0>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b7c      	cmp	r3, #124	; 0x7c
 80019b0:	d13b      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0xa6>
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_UART_RxCpltCallback+0xd0>)
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	2b6e      	cmp	r3, #110	; 0x6e
 80019b8:	d137      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0xa6>
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_UART_RxCpltCallback+0xd0>)
 80019bc:	789b      	ldrb	r3, [r3, #2]
 80019be:	2ba1      	cmp	r3, #161	; 0xa1
 80019c0:	d133      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0xa6>
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_UART_RxCpltCallback+0xd0>)
 80019c4:	78db      	ldrb	r3, [r3, #3]
 80019c6:	2b2c      	cmp	r3, #44	; 0x2c
 80019c8:	d12f      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0xa6>
		{
			if(CountCKT==CountOfWriteToSD)
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_UART_RxCpltCallback+0xd4>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d124      	bne.n	8001a1c <HAL_UART_RxCpltCallback+0x98>
			{
				CountCKT=0;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_UART_RxCpltCallback+0xd4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
				// Готов к записи
				ReadyToWrite=1;
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_UART_RxCpltCallback+0xd8>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
				//  Время в мс, когда пришли данные
				reciveTime = HAL_GetTick();
 80019de:	f001 fb07 	bl	8002ff0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_UART_RxCpltCallback+0xdc>)
 80019e6:	601a      	str	r2, [r3, #0]
				//Если CRC8 с ЦКТ совпадает
				if(BuffCkt[MaxBuffOfCKT-1]==CKTcrc(BuffCkt,MaxBuffOfCKT-1))
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_UART_RxCpltCallback+0xd0>)
 80019ea:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 80019ee:	212a      	movs	r1, #42	; 0x2a
 80019f0:	4818      	ldr	r0, [pc, #96]	; (8001a54 <HAL_UART_RxCpltCallback+0xd0>)
 80019f2:	f7ff fafd 	bl	8000ff0 <CKTcrc>
 80019f6:	4603      	mov	r3, r0
 80019f8:	429c      	cmp	r4, r3
 80019fa:	d11a      	bne.n	8001a32 <HAL_UART_RxCpltCallback+0xae>
				{
					// Перезаписываем данные в массив посредник
					for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e008      	b.n	8001a14 <HAL_UART_RxCpltCallback+0x90>
					{
						BuffMidW[i]=BuffCkt[i];
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <HAL_UART_RxCpltCallback+0xd0>)
 8001a08:	5c89      	ldrb	r1, [r1, r2]
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <HAL_UART_RxCpltCallback+0xe0>)
 8001a0c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3301      	adds	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b2a      	cmp	r3, #42	; 0x2a
 8001a18:	d9f3      	bls.n	8001a02 <HAL_UART_RxCpltCallback+0x7e>
			if(CountCKT==CountOfWriteToSD)
 8001a1a:	e00a      	b.n	8001a32 <HAL_UART_RxCpltCallback+0xae>
					}
				}
			} else CountCKT++;
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_UART_RxCpltCallback+0xd4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_UART_RxCpltCallback+0xd4>)
 8001a26:	701a      	strb	r2, [r3, #0]
			if(CountCKT==CountOfWriteToSD)
 8001a28:	e003      	b.n	8001a32 <HAL_UART_RxCpltCallback+0xae>
		} else readFlag=1;  // Если данные не синхронизированы
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_UART_RxCpltCallback+0xe4>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e000      	b.n	8001a34 <HAL_UART_RxCpltCallback+0xb0>
			if(CountCKT==CountOfWriteToSD)
 8001a32:	bf00      	nop
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <HAL_UART_RxCpltCallback+0xc4>)
 8001a36:	f003 fdee 	bl	8005616 <HAL_TIM_Base_Start_IT>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000494 	.word	0x20000494
 8001a48:	20000380 	.word	0x20000380
 8001a4c:	40014400 	.word	0x40014400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	20000410 	.word	0x20000410
 8001a58:	20000076 	.word	0x20000076
 8001a5c:	2000006b 	.word	0x2000006b
 8001a60:	20000064 	.word	0x20000064
 8001a64:	20000678 	.word	0x20000678
 8001a68:	20000716 	.word	0x20000716

08001a6c <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d112      	bne.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a84:	f003 fdc7 	bl	8005616 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a8e:	f002 f9a5 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a94:	f004 f93c 	bl	8005d10 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8001a98:	222b      	movs	r2, #43	; 0x2b
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a9e:	f004 f8b7 	bl	8005c10 <HAL_UART_Receive_DMA>
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000380 	.word	0x20000380
 8001ab0:	40014400 	.word	0x40014400
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	20000494 	.word	0x20000494
 8001abc:	20000410 	.word	0x20000410

08001ac0 <SysTick_Handler>:

// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <SysTick_Handler+0x40>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d114      	bne.n	8001af6 <SysTick_Handler+0x36>
	{
		if(Ms_Delay<TimeDelay)
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <SysTick_Handler+0x44>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <SysTick_Handler+0x48>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d205      	bcs.n	8001ae4 <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <SysTick_Handler+0x44>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <SysTick_Handler+0x44>)
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e008      	b.n	8001af6 <SysTick_Handler+0x36>
		}
		else
		{
			// произошло прерывание
			Timeout=1;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <SysTick_Handler+0x4c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
			Delay_start=0;
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Handler+0x40>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Handler+0x44>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001af6:	f001 fa67 	bl	8002fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000074 	.word	0x20000074
 8001b04:	20000070 	.word	0x20000070
 8001b08:	20000020 	.word	0x20000020
 8001b0c:	20000075 	.word	0x20000075

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8001b2a:	1df9      	adds	r1, r7, #7
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <SPICmd8bit+0x20>)
 8001b32:	f002 ff35 	bl	80049a0 <HAL_SPI_Transmit>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000718 	.word	0x20000718

08001b44 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001b4e:	1df9      	adds	r1, r7, #7
 8001b50:	230a      	movs	r3, #10
 8001b52:	2201      	movs	r2, #1
 8001b54:	4803      	ldr	r0, [pc, #12]	; (8001b64 <SPIRead8bit+0x20>)
 8001b56:	f003 f857 	bl	8004c08 <HAL_SPI_Receive>

  return(RdPara);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000718 	.word	0x20000718

08001b68 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001b72:	2200      	movs	r2, #0
 8001b74:	2140      	movs	r1, #64	; 0x40
 8001b76:	480a      	ldr	r0, [pc, #40]	; (8001ba0 <SPIRead+0x38>)
 8001b78:	f002 f930 	bl	8003ddc <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffce 	bl	8001b20 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001b84:	f7ff ffde 	bl	8001b44 <SPIRead8bit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <SPIRead+0x38>)
 8001b92:	f002 f923 	bl	8003ddc <HAL_GPIO_WritePin>
  return(tmp);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	460a      	mov	r2, r1
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	480b      	ldr	r0, [pc, #44]	; (8001be8 <SPIWrite+0x44>)
 8001bba:	f002 f90f 	bl	8003ddc <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ffaa 	bl	8001b20 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ffa6 	bl	8001b20 <SPICmd8bit>
	NSS_H();
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <SPIWrite+0x44>)
 8001bda:	f002 f8ff 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020400 	.word	0x40020400

08001bec <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d91f      	bls.n	8001c42 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001c02:	2200      	movs	r2, #0
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <SPIBurstRead+0x60>)
 8001c08:	f002 f8e8 	bl	8003ddc <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff86 	bl	8001b20 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e009      	b.n	8001c2e <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	18d4      	adds	r4, r2, r3
 8001c20:	f7ff ff90 	bl	8001b44 <SPIRead8bit>
 8001c24:	4603      	mov	r3, r0
 8001c26:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3f1      	bcc.n	8001c1a <SPIBurstRead+0x2e>
      NSS_H();
 8001c36:	2201      	movs	r2, #1
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <SPIBurstRead+0x60>)
 8001c3c:	f002 f8ce 	bl	8003ddc <HAL_GPIO_WritePin>
 8001c40:	e000      	b.n	8001c44 <SPIBurstRead+0x58>
    return;
 8001c42:	bf00      	nop
  }
}
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40020400 	.word	0x40020400

08001c50 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d922      	bls.n	8001cac <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001c66:	2200      	movs	r2, #0
 8001c68:	2140      	movs	r1, #64	; 0x40
 8001c6a:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <BurstWrite+0x64>)
 8001c6c:	f002 f8b6 	bl	8003ddc <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff51 	bl	8001b20 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e009      	b.n	8001c98 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff47 	bl	8001b20 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	3301      	adds	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3f1      	bcc.n	8001c84 <BurstWrite+0x34>
    NSS_H();
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2140      	movs	r1, #64	; 0x40
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <BurstWrite+0x64>)
 8001ca6:	f002 f899 	bl	8003ddc <HAL_GPIO_WritePin>
 8001caa:	e000      	b.n	8001cae <BurstWrite+0x5e>
    return;
 8001cac:	bf00      	nop
  }
}
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40020400 	.word	0x40020400

08001cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_MspInit+0x4c>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_SPI_MspInit+0x158>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12c      	bne.n	8001d84 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d62:	23e0      	movs	r3, #224	; 0xe0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d72:	2305      	movs	r3, #5
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	483a      	ldr	r0, [pc, #232]	; (8001e68 <HAL_SPI_MspInit+0x160>)
 8001d7e:	f001 fe83 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d82:	e068      	b.n	8001e56 <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_SPI_MspInit+0x164>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d163      	bne.n	8001e56 <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_SPI_MspInit+0x15c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001df2:	2307      	movs	r3, #7
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481c      	ldr	r0, [pc, #112]	; (8001e70 <HAL_SPI_MspInit+0x168>)
 8001dfe:	f001 fe43 	bl	8003a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e14:	2306      	movs	r3, #6
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4815      	ldr	r0, [pc, #84]	; (8001e74 <HAL_SPI_MspInit+0x16c>)
 8001e20:	f001 fe32 	bl	8003a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e36:	2306      	movs	r3, #6
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <HAL_SPI_MspInit+0x16c>)
 8001e42:	f001 fe21 	bl	8003a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2033      	movs	r0, #51	; 0x33
 8001e4c:	f001 f9d9 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001e50:	2033      	movs	r0, #51	; 0x33
 8001e52:	f001 f9f2 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40013000 	.word	0x40013000
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40003c00 	.word	0x40003c00
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800

08001e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <HAL_TIM_Base_MspInit+0xb8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d116      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2036      	movs	r0, #54	; 0x36
 8001eac:	f001 f9a9 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eb0:	2036      	movs	r0, #54	; 0x36
 8001eb2:	f001 f9c2 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001eb6:	e036      	b.n	8001f26 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <HAL_TIM_Base_MspInit+0xc0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d116      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001ecc:	f043 0320 	orr.w	r3, r3, #32
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2037      	movs	r0, #55	; 0x37
 8001ee4:	f001 f98d 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ee8:	2037      	movs	r0, #55	; 0x37
 8001eea:	f001 f9a6 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8001eee:	e01a      	b.n	8001f26 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_TIM_Base_MspInit+0xc4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d115      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_TIM_Base_MspInit+0xbc>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2019      	movs	r0, #25
 8001f1c:	f001 f971 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f20:	2019      	movs	r0, #25
 8001f22:	f001 f98a 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40001000 	.word	0x40001000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40001400 	.word	0x40001400
 8001f3c:	40014400 	.word	0x40014400

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b092      	sub	sp, #72	; 0x48
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a87      	ldr	r2, [pc, #540]	; (800217c <HAL_UART_MspInit+0x23c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	f040 8083 	bne.w	800206a <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
 8001f68:	4b85      	ldr	r3, [pc, #532]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	4a84      	ldr	r2, [pc, #528]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f72:	6413      	str	r3, [r2, #64]	; 0x40
 8001f74:	4b82      	ldr	r3, [pc, #520]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f84:	4b7e      	ldr	r3, [pc, #504]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a7d      	ldr	r2, [pc, #500]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f90:	4b7b      	ldr	r3, [pc, #492]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa0:	4b77      	ldr	r3, [pc, #476]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a76      	ldr	r2, [pc, #472]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b74      	ldr	r3, [pc, #464]	; (8002180 <HAL_UART_MspInit+0x240>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	486b      	ldr	r0, [pc, #428]	; (8002184 <HAL_UART_MspInit+0x244>)
 8001fd6:	f001 fd57 	bl	8003a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fea:	2308      	movs	r3, #8
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4864      	ldr	r0, [pc, #400]	; (8002188 <HAL_UART_MspInit+0x248>)
 8001ff6:	f001 fd47 	bl	8003a88 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001ffa:	4b64      	ldr	r3, [pc, #400]	; (800218c <HAL_UART_MspInit+0x24c>)
 8001ffc:	4a64      	ldr	r2, [pc, #400]	; (8002190 <HAL_UART_MspInit+0x250>)
 8001ffe:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002000:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002006:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002008:	4b60      	ldr	r3, [pc, #384]	; (800218c <HAL_UART_MspInit+0x24c>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002014:	4b5d      	ldr	r3, [pc, #372]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201c:	4b5b      	ldr	r3, [pc, #364]	; (800218c <HAL_UART_MspInit+0x24c>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002022:	4b5a      	ldr	r3, [pc, #360]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_UART_MspInit+0x24c>)
 800202a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002030:	4b56      	ldr	r3, [pc, #344]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002036:	4b55      	ldr	r3, [pc, #340]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800203c:	4853      	ldr	r0, [pc, #332]	; (800218c <HAL_UART_MspInit+0x24c>)
 800203e:	f001 f917 	bl	8003270 <HAL_DMA_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002048:	f7ff fd62 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4f      	ldr	r2, [pc, #316]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
 8002052:	4a4e      	ldr	r2, [pc, #312]	; (800218c <HAL_UART_MspInit+0x24c>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2035      	movs	r0, #53	; 0x35
 800205e:	f001 f8d0 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002062:	2035      	movs	r0, #53	; 0x35
 8002064:	f001 f8e9 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002068:	e18e      	b.n	8002388 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_UART_MspInit+0x254>)
 8002070:	4293      	cmp	r3, r2
 8002072:	f040 8099 	bne.w	80021a8 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_UART_MspInit+0x240>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a40      	ldr	r2, [pc, #256]	; (8002180 <HAL_UART_MspInit+0x240>)
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_UART_MspInit+0x240>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
 8002096:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <HAL_UART_MspInit+0x240>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a39      	ldr	r2, [pc, #228]	; (8002180 <HAL_UART_MspInit+0x240>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_UART_MspInit+0x240>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_UART_MspInit+0x240>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_UART_MspInit+0x240>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_UART_MspInit+0x240>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020dc:	2307      	movs	r3, #7
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e4:	4619      	mov	r1, r3
 80020e6:	482c      	ldr	r0, [pc, #176]	; (8002198 <HAL_UART_MspInit+0x258>)
 80020e8:	f001 fcce 	bl	8003a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020fc:	2307      	movs	r3, #7
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002104:	4619      	mov	r1, r3
 8002106:	4825      	ldr	r0, [pc, #148]	; (800219c <HAL_UART_MspInit+0x25c>)
 8002108:	f001 fcbe 	bl	8003a88 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_UART_MspInit+0x260>)
 800210e:	4a25      	ldr	r2, [pc, #148]	; (80021a4 <HAL_UART_MspInit+0x264>)
 8002110:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002114:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002118:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_UART_MspInit+0x260>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800212c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_UART_MspInit+0x260>)
 800213c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002140:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_UART_MspInit+0x260>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800214e:	4814      	ldr	r0, [pc, #80]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002150:	f001 f88e 	bl	8003270 <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_UART_MspInit+0x21e>
      Error_Handler();
 800215a:	f7ff fcd9 	bl	8001b10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002162:	635a      	str	r2, [r3, #52]	; 0x34
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_UART_MspInit+0x260>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2025      	movs	r0, #37	; 0x25
 8002170:	f001 f847 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002174:	2025      	movs	r0, #37	; 0x25
 8002176:	f001 f860 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 800217a:	e105      	b.n	8002388 <HAL_UART_MspInit+0x448>
 800217c:	40005000 	.word	0x40005000
 8002180:	40023800 	.word	0x40023800
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	200007b0 	.word	0x200007b0
 8002190:	40026010 	.word	0x40026010
 8002194:	40011000 	.word	0x40011000
 8002198:	40020000 	.word	0x40020000
 800219c:	40020400 	.word	0x40020400
 80021a0:	200004d4 	.word	0x200004d4
 80021a4:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a78      	ldr	r2, [pc, #480]	; (8002390 <HAL_UART_MspInit+0x450>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d162      	bne.n	8002278 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	4b77      	ldr	r3, [pc, #476]	; (8002394 <HAL_UART_MspInit+0x454>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a76      	ldr	r2, [pc, #472]	; (8002394 <HAL_UART_MspInit+0x454>)
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b74      	ldr	r3, [pc, #464]	; (8002394 <HAL_UART_MspInit+0x454>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	4b70      	ldr	r3, [pc, #448]	; (8002394 <HAL_UART_MspInit+0x454>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a6f      	ldr	r2, [pc, #444]	; (8002394 <HAL_UART_MspInit+0x454>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_UART_MspInit+0x454>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021ea:	230c      	movs	r3, #12
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fa:	2307      	movs	r3, #7
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002202:	4619      	mov	r1, r3
 8002204:	4864      	ldr	r0, [pc, #400]	; (8002398 <HAL_UART_MspInit+0x458>)
 8002206:	f001 fc3f 	bl	8003a88 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800220a:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_UART_MspInit+0x45c>)
 800220c:	4a64      	ldr	r2, [pc, #400]	; (80023a0 <HAL_UART_MspInit+0x460>)
 800220e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002210:	4b62      	ldr	r3, [pc, #392]	; (800239c <HAL_UART_MspInit+0x45c>)
 8002212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002216:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002218:	4b60      	ldr	r3, [pc, #384]	; (800239c <HAL_UART_MspInit+0x45c>)
 800221a:	2240      	movs	r2, #64	; 0x40
 800221c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <HAL_UART_MspInit+0x45c>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002224:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_UART_MspInit+0x45c>)
 8002226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222c:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_UART_MspInit+0x45c>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002232:	4b5a      	ldr	r3, [pc, #360]	; (800239c <HAL_UART_MspInit+0x45c>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002238:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_UART_MspInit+0x45c>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800223e:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_UART_MspInit+0x45c>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_UART_MspInit+0x45c>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800224a:	4854      	ldr	r0, [pc, #336]	; (800239c <HAL_UART_MspInit+0x45c>)
 800224c:	f001 f810 	bl	8003270 <HAL_DMA_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002256:	f7ff fc5b 	bl	8001b10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4f      	ldr	r2, [pc, #316]	; (800239c <HAL_UART_MspInit+0x45c>)
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
 8002260:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_UART_MspInit+0x45c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2026      	movs	r0, #38	; 0x26
 800226c:	f000 ffc9 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002270:	2026      	movs	r0, #38	; 0x26
 8002272:	f000 ffe2 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8002276:	e087      	b.n	8002388 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <HAL_UART_MspInit+0x464>)
 800227e:	4293      	cmp	r3, r2
 8002280:	f040 8082 	bne.w	8002388 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	4b42      	ldr	r3, [pc, #264]	; (8002394 <HAL_UART_MspInit+0x454>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a41      	ldr	r2, [pc, #260]	; (8002394 <HAL_UART_MspInit+0x454>)
 800228e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
 8002294:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_UART_MspInit+0x454>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_UART_MspInit+0x454>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a3a      	ldr	r2, [pc, #232]	; (8002394 <HAL_UART_MspInit+0x454>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_UART_MspInit+0x454>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_UART_MspInit+0x454>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4a33      	ldr	r2, [pc, #204]	; (8002394 <HAL_UART_MspInit+0x454>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
 80022cc:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_UART_MspInit+0x454>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022d8:	2320      	movs	r3, #32
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e8:	2307      	movs	r3, #7
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f0:	4619      	mov	r1, r3
 80022f2:	482d      	ldr	r0, [pc, #180]	; (80023a8 <HAL_UART_MspInit+0x468>)
 80022f4:	f001 fbc8 	bl	8003a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800230a:	2307      	movs	r3, #7
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002312:	4619      	mov	r1, r3
 8002314:	4825      	ldr	r0, [pc, #148]	; (80023ac <HAL_UART_MspInit+0x46c>)
 8002316:	f001 fbb7 	bl	8003a88 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_UART_MspInit+0x470>)
 800231c:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <HAL_UART_MspInit+0x474>)
 800231e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002326:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_UART_MspInit+0x470>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_UART_MspInit+0x470>)
 800233e:	2200      	movs	r2, #0
 8002340:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_UART_MspInit+0x470>)
 800234a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002352:	2200      	movs	r2, #0
 8002354:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800235c:	4814      	ldr	r0, [pc, #80]	; (80023b0 <HAL_UART_MspInit+0x470>)
 800235e:	f000 ff87 	bl	8003270 <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002368:	f7ff fbd2 	bl	8001b10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <HAL_UART_MspInit+0x470>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2027      	movs	r0, #39	; 0x27
 800237e:	f000 ff40 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002382:	2027      	movs	r0, #39	; 0x27
 8002384:	f000 ff59 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8002388:	bf00      	nop
 800238a:	3748      	adds	r7, #72	; 0x48
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40004400 	.word	0x40004400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000
 800239c:	20000534 	.word	0x20000534
 80023a0:	400260a0 	.word	0x400260a0
 80023a4:	40004800 	.word	0x40004800
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020400 	.word	0x40020400
 80023b0:	200000ac 	.word	0x200000ac
 80023b4:	40026028 	.word	0x40026028

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <MemManage_Handler+0x4>

080023d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <UsageFault_Handler+0x4>

080023de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA1_Stream0_IRQHandler+0x10>)
 800240e:	f001 f8c7 	bl	80035a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200007b0 	.word	0x200007b0

0800241c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <DMA1_Stream1_IRQHandler+0x10>)
 8002422:	f001 f8bd 	bl	80035a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200000ac 	.word	0x200000ac

08002430 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <DMA1_Stream6_IRQHandler+0x10>)
 8002436:	f001 f8b3 	bl	80035a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000534 	.word	0x20000534

08002444 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800244a:	f003 f933 	bl	80056b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000380 	.word	0x20000380

08002458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <USART1_IRQHandler+0x10>)
 800245e:	f003 fcd9 	bl	8005e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000594 	.word	0x20000594

0800246c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <USART2_IRQHandler+0x10>)
 8002472:	f003 fccf 	bl	8005e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000770 	.word	0x20000770

08002480 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <USART3_IRQHandler+0x10>)
 8002486:	f003 fcc5 	bl	8005e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000110 	.word	0x20000110

08002494 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <SPI3_IRQHandler+0x10>)
 800249a:	f002 fe61 	bl	8005160 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000043c 	.word	0x2000043c

080024a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <UART5_IRQHandler+0x10>)
 80024ae:	f003 fcb1 	bl	8005e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000494 	.word	0x20000494

080024bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM6_DAC_IRQHandler+0x10>)
 80024c2:	f003 f8f7 	bl	80056b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200006a4 	.word	0x200006a4

080024d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM7_IRQHandler+0x10>)
 80024d6:	f003 f8ed 	bl	80056b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000a44 	.word	0x20000a44

080024e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA2_Stream2_IRQHandler+0x10>)
 80024ea:	f001 f859 	bl	80035a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200004d4 	.word	0x200004d4

080024f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <SystemInit+0x28>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <SystemInit+0x28>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SystemInit+0x28>)
 800250e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002512:	609a      	str	r2, [r3, #8]
#endif
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800252c:	f000 fd60 	bl	8002ff0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SPI_Timer_On+0x20>)
 8002534:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <SPI_Timer_On+0x24>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000a84 	.word	0x20000a84
 8002548:	20000a88 	.word	0x20000a88

0800254c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002550:	f000 fd4e 	bl	8002ff0 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <SPI_Timer_Status+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	1ad2      	subs	r2, r2, r3
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <SPI_Timer_Status+0x28>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	bf34      	ite	cc
 8002564:	2301      	movcc	r3, #1
 8002566:	2300      	movcs	r3, #0
 8002568:	b2db      	uxtb	r3, r3
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000a84 	.word	0x20000a84
 8002574:	20000a88 	.word	0x20000a88

08002578 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002582:	f107 020f 	add.w	r2, r7, #15
 8002586:	1df9      	adds	r1, r7, #7
 8002588:	2332      	movs	r3, #50	; 0x32
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	4804      	ldr	r0, [pc, #16]	; (80025a0 <xchg_spi+0x28>)
 8002590:	f002 fc43 	bl	8004e1a <HAL_SPI_TransmitReceive>
    return rxDat;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000043c 	.word	0x2000043c

080025a4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e00a      	b.n	80025ca <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	18d4      	adds	r4, r2, r3
 80025ba:	20ff      	movs	r0, #255	; 0xff
 80025bc:	f7ff ffdc 	bl	8002578 <xchg_spi>
 80025c0:	4603      	mov	r3, r0
 80025c2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3301      	adds	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3f0      	bcc.n	80025b4 <rcvr_spi_multi+0x10>
	}
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}

080025da <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e009      	b.n	80025fe <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ffc0 	bl	8002578 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d3f1      	bcc.n	80025ea <xmit_spi_multi+0x10>
	}
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002616:	f000 fceb 	bl	8002ff0 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002620:	20ff      	movs	r0, #255	; 0xff
 8002622:	f7ff ffa9 	bl	8002578 <xchg_spi>
 8002626:	4603      	mov	r3, r0
 8002628:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2bff      	cmp	r3, #255	; 0xff
 800262e:	d007      	beq.n	8002640 <wait_ready+0x32>
 8002630:	f000 fcde 	bl	8002ff0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8ef      	bhi.n	8002620 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2bff      	cmp	r3, #255	; 0xff
 8002644:	bf0c      	ite	eq
 8002646:	2301      	moveq	r3, #1
 8002648:	2300      	movne	r3, #0
 800264a:	b2db      	uxtb	r3, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265e:	4804      	ldr	r0, [pc, #16]	; (8002670 <despiselect+0x1c>)
 8002660:	f001 fbbc 	bl	8003ddc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002664:	20ff      	movs	r0, #255	; 0xff
 8002666:	f7ff ff87 	bl	8002578 <xchg_spi>

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40020000 	.word	0x40020000

08002674 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267e:	480a      	ldr	r0, [pc, #40]	; (80026a8 <spiselect+0x34>)
 8002680:	f001 fbac 	bl	8003ddc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002684:	20ff      	movs	r0, #255	; 0xff
 8002686:	f7ff ff77 	bl	8002578 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800268a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800268e:	f7ff ffbe 	bl	800260e <wait_ready>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <spiselect+0x28>
 8002698:	2301      	movs	r3, #1
 800269a:	e002      	b.n	80026a2 <spiselect+0x2e>

	despiselect();
 800269c:	f7ff ffda 	bl	8002654 <despiselect>
	return 0;	/* Timeout */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40020000 	.word	0x40020000

080026ac <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80026b6:	20c8      	movs	r0, #200	; 0xc8
 80026b8:	f7ff ff34 	bl	8002524 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80026bc:	20ff      	movs	r0, #255	; 0xff
 80026be:	f7ff ff5b 	bl	8002578 <xchg_spi>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2bff      	cmp	r3, #255	; 0xff
 80026ca:	d104      	bne.n	80026d6 <rcvr_datablock+0x2a>
 80026cc:	f7ff ff3e 	bl	800254c <SPI_Timer_Status>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f2      	bne.n	80026bc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2bfe      	cmp	r3, #254	; 0xfe
 80026da:	d001      	beq.n	80026e0 <rcvr_datablock+0x34>
 80026dc:	2300      	movs	r3, #0
 80026de:	e00a      	b.n	80026f6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80026e0:	6839      	ldr	r1, [r7, #0]
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff5e 	bl	80025a4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80026e8:	20ff      	movs	r0, #255	; 0xff
 80026ea:	f7ff ff45 	bl	8002578 <xchg_spi>
 80026ee:	20ff      	movs	r0, #255	; 0xff
 80026f0:	f7ff ff42 	bl	8002578 <xchg_spi>

	return 1;						/* Function succeeded */
 80026f4:	2301      	movs	r3, #1
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800270a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800270e:	f7ff ff7e 	bl	800260e <wait_ready>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <xmit_datablock+0x1e>
 8002718:	2300      	movs	r3, #0
 800271a:	e01e      	b.n	800275a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ff2a 	bl	8002578 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	2bfd      	cmp	r3, #253	; 0xfd
 8002728:	d016      	beq.n	8002758 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800272a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff53 	bl	80025da <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002734:	20ff      	movs	r0, #255	; 0xff
 8002736:	f7ff ff1f 	bl	8002578 <xchg_spi>
 800273a:	20ff      	movs	r0, #255	; 0xff
 800273c:	f7ff ff1c 	bl	8002578 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002740:	20ff      	movs	r0, #255	; 0xff
 8002742:	f7ff ff19 	bl	8002578 <xchg_spi>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b05      	cmp	r3, #5
 8002752:	d001      	beq.n	8002758 <xmit_datablock+0x5a>
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <xmit_datablock+0x5c>
	}
	return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	6039      	str	r1, [r7, #0]
 800276c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	da0e      	bge.n	8002794 <send_cmd+0x32>
		cmd &= 0x7F;
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800277e:	2100      	movs	r1, #0
 8002780:	2037      	movs	r0, #55	; 0x37
 8002782:	f7ff ffee 	bl	8002762 <send_cmd>
 8002786:	4603      	mov	r3, r0
 8002788:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800278a:	7bbb      	ldrb	r3, [r7, #14]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d901      	bls.n	8002794 <send_cmd+0x32>
 8002790:	7bbb      	ldrb	r3, [r7, #14]
 8002792:	e051      	b.n	8002838 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d008      	beq.n	80027ac <send_cmd+0x4a>
		despiselect();
 800279a:	f7ff ff5b 	bl	8002654 <despiselect>
		if (!spiselect()) return 0xFF;
 800279e:	f7ff ff69 	bl	8002674 <spiselect>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <send_cmd+0x4a>
 80027a8:	23ff      	movs	r3, #255	; 0xff
 80027aa:	e045      	b.n	8002838 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fedf 	bl	8002578 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	0e1b      	lsrs	r3, r3, #24
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fed9 	bl	8002578 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fed3 	bl	8002578 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fecd 	bl	8002578 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fec8 	bl	8002578 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <send_cmd+0x94>
 80027f2:	2395      	movs	r3, #149	; 0x95
 80027f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d101      	bne.n	8002800 <send_cmd+0x9e>
 80027fc:	2387      	movs	r3, #135	; 0x87
 80027fe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff feb8 	bl	8002578 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d102      	bne.n	8002814 <send_cmd+0xb2>
 800280e:	20ff      	movs	r0, #255	; 0xff
 8002810:	f7ff feb2 	bl	8002578 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002814:	230a      	movs	r3, #10
 8002816:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002818:	20ff      	movs	r0, #255	; 0xff
 800281a:	f7ff fead 	bl	8002578 <xchg_spi>
 800281e:	4603      	mov	r3, r0
 8002820:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002826:	2b00      	cmp	r3, #0
 8002828:	da05      	bge.n	8002836 <send_cmd+0xd4>
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	3b01      	subs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002836:	7bbb      	ldrb	r3, [r7, #14]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <USER_SPI_initialize+0x14>
 8002850:	2301      	movs	r3, #1
 8002852:	e0cb      	b.n	80029ec <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002854:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <USER_SPI_initialize+0x1b4>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <USER_SPI_initialize+0x2a>
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <USER_SPI_initialize+0x1b4>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e0c0      	b.n	80029ec <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 800286a:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <USER_SPI_initialize+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002872:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002874:	230a      	movs	r3, #10
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e005      	b.n	8002886 <USER_SPI_initialize+0x46>
 800287a:	20ff      	movs	r0, #255	; 0xff
 800287c:	f7ff fe7c 	bl	8002578 <xchg_spi>
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	3b01      	subs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f6      	bne.n	800287a <USER_SPI_initialize+0x3a>

	ty = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002890:	2100      	movs	r1, #0
 8002892:	2000      	movs	r0, #0
 8002894:	f7ff ff65 	bl	8002762 <send_cmd>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 808b 	bne.w	80029b6 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80028a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a4:	f7ff fe3e 	bl	8002524 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80028a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80028ac:	2008      	movs	r0, #8
 80028ae:	f7ff ff58 	bl	8002762 <send_cmd>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d151      	bne.n	800295c <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e00d      	b.n	80028da <USER_SPI_initialize+0x9a>
 80028be:	7bfc      	ldrb	r4, [r7, #15]
 80028c0:	20ff      	movs	r0, #255	; 0xff
 80028c2:	f7ff fe59 	bl	8002578 <xchg_spi>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	4423      	add	r3, r4
 80028d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	3301      	adds	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d9ee      	bls.n	80028be <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80028e0:	7abb      	ldrb	r3, [r7, #10]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d167      	bne.n	80029b6 <USER_SPI_initialize+0x176>
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	2baa      	cmp	r3, #170	; 0xaa
 80028ea:	d164      	bne.n	80029b6 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80028ec:	bf00      	nop
 80028ee:	f7ff fe2d 	bl	800254c <SPI_Timer_Status>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <USER_SPI_initialize+0xc8>
 80028f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028fc:	20a9      	movs	r0, #169	; 0xa9
 80028fe:	f7ff ff30 	bl	8002762 <send_cmd>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f2      	bne.n	80028ee <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002908:	f7ff fe20 	bl	800254c <SPI_Timer_Status>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d051      	beq.n	80029b6 <USER_SPI_initialize+0x176>
 8002912:	2100      	movs	r1, #0
 8002914:	203a      	movs	r0, #58	; 0x3a
 8002916:	f7ff ff24 	bl	8002762 <send_cmd>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d14a      	bne.n	80029b6 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e00d      	b.n	8002942 <USER_SPI_initialize+0x102>
 8002926:	7bfc      	ldrb	r4, [r7, #15]
 8002928:	20ff      	movs	r0, #255	; 0xff
 800292a:	f7ff fe25 	bl	8002578 <xchg_spi>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	4423      	add	r3, r4
 8002938:	f803 2c08 	strb.w	r2, [r3, #-8]
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	3301      	adds	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d9ee      	bls.n	8002926 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002948:	7a3b      	ldrb	r3, [r7, #8]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <USER_SPI_initialize+0x116>
 8002952:	230c      	movs	r3, #12
 8002954:	e000      	b.n	8002958 <USER_SPI_initialize+0x118>
 8002956:	2304      	movs	r3, #4
 8002958:	737b      	strb	r3, [r7, #13]
 800295a:	e02c      	b.n	80029b6 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800295c:	2100      	movs	r1, #0
 800295e:	20a9      	movs	r0, #169	; 0xa9
 8002960:	f7ff feff 	bl	8002762 <send_cmd>
 8002964:	4603      	mov	r3, r0
 8002966:	2b01      	cmp	r3, #1
 8002968:	d804      	bhi.n	8002974 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800296a:	2302      	movs	r3, #2
 800296c:	737b      	strb	r3, [r7, #13]
 800296e:	23a9      	movs	r3, #169	; 0xa9
 8002970:	73bb      	strb	r3, [r7, #14]
 8002972:	e003      	b.n	800297c <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002974:	2301      	movs	r3, #1
 8002976:	737b      	strb	r3, [r7, #13]
 8002978:	2301      	movs	r3, #1
 800297a:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800297c:	bf00      	nop
 800297e:	f7ff fde5 	bl	800254c <SPI_Timer_Status>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <USER_SPI_initialize+0x158>
 8002988:	7bbb      	ldrb	r3, [r7, #14]
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fee8 	bl	8002762 <send_cmd>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f2      	bne.n	800297e <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002998:	f7ff fdd8 	bl	800254c <SPI_Timer_Status>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <USER_SPI_initialize+0x172>
 80029a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029a6:	2010      	movs	r0, #16
 80029a8:	f7ff fedb 	bl	8002762 <send_cmd>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <USER_SPI_initialize+0x176>
				ty = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <USER_SPI_initialize+0x1bc>)
 80029b8:	7b7b      	ldrb	r3, [r7, #13]
 80029ba:	7013      	strb	r3, [r2, #0]
	despiselect();
 80029bc:	f7ff fe4a 	bl	8002654 <despiselect>

	if (ty) {			/* OK */
 80029c0:	7b7b      	ldrb	r3, [r7, #13]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00c      	beq.n	80029e0 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <USER_SPI_initialize+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2210      	movs	r2, #16
 80029cc:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <USER_SPI_initialize+0x1b4>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <USER_SPI_initialize+0x1b4>)
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e002      	b.n	80029e6 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <USER_SPI_initialize+0x1b4>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80029e6:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <USER_SPI_initialize+0x1b4>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd90      	pop	{r4, r7, pc}
 80029f4:	20000028 	.word	0x20000028
 80029f8:	2000043c 	.word	0x2000043c
 80029fc:	20000077 	.word	0x20000077

08002a00 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <USER_SPI_status+0x14>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e002      	b.n	8002a1a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <USER_SPI_status+0x28>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000028 	.word	0x20000028

08002a2c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4603      	mov	r3, r0
 8002a3a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <USER_SPI_read+0x1c>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <USER_SPI_read+0x20>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e04d      	b.n	8002ae8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <USER_SPI_read+0xc4>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <USER_SPI_read+0x32>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e044      	b.n	8002ae8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <USER_SPI_read+0xc8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <USER_SPI_read+0x44>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	025b      	lsls	r3, r3, #9
 8002a6e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d111      	bne.n	8002a9a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	2011      	movs	r0, #17
 8002a7a:	f7ff fe72 	bl	8002762 <send_cmd>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d129      	bne.n	8002ad8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a88:	68b8      	ldr	r0, [r7, #8]
 8002a8a:	f7ff fe0f 	bl	80026ac <rcvr_datablock>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <USER_SPI_read+0xac>
			count = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	e01e      	b.n	8002ad8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	2012      	movs	r0, #18
 8002a9e:	f7ff fe60 	bl	8002762 <send_cmd>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d117      	bne.n	8002ad8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aac:	68b8      	ldr	r0, [r7, #8]
 8002aae:	f7ff fdfd 	bl	80026ac <rcvr_datablock>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <USER_SPI_read+0xa2>
				buff += 512;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002abe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ed      	bne.n	8002aa8 <USER_SPI_read+0x7c>
 8002acc:	e000      	b.n	8002ad0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002ace:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	200c      	movs	r0, #12
 8002ad4:	f7ff fe45 	bl	8002762 <send_cmd>
		}
	}
	despiselect();
 8002ad8:	f7ff fdbc 	bl	8002654 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000028 	.word	0x20000028
 8002af4:	20000077 	.word	0x20000077

08002af8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4603      	mov	r3, r0
 8002b06:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <USER_SPI_write+0x1c>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <USER_SPI_write+0x20>
 8002b14:	2304      	movs	r3, #4
 8002b16:	e063      	b.n	8002be0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002b18:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <USER_SPI_write+0xf0>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <USER_SPI_write+0x32>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e05a      	b.n	8002be0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <USER_SPI_write+0xf0>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <USER_SPI_write+0x44>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e051      	b.n	8002be0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <USER_SPI_write+0xf4>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <USER_SPI_write+0x56>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	025b      	lsls	r3, r3, #9
 8002b4c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d110      	bne.n	8002b76 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	2018      	movs	r0, #24
 8002b58:	f7ff fe03 	bl	8002762 <send_cmd>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d136      	bne.n	8002bd0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002b62:	21fe      	movs	r1, #254	; 0xfe
 8002b64:	68b8      	ldr	r0, [r7, #8]
 8002b66:	f7ff fdca 	bl	80026fe <xmit_datablock>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d02f      	beq.n	8002bd0 <USER_SPI_write+0xd8>
			count = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	e02c      	b.n	8002bd0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <USER_SPI_write+0xf4>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	f003 0306 	and.w	r3, r3, #6
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <USER_SPI_write+0x92>
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	2097      	movs	r0, #151	; 0x97
 8002b86:	f7ff fdec 	bl	8002762 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	2019      	movs	r0, #25
 8002b8e:	f7ff fde8 	bl	8002762 <send_cmd>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11b      	bne.n	8002bd0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b98:	21fc      	movs	r1, #252	; 0xfc
 8002b9a:	68b8      	ldr	r0, [r7, #8]
 8002b9c:	f7ff fdaf 	bl	80026fe <xmit_datablock>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <USER_SPI_write+0xc4>
				buff += 512;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002bac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ee      	bne.n	8002b98 <USER_SPI_write+0xa0>
 8002bba:	e000      	b.n	8002bbe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002bbc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002bbe:	21fd      	movs	r1, #253	; 0xfd
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7ff fd9c 	bl	80026fe <xmit_datablock>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <USER_SPI_write+0xd8>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002bd0:	f7ff fd40 	bl	8002654 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000028 	.word	0x20000028
 8002bec:	20000077 	.word	0x20000077

08002bf0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	; 0x30
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	603a      	str	r2, [r7, #0]
 8002bfa:	71fb      	strb	r3, [r7, #7]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <USER_SPI_ioctl+0x1a>
 8002c06:	2304      	movs	r3, #4
 8002c08:	e15a      	b.n	8002ec0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c0a:	4baf      	ldr	r3, [pc, #700]	; (8002ec8 <USER_SPI_ioctl+0x2d8>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <USER_SPI_ioctl+0x2c>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e151      	b.n	8002ec0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002c22:	79bb      	ldrb	r3, [r7, #6]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	f200 8136 	bhi.w	8002e96 <USER_SPI_ioctl+0x2a6>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <USER_SPI_ioctl+0x40>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c45 	.word	0x08002c45
 8002c34:	08002c59 	.word	0x08002c59
 8002c38:	08002e97 	.word	0x08002e97
 8002c3c:	08002d05 	.word	0x08002d05
 8002c40:	08002dfb 	.word	0x08002dfb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002c44:	f7ff fd16 	bl	8002674 <spiselect>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8127 	beq.w	8002e9e <USER_SPI_ioctl+0x2ae>
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002c56:	e122      	b.n	8002e9e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2009      	movs	r0, #9
 8002c5c:	f7ff fd81 	bl	8002762 <send_cmd>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 811d 	bne.w	8002ea2 <USER_SPI_ioctl+0x2b2>
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fd1c 	bl	80026ac <rcvr_datablock>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8113 	beq.w	8002ea2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002c7c:	7b3b      	ldrb	r3, [r7, #12]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d111      	bne.n	8002caa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002c86:	7d7b      	ldrb	r3, [r7, #21]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	7d3b      	ldrb	r3, [r7, #20]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	4413      	add	r3, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	029a      	lsls	r2, r3, #10
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e028      	b.n	8002cfc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002caa:	7c7b      	ldrb	r3, [r7, #17]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	7dbb      	ldrb	r3, [r7, #22]
 8002cb4:	09db      	lsrs	r3, r3, #7
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	7d7b      	ldrb	r3, [r7, #21]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0306 	and.w	r3, r3, #6
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3302      	adds	r3, #2
 8002cce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002cd2:	7d3b      	ldrb	r3, [r7, #20]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	441a      	add	r2, r3
 8002ce0:	7cbb      	ldrb	r3, [r7, #18]
 8002ce2:	029b      	lsls	r3, r3, #10
 8002ce4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ce8:	4413      	add	r3, r2
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002cee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cf2:	3b09      	subs	r3, #9
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002d02:	e0ce      	b.n	8002ea2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002d04:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <USER_SPI_ioctl+0x2dc>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d031      	beq.n	8002d74 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002d10:	2100      	movs	r1, #0
 8002d12:	208d      	movs	r0, #141	; 0x8d
 8002d14:	f7ff fd25 	bl	8002762 <send_cmd>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 80c3 	bne.w	8002ea6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002d20:	20ff      	movs	r0, #255	; 0xff
 8002d22:	f7ff fc29 	bl	8002578 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fcbd 	bl	80026ac <rcvr_datablock>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80b6 	beq.w	8002ea6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002d3a:	2330      	movs	r3, #48	; 0x30
 8002d3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d40:	e007      	b.n	8002d52 <USER_SPI_ioctl+0x162>
 8002d42:	20ff      	movs	r0, #255	; 0xff
 8002d44:	f7ff fc18 	bl	8002578 <xchg_spi>
 8002d48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f3      	bne.n	8002d42 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002d5a:	7dbb      	ldrb	r3, [r7, #22]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	2310      	movs	r3, #16
 8002d64:	fa03 f202 	lsl.w	r2, r3, r2
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002d72:	e098      	b.n	8002ea6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d74:	2100      	movs	r1, #0
 8002d76:	2009      	movs	r0, #9
 8002d78:	f7ff fcf3 	bl	8002762 <send_cmd>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 8091 	bne.w	8002ea6 <USER_SPI_ioctl+0x2b6>
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	2110      	movs	r1, #16
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fc8e 	bl	80026ac <rcvr_datablock>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8087 	beq.w	8002ea6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <USER_SPI_ioctl+0x2dc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002da4:	7dbb      	ldrb	r3, [r7, #22]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002dac:	7dfa      	ldrb	r2, [r7, #23]
 8002dae:	09d2      	lsrs	r2, r2, #7
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	4413      	add	r3, r2
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	7e7b      	ldrb	r3, [r7, #25]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e013      	b.n	8002df2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002dca:	7dbb      	ldrb	r3, [r7, #22]
 8002dcc:	109b      	asrs	r3, r3, #2
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	7dfa      	ldrb	r2, [r7, #23]
 8002dd8:	00d2      	lsls	r2, r2, #3
 8002dda:	f002 0218 	and.w	r2, r2, #24
 8002dde:	7df9      	ldrb	r1, [r7, #23]
 8002de0:	0949      	lsrs	r1, r1, #5
 8002de2:	b2c9      	uxtb	r1, r1
 8002de4:	440a      	add	r2, r1
 8002de6:	3201      	adds	r2, #1
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002df8:	e055      	b.n	8002ea6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <USER_SPI_ioctl+0x2dc>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	f003 0306 	and.w	r3, r3, #6
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d051      	beq.n	8002eaa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e06:	f107 020c 	add.w	r2, r7, #12
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	210b      	movs	r1, #11
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff feee 	bl	8002bf0 <USER_SPI_ioctl>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d149      	bne.n	8002eae <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e1a:	7b3b      	ldrb	r3, [r7, #12]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <USER_SPI_ioctl+0x23e>
 8002e24:	7dbb      	ldrb	r3, [r7, #22]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d041      	beq.n	8002eb2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <USER_SPI_ioctl+0x2dc>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	025b      	lsls	r3, r3, #9
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	025b      	lsls	r3, r3, #9
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002e56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e58:	2020      	movs	r0, #32
 8002e5a:	f7ff fc82 	bl	8002762 <send_cmd>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d128      	bne.n	8002eb6 <USER_SPI_ioctl+0x2c6>
 8002e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e66:	2021      	movs	r0, #33	; 0x21
 8002e68:	f7ff fc7b 	bl	8002762 <send_cmd>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d121      	bne.n	8002eb6 <USER_SPI_ioctl+0x2c6>
 8002e72:	2100      	movs	r1, #0
 8002e74:	2026      	movs	r0, #38	; 0x26
 8002e76:	f7ff fc74 	bl	8002762 <send_cmd>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11a      	bne.n	8002eb6 <USER_SPI_ioctl+0x2c6>
 8002e80:	f247 5030 	movw	r0, #30000	; 0x7530
 8002e84:	f7ff fbc3 	bl	800260e <wait_ready>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002e94:	e00f      	b.n	8002eb6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002e96:	2304      	movs	r3, #4
 8002e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002e9c:	e00c      	b.n	8002eb8 <USER_SPI_ioctl+0x2c8>
		break;
 8002e9e:	bf00      	nop
 8002ea0:	e00a      	b.n	8002eb8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ea2:	bf00      	nop
 8002ea4:	e008      	b.n	8002eb8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ea6:	bf00      	nop
 8002ea8:	e006      	b.n	8002eb8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <USER_SPI_ioctl+0x2c8>
		break;
 8002eb6:	bf00      	nop
	}

	despiselect();
 8002eb8:	f7ff fbcc 	bl	8002654 <despiselect>

	return res;
 8002ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3730      	adds	r7, #48	; 0x30
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000028 	.word	0x20000028
 8002ecc:	20000077 	.word	0x20000077

08002ed0 <Reset_Handler>:
 8002ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f08 <LoopFillZerobss+0x14>
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	e003      	b.n	8002ee0 <LoopCopyDataInit>

08002ed8 <CopyDataInit>:
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <LoopFillZerobss+0x18>)
 8002eda:	585b      	ldr	r3, [r3, r1]
 8002edc:	5043      	str	r3, [r0, r1]
 8002ede:	3104      	adds	r1, #4

08002ee0 <LoopCopyDataInit>:
 8002ee0:	480b      	ldr	r0, [pc, #44]	; (8002f10 <LoopFillZerobss+0x1c>)
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <LoopFillZerobss+0x20>)
 8002ee4:	1842      	adds	r2, r0, r1
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d3f6      	bcc.n	8002ed8 <CopyDataInit>
 8002eea:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <LoopFillZerobss+0x24>)
 8002eec:	e002      	b.n	8002ef4 <LoopFillZerobss>

08002eee <FillZerobss>:
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f842 3b04 	str.w	r3, [r2], #4

08002ef4 <LoopFillZerobss>:
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <LoopFillZerobss+0x28>)
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3f9      	bcc.n	8002eee <FillZerobss>
 8002efa:	f7ff fafd 	bl	80024f8 <SystemInit>
 8002efe:	f006 f949 	bl	8009194 <__libc_init_array>
 8002f02:	f7fe f8a5 	bl	8001050 <main>
 8002f06:	4770      	bx	lr
 8002f08:	20020000 	.word	0x20020000
 8002f0c:	080095cc 	.word	0x080095cc
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000048 	.word	0x20000048
 8002f18:	20000048 	.word	0x20000048
 8002f1c:	20000ef8 	.word	0x20000ef8

08002f20 <ADC_IRQHandler>:
 8002f20:	e7fe      	b.n	8002f20 <ADC_IRQHandler>
	...

08002f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_Init+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <HAL_Init+0x40>)
 8002f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_Init+0x40>)
 8002f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_Init+0x40>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	f000 f94d 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f000 f808 	bl	8002f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f58:	f7fe feae 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00

08002f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_InitTick+0x54>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_InitTick+0x58>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f965 	bl	8003256 <HAL_SYSTICK_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00e      	b.n	8002fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b0f      	cmp	r3, #15
 8002f9a:	d80a      	bhi.n	8002fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f000 f92d 	bl	8003202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa8:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <HAL_InitTick+0x5c>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000024 	.word	0x20000024
 8002fc0:	20000030 	.word	0x20000030
 8002fc4:	2000002c 	.word	0x2000002c

08002fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_IncTick+0x20>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_IncTick+0x24>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <HAL_IncTick+0x24>)
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000030 	.word	0x20000030
 8002fec:	20000a8c 	.word	0x20000a8c

08002ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <HAL_GetTick+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000a8c 	.word	0x20000a8c

08003008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff ffee 	bl	8002ff0 <HAL_GetTick>
 8003014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d005      	beq.n	800302e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_Delay+0x40>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800302e:	bf00      	nop
 8003030:	f7ff ffde 	bl	8002ff0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d8f7      	bhi.n	8003030 <HAL_Delay+0x28>
  {
  }
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000030 	.word	0x20000030

0800304c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003068:	4013      	ands	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307e:	4a04      	ldr	r2, [pc, #16]	; (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	60d3      	str	r3, [r2, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <__NVIC_GetPriorityGrouping+0x18>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0307 	and.w	r3, r3, #7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	db0b      	blt.n	80030da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 021f 	and.w	r2, r3, #31
 80030c8:	4907      	ldr	r1, [pc, #28]	; (80030e8 <__NVIC_EnableIRQ+0x38>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	fa00 f202 	lsl.w	r2, r0, r2
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	; (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	; (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b8:	d301      	bcc.n	80031be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00f      	b.n	80031de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <SysTick_Config+0x40>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c6:	210f      	movs	r1, #15
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	f7ff ff8e 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SysTick_Config+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <SysTick_Config+0x40>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff29 	bl	800304c <__NVIC_SetPriorityGrouping>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003214:	f7ff ff3e 	bl	8003094 <__NVIC_GetPriorityGrouping>
 8003218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff8e 	bl	8003140 <NVIC_EncodePriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff5d 	bl	80030ec <__NVIC_SetPriority>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff31 	bl	80030b0 <__NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffa2 	bl	80031a8 <SysTick_Config>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800327c:	f7ff feb8 	bl	8002ff0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e099      	b.n	80033c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ac:	e00f      	b.n	80032ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ae:	f7ff fe9f 	bl	8002ff0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d908      	bls.n	80032ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2203      	movs	r2, #3
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e078      	b.n	80033c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e8      	bne.n	80032ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <HAL_DMA_Init+0x158>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	4313      	orrs	r3, r2
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b04      	cmp	r3, #4
 8003360:	d117      	bne.n	8003392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fb0d 	bl	8003994 <DMA_CheckFifoParam>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800338e:	2301      	movs	r3, #1
 8003390:	e016      	b.n	80033c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fac4 	bl	8003928 <DMA_CalcBaseAndBitshift>
 80033a0:	4603      	mov	r3, r0
 80033a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	223f      	movs	r2, #63	; 0x3f
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	f010803f 	.word	0xf010803f

080033cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_DMA_Start_IT+0x26>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e040      	b.n	8003474 <HAL_DMA_Start_IT+0xa8>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d12f      	bne.n	8003466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fa56 	bl	80038cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	223f      	movs	r2, #63	; 0x3f
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0216 	orr.w	r2, r2, #22
 800343a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e005      	b.n	8003472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003472:	7dfb      	ldrb	r3, [r7, #23]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800348a:	f7ff fdb1 	bl	8002ff0 <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e052      	b.n	8003554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_Abort+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fe:	e013      	b.n	8003528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003500:	f7ff fd76 	bl	8002ff0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b05      	cmp	r3, #5
 800350c:	d90c      	bls.n	8003528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e015      	b.n	8003554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e4      	bne.n	8003500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	223f      	movs	r2, #63	; 0x3f
 800353c:	409a      	lsls	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d004      	beq.n	800357a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e00c      	b.n	8003594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2205      	movs	r2, #5
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ac:	4b92      	ldr	r3, [pc, #584]	; (80037f8 <HAL_DMA_IRQHandler+0x258>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a92      	ldr	r2, [pc, #584]	; (80037fc <HAL_DMA_IRQHandler+0x25c>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2208      	movs	r2, #8
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01a      	beq.n	800360c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	2208      	movs	r2, #8
 80035fa:	409a      	lsls	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	2201      	movs	r2, #1
 8003630:	409a      	lsls	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f043 0202 	orr.w	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2204      	movs	r2, #4
 8003648:	409a      	lsls	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2204      	movs	r2, #4
 8003666:	409a      	lsls	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	2210      	movs	r2, #16
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d043      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03c      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2210      	movs	r2, #16
 800369c:	409a      	lsls	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d024      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
 80036ce:	e01f      	b.n	8003710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
 80036e0:	e016      	b.n	8003710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d107      	bne.n	8003700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0208 	bic.w	r2, r2, #8
 80036fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	2220      	movs	r2, #32
 8003716:	409a      	lsls	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 808e 	beq.w	800383e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8086 	beq.w	800383e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2220      	movs	r2, #32
 8003738:	409a      	lsls	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b05      	cmp	r3, #5
 8003748:	d136      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0216 	bic.w	r2, r2, #22
 8003758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_DMA_IRQHandler+0x1da>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0208 	bic.w	r2, r2, #8
 8003788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	223f      	movs	r2, #63	; 0x3f
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d07d      	beq.n	80038aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
        }
        return;
 80037b6:	e078      	b.n	80038aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01c      	beq.n	8003800 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d108      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d030      	beq.n	800383e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e02b      	b.n	800383e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d027      	beq.n	800383e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
 80037f6:	e022      	b.n	800383e <HAL_DMA_IRQHandler+0x29e>
 80037f8:	20000024 	.word	0x20000024
 80037fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0210 	bic.w	r2, r2, #16
 800381c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	2b00      	cmp	r3, #0
 8003844:	d032      	beq.n	80038ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2205      	movs	r2, #5
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	429a      	cmp	r2, r3
 8003874:	d307      	bcc.n	8003886 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f2      	bne.n	800386a <HAL_DMA_IRQHandler+0x2ca>
 8003884:	e000      	b.n	8003888 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003886:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e000      	b.n	80038ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80038aa:	bf00      	nop
    }
  }
}
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop

080038b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d108      	bne.n	800390c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800390a:	e007      	b.n	800391c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	3b10      	subs	r3, #16
 8003938:	4a14      	ldr	r2, [pc, #80]	; (800398c <DMA_CalcBaseAndBitshift+0x64>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <DMA_CalcBaseAndBitshift+0x68>)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d909      	bls.n	800396a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800395e:	f023 0303 	bic.w	r3, r3, #3
 8003962:	1d1a      	adds	r2, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	659a      	str	r2, [r3, #88]	; 0x58
 8003968:	e007      	b.n	800397a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003972:	f023 0303 	bic.w	r3, r3, #3
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	aaaaaaab 	.word	0xaaaaaaab
 8003990:	08009534 	.word	0x08009534

08003994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11f      	bne.n	80039ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d855      	bhi.n	8003a60 <DMA_CheckFifoParam+0xcc>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <DMA_CheckFifoParam+0x28>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039df 	.word	0x080039df
 80039c4:	080039cd 	.word	0x080039cd
 80039c8:	08003a61 	.word	0x08003a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d045      	beq.n	8003a64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039dc:	e042      	b.n	8003a64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e6:	d13f      	bne.n	8003a68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ec:	e03c      	b.n	8003a68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f6:	d121      	bne.n	8003a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d836      	bhi.n	8003a6c <DMA_CheckFifoParam+0xd8>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <DMA_CheckFifoParam+0x70>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a1b 	.word	0x08003a1b
 8003a0c:	08003a15 	.word	0x08003a15
 8003a10:	08003a2d 	.word	0x08003a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      break;
 8003a18:	e02f      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d024      	beq.n	8003a70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2a:	e021      	b.n	8003a70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a34:	d11e      	bne.n	8003a74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a3a:	e01b      	b.n	8003a74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d902      	bls.n	8003a48 <DMA_CheckFifoParam+0xb4>
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d003      	beq.n	8003a4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a46:	e018      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4c:	e015      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00e      	beq.n	8003a78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5e:	e00b      	b.n	8003a78 <DMA_CheckFifoParam+0xe4>
      break;
 8003a60:	bf00      	nop
 8003a62:	e00a      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      break;
 8003a64:	bf00      	nop
 8003a66:	e008      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e006      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      break;
 8003a6c:	bf00      	nop
 8003a6e:	e004      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      break;
 8003a70:	bf00      	nop
 8003a72:	e002      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      break;   
 8003a74:	bf00      	nop
 8003a76:	e000      	b.n	8003a7a <DMA_CheckFifoParam+0xe6>
      break;
 8003a78:	bf00      	nop
    }
  } 
  
  return status; 
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e165      	b.n	8003d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f040 8154 	bne.w	8003d6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_GPIO_Init+0x5a>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d007      	beq.n	8003ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ad6:	2b11      	cmp	r3, #17
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b12      	cmp	r3, #18
 8003ae0:	d130      	bne.n	8003b44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b18:	2201      	movs	r2, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 0201 	and.w	r2, r3, #1
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0xfc>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b12      	cmp	r3, #18
 8003b82:	d123      	bne.n	8003bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	08da      	lsrs	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80ae 	beq.w	8003d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <HAL_GPIO_Init+0x2fc>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	4a5b      	ldr	r2, [pc, #364]	; (8003d84 <HAL_GPIO_Init+0x2fc>)
 8003c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1e:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_GPIO_Init+0x2fc>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c2a:	4a57      	ldr	r2, [pc, #348]	; (8003d88 <HAL_GPIO_Init+0x300>)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	3302      	adds	r3, #2
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	220f      	movs	r2, #15
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a4e      	ldr	r2, [pc, #312]	; (8003d8c <HAL_GPIO_Init+0x304>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d025      	beq.n	8003ca2 <HAL_GPIO_Init+0x21a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4d      	ldr	r2, [pc, #308]	; (8003d90 <HAL_GPIO_Init+0x308>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01f      	beq.n	8003c9e <HAL_GPIO_Init+0x216>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4c      	ldr	r2, [pc, #304]	; (8003d94 <HAL_GPIO_Init+0x30c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_GPIO_Init+0x212>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4b      	ldr	r2, [pc, #300]	; (8003d98 <HAL_GPIO_Init+0x310>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_GPIO_Init+0x20e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4a      	ldr	r2, [pc, #296]	; (8003d9c <HAL_GPIO_Init+0x314>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00d      	beq.n	8003c92 <HAL_GPIO_Init+0x20a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a49      	ldr	r2, [pc, #292]	; (8003da0 <HAL_GPIO_Init+0x318>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <HAL_GPIO_Init+0x206>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a48      	ldr	r2, [pc, #288]	; (8003da4 <HAL_GPIO_Init+0x31c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_GPIO_Init+0x202>
 8003c86:	2306      	movs	r3, #6
 8003c88:	e00c      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	e00a      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c8e:	2305      	movs	r3, #5
 8003c90:	e008      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c92:	2304      	movs	r3, #4
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c96:	2303      	movs	r3, #3
 8003c98:	e004      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e002      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	f002 0203 	and.w	r2, r2, #3
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	4093      	lsls	r3, r2
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb4:	4934      	ldr	r1, [pc, #208]	; (8003d88 <HAL_GPIO_Init+0x300>)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce6:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d10:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d64:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b0f      	cmp	r3, #15
 8003d74:	f67f ae96 	bls.w	8003aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3724      	adds	r7, #36	; 0x24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40013800 	.word	0x40013800
 8003d8c:	40020000 	.word	0x40020000
 8003d90:	40020400 	.word	0x40020400
 8003d94:	40020800 	.word	0x40020800
 8003d98:	40020c00 	.word	0x40020c00
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40021400 	.word	0x40021400
 8003da4:	40021800 	.word	0x40021800
 8003da8:	40013c00 	.word	0x40013c00

08003dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	e001      	b.n	8003dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
 8003de8:	4613      	mov	r3, r2
 8003dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dec:	787b      	ldrb	r3, [r7, #1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003df8:	e003      	b.n	8003e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	619a      	str	r2, [r3, #24]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e36:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e3c:	f7ff f8d8 	bl	8002ff0 <HAL_GetTick>
 8003e40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e42:	e009      	b.n	8003e58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e44:	f7ff f8d4 	bl	8002ff0 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e52:	d901      	bls.n	8003e58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e01f      	b.n	8003e98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d1ee      	bne.n	8003e44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e6c:	f7ff f8c0 	bl	8002ff0 <HAL_GetTick>
 8003e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e72:	e009      	b.n	8003e88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e74:	f7ff f8bc 	bl	8002ff0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e82:	d901      	bls.n	8003e88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e007      	b.n	8003e98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e94:	d1ee      	bne.n	8003e74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	420e0040 	.word	0x420e0040
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	420e0044 	.word	0x420e0044

08003eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0cc      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b68      	ldr	r3, [pc, #416]	; (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d90c      	bls.n	8003eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b65      	ldr	r3, [pc, #404]	; (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b63      	ldr	r3, [pc, #396]	; (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0b8      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b59      	ldr	r3, [pc, #356]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a58      	ldr	r2, [pc, #352]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f1c:	4b53      	ldr	r3, [pc, #332]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b50      	ldr	r3, [pc, #320]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	494d      	ldr	r1, [pc, #308]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d044      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d119      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	4b3f      	ldr	r3, [pc, #252]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e06f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e067      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8e:	4b37      	ldr	r3, [pc, #220]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 0203 	bic.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4934      	ldr	r1, [pc, #208]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa0:	f7ff f826 	bl	8002ff0 <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa8:	f7ff f822 	bl	8002ff0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e04f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 020c 	and.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1eb      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d20c      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b22      	ldr	r3, [pc, #136]	; (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4916      	ldr	r1, [pc, #88]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	490e      	ldr	r1, [pc, #56]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004036:	f000 f855 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 800403a:	4601      	mov	r1, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	fa21 f303 	lsr.w	r3, r1, r3
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe ff86 	bl	8002f68 <HAL_InitTick>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023c00 	.word	0x40023c00
 800406c:	40023800 	.word	0x40023800
 8004070:	0800951c 	.word	0x0800951c
 8004074:	20000024 	.word	0x20000024
 8004078:	2000002c 	.word	0x2000002c

0800407c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCC_GetHCLKFreq+0x14>)
 8004082:	681b      	ldr	r3, [r3, #0]
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000024 	.word	0x20000024

08004094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004098:	f7ff fff0 	bl	800407c <HAL_RCC_GetHCLKFreq>
 800409c:	4601      	mov	r1, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0a9b      	lsrs	r3, r3, #10
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4a03      	ldr	r2, [pc, #12]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	0800952c 	.word	0x0800952c

080040bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040c0:	f7ff ffdc 	bl	800407c <HAL_RCC_GetHCLKFreq>
 80040c4:	4601      	mov	r1, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0b5b      	lsrs	r3, r3, #13
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d2:	5cd3      	ldrb	r3, [r2, r3]
 80040d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	0800952c 	.word	0x0800952c

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fe:	4bc6      	ldr	r3, [pc, #792]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b0c      	cmp	r3, #12
 8004108:	f200 817e 	bhi.w	8004408 <HAL_RCC_GetSysClockFreq+0x324>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <HAL_RCC_GetSysClockFreq+0x30>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004149 	.word	0x08004149
 8004118:	08004409 	.word	0x08004409
 800411c:	08004409 	.word	0x08004409
 8004120:	08004409 	.word	0x08004409
 8004124:	0800414f 	.word	0x0800414f
 8004128:	08004409 	.word	0x08004409
 800412c:	08004409 	.word	0x08004409
 8004130:	08004409 	.word	0x08004409
 8004134:	08004155 	.word	0x08004155
 8004138:	08004409 	.word	0x08004409
 800413c:	08004409 	.word	0x08004409
 8004140:	08004409 	.word	0x08004409
 8004144:	080042b1 	.word	0x080042b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4bb4      	ldr	r3, [pc, #720]	; (800441c <HAL_RCC_GetSysClockFreq+0x338>)
 800414a:	613b      	str	r3, [r7, #16]
       break;
 800414c:	e15f      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414e:	4bb4      	ldr	r3, [pc, #720]	; (8004420 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004150:	613b      	str	r3, [r7, #16]
      break;
 8004152:	e15c      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004154:	4bb0      	ldr	r3, [pc, #704]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800415c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415e:	4bae      	ldr	r3, [pc, #696]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d04a      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416a:	4bab      	ldr	r3, [pc, #684]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea03 0501 	and.w	r5, r3, r1
 8004180:	ea04 0602 	and.w	r6, r4, r2
 8004184:	4629      	mov	r1, r5
 8004186:	4632      	mov	r2, r6
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	f04f 0400 	mov.w	r4, #0
 8004190:	0154      	lsls	r4, r2, #5
 8004192:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004196:	014b      	lsls	r3, r1, #5
 8004198:	4619      	mov	r1, r3
 800419a:	4622      	mov	r2, r4
 800419c:	1b49      	subs	r1, r1, r5
 800419e:	eb62 0206 	sbc.w	r2, r2, r6
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	f04f 0400 	mov.w	r4, #0
 80041aa:	0194      	lsls	r4, r2, #6
 80041ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041b0:	018b      	lsls	r3, r1, #6
 80041b2:	1a5b      	subs	r3, r3, r1
 80041b4:	eb64 0402 	sbc.w	r4, r4, r2
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	00e2      	lsls	r2, r4, #3
 80041c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041c6:	00d9      	lsls	r1, r3, #3
 80041c8:	460b      	mov	r3, r1
 80041ca:	4614      	mov	r4, r2
 80041cc:	195b      	adds	r3, r3, r5
 80041ce:	eb44 0406 	adc.w	r4, r4, r6
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	0262      	lsls	r2, r4, #9
 80041dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041e0:	0259      	lsls	r1, r3, #9
 80041e2:	460b      	mov	r3, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	4621      	mov	r1, r4
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f04f 0400 	mov.w	r4, #0
 80041f0:	461a      	mov	r2, r3
 80041f2:	4623      	mov	r3, r4
 80041f4:	f7fc f806 	bl	8000204 <__aeabi_uldivmod>
 80041f8:	4603      	mov	r3, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e049      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004200:	4b85      	ldr	r3, [pc, #532]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	f04f 0400 	mov.w	r4, #0
 800420a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	ea03 0501 	and.w	r5, r3, r1
 8004216:	ea04 0602 	and.w	r6, r4, r2
 800421a:	4629      	mov	r1, r5
 800421c:	4632      	mov	r2, r6
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	f04f 0400 	mov.w	r4, #0
 8004226:	0154      	lsls	r4, r2, #5
 8004228:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800422c:	014b      	lsls	r3, r1, #5
 800422e:	4619      	mov	r1, r3
 8004230:	4622      	mov	r2, r4
 8004232:	1b49      	subs	r1, r1, r5
 8004234:	eb62 0206 	sbc.w	r2, r2, r6
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	f04f 0400 	mov.w	r4, #0
 8004240:	0194      	lsls	r4, r2, #6
 8004242:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004246:	018b      	lsls	r3, r1, #6
 8004248:	1a5b      	subs	r3, r3, r1
 800424a:	eb64 0402 	sbc.w	r4, r4, r2
 800424e:	f04f 0100 	mov.w	r1, #0
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	00e2      	lsls	r2, r4, #3
 8004258:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800425c:	00d9      	lsls	r1, r3, #3
 800425e:	460b      	mov	r3, r1
 8004260:	4614      	mov	r4, r2
 8004262:	195b      	adds	r3, r3, r5
 8004264:	eb44 0406 	adc.w	r4, r4, r6
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	02a2      	lsls	r2, r4, #10
 8004272:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004276:	0299      	lsls	r1, r3, #10
 8004278:	460b      	mov	r3, r1
 800427a:	4614      	mov	r4, r2
 800427c:	4618      	mov	r0, r3
 800427e:	4621      	mov	r1, r4
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f04f 0400 	mov.w	r4, #0
 8004286:	461a      	mov	r2, r3
 8004288:	4623      	mov	r3, r4
 800428a:	f7fb ffbb 	bl	8000204 <__aeabi_uldivmod>
 800428e:	4603      	mov	r3, r0
 8004290:	460c      	mov	r4, r1
 8004292:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004294:	4b60      	ldr	r3, [pc, #384]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	613b      	str	r3, [r7, #16]
      break;
 80042ae:	e0ae      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b57      	ldr	r3, [pc, #348]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04a      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b54      	ldr	r3, [pc, #336]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	ea03 0501 	and.w	r5, r3, r1
 80042dc:	ea04 0602 	and.w	r6, r4, r2
 80042e0:	4629      	mov	r1, r5
 80042e2:	4632      	mov	r2, r6
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	0154      	lsls	r4, r2, #5
 80042ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042f2:	014b      	lsls	r3, r1, #5
 80042f4:	4619      	mov	r1, r3
 80042f6:	4622      	mov	r2, r4
 80042f8:	1b49      	subs	r1, r1, r5
 80042fa:	eb62 0206 	sbc.w	r2, r2, r6
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	f04f 0400 	mov.w	r4, #0
 8004306:	0194      	lsls	r4, r2, #6
 8004308:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800430c:	018b      	lsls	r3, r1, #6
 800430e:	1a5b      	subs	r3, r3, r1
 8004310:	eb64 0402 	sbc.w	r4, r4, r2
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	00e2      	lsls	r2, r4, #3
 800431e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004322:	00d9      	lsls	r1, r3, #3
 8004324:	460b      	mov	r3, r1
 8004326:	4614      	mov	r4, r2
 8004328:	195b      	adds	r3, r3, r5
 800432a:	eb44 0406 	adc.w	r4, r4, r6
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	0262      	lsls	r2, r4, #9
 8004338:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800433c:	0259      	lsls	r1, r3, #9
 800433e:	460b      	mov	r3, r1
 8004340:	4614      	mov	r4, r2
 8004342:	4618      	mov	r0, r3
 8004344:	4621      	mov	r1, r4
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	461a      	mov	r2, r3
 800434e:	4623      	mov	r3, r4
 8004350:	f7fb ff58 	bl	8000204 <__aeabi_uldivmod>
 8004354:	4603      	mov	r3, r0
 8004356:	460c      	mov	r4, r1
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e049      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435c:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	f04f 0400 	mov.w	r4, #0
 8004366:	f240 11ff 	movw	r1, #511	; 0x1ff
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	ea03 0501 	and.w	r5, r3, r1
 8004372:	ea04 0602 	and.w	r6, r4, r2
 8004376:	4629      	mov	r1, r5
 8004378:	4632      	mov	r2, r6
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	f04f 0400 	mov.w	r4, #0
 8004382:	0154      	lsls	r4, r2, #5
 8004384:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004388:	014b      	lsls	r3, r1, #5
 800438a:	4619      	mov	r1, r3
 800438c:	4622      	mov	r2, r4
 800438e:	1b49      	subs	r1, r1, r5
 8004390:	eb62 0206 	sbc.w	r2, r2, r6
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	0194      	lsls	r4, r2, #6
 800439e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043a2:	018b      	lsls	r3, r1, #6
 80043a4:	1a5b      	subs	r3, r3, r1
 80043a6:	eb64 0402 	sbc.w	r4, r4, r2
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	00e2      	lsls	r2, r4, #3
 80043b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043b8:	00d9      	lsls	r1, r3, #3
 80043ba:	460b      	mov	r3, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	195b      	adds	r3, r3, r5
 80043c0:	eb44 0406 	adc.w	r4, r4, r6
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	02a2      	lsls	r2, r4, #10
 80043ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043d2:	0299      	lsls	r1, r3, #10
 80043d4:	460b      	mov	r3, r1
 80043d6:	4614      	mov	r4, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	4621      	mov	r1, r4
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f04f 0400 	mov.w	r4, #0
 80043e2:	461a      	mov	r2, r3
 80043e4:	4623      	mov	r3, r4
 80043e6:	f7fb ff0d 	bl	8000204 <__aeabi_uldivmod>
 80043ea:	4603      	mov	r3, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_GetSysClockFreq+0x334>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0f1b      	lsrs	r3, r3, #28
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	613b      	str	r3, [r7, #16]
      break;
 8004406:	e002      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <HAL_RCC_GetSysClockFreq+0x338>)
 800440a:	613b      	str	r3, [r7, #16]
      break;
 800440c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440e:	693b      	ldr	r3, [r7, #16]
}
 8004410:	4618      	mov	r0, r3
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	007a1200 	.word	0x007a1200

08004424 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8083 	beq.w	8004544 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800443e:	4b95      	ldr	r3, [pc, #596]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b04      	cmp	r3, #4
 8004448:	d019      	beq.n	800447e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800444a:	4b92      	ldr	r3, [pc, #584]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004452:	2b08      	cmp	r3, #8
 8004454:	d106      	bne.n	8004464 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004456:	4b8f      	ldr	r3, [pc, #572]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004462:	d00c      	beq.n	800447e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004464:	4b8b      	ldr	r3, [pc, #556]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d112      	bne.n	8004496 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004470:	4b88      	ldr	r3, [pc, #544]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447c:	d10b      	bne.n	8004496 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447e:	4b85      	ldr	r3, [pc, #532]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d05b      	beq.n	8004542 <HAL_RCC_OscConfig+0x11e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d157      	bne.n	8004542 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e216      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x8a>
 80044a0:	4b7c      	ldr	r3, [pc, #496]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a7b      	ldr	r2, [pc, #492]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	e01d      	b.n	80044ea <HAL_RCC_OscConfig+0xc6>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b6:	d10c      	bne.n	80044d2 <HAL_RCC_OscConfig+0xae>
 80044b8:	4b76      	ldr	r3, [pc, #472]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a75      	ldr	r2, [pc, #468]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b73      	ldr	r3, [pc, #460]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a72      	ldr	r2, [pc, #456]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	e00b      	b.n	80044ea <HAL_RCC_OscConfig+0xc6>
 80044d2:	4b70      	ldr	r3, [pc, #448]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6f      	ldr	r2, [pc, #444]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b6d      	ldr	r3, [pc, #436]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6c      	ldr	r2, [pc, #432]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80044e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d013      	beq.n	800451a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fe fd7d 	bl	8002ff0 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044fa:	f7fe fd79 	bl	8002ff0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e1db      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450c:	4b61      	ldr	r3, [pc, #388]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0xd6>
 8004518:	e014      	b.n	8004544 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fe fd69 	bl	8002ff0 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004522:	f7fe fd65 	bl	8002ff0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b64      	cmp	r3, #100	; 0x64
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1c7      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004534:	4b57      	ldr	r3, [pc, #348]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0xfe>
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004542:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d06f      	beq.n	8004630 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004550:	4b50      	ldr	r3, [pc, #320]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b00      	cmp	r3, #0
 800455a:	d017      	beq.n	800458c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800455c:	4b4d      	ldr	r3, [pc, #308]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004564:	2b08      	cmp	r3, #8
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004568:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004574:	4b47      	ldr	r3, [pc, #284]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d11c      	bne.n	80045ba <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004580:	4b44      	ldr	r3, [pc, #272]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d116      	bne.n	80045ba <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458c:	4b41      	ldr	r3, [pc, #260]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_OscConfig+0x180>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e18f      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4938      	ldr	r1, [pc, #224]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b8:	e03a      	b.n	8004630 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d020      	beq.n	8004604 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c2:	4b35      	ldr	r3, [pc, #212]	; (8004698 <HAL_RCC_OscConfig+0x274>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fd12 	bl	8002ff0 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe fd0e 	bl	8002ff0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e170      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e2:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4925      	ldr	r1, [pc, #148]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
 8004602:	e015      	b.n	8004630 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_RCC_OscConfig+0x274>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fe fcf1 	bl	8002ff0 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004612:	f7fe fced 	bl	8002ff0 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e14f      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d037      	beq.n	80046ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d016      	beq.n	8004672 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004644:	4b15      	ldr	r3, [pc, #84]	; (800469c <HAL_RCC_OscConfig+0x278>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fe fcd1 	bl	8002ff0 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004652:	f7fe fccd 	bl	8002ff0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e12f      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_RCC_OscConfig+0x270>)
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x22e>
 8004670:	e01c      	b.n	80046ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_RCC_OscConfig+0x278>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fe fcba 	bl	8002ff0 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467e:	e00f      	b.n	80046a0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004680:	f7fe fcb6 	bl	8002ff0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d908      	bls.n	80046a0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e118      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	42470000 	.word	0x42470000
 800469c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80046a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e9      	bne.n	8004680 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8097 	beq.w	80047e8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046be:	4b83      	ldr	r3, [pc, #524]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	4b7f      	ldr	r3, [pc, #508]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	4a7e      	ldr	r2, [pc, #504]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6413      	str	r3, [r2, #64]	; 0x40
 80046da:	4b7c      	ldr	r3, [pc, #496]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ea:	4b79      	ldr	r3, [pc, #484]	; (80048d0 <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d118      	bne.n	8004728 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f6:	4b76      	ldr	r3, [pc, #472]	; (80048d0 <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a75      	ldr	r2, [pc, #468]	; (80048d0 <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004702:	f7fe fc75 	bl	8002ff0 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470a:	f7fe fc71 	bl	8002ff0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0d3      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	4b6c      	ldr	r3, [pc, #432]	; (80048d0 <HAL_RCC_OscConfig+0x4ac>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d106      	bne.n	800473e <HAL_RCC_OscConfig+0x31a>
 8004730:	4b66      	ldr	r3, [pc, #408]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a65      	ldr	r2, [pc, #404]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	e01c      	b.n	8004778 <HAL_RCC_OscConfig+0x354>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b05      	cmp	r3, #5
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x33c>
 8004746:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a60      	ldr	r2, [pc, #384]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	6713      	str	r3, [r2, #112]	; 0x70
 8004752:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a5d      	ldr	r2, [pc, #372]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6713      	str	r3, [r2, #112]	; 0x70
 800475e:	e00b      	b.n	8004778 <HAL_RCC_OscConfig+0x354>
 8004760:	4b5a      	ldr	r3, [pc, #360]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4a59      	ldr	r2, [pc, #356]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
 800476c:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a56      	ldr	r2, [pc, #344]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004772:	f023 0304 	bic.w	r3, r3, #4
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d015      	beq.n	80047ac <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fe fc36 	bl	8002ff0 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004786:	e00a      	b.n	800479e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004788:	f7fe fc32 	bl	8002ff0 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e092      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479e:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ee      	beq.n	8004788 <HAL_RCC_OscConfig+0x364>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fe fc20 	bl	8002ff0 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fe fc1c 	bl	8002ff0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e07c      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ca:	4b40      	ldr	r3, [pc, #256]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ee      	bne.n	80047b4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	4a3a      	ldr	r2, [pc, #232]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80047e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d068      	beq.n	80048c2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d060      	beq.n	80048be <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d145      	bne.n	8004890 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x4b0>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fe fbf1 	bl	8002ff0 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004812:	f7fe fbed 	bl	8002ff0 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e04f      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	019b      	lsls	r3, r3, #6
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	3b01      	subs	r3, #1
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	071b      	lsls	r3, r3, #28
 800485c:	491b      	ldr	r1, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <HAL_RCC_OscConfig+0x4b0>)
 8004864:	2201      	movs	r2, #1
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fe fbc2 	bl	8002ff0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004870:	f7fe fbbe 	bl	8002ff0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e020      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x44c>
 800488e:	e018      	b.n	80048c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004890:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x4b0>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fe fbab 	bl	8002ff0 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489e:	f7fe fba7 	bl	8002ff0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e009      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCC_OscConfig+0x4a8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x47a>
 80048bc:	e001      	b.n	80048c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42470060 	.word	0x42470060

080048d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e056      	b.n	8004998 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fd f9ff 	bl	8001d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	ea42 0103 	orr.w	r1, r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	0c1b      	lsrs	r3, r3, #16
 8004968:	f003 0104 	and.w	r1, r3, #4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004986:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_SPI_Transmit+0x22>
 80049be:	2302      	movs	r3, #2
 80049c0:	e11e      	b.n	8004c00 <HAL_SPI_Transmit+0x260>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ca:	f7fe fb11 	bl	8002ff0 <HAL_GetTick>
 80049ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d002      	beq.n	80049e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
 80049e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049e4:	e103      	b.n	8004bee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_SPI_Transmit+0x52>
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049f6:	e0fa      	b.n	8004bee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2203      	movs	r2, #3
 80049fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	88fa      	ldrh	r2, [r7, #6]
 8004a10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3e:	d107      	bne.n	8004a50 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d007      	beq.n	8004a6e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a76:	d14b      	bne.n	8004b10 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_SPI_Transmit+0xe6>
 8004a80:	8afb      	ldrh	r3, [r7, #22]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d13e      	bne.n	8004b04 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	881a      	ldrh	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	1c9a      	adds	r2, r3, #2
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004aaa:	e02b      	b.n	8004b04 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d112      	bne.n	8004ae0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ade:	e011      	b.n	8004b04 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae0:	f7fe fa86 	bl	8002ff0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d803      	bhi.n	8004af8 <HAL_SPI_Transmit+0x158>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d102      	bne.n	8004afe <HAL_SPI_Transmit+0x15e>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b02:	e074      	b.n	8004bee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1ce      	bne.n	8004aac <HAL_SPI_Transmit+0x10c>
 8004b0e:	e04c      	b.n	8004baa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_SPI_Transmit+0x17e>
 8004b18:	8afb      	ldrh	r3, [r7, #22]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d140      	bne.n	8004ba0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b44:	e02c      	b.n	8004ba0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d113      	bne.n	8004b7c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b7a:	e011      	b.n	8004ba0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b7c:	f7fe fa38 	bl	8002ff0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d803      	bhi.n	8004b94 <HAL_SPI_Transmit+0x1f4>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_Transmit+0x1fa>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b9e:	e026      	b.n	8004bee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1cd      	bne.n	8004b46 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fcc4 	bl	800553c <SPI_EndRxTxTransaction>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e000      	b.n	8004bee <HAL_SPI_Transmit+0x24e>
  }

error:
 8004bec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c24:	d112      	bne.n	8004c4c <HAL_SPI_Receive+0x44>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2204      	movs	r2, #4
 8004c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f8e9 	bl	8004e1a <HAL_SPI_TransmitReceive>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	e0e2      	b.n	8004e12 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_SPI_Receive+0x52>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0db      	b.n	8004e12 <HAL_SPI_Receive+0x20a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c62:	f7fe f9c5 	bl	8002ff0 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
 8004c76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c78:	e0c2      	b.n	8004e00 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_Receive+0x7e>
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c8a:	e0b9      	b.n	8004e00 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2204      	movs	r2, #4
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd2:	d107      	bne.n	8004ce4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d007      	beq.n	8004d02 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d162      	bne.n	8004dd0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d0a:	e02e      	b.n	8004d6a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d115      	bne.n	8004d46 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f103 020c 	add.w	r2, r3, #12
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d44:	e011      	b.n	8004d6a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d46:	f7fe f953 	bl	8002ff0 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d803      	bhi.n	8004d5e <HAL_SPI_Receive+0x156>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d102      	bne.n	8004d64 <HAL_SPI_Receive+0x15c>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d68:	e04a      	b.n	8004e00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1cb      	bne.n	8004d0c <HAL_SPI_Receive+0x104>
 8004d74:	e031      	b.n	8004dda <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d113      	bne.n	8004dac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004daa:	e011      	b.n	8004dd0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dac:	f7fe f920 	bl	8002ff0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d803      	bhi.n	8004dc4 <HAL_SPI_Receive+0x1bc>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d102      	bne.n	8004dca <HAL_SPI_Receive+0x1c2>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dce:	e017      	b.n	8004e00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1cd      	bne.n	8004d76 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fb46 	bl	8005470 <SPI_EndRxTransaction>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
 8004dfc:	e000      	b.n	8004e00 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004dfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b08c      	sub	sp, #48	; 0x30
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x26>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e18a      	b.n	8005156 <HAL_SPI_TransmitReceive+0x33c>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e48:	f7fe f8d2 	bl	8002ff0 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d00f      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x70>
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e70:	d107      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x68>
 8004e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d003      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
 8004e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e88:	e15b      	b.n	8005142 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x82>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x82>
 8004e96:	887b      	ldrh	r3, [r7, #2]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ea2:	e14e      	b.n	8005142 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d003      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	887a      	ldrh	r2, [r7, #2]
 8004ece:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	887a      	ldrh	r2, [r7, #2]
 8004eda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	887a      	ldrh	r2, [r7, #2]
 8004ee0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d007      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f14:	d178      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_TransmitReceive+0x10a>
 8004f1e:	8b7b      	ldrh	r3, [r7, #26]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d166      	bne.n	8004ff2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f48:	e053      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d11b      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x176>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x176>
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d113      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	881a      	ldrh	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	1c9a      	adds	r2, r3, #2
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d119      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x1b8>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d014      	beq.n	8004fd2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	b292      	uxth	r2, r2
 8004fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	1c9a      	adds	r2, r3, #2
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fd2:	f7fe f80d 	bl	8002ff0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d807      	bhi.n	8004ff2 <HAL_SPI_TransmitReceive+0x1d8>
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d003      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ff0:	e0a7      	b.n	8005142 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1a6      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x130>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1a1      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x130>
 8005006:	e07c      	b.n	8005102 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x1fc>
 8005010:	8b7b      	ldrh	r3, [r7, #26]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d16b      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503c:	e057      	b.n	80050ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d11c      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x26c>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d017      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x26c>
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d114      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b01      	cmp	r3, #1
 8005092:	d119      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x2ae>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d014      	beq.n	80050c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050c4:	2301      	movs	r3, #1
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050c8:	f7fd ff92 	bl	8002ff0 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d803      	bhi.n	80050e0 <HAL_SPI_TransmitReceive+0x2c6>
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d102      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x2cc>
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050ec:	e029      	b.n	8005142 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1a2      	bne.n	800503e <HAL_SPI_TransmitReceive+0x224>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d19d      	bne.n	800503e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fa18 	bl	800553c <SPI_EndRxTxTransaction>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d006      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800511e:	e010      	b.n	8005142 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	e000      	b.n	8005142 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005140:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005152:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005156:	4618      	mov	r0, r3
 8005158:	3730      	adds	r7, #48	; 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10f      	bne.n	80051a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	099b      	lsrs	r3, r3, #6
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
    return;
 80051a2:	e0d8      	b.n	8005356 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_SPI_IRQHandler+0x66>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	09db      	lsrs	r3, r3, #7
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4798      	blx	r3
    return;
 80051c4:	e0c7      	b.n	8005356 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10c      	bne.n	80051ec <HAL_SPI_IRQHandler+0x8c>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80b5 	beq.w	8005356 <HAL_SPI_IRQHandler+0x1f6>
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80ae 	beq.w	8005356 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	099b      	lsrs	r3, r3, #6
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d023      	beq.n	800524e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b03      	cmp	r3, #3
 8005210:	d011      	beq.n	8005236 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	e00b      	b.n	800524e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	693b      	ldr	r3, [r7, #16]
        return;
 800524c:	e083      	b.n	8005356 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f043 0201 	orr.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f043 0208 	orr.w	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800529c:	2300      	movs	r3, #0
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d050      	beq.n	8005354 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <HAL_SPI_IRQHandler+0x17e>
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d034      	beq.n	8005348 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0203 	bic.w	r2, r2, #3
 80052ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	4a18      	ldr	r2, [pc, #96]	; (800535c <HAL_SPI_IRQHandler+0x1fc>)
 80052fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe f92a 	bl	800355c <HAL_DMA_Abort_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005326:	4a0d      	ldr	r2, [pc, #52]	; (800535c <HAL_SPI_IRQHandler+0x1fc>)
 8005328:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe f914 	bl	800355c <HAL_DMA_Abort_IT>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005346:	e003      	b.n	8005350 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f809 	bl	8005360 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800534e:	e000      	b.n	8005352 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005350:	bf00      	nop
    return;
 8005352:	bf00      	nop
 8005354:	bf00      	nop
  }
}
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	08005375 	.word	0x08005375

08005360 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff ffe6 	bl	8005360 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ac:	e04c      	b.n	8005448 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d048      	beq.n	8005448 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053b6:	f7fd fe1b 	bl	8002ff0 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d902      	bls.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x30>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d13d      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e4:	d111      	bne.n	800540a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ee:	d004      	beq.n	80053fa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d107      	bne.n	800540a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005408:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005412:	d10f      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e00f      	b.n	8005468 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	429a      	cmp	r2, r3
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	429a      	cmp	r2, r3
 8005464:	d1a3      	bne.n	80053ae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005484:	d111      	bne.n	80054aa <SPI_EndRxTransaction+0x3a>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548e:	d004      	beq.n	800549a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005498:	d107      	bne.n	80054aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b2:	d12a      	bne.n	800550a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054bc:	d012      	beq.n	80054e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff ff67 	bl	800539c <SPI_WaitFlagStateUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02d      	beq.n	8005530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e026      	b.n	8005532 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	2101      	movs	r1, #1
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff ff54 	bl	800539c <SPI_WaitFlagStateUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e013      	b.n	8005532 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2200      	movs	r2, #0
 8005512:	2101      	movs	r1, #1
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff ff41 	bl	800539c <SPI_WaitFlagStateUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e000      	b.n	8005532 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005548:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <SPI_EndRxTxTransaction+0x7c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <SPI_EndRxTxTransaction+0x80>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0d5b      	lsrs	r3, r3, #21
 8005554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005566:	d112      	bne.n	800558e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff ff12 	bl	800539c <SPI_WaitFlagStateUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e00f      	b.n	80055ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3b01      	subs	r3, #1
 8005598:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a4:	2b80      	cmp	r3, #128	; 0x80
 80055a6:	d0f2      	beq.n	800558e <SPI_EndRxTxTransaction+0x52>
 80055a8:	e000      	b.n	80055ac <SPI_EndRxTxTransaction+0x70>
        break;
 80055aa:	bf00      	nop
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000024 	.word	0x20000024
 80055bc:	165e9f81 	.word	0x165e9f81

080055c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e01d      	b.n	800560e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc fc46 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 f988 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b06      	cmp	r3, #6
 800563e:	d007      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <HAL_TIM_Base_Stop_IT+0x48>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	f240 4344 	movw	r3, #1092	; 0x444
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_TIM_Base_Stop_IT+0x48>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d122      	bne.n	8005710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d11b      	bne.n	8005710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0202 	mvn.w	r2, #2
 80056e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8ee 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 80056fc:	e005      	b.n	800570a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8e0 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f8f1 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b04      	cmp	r3, #4
 800571c:	d122      	bne.n	8005764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b04      	cmp	r3, #4
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0204 	mvn.w	r2, #4
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8c4 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8b6 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f8c7 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b08      	cmp	r3, #8
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b08      	cmp	r3, #8
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0208 	mvn.w	r2, #8
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2204      	movs	r2, #4
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f89a 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f88c 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f89d 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d122      	bne.n	800580c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d11b      	bne.n	800580c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0210 	mvn.w	r2, #16
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2208      	movs	r2, #8
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f870 	bl	80058d8 <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f862 	bl	80058c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f873 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b01      	cmp	r3, #1
 8005818:	d10e      	bne.n	8005838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d107      	bne.n	8005838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0201 	mvn.w	r2, #1
 8005830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc f91a 	bl	8001a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d10e      	bne.n	8005864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005850:	2b80      	cmp	r3, #128	; 0x80
 8005852:	d107      	bne.n	8005864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800585c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f97e 	bl	8005b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d10e      	bne.n	8005890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d107      	bne.n	8005890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f838 	bl	8005900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b20      	cmp	r3, #32
 800589c:	d10e      	bne.n	80058bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d107      	bne.n	80058bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0220 	mvn.w	r2, #32
 80058b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f948 	bl	8005b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058bc:	bf00      	nop
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a40      	ldr	r2, [pc, #256]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d00f      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a3d      	ldr	r2, [pc, #244]	; (8005a2c <TIM_Base_SetConfig+0x118>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <TIM_Base_SetConfig+0x11c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a3b      	ldr	r2, [pc, #236]	; (8005a34 <TIM_Base_SetConfig+0x120>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3a      	ldr	r2, [pc, #232]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d108      	bne.n	8005966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2f      	ldr	r2, [pc, #188]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d02b      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d027      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <TIM_Base_SetConfig+0x118>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d023      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2b      	ldr	r2, [pc, #172]	; (8005a30 <TIM_Base_SetConfig+0x11c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01f      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2a      	ldr	r2, [pc, #168]	; (8005a34 <TIM_Base_SetConfig+0x120>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01b      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d017      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <TIM_Base_SetConfig+0x128>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <TIM_Base_SetConfig+0x12c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00f      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <TIM_Base_SetConfig+0x130>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a25      	ldr	r2, [pc, #148]	; (8005a48 <TIM_Base_SetConfig+0x134>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a24      	ldr	r2, [pc, #144]	; (8005a4c <TIM_Base_SetConfig+0x138>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a23      	ldr	r2, [pc, #140]	; (8005a50 <TIM_Base_SetConfig+0x13c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d108      	bne.n	80059d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0xf8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d103      	bne.n	8005a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	615a      	str	r2, [r3, #20]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800
 8005a48:	40001800 	.word	0x40001800
 8005a4c:	40001c00 	.word	0x40001c00
 8005a50:	40002000 	.word	0x40002000

08005a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e05a      	b.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a21      	ldr	r2, [pc, #132]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d022      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab8:	d01d      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d018      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d10c      	bne.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40010400 	.word	0x40010400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40001800 	.word	0x40001800

08005b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e03f      	b.n	8005c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc f9d0 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2224      	movs	r2, #36	; 0x24
 8005ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fc0d 	bl	80063d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d166      	bne.n	8005cf8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_UART_Receive_DMA+0x26>
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e05f      	b.n	8005cfa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Receive_DMA+0x38>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e058      	b.n	8005cfa <HAL_UART_Receive_DMA+0xea>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2222      	movs	r2, #34	; 0x22
 8005c66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6e:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <HAL_UART_Receive_DMA+0xf4>)
 8005c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c76:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <HAL_UART_Receive_DMA+0xf8>)
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <HAL_UART_Receive_DMA+0xfc>)
 8005c80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	2200      	movs	r2, #0
 8005c88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005c8a:	f107 0308 	add.w	r3, r7, #8
 8005c8e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	f7fd fb93 	bl	80033cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e000      	b.n	8005cfa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	08006051 	.word	0x08006051
 8005d08:	080060b9 	.word	0x080060b9
 8005d0c:	080060d5 	.word	0x080060d5

08005d10 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005d26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	d124      	bne.n	8005d90 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d54:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	2200      	movs	r2, #0
 8005d64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd fb86 	bl	800347c <HAL_DMA_Abort>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fd fd9a 	bl	80038b4 <HAL_DMA_GetError>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d104      	bne.n	8005d90 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2210      	movs	r2, #16
 8005d8a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e03d      	b.n	8005e0c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d124      	bne.n	8005de8 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dac:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d018      	beq.n	8005de8 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	2200      	movs	r2, #0
 8005dbc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fd fb5a 	bl	800347c <HAL_DMA_Abort>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd fd6e 	bl	80038b4 <HAL_DMA_GetError>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d104      	bne.n	8005de8 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2210      	movs	r2, #16
 8005de2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e011      	b.n	8005e0c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10d      	bne.n	8005e66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_UART_IRQHandler+0x52>
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa38 	bl	80062d4 <UART_Receive_IT>
      return;
 8005e64:	e0d1      	b.n	800600a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80b0 	beq.w	8005fce <HAL_UART_IRQHandler+0x1ba>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <HAL_UART_IRQHandler+0x70>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80a5 	beq.w	8005fce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x90>
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9c:	f043 0201 	orr.w	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_UART_IRQHandler+0xb0>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebc:	f043 0202 	orr.w	r2, r3, #2
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_UART_IRQHandler+0xd0>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	f043 0204 	orr.w	r2, r3, #4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00f      	beq.n	8005f0e <HAL_UART_IRQHandler+0xfa>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d104      	bne.n	8005f02 <HAL_UART_IRQHandler+0xee>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	f043 0208 	orr.w	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d078      	beq.n	8006008 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_UART_IRQHandler+0x11c>
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9d2 	bl	80062d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <HAL_UART_IRQHandler+0x144>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d031      	beq.n	8005fbc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f91b 	bl	8006194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d123      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d013      	beq.n	8005fac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	4a21      	ldr	r2, [pc, #132]	; (8006010 <HAL_UART_IRQHandler+0x1fc>)
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fd fae3 	bl	800355c <HAL_DMA_Abort_IT>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d016      	beq.n	8005fca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	e00e      	b.n	8005fca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f845 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb2:	e00a      	b.n	8005fca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f841 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fba:	e006      	b.n	8005fca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f83d 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005fc8:	e01e      	b.n	8006008 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fca:	bf00      	nop
    return;
 8005fcc:	e01c      	b.n	8006008 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_UART_IRQHandler+0x1d6>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f908 	bl	80061f8 <UART_Transmit_IT>
    return;
 8005fe8:	e00f      	b.n	800600a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_UART_IRQHandler+0x1f6>
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f950 	bl	80062a4 <UART_EndTransmit_IT>
    return;
 8006004:	bf00      	nop
 8006006:	e000      	b.n	800600a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006008:	bf00      	nop
  }
}
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	080061d1 	.word	0x080061d1

08006014 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d11e      	bne.n	80060aa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006080:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7fb fc6a 	bl	8001984 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff ffae 	bl	8006028 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b21      	cmp	r3, #33	; 0x21
 8006106:	d108      	bne.n	800611a <UART_DMAError+0x46>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006114:	68b8      	ldr	r0, [r7, #8]
 8006116:	f000 f827 	bl	8006168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b22      	cmp	r3, #34	; 0x22
 800613a:	d108      	bne.n	800614e <UART_DMAError+0x7a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006148:	68b8      	ldr	r0, [r7, #8]
 800614a:	f000 f823 	bl	8006194 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	f043 0210 	orr.w	r2, r3, #16
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800615a:	68b8      	ldr	r0, [r7, #8]
 800615c:	f7ff ff6e 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800617e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff ff26 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b21      	cmp	r3, #33	; 0x21
 800620a:	d144      	bne.n	8006296 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006214:	d11a      	bne.n	800624c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]
 800623e:	e00e      	b.n	800625e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	621a      	str	r2, [r3, #32]
 800624a:	e008      	b.n	800625e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	1c59      	adds	r1, r3, #1
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6211      	str	r1, [r2, #32]
 8006256:	781a      	ldrb	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29b      	uxth	r3, r3
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4619      	mov	r1, r3
 800626c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10f      	bne.n	8006292 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006280:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006290:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e000      	b.n	8006298 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006296:	2302      	movs	r3, #2
  }
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff fea5 	bl	8006014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b22      	cmp	r3, #34	; 0x22
 80062e6:	d171      	bne.n	80063cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f0:	d123      	bne.n	800633a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10e      	bne.n	800631e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	1c9a      	adds	r2, r3, #2
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	629a      	str	r2, [r3, #40]	; 0x28
 800631c:	e029      	b.n	8006372 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	b29b      	uxth	r3, r3
 8006326:	b2db      	uxtb	r3, r3
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
 8006338:	e01b      	b.n	8006372 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6858      	ldr	r0, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	1c59      	adds	r1, r3, #1
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6291      	str	r1, [r2, #40]	; 0x28
 8006352:	b2c2      	uxtb	r2, r0
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e00c      	b.n	8006372 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	1c58      	adds	r0, r3, #1
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	6288      	str	r0, [r1, #40]	; 0x28
 800636a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29b      	uxth	r3, r3
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4619      	mov	r1, r3
 8006380:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006382:	2b00      	cmp	r3, #0
 8006384:	d120      	bne.n	80063c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0220 	bic.w	r2, r2, #32
 8006394:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0201 	bic.w	r2, r2, #1
 80063b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fb fae0 	bl	8001984 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e002      	b.n	80063ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	e000      	b.n	80063ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80063cc:	2302      	movs	r3, #2
  }
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800641a:	f023 030c 	bic.w	r3, r3, #12
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	430b      	orrs	r3, r1
 8006426:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006446:	f040 818b 	bne.w	8006760 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4ac1      	ldr	r2, [pc, #772]	; (8006754 <UART_SetConfig+0x37c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d005      	beq.n	8006460 <UART_SetConfig+0x88>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4abf      	ldr	r2, [pc, #764]	; (8006758 <UART_SetConfig+0x380>)
 800645a:	4293      	cmp	r3, r2
 800645c:	f040 80bd 	bne.w	80065da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006460:	f7fd fe2c 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 8006464:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	461d      	mov	r5, r3
 800646a:	f04f 0600 	mov.w	r6, #0
 800646e:	46a8      	mov	r8, r5
 8006470:	46b1      	mov	r9, r6
 8006472:	eb18 0308 	adds.w	r3, r8, r8
 8006476:	eb49 0409 	adc.w	r4, r9, r9
 800647a:	4698      	mov	r8, r3
 800647c:	46a1      	mov	r9, r4
 800647e:	eb18 0805 	adds.w	r8, r8, r5
 8006482:	eb49 0906 	adc.w	r9, r9, r6
 8006486:	f04f 0100 	mov.w	r1, #0
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006492:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006496:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800649a:	4688      	mov	r8, r1
 800649c:	4691      	mov	r9, r2
 800649e:	eb18 0005 	adds.w	r0, r8, r5
 80064a2:	eb49 0106 	adc.w	r1, r9, r6
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	461d      	mov	r5, r3
 80064ac:	f04f 0600 	mov.w	r6, #0
 80064b0:	196b      	adds	r3, r5, r5
 80064b2:	eb46 0406 	adc.w	r4, r6, r6
 80064b6:	461a      	mov	r2, r3
 80064b8:	4623      	mov	r3, r4
 80064ba:	f7f9 fea3 	bl	8000204 <__aeabi_uldivmod>
 80064be:	4603      	mov	r3, r0
 80064c0:	460c      	mov	r4, r1
 80064c2:	461a      	mov	r2, r3
 80064c4:	4ba5      	ldr	r3, [pc, #660]	; (800675c <UART_SetConfig+0x384>)
 80064c6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	461d      	mov	r5, r3
 80064d4:	f04f 0600 	mov.w	r6, #0
 80064d8:	46a9      	mov	r9, r5
 80064da:	46b2      	mov	sl, r6
 80064dc:	eb19 0309 	adds.w	r3, r9, r9
 80064e0:	eb4a 040a 	adc.w	r4, sl, sl
 80064e4:	4699      	mov	r9, r3
 80064e6:	46a2      	mov	sl, r4
 80064e8:	eb19 0905 	adds.w	r9, r9, r5
 80064ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80064f0:	f04f 0100 	mov.w	r1, #0
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006500:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006504:	4689      	mov	r9, r1
 8006506:	4692      	mov	sl, r2
 8006508:	eb19 0005 	adds.w	r0, r9, r5
 800650c:	eb4a 0106 	adc.w	r1, sl, r6
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	461d      	mov	r5, r3
 8006516:	f04f 0600 	mov.w	r6, #0
 800651a:	196b      	adds	r3, r5, r5
 800651c:	eb46 0406 	adc.w	r4, r6, r6
 8006520:	461a      	mov	r2, r3
 8006522:	4623      	mov	r3, r4
 8006524:	f7f9 fe6e 	bl	8000204 <__aeabi_uldivmod>
 8006528:	4603      	mov	r3, r0
 800652a:	460c      	mov	r4, r1
 800652c:	461a      	mov	r2, r3
 800652e:	4b8b      	ldr	r3, [pc, #556]	; (800675c <UART_SetConfig+0x384>)
 8006530:	fba3 1302 	umull	r1, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	2164      	movs	r1, #100	; 0x64
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	3332      	adds	r3, #50	; 0x32
 8006542:	4a86      	ldr	r2, [pc, #536]	; (800675c <UART_SetConfig+0x384>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006550:	4498      	add	r8, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	461d      	mov	r5, r3
 8006556:	f04f 0600 	mov.w	r6, #0
 800655a:	46a9      	mov	r9, r5
 800655c:	46b2      	mov	sl, r6
 800655e:	eb19 0309 	adds.w	r3, r9, r9
 8006562:	eb4a 040a 	adc.w	r4, sl, sl
 8006566:	4699      	mov	r9, r3
 8006568:	46a2      	mov	sl, r4
 800656a:	eb19 0905 	adds.w	r9, r9, r5
 800656e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006572:	f04f 0100 	mov.w	r1, #0
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800657e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006582:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006586:	4689      	mov	r9, r1
 8006588:	4692      	mov	sl, r2
 800658a:	eb19 0005 	adds.w	r0, r9, r5
 800658e:	eb4a 0106 	adc.w	r1, sl, r6
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	461d      	mov	r5, r3
 8006598:	f04f 0600 	mov.w	r6, #0
 800659c:	196b      	adds	r3, r5, r5
 800659e:	eb46 0406 	adc.w	r4, r6, r6
 80065a2:	461a      	mov	r2, r3
 80065a4:	4623      	mov	r3, r4
 80065a6:	f7f9 fe2d 	bl	8000204 <__aeabi_uldivmod>
 80065aa:	4603      	mov	r3, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	461a      	mov	r2, r3
 80065b0:	4b6a      	ldr	r3, [pc, #424]	; (800675c <UART_SetConfig+0x384>)
 80065b2:	fba3 1302 	umull	r1, r3, r3, r2
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2164      	movs	r1, #100	; 0x64
 80065ba:	fb01 f303 	mul.w	r3, r1, r3
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	3332      	adds	r3, #50	; 0x32
 80065c4:	4a65      	ldr	r2, [pc, #404]	; (800675c <UART_SetConfig+0x384>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	f003 0207 	and.w	r2, r3, #7
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4442      	add	r2, r8
 80065d6:	609a      	str	r2, [r3, #8]
 80065d8:	e26f      	b.n	8006aba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065da:	f7fd fd5b 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 80065de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	461d      	mov	r5, r3
 80065e4:	f04f 0600 	mov.w	r6, #0
 80065e8:	46a8      	mov	r8, r5
 80065ea:	46b1      	mov	r9, r6
 80065ec:	eb18 0308 	adds.w	r3, r8, r8
 80065f0:	eb49 0409 	adc.w	r4, r9, r9
 80065f4:	4698      	mov	r8, r3
 80065f6:	46a1      	mov	r9, r4
 80065f8:	eb18 0805 	adds.w	r8, r8, r5
 80065fc:	eb49 0906 	adc.w	r9, r9, r6
 8006600:	f04f 0100 	mov.w	r1, #0
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800660c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006610:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006614:	4688      	mov	r8, r1
 8006616:	4691      	mov	r9, r2
 8006618:	eb18 0005 	adds.w	r0, r8, r5
 800661c:	eb49 0106 	adc.w	r1, r9, r6
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	461d      	mov	r5, r3
 8006626:	f04f 0600 	mov.w	r6, #0
 800662a:	196b      	adds	r3, r5, r5
 800662c:	eb46 0406 	adc.w	r4, r6, r6
 8006630:	461a      	mov	r2, r3
 8006632:	4623      	mov	r3, r4
 8006634:	f7f9 fde6 	bl	8000204 <__aeabi_uldivmod>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	461a      	mov	r2, r3
 800663e:	4b47      	ldr	r3, [pc, #284]	; (800675c <UART_SetConfig+0x384>)
 8006640:	fba3 2302 	umull	r2, r3, r3, r2
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	461d      	mov	r5, r3
 800664e:	f04f 0600 	mov.w	r6, #0
 8006652:	46a9      	mov	r9, r5
 8006654:	46b2      	mov	sl, r6
 8006656:	eb19 0309 	adds.w	r3, r9, r9
 800665a:	eb4a 040a 	adc.w	r4, sl, sl
 800665e:	4699      	mov	r9, r3
 8006660:	46a2      	mov	sl, r4
 8006662:	eb19 0905 	adds.w	r9, r9, r5
 8006666:	eb4a 0a06 	adc.w	sl, sl, r6
 800666a:	f04f 0100 	mov.w	r1, #0
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006676:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800667a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800667e:	4689      	mov	r9, r1
 8006680:	4692      	mov	sl, r2
 8006682:	eb19 0005 	adds.w	r0, r9, r5
 8006686:	eb4a 0106 	adc.w	r1, sl, r6
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	461d      	mov	r5, r3
 8006690:	f04f 0600 	mov.w	r6, #0
 8006694:	196b      	adds	r3, r5, r5
 8006696:	eb46 0406 	adc.w	r4, r6, r6
 800669a:	461a      	mov	r2, r3
 800669c:	4623      	mov	r3, r4
 800669e:	f7f9 fdb1 	bl	8000204 <__aeabi_uldivmod>
 80066a2:	4603      	mov	r3, r0
 80066a4:	460c      	mov	r4, r1
 80066a6:	461a      	mov	r2, r3
 80066a8:	4b2c      	ldr	r3, [pc, #176]	; (800675c <UART_SetConfig+0x384>)
 80066aa:	fba3 1302 	umull	r1, r3, r3, r2
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2164      	movs	r1, #100	; 0x64
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	3332      	adds	r3, #50	; 0x32
 80066bc:	4a27      	ldr	r2, [pc, #156]	; (800675c <UART_SetConfig+0x384>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066ca:	4498      	add	r8, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	461d      	mov	r5, r3
 80066d0:	f04f 0600 	mov.w	r6, #0
 80066d4:	46a9      	mov	r9, r5
 80066d6:	46b2      	mov	sl, r6
 80066d8:	eb19 0309 	adds.w	r3, r9, r9
 80066dc:	eb4a 040a 	adc.w	r4, sl, sl
 80066e0:	4699      	mov	r9, r3
 80066e2:	46a2      	mov	sl, r4
 80066e4:	eb19 0905 	adds.w	r9, r9, r5
 80066e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80066ec:	f04f 0100 	mov.w	r1, #0
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006700:	4689      	mov	r9, r1
 8006702:	4692      	mov	sl, r2
 8006704:	eb19 0005 	adds.w	r0, r9, r5
 8006708:	eb4a 0106 	adc.w	r1, sl, r6
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	461d      	mov	r5, r3
 8006712:	f04f 0600 	mov.w	r6, #0
 8006716:	196b      	adds	r3, r5, r5
 8006718:	eb46 0406 	adc.w	r4, r6, r6
 800671c:	461a      	mov	r2, r3
 800671e:	4623      	mov	r3, r4
 8006720:	f7f9 fd70 	bl	8000204 <__aeabi_uldivmod>
 8006724:	4603      	mov	r3, r0
 8006726:	460c      	mov	r4, r1
 8006728:	461a      	mov	r2, r3
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <UART_SetConfig+0x384>)
 800672c:	fba3 1302 	umull	r1, r3, r3, r2
 8006730:	095b      	lsrs	r3, r3, #5
 8006732:	2164      	movs	r1, #100	; 0x64
 8006734:	fb01 f303 	mul.w	r3, r1, r3
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	3332      	adds	r3, #50	; 0x32
 800673e:	4a07      	ldr	r2, [pc, #28]	; (800675c <UART_SetConfig+0x384>)
 8006740:	fba2 2303 	umull	r2, r3, r2, r3
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	f003 0207 	and.w	r2, r3, #7
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4442      	add	r2, r8
 8006750:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006752:	e1b2      	b.n	8006aba <UART_SetConfig+0x6e2>
 8006754:	40011000 	.word	0x40011000
 8006758:	40011400 	.word	0x40011400
 800675c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4ad7      	ldr	r2, [pc, #860]	; (8006ac4 <UART_SetConfig+0x6ec>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d005      	beq.n	8006776 <UART_SetConfig+0x39e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4ad6      	ldr	r2, [pc, #856]	; (8006ac8 <UART_SetConfig+0x6f0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	f040 80d1 	bne.w	8006918 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006776:	f7fd fca1 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 800677a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	469a      	mov	sl, r3
 8006780:	f04f 0b00 	mov.w	fp, #0
 8006784:	46d0      	mov	r8, sl
 8006786:	46d9      	mov	r9, fp
 8006788:	eb18 0308 	adds.w	r3, r8, r8
 800678c:	eb49 0409 	adc.w	r4, r9, r9
 8006790:	4698      	mov	r8, r3
 8006792:	46a1      	mov	r9, r4
 8006794:	eb18 080a 	adds.w	r8, r8, sl
 8006798:	eb49 090b 	adc.w	r9, r9, fp
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067b0:	4688      	mov	r8, r1
 80067b2:	4691      	mov	r9, r2
 80067b4:	eb1a 0508 	adds.w	r5, sl, r8
 80067b8:	eb4b 0609 	adc.w	r6, fp, r9
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4619      	mov	r1, r3
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	f04f 0400 	mov.w	r4, #0
 80067ce:	0094      	lsls	r4, r2, #2
 80067d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067d4:	008b      	lsls	r3, r1, #2
 80067d6:	461a      	mov	r2, r3
 80067d8:	4623      	mov	r3, r4
 80067da:	4628      	mov	r0, r5
 80067dc:	4631      	mov	r1, r6
 80067de:	f7f9 fd11 	bl	8000204 <__aeabi_uldivmod>
 80067e2:	4603      	mov	r3, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	461a      	mov	r2, r3
 80067e8:	4bb8      	ldr	r3, [pc, #736]	; (8006acc <UART_SetConfig+0x6f4>)
 80067ea:	fba3 2302 	umull	r2, r3, r3, r2
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	469b      	mov	fp, r3
 80067f8:	f04f 0c00 	mov.w	ip, #0
 80067fc:	46d9      	mov	r9, fp
 80067fe:	46e2      	mov	sl, ip
 8006800:	eb19 0309 	adds.w	r3, r9, r9
 8006804:	eb4a 040a 	adc.w	r4, sl, sl
 8006808:	4699      	mov	r9, r3
 800680a:	46a2      	mov	sl, r4
 800680c:	eb19 090b 	adds.w	r9, r9, fp
 8006810:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006814:	f04f 0100 	mov.w	r1, #0
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006820:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006824:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006828:	4689      	mov	r9, r1
 800682a:	4692      	mov	sl, r2
 800682c:	eb1b 0509 	adds.w	r5, fp, r9
 8006830:	eb4c 060a 	adc.w	r6, ip, sl
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4619      	mov	r1, r3
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	f04f 0400 	mov.w	r4, #0
 8006846:	0094      	lsls	r4, r2, #2
 8006848:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800684c:	008b      	lsls	r3, r1, #2
 800684e:	461a      	mov	r2, r3
 8006850:	4623      	mov	r3, r4
 8006852:	4628      	mov	r0, r5
 8006854:	4631      	mov	r1, r6
 8006856:	f7f9 fcd5 	bl	8000204 <__aeabi_uldivmod>
 800685a:	4603      	mov	r3, r0
 800685c:	460c      	mov	r4, r1
 800685e:	461a      	mov	r2, r3
 8006860:	4b9a      	ldr	r3, [pc, #616]	; (8006acc <UART_SetConfig+0x6f4>)
 8006862:	fba3 1302 	umull	r1, r3, r3, r2
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	2164      	movs	r1, #100	; 0x64
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	3332      	adds	r3, #50	; 0x32
 8006874:	4a95      	ldr	r2, [pc, #596]	; (8006acc <UART_SetConfig+0x6f4>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006880:	4498      	add	r8, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	469b      	mov	fp, r3
 8006886:	f04f 0c00 	mov.w	ip, #0
 800688a:	46d9      	mov	r9, fp
 800688c:	46e2      	mov	sl, ip
 800688e:	eb19 0309 	adds.w	r3, r9, r9
 8006892:	eb4a 040a 	adc.w	r4, sl, sl
 8006896:	4699      	mov	r9, r3
 8006898:	46a2      	mov	sl, r4
 800689a:	eb19 090b 	adds.w	r9, r9, fp
 800689e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068a2:	f04f 0100 	mov.w	r1, #0
 80068a6:	f04f 0200 	mov.w	r2, #0
 80068aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b6:	4689      	mov	r9, r1
 80068b8:	4692      	mov	sl, r2
 80068ba:	eb1b 0509 	adds.w	r5, fp, r9
 80068be:	eb4c 060a 	adc.w	r6, ip, sl
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4619      	mov	r1, r3
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	f04f 0400 	mov.w	r4, #0
 80068d4:	0094      	lsls	r4, r2, #2
 80068d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068da:	008b      	lsls	r3, r1, #2
 80068dc:	461a      	mov	r2, r3
 80068de:	4623      	mov	r3, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	4631      	mov	r1, r6
 80068e4:	f7f9 fc8e 	bl	8000204 <__aeabi_uldivmod>
 80068e8:	4603      	mov	r3, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	461a      	mov	r2, r3
 80068ee:	4b77      	ldr	r3, [pc, #476]	; (8006acc <UART_SetConfig+0x6f4>)
 80068f0:	fba3 1302 	umull	r1, r3, r3, r2
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	2164      	movs	r1, #100	; 0x64
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	3332      	adds	r3, #50	; 0x32
 8006902:	4a72      	ldr	r2, [pc, #456]	; (8006acc <UART_SetConfig+0x6f4>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	f003 020f 	and.w	r2, r3, #15
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4442      	add	r2, r8
 8006914:	609a      	str	r2, [r3, #8]
 8006916:	e0d0      	b.n	8006aba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fd fbbc 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 800691c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	469a      	mov	sl, r3
 8006922:	f04f 0b00 	mov.w	fp, #0
 8006926:	46d0      	mov	r8, sl
 8006928:	46d9      	mov	r9, fp
 800692a:	eb18 0308 	adds.w	r3, r8, r8
 800692e:	eb49 0409 	adc.w	r4, r9, r9
 8006932:	4698      	mov	r8, r3
 8006934:	46a1      	mov	r9, r4
 8006936:	eb18 080a 	adds.w	r8, r8, sl
 800693a:	eb49 090b 	adc.w	r9, r9, fp
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800694a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800694e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006952:	4688      	mov	r8, r1
 8006954:	4691      	mov	r9, r2
 8006956:	eb1a 0508 	adds.w	r5, sl, r8
 800695a:	eb4b 0609 	adc.w	r6, fp, r9
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4619      	mov	r1, r3
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f04f 0400 	mov.w	r4, #0
 8006970:	0094      	lsls	r4, r2, #2
 8006972:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006976:	008b      	lsls	r3, r1, #2
 8006978:	461a      	mov	r2, r3
 800697a:	4623      	mov	r3, r4
 800697c:	4628      	mov	r0, r5
 800697e:	4631      	mov	r1, r6
 8006980:	f7f9 fc40 	bl	8000204 <__aeabi_uldivmod>
 8006984:	4603      	mov	r3, r0
 8006986:	460c      	mov	r4, r1
 8006988:	461a      	mov	r2, r3
 800698a:	4b50      	ldr	r3, [pc, #320]	; (8006acc <UART_SetConfig+0x6f4>)
 800698c:	fba3 2302 	umull	r2, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	469b      	mov	fp, r3
 800699a:	f04f 0c00 	mov.w	ip, #0
 800699e:	46d9      	mov	r9, fp
 80069a0:	46e2      	mov	sl, ip
 80069a2:	eb19 0309 	adds.w	r3, r9, r9
 80069a6:	eb4a 040a 	adc.w	r4, sl, sl
 80069aa:	4699      	mov	r9, r3
 80069ac:	46a2      	mov	sl, r4
 80069ae:	eb19 090b 	adds.w	r9, r9, fp
 80069b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069b6:	f04f 0100 	mov.w	r1, #0
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069ca:	4689      	mov	r9, r1
 80069cc:	4692      	mov	sl, r2
 80069ce:	eb1b 0509 	adds.w	r5, fp, r9
 80069d2:	eb4c 060a 	adc.w	r6, ip, sl
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4619      	mov	r1, r3
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	f04f 0400 	mov.w	r4, #0
 80069e8:	0094      	lsls	r4, r2, #2
 80069ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069ee:	008b      	lsls	r3, r1, #2
 80069f0:	461a      	mov	r2, r3
 80069f2:	4623      	mov	r3, r4
 80069f4:	4628      	mov	r0, r5
 80069f6:	4631      	mov	r1, r6
 80069f8:	f7f9 fc04 	bl	8000204 <__aeabi_uldivmod>
 80069fc:	4603      	mov	r3, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	461a      	mov	r2, r3
 8006a02:	4b32      	ldr	r3, [pc, #200]	; (8006acc <UART_SetConfig+0x6f4>)
 8006a04:	fba3 1302 	umull	r1, r3, r3, r2
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	2164      	movs	r1, #100	; 0x64
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	3332      	adds	r3, #50	; 0x32
 8006a16:	4a2d      	ldr	r2, [pc, #180]	; (8006acc <UART_SetConfig+0x6f4>)
 8006a18:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a22:	4498      	add	r8, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	469b      	mov	fp, r3
 8006a28:	f04f 0c00 	mov.w	ip, #0
 8006a2c:	46d9      	mov	r9, fp
 8006a2e:	46e2      	mov	sl, ip
 8006a30:	eb19 0309 	adds.w	r3, r9, r9
 8006a34:	eb4a 040a 	adc.w	r4, sl, sl
 8006a38:	4699      	mov	r9, r3
 8006a3a:	46a2      	mov	sl, r4
 8006a3c:	eb19 090b 	adds.w	r9, r9, fp
 8006a40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a44:	f04f 0100 	mov.w	r1, #0
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a58:	4689      	mov	r9, r1
 8006a5a:	4692      	mov	sl, r2
 8006a5c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a60:	eb4c 060a 	adc.w	r6, ip, sl
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	f04f 0400 	mov.w	r4, #0
 8006a76:	0094      	lsls	r4, r2, #2
 8006a78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a7c:	008b      	lsls	r3, r1, #2
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4623      	mov	r3, r4
 8006a82:	4628      	mov	r0, r5
 8006a84:	4631      	mov	r1, r6
 8006a86:	f7f9 fbbd 	bl	8000204 <__aeabi_uldivmod>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4b0e      	ldr	r3, [pc, #56]	; (8006acc <UART_SetConfig+0x6f4>)
 8006a92:	fba3 1302 	umull	r1, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	2164      	movs	r1, #100	; 0x64
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	3332      	adds	r3, #50	; 0x32
 8006aa4:	4a09      	ldr	r2, [pc, #36]	; (8006acc <UART_SetConfig+0x6f4>)
 8006aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4442      	add	r2, r8
 8006ab6:	609a      	str	r2, [r3, #8]
}
 8006ab8:	e7ff      	b.n	8006aba <UART_SetConfig+0x6e2>
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac4:	40011000 	.word	0x40011000
 8006ac8:	40011400 	.word	0x40011400
 8006acc:	51eb851f 	.word	0x51eb851f

08006ad0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ad4:	4904      	ldr	r1, [pc, #16]	; (8006ae8 <MX_FATFS_Init+0x18>)
 8006ad6:	4805      	ldr	r0, [pc, #20]	; (8006aec <MX_FATFS_Init+0x1c>)
 8006ad8:	f002 fb4c 	bl	8009174 <FATFS_LinkDriver>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <MX_FATFS_Init+0x20>)
 8006ae2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006ae4:	bf00      	nop
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000a90 	.word	0x20000a90
 8006aec:	20000034 	.word	0x20000034
 8006af0:	20000a94 	.word	0x20000a94

08006af4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006af8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fb fe95 	bl	8002840 <USER_SPI_initialize>
 8006b16:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fb ff67 	bl	8002a00 <USER_SPI_status>
 8006b32:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006b4c:	7bf8      	ldrb	r0, [r7, #15]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	f7fb ff6a 	bl	8002a2c <USER_SPI_read>
 8006b58:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 8006b72:	7bf8      	ldrb	r0, [r7, #15]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	f7fb ffbd 	bl	8002af8 <USER_SPI_write>
 8006b7e:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	603a      	str	r2, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
 8006b94:	460b      	mov	r3, r1
 8006b96:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006b98:	79b9      	ldrb	r1, [r7, #6]
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fc f826 	bl	8002bf0 <USER_SPI_ioctl>
 8006ba4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <disk_status+0x30>)
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	79fa      	ldrb	r2, [r7, #7]
 8006bc8:	4905      	ldr	r1, [pc, #20]	; (8006be0 <disk_status+0x30>)
 8006bca:	440a      	add	r2, r1
 8006bcc:	7a12      	ldrb	r2, [r2, #8]
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4798      	blx	r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	200000a0 	.word	0x200000a0

08006be4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <disk_initialize+0x48>)
 8006bf6:	5cd3      	ldrb	r3, [r2, r3]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d111      	bne.n	8006c20 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	4a0b      	ldr	r2, [pc, #44]	; (8006c2c <disk_initialize+0x48>)
 8006c00:	2101      	movs	r1, #1
 8006c02:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <disk_initialize+0x48>)
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	79fa      	ldrb	r2, [r7, #7]
 8006c12:	4906      	ldr	r1, [pc, #24]	; (8006c2c <disk_initialize+0x48>)
 8006c14:	440a      	add	r2, r1
 8006c16:	7a12      	ldrb	r2, [r2, #8]
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200000a0 	.word	0x200000a0

08006c30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <disk_read+0x3c>)
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	689c      	ldr	r4, [r3, #8]
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <disk_read+0x3c>)
 8006c50:	4413      	add	r3, r2
 8006c52:	7a18      	ldrb	r0, [r3, #8]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	47a0      	blx	r4
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd90      	pop	{r4, r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200000a0 	.word	0x200000a0

08006c70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <disk_write+0x3c>)
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	68dc      	ldr	r4, [r3, #12]
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	4a07      	ldr	r2, [pc, #28]	; (8006cac <disk_write+0x3c>)
 8006c90:	4413      	add	r3, r2
 8006c92:	7a18      	ldrb	r0, [r3, #8]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	47a0      	blx	r4
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd90      	pop	{r4, r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200000a0 	.word	0x200000a0

08006cb0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	603a      	str	r2, [r7, #0]
 8006cba:	71fb      	strb	r3, [r7, #7]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <disk_ioctl+0x38>)
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	79fa      	ldrb	r2, [r7, #7]
 8006cce:	4906      	ldr	r1, [pc, #24]	; (8006ce8 <disk_ioctl+0x38>)
 8006cd0:	440a      	add	r2, r1
 8006cd2:	7a10      	ldrb	r0, [r2, #8]
 8006cd4:	79b9      	ldrb	r1, [r7, #6]
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	4798      	blx	r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  return res;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200000a0 	.word	0x200000a0

08006cec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006cfc:	89fb      	ldrh	r3, [r7, #14]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	b21a      	sxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b21b      	sxth	r3, r3
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	b21b      	sxth	r3, r3
 8006d0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d0e:	89fb      	ldrh	r3, [r7, #14]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3303      	adds	r3, #3
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	3202      	adds	r2, #2
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	3201      	adds	r2, #1
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	7812      	ldrb	r2, [r2, #0]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	887a      	ldrh	r2, [r7, #2]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	887b      	ldrh	r3, [r7, #2]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	887a      	ldrh	r2, [r7, #2]
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	607a      	str	r2, [r7, #4]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	0a1b      	lsrs	r3, r3, #8
 8006dd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00d      	beq.n	8006e26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	1c53      	adds	r3, r2, #1
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	1c59      	adds	r1, r3, #1
 8006e14:	6179      	str	r1, [r7, #20]
 8006e16:	7812      	ldrb	r2, [r2, #0]
 8006e18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f1      	bne.n	8006e0a <mem_cpy+0x1a>
	}
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e32:	b480      	push	{r7}
 8006e34:	b087      	sub	sp, #28
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	617a      	str	r2, [r7, #20]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f3      	bne.n	8006e42 <mem_set+0x10>
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e66:	b480      	push	{r7}
 8006e68:	b089      	sub	sp, #36	; 0x24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	61fa      	str	r2, [r7, #28]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	4619      	mov	r1, r3
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	61ba      	str	r2, [r7, #24]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	1acb      	subs	r3, r1, r3
 8006e92:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <mem_cmp+0x40>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0eb      	beq.n	8006e7e <mem_cmp+0x18>

	return r;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3724      	adds	r7, #36	; 0x24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006ebe:	e002      	b.n	8006ec6 <chk_chr+0x12>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	607b      	str	r3, [r7, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <chk_chr+0x26>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d1f2      	bne.n	8006ec0 <chk_chr+0xc>
	return *str;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	781b      	ldrb	r3, [r3, #0]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60bb      	str	r3, [r7, #8]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e029      	b.n	8006f54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <chk_lock+0xb4>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	4413      	add	r3, r2
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d01d      	beq.n	8006f4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f0e:	4a24      	ldr	r2, [pc, #144]	; (8006fa0 <chk_lock+0xb4>)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	4413      	add	r3, r2
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d116      	bne.n	8006f4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f20:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <chk_lock+0xb4>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	4413      	add	r3, r2
 8006f28:	3304      	adds	r3, #4
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d10c      	bne.n	8006f4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f34:	4a1a      	ldr	r2, [pc, #104]	; (8006fa0 <chk_lock+0xb4>)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d102      	bne.n	8006f4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f48:	e007      	b.n	8006f5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d9d2      	bls.n	8006f00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d109      	bne.n	8006f74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <chk_lock+0x80>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d101      	bne.n	8006f70 <chk_lock+0x84>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e010      	b.n	8006f92 <chk_lock+0xa6>
 8006f70:	2312      	movs	r3, #18
 8006f72:	e00e      	b.n	8006f92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d108      	bne.n	8006f8c <chk_lock+0xa0>
 8006f7a:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <chk_lock+0xb4>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	4413      	add	r3, r2
 8006f82:	330c      	adds	r3, #12
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8a:	d101      	bne.n	8006f90 <chk_lock+0xa4>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	e000      	b.n	8006f92 <chk_lock+0xa6>
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000080 	.word	0x20000080

08006fa4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
 8006fae:	e002      	b.n	8006fb6 <enq_lock+0x12>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d806      	bhi.n	8006fca <enq_lock+0x26>
 8006fbc:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <enq_lock+0x40>)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	4413      	add	r3, r2
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f2      	bne.n	8006fb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	bf14      	ite	ne
 8006fd0:	2301      	movne	r3, #1
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000080 	.word	0x20000080

08006fe8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e01f      	b.n	8007038 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ff8:	4a41      	ldr	r2, [pc, #260]	; (8007100 <inc_lock+0x118>)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	4413      	add	r3, r2
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d113      	bne.n	8007032 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800700a:	4a3d      	ldr	r2, [pc, #244]	; (8007100 <inc_lock+0x118>)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	4413      	add	r3, r2
 8007012:	3304      	adds	r3, #4
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800701a:	429a      	cmp	r2, r3
 800701c:	d109      	bne.n	8007032 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800701e:	4a38      	ldr	r2, [pc, #224]	; (8007100 <inc_lock+0x118>)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	4413      	add	r3, r2
 8007026:	3308      	adds	r3, #8
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800702e:	429a      	cmp	r2, r3
 8007030:	d006      	beq.n	8007040 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d9dc      	bls.n	8006ff8 <inc_lock+0x10>
 800703e:	e000      	b.n	8007042 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007040:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d132      	bne.n	80070ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	e002      	b.n	8007054 <inc_lock+0x6c>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d806      	bhi.n	8007068 <inc_lock+0x80>
 800705a:	4a29      	ldr	r2, [pc, #164]	; (8007100 <inc_lock+0x118>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	4413      	add	r3, r2
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f2      	bne.n	800704e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d101      	bne.n	8007072 <inc_lock+0x8a>
 800706e:	2300      	movs	r3, #0
 8007070:	e040      	b.n	80070f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4922      	ldr	r1, [pc, #136]	; (8007100 <inc_lock+0x118>)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	440b      	add	r3, r1
 800707e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	491e      	ldr	r1, [pc, #120]	; (8007100 <inc_lock+0x118>)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	440b      	add	r3, r1
 800708c:	3304      	adds	r3, #4
 800708e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	491a      	ldr	r1, [pc, #104]	; (8007100 <inc_lock+0x118>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	440b      	add	r3, r1
 800709c:	3308      	adds	r3, #8
 800709e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80070a0:	4a17      	ldr	r2, [pc, #92]	; (8007100 <inc_lock+0x118>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4413      	add	r3, r2
 80070a8:	330c      	adds	r3, #12
 80070aa:	2200      	movs	r2, #0
 80070ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d009      	beq.n	80070c8 <inc_lock+0xe0>
 80070b4:	4a12      	ldr	r2, [pc, #72]	; (8007100 <inc_lock+0x118>)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	4413      	add	r3, r2
 80070bc:	330c      	adds	r3, #12
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <inc_lock+0xe0>
 80070c4:	2300      	movs	r3, #0
 80070c6:	e015      	b.n	80070f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d108      	bne.n	80070e0 <inc_lock+0xf8>
 80070ce:	4a0c      	ldr	r2, [pc, #48]	; (8007100 <inc_lock+0x118>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	4413      	add	r3, r2
 80070d6:	330c      	adds	r3, #12
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	e001      	b.n	80070e4 <inc_lock+0xfc>
 80070e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070e4:	4906      	ldr	r1, [pc, #24]	; (8007100 <inc_lock+0x118>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	440b      	add	r3, r1
 80070ec:	330c      	adds	r3, #12
 80070ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20000080 	.word	0x20000080

08007104 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3b01      	subs	r3, #1
 8007110:	607b      	str	r3, [r7, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d825      	bhi.n	8007164 <dec_lock+0x60>
		n = Files[i].ctr;
 8007118:	4a17      	ldr	r2, [pc, #92]	; (8007178 <dec_lock+0x74>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	4413      	add	r3, r2
 8007120:	330c      	adds	r3, #12
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007126:	89fb      	ldrh	r3, [r7, #14]
 8007128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712c:	d101      	bne.n	8007132 <dec_lock+0x2e>
 800712e:	2300      	movs	r3, #0
 8007130:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <dec_lock+0x3a>
 8007138:	89fb      	ldrh	r3, [r7, #14]
 800713a:	3b01      	subs	r3, #1
 800713c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800713e:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <dec_lock+0x74>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	4413      	add	r3, r2
 8007146:	330c      	adds	r3, #12
 8007148:	89fa      	ldrh	r2, [r7, #14]
 800714a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800714c:	89fb      	ldrh	r3, [r7, #14]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d105      	bne.n	800715e <dec_lock+0x5a>
 8007152:	4a09      	ldr	r2, [pc, #36]	; (8007178 <dec_lock+0x74>)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	4413      	add	r3, r2
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	737b      	strb	r3, [r7, #13]
 8007162:	e001      	b.n	8007168 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007164:	2302      	movs	r3, #2
 8007166:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007168:	7b7b      	ldrb	r3, [r7, #13]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000080 	.word	0x20000080

0800717c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e010      	b.n	80071ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800718a:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <clear_lock+0x44>)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	4413      	add	r3, r2
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d105      	bne.n	80071a6 <clear_lock+0x2a>
 800719a:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <clear_lock+0x44>)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	4413      	add	r3, r2
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d9eb      	bls.n	800718a <clear_lock+0xe>
	}
}
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000080 	.word	0x20000080

080071c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	78db      	ldrb	r3, [r3, #3]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d034      	beq.n	8007242 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7858      	ldrb	r0, [r3, #1]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071e8:	2301      	movs	r3, #1
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	f7ff fd40 	bl	8006c70 <disk_write>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	73fb      	strb	r3, [r7, #15]
 80071fa:	e022      	b.n	8007242 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	1ad2      	subs	r2, r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	429a      	cmp	r2, r3
 8007210:	d217      	bcs.n	8007242 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	789b      	ldrb	r3, [r3, #2]
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	e010      	b.n	800723c <sync_window+0x78>
					wsect += fs->fsize;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4413      	add	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7858      	ldrb	r0, [r3, #1]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800722e:	2301      	movs	r3, #1
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	f7ff fd1d 	bl	8006c70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3b01      	subs	r3, #1
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d8eb      	bhi.n	800721a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d01b      	beq.n	800729c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff ffad 	bl	80071c4 <sync_window>
 800726a:	4603      	mov	r3, r0
 800726c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d113      	bne.n	800729c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7858      	ldrb	r0, [r3, #1]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800727e:	2301      	movs	r3, #1
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	f7ff fcd5 	bl	8006c30 <disk_read>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007292:	2301      	movs	r3, #1
 8007294:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ff87 	bl	80071c4 <sync_window>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d158      	bne.n	8007372 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d148      	bne.n	800735a <sync_fs+0xb2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	791b      	ldrb	r3, [r3, #4]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d144      	bne.n	800735a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3330      	adds	r3, #48	; 0x30
 80072d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff fda9 	bl	8006e32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3330      	adds	r3, #48	; 0x30
 80072e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff fd38 	bl	8006d62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3330      	adds	r3, #48	; 0x30
 80072f6:	4921      	ldr	r1, [pc, #132]	; (800737c <sync_fs+0xd4>)
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff fd4d 	bl	8006d98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3330      	adds	r3, #48	; 0x30
 8007302:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007306:	491e      	ldr	r1, [pc, #120]	; (8007380 <sync_fs+0xd8>)
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fd45 	bl	8006d98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3330      	adds	r3, #48	; 0x30
 8007312:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f7ff fd3b 	bl	8006d98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3330      	adds	r3, #48	; 0x30
 8007326:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f7ff fd31 	bl	8006d98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7858      	ldrb	r0, [r3, #1]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	2301      	movs	r3, #1
 8007350:	f7ff fc8e 	bl	8006c70 <disk_write>
			fs->fsi_flag = 0;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2200      	movs	r2, #0
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fca4 	bl	8006cb0 <disk_ioctl>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <sync_fs+0xca>
 800736e:	2301      	movs	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	41615252 	.word	0x41615252
 8007380:	61417272 	.word	0x61417272

08007384 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	3b02      	subs	r3, #2
 8007392:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	3b02      	subs	r3, #2
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d301      	bcc.n	80073a4 <clust2sect+0x20>
 80073a0:	2300      	movs	r3, #0
 80073a2:	e008      	b.n	80073b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	895b      	ldrh	r3, [r3, #10]
 80073a8:	461a      	mov	r2, r3
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	fb03 f202 	mul.w	r2, r3, r2
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	4413      	add	r3, r2
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b086      	sub	sp, #24
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d904      	bls.n	80073e2 <get_fat+0x20>
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d302      	bcc.n	80073e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80073e2:	2301      	movs	r3, #1
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e08c      	b.n	8007502 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073e8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d045      	beq.n	8007482 <get_fat+0xc0>
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d05d      	beq.n	80074b6 <get_fat+0xf4>
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d177      	bne.n	80074ee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	0a5b      	lsrs	r3, r3, #9
 8007414:	4413      	add	r3, r2
 8007416:	4619      	mov	r1, r3
 8007418:	6938      	ldr	r0, [r7, #16]
 800741a:	f7ff ff17 	bl	800724c <move_window>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d167      	bne.n	80074f4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	60fa      	str	r2, [r7, #12]
 800742a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4413      	add	r3, r2
 8007432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007436:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	0a5b      	lsrs	r3, r3, #9
 8007440:	4413      	add	r3, r2
 8007442:	4619      	mov	r1, r3
 8007444:	6938      	ldr	r0, [r7, #16]
 8007446:	f7ff ff01 	bl	800724c <move_window>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d153      	bne.n	80074f8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4413      	add	r3, r2
 800745a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	461a      	mov	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4313      	orrs	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <get_fat+0xb6>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	e002      	b.n	800747e <get_fat+0xbc>
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800747e:	617b      	str	r3, [r7, #20]
			break;
 8007480:	e03f      	b.n	8007502 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	0a1b      	lsrs	r3, r3, #8
 800748a:	4413      	add	r3, r2
 800748c:	4619      	mov	r1, r3
 800748e:	6938      	ldr	r0, [r7, #16]
 8007490:	f7ff fedc 	bl	800724c <move_window>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d130      	bne.n	80074fc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80074a8:	4413      	add	r3, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fc1e 	bl	8006cec <ld_word>
 80074b0:	4603      	mov	r3, r0
 80074b2:	617b      	str	r3, [r7, #20]
			break;
 80074b4:	e025      	b.n	8007502 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	09db      	lsrs	r3, r3, #7
 80074be:	4413      	add	r3, r2
 80074c0:	4619      	mov	r1, r3
 80074c2:	6938      	ldr	r0, [r7, #16]
 80074c4:	f7ff fec2 	bl	800724c <move_window>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d118      	bne.n	8007500 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074dc:	4413      	add	r3, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fc1c 	bl	8006d1c <ld_dword>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074ea:	617b      	str	r3, [r7, #20]
			break;
 80074ec:	e009      	b.n	8007502 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e006      	b.n	8007502 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074f4:	bf00      	nop
 80074f6:	e004      	b.n	8007502 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007500:	bf00      	nop
		}
	}

	return val;
 8007502:	697b      	ldr	r3, [r7, #20]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b089      	sub	sp, #36	; 0x24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007518:	2302      	movs	r3, #2
 800751a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b01      	cmp	r3, #1
 8007520:	f240 80d6 	bls.w	80076d0 <put_fat+0x1c4>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	429a      	cmp	r2, r3
 800752c:	f080 80d0 	bcs.w	80076d0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d073      	beq.n	8007620 <put_fat+0x114>
 8007538:	2b03      	cmp	r3, #3
 800753a:	f000 8091 	beq.w	8007660 <put_fat+0x154>
 800753e:	2b01      	cmp	r3, #1
 8007540:	f040 80c6 	bne.w	80076d0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	4413      	add	r3, r2
 8007550:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a1a      	ldr	r2, [r3, #32]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	4413      	add	r3, r2
 800755c:	4619      	mov	r1, r3
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff fe74 	bl	800724c <move_window>
 8007564:	4603      	mov	r3, r0
 8007566:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007568:	7ffb      	ldrb	r3, [r7, #31]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 80a9 	bne.w	80076c2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	1c59      	adds	r1, r3, #1
 800757a:	61b9      	str	r1, [r7, #24]
 800757c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007580:	4413      	add	r3, r2
 8007582:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00d      	beq.n	80075aa <put_fat+0x9e>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b25b      	sxtb	r3, r3
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	b25a      	sxtb	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b25b      	sxtb	r3, r3
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	e001      	b.n	80075ae <put_fat+0xa2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a1a      	ldr	r2, [r3, #32]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	0a5b      	lsrs	r3, r3, #9
 80075c0:	4413      	add	r3, r2
 80075c2:	4619      	mov	r1, r3
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff fe41 	bl	800724c <move_window>
 80075ca:	4603      	mov	r3, r0
 80075cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075ce:	7ffb      	ldrb	r3, [r7, #31]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d178      	bne.n	80076c6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e0:	4413      	add	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <put_fat+0xea>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	e00e      	b.n	8007614 <put_fat+0x108>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	f023 030f 	bic.w	r3, r3, #15
 8007600:	b25a      	sxtb	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	b25b      	sxtb	r3, r3
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	b25b      	sxtb	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b25b      	sxtb	r3, r3
 8007612:	b2db      	uxtb	r3, r3
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	70da      	strb	r2, [r3, #3]
			break;
 800761e:	e057      	b.n	80076d0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	4413      	add	r3, r2
 800762a:	4619      	mov	r1, r3
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7ff fe0d 	bl	800724c <move_window>
 8007632:	4603      	mov	r3, r0
 8007634:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007636:	7ffb      	ldrb	r3, [r7, #31]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d146      	bne.n	80076ca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800764a:	4413      	add	r3, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	b292      	uxth	r2, r2
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fb85 	bl	8006d62 <st_word>
			fs->wflag = 1;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	70da      	strb	r2, [r3, #3]
			break;
 800765e:	e037      	b.n	80076d0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a1a      	ldr	r2, [r3, #32]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	09db      	lsrs	r3, r3, #7
 8007668:	4413      	add	r3, r2
 800766a:	4619      	mov	r1, r3
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff fded 	bl	800724c <move_window>
 8007672:	4603      	mov	r3, r0
 8007674:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007676:	7ffb      	ldrb	r3, [r7, #31]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d128      	bne.n	80076ce <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007690:	4413      	add	r3, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fb42 	bl	8006d1c <ld_dword>
 8007698:	4603      	mov	r3, r0
 800769a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800769e:	4323      	orrs	r3, r4
 80076a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076b0:	4413      	add	r3, r2
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff fb6f 	bl	8006d98 <st_dword>
			fs->wflag = 1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	70da      	strb	r2, [r3, #3]
			break;
 80076c0:	e006      	b.n	80076d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076c2:	bf00      	nop
 80076c4:	e004      	b.n	80076d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076ce:	bf00      	nop
		}
	}
	return res;
 80076d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3724      	adds	r7, #36	; 0x24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd90      	pop	{r4, r7, pc}

080076da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b088      	sub	sp, #32
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d904      	bls.n	8007700 <remove_chain+0x26>
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d301      	bcc.n	8007704 <remove_chain+0x2a>
 8007700:	2302      	movs	r3, #2
 8007702:	e04b      	b.n	800779c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800770a:	f04f 32ff 	mov.w	r2, #4294967295
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	69b8      	ldr	r0, [r7, #24]
 8007712:	f7ff fefb 	bl	800750c <put_fat>
 8007716:	4603      	mov	r3, r0
 8007718:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800771a:	7ffb      	ldrb	r3, [r7, #31]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <remove_chain+0x4a>
 8007720:	7ffb      	ldrb	r3, [r7, #31]
 8007722:	e03b      	b.n	800779c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff fe4b 	bl	80073c2 <get_fat>
 800772c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d031      	beq.n	8007798 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <remove_chain+0x64>
 800773a:	2302      	movs	r3, #2
 800773c:	e02e      	b.n	800779c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d101      	bne.n	800774a <remove_chain+0x70>
 8007746:	2301      	movs	r3, #1
 8007748:	e028      	b.n	800779c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800774a:	2200      	movs	r2, #0
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	69b8      	ldr	r0, [r7, #24]
 8007750:	f7ff fedc 	bl	800750c <put_fat>
 8007754:	4603      	mov	r3, r0
 8007756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007758:	7ffb      	ldrb	r3, [r7, #31]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <remove_chain+0x88>
 800775e:	7ffb      	ldrb	r3, [r7, #31]
 8007760:	e01c      	b.n	800779c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	3b02      	subs	r3, #2
 800776c:	429a      	cmp	r2, r3
 800776e:	d20b      	bcs.n	8007788 <remove_chain+0xae>
			fs->free_clst++;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	791b      	ldrb	r3, [r3, #4]
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	429a      	cmp	r2, r3
 8007794:	d3c6      	bcc.n	8007724 <remove_chain+0x4a>
 8007796:	e000      	b.n	800779a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007798:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10d      	bne.n	80077d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <create_chain+0x2c>
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d31b      	bcc.n	8007808 <create_chain+0x64>
 80077d0:	2301      	movs	r3, #1
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	e018      	b.n	8007808 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fdf2 	bl	80073c2 <get_fat>
 80077de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d801      	bhi.n	80077ea <create_chain+0x46>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e070      	b.n	80078cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f0:	d101      	bne.n	80077f6 <create_chain+0x52>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	e06a      	b.n	80078cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d201      	bcs.n	8007804 <create_chain+0x60>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	e063      	b.n	80078cc <create_chain+0x128>
		scl = clst;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	3301      	adds	r3, #1
 8007810:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	429a      	cmp	r2, r3
 800781a:	d307      	bcc.n	800782c <create_chain+0x88>
				ncl = 2;
 800781c:	2302      	movs	r3, #2
 800781e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	429a      	cmp	r2, r3
 8007826:	d901      	bls.n	800782c <create_chain+0x88>
 8007828:	2300      	movs	r3, #0
 800782a:	e04f      	b.n	80078cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800782c:	69f9      	ldr	r1, [r7, #28]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fdc7 	bl	80073c2 <get_fat>
 8007834:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00e      	beq.n	800785a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d003      	beq.n	800784a <create_chain+0xa6>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d101      	bne.n	800784e <create_chain+0xaa>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	e03e      	b.n	80078cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	429a      	cmp	r2, r3
 8007854:	d1da      	bne.n	800780c <create_chain+0x68>
 8007856:	2300      	movs	r3, #0
 8007858:	e038      	b.n	80078cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800785a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800785c:	f04f 32ff 	mov.w	r2, #4294967295
 8007860:	69f9      	ldr	r1, [r7, #28]
 8007862:	6938      	ldr	r0, [r7, #16]
 8007864:	f7ff fe52 	bl	800750c <put_fat>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <create_chain+0xe2>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6938      	ldr	r0, [r7, #16]
 800787e:	f7ff fe45 	bl	800750c <put_fat>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d116      	bne.n	80078ba <create_chain+0x116>
		fs->last_clst = ncl;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	3b02      	subs	r3, #2
 800789c:	429a      	cmp	r2, r3
 800789e:	d804      	bhi.n	80078aa <create_chain+0x106>
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	1e5a      	subs	r2, r3, #1
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	791b      	ldrb	r3, [r3, #4]
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	711a      	strb	r2, [r3, #4]
 80078b8:	e007      	b.n	80078ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d102      	bne.n	80078c6 <create_chain+0x122>
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295
 80078c4:	e000      	b.n	80078c8 <create_chain+0x124>
 80078c6:	2301      	movs	r3, #1
 80078c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80078ca:	69fb      	ldr	r3, [r7, #28]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	3304      	adds	r3, #4
 80078ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	0a5b      	lsrs	r3, r3, #9
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	8952      	ldrh	r2, [r2, #10]
 80078f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1d1a      	adds	r2, r3, #4
 80078fe:	613a      	str	r2, [r7, #16]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <clmt_clust+0x3a>
 800790a:	2300      	movs	r3, #0
 800790c:	e010      	b.n	8007930 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	429a      	cmp	r2, r3
 8007914:	d307      	bcc.n	8007926 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3304      	adds	r3, #4
 8007922:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007924:	e7e9      	b.n	80078fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007926:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	4413      	add	r3, r2
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007952:	d204      	bcs.n	800795e <dir_sdi+0x22>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	f003 031f 	and.w	r3, r3, #31
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <dir_sdi+0x26>
		return FR_INT_ERR;
 800795e:	2302      	movs	r3, #2
 8007960:	e063      	b.n	8007a2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <dir_sdi+0x46>
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d902      	bls.n	8007982 <dir_sdi+0x46>
		clst = fs->dirbase;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10c      	bne.n	80079a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	8912      	ldrh	r2, [r2, #8]
 8007990:	4293      	cmp	r3, r2
 8007992:	d301      	bcc.n	8007998 <dir_sdi+0x5c>
 8007994:	2302      	movs	r3, #2
 8007996:	e048      	b.n	8007a2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	61da      	str	r2, [r3, #28]
 80079a0:	e029      	b.n	80079f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	895b      	ldrh	r3, [r3, #10]
 80079a6:	025b      	lsls	r3, r3, #9
 80079a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079aa:	e019      	b.n	80079e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6979      	ldr	r1, [r7, #20]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fd06 	bl	80073c2 <get_fat>
 80079b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d101      	bne.n	80079c4 <dir_sdi+0x88>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e032      	b.n	8007a2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d904      	bls.n	80079d4 <dir_sdi+0x98>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d301      	bcc.n	80079d8 <dir_sdi+0x9c>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e028      	b.n	8007a2a <dir_sdi+0xee>
			ofs -= csz;
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d2e1      	bcs.n	80079ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80079e8:	6979      	ldr	r1, [r7, #20]
 80079ea:	6938      	ldr	r0, [r7, #16]
 80079ec:	f7ff fcca 	bl	8007384 <clust2sect>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <dir_sdi+0xcc>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e010      	b.n	8007a2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69da      	ldr	r2, [r3, #28]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	0a5b      	lsrs	r3, r3, #9
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	441a      	add	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b086      	sub	sp, #24
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	3320      	adds	r3, #32
 8007a48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <dir_next+0x28>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a58:	d301      	bcc.n	8007a5e <dir_next+0x2c>
 8007a5a:	2304      	movs	r3, #4
 8007a5c:	e0aa      	b.n	8007bb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 8098 	bne.w	8007b9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10b      	bne.n	8007a94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	8912      	ldrh	r2, [r2, #8]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	f0c0 8088 	bcc.w	8007b9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	61da      	str	r2, [r3, #28]
 8007a90:	2304      	movs	r3, #4
 8007a92:	e08f      	b.n	8007bb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	0a5b      	lsrs	r3, r3, #9
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	8952      	ldrh	r2, [r2, #10]
 8007a9c:	3a01      	subs	r2, #1
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d17a      	bne.n	8007b9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7ff fc88 	bl	80073c2 <get_fat>
 8007ab2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d801      	bhi.n	8007abe <dir_next+0x8c>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e07a      	b.n	8007bb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d101      	bne.n	8007aca <dir_next+0x98>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e074      	b.n	8007bb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d358      	bcc.n	8007b86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d104      	bne.n	8007ae4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	61da      	str	r2, [r3, #28]
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	e067      	b.n	8007bb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7ff fe59 	bl	80077a4 <create_chain>
 8007af2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <dir_next+0xcc>
 8007afa:	2307      	movs	r3, #7
 8007afc:	e05a      	b.n	8007bb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <dir_next+0xd6>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e055      	b.n	8007bb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d101      	bne.n	8007b14 <dir_next+0xe2>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e04f      	b.n	8007bb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff fb55 	bl	80071c4 <sync_window>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <dir_next+0xf2>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e047      	b.n	8007bb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3330      	adds	r3, #48	; 0x30
 8007b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff f97f 	bl	8006e32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b34:	2300      	movs	r3, #0
 8007b36:	613b      	str	r3, [r7, #16]
 8007b38:	6979      	ldr	r1, [r7, #20]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff fc22 	bl	8007384 <clust2sect>
 8007b40:	4602      	mov	r2, r0
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b46:	e012      	b.n	8007b6e <dir_next+0x13c>
						fs->wflag = 1;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff fb38 	bl	80071c4 <sync_window>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <dir_next+0x12c>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e02a      	b.n	8007bb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3301      	adds	r3, #1
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	895b      	ldrh	r3, [r3, #10]
 8007b72:	461a      	mov	r2, r3
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d3e6      	bcc.n	8007b48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad2      	subs	r2, r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fbf8 	bl	8007384 <clust2sect>
 8007b94:	4602      	mov	r2, r0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bac:	441a      	add	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff feb4 	bl	800793c <dir_sdi>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d12b      	bne.n	8007c36 <dir_alloc+0x7a>
		n = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	4619      	mov	r1, r3
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f7ff fb2f 	bl	800724c <move_window>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11d      	bne.n	8007c34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2be5      	cmp	r3, #229	; 0xe5
 8007c00:	d004      	beq.n	8007c0c <dir_alloc+0x50>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d107      	bne.n	8007c1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d102      	bne.n	8007c20 <dir_alloc+0x64>
 8007c1a:	e00c      	b.n	8007c36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c20:	2101      	movs	r1, #1
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff ff05 	bl	8007a32 <dir_next>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0d7      	beq.n	8007be2 <dir_alloc+0x26>
 8007c32:	e000      	b.n	8007c36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d101      	bne.n	8007c40 <dir_alloc+0x84>
 8007c3c:	2307      	movs	r3, #7
 8007c3e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	331a      	adds	r3, #26
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff f847 	bl	8006cec <ld_word>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d109      	bne.n	8007c7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff f83c 	bl	8006cec <ld_word>
 8007c74:	4603      	mov	r3, r0
 8007c76:	041b      	lsls	r3, r3, #16
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	331a      	adds	r3, #26
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	b292      	uxth	r2, r2
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff f85f 	bl	8006d62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d109      	bne.n	8007cc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f103 0214 	add.w	r2, r3, #20
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	0c1b      	lsrs	r3, r3, #16
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7ff f851 	bl	8006d62 <st_word>
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fe2f 	bl	800793c <dir_sdi>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <dir_find+0x24>
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	e03e      	b.n	8007d6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6938      	ldr	r0, [r7, #16]
 8007cf4:	f7ff faaa 	bl	800724c <move_window>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d12f      	bne.n	8007d62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <dir_find+0x4e>
 8007d10:	2304      	movs	r3, #4
 8007d12:	75fb      	strb	r3, [r7, #23]
 8007d14:	e028      	b.n	8007d68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	330b      	adds	r3, #11
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	330b      	adds	r3, #11
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	f003 0308 	and.w	r3, r3, #8
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <dir_find+0x86>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a18      	ldr	r0, [r3, #32]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3324      	adds	r3, #36	; 0x24
 8007d40:	220b      	movs	r2, #11
 8007d42:	4619      	mov	r1, r3
 8007d44:	f7ff f88f 	bl	8006e66 <mem_cmp>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fe6e 	bl	8007a32 <dir_next>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0c5      	beq.n	8007cec <dir_find+0x24>
 8007d60:	e002      	b.n	8007d68 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d62:	bf00      	nop
 8007d64:	e000      	b.n	8007d68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d66:	bf00      	nop

	return res;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007d80:	2101      	movs	r1, #1
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff ff1a 	bl	8007bbc <dir_alloc>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d11c      	bne.n	8007dcc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	4619      	mov	r1, r3
 8007d98:	68b8      	ldr	r0, [r7, #8]
 8007d9a:	f7ff fa57 	bl	800724c <move_window>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d111      	bne.n	8007dcc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	2220      	movs	r2, #32
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff f83e 	bl	8006e32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a18      	ldr	r0, [r3, #32]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3324      	adds	r3, #36	; 0x24
 8007dbe:	220b      	movs	r2, #11
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	f7ff f815 	bl	8006df0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3324      	adds	r3, #36	; 0x24
 8007dec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007dee:	220b      	movs	r2, #11
 8007df0:	2120      	movs	r1, #32
 8007df2:	68b8      	ldr	r0, [r7, #8]
 8007df4:	f7ff f81d 	bl	8006e32 <mem_set>
	si = i = 0; ni = 8;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	2308      	movs	r3, #8
 8007e02:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	617a      	str	r2, [r7, #20]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e12:	7ffb      	ldrb	r3, [r7, #31]
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d94e      	bls.n	8007eb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007e18:	7ffb      	ldrb	r3, [r7, #31]
 8007e1a:	2b2f      	cmp	r3, #47	; 0x2f
 8007e1c:	d006      	beq.n	8007e2c <create_name+0x54>
 8007e1e:	7ffb      	ldrb	r3, [r7, #31]
 8007e20:	2b5c      	cmp	r3, #92	; 0x5c
 8007e22:	d110      	bne.n	8007e46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007e24:	e002      	b.n	8007e2c <create_name+0x54>
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4413      	add	r3, r2
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b2f      	cmp	r3, #47	; 0x2f
 8007e36:	d0f6      	beq.n	8007e26 <create_name+0x4e>
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b5c      	cmp	r3, #92	; 0x5c
 8007e42:	d0f0      	beq.n	8007e26 <create_name+0x4e>
			break;
 8007e44:	e038      	b.n	8007eb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007e46:	7ffb      	ldrb	r3, [r7, #31]
 8007e48:	2b2e      	cmp	r3, #46	; 0x2e
 8007e4a:	d003      	beq.n	8007e54 <create_name+0x7c>
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d30c      	bcc.n	8007e6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b0b      	cmp	r3, #11
 8007e58:	d002      	beq.n	8007e60 <create_name+0x88>
 8007e5a:	7ffb      	ldrb	r3, [r7, #31]
 8007e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e5e:	d001      	beq.n	8007e64 <create_name+0x8c>
 8007e60:	2306      	movs	r3, #6
 8007e62:	e044      	b.n	8007eee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007e64:	2308      	movs	r3, #8
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	230b      	movs	r3, #11
 8007e6a:	61bb      	str	r3, [r7, #24]
			continue;
 8007e6c:	e022      	b.n	8007eb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	da04      	bge.n	8007e80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007e76:	7ffb      	ldrb	r3, [r7, #31]
 8007e78:	3b80      	subs	r3, #128	; 0x80
 8007e7a:	4a1f      	ldr	r2, [pc, #124]	; (8007ef8 <create_name+0x120>)
 8007e7c:	5cd3      	ldrb	r3, [r2, r3]
 8007e7e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007e80:	7ffb      	ldrb	r3, [r7, #31]
 8007e82:	4619      	mov	r1, r3
 8007e84:	481d      	ldr	r0, [pc, #116]	; (8007efc <create_name+0x124>)
 8007e86:	f7ff f815 	bl	8006eb4 <chk_chr>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <create_name+0xbc>
 8007e90:	2306      	movs	r3, #6
 8007e92:	e02c      	b.n	8007eee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007e94:	7ffb      	ldrb	r3, [r7, #31]
 8007e96:	2b60      	cmp	r3, #96	; 0x60
 8007e98:	d905      	bls.n	8007ea6 <create_name+0xce>
 8007e9a:	7ffb      	ldrb	r3, [r7, #31]
 8007e9c:	2b7a      	cmp	r3, #122	; 0x7a
 8007e9e:	d802      	bhi.n	8007ea6 <create_name+0xce>
 8007ea0:	7ffb      	ldrb	r3, [r7, #31]
 8007ea2:	3b20      	subs	r3, #32
 8007ea4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	613a      	str	r2, [r7, #16]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	4413      	add	r3, r2
 8007eb0:	7ffa      	ldrb	r2, [r7, #31]
 8007eb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007eb4:	e7a6      	b.n	8007e04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007eb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	441a      	add	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <create_name+0xf4>
 8007ec8:	2306      	movs	r3, #6
 8007eca:	e010      	b.n	8007eee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2be5      	cmp	r3, #229	; 0xe5
 8007ed2:	d102      	bne.n	8007eda <create_name+0x102>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2205      	movs	r2, #5
 8007ed8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007eda:	7ffb      	ldrb	r3, [r7, #31]
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d801      	bhi.n	8007ee4 <create_name+0x10c>
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	e000      	b.n	8007ee6 <create_name+0x10e>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	330b      	adds	r3, #11
 8007eea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007eec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	0800953c 	.word	0x0800953c
 8007efc:	08009260 	.word	0x08009260

08007f00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f14:	e002      	b.n	8007f1c <follow_path+0x1c>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b2f      	cmp	r3, #47	; 0x2f
 8007f22:	d0f8      	beq.n	8007f16 <follow_path+0x16>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b5c      	cmp	r3, #92	; 0x5c
 8007f2a:	d0f4      	beq.n	8007f16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b1f      	cmp	r3, #31
 8007f38:	d80a      	bhi.n	8007f50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2280      	movs	r2, #128	; 0x80
 8007f3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f42:	2100      	movs	r1, #0
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fcf9 	bl	800793c <dir_sdi>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]
 8007f4e:	e043      	b.n	8007fd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f50:	463b      	mov	r3, r7
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff ff3f 	bl	8007dd8 <create_name>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d134      	bne.n	8007fce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff feaf 	bl	8007cc8 <dir_find>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d127      	bne.n	8007fd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d122      	bne.n	8007fd2 <follow_path+0xd2>
 8007f8c:	2305      	movs	r3, #5
 8007f8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f90:	e01f      	b.n	8007fd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11c      	bne.n	8007fd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	799b      	ldrb	r3, [r3, #6]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007fa8:	2305      	movs	r3, #5
 8007faa:	75fb      	strb	r3, [r7, #23]
 8007fac:	e014      	b.n	8007fd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	4413      	add	r3, r2
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff fe42 	bl	8007c4a <ld_clust>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fcc:	e7c0      	b.n	8007f50 <follow_path+0x50>
			if (res != FR_OK) break;
 8007fce:	bf00      	nop
 8007fd0:	e002      	b.n	8007fd8 <follow_path+0xd8>
				break;
 8007fd2:	bf00      	nop
 8007fd4:	e000      	b.n	8007fd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fd6:	bf00      	nop
			}
		}
	}

	return res;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b087      	sub	sp, #28
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
 8007fee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d031      	beq.n	800805c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	e002      	b.n	8008006 <get_ldnumber+0x24>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	3301      	adds	r3, #1
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b20      	cmp	r3, #32
 800800c:	d903      	bls.n	8008016 <get_ldnumber+0x34>
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b3a      	cmp	r3, #58	; 0x3a
 8008014:	d1f4      	bne.n	8008000 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b3a      	cmp	r3, #58	; 0x3a
 800801c:	d11c      	bne.n	8008058 <get_ldnumber+0x76>
			tp = *path;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	60fa      	str	r2, [r7, #12]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	3b30      	subs	r3, #48	; 0x30
 800802e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b09      	cmp	r3, #9
 8008034:	d80e      	bhi.n	8008054 <get_ldnumber+0x72>
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	429a      	cmp	r2, r3
 800803c:	d10a      	bne.n	8008054 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d107      	bne.n	8008054 <get_ldnumber+0x72>
					vol = (int)i;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	3301      	adds	r3, #1
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	e002      	b.n	800805e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800805c:	693b      	ldr	r3, [r7, #16]
}
 800805e:	4618      	mov	r0, r3
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	70da      	strb	r2, [r3, #3]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f04f 32ff 	mov.w	r2, #4294967295
 8008082:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff f8e0 	bl	800724c <move_window>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <check_fs+0x2a>
 8008092:	2304      	movs	r3, #4
 8008094:	e038      	b.n	8008108 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3330      	adds	r3, #48	; 0x30
 800809a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe fe24 	bl	8006cec <ld_word>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d001      	beq.n	80080b4 <check_fs+0x48>
 80080b0:	2303      	movs	r3, #3
 80080b2:	e029      	b.n	8008108 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080ba:	2be9      	cmp	r3, #233	; 0xe9
 80080bc:	d009      	beq.n	80080d2 <check_fs+0x66>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080c4:	2beb      	cmp	r3, #235	; 0xeb
 80080c6:	d11e      	bne.n	8008106 <check_fs+0x9a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80080ce:	2b90      	cmp	r3, #144	; 0x90
 80080d0:	d119      	bne.n	8008106 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3330      	adds	r3, #48	; 0x30
 80080d6:	3336      	adds	r3, #54	; 0x36
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fe1f 	bl	8006d1c <ld_dword>
 80080de:	4603      	mov	r3, r0
 80080e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080e4:	4a0a      	ldr	r2, [pc, #40]	; (8008110 <check_fs+0xa4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d101      	bne.n	80080ee <check_fs+0x82>
 80080ea:	2300      	movs	r3, #0
 80080ec:	e00c      	b.n	8008108 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3330      	adds	r3, #48	; 0x30
 80080f2:	3352      	adds	r3, #82	; 0x52
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fe11 	bl	8006d1c <ld_dword>
 80080fa:	4602      	mov	r2, r0
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <check_fs+0xa8>)
 80080fe:	429a      	cmp	r2, r3
 8008100:	d101      	bne.n	8008106 <check_fs+0x9a>
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008106:	2302      	movs	r3, #2
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	00544146 	.word	0x00544146
 8008114:	33544146 	.word	0x33544146

08008118 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b096      	sub	sp, #88	; 0x58
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff ff58 	bl	8007fe2 <get_ldnumber>
 8008132:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008136:	2b00      	cmp	r3, #0
 8008138:	da01      	bge.n	800813e <find_volume+0x26>
 800813a:	230b      	movs	r3, #11
 800813c:	e22e      	b.n	800859c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800813e:	4aa8      	ldr	r2, [pc, #672]	; (80083e0 <find_volume+0x2c8>)
 8008140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008146:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <find_volume+0x3a>
 800814e:	230c      	movs	r3, #12
 8008150:	e224      	b.n	800859c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008156:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	f023 0301 	bic.w	r3, r3, #1
 800815e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01a      	beq.n	800819e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fd1f 	bl	8006bb0 <disk_status>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <find_volume+0x82>
 800818a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008196:	230a      	movs	r3, #10
 8008198:	e200      	b.n	800859c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800819a:	2300      	movs	r3, #0
 800819c:	e1fe      	b.n	800859c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	785b      	ldrb	r3, [r3, #1]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fd17 	bl	8006be4 <disk_initialize>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80081bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80081c8:	2303      	movs	r3, #3
 80081ca:	e1e7      	b.n	800859c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <find_volume+0xca>
 80081d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80081de:	230a      	movs	r3, #10
 80081e0:	e1dc      	b.n	800859c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80081e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ea:	f7ff ff3f 	bl	800806c <check_fs>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80081f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d14b      	bne.n	8008294 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081fc:	2300      	movs	r3, #0
 80081fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008200:	e01f      	b.n	8008242 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008210:	4413      	add	r3, r2
 8008212:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	3304      	adds	r3, #4
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <find_volume+0x114>
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	3308      	adds	r3, #8
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fd7a 	bl	8006d1c <ld_dword>
 8008228:	4602      	mov	r2, r0
 800822a:	e000      	b.n	800822e <find_volume+0x116>
 800822c:	2200      	movs	r2, #0
 800822e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008236:	440b      	add	r3, r1
 8008238:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800823c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823e:	3301      	adds	r3, #1
 8008240:	643b      	str	r3, [r7, #64]	; 0x40
 8008242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008244:	2b03      	cmp	r3, #3
 8008246:	d9dc      	bls.n	8008202 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008248:	2300      	movs	r3, #0
 800824a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800824c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <find_volume+0x140>
 8008252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008254:	3b01      	subs	r3, #1
 8008256:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008260:	4413      	add	r3, r2
 8008262:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008266:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <find_volume+0x162>
 800826e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008272:	f7ff fefb 	bl	800806c <check_fs>
 8008276:	4603      	mov	r3, r0
 8008278:	e000      	b.n	800827c <find_volume+0x164>
 800827a:	2303      	movs	r3, #3
 800827c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008284:	2b01      	cmp	r3, #1
 8008286:	d905      	bls.n	8008294 <find_volume+0x17c>
 8008288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800828a:	3301      	adds	r3, #1
 800828c:	643b      	str	r3, [r7, #64]	; 0x40
 800828e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008290:	2b03      	cmp	r3, #3
 8008292:	d9e1      	bls.n	8008258 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008298:	2b04      	cmp	r3, #4
 800829a:	d101      	bne.n	80082a0 <find_volume+0x188>
 800829c:	2301      	movs	r3, #1
 800829e:	e17d      	b.n	800859c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80082a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d901      	bls.n	80082ac <find_volume+0x194>
 80082a8:	230d      	movs	r3, #13
 80082aa:	e177      	b.n	800859c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	3330      	adds	r3, #48	; 0x30
 80082b0:	330b      	adds	r3, #11
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fd1a 	bl	8006cec <ld_word>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082be:	d001      	beq.n	80082c4 <find_volume+0x1ac>
 80082c0:	230d      	movs	r3, #13
 80082c2:	e16b      	b.n	800859c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	3330      	adds	r3, #48	; 0x30
 80082c8:	3316      	adds	r3, #22
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fd0e 	bl	8006cec <ld_word>
 80082d0:	4603      	mov	r3, r0
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <find_volume+0x1d0>
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	3330      	adds	r3, #48	; 0x30
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fd1b 	bl	8006d1c <ld_dword>
 80082e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	789b      	ldrb	r3, [r3, #2]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d005      	beq.n	800830c <find_volume+0x1f4>
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	789b      	ldrb	r3, [r3, #2]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d001      	beq.n	800830c <find_volume+0x1f4>
 8008308:	230d      	movs	r3, #13
 800830a:	e147      	b.n	800859c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	789b      	ldrb	r3, [r3, #2]
 8008310:	461a      	mov	r2, r3
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	fb02 f303 	mul.w	r3, r2, r3
 8008318:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008320:	b29a      	uxth	r2, r3
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	895b      	ldrh	r3, [r3, #10]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <find_volume+0x228>
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	895b      	ldrh	r3, [r3, #10]
 8008332:	461a      	mov	r2, r3
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	895b      	ldrh	r3, [r3, #10]
 8008338:	3b01      	subs	r3, #1
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <find_volume+0x22c>
 8008340:	230d      	movs	r3, #13
 8008342:	e12b      	b.n	800859c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	3330      	adds	r3, #48	; 0x30
 8008348:	3311      	adds	r3, #17
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fcce 	bl	8006cec <ld_word>
 8008350:	4603      	mov	r3, r0
 8008352:	461a      	mov	r2, r3
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	891b      	ldrh	r3, [r3, #8]
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <find_volume+0x252>
 8008366:	230d      	movs	r3, #13
 8008368:	e118      	b.n	800859c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	3330      	adds	r3, #48	; 0x30
 800836e:	3313      	adds	r3, #19
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fcbb 	bl	8006cec <ld_word>
 8008376:	4603      	mov	r3, r0
 8008378:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800837a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837c:	2b00      	cmp	r3, #0
 800837e:	d106      	bne.n	800838e <find_volume+0x276>
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	3330      	adds	r3, #48	; 0x30
 8008384:	3320      	adds	r3, #32
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fcc8 	bl	8006d1c <ld_dword>
 800838c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	3330      	adds	r3, #48	; 0x30
 8008392:	330e      	adds	r3, #14
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe fca9 	bl	8006cec <ld_word>
 800839a:	4603      	mov	r3, r0
 800839c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800839e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <find_volume+0x290>
 80083a4:	230d      	movs	r3, #13
 80083a6:	e0f9      	b.n	800859c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80083a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	4413      	add	r3, r2
 80083ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b0:	8912      	ldrh	r2, [r2, #8]
 80083b2:	0912      	lsrs	r2, r2, #4
 80083b4:	b292      	uxth	r2, r2
 80083b6:	4413      	add	r3, r2
 80083b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80083ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	429a      	cmp	r2, r3
 80083c0:	d201      	bcs.n	80083c6 <find_volume+0x2ae>
 80083c2:	230d      	movs	r3, #13
 80083c4:	e0ea      	b.n	800859c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ce:	8952      	ldrh	r2, [r2, #10]
 80083d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d103      	bne.n	80083e4 <find_volume+0x2cc>
 80083dc:	230d      	movs	r3, #13
 80083de:	e0dd      	b.n	800859c <find_volume+0x484>
 80083e0:	20000078 	.word	0x20000078
		fmt = FS_FAT32;
 80083e4:	2303      	movs	r3, #3
 80083e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d802      	bhi.n	80083fa <find_volume+0x2e2>
 80083f4:	2302      	movs	r3, #2
 80083f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008400:	4293      	cmp	r3, r2
 8008402:	d802      	bhi.n	800840a <find_volume+0x2f2>
 8008404:	2301      	movs	r3, #1
 8008406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	1c9a      	adds	r2, r3, #2
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008416:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008418:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800841a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800841c:	441a      	add	r2, r3
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	441a      	add	r2, r3
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800842c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008430:	2b03      	cmp	r3, #3
 8008432:	d11e      	bne.n	8008472 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	3330      	adds	r3, #48	; 0x30
 8008438:	332a      	adds	r3, #42	; 0x2a
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fc56 	bl	8006cec <ld_word>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <find_volume+0x332>
 8008446:	230d      	movs	r3, #13
 8008448:	e0a8      	b.n	800859c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	891b      	ldrh	r3, [r3, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <find_volume+0x33e>
 8008452:	230d      	movs	r3, #13
 8008454:	e0a2      	b.n	800859c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	3330      	adds	r3, #48	; 0x30
 800845a:	332c      	adds	r3, #44	; 0x2c
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fc5d 	bl	8006d1c <ld_dword>
 8008462:	4602      	mov	r2, r0
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	647b      	str	r3, [r7, #68]	; 0x44
 8008470:	e01f      	b.n	80084b2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	891b      	ldrh	r3, [r3, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <find_volume+0x366>
 800847a:	230d      	movs	r3, #13
 800847c:	e08e      	b.n	800859c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	6a1a      	ldr	r2, [r3, #32]
 8008482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008484:	441a      	add	r2, r3
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800848a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800848e:	2b02      	cmp	r3, #2
 8008490:	d103      	bne.n	800849a <find_volume+0x382>
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	e00a      	b.n	80084b0 <find_volume+0x398>
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	4613      	mov	r3, r2
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	4413      	add	r3, r2
 80084a4:	085a      	lsrs	r2, r3, #1
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80084b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	429a      	cmp	r2, r3
 80084c0:	d201      	bcs.n	80084c6 <find_volume+0x3ae>
 80084c2:	230d      	movs	r3, #13
 80084c4:	e06a      	b.n	800859c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	611a      	str	r2, [r3, #16]
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	2280      	movs	r2, #128	; 0x80
 80084da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80084dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d149      	bne.n	8008578 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	3330      	adds	r3, #48	; 0x30
 80084e8:	3330      	adds	r3, #48	; 0x30
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fbfe 	bl	8006cec <ld_word>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d140      	bne.n	8008578 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80084f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f8:	3301      	adds	r3, #1
 80084fa:	4619      	mov	r1, r3
 80084fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084fe:	f7fe fea5 	bl	800724c <move_window>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d137      	bne.n	8008578 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	2200      	movs	r2, #0
 800850c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	3330      	adds	r3, #48	; 0x30
 8008512:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fbe8 	bl	8006cec <ld_word>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008524:	429a      	cmp	r2, r3
 8008526:	d127      	bne.n	8008578 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	3330      	adds	r3, #48	; 0x30
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe fbf5 	bl	8006d1c <ld_dword>
 8008532:	4602      	mov	r2, r0
 8008534:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <find_volume+0x48c>)
 8008536:	429a      	cmp	r2, r3
 8008538:	d11e      	bne.n	8008578 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	3330      	adds	r3, #48	; 0x30
 800853e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fbea 	bl	8006d1c <ld_dword>
 8008548:	4602      	mov	r2, r0
 800854a:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <find_volume+0x490>)
 800854c:	429a      	cmp	r2, r3
 800854e:	d113      	bne.n	8008578 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	3330      	adds	r3, #48	; 0x30
 8008554:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fbdf 	bl	8006d1c <ld_dword>
 800855e:	4602      	mov	r2, r0
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	3330      	adds	r3, #48	; 0x30
 8008568:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe fbd5 	bl	8006d1c <ld_dword>
 8008572:	4602      	mov	r2, r0
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800857e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <find_volume+0x494>)
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	3301      	adds	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	4b08      	ldr	r3, [pc, #32]	; (80085ac <find_volume+0x494>)
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <find_volume+0x494>)
 800858e:	881a      	ldrh	r2, [r3, #0]
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008594:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008596:	f7fe fdf1 	bl	800717c <clear_lock>
#endif
	return FR_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3758      	adds	r7, #88	; 0x58
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	41615252 	.word	0x41615252
 80085a8:	61417272 	.word	0x61417272
 80085ac:	2000007c 	.word	0x2000007c

080085b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80085ba:	2309      	movs	r3, #9
 80085bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01c      	beq.n	80085fe <validate+0x4e>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d018      	beq.n	80085fe <validate+0x4e>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d013      	beq.n	80085fe <validate+0x4e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	889a      	ldrh	r2, [r3, #4]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	88db      	ldrh	r3, [r3, #6]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d10c      	bne.n	80085fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fae0 	bl	8006bb0 <disk_status>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <validate+0x4e>
			res = FR_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <validate+0x5a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	e000      	b.n	800860c <validate+0x5c>
 800860a:	2300      	movs	r3, #0
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	6013      	str	r3, [r2, #0]
	return res;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800862e:	f107 0310 	add.w	r3, r7, #16
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff fcd5 	bl	8007fe2 <get_ldnumber>
 8008638:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	2b00      	cmp	r3, #0
 800863e:	da01      	bge.n	8008644 <f_mount+0x28>
 8008640:	230b      	movs	r3, #11
 8008642:	e02b      	b.n	800869c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008644:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <f_mount+0x88>)
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800864c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008654:	69b8      	ldr	r0, [r7, #24]
 8008656:	f7fe fd91 	bl	800717c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	490d      	ldr	r1, [pc, #52]	; (80086a4 <f_mount+0x88>)
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <f_mount+0x66>
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d001      	beq.n	8008686 <f_mount+0x6a>
 8008682:	2300      	movs	r3, #0
 8008684:	e00a      	b.n	800869c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008686:	f107 010c 	add.w	r1, r7, #12
 800868a:	f107 0308 	add.w	r3, r7, #8
 800868e:	2200      	movs	r2, #0
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fd41 	bl	8008118 <find_volume>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800869a:	7dfb      	ldrb	r3, [r7, #23]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3720      	adds	r7, #32
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20000078 	.word	0x20000078

080086a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b098      	sub	sp, #96	; 0x60
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <f_open+0x18>
 80086bc:	2309      	movs	r3, #9
 80086be:	e1ad      	b.n	8008a1c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086c8:	79fa      	ldrb	r2, [r7, #7]
 80086ca:	f107 0110 	add.w	r1, r7, #16
 80086ce:	f107 0308 	add.w	r3, r7, #8
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fd20 	bl	8008118 <find_volume>
 80086d8:	4603      	mov	r3, r0
 80086da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80086de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f040 8191 	bne.w	8008a0a <f_open+0x362>
		dj.obj.fs = fs;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	f107 0314 	add.w	r3, r7, #20
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fc03 	bl	8007f00 <follow_path>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11a      	bne.n	800873e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008708:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800870c:	b25b      	sxtb	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	da03      	bge.n	800871a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008712:	2306      	movs	r3, #6
 8008714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008718:	e011      	b.n	800873e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	f023 0301 	bic.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	bf14      	ite	ne
 8008724:	2301      	movne	r3, #1
 8008726:	2300      	moveq	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	f107 0314 	add.w	r3, r7, #20
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fbda 	bl	8006eec <chk_lock>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	f003 031c 	and.w	r3, r3, #28
 8008744:	2b00      	cmp	r3, #0
 8008746:	d07f      	beq.n	8008848 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800874c:	2b00      	cmp	r3, #0
 800874e:	d017      	beq.n	8008780 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008754:	2b04      	cmp	r3, #4
 8008756:	d10e      	bne.n	8008776 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008758:	f7fe fc24 	bl	8006fa4 <enq_lock>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d006      	beq.n	8008770 <f_open+0xc8>
 8008762:	f107 0314 	add.w	r3, r7, #20
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fb03 	bl	8007d72 <dir_register>
 800876c:	4603      	mov	r3, r0
 800876e:	e000      	b.n	8008772 <f_open+0xca>
 8008770:	2312      	movs	r3, #18
 8008772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	f043 0308 	orr.w	r3, r3, #8
 800877c:	71fb      	strb	r3, [r7, #7]
 800877e:	e010      	b.n	80087a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008780:	7ebb      	ldrb	r3, [r7, #26]
 8008782:	f003 0311 	and.w	r3, r3, #17
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <f_open+0xea>
					res = FR_DENIED;
 800878a:	2307      	movs	r3, #7
 800878c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008790:	e007      	b.n	80087a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <f_open+0xfa>
 800879c:	2308      	movs	r3, #8
 800879e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80087a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d168      	bne.n	800887c <f_open+0x1d4>
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	f003 0308 	and.w	r3, r3, #8
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d063      	beq.n	800887c <f_open+0x1d4>
				dw = GET_FATTIME();
 80087b4:	f7fe f99e 	bl	8006af4 <get_fattime>
 80087b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	330e      	adds	r3, #14
 80087be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fae9 	bl	8006d98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80087c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c8:	3316      	adds	r3, #22
 80087ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fae3 	bl	8006d98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d4:	330b      	adds	r3, #11
 80087d6:	2220      	movs	r2, #32
 80087d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fa32 	bl	8007c4a <ld_clust>
 80087e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087ec:	2200      	movs	r2, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fa4a 	bl	8007c88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80087f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f6:	331c      	adds	r3, #28
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe facc 	bl	8006d98 <st_dword>
					fs->wflag = 1;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2201      	movs	r2, #1
 8008804:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d037      	beq.n	800887c <f_open+0x1d4>
						dw = fs->winsect;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008812:	f107 0314 	add.w	r3, r7, #20
 8008816:	2200      	movs	r2, #0
 8008818:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe ff5d 	bl	80076da <remove_chain>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800882a:	2b00      	cmp	r3, #0
 800882c:	d126      	bne.n	800887c <f_open+0x1d4>
							res = move_window(fs, dw);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe fd0a 	bl	800724c <move_window>
 8008838:	4603      	mov	r3, r0
 800883a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008842:	3a01      	subs	r2, #1
 8008844:	60da      	str	r2, [r3, #12]
 8008846:	e019      	b.n	800887c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800884c:	2b00      	cmp	r3, #0
 800884e:	d115      	bne.n	800887c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008850:	7ebb      	ldrb	r3, [r7, #26]
 8008852:	f003 0310 	and.w	r3, r3, #16
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <f_open+0x1ba>
					res = FR_NO_FILE;
 800885a:	2304      	movs	r3, #4
 800885c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008860:	e00c      	b.n	800887c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <f_open+0x1d4>
 800886c:	7ebb      	ldrb	r3, [r7, #26]
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <f_open+0x1d4>
						res = FR_DENIED;
 8008876:	2307      	movs	r3, #7
 8008878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800887c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008880:	2b00      	cmp	r3, #0
 8008882:	d128      	bne.n	80088d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008894:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800889e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	f023 0301 	bic.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf14      	ite	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	2300      	moveq	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	f107 0314 	add.w	r3, r7, #20
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fb93 	bl	8006fe8 <inc_lock>
 80088c2:	4602      	mov	r2, r0
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <f_open+0x22e>
 80088d0:	2302      	movs	r3, #2
 80088d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80088d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 8095 	bne.w	8008a0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff f9af 	bl	8007c4a <ld_clust>
 80088ec:	4602      	mov	r2, r0
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	331c      	adds	r3, #28
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fa10 	bl	8006d1c <ld_dword>
 80088fc:	4602      	mov	r2, r0
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	88da      	ldrh	r2, [r3, #6]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	79fa      	ldrb	r2, [r7, #7]
 800891a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3330      	adds	r3, #48	; 0x30
 8008932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008936:	2100      	movs	r1, #0
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe fa7a 	bl	8006e32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	d060      	beq.n	8008a0a <f_open+0x362>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d05c      	beq.n	8008a0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	895b      	ldrh	r3, [r3, #10]
 800895c:	025b      	lsls	r3, r3, #9
 800895e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	657b      	str	r3, [r7, #84]	; 0x54
 800896c:	e016      	b.n	800899c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fd25 	bl	80073c2 <get_fat>
 8008978:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800897a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800897c:	2b01      	cmp	r3, #1
 800897e:	d802      	bhi.n	8008986 <f_open+0x2de>
 8008980:	2302      	movs	r3, #2
 8008982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898c:	d102      	bne.n	8008994 <f_open+0x2ec>
 800898e:	2301      	movs	r3, #1
 8008990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	657b      	str	r3, [r7, #84]	; 0x54
 800899c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <f_open+0x304>
 80089a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d8e0      	bhi.n	800896e <f_open+0x2c6>
				}
				fp->clust = clst;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80089b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d127      	bne.n	8008a0a <f_open+0x362>
 80089ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d022      	beq.n	8008a0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fcdb 	bl	8007384 <clust2sect>
 80089ce:	6478      	str	r0, [r7, #68]	; 0x44
 80089d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d103      	bne.n	80089de <f_open+0x336>
						res = FR_INT_ERR;
 80089d6:	2302      	movs	r3, #2
 80089d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089dc:	e015      	b.n	8008a0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80089de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e0:	0a5a      	lsrs	r2, r3, #9
 80089e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	7858      	ldrb	r0, [r3, #1]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a1a      	ldr	r2, [r3, #32]
 80089f8:	2301      	movs	r3, #1
 80089fa:	f7fe f919 	bl	8006c30 <disk_read>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <f_open+0x362>
 8008a04:	2301      	movs	r3, #1
 8008a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <f_open+0x370>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3760      	adds	r7, #96	; 0x60
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	; 0x38
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f107 0214 	add.w	r2, r7, #20
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fdb3 	bl	80085b0 <validate>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d107      	bne.n	8008a68 <f_read+0x44>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7d5b      	ldrb	r3, [r3, #21]
 8008a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <f_read+0x4a>
 8008a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a6c:	e115      	b.n	8008c9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	7d1b      	ldrb	r3, [r3, #20]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <f_read+0x5a>
 8008a7a:	2307      	movs	r3, #7
 8008a7c:	e10d      	b.n	8008c9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	f240 80fe 	bls.w	8008c90 <f_read+0x26c>
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008a98:	e0fa      	b.n	8008c90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 80c6 	bne.w	8008c34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	0a5b      	lsrs	r3, r3, #9
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	8952      	ldrh	r2, [r2, #10]
 8008ab2:	3a01      	subs	r2, #1
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d12f      	bne.n	8008b1e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d103      	bne.n	8008ace <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	633b      	str	r3, [r7, #48]	; 0x30
 8008acc:	e013      	b.n	8008af6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d007      	beq.n	8008ae6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	4619      	mov	r1, r3
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7fe fef9 	bl	80078d4 <clmt_clust>
 8008ae2:	6338      	str	r0, [r7, #48]	; 0x30
 8008ae4:	e007      	b.n	8008af6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fe fc67 	bl	80073c2 <get_fat>
 8008af4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d804      	bhi.n	8008b06 <f_read+0xe2>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2202      	movs	r2, #2
 8008b00:	755a      	strb	r2, [r3, #21]
 8008b02:	2302      	movs	r3, #2
 8008b04:	e0c9      	b.n	8008c9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d104      	bne.n	8008b18 <f_read+0xf4>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	755a      	strb	r2, [r3, #21]
 8008b14:	2301      	movs	r3, #1
 8008b16:	e0c0      	b.n	8008c9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f7fe fc2c 	bl	8007384 <clust2sect>
 8008b2c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <f_read+0x11a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2202      	movs	r2, #2
 8008b38:	755a      	strb	r2, [r3, #21]
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e0ad      	b.n	8008c9a <f_read+0x276>
			sect += csect;
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	0a5b      	lsrs	r3, r3, #9
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d039      	beq.n	8008bc6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	4413      	add	r3, r2
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	8952      	ldrh	r2, [r2, #10]
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d905      	bls.n	8008b6c <f_read+0x148>
					cc = fs->csize - csect;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	895b      	ldrh	r3, [r3, #10]
 8008b64:	461a      	mov	r2, r3
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	7858      	ldrb	r0, [r3, #1]
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b76:	f7fe f85b 	bl	8006c30 <disk_read>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <f_read+0x166>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	755a      	strb	r2, [r3, #21]
 8008b86:	2301      	movs	r3, #1
 8008b88:	e087      	b.n	8008c9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	7d1b      	ldrb	r3, [r3, #20]
 8008b8e:	b25b      	sxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	da14      	bge.n	8008bbe <f_read+0x19a>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a1a      	ldr	r2, [r3, #32]
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d90d      	bls.n	8008bbe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1a      	ldr	r2, [r3, #32]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	025b      	lsls	r3, r3, #9
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	18d0      	adds	r0, r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3330      	adds	r3, #48	; 0x30
 8008bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bb8:	4619      	mov	r1, r3
 8008bba:	f7fe f919 	bl	8006df0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	025b      	lsls	r3, r3, #9
 8008bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008bc4:	e050      	b.n	8008c68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d02e      	beq.n	8008c2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	7d1b      	ldrb	r3, [r3, #20]
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da18      	bge.n	8008c0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	7858      	ldrb	r0, [r3, #1]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	2301      	movs	r3, #1
 8008bea:	f7fe f841 	bl	8006c70 <disk_write>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <f_read+0x1da>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	755a      	strb	r2, [r3, #21]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e04d      	b.n	8008c9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7d1b      	ldrb	r3, [r3, #20]
 8008c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	7858      	ldrb	r0, [r3, #1]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c16:	2301      	movs	r3, #1
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	f7fe f809 	bl	8006c30 <disk_read>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <f_read+0x20a>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	755a      	strb	r2, [r3, #21]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e035      	b.n	8008c9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d901      	bls.n	8008c4e <f_read+0x22a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5c:	4413      	add	r3, r2
 8008c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c60:	4619      	mov	r1, r3
 8008c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c64:	f7fe f8c4 	bl	8006df0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	4413      	add	r3, r2
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c76:	441a      	add	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	619a      	str	r2, [r3, #24]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	441a      	add	r2, r3
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f47f af01 	bne.w	8008a9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3738      	adds	r7, #56	; 0x38
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b08c      	sub	sp, #48	; 0x30
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f107 0210 	add.w	r2, r7, #16
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fc74 	bl	80085b0 <validate>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d107      	bne.n	8008ce6 <f_write+0x44>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	7d5b      	ldrb	r3, [r3, #21]
 8008cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <f_write+0x4a>
 8008ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cea:	e14b      	b.n	8008f84 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	7d1b      	ldrb	r3, [r3, #20]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <f_write+0x5a>
 8008cf8:	2307      	movs	r3, #7
 8008cfa:	e143      	b.n	8008f84 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	699a      	ldr	r2, [r3, #24]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	441a      	add	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	f080 812d 	bcs.w	8008f68 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	43db      	mvns	r3, r3
 8008d14:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008d16:	e127      	b.n	8008f68 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f040 80e3 	bne.w	8008eec <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	0a5b      	lsrs	r3, r3, #9
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	8952      	ldrh	r2, [r2, #10]
 8008d30:	3a01      	subs	r2, #1
 8008d32:	4013      	ands	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d143      	bne.n	8008dc4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10c      	bne.n	8008d5e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11a      	bne.n	8008d86 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fd25 	bl	80077a4 <create_chain>
 8008d5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d5c:	e013      	b.n	8008d86 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f7fe fdb1 	bl	80078d4 <clmt_clust>
 8008d72:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d74:	e007      	b.n	8008d86 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f7fe fd10 	bl	80077a4 <create_chain>
 8008d84:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 80f2 	beq.w	8008f72 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d104      	bne.n	8008d9e <f_write+0xfc>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2202      	movs	r2, #2
 8008d98:	755a      	strb	r2, [r3, #21]
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e0f2      	b.n	8008f84 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d104      	bne.n	8008db0 <f_write+0x10e>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	755a      	strb	r2, [r3, #21]
 8008dac:	2301      	movs	r3, #1
 8008dae:	e0e9      	b.n	8008f84 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <f_write+0x122>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	7d1b      	ldrb	r3, [r3, #20]
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	da18      	bge.n	8008e00 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	7858      	ldrb	r0, [r3, #1]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f7fd ff47 	bl	8006c70 <disk_write>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d004      	beq.n	8008df2 <f_write+0x150>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	755a      	strb	r2, [r3, #21]
 8008dee:	2301      	movs	r3, #1
 8008df0:	e0c8      	b.n	8008f84 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	7d1b      	ldrb	r3, [r3, #20]
 8008df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f7fe fabb 	bl	8007384 <clust2sect>
 8008e0e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d104      	bne.n	8008e20 <f_write+0x17e>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	755a      	strb	r2, [r3, #21]
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e0b1      	b.n	8008f84 <f_write+0x2e2>
			sect += csect;
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	4413      	add	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	0a5b      	lsrs	r3, r3, #9
 8008e2c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d03c      	beq.n	8008eae <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	4413      	add	r3, r2
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	8952      	ldrh	r2, [r2, #10]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d905      	bls.n	8008e4e <f_write+0x1ac>
					cc = fs->csize - csect;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	895b      	ldrh	r3, [r3, #10]
 8008e46:	461a      	mov	r2, r3
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	7858      	ldrb	r0, [r3, #1]
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	69f9      	ldr	r1, [r7, #28]
 8008e58:	f7fd ff0a 	bl	8006c70 <disk_write>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <f_write+0x1ca>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	755a      	strb	r2, [r3, #21]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e08b      	b.n	8008f84 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1a      	ldr	r2, [r3, #32]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	6a3a      	ldr	r2, [r7, #32]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d915      	bls.n	8008ea6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a1a      	ldr	r2, [r3, #32]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	025b      	lsls	r3, r3, #9
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e92:	4619      	mov	r1, r3
 8008e94:	f7fd ffac 	bl	8006df0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	7d1b      	ldrb	r3, [r3, #20]
 8008e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	025b      	lsls	r3, r3, #9
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008eac:	e03f      	b.n	8008f2e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d016      	beq.n	8008ee6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d210      	bcs.n	8008ee6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	7858      	ldrb	r0, [r3, #1]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ece:	2301      	movs	r3, #1
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	f7fd fead 	bl	8006c30 <disk_read>
 8008ed6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d004      	beq.n	8008ee6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	755a      	strb	r2, [r3, #21]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e04e      	b.n	8008f84 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d901      	bls.n	8008f06 <f_write+0x264>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f14:	4413      	add	r3, r2
 8008f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f18:	69f9      	ldr	r1, [r7, #28]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fd ff68 	bl	8006df0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	7d1b      	ldrb	r3, [r3, #20]
 8008f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	4413      	add	r3, r2
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	441a      	add	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	619a      	str	r2, [r3, #24]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	bf38      	it	cc
 8008f4e:	461a      	movcc	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	60da      	str	r2, [r3, #12]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	441a      	add	r2, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f47f aed4 	bne.w	8008d18 <f_write+0x76>
 8008f70:	e000      	b.n	8008f74 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f72:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	7d1b      	ldrb	r3, [r3, #20]
 8008f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3730      	adds	r7, #48	; 0x30
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f107 0208 	add.w	r2, r7, #8
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fb07 	bl	80085b0 <validate>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d168      	bne.n	800907e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	7d1b      	ldrb	r3, [r3, #20]
 8008fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d062      	beq.n	800907e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7d1b      	ldrb	r3, [r3, #20]
 8008fbc:	b25b      	sxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da15      	bge.n	8008fee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	7858      	ldrb	r0, [r3, #1]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1a      	ldr	r2, [r3, #32]
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	f7fd fe4d 	bl	8006c70 <disk_write>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <f_sync+0x54>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e04f      	b.n	8009080 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7d1b      	ldrb	r3, [r3, #20]
 8008fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008fee:	f7fd fd81 	bl	8006af4 <get_fattime>
 8008ff2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7fe f925 	bl	800724c <move_window>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d138      	bne.n	800907e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	330b      	adds	r3, #11
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	330b      	adds	r3, #11
 800901c:	f042 0220 	orr.w	r2, r2, #32
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	461a      	mov	r2, r3
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	f7fe fe2a 	bl	8007c88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f103 021c 	add.w	r2, r3, #28
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	4619      	mov	r1, r3
 8009040:	4610      	mov	r0, r2
 8009042:	f7fd fea9 	bl	8006d98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3316      	adds	r3, #22
 800904a:	6939      	ldr	r1, [r7, #16]
 800904c:	4618      	mov	r0, r3
 800904e:	f7fd fea3 	bl	8006d98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3312      	adds	r3, #18
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f7fd fe82 	bl	8006d62 <st_word>
					fs->wflag = 1;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2201      	movs	r2, #1
 8009062:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe f91e 	bl	80072a8 <sync_fs>
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	7d1b      	ldrb	r3, [r3, #20]
 8009074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009078:	b2da      	uxtb	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800907e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff ff7b 	bl	8008f8c <f_sync>
 8009096:	4603      	mov	r3, r0
 8009098:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d118      	bne.n	80090d2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f107 0208 	add.w	r2, r7, #8
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fa81 	bl	80085b0 <validate>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10c      	bne.n	80090d2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fe f821 	bl	8007104 <dec_lock>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80090f2:	4b1f      	ldr	r3, [pc, #124]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 80090f4:	7a5b      	ldrb	r3, [r3, #9]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d131      	bne.n	8009160 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090fc:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 80090fe:	7a5b      	ldrb	r3, [r3, #9]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009106:	2100      	movs	r1, #0
 8009108:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800910a:	4b19      	ldr	r3, [pc, #100]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 800910c:	7a5b      	ldrb	r3, [r3, #9]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	4a17      	ldr	r2, [pc, #92]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800911a:	4b15      	ldr	r3, [pc, #84]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 800911c:	7a5b      	ldrb	r3, [r3, #9]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009124:	4413      	add	r3, r2
 8009126:	79fa      	ldrb	r2, [r7, #7]
 8009128:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800912a:	4b11      	ldr	r3, [pc, #68]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 800912c:	7a5b      	ldrb	r3, [r3, #9]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	b2d1      	uxtb	r1, r2
 8009134:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009136:	7251      	strb	r1, [r2, #9]
 8009138:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800913a:	7dbb      	ldrb	r3, [r7, #22]
 800913c:	3330      	adds	r3, #48	; 0x30
 800913e:	b2da      	uxtb	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	3301      	adds	r3, #1
 8009148:	223a      	movs	r2, #58	; 0x3a
 800914a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3302      	adds	r3, #2
 8009150:	222f      	movs	r2, #47	; 0x2f
 8009152:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	3303      	adds	r3, #3
 8009158:	2200      	movs	r2, #0
 800915a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	200000a0 	.word	0x200000a0

08009174 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800917e:	2200      	movs	r2, #0
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ffaa 	bl	80090dc <FATFS_LinkDriverEx>
 8009188:	4603      	mov	r3, r0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <__libc_init_array>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4e0d      	ldr	r6, [pc, #52]	; (80091cc <__libc_init_array+0x38>)
 8009198:	4c0d      	ldr	r4, [pc, #52]	; (80091d0 <__libc_init_array+0x3c>)
 800919a:	1ba4      	subs	r4, r4, r6
 800919c:	10a4      	asrs	r4, r4, #2
 800919e:	2500      	movs	r5, #0
 80091a0:	42a5      	cmp	r5, r4
 80091a2:	d109      	bne.n	80091b8 <__libc_init_array+0x24>
 80091a4:	4e0b      	ldr	r6, [pc, #44]	; (80091d4 <__libc_init_array+0x40>)
 80091a6:	4c0c      	ldr	r4, [pc, #48]	; (80091d8 <__libc_init_array+0x44>)
 80091a8:	f000 f820 	bl	80091ec <_init>
 80091ac:	1ba4      	subs	r4, r4, r6
 80091ae:	10a4      	asrs	r4, r4, #2
 80091b0:	2500      	movs	r5, #0
 80091b2:	42a5      	cmp	r5, r4
 80091b4:	d105      	bne.n	80091c2 <__libc_init_array+0x2e>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091bc:	4798      	blx	r3
 80091be:	3501      	adds	r5, #1
 80091c0:	e7ee      	b.n	80091a0 <__libc_init_array+0xc>
 80091c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091c6:	4798      	blx	r3
 80091c8:	3501      	adds	r5, #1
 80091ca:	e7f2      	b.n	80091b2 <__libc_init_array+0x1e>
 80091cc:	080095c4 	.word	0x080095c4
 80091d0:	080095c4 	.word	0x080095c4
 80091d4:	080095c4 	.word	0x080095c4
 80091d8:	080095c8 	.word	0x080095c8

080091dc <memset>:
 80091dc:	4402      	add	r2, r0
 80091de:	4603      	mov	r3, r0
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d100      	bne.n	80091e6 <memset+0xa>
 80091e4:	4770      	bx	lr
 80091e6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ea:	e7f9      	b.n	80091e0 <memset+0x4>

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
